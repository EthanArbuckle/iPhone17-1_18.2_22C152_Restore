void sub_1000A0AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

double AWDMetricsHandlers_handle_restore_stabilityData(void)
{
  double result = *(double *)&stability_settings;
  xmmword_1004FC164 = stability_settings;
  dword_1004FC174 = xmmword_1004B5FD8;
  qword_1004FC178 = *((void *)&xmmword_1004B5FD8 + 1);
  return result;
}

void AWDMetricsHandlers_handle_restore_daemon_reset(void)
{
  char v3 = 18;
  strcpy(__p, "num_daemon_restart");
  v4 = __p;
  v0 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4);
  v1 = (const char *)(v0 + 7);
  if ((*((char *)v0 + 79) & 0x80000000) == 0)
  {
    dword_1004FC160 = atoi(v1);
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(*(void **)__p);
    return;
  }
  dword_1004FC160 = atoi(*(const char **)v1);
  if (v3 < 0) {
    goto LABEL_5;
  }
}

void sub_1000A0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AWDMetricsHandlers_handle_reset_daemon(void)
{
  dword_1004FC160 = 0;
  BYTE7(v3[2]) = 18;
  strcpy((char *)v3, "num_daemon_restanum_daemon_restart");
  v4 = &v3[1];
  v0 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v3[1], (uint64_t)&std::piecewise_construct, &v4);
  std::string::assign((std::string *)(v0 + 7), "0");
  if (SBYTE7(v3[2]) < 0) {
    operator delete(*(void **)&v3[1]);
  }
  BYTE7(v3[2]) = 18;
  strcpy((char *)&v3[2], "rt");
  v3[1] = v3[0];
  v4 = &v3[1];
  v1 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v3[1], (uint64_t)&std::piecewise_construct, &v4);
  v2 = (const char *)(v1 + 7);
  if (*((char *)v1 + 79) < 0) {
    v2 = *(const char **)v2;
  }
  saveStringValue("num_daemon_restart", v2);
  if (SBYTE7(v3[2]) < 0) {
    operator delete(*(void **)&v3[1]);
  }
}

void sub_1000A0E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AWDMetricsHandlers_handle_update_PowerCounter_HostWakeup(int a1)
{
  v2 = log_get_logging_obg("com.apple.wpantund.awd", "default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AWDMetrics : AWDMetricsHandlers_handle_update_PowerCounter_HostWakeup HostWakeup Reason %d \n", (uint8_t *)v3, 8u);
  }

  LODWORD(xmmword_1004FC1A0) = xmmword_1004FC1A0 + 1;
  ++*((_DWORD *)&xmmword_1004FBEB0 + a1 + 188);
}

uint64_t AWDMetricsHandlers_handle_get_PowerCountersData(void *a1)
{
  v1 = a1;
  [v1 setHostWakeupsCount:xmmword_1004FC1A0];
  [v1 addHostWakeupsCountHistogram:DWORD1(xmmword_1004FC1A0)];
  [v1 addHostWakeupsCountHistogram:DWORD2(xmmword_1004FC1A0)];
  [v1 addHostWakeupsCountHistogram:HIDWORD(xmmword_1004FC1A0)];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1B0];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1B4];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1B8];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1BC];
  [v1 addHostWakeupsCountHistogram:xmmword_1004FC1C0];
  [v1 addHostWakeupsCountHistogram:DWORD1(xmmword_1004FC1C0)];
  [v1 addHostWakeupsCountHistogram:DWORD2(xmmword_1004FC1C0)];
  [v1 addHostWakeupsCountHistogram:HIDWORD(xmmword_1004FC1C0)];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1D0];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1D4];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1D8];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1DC];
  [v1 addHostWakeupsCountHistogram:xmmword_1004FC1E0];
  [v1 addHostWakeupsCountHistogram:DWORD1(xmmword_1004FC1E0)];
  [v1 addHostWakeupsCountHistogram:DWORD2(xmmword_1004FC1E0)];
  [v1 addHostWakeupsCountHistogram:HIDWORD(xmmword_1004FC1E0)];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1F0];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1F4];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1F8];
  [v1 addHostWakeupsCountHistogram:dword_1004FC1FC];

  return 0;
}

void sub_1000A10C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A10D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AWDMetricsHandlers_handle_getprop_connectednodes(void *a1, void *a2)
{
  id v3 = a1;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  memset(v58, 0, sizeof(v58));
  id v4 = a2;
  id v52 = v4;
  xpc_object_t xarray = v3;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    v5 = log_get_logging_obg("com.apple.wpantund.awd", "default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      AWDMetricsHandlers_handle_getprop_connectednodes();
    }

    v6 = 0;
    uint64_t v7 = 1;
    goto LABEL_153;
  }
  size_t count = xpc_array_get_count(v3);
  v8 = log_get_logging_obg("com.apple.wpantund.awd", "default");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "AWDMetrics : ConnectedNodesHistogram array with size %ld.", (uint8_t *)&buf, 0xCu);
  }

  if (!count)
  {
    v6 = 0;
    goto LABEL_99;
  }
  size_t v9 = 0;
  v6 = 0;
  do
  {
    while (1)
    {
      v10 = xpc_array_get_dictionary(xarray, v9);

      v55 = v10;
      string = xpc_dictionary_get_string(v10, "key");
      size_t v12 = strlen(string);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v15 = v12 | 7;
        }
        uint64_t v16 = v15 + 1;
        p_std::string buf = (std::string *)operator new(v15 + 1);
        buf.__r_.__value_.__l.__size_ = v13;
        buf.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
LABEL_18:
        memmove(p_buf, string, v13);
        goto LABEL_19;
      }
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v12;
      p_std::string buf = &buf;
      if (v12) {
        goto LABEL_18;
      }
LABEL_19:
      p_buf->__r_.__value_.__s.__data_[v13] = 0;
      int uint64 = xpc_dictionary_get_uint64(v10, "value");
      std::string::size_type v17 = std::string::find(&buf, 91, 0);
      std::string::size_type v18 = std::string::find(&buf, 93, 0);
      std::string::size_type v19 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
      v21 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v22 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v22 = buf.__r_.__value_.__l.__size_;
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v23 = &buf;
      }
      else {
        v23 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      v24 = (std::string *)((char *)v23 + v22);
      v25 = (std::string *)((char *)v23 + v22);
      if (v22 > 19)
      {
        uint64_t v26 = v22;
        v27 = v23;
        do
        {
          v28 = memchr(v27, 67, v26 - 19);
          if (!v28) {
            break;
          }
          v25 = (std::string *)v28;
          if (*v28 == 0x657463656E6E6F43 && v28[1] == 0x43726574756F5264 && *((_DWORD *)v28 + 4) == 1953396079) {
            goto LABEL_37;
          }
          v27 = (std::string *)((char *)v28 + 1);
          uint64_t v26 = (char *)v24 - ((char *)&v25->__r_.__value_.__l.__data_ + 1);
        }
        while (v26 > 19);
        v25 = (std::string *)((char *)v23 + v22);
      }
LABEL_37:
      if (v22 >= 19)
      {
        v31 = v23;
        do
        {
          v32 = (std::string *)memchr(v31, 67, v22 - 18);
          if (!v32) {
            break;
          }
          if (v32->__r_.__value_.__r.__words[0] == 0x657463656E6E6F43
            && v32->__r_.__value_.__l.__size_ == 0x6F43646C69684364
            && *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 3) == 0x746E756F43646C69)
          {
            goto LABEL_49;
          }
          v31 = (std::string *)((char *)&v32->__r_.__value_.__l.__data_ + 1);
          int64_t v22 = (char *)v24 - (char *)v31;
        }
        while ((char *)v24 - (char *)v31 > 18);
      }
      v32 = v24;
LABEL_49:
      if (v25 != v24 && v25 == v23 && v17 != -1 && v18 != -1)
      {
        if ((v19 & 0x80) != 0)
        {
          if (size <= v17) {
LABEL_124:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (v17 >= v19) {
            goto LABEL_124;
          }
          v21 = &buf;
          std::string::size_type size = v19;
        }
        std::string::size_type v35 = v17 + 1;
        if (size - (v17 + 1) >= v18 - 1) {
          std::string::size_type v36 = v18 - 1;
        }
        else {
          std::string::size_type v36 = size - (v17 + 1);
        }
        if (v36 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v36 >= 0x17)
        {
          uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17) {
            uint64_t v38 = v36 | 7;
          }
          uint64_t v39 = v38 + 1;
          p_dst = (std::string *)operator new(v38 + 1);
          __dst.__r_.__value_.__l.__size_ = v36;
          __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v36;
          p_dst = &__dst;
          if (!v36) {
            goto LABEL_77;
          }
        }
        memmove(p_dst, (char *)v21 + v35, v36);
LABEL_77:
        p_dst->__r_.__value_.__s.__data_[v36] = 0;
        unsigned __int8 v40 = std::stoi(&__dst, 0, 10);
        if ((v40 & 0xF8u) > 0x17) {
          goto LABEL_94;
        }
        unsigned int v41 = v40;
        v42 = &v59;
        goto LABEL_93;
      }
      if (v32 == v24 || v32 != v23 || v17 == -1 || v18 == -1) {
        goto LABEL_9;
      }
      if ((v19 & 0x80) != 0)
      {
        if (size <= v17) {
LABEL_126:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
      }
      else
      {
        if (v17 >= v19) {
          goto LABEL_126;
        }
        v21 = &buf;
        std::string::size_type size = v19;
      }
      std::string::size_type v43 = v17 + 1;
      if (size - (v17 + 1) >= v18 - 1) {
        std::string::size_type v44 = v18 - 1;
      }
      else {
        std::string::size_type v44 = size - (v17 + 1);
      }
      if (v44 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v44 >= 0x17)
      {
        uint64_t v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17) {
          uint64_t v46 = v44 | 7;
        }
        uint64_t v47 = v46 + 1;
        v45 = (std::string *)operator new(v46 + 1);
        __dst.__r_.__value_.__l.__size_ = v44;
        __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44;
        v45 = &__dst;
        if (!v44) {
          goto LABEL_91;
        }
      }
      memmove(v45, (char *)v21 + v43, v44);
LABEL_91:
      v45->__r_.__value_.__s.__data_[v44] = 0;
      unsigned __int8 v48 = std::stoi(&__dst, 0, 10);
      if ((v48 & 0xF8u) > 0x17) {
        goto LABEL_94;
      }
      unsigned int v41 = v48;
      v42 = v58;
LABEL_93:
      *((_DWORD *)v42 + v41) = uint64;
LABEL_94:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
LABEL_9:
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      ++v9;
      id v4 = v52;
      v6 = v55;
      if (v9 == count) {
        goto LABEL_96;
      }
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    ++v9;
    id v4 = v52;
    v6 = v55;
  }
  while (v9 != count);
LABEL_96:
  if (v59)
  {
    uint64_t v49 = 0;
    goto LABEL_152;
  }
LABEL_99:
  if (DWORD1(v59))
  {
    uint64_t v49 = 1;
  }
  else if (DWORD2(v59))
  {
    uint64_t v49 = 2;
  }
  else if (HIDWORD(v59))
  {
    uint64_t v49 = 3;
  }
  else if (v60)
  {
    uint64_t v49 = 4;
  }
  else if (DWORD1(v60))
  {
    uint64_t v49 = 5;
  }
  else if (DWORD2(v60))
  {
    uint64_t v49 = 6;
  }
  else if (HIDWORD(v60))
  {
    uint64_t v49 = 7;
  }
  else if (v61)
  {
    uint64_t v49 = 8;
  }
  else if (DWORD1(v61))
  {
    uint64_t v49 = 9;
  }
  else
  {
    if (DWORD2(v61))
    {
      uint64_t v49 = 10;
    }
    else if (HIDWORD(v61))
    {
      uint64_t v49 = 11;
    }
    else if (v62)
    {
      uint64_t v49 = 12;
    }
    else if (DWORD1(v62))
    {
      uint64_t v49 = 13;
    }
    else if (DWORD2(v62))
    {
      uint64_t v49 = 14;
    }
    else if (HIDWORD(v62))
    {
      uint64_t v49 = 15;
    }
    else if (v63)
    {
      uint64_t v49 = 16;
    }
    else if (DWORD1(v63))
    {
      uint64_t v49 = 17;
    }
    else if (DWORD2(v63))
    {
      uint64_t v49 = 18;
    }
    else if (HIDWORD(v63))
    {
      uint64_t v49 = 19;
    }
    else if (v64)
    {
      uint64_t v49 = 20;
    }
    else if (DWORD1(v64))
    {
      uint64_t v49 = 21;
    }
    else if (DWORD2(v64))
    {
      uint64_t v49 = 22;
    }
    else if (HIDWORD(v64))
    {
      uint64_t v49 = 23;
    }
    else
    {
      uint64_t v49 = 0;
    }
    id v4 = v52;
  }
LABEL_152:
  objc_msgSend(v4, "setChildNodesCount:", *((unsigned int *)v58 + v49), count);
  [v4 setRouterNodesCount:*((unsigned int *)&v59 + v49)];
  uint64_t v7 = 0;
LABEL_153:

  return v7;
}

void sub_1000A1884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

uint64_t AWDMetricsHandlers_ctcsmetrics_update(int a1, int a2, int a3)
{
  BOOL v4 = dword_1004FC2B8 == a1 && dword_1004FC2C0 == a2 && dword_1004FC2C4 == a3;
  int v5 = v4;
  if (!v4)
  {
    dword_1004FC2B8 = a1;
    dword_1004FC2C0 = a2;
    dword_1004FC2C4 = a3;
  }
  return v5 ^ 1u;
}

void AWDMetricsHandlers_topologymetrics_update(int a1, int a2, int a3, double a4, double a5)
{
  int v8 = a2 + a1 + a3;
  unsigned int v9 = dword_1004FC2A0;
  ++dword_1004FC2A4;
  if (dword_1004FC2A0 == 10)
  {
    unsigned int v9 = 0;
    dword_1004FC2A0 = 0;
  }
  *((_DWORD *)&xmmword_1004FBEB0 + v9 + 212) = v8;
  *((_DWORD *)&xmmword_1004FBEB0 + dword_1004FC2A0 + 222) = a2;
  *((_DWORD *)&xmmword_1004FBEB0 + dword_1004FC2A0 + 232) = a3;
  *((_DWORD *)&xmmword_1004FBEB0 + dword_1004FC2A0 + 242) = a1;
  unsigned int v10 = v8 - dword_1004FC2AC;
  if (v8 - dword_1004FC2AC < 0) {
    unsigned int v10 = dword_1004FC2AC - v8;
  }
  if (HIDWORD(qword_1004FC2B0) > v10) {
    unsigned int v10 = HIDWORD(qword_1004FC2B0);
  }
  ++dword_1004FC2A0;
  HIDWORD(qword_1004FC2B0) = v10;
  unsigned int v11 = dword_1004FC2A8;
  if (v8 != dword_1004FC2AC) {
    unsigned int v11 = ++dword_1004FC2A8;
  }
  LODWORD(a5) = dword_1004FC2A4;
  LODWORD(qword_1004FC2B0) = vcvtpd_u64_f64((double)v11 / (double)*(unint64_t *)&a5 * 100.0);
  size_t v12 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13[0] = 67111424;
    v13[1] = v8;
    __int16 v14 = 1024;
    int v15 = a1;
    __int16 v16 = 1024;
    int v17 = a2;
    __int16 v18 = 1024;
    int v19 = a3;
    __int16 v20 = 1024;
    int v21 = dword_1004FC2A0;
    __int16 v22 = 1024;
    int v23 = dword_1004FC2AC;
    __int16 v24 = 1024;
    int v25 = HIDWORD(qword_1004FC2B0);
    __int16 v26 = 1024;
    int v27 = dword_1004FC2A4;
    __int16 v28 = 1024;
    int v29 = dword_1004FC2A8;
    __int16 v30 = 1024;
    int v31 = qword_1004FC2B0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "AWDMetricsHandlers_topologymetrics_update::updateTopologyStats - totalNodes=%d totalRouters=%d totalFed=%d totalSed=%d  totalArrayEntries=%d mPrevTotalNodes=%d  mMaxTopologyChange=%d mTotalTimePoint=%d mTotalUpdateTimePoint=%d mPercentageChange=%d", (uint8_t *)v13, 0x3Eu);
  }

  dword_1004FC2AC = v8;
}

double AWDMetricsHandlers_topologymetrics_reset(void)
{
  qword_1004FC2B0 = 0;
  double result = 0.0;
  xmmword_1004FC200 = 0u;
  *(_OWORD *)algn_1004FC210 = 0u;
  xmmword_1004FC220 = 0u;
  unk_1004FC230 = 0u;
  xmmword_1004FC240 = 0u;
  unk_1004FC250 = 0u;
  xmmword_1004FC260 = 0u;
  unk_1004FC270 = 0u;
  xmmword_1004FC280 = 0u;
  unk_1004FC290 = 0u;
  unk_1004FC29C = 0u;
  return result;
}

uint64_t AWDMetricsHandlers_topologymetrics_IsModified(void)
{
  if (dword_1004FC2A8) {
    return 1;
  }
  v1 = log_get_logging_obg("com.apple.wpantund.awd", "default");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "AWDMetrics : AWDMetricsHandlers_topologymetrics_IsModified : No change in topology from previous. Return here", v2, 2u);
  }

  return 0;
}

uint64_t AWDMetricsHandlers_topologymetrics_get(void *a1)
{
  v1 = a1;
  if (dword_1004FC2A0)
  {
    unint64_t v2 = 0;
    do
    {
      unsigned int v3 = *((_DWORD *)&_MergedGlobals_6 + v2 + 214);
      double v4 = (double)v3;
      if (v3)
      {
        long double v5 = log10((double)v3) + 1.0;
        unsigned int v3 = (int)v5 - 1;
        if ((int)v5 <= 1) {
          unsigned int v3 = 0;
        }
      }
      double v6 = __exp10((double)(int)v3);
      [v1 addNodeCount:(int)(v6 * (double)(int)(v4 / v6))];
      ++v2;
    }
    while (v2 < dword_1004FC2A0);
    if (dword_1004FC2A0)
    {
      unint64_t v7 = 0;
      do
      {
        unsigned int v8 = *((_DWORD *)&_MergedGlobals_6 + v7 + 244);
        double v9 = (double)v8;
        if (v8)
        {
          long double v10 = log10((double)v8) + 1.0;
          unsigned int v8 = (int)v10 - 1;
          if ((int)v10 <= 1) {
            unsigned int v8 = 0;
          }
        }
        double v11 = __exp10((double)(int)v8);
        [v1 addRouterCount:(int)(v11 * (double)(int)(v9 / v11))];
        ++v7;
      }
      while (v7 < dword_1004FC2A0);
      if (dword_1004FC2A0)
      {
        unint64_t v12 = 0;
        do
        {
          unsigned int v13 = *((_DWORD *)&_MergedGlobals_6 + v12 + 224);
          double v14 = (double)v13;
          if (v13)
          {
            long double v15 = log10((double)v13) + 1.0;
            unsigned int v13 = (int)v15 - 1;
            if ((int)v15 <= 1) {
              unsigned int v13 = 0;
            }
          }
          double v16 = __exp10((double)(int)v13);
          [v1 addFEDCount:(int)(v16 * (double)(int)(v14 / v16))];
          ++v12;
        }
        while (v12 < dword_1004FC2A0);
        if (dword_1004FC2A0)
        {
          unint64_t v17 = 0;
          do
          {
            unsigned int v18 = *((_DWORD *)&_MergedGlobals_6 + v17 + 234);
            double v19 = (double)v18;
            if (v18)
            {
              long double v20 = log10((double)v18) + 1.0;
              unsigned int v18 = (int)v20 - 1;
              if ((int)v20 <= 1) {
                unsigned int v18 = 0;
              }
            }
            double v21 = __exp10((double)(int)v18);
            [v1 addSEDCount:(int)(v21 * (double)(int)(v19 / v21))];
            ++v17;
          }
          while (v17 < dword_1004FC2A0);
        }
      }
    }
  }
  [v1 setMaxChangeinNodeCount:HIDWORD(qword_1004FC2B0)];
  [v1 setPercTopologyChangeTimeInstances:qword_1004FC2B0];
  qword_1004FC2B0 = 0;
  xmmword_1004FC200 = 0u;
  *(_OWORD *)algn_1004FC210 = 0u;
  xmmword_1004FC220 = 0u;
  unk_1004FC230 = 0u;
  xmmword_1004FC240 = 0u;
  unk_1004FC250 = 0u;
  xmmword_1004FC260 = 0u;
  unk_1004FC270 = 0u;
  xmmword_1004FC280 = 0u;
  unk_1004FC290 = 0u;
  unk_1004FC29C = 0u;

  return 0;
}

void sub_1000A1E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_AWDMetricsHandlers_mm()
{
  *(void *)&dword_1004FC190 = 0;
  xmmword_1004FC180 = 0uLL;
  word_1004FC198 = 0;
  unk_1004B5F68 = 0;
  m_daemonVersionString = 0uLL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &m_daemonVersionString, (void *)&_mh_execute_header);
  unk_1004B5F80 = 0;
  m_vendorVersionString = 0uLL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &m_vendorVersionString, (void *)&_mh_execute_header);
}

uint64_t ne_tunnel_open()
{
  interfaceRef = NEVirtualInterfaceCreateNexus();
  if (!interfaceRef)
  {
    interfaceRef = NEVirtualInterfaceCreateNexus();
    if (!interfaceRef)
    {
      v0 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v0)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
          ne_tunnel_open_cold_3(v0);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
    }
    char v14 = 6;
    strcpy((char *)v13, "ABSENT");
    char v12 = 6;
    strcpy((char *)v11, "ABSENT");
    char v10 = 6;
    strcpy(v9, "\tABSENT");
    strcpy((char *)v8, "Stability");
    char v7 = 13;
    strcpy((char *)v6, "Invalid State");
    __p = operator new(0x28uLL);
    long long v5 = xmmword_1003F3090;
    strcpy((char *)__p, "NE Virtual Interface Create Fail");
    AWDMetricsClient_TriggerAutoBugCaptures_internal((const std::string::value_type *)v13, (uint64_t)v11, (uint64_t)&v9[1], v8, v6, (uint64_t)&__p, 0);
    if (SHIBYTE(v5) < 0)
    {
      operator delete(__p);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v9[0] & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_25;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v6[0]);
    if ((v9[0] & 0x80000000) == 0)
    {
LABEL_13:
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_26;
    }
LABEL_25:
    operator delete((void *)v8[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(*(void **)&v9[1]);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_16;
      }
LABEL_28:
      operator delete(v13[0]);
      goto LABEL_16;
    }
LABEL_27:
    operator delete(v11[0]);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_16:
  NEVirtualInterfaceEnableFlowswitch();
  uint64_t v1 = NEVirtualInterfaceDupSocket();
  unint64_t v2 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v2)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v16 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Openned a tunnel with fd: %d ", buf, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  return v1;
}

void sub_1000A2280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A2290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a23);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v34 - 73) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((*(char *)(v34 - 73) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v34 - 49) & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(*(void **)(v34 - 72));
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(*(void **)(v34 - 96));
  if ((*(char *)(v34 - 49) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t ne_tunnel_close()
{
  return _NEVirtualInterfaceInvalidate(interfaceRef);
}

uint64_t ne_tunnel_name(char *a1, int a2)
{
  CFStringRef v4 = (const __CFString *)NEVirtualInterfaceCopyName();
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFStringGetTypeID())
    {
      uint64_t v8 = 0xFFFFFFFFLL;
LABEL_38:
      CFRelease(v5);
      return v8;
    }
    CFStringGetCString(v5, a1, a2, 0x8000100u);
    char v7 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v7)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v16 = 136315138;
        unint64_t v17 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Openned tunnel name is: %s ", (uint8_t *)&v16, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }

    BOOL v9 = NEVirtualInterfaceSetRankNever() == 0;
    uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
    double v11 = v10;
    if (v9)
    {
      if (v10)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          ne_tunnel_name_cold_5((uint64_t)a1, v11);
        }
LABEL_24:

        BOOL v12 = NEVirtualInterfaceUpdateAdHocService() == 0;
        uint64_t v13 = log_get_logging_obg("com.apple.threadradiod", "default");
        char v14 = v13;
        if (v12)
        {
          if (v13)
          {
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              ne_tunnel_name_cold_2((uint64_t)a1, v14);
            }
            goto LABEL_37;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_36:
          }
            -[PowerEventHandler_Rcp init:]();
        }
        else
        {
          if (v13)
          {
            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              int v16 = 136315138;
              unint64_t v17 = a1;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Updated AdHoc service on %s", (uint8_t *)&v16, 0xCu);
            }
            goto LABEL_37;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_36;
          }
        }
LABEL_37:

        uint64_t v8 = 0;
        goto LABEL_38;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
    }
    else
    {
      if (v10)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          int v16 = 136315138;
          unint64_t v17 = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Set rank on %s", (uint8_t *)&v16, 0xCu);
        }
        goto LABEL_24;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
    }
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_24;
  }
  return 0xFFFFFFFFLL;
}

void sub_1000A2698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ne_tunnel_set_mtu()
{
  return NEVirtualInterfaceSetMTU() != 0;
}

uint64_t ne_tunnel_get_ifindex()
{
  uint64_t Index = NEVirtualInterfaceGetIndex();
  uint64_t v1 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v1)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v3[0] = 67109120;
      v3[1] = Index;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Opened tunnel ifIndex is: %d ", (uint8_t *)v3, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  return Index;
}

void sub_1000A2804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ne_tunnel_add_address(void *a1, int a2, int a3)
{
  memset(v39, 0, sizeof(v39));
  long long v38 = 0u;
  *(_WORD *)__s = 14906;
  inet_ntop(30, a1, __s, 0x2Eu);
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v29 = v6;
    int64_t v30 = v9 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v30) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_8:
  }
    memcpy(p_dst, __s, v6);
  *((unsigned char *)p_dst + v6) = 0;
  uint64_t v10 = HIBYTE(v30);
  if (v30 >= 0) {
    double v11 = (void **)&__dst;
  }
  else {
    double v11 = __dst;
  }
  if (v30 < 0) {
    uint64_t v10 = v29;
  }
  BOOL v12 = (char *)v11 + v10;
  if (v10 >= 8)
  {
    uint64_t v13 = v11;
    do
    {
      char v14 = (char *)memchr(v13, 102, v10 - 7);
      if (!v14) {
        break;
      }
      if (*(void *)v14 == 0x3A303065663A6666) {
        goto LABEL_20;
      }
      uint64_t v13 = (void **)(v14 + 1);
      uint64_t v10 = v12 - (char *)v13;
    }
    while (v12 - (char *)v13 > 7);
  }
  char v14 = v12;
LABEL_20:
  BOOL v16 = v14 != v12 && v14 - (char *)v11 != -1;
  unint64_t v17 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v17)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = __s;
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = a2;
      HIWORD(buf[4]) = 1024;
      buf[5] = a3;
      LOWORD(buf[6]) = 1024;
      *(_DWORD *)((char *)&buf[6] + 2) = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Add Address: address_string: %s, prefixlen: %d preferred=%d isAddressLocator=%d", (uint8_t *)buf, 0x1Eu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  CFStringRef v18 = CFStringCreateWithCString(0, __s, 0x8000100u);
  double v19 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v19)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      buf[0] = 138412290;
      *(void *)&buf[1] = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Add Address: address: %@", (uint8_t *)buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  v36[0] = -1;
  v36[1] = -1;
  if ((a2 & 0x80) != 0) {
    unint64_t v20 = 128;
  }
  else {
    unint64_t v20 = a2;
  }
  bzero((char *)v36 + ((v20 + 7) >> 3), 16 - ((v20 + 7) >> 3));
  if ((v20 & 7) != 0) {
    *((unsigned char *)v36 + (v20 >> 3)) &= -256 >> (v20 & 7);
  }
  memset((char *)&buf[4] + 2, 0, 28);
  *(_OWORD *)((char *)buf + 2) = 0u;
  LOWORD(buf[0]) = 14906;
  inet_ntop(30, v36, (char *)buf, 0x2Eu);
  double v21 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v21)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v31 = 136315394;
      v32 = buf;
      __int16 v33 = 1024;
      v34[0] = a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Add Address: prefix_string: %s, prefixlen: %d", v31, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  CFStringRef v22 = CFStringCreateWithCString(0, (const char *)buf, 0x8000100u);
  int v23 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v23)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v31 = 138412290;
      v32 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Add Address: prefix_mask: %@", v31, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  if (v18 && v22)
  {
    if ((a3 & 1) != 0 || !v16)
    {
      int v24 = NEVirtualInterfaceAddAddress();
    }
    else
    {
      *(void *)((char *)v34 + 2) = 0xFFFFFFFFLL;
      int v24 = NEVirtualInterfaceAddAddressWithLifetime();
    }
    if (v24) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = 0xFFFFFFFFLL;
    }
    goto LABEL_66;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (v18)
  {
LABEL_66:
    CFRelease(v18);
    uint64_t v26 = v25;
  }
  if (v22) {
    CFRelease(v22);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
  return v26;
}

void sub_1000A2D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ne_tunnel_remove_address(void *a1)
{
  memset(v10, 0, sizeof(v10));
  long long v9 = 0u;
  *(_WORD *)cStr = 14906;
  inet_ntop(30, a1, cStr, 0x2Eu);
  uint64_t v1 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v1)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      char v7 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Remove Address: address_string: %s", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  unsigned int v3 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v3)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      char v7 = (char *)v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Remove Address: address: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  if (NEVirtualInterfaceRemoveAddress()) {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRelease(v2);
  return v4;
}

void sub_1000A2FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ne_tunnel_remove_all_address(void)
{
  v0 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v0)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CFStringRef v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Ne Remove All Address", v2, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }

  if (NEVirtualInterfaceRemoveAllAddresses()) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1000A30C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_ne_tunnel_mm()
{
}

uint64_t create_new_crash_dump_file(void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v5 = +[NSDate date];
  [v5 timeIntervalSince1970];
  int v6 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");

  id v7 = objc_alloc_init((Class)NSDateFormatter);
  [v7 setDateFormat:@"YYYY-MM-dd'T'HH:mm:ss.SSS"];
  uint64_t v8 = [v7 stringFromDate:v6];
  id v9 = objc_alloc((Class)NSString);
  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  id v10 = [v9 initWithFormat:@"%@%s%s%@", @"fillmore_", a3, "_", v8];
  id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%@%@", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/", v10];
  uint64_t v12 = +[NSFileManager defaultManager];
  uint64_t v13 = (void *)fileManager;
  fileManager = v12;

  unsigned __int8 v23 = 0;
  unsigned int v14 = [(id)fileManager fileExistsAtPath:@"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/" isDirectory:&v23];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)uint64_t v25 = v14;
    *(_WORD *)&v25[4] = 1024;
    *(_DWORD *)&v25[6] = v23;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Directory Existence, isFile: %d, isDir: %d", buf, 0xEu);
  }
  if (v23
    || (id v22 = 0,
        [(id)fileManager createDirectoryAtPath:@"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/" withIntermediateDirectories:1 attributes:0 error:&v22], (id v19 = v22) == 0))
  {
    if ([(id)fileManager fileExistsAtPath:v11]) {
      [(id)fileManager removeItemAtPath:v11 error:0];
    }
    id v15 = v11;
    BOOL v16 = (const char *)[v15 cStringUsingEncoding:4];
    size_t v17 = strlen(v16);
    memcpy(a1, v16, v17 + 1);
    uint64_t v18 = 1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412546;
      *(void *)uint64_t v25 = v15;
      *(_WORD *)&v25[8] = 2112;
      id v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "New created file - file_path:%@, fileName: %@", buf, 0x16u);
    }
  }
  else
  {
    unint64_t v20 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412546;
      *(void *)uint64_t v25 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/";
      *(_WORD *)&v25[8] = 2112;
      id v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "error creating directory \"%@\": %@", buf, 0x16u);
    }

    uint64_t v18 = 0;
  }

  return v18;
}

void sub_1000A3434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t append_data_to_file(const char *a1, unsigned __int8 *a2, unsigned int a3)
{
  size_t v5 = fopen(a1, "a+b");
  if (v5)
  {
    int v6 = v5;
    unsigned __int16 v7 = fwrite(a2, 1uLL, a3, v5);
    fflush(v6);
    fclose(v6);
    return v7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "File Open Error", v9, 2u);
    }
    return 0;
  }
}

uint64_t create_new_sniffer_folder(std::string *a1)
{
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"%@", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/"];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)BOOL v16 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/";
    *(_WORD *)&v16[8] = 2112;
    id v17 = v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "SNIFFER_TLF::creating directory path \"%@\": %@", buf, 0x16u);
  }
  uint64_t v3 = +[NSFileManager defaultManager];
  uint64_t v4 = (void *)fileManager;
  fileManager = v3;

  unsigned __int8 v14 = 0;
  unsigned int v5 = [(id)fileManager fileExistsAtPath:@"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/" isDirectory:&v14];
  if (v14)
  {
    unsigned int v6 = v5;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)BOOL v16 = v6;
      *(_WORD *)&v16[4] = 1024;
      *(_DWORD *)&v16[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "SNIFFER_TLF::Sniffer: Directory exists, isFile: %d, isDir: %d", buf, 0xEu);
    }
    goto LABEL_10;
  }
  id v13 = 0;
  [(id)fileManager createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v13];
  id v7 = v13;
  if (!v7)
  {
LABEL_10:
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      *a1->__r_.__value_.__l.__data_ = 0;
      a1->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      a1->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = 0;
    }
    id v10 = v2;
    std::string::assign(a1, (const std::string::value_type *)[v10 cStringUsingEncoding:4]);
    uint64_t v9 = 1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v11 = a1;
      }
      else {
        id v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      *(void *)BOOL v16 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/";
      *(_WORD *)&v16[8] = 2112;
      id v17 = v10;
      __int16 v18 = 2080;
      id v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "SNIFFER_TLF::directory path \"%@\": %@ : %s", buf, 0x20u);
    }
    goto LABEL_18;
  }
  uint64_t v8 = v7;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)BOOL v16 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/";
    *(_WORD *)&v16[8] = 2112;
    id v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "SNIFFER_TLF::sniffer: error creating directory \"%@\": %@", buf, 0x16u);
  }

  uint64_t v9 = 0;
LABEL_18:

  return v9;
}

void sub_1000A3844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void get_timestamp_sniffer_backup_filename(uint64_t a1)
{
  id v2 = +[NSDate date];
  [v2 timeIntervalSince1970];
  +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  id v3 = objc_alloc_init((Class)NSDateFormatter);
  [v3 setDateFormat:@"YYYY-MM-dd'T'HH:mm:ss.SSS"];
  uint64_t v4 = [v3 stringFromDate:v7];
  id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%@%s%@%s", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/", "sniffer_logs_", v4, ".pcapng"];
  unsigned int v6 = (const std::string::value_type *)[v5 cStringUsingEncoding:4];
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  std::string::assign((std::string *)a1, v6);
}

void sub_1000A398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1000A39D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void backup_current_sniffer_file(void)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  get_timestamp_sniffer_backup_filename((uint64_t)__p);
  id v0 = [objc_alloc((Class)NSString) initWithFormat:@"%@%s", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/", "sniffer_logs.pcapng"];
  uint64_t v1 = (const char *)[v0 cStringUsingEncoding:4];
  size_t v2 = strlen(v1);
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v5 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v3;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2) {
LABEL_8:
  }
    memmove(p_dst, v1, v3);
  p_dst->__pn_.__r_.__value_.__s.__data_[v3] = 0;
  if (v17 >= 0) {
    id v7 = __p;
  }
  else {
    id v7 = (void **)__p[0];
  }
  size_t v8 = strlen((const char *)v7);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    id v10 = (std::__fs::filesystem::path *)operator new(v11 + 1);
    v14.__pn_.__r_.__value_.__l.__size_ = v9;
    v14.__pn_.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    v14.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    goto LABEL_19;
  }
  *((unsigned char *)&v14.__pn_.__r_.__value_.__s + 23) = v8;
  id v10 = &v14;
  if (v8) {
LABEL_19:
  }
    memmove(v10, v7, v9);
  v10->__pn_.__r_.__value_.__s.__data_[v9] = 0;
  boost::filesystem::detail::status((boost::filesystem::detail *)&__dst, 0, (int *)buf);
  if (*(_DWORD *)buf < 2u)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      id v19 = v1;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "SNIFFER_TLF::backup_current_sniffer_file sfile[%s] does not exist ", buf, 0xCu);
    }
  }
  else
  {
    boost::filesystem::detail::rename(&__dst, &v14, 0, v13);
  }
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
LABEL_26:

  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A3C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t create_new_settings_folder(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"%@", @"/var/db/com.apple.threadradiod/"];
  uint64_t v3 = +[NSFileManager defaultManager];
  uint64_t v4 = (void *)fileManager;
  fileManager = v3;

  unsigned __int8 v12 = 0;
  unsigned int v5 = [(id)fileManager fileExistsAtPath:@"/var/db/com.apple.threadradiod/" isDirectory:&v12];
  if (v12)
  {
    unsigned int v6 = v5;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)std::__fs::filesystem::path v14 = v6;
      *(_WORD *)&v14[4] = 1024;
      *(_DWORD *)&v14[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Settings: Directory exists, isFile: %d, isDir: %d", buf, 0xEu);
    }
    goto LABEL_8;
  }
  id v11 = 0;
  [(id)fileManager createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v11];
  id v7 = v11;
  if (!v7)
  {
LABEL_8:
    if (*(char *)(a1 + 23) < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
    std::string::assign((std::string *)a1, (const std::string::value_type *)[v2 cStringUsingEncoding:4]);
    uint64_t v9 = 1;
    goto LABEL_12;
  }
  size_t v8 = v7;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)std::__fs::filesystem::path v14 = @"/var/db/com.apple.threadradiod/";
    *(_WORD *)&v14[8] = 2112;
    id v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Settings: error creating directory \"%@\": %@", buf, 0x16u);
  }

  uint64_t v9 = 0;
LABEL_12:

  return v9;
}

void sub_1000A3EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getBTFWCrashDumpPath(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  uint64_t v2 = +[NSFileManager defaultManager];
  uint64_t v3 = (void *)fileManager;
  fileManager = v2;

  uint64_t v4 = +[NSDate distantPast];
  unsigned int v5 = [(id)fileManager enumeratorAtPath:@"/Library/Logs/CrashReporter/CoreCapture/BT/"];
  uint64_t v23 = a1;
  unsigned int v6 = [v5 nextObject];
  id v7 = 0;
  size_t v8 = 0;
  while (v6)
  {
    id v10 = [@"/Library/Logs/CrashReporter/CoreCapture/BT/" stringByAppendingPathComponent:v6];
    id v11 = v10;
    if (!v10 || ![v10 containsString:@"BTFWCoreDump.bin"])
    {
      id v13 = v8;
      goto LABEL_18;
    }
    id v27 = v8;
    unsigned __int8 v12 = [(id)fileManager attributesOfItemAtPath:v11 error:&v27];
    id v13 = v27;

    if (v12)
    {
      std::__fs::filesystem::path v14 = [v12 fileCreationDate];

      if ([v14 compare:v4] != (id)1)
      {
        id v7 = v14;
        goto LABEL_17;
      }
      int v24 = v4;
      id v15 = (const char *)[v11 UTF8String];
      size_t v16 = strlen(v15);
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v21 = v16 | 7;
        }
        uint64_t v22 = v21 + 1;
        p_dst = (long long *)operator new(v21 + 1);
        *((void *)&__dst + 1) = v17;
        unint64_t v26 = v22 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_dst = &__dst;
        if (!v16)
        {
          LOBYTE(__dst) = 0;
          uint64_t v19 = v23;
          if ((*(char *)(v23 + 23) & 0x80000000) == 0)
          {
LABEL_14:
            *(_OWORD *)uint64_t v19 = __dst;
            *(void *)(v19 + 16) = v26;
            id v7 = v14;

            uint64_t v4 = v7;
            goto LABEL_17;
          }
LABEL_23:
          operator delete(*(void **)v19);
          goto LABEL_14;
        }
      }
      memmove(p_dst, v15, v17);
      *((unsigned char *)p_dst + v17) = 0;
      uint64_t v19 = v23;
      if ((*(char *)(v23 + 23) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }
LABEL_17:

LABEL_18:
    uint64_t v20 = [v5 nextObject];

    unsigned int v6 = (void *)v20;
    size_t v8 = v13;
  }
}

void sub_1000A41A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A41C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A41DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void checkCTRSettingsFileLimit(void)
{
  id v0 = [objc_alloc((Class)NSString) initWithFormat:@"%@", @"/var/db/com.apple.threadradiod/"];
  int v31 = +[NSDate distantFuture];
  char v37 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v36 = 0;
  uint64_t v1 = +[NSFileManager defaultManager];
  uint64_t v2 = (void *)fileManager;
  fileManager = v1;

  [(id)fileManager fileExistsAtPath:@"/var/db/com.apple.threadradiod/" isDirectory:&v37];
  if (!v37)
  {
    size_t v8 = 0;
    uint64_t v23 = 0;
    id v24 = 0;
    id v5 = 0;
    if (SHIBYTE(v36) < 0) {
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  __int16 v28 = [(id)fileManager contentsOfDirectoryAtPath:v0 error:0];
  if ([v28 count] < 0x65uLL)
  {
    size_t v8 = 0;
    int64_t v30 = 0;
    id v24 = 0;
    id v5 = 0;
    goto LABEL_38;
  }
  uint64_t v3 = [(id)fileManager enumeratorAtPath:v0];
  uint64_t v4 = [v3 nextObject];
  if (!v4)
  {
    id v5 = 0;
    int64_t v30 = 0;
    size_t v8 = 0;
    id v24 = 0;
    goto LABEL_37;
  }
  v32 = v3;
  id v5 = 0;
  unsigned int v6 = 0;
  char v7 = 0;
  int64_t v30 = 0;
  size_t v8 = 0;
  id v27 = v0;
  do
  {
    uint64_t v9 = [v0 stringByAppendingPathComponent:v4];

    size_t v8 = v9;
    if (!v9) {
      goto LABEL_19;
    }
    id v34 = v6;
    id v10 = [(id)fileManager attributesOfItemAtPath:v9 error:&v34];
    id v11 = v34;

    if (v10)
    {
      unsigned __int8 v12 = [v10 fileModificationDate];

      if ([v12 compare:v31] != (id)-1)
      {
        id v5 = v12;
        goto LABEL_18;
      }
      id v13 = v9;
      std::__fs::filesystem::path v14 = (const char *)[v13 UTF8String];
      size_t v15 = strlen(v14);
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v21 = v15 | 7;
        }
        uint64_t v22 = v21 + 1;
        size_t v17 = operator new(v21 + 1);
        *(void *)&buf[8] = v16;
        *(void *)&buf[16] = v22 | 0x8000000000000000;
        *(void *)std::string buf = v17;
      }
      else
      {
        buf[23] = v15;
        size_t v17 = buf;
        if (!v15)
        {
          buf[0] = 0;
          id v0 = v27;
          if ((SHIBYTE(v36) & 0x80000000) == 0)
          {
LABEL_13:
            *(_OWORD *)__p = *(_OWORD *)buf;
            uint64_t v36 = *(void *)&buf[16];
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
            {
              __int16 v18 = __p;
              if (v36 < 0) {
                __int16 v18 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "checkCTRSettingsFileLimit";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&_DWORD buf[14] = v18;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: Found oldest CTR settings file %s", buf, 0x16u);
            }
            id v5 = v12;

            id v19 = v13;
            char v7 = 1;
            int64_t v30 = v19;
            int v31 = v5;
            goto LABEL_18;
          }
LABEL_25:
          operator delete(__p[0]);
          goto LABEL_13;
        }
      }
      memmove(v17, v14, v16);
      v17[v16] = 0;
      id v0 = v27;
      if ((SHIBYTE(v36) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
LABEL_18:

    unsigned int v6 = v11;
LABEL_19:
    uint64_t v20 = [v32 nextObject];

    uint64_t v4 = (void *)v20;
  }
  while (v20);
  if (v7)
  {
    id v33 = v6;
    unsigned int v25 = [(id)fileManager removeItemAtPath:v30 error:&v33];
    id v24 = v33;

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      unint64_t v26 = __p;
      if (v36 < 0) {
        unint64_t v26 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "checkCTRSettingsFileLimit";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_DWORD buf[14] = v26;
      *(_WORD *)&buf[22] = 2112;
      id v39 = v24;
      __int16 v40 = 1024;
      unsigned int v41 = v25;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: Remove oldest CTR settings file %s error: %@ fileDeleted: %d", buf, 0x26u);
    }
  }
  else
  {
    id v24 = v6;
  }
  uint64_t v3 = v32;
LABEL_37:

LABEL_38:
  uint64_t v23 = v30;
  if (SHIBYTE(v36) < 0) {
LABEL_39:
  }
    operator delete(__p[0]);
LABEL_40:
}

void sub_1000A4750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id InternalClientIPCHelper::decodeComplexValToDict(uint64_t *a1)
{
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  if (*a1) {
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else {
  uint64_t v5 = v4[1];
  }
  if (v5 == 0x80000001003F30A0
    || ((v5 & 0x80000001003F30A0 & 0x8000000000000000) != 0) != __OFSUB__(v5, 0x80000001003F30A0)
    && !strcmp((const char *)(v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F30A0 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<std::list<std::string>>(a1, &__p);
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    id v7 = objc_alloc_init((Class)NSMutableArray);
    for (i = v65; i != (char *)&__p; i = (char *)*((void *)i + 1))
    {
      uint64_t v9 = i + 16;
      if (i[39] < 0) {
        uint64_t v9 = (void *)*v9;
      }
      id v10 = +[NSString stringWithUTF8String:v9];
      [v7 addObject:v10];
    }
    [v6 setObject:v7 forKey:@"String Values"];
    [v3 setValuesForKeysWithDictionary:v6];

    if (v66)
    {
      id v11 = (void **)__p;
      unsigned __int8 v12 = v65;
      uint64_t v13 = *(void *)v65;
      *(void *)(v13 + 8) = *((void *)__p + 1);
      *v11[1] = v13;
      uint64_t v66 = 0;
      if (v12 != (char *)&__p)
      {
        do
        {
          std::__fs::filesystem::path v14 = (void **)*((void *)v12 + 1);
          if (v12[39] < 0) {
            operator delete(*((void **)v12 + 2));
          }
          operator delete(v12);
          unsigned __int8 v12 = (char *)v14;
        }
        while (v14 != &__p);
      }
    }
    goto LABEL_61;
  }
  if (*a1) {
    size_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else {
  uint64_t v16 = v15[1];
  }
  if (v16 == 0x80000001003F30F4
    || ((v16 & 0x80000001003F30F4 & 0x8000000000000000) != 0) != __OFSUB__(v16, 0x80000001003F30F4)
    && !strcmp((const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F30F4 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<std::set<std::string>>(a1, (uint64_t)&__p);
    id v17 = objc_alloc_init((Class)NSMutableDictionary);
    id v18 = objc_alloc_init((Class)NSMutableArray);
    id v19 = (char *)__p;
    if (__p != &v65)
    {
      do
      {
        uint64_t v20 = v19 + 32;
        if (v19[55] < 0) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v21 = +[NSString stringWithUTF8String:v20];
        [v18 addObject:v21];

        uint64_t v22 = (char *)*((void *)v19 + 1);
        if (v22)
        {
          do
          {
            uint64_t v23 = (char **)v22;
            uint64_t v22 = *(char **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            uint64_t v23 = (char **)*((void *)v19 + 2);
            BOOL v24 = *v23 == v19;
            id v19 = (char *)v23;
          }
          while (!v24);
        }
        id v19 = (char *)v23;
      }
      while (v23 != &v65);
    }
    [v17 setObject:v18 forKey:@"String Values"];
    [v3 setValuesForKeysWithDictionary:v17];

    std::__tree<std::string>::destroy((uint64_t)&__p, v65);
    goto LABEL_61;
  }
  if (*a1) {
    unsigned int v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else {
  uint64_t v26 = v25[1];
  }
  if (v26 == 0x80000001003F6658
    || ((v26 & 0x80000001003F6658 & 0x8000000000000000) != 0) != __OFSUB__(v26, 0x80000001003F6658)
    && !strcmp((const char *)(v26 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<nl::Data>(a1, &__p);
    id v27 = objc_alloc_init((Class)NSMutableDictionary);
    id v28 = objc_alloc_init((Class)NSMutableArray);
    size_t v29 = __p;
    if (__p != v65)
    {
      do
      {
        std::to_string(&v63, *(unsigned __int8 *)v29);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        {
          int64_t v30 = (std::string *)v63.__r_.__value_.__r.__words[0];
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        else
        {
          int64_t v30 = &v63;
        }
        int v31 = +[NSString stringWithUTF8String:v30];
        [v28 addObject:v31];

        size_t v29 = (void *)((char *)v29 + 1);
      }
      while (v29 != (void *)v65);
    }
    goto LABEL_59;
  }
  if (*a1) {
    v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else {
  uint64_t v33 = v32[1];
  }
  if (v33 == 0x80000001003F3155
    || ((v33 & 0x80000001003F3155 & 0x8000000000000000) != 0) != __OFSUB__(v33, 0x80000001003F3155)
    && !strcmp((const char *)(v33 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F3155 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<std::vector<unsigned char>>(a1, &__p);
    id v27 = objc_alloc_init((Class)NSMutableDictionary);
    id v28 = objc_alloc_init((Class)NSMutableArray);
    id v34 = __p;
    if (__p != v65)
    {
      do
      {
        std::to_string(&v63, *(unsigned __int8 *)v34);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v35 = (std::string *)v63.__r_.__value_.__r.__words[0];
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type v35 = &v63;
        }
        uint64_t v36 = +[NSString stringWithUTF8String:v35];
        [v28 addObject:v36];

        id v34 = (void *)((char *)v34 + 1);
      }
      while (v34 != (void *)v65);
    }
LABEL_59:
    [v27 setObject:v28 forKey:@"String Values"];
    [v3 setValuesForKeysWithDictionary:v27];

    if (__p)
    {
      v65 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_61;
  }
  if (*a1) {
    id v39 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else {
  uint64_t v40 = v39[1];
  }
  if (v40 == 0x80000001003F3179
    || ((v40 & 0x80000001003F3179 & 0x8000000000000000) != 0) != __OFSUB__(v40, 0x80000001003F3179)
    && !strcmp((const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F3179 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<std::set<int>>(a1, (uint64_t *)&__p);
    id v41 = objc_alloc_init((Class)NSMutableDictionary);
    id v42 = objc_alloc_init((Class)NSMutableArray);
    std::string::size_type v43 = (char *)__p;
    if (__p != &v65)
    {
      do
      {
        std::to_string(&v63, *((_DWORD *)v43 + 7));
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v44 = (std::string *)v63.__r_.__value_.__r.__words[0];
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type v44 = &v63;
        }
        v45 = +[NSString stringWithUTF8String:v44];
        [v42 addObject:v45];

        uint64_t v46 = (char *)*((void *)v43 + 1);
        if (v46)
        {
          do
          {
            uint64_t v47 = (char **)v46;
            uint64_t v46 = *(char **)v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            uint64_t v47 = (char **)*((void *)v43 + 2);
            BOOL v24 = *v47 == v43;
            std::string::size_type v43 = (char *)v47;
          }
          while (!v24);
        }
        std::string::size_type v43 = (char *)v47;
      }
      while (v47 != &v65);
    }
    [v41 setObject:v42 forKey:@"String Values"];
    [v3 setValuesForKeysWithDictionary:v41];

    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&__p, v65);
    goto LABEL_61;
  }
  if (*a1) {
    unsigned __int8 v48 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else {
  uint64_t v49 = v48[1];
  }
  if (v49 == 0x80000001003F67CCLL
    || ((v49 & 0x80000001003F67CCLL & 0x8000000000000000) != 0) != __OFSUB__(v49, 0x80000001003F67CCLL)
    && !strcmp((const char *)(v49 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F67CCLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<std::map<std::string,boost::any>>(a1, (uint64_t)&__p);
    id v50 = objc_alloc_init((Class)NSMutableDictionary);
    v51 = (char *)__p;
    if (__p != &v65)
    {
      do
      {
        id v52 = v51 + 32;
        if (v51[55] < 0) {
          id v52 = (void *)*v52;
        }
        v53 = +[NSString stringWithUTF8String:v52];
        any_to_string((const boost::any *)(v51 + 56), (uint64_t)&v63);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v54 = &v63;
        }
        else {
          v54 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        v55 = +[NSString stringWithUTF8String:v54];
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        [v50 setObject:v55 forKeyedSubscript:v53];

        v56 = (char *)*((void *)v51 + 1);
        if (v56)
        {
          do
          {
            v57 = (char **)v56;
            v56 = *(char **)v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (char **)*((void *)v51 + 2);
            BOOL v24 = *v57 == v51;
            v51 = (char *)v57;
          }
          while (!v24);
        }
        v51 = (char *)v57;
      }
      while (v57 != &v65);
    }
    [v3 setValuesForKeysWithDictionary:v50];

    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&__p, v65);
    goto LABEL_61;
  }
  if (*a1) {
    v58 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  }
  else
  {
    boost::any_cast<std::list<std::map<std::string,boost::any>>>(a1, (uint64_t *)&__p);
    id v59 = objc_alloc_init((Class)NSMutableDictionary);
    if (v65 != (char *)&__p)
    {
      *((unsigned char *)&v63.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v63, "Element:");
      std::to_string(&v62, 1);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v60 = &v62;
      }
      else {
        long long v60 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v62.__r_.__value_.__l.__size_;
      }
      std::string::append(&v63, (const std::string::value_type *)v60, size);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      operator new();
    }
    [v3 setValuesForKeysWithDictionary:v59];

    std::list<std::map<std::string,boost::any>>::~list((uint64_t *)&__p);
LABEL_61:
    id v37 = v3;
    goto LABEL_62;
  }
  id v37 = 0;
LABEL_62:

  return v37;
}

void sub_1000A5354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  std::list<std::map<std::string,boost::any>>::~list((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000A5370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::list<std::map<std::string,boost::any>>::~list((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1000A5388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,char *a23)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&__p, a23);
  _Unwind_Resume(a1);
}

void sub_1000A54F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1000A54F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);

  _Unwind_Resume(a1);
}

void sub_1000A5514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5524()
{
  JUMPOUT(0x1000A5538);
}

void sub_1000A5530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1000A555C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  std::list<std::string>::~list(va);
  JUMPOUT(0x1000A5664);
}

void sub_1000A5564()
{
}

void sub_1000A556C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A558C()
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v0 + 16));
  operator delete();
}

void sub_1000A55DC()
{
  JUMPOUT(0x1000A55F0);
}

void sub_1000A55EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1000A5614()
{
  JUMPOUT(0x1000A5624);
}

void sub_1000A5620()
{
  JUMPOUT(0x1000A5628);
}

void sub_1000A5644()
{
  JUMPOUT(0x1000A5654);
}

void sub_1000A5650()
{
  JUMPOUT(0x1000A5658);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *boost::any_cast<std::list<std::string>>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  id v6 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v6 != (const char *)(0x80000001003F30A0 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v6, (const char *)(0x80000001003F30A0 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v9.__vftable = 0;
    std::bad_cast::bad_cast(&v9);
    v9.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  uint64_t v7 = *a1 + 8;

  return std::list<std::string>::list(a2, v7);
}

void sub_1000A57AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

char *std::list<std::string>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        id v6 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::any_cast<std::set<std::string>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t result = v5[1] & 0x7FFFFFFFFFFFFFFFLL;
  }
  if (result != (0x80000001003F30F4 & 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F30F4 & 0x7FFFFFFFFFFFFFFFLL));
    if (result)
    {
      v13.__vftable = 0;
      std::bad_cast::bad_cast(&v13);
      v13.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
  }
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *a1;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  size_t v8 = *(const void ***)(v7 + 8);
  std::bad_cast v9 = (const void ***)(v7 + 16);
  if (v8 != (const void **)(v7 + 16))
  {
    do
    {
      uint64_t result = (uint64_t)std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a2, (uint64_t *)(a2 + 8), v8 + 4, (uint64_t)(v8 + 4));
      id v10 = (const void **)v8[1];
      if (v10)
      {
        do
        {
          id v11 = (const void ***)v10;
          id v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          id v11 = (const void ***)v8[2];
          BOOL v12 = *v11 == v8;
          size_t v8 = (const void **)v11;
        }
        while (!v12);
      }
      size_t v8 = (const void **)v11;
    }
    while (v11 != v9);
  }
  return result;
}

void sub_1000A5988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_1000A599C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::any_cast<nl::Data>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t result = v5[1] & 0x7FFFFFFFFFFFFFFFLL;
  }
  if (result != (0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL));
    if (result)
    {
      v13.__vftable = 0;
      std::bad_cast::bad_cast(&v13);
      v13.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
  }
  uint64_t v7 = *a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::bad_cast v9 = *(unsigned char **)(v7 + 8);
  size_t v8 = *(unsigned char **)(v7 + 16);
  size_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    id v11 = (char *)operator new(v8 - v9);
    *a2 = v11;
    BOOL v12 = &v11[v10];
    a2[2] = &v11[v10];
    uint64_t result = (uint64_t)memcpy(v11, v9, v10);
    a2[1] = v12;
  }
  return result;
}

void sub_1000A5AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_1000A5AE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (!*(void *)v1) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

uint64_t boost::any_cast<std::vector<unsigned char>>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t result = v5[1] & 0x7FFFFFFFFFFFFFFFLL;
  }
  if (result != (0x80000001003F3155 & 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F3155 & 0x7FFFFFFFFFFFFFFFLL));
    if (result)
    {
      v13.__vftable = 0;
      std::bad_cast::bad_cast(&v13);
      v13.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
  }
  uint64_t v7 = *a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::bad_cast v9 = *(unsigned char **)(v7 + 8);
  size_t v8 = *(unsigned char **)(v7 + 16);
  size_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    id v11 = (char *)operator new(v8 - v9);
    *a2 = v11;
    BOOL v12 = &v11[v10];
    a2[2] = &v11[v10];
    uint64_t result = (uint64_t)memcpy(v11, v9, v10);
    a2[1] = v12;
  }
  return result;
}

void sub_1000A5C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_1000A5C38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (!*(void *)v1) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::any_cast<std::set<int>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  id v6 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v6 != (const char *)(0x80000001003F3179 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v6, (const char *)(0x80000001003F3179 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v9.__vftable = 0;
    std::bad_cast::bad_cast(&v9);
    v9.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  uint64_t v7 = *a1;
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  return std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a2, *(int **)(v7 + 8), (int *)(v7 + 16));
}

void sub_1000A5D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_1000A5D5C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::any_cast<std::map<std::string,boost::any>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t result = v5[1] & 0x7FFFFFFFFFFFFFFFLL;
  }
  if (result != (0x80000001003F67CCLL & 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F67CCLL & 0x7FFFFFFFFFFFFFFFLL));
    if (result)
    {
      v13.__vftable = 0;
      std::bad_cast::bad_cast(&v13);
      v13.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
  }
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *a1;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  size_t v8 = *(const void ***)(v7 + 8);
  std::bad_cast v9 = (const void ***)(v7 + 16);
  if (v8 != (const void **)(v7 + 16))
  {
    do
    {
      uint64_t result = (uint64_t)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)a2, (uint64_t *)(a2 + 8), v8 + 4, (uint64_t)(v8 + 4));
      size_t v10 = (const void **)v8[1];
      if (v10)
      {
        do
        {
          id v11 = (const void ***)v10;
          size_t v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          id v11 = (const void ***)v8[2];
          BOOL v12 = *v11 == v8;
          size_t v8 = (const void **)v11;
        }
        while (!v12);
      }
      size_t v8 = (const void **)v11;
    }
    while (v11 != v9);
  }
  return result;
}

void sub_1000A5EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_1000A5ECC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::any_cast<std::list<std::map<std::string,boost::any>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t result = v5[1] & 0x7FFFFFFFFFFFFFFFLL;
  }
  if (result != (0x80000001003F31A6 & 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F31A6 & 0x7FFFFFFFFFFFFFFFLL));
    if (result)
    {
      v9.__vftable = 0;
      std::bad_cast::bad_cast(&v9);
      v9.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
  }
  uint64_t v7 = *a1 + 8;
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  for (i = v7; ; uint64_t result = (uint64_t)std::list<std::map<std::string,boost::any>>::push_back(a2, (const void ***)(i + 16)))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v7) {
      break;
    }
  }
  return result;
}

void sub_1000A5FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000A5FF8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  if (*(void *)(v9 + 16))
  {
    boost::any_cast<std::list<std::map<std::string,boost::any>>>((uint64_t **)(v9 + 8), (uint64_t *)v9, (void *)(v9 + 16), a1, a2, (uint64_t)&exception_object);
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1000A5FF0);
}

uint64_t *std::list<std::map<std::string,boost::any>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)(v3 + 2), (char *)v3[3]);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::throw_exception<boost::bad_any_cast>()
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_any_cast>::wrapexcept((uint64_t)exception);
}

void sub_1000A60EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::list<std::string>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    id v6 = a1;
    do
    {
      size_t v8 = operator new(0x28uLL);
      uint64_t v9 = (std::string *)(v8 + 2);
      void *v8 = 0;
      v8[1] = 0;
      if (*(char *)(v3 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(v3 + 16), *(void *)(v3 + 24));
        id v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      else
      {
        long long v7 = *(_OWORD *)(v3 + 16);
        v8[4] = *(void *)(v3 + 32);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v7;
      }
      void *v8 = v6;
      v8[1] = a1;
      v6[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      uint64_t v3 = *(void *)(v3 + 8);
      id v6 = v8;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1000A61C4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (*((void *)v1 + 2))
  {
    uint64_t v4 = *(void *)v1;
    uint64_t v5 = (char *)*((void *)v1 + 1);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(*(void *)v1 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)v1 + 2) = 0;
    if (v5 != v1)
    {
      do
      {
        long long v7 = (char *)*((void *)v5 + 1);
        if (v5[39] < 0) {
          operator delete(*((void **)v5 + 2));
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_any_cast>::wrapexcept(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)uint64_t result = &off_100495BB0;
  *(void *)(result + 8) = off_100495BE0;
  *(void *)(result + 16) = off_100495C08;
  return result;
}

{
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)uint64_t result = &off_100495BB0;
  *(void *)(result + 8) = off_100495BE0;
  *(void *)(result + 16) = off_100495C08;
  *(void *)(result + 24) = 0;
  return result;
}

std::bad_cast *boost::wrapexcept<boost::bad_any_cast>::~wrapexcept(std::bad_cast *a1)
{
  a1[2].__vftable = (std::bad_cast_vtbl *)&off_100495478;
  uint64_t v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2)) {
    a1[3].__vftable = 0;
  }
  std::bad_cast::~bad_cast(a1 + 1);
  return a1;
}

void boost::wrapexcept<boost::bad_any_cast>::clone()
{
}

void sub_1000A646C()
{
  std::bad_cast::~bad_cast(v0);
  operator delete();
}

void sub_1000A6498(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_any_cast>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_any_cast>::wrapexcept((uint64_t)exception, a1);
}

void sub_1000A6514(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_any_cast>::~wrapexcept(std::bad_cast *a1)
{
  a1[2].__vftable = (std::bad_cast_vtbl *)&off_100495478;
  uint64_t v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2)) {
    a1[3].__vftable = 0;
  }
  std::bad_cast::~bad_cast(a1 + 1);

  operator delete();
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_any_cast>::~wrapexcept(std::bad_cast *this)
{
  this[1].__vftable = (std::bad_cast_vtbl *)&off_100495478;
  uint64_t v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2)) {
    this[2].__vftable = 0;
  }

  std::bad_cast::~bad_cast(this);
}

{
  std::bad_cast_vtbl *v2;
  uint64_t vars8;

  this[1].__vftable = (std::bad_cast_vtbl *)&off_100495478;
  uint64_t v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2)) {
    this[2].__vftable = 0;
  }
  std::bad_cast::~bad_cast(this);

  operator delete();
}

const char *boost::bad_any_cast::what(boost::bad_any_cast *this)
{
  return "boost::bad_any_cast: failed conversion using boost::any_cast";
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_any_cast>::~wrapexcept(std::bad_cast *a1)
{
  a1->__vftable = (std::bad_cast_vtbl *)&off_100495478;
  uint64_t v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2)) {
    a1[1].__vftable = 0;
  }

  std::bad_cast::~bad_cast(a1 - 1);
}

{
  std::bad_cast_vtbl *v2;
  uint64_t vars8;

  a1->__vftable = (std::bad_cast_vtbl *)&off_100495478;
  uint64_t v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2)) {
    a1[1].__vftable = 0;
  }
  std::bad_cast::~bad_cast(a1 - 1);

  operator delete();
}

void boost::bad_any_cast::~bad_any_cast(std::bad_cast *this)
{
  std::bad_cast::~bad_cast(this);

  operator delete();
}

uint64_t boost::wrapexcept<boost::bad_any_cast>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100495420;
  *(void *)(a1 + 8) = off_100495C28;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100495478;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &off_100495BB0;
  *(void *)(a1 + 8) = off_100495BE0;
  *(void *)(a1 + 16) = off_100495C08;
  return a1;
}

void sub_1000A698C(_Unwind_Exception *a1)
{
  std::bad_cast::~bad_cast(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  if (*v6) {
    return (void *)*v6;
  }
  size_t v8 = v6;
  uint64_t v9 = operator new(0x38uLL);
  size_t v10 = (std::string *)(v9 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v9[6] = *(void *)(a4 + 16);
  }
  id v11 = v15;
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = v11;
  uint64_t *v8 = (uint64_t)v9;
  BOOL v12 = (uint64_t *)**a1;
  std::bad_cast v13 = v9;
  if (v12)
  {
    *a1 = v12;
    std::bad_cast v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_1000A6A84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

uint64_t boost::any::holder<std::map<std::string,boost::any>>::~holder(uint64_t a1)
{
  return a1;
}

void boost::any::holder<std::map<std::string,boost::any>>::~holder(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1 + 8, *(char **)(a1 + 16));

  operator delete();
}

_UNKNOWN **boost::any::holder<std::map<std::string,boost::any>>::type()
{
}

void boost::any::holder<std::map<std::string,boost::any>>::clone()
{
}

void sub_1000A6CA0()
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v0 + 16));
  operator delete();
}

void postFollowUpNotification(void)
{
  uint64_t v1 = objc_alloc_init(CTRFollowUpController);
  if (!v1)
  {
    uint64_t v2 = log_get_logging_obg("com.apple.wpantund", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      postFollowUpNotification(v2);
    }
  }
  if ([(CTRFollowUpController *)v1 ctrUtilPostFollowUpItem:@"x-hw"])
  {
    uint64_t v3 = log_get_logging_obg("com.apple.wpantund", "default");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      long long v5 = "postFollowUpNotification";
      __int16 v6 = 1024;
      int v7 = 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s: FAULT detected, Posted Followup Notification : return val : %d", (uint8_t *)&v4, 0x12u);
    }
  }
  else
  {
    uint64_t v3 = log_get_logging_obg("com.apple.wpantund", "default");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      postFollowUpNotification(v3);
    }
  }
}

void sub_1000A6E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void clearFollowUpNotification(void)
{
  uint64_t v1 = objc_alloc_init(CTRFollowUpController);
  if (!v1)
  {
    uint64_t v2 = log_get_logging_obg("com.apple.wpantund", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      clearFollowUpNotification(v2);
    }
  }
  [(CTRFollowUpController *)v1 ctrUtilClearFollowUpItem:@"x-hw"];
}

void sub_1000A6EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A6F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dskeychainRcp::printCFData(CFDataRef *this, const __CFData **a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v4 = logging_obg;
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      dskeychainRcp::printCFData();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  CFIndex Length = CFDataGetLength(*this);
  BytePtr = CFDataGetBytePtr(*this);
  int v7 = BytePtr;
  uint64_t v8 = Length % 20;
  if (Length >= 20)
  {
    uint64_t v9 = (unsigned __int8 *)(BytePtr + 9);
    uint64_t v10 = Length / 20;
    do
    {
      id v11 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v11)
      {
        BOOL v12 = v11;
        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int v13 = *(v9 - 9);
          int v14 = *(v9 - 8);
          int v15 = *(v9 - 7);
          int v16 = *(v9 - 6);
          int v17 = *(v9 - 5);
          int v18 = *(v9 - 4);
          int v19 = *(v9 - 3);
          int v20 = *(v9 - 2);
          int v21 = *(v9 - 1);
          int v22 = *v9;
          int v23 = v9[1];
          int v24 = v9[2];
          int v25 = v9[3];
          int v26 = v9[4];
          int v27 = v9[5];
          int v28 = v9[6];
          int v29 = v9[7];
          int v30 = v9[8];
          int v39 = v9[9];
          int v40 = v9[10];
          *(_DWORD *)std::string buf = 67113984;
          *(_DWORD *)id v42 = v13;
          *(_WORD *)&v42[4] = 1024;
          *(_DWORD *)&v42[6] = v14;
          LOWORD(v43) = 1024;
          *(_DWORD *)((char *)&v43 + 2) = v15;
          HIWORD(v43) = 1024;
          int v44 = v16;
          __int16 v45 = 1024;
          int v46 = v17;
          __int16 v47 = 1024;
          int v48 = v18;
          __int16 v49 = 1024;
          int v50 = v19;
          __int16 v51 = 1024;
          int v52 = v20;
          __int16 v53 = 1024;
          int v54 = v21;
          __int16 v55 = 1024;
          int v56 = v22;
          __int16 v57 = 1024;
          int v58 = v23;
          __int16 v59 = 1024;
          int v60 = v24;
          __int16 v61 = 1024;
          int v62 = v25;
          __int16 v63 = 1024;
          int v64 = v26;
          __int16 v65 = 1024;
          int v66 = v27;
          __int16 v67 = 1024;
          int v68 = v28;
          __int16 v69 = 1024;
          int v70 = v29;
          __int16 v71 = 1024;
          int v72 = v30;
          __int16 v73 = 1024;
          int v74 = v39;
          __int16 v75 = 1024;
          int v76 = v40;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, " %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u", buf, 0x7Au);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)id v42 = "com.apple.wpantund.ncp";
        *(_WORD *)&v42[8] = 2080;
        std::string::size_type v43 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      }
      v9 += 20;
      --v10;
    }
    while (v10);
  }
  if (v8 < 1) {
    goto LABEL_25;
  }
  int v31 = &v7[20 * (Length / 20)];
  v32 = (char *)buf;
  uint64_t v33 = v8;
  do
  {
    int v34 = *v31++;
    sprintf(v32, "%u ", v34);
    v32 += 2;
    --v33;
  }
  while (v33);
  buf[2 * v8] = 0;
  std::string::size_type v35 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v35)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      id v37 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v37) {
        goto LABEL_30;
      }
      goto LABEL_26;
    }
LABEL_25:
    id v37 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v37) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v36 = v35;
  if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_25;
  }
  dskeychainRcp::printCFData();
  id v37 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v37)
  {
LABEL_30:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      -[PowerEventHandler_Rcp init:]();
    }
    return;
  }
LABEL_26:
  long long v38 = v37;
  if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
    dskeychainRcp::printCFData();
  }
}

void dskeychainRcp::GetDatasetAddDictionary(CFMutableDictionaryRef *this, __CFDictionary **a2)
{
  CFDictionaryAddValue(*this, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(*this, kSecAttrAccessGroup, @"com.apple.thread.dataset");
  CFDictionaryAddValue(*this, kSecAttrSynchronizable, kCFBooleanFalse);
  uint64_t v3 = *this;

  CFDictionaryAddValue(v3, kSecAttrAccessible, kSecAttrAccessibleAlways);
}

void dskeychainRcp::GetDataSetMatchingQuery(CFMutableDictionaryRef *this, __CFDictionary **a2)
{
  CFDictionaryAddValue(*this, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(*this, kSecAttrAccessGroup, @"com.apple.thread.dataset");
  CFDictionaryAddValue(*this, kSecMatchLimit, kSecMatchLimitOne);
  CFDictionaryAddValue(*this, kSecReturnPersistentRef, kCFBooleanFalse);
  uint64_t v3 = *this;

  CFDictionaryAddValue(v3, kSecReturnData, kCFBooleanTrue);
}

void dskeychainRcp::GetDataSetDeleteQuery(CFMutableDictionaryRef *this, __CFDictionary **a2)
{
  CFDictionaryAddValue(*this, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(*this, kSecAttrSynchronizable, kCFBooleanFalse);
  CFDictionaryAddValue(*this, kSecAttrAccessGroup, @"com.apple.thread.dataset");
  CFDictionaryAddValue(*this, kSecReturnPersistentRef, kCFBooleanFalse);
  uint64_t v3 = *this;

  CFDictionaryAddValue(v3, kSecAttrAccessible, kSecAttrAccessibleAlways);
}

uint64_t dskeychainRcp::AddKeychainItem(CFDictionaryRef *this, __CFDictionary **a2)
{
  OSStatus v2 = SecItemAdd(*this, 0);
  if (v2)
  {
    if (v2 == -25299)
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        int v4 = logging_obg;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          dskeychainRcp::AddKeychainItem();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      return 0;
    }
    CFStringRef v8 = SecCopyErrorMessageString(v2, 0);
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      uint64_t v10 = v9;
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        dskeychainRcp::AddKeychainItem();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    CFRelease(v8);
    uint64_t v11 = RcpHostContext::sRcpHostContext;
    char v18 = 5;
    strcpy((char *)v17, "Error");
    int v15 = operator new(0x20uLL);
    long long v16 = xmmword_1003F2EE0;
    strcpy((char *)v15, "Keychain Operation Failure");
    __p = operator new(0x30uLL);
    long long v14 = xmmword_1003F2E10;
    strcpy((char *)__p, "Dataset Keychain Addition Failure in RCP");
    RcpHostContext::captureABC(v11, (uint64_t)v17, (uint64_t)&v15, (uint64_t)&__p, 0, 1);
    if (SHIBYTE(v14) < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_24:
        if ((v18 & 0x80000000) == 0) {
          return 0;
        }
LABEL_29:
        operator delete(v17[0]);
        return 0;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v15);
    if ((v18 & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_29;
  }
  long long v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      -[PowerEventHandler_Rcp init:]();
    }
    return 1;
  }
  __int16 v6 = v5;
  if (!syslog_is_the_mask_enabled(6)) {
    return 1;
  }
  uint64_t v7 = 1;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t buf = 67109120;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "dskeychain::AddKeychainItem: SecItemAdd SUCCESS: err=%d", (uint8_t *)&buf, 8u);
  }
  return v7;
}

void sub_1000A7890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      if ((a27 & 0x80000000) == 0) {
LABEL_9:
      }
        _Unwind_Resume(a1);
LABEL_8:
      operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

uint64_t dskeychainRcp::FindKeychainItem(CFDictionaryRef *this, CFTypeRef *a2, const void **a3)
{
  OSStatus v4 = SecItemCopyMatching(*this, a2);
  if (v4)
  {
    CFStringRef v5 = SecCopyErrorMessageString(v4, 0);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v7 = logging_obg;
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        dskeychainRcp::FindKeychainItem();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    CFRelease(v5);
    return 0;
  }
  CFStringRef v8 = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v9 = v8;
  if (!a2)
  {
    if (v8)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        dskeychainRcp::FindKeychainItem();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    return 0;
  }
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      -[PowerEventHandler_Rcp init:]();
    }
    return 1;
  }
  if (!syslog_is_the_mask_enabled(6)) {
    return 1;
  }
  uint64_t v10 = 1;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109120;
    v12[1] = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "dskeychain::FindKeychainItem: SecItemCopyMatching  SUCCESS:err = %d,", (uint8_t *)v12, 8u);
  }
  return v10;
}

BOOL dskeychainRcp::DeleteKeychainItem(CFDictionaryRef *this, __CFDictionary **a2)
{
  OSStatus v2 = SecItemDelete(*this);
  OSStatus v3 = v2;
  if (v2)
  {
    CFStringRef v4 = SecCopyErrorMessageString(v2, 0);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      __int16 v6 = logging_obg;
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        dskeychainRcp::DeleteKeychainItem();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    CFRelease(v4);
  }
  else
  {
    uint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v7)
    {
      CFStringRef v8 = v7;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "dskeychain::DeleteKeychainItem: Keychain item deleted", v10, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  return v3 == 0;
}

uint64_t dskeychainRcp::AddDataSet(unsigned int a1, const UInt8 *a2, unsigned int a3)
{
  if (a1 < 2)
  {
    if (a3)
    {
      dskeychainRcp::DeleteDataSet(a1);
      CFDataRef v6 = CFDataCreate(0, a2, a3);
      CFDataRef v31 = v6;
      CFIndex Length = CFDataGetLength(v6);
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        uint64_t v9 = logging_obg;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          *(void *)&uint8_t buf[4] = Length;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Input Data: CF Data len= %ld", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      dskeychainRcp::printCFData(&v31, v10);
      Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
      *(void *)uint64_t buf = Mutable;
      CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
      CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.thread.dataset");
      CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, kCFBooleanFalse);
      CFDictionaryAddValue(Mutable, kSecAttrAccessible, kSecAttrAccessibleAlways);
      CFDictionaryAddValue(Mutable, kSecValueData, v6);
      int v17 = log_get_logging_obg("com.apple.threadradiod", "default");
      char v18 = v17;
      if (!a1)
      {
        if (v17)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)int v30 = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "dskeychain::AddDataSet: Adding Active DataSet", v30, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        CFDictionaryAddValue(Mutable, kSecAttrService, @"ThreadActiveDataSet");
        uint64_t v13 = dskeychainRcp::AddKeychainItem((CFDictionaryRef *)buf, v23);
        goto LABEL_53;
      }
      if (v17)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "dskeychain::AddDataSet: Adding Pending DataSet", v30, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      CFDictionaryAddValue(Mutable, kSecAttrService, @"ThreadPendingDataSet");
      uint64_t v20 = dskeychainRcp::AddKeychainItem((CFDictionaryRef *)buf, v19);
      uint64_t v13 = v20;
      if (a1 != 1 || !v20)
      {
LABEL_53:
        CFRelease(v6);
        CFRelease(Mutable);
        return v13;
      }
      int v21 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21)
      {
        int v22 = v21;
        if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          dskeychainRcp::AddDataSet();
          *(void *)int v30 = 0;
          if (!SecItemPersistKeychainWritesAtHighPerformanceCost()) {
            goto LABEL_50;
          }
          goto LABEL_44;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
        *(void *)int v30 = 0;
        if (!SecItemPersistKeychainWritesAtHighPerformanceCost()) {
          goto LABEL_50;
        }
        goto LABEL_44;
      }
      *(void *)int v30 = 0;
      if (!SecItemPersistKeychainWritesAtHighPerformanceCost())
      {
LABEL_50:
        if (*(void *)v30)
        {
          CFRelease(*(CFTypeRef *)v30);
        }
        else
        {
          int v27 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v27)
          {
            int v28 = v27;
            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)int v29 = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Pending dataset: cferror NULL", v29, 2u);
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            -[PowerEventHandler_Rcp init:]();
          }
        }
        uint64_t v13 = 1;
        goto LABEL_53;
      }
LABEL_44:
      int v24 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v24)
      {
        int v25 = v24;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          dskeychainRcp::AddDataSet();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      goto LABEL_50;
    }
    long long v14 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v14)
    {
      int v15 = v14;
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        dskeychainRcp::AddDataSet(v15);
        return 0;
      }
      return 0;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
LABEL_16:
    -[PowerEventHandler_Rcp init:]();
    return 0;
  }
  uint64_t v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v11)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    goto LABEL_16;
  }
  BOOL v12 = v11;
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
    return 0;
  }
  *(_DWORD *)uint64_t buf = 67109120;
  *(_DWORD *)&uint8_t buf[4] = a1;
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "dskeychain::AddDataSet: Invalid add request on datasetType: %d", buf, 8u);
  return 0;
}

BOOL dskeychainRcp::DeleteDataSet(unsigned int a1)
{
  if (a1 < 2)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
    *(void *)uint64_t buf = Mutable;
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, kCFBooleanFalse);
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.thread.dataset");
    CFDictionaryAddValue(Mutable, kSecReturnPersistentRef, kCFBooleanFalse);
    CFDictionaryAddValue(Mutable, kSecAttrAccessible, kSecAttrAccessibleAlways);
    if (a1 == 1)
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        uint64_t v11 = logging_obg;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "dskeychain::DeleteDataSet: Remove Pending DataSet", v13, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      CFStringRef v12 = @"ThreadPendingDataSet";
    }
    else
    {
      if (a1)
      {
LABEL_27:
        BOOL v8 = dskeychainRcp::DeleteKeychainItem((CFDictionaryRef *)buf, v3);
        CFRelease(Mutable);
        return v8;
      }
      CFStringRef v4 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v4)
      {
        CFStringRef v5 = v4;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "dskeychain::DeleteDataSet: Remove Active DataSet", v13, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      CFStringRef v12 = @"ThreadActiveDataSet";
    }
    CFDictionaryAddValue(Mutable, kSecAttrService, v12);
    goto LABEL_27;
  }
  CFDataRef v6 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v6)
  {
    uint64_t v7 = v6;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "dskeychain::DeleteDataSet: Invalid dataset delete request: %d", buf, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return 0;
}

uint64_t dskeychainRcp::FindDataSet(int a1)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  CFDictionaryRef v17 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.thread.dataset");
  CFDictionaryAddValue(Mutable, kSecMatchLimit, kSecMatchLimitOne);
  CFDictionaryAddValue(Mutable, kSecReturnPersistentRef, kCFBooleanFalse);
  CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
  if (a1 == 1)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      CFDataRef v6 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "dskeychain::FindDataSet: Reading Pending DataSet", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    CFStringRef v9 = @"ThreadPendingDataSet";
    goto LABEL_20;
  }
  if (!a1)
  {
    OSStatus v3 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v3)
    {
      CFStringRef v4 = v3;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "dskeychain::FindDataSet: Reading Active DataSet", buf, 2u);
      }
      goto LABEL_16;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      CFStringRef v9 = @"ThreadActiveDataSet";
      goto LABEL_20;
    }
    -[PowerEventHandler_Rcp init:]();
    CFStringRef v9 = @"ThreadActiveDataSet";
LABEL_20:
    CFDictionaryAddValue(Mutable, kSecAttrService, v9);
    *(void *)uint64_t buf = 0;
    uint64_t KeychainItem = dskeychainRcp::FindKeychainItem(&v17, (CFTypeRef *)buf, v10);
    CFStringRef v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    uint64_t v13 = v12;
    if (KeychainItem)
    {
      if (v12)
      {
        if (syslog_is_the_mask_enabled(6))
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)int v15 = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "dskeychain::FindDataSet: keychain item found", v15, 2u);
          }
        }
        goto LABEL_36;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
    }
    else
    {
      if (v12)
      {
        if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          dskeychainRcp::FindDataSet();
        }
        goto LABEL_36;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_35:
      }
        -[PowerEventHandler_Rcp init:]();
    }
LABEL_36:
    CFRelease(Mutable);
    CFRelease(*(CFTypeRef *)buf);
    return KeychainItem;
  }
  uint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v7)
  {
    BOOL v8 = v7;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      dskeychainRcp::FindDataSet();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  CFRelease(Mutable);
  return 0;
}

uint64_t dskeychainRcp::FindAndGetDataSet(unsigned int a1, ot::MeshCoP::Dataset::Info *a2)
{
  if (a1 < 2)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
    CFDictionaryRef v23 = Mutable;
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.thread.dataset");
    CFDictionaryAddValue(Mutable, kSecMatchLimit, kSecMatchLimitOne);
    CFDictionaryAddValue(Mutable, kSecReturnPersistentRef, kCFBooleanFalse);
    CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
    if (a1 == 1)
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        uint64_t v13 = logging_obg;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "dskeychain::FindAndGetDataSet: Reading Pending DataSet", buf, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      CFStringRef v14 = @"ThreadPendingDataSet";
    }
    else
    {
      if (a1)
      {
LABEL_27:
        CFDataRef theData = 0;
        if (dskeychainRcp::FindKeychainItem(&v23, (CFTypeRef *)&theData, v5))
        {
          CFIndex Length = CFDataGetLength(theData);
          BytePtr = CFDataGetBytePtr(theData);
          CFDictionaryRef v17 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v17)
          {
            char v18 = v17;
            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t buf = 134217984;
              CFIndex v25 = Length;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "dskeychain::FindAndGetDataSet: keychainItem Data: CF Data len= %ld", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            -[PowerEventHandler_Rcp init:]();
          }
          dskeychainRcp::printCFData(&theData, v19);
          uint64_t v10 = HostInterpreter::rcp_ot_dataset_update((unsigned __int16 *)HostInterpreter::sHostInterpreter, a1, BytePtr, Length, a2);
          CFRelease(Mutable);
          CFDictionaryRef Mutable = theData;
        }
        else
        {
          uint64_t v20 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v20)
          {
            int v21 = v20;
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              dskeychainRcp::FindAndGetDataSet();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            -[PowerEventHandler_Rcp init:]();
          }
          uint64_t v10 = 0;
        }
        CFRelease(Mutable);
        return v10;
      }
      CFDataRef v6 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v6)
      {
        uint64_t v7 = v6;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "dskeychain::FindAndGetDataSet: Reading Active DataSet", buf, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      CFStringRef v14 = @"ThreadActiveDataSet";
    }
    CFDictionaryAddValue(Mutable, kSecAttrService, v14);
    goto LABEL_27;
  }
  BOOL v8 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v8)
  {
    CFStringRef v9 = v8;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v25) = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "dskeychain::FindAndGetDataSet: Invalid dataset find request: 0x%x", buf, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return 0;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void XPCIPCAPI_v1_rcp::to_upper(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  OSStatus v3 = a2;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) == 0)
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    CFStringRef v4 = *(std::string **)(a1 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    a2 = (std::string *)a2;
    if ((char)a2 < 0) {
      a2 = v4;
    }
    if (!a2) {
      return;
    }
LABEL_9:
    for (unint64_t i = 0; i < v10; ++i)
    {
      if ((v3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = v3;
      }
      else {
        uint64_t v7 = (std::string *)v3->__r_.__value_.__r.__words[0];
      }
      std::string::value_type v8 = __toupper(v7->__r_.__value_.__s.__data_[i]);
      if ((v3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = (std::string *)v3->__r_.__value_.__r.__words[0];
      }
      v9->__r_.__value_.__s.__data_[i] = v8;
      unint64_t v10 = *(unsigned __int8 *)(a1 + 23);
      if ((v10 & 0x80u) != 0) {
        unint64_t v10 = *(void *)(a1 + 8);
      }
    }
    return;
  }
  std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5) {
    goto LABEL_9;
  }
}

void sub_1000A8E4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::XPCIPCAPI_v1_rcp(XPCIPCAPI_v1_rcp *this, void *a2, NSObject **a3)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  uint64_t v5 = a2[1];
  *((void *)this + 4) = *a2;
  CFDataRef v6 = (void *)((char *)this + 32);
  *((void *)this + 3) = 0;
  *((void *)this + 5) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 8) = 0;
  XPCIPCAPI_v1_rcp::init_callback_tables((uint64_t **)this);
  XPCIPCAPI_v1_rcp::init_supported_properties(this);
  uint64_t v7 = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  std::string::value_type v8 = *((void *)this + 3);
  *((void *)this + 3) = v7;
  if (v8) {
    dispatch_release(v8);
  }
  if (*v6)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)unint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp: Call back table initialized", v10, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
}

void sub_1000A8FB0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void *)(v1 + 56));
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v2);
  uint64_t v5 = *(NSObject **)(v1 + 24);
  if (v5) {
    dispatch_release(v5);
  }
  std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::init_callback_tables(uint64_t **this)
{
  char v43 = 8;
  strcpy(__p, "RouteAdd");
  int v44 = __p;
  uint64_t v2 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_route_add_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v2 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 11;
  strcpy(__p, "RouteRemove");
  int v44 = __p;
  CFStringRef v4 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_route_remove_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v4 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v5 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v5) {
        v5(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 10;
  strcpy(__p, "ServiceAdd");
  int v44 = __p;
  CFDataRef v6 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_service_add_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v6 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v7 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v7) {
        v7(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 13;
  strcpy(__p, "ServiceRemove");
  int v44 = __p;
  std::string::value_type v8 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_service_remove_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v8 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v9 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v9) {
        v9(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 13;
  strcpy(__p, "ConfigGateway");
  int v44 = __p;
  unint64_t v10 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_config_gateway_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v10 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v11 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v11) {
        v11(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 19;
  strcpy(__p, "UpdateAccessoryData");
  int v44 = __p;
  CFStringRef v12 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_update_accessory_addr;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v12 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v13 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        v13(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 7;
  strcpy(__p, "PropGet");
  int v44 = __p;
  CFStringRef v14 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_prop_get_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v14 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      int v15 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        v15(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 7;
  strcpy(__p, "PropSet");
  int v44 = __p;
  long long v16 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_prop_set_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v16 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      CFDictionaryRef v17 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v17) {
        v17(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 11;
  strcpy(__p, "ThreadStart");
  int v44 = __p;
  char v18 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_thread_start_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v18 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      int v19 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v19) {
        v19(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 10;
  strcpy(__p, "ThreadStop");
  int v44 = __p;
  uint64_t v20 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_thread_stop_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v20 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      int v21 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v21) {
        v21(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 4;
  strcpy(__p, "Join");
  int v44 = __p;
  int v22 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_join_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v22 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      CFDictionaryRef v23 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        v23(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 4;
  strcpy(__p, "Form");
  int v44 = __p;
  int v24 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_form_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v24 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      CFIndex v25 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v25) {
        v25(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 5;
  strcpy(__p, "Leave");
  int v44 = __p;
  int v26 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_leave_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v26 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      int v27 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v27) {
        v27(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 9;
  strcpy(__p, "HardReset");
  int v44 = __p;
  int v28 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_hard_reset_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v28 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      int v29 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v29) {
        v29(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 6;
  strcpy(__p, "Status");
  int v44 = __p;
  int v30 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_status_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v30 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      CFDataRef v31 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v31) {
        v31(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 12;
  strcpy(__p, "NetScanStart");
  int v44 = __p;
  v32 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_net_scan_start_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v32 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      uint64_t v33 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v33) {
        v33(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 15;
  strcpy(__p, "EnergyScanStart");
  int v44 = __p;
  int v34 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_energy_scan_start_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v34 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      std::string::size_type v35 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v35) {
        v35(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 17;
  strcpy(__p, "DiscoverScanStart");
  int v44 = __p;
  uint64_t v36 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_discover_scan_start_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v36 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      id v37 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v37) {
        v37(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 8;
  strcpy(__p, "OtCtlCmd");
  int v44 = __p;
  long long v38 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_otctl_cmd_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v38 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      int v39 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v39) {
        v39(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v43 = 4;
  strcpy(__p, "Peek");
  int v44 = __p;
  int v40 = std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
  uint64_t v46 = 0;
  __int16 v47 = this;
  int v44 = (char *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>)::stored_vtable
      + 1;
  __int16 v45 = XPCIPCAPI_v1_rcp::interface_peek_handler;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap((uint64_t *)&v44, (uint64_t *)v40 + 7);
  if (v44)
  {
    if ((v44 & 1) == 0)
    {
      id v41 = *(void (**)(void **, void **, uint64_t))((unint64_t)v44 & 0xFFFFFFFFFFFFFFFELL);
      if (v41) {
        v41(&v45, &v45, 2);
      }
    }
  }
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000A9DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::init_supported_properties(XPCIPCAPI_v1_rcp *this)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "Config:TUN:InterfaceName");
  std::string::__init_copy_ctor_external(&v1269, v2, 0x18uLL);
  uint64_t v3 = 0;
  CFStringRef v4 = (uint64_t **)((char *)this + 48);
  do
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v1269;
    }
    else {
      uint64_t v5 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v6 = __toupper(v5->__r_.__value_.__s.__data_[v3]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v1269;
    }
    else {
      uint64_t v7 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v7->__r_.__value_.__s.__data_[v3++] = v6;
  }
  while (v3 != 24);
  v1270 = &v1269;
  std::string::value_type v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v8 + 7), "Config:TUN:InterfaceName");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v2);
  v1269.__r_.__value_.__r.__words[0] = 0x756F523A36765049;
  v1269.__r_.__value_.__l.__size_ = 7562612;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 11;
  std::string::value_type v9 = __toupper(73);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v10 = &v1269;
  }
  else {
    unint64_t v10 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v10->__r_.__value_.__s.__data_[0] = v9;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v1269;
  }
  else {
    uint64_t v11 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v12 = __toupper(v11->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v1269;
  }
  else {
    uint64_t v13 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v13->__r_.__value_.__s.__data_[1] = v12;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v14 = &v1269;
  }
  else {
    CFStringRef v14 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v15 = __toupper(v14->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v16 = &v1269;
  }
  else {
    long long v16 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v16->__r_.__value_.__s.__data_[2] = v15;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFDictionaryRef v17 = &v1269;
  }
  else {
    CFDictionaryRef v17 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v18 = __toupper(v17->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v19 = &v1269;
  }
  else {
    int v19 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v19->__r_.__value_.__s.__data_[3] = v18;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v1269;
  }
  else {
    uint64_t v20 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v21 = __toupper(v20->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v1269;
  }
  else {
    int v22 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v22->__r_.__value_.__s.__data_[4] = v21;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFDictionaryRef v23 = &v1269;
  }
  else {
    CFDictionaryRef v23 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v24 = __toupper(v23->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v25 = &v1269;
  }
  else {
    CFIndex v25 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v25->__r_.__value_.__s.__data_[5] = v24;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = &v1269;
  }
  else {
    int v26 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v27 = __toupper(v26->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v28 = &v1269;
  }
  else {
    int v28 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v28->__r_.__value_.__s.__data_[6] = v27;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v29 = &v1269;
  }
  else {
    int v29 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v30 = __toupper(v29->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFDataRef v31 = &v1269;
  }
  else {
    CFDataRef v31 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v31->__r_.__value_.__s.__data_[7] = v30;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v32 = &v1269;
  }
  else {
    v32 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v33 = __toupper(v32->__r_.__value_.__s.__data_[8]);
  std::string::size_type v34 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = &v1269;
  }
  else {
    std::string::size_type v35 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v35->__r_.__value_.__s.__data_[8] = v33;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v1269;
  }
  else {
    uint64_t v36 = (std::string *)v34;
  }
  std::string::value_type v37 = __toupper(v36->__r_.__value_.__s.__data_[9]);
  std::string::size_type v38 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v39 = &v1269;
  }
  else {
    int v39 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v39->__r_.__value_.__s.__data_[9] = v37;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v40 = &v1269;
  }
  else {
    int v40 = (std::string *)v38;
  }
  std::string::value_type v41 = __toupper(v40->__r_.__value_.__s.__data_[10]);
  id v42 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v42 = &v1269;
  }
  v42->__r_.__value_.__s.__data_[10] = v41;
  v1270 = &v1269;
  char v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v43 + 7), "IPv6:Routes");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Thread:Services");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 15;
  std::string::value_type v44 = __toupper(84);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v45 = &v1269;
  }
  else {
    __int16 v45 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v45->__r_.__value_.__s.__data_[0] = v44;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v46 = &v1269;
  }
  else {
    uint64_t v46 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v47 = __toupper(v46->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v48 = &v1269;
  }
  else {
    int v48 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v48->__r_.__value_.__s.__data_[1] = v47;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v49 = &v1269;
  }
  else {
    __int16 v49 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v50 = __toupper(v49->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v51 = &v1269;
  }
  else {
    __int16 v51 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v51->__r_.__value_.__s.__data_[2] = v50;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v52 = &v1269;
  }
  else {
    int v52 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v53 = __toupper(v52->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v54 = &v1269;
  }
  else {
    int v54 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v54->__r_.__value_.__s.__data_[3] = v53;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v55 = &v1269;
  }
  else {
    __int16 v55 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v56 = __toupper(v55->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v57 = &v1269;
  }
  else {
    __int16 v57 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v57->__r_.__value_.__s.__data_[4] = v56;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v58 = &v1269;
  }
  else {
    int v58 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v59 = __toupper(v58->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v60 = &v1269;
  }
  else {
    int v60 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v60->__r_.__value_.__s.__data_[5] = v59;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v61 = &v1269;
  }
  else {
    __int16 v61 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v62 = __toupper(v61->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v63 = &v1269;
  }
  else {
    __int16 v63 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v63->__r_.__value_.__s.__data_[6] = v62;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v64 = &v1269;
  }
  else {
    int v64 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v65 = __toupper(v64->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v66 = &v1269;
  }
  else {
    int v66 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v66->__r_.__value_.__s.__data_[7] = v65;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v67 = &v1269;
  }
  else {
    __int16 v67 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v68 = __toupper(v67->__r_.__value_.__s.__data_[8]);
  std::string::size_type v69 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v70 = &v1269;
  }
  else {
    int v70 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v70->__r_.__value_.__s.__data_[8] = v68;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v71 = &v1269;
  }
  else {
    __int16 v71 = (std::string *)v69;
  }
  std::string::value_type v72 = __toupper(v71->__r_.__value_.__s.__data_[9]);
  std::string::size_type v73 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v74 = &v1269;
  }
  else {
    int v74 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v74->__r_.__value_.__s.__data_[9] = v72;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v75 = &v1269;
  }
  else {
    __int16 v75 = (std::string *)v73;
  }
  std::string::value_type v76 = __toupper(v75->__r_.__value_.__s.__data_[10]);
  std::string::size_type v77 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v78 = &v1269;
  }
  else {
    v78 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v78->__r_.__value_.__s.__data_[10] = v76;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v79 = &v1269;
  }
  else {
    v79 = (std::string *)v77;
  }
  std::string::value_type v80 = __toupper(v79->__r_.__value_.__s.__data_[11]);
  std::string::size_type v81 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v82 = &v1269;
  }
  else {
    v82 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v82->__r_.__value_.__s.__data_[11] = v80;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v83 = &v1269;
  }
  else {
    v83 = (std::string *)v81;
  }
  std::string::value_type v84 = __toupper(v83->__r_.__value_.__s.__data_[12]);
  std::string::size_type v85 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v86 = &v1269;
  }
  else {
    v86 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v86->__r_.__value_.__s.__data_[12] = v84;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v87 = &v1269;
  }
  else {
    v87 = (std::string *)v85;
  }
  std::string::value_type v88 = __toupper(v87->__r_.__value_.__s.__data_[13]);
  std::string::size_type v89 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v90 = &v1269;
  }
  else {
    v90 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v90->__r_.__value_.__s.__data_[13] = v88;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v91 = &v1269;
  }
  else {
    v91 = (std::string *)v89;
  }
  std::string::value_type v92 = __toupper(v91->__r_.__value_.__s.__data_[14]);
  v93 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v93 = &v1269;
  }
  v93->__r_.__value_.__s.__data_[14] = v92;
  v1270 = &v1269;
  v94 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v94 + 7), "Thread:Services");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:PartitionId");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 19;
  std::string::value_type v95 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v96 = &v1269;
  }
  else {
    v96 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v96->__r_.__value_.__s.__data_[0] = v95;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v97 = &v1269;
  }
  else {
    v97 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v98 = __toupper(v97->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v99 = &v1269;
  }
  else {
    v99 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v99->__r_.__value_.__s.__data_[1] = v98;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v100 = &v1269;
  }
  else {
    v100 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v101 = __toupper(v100->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v102 = &v1269;
  }
  else {
    v102 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v102->__r_.__value_.__s.__data_[2] = v101;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v103 = &v1269;
  }
  else {
    v103 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v104 = __toupper(v103->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v105 = &v1269;
  }
  else {
    v105 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v105->__r_.__value_.__s.__data_[3] = v104;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v106 = &v1269;
  }
  else {
    v106 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v107 = __toupper(v106->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v108 = &v1269;
  }
  else {
    v108 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v108->__r_.__value_.__s.__data_[4] = v107;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v109 = &v1269;
  }
  else {
    v109 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v110 = __toupper(v109->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v111 = &v1269;
  }
  else {
    v111 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v111->__r_.__value_.__s.__data_[5] = v110;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v112 = &v1269;
  }
  else {
    v112 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v113 = __toupper(v112->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v114 = &v1269;
  }
  else {
    v114 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v114->__r_.__value_.__s.__data_[6] = v113;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v115 = &v1269;
  }
  else {
    v115 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v116 = __toupper(v115->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v117 = &v1269;
  }
  else {
    v117 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v117->__r_.__value_.__s.__data_[7] = v116;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v118 = &v1269;
  }
  else {
    v118 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v119 = __toupper(v118->__r_.__value_.__s.__data_[8]);
  std::string::size_type v120 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v121 = &v1269;
  }
  else {
    v121 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v121->__r_.__value_.__s.__data_[8] = v119;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v122 = &v1269;
  }
  else {
    v122 = (std::string *)v120;
  }
  std::string::value_type v123 = __toupper(v122->__r_.__value_.__s.__data_[9]);
  std::string::size_type v124 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v125 = &v1269;
  }
  else {
    v125 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v125->__r_.__value_.__s.__data_[9] = v123;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v126 = &v1269;
  }
  else {
    v126 = (std::string *)v124;
  }
  std::string::value_type v127 = __toupper(v126->__r_.__value_.__s.__data_[10]);
  std::string::size_type v128 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v129 = &v1269;
  }
  else {
    v129 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v129->__r_.__value_.__s.__data_[10] = v127;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v130 = &v1269;
  }
  else {
    v130 = (std::string *)v128;
  }
  std::string::value_type v131 = __toupper(v130->__r_.__value_.__s.__data_[11]);
  std::string::size_type v132 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v133 = &v1269;
  }
  else {
    v133 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v133->__r_.__value_.__s.__data_[11] = v131;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v134 = &v1269;
  }
  else {
    v134 = (std::string *)v132;
  }
  std::string::value_type v135 = __toupper(v134->__r_.__value_.__s.__data_[12]);
  std::string::size_type v136 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v137 = &v1269;
  }
  else {
    v137 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v137->__r_.__value_.__s.__data_[12] = v135;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v138 = &v1269;
  }
  else {
    v138 = (std::string *)v136;
  }
  std::string::value_type v139 = __toupper(v138->__r_.__value_.__s.__data_[13]);
  std::string::size_type v140 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v141 = &v1269;
  }
  else {
    v141 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v141->__r_.__value_.__s.__data_[13] = v139;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v142 = &v1269;
  }
  else {
    v142 = (std::string *)v140;
  }
  std::string::value_type v143 = __toupper(v142->__r_.__value_.__s.__data_[14]);
  std::string::size_type v144 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v145 = &v1269;
  }
  else {
    v145 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v145->__r_.__value_.__s.__data_[14] = v143;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v146 = &v1269;
  }
  else {
    v146 = (std::string *)v144;
  }
  std::string::value_type v147 = __toupper(v146->__r_.__value_.__s.__data_[15]);
  std::string::size_type v148 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v149 = &v1269;
  }
  else {
    v149 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v149->__r_.__value_.__s.__data_[15] = v147;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v150 = &v1269;
  }
  else {
    v150 = (std::string *)v148;
  }
  std::string::value_type v151 = __toupper(v150->__r_.__value_.__s.__data_[16]);
  std::string::size_type v152 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v153 = &v1269;
  }
  else {
    v153 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v153->__r_.__value_.__s.__data_[16] = v151;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v154 = &v1269;
  }
  else {
    v154 = (std::string *)v152;
  }
  std::string::value_type v155 = __toupper(v154->__r_.__value_.__s.__data_[17]);
  std::string::size_type v156 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v157 = &v1269;
  }
  else {
    v157 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v157->__r_.__value_.__s.__data_[17] = v155;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v158 = &v1269;
  }
  else {
    v158 = (std::string *)v156;
  }
  std::string::value_type v159 = __toupper(v158->__r_.__value_.__s.__data_[18]);
  v160 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v160 = &v1269;
  }
  v160->__r_.__value_.__s.__data_[18] = v159;
  v1270 = &v1269;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v161 + 7), "Network:PartitionId");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:NodeType");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 16;
  std::string::value_type v162 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v163 = &v1269;
  }
  else {
    v163 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v163->__r_.__value_.__s.__data_[0] = v162;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v164 = &v1269;
  }
  else {
    v164 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v165 = __toupper(v164->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v166 = &v1269;
  }
  else {
    v166 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v166->__r_.__value_.__s.__data_[1] = v165;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v167 = &v1269;
  }
  else {
    v167 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v168 = __toupper(v167->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v169 = &v1269;
  }
  else {
    v169 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v169->__r_.__value_.__s.__data_[2] = v168;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v170 = &v1269;
  }
  else {
    v170 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v171 = __toupper(v170->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v172 = &v1269;
  }
  else {
    v172 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v172->__r_.__value_.__s.__data_[3] = v171;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v173 = &v1269;
  }
  else {
    v173 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v174 = __toupper(v173->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v175 = &v1269;
  }
  else {
    v175 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v175->__r_.__value_.__s.__data_[4] = v174;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v176 = &v1269;
  }
  else {
    v176 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v177 = __toupper(v176->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v178 = &v1269;
  }
  else {
    v178 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v178->__r_.__value_.__s.__data_[5] = v177;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v179 = &v1269;
  }
  else {
    v179 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v180 = __toupper(v179->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v181 = &v1269;
  }
  else {
    v181 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v181->__r_.__value_.__s.__data_[6] = v180;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v182 = &v1269;
  }
  else {
    v182 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v183 = __toupper(v182->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v184 = &v1269;
  }
  else {
    v184 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v184->__r_.__value_.__s.__data_[7] = v183;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v185 = &v1269;
  }
  else {
    v185 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v186 = __toupper(v185->__r_.__value_.__s.__data_[8]);
  std::string::size_type v187 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v188 = &v1269;
  }
  else {
    v188 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v188->__r_.__value_.__s.__data_[8] = v186;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v189 = &v1269;
  }
  else {
    v189 = (std::string *)v187;
  }
  std::string::value_type v190 = __toupper(v189->__r_.__value_.__s.__data_[9]);
  std::string::size_type v191 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v192 = &v1269;
  }
  else {
    v192 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v192->__r_.__value_.__s.__data_[9] = v190;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v193 = &v1269;
  }
  else {
    v193 = (std::string *)v191;
  }
  std::string::value_type v194 = __toupper(v193->__r_.__value_.__s.__data_[10]);
  std::string::size_type v195 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v196 = &v1269;
  }
  else {
    v196 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v196->__r_.__value_.__s.__data_[10] = v194;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v197 = &v1269;
  }
  else {
    v197 = (std::string *)v195;
  }
  std::string::value_type v198 = __toupper(v197->__r_.__value_.__s.__data_[11]);
  std::string::size_type v199 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v200 = &v1269;
  }
  else {
    v200 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v200->__r_.__value_.__s.__data_[11] = v198;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v201 = &v1269;
  }
  else {
    v201 = (std::string *)v199;
  }
  std::string::value_type v202 = __toupper(v201->__r_.__value_.__s.__data_[12]);
  std::string::size_type v203 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v204 = &v1269;
  }
  else {
    v204 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v204->__r_.__value_.__s.__data_[12] = v202;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v205 = &v1269;
  }
  else {
    v205 = (std::string *)v203;
  }
  std::string::value_type v206 = __toupper(v205->__r_.__value_.__s.__data_[13]);
  std::string::size_type v207 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v208 = &v1269;
  }
  else {
    v208 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v208->__r_.__value_.__s.__data_[13] = v206;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v209 = &v1269;
  }
  else {
    v209 = (std::string *)v207;
  }
  std::string::value_type v210 = __toupper(v209->__r_.__value_.__s.__data_[14]);
  std::string::size_type v211 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v212 = &v1269;
  }
  else {
    v212 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v212->__r_.__value_.__s.__data_[14] = v210;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v213 = &v1269;
  }
  else {
    v213 = (std::string *)v211;
  }
  std::string::value_type v214 = __toupper(v213->__r_.__value_.__s.__data_[15]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v215 = &v1269;
  }
  else {
    v215 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v215->__r_.__value_.__s.__data_[15] = v214;
  v1270 = &v1269;
  v216 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v216 + 7), "Network:NodeType");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  v1269.__r_.__value_.__r.__words[0] = 0x746174533A50434ELL;
  v1269.__r_.__value_.__l.__size_ = 101;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 9;
  std::string::value_type v217 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v218 = &v1269;
  }
  else {
    v218 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v218->__r_.__value_.__s.__data_[0] = v217;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v219 = &v1269;
  }
  else {
    v219 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v220 = __toupper(v219->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v221 = &v1269;
  }
  else {
    v221 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v221->__r_.__value_.__s.__data_[1] = v220;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v222 = &v1269;
  }
  else {
    v222 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v223 = __toupper(v222->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v224 = &v1269;
  }
  else {
    v224 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v224->__r_.__value_.__s.__data_[2] = v223;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v225 = &v1269;
  }
  else {
    v225 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v226 = __toupper(v225->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v227 = &v1269;
  }
  else {
    v227 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v227->__r_.__value_.__s.__data_[3] = v226;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v228 = &v1269;
  }
  else {
    v228 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v229 = __toupper(v228->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v230 = &v1269;
  }
  else {
    v230 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v230->__r_.__value_.__s.__data_[4] = v229;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v231 = &v1269;
  }
  else {
    v231 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v232 = __toupper(v231->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v233 = &v1269;
  }
  else {
    v233 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v233->__r_.__value_.__s.__data_[5] = v232;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v234 = &v1269;
  }
  else {
    v234 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v235 = __toupper(v234->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v236 = &v1269;
  }
  else {
    v236 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v236->__r_.__value_.__s.__data_[6] = v235;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v237 = &v1269;
  }
  else {
    v237 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v238 = __toupper(v237->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v239 = &v1269;
  }
  else {
    v239 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v239->__r_.__value_.__s.__data_[7] = v238;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v240 = &v1269;
  }
  else {
    v240 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v241 = __toupper(v240->__r_.__value_.__s.__data_[8]);
  v242 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v242 = &v1269;
  }
  v242->__r_.__value_.__s.__data_[8] = v241;
  v1270 = &v1269;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v243 + 7), "NCP:State");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  v1269.__r_.__value_.__r.__words[0] = 0x6E6168433A50434ELL;
  v1269.__r_.__value_.__l.__size_ = 7103854;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 11;
  std::string::value_type v244 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v245 = &v1269;
  }
  else {
    v245 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v245->__r_.__value_.__s.__data_[0] = v244;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v246 = &v1269;
  }
  else {
    v246 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v247 = __toupper(v246->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v248 = &v1269;
  }
  else {
    v248 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v248->__r_.__value_.__s.__data_[1] = v247;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v249 = &v1269;
  }
  else {
    v249 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v250 = __toupper(v249->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v251 = &v1269;
  }
  else {
    v251 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v251->__r_.__value_.__s.__data_[2] = v250;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v252 = &v1269;
  }
  else {
    v252 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v253 = __toupper(v252->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v254 = &v1269;
  }
  else {
    v254 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v254->__r_.__value_.__s.__data_[3] = v253;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v255 = &v1269;
  }
  else {
    v255 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v256 = __toupper(v255->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v257 = &v1269;
  }
  else {
    v257 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v257->__r_.__value_.__s.__data_[4] = v256;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v258 = &v1269;
  }
  else {
    v258 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v259 = __toupper(v258->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v260 = &v1269;
  }
  else {
    v260 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v260->__r_.__value_.__s.__data_[5] = v259;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v261 = &v1269;
  }
  else {
    v261 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v262 = __toupper(v261->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v263 = &v1269;
  }
  else {
    v263 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v263->__r_.__value_.__s.__data_[6] = v262;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v264 = &v1269;
  }
  else {
    v264 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v265 = __toupper(v264->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v266 = &v1269;
  }
  else {
    v266 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v266->__r_.__value_.__s.__data_[7] = v265;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v267 = &v1269;
  }
  else {
    v267 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v268 = __toupper(v267->__r_.__value_.__s.__data_[8]);
  std::string::size_type v269 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v270 = &v1269;
  }
  else {
    v270 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v270->__r_.__value_.__s.__data_[8] = v268;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v271 = &v1269;
  }
  else {
    v271 = (std::string *)v269;
  }
  std::string::value_type v272 = __toupper(v271->__r_.__value_.__s.__data_[9]);
  std::string::size_type v273 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v274 = &v1269;
  }
  else {
    v274 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v274->__r_.__value_.__s.__data_[9] = v272;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v275 = &v1269;
  }
  else {
    v275 = (std::string *)v273;
  }
  std::string::value_type v276 = __toupper(v275->__r_.__value_.__s.__data_[10]);
  v277 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v277 = &v1269;
  }
  v277->__r_.__value_.__s.__data_[10] = v276;
  v1270 = &v1269;
  v278 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v278 + 7), "NCP:Channel");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 22;
  strcpy((char *)&v1269, "vendor:assigned:hw:mac");
  std::string::value_type v279 = __toupper(118);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v280 = &v1269;
  }
  else {
    v280 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v280->__r_.__value_.__s.__data_[0] = v279;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v281 = &v1269;
  }
  else {
    v281 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v282 = __toupper(v281->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v283 = &v1269;
  }
  else {
    v283 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v283->__r_.__value_.__s.__data_[1] = v282;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v284 = &v1269;
  }
  else {
    v284 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v285 = __toupper(v284->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v286 = &v1269;
  }
  else {
    v286 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v286->__r_.__value_.__s.__data_[2] = v285;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v287 = &v1269;
  }
  else {
    v287 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v288 = __toupper(v287->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v289 = &v1269;
  }
  else {
    v289 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v289->__r_.__value_.__s.__data_[3] = v288;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v290 = &v1269;
  }
  else {
    v290 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v291 = __toupper(v290->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v292 = &v1269;
  }
  else {
    v292 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v292->__r_.__value_.__s.__data_[4] = v291;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v293 = &v1269;
  }
  else {
    v293 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v294 = __toupper(v293->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v295 = &v1269;
  }
  else {
    v295 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v295->__r_.__value_.__s.__data_[5] = v294;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v296 = &v1269;
  }
  else {
    v296 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v297 = __toupper(v296->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v298 = &v1269;
  }
  else {
    v298 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v298->__r_.__value_.__s.__data_[6] = v297;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v299 = &v1269;
  }
  else {
    v299 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v300 = __toupper(v299->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v301 = &v1269;
  }
  else {
    v301 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v301->__r_.__value_.__s.__data_[7] = v300;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v302 = &v1269;
  }
  else {
    v302 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v303 = __toupper(v302->__r_.__value_.__s.__data_[8]);
  std::string::size_type v304 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v305 = &v1269;
  }
  else {
    v305 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v305->__r_.__value_.__s.__data_[8] = v303;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v306 = &v1269;
  }
  else {
    v306 = (std::string *)v304;
  }
  std::string::value_type v307 = __toupper(v306->__r_.__value_.__s.__data_[9]);
  std::string::size_type v308 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v309 = &v1269;
  }
  else {
    v309 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v309->__r_.__value_.__s.__data_[9] = v307;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v310 = &v1269;
  }
  else {
    v310 = (std::string *)v308;
  }
  std::string::value_type v311 = __toupper(v310->__r_.__value_.__s.__data_[10]);
  std::string::size_type v312 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v313 = &v1269;
  }
  else {
    v313 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v313->__r_.__value_.__s.__data_[10] = v311;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v314 = &v1269;
  }
  else {
    v314 = (std::string *)v312;
  }
  std::string::value_type v315 = __toupper(v314->__r_.__value_.__s.__data_[11]);
  std::string::size_type v316 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v317 = &v1269;
  }
  else {
    v317 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v317->__r_.__value_.__s.__data_[11] = v315;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v318 = &v1269;
  }
  else {
    v318 = (std::string *)v316;
  }
  std::string::value_type v319 = __toupper(v318->__r_.__value_.__s.__data_[12]);
  std::string::size_type v320 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v321 = &v1269;
  }
  else {
    v321 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v321->__r_.__value_.__s.__data_[12] = v319;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v322 = &v1269;
  }
  else {
    v322 = (std::string *)v320;
  }
  std::string::value_type v323 = __toupper(v322->__r_.__value_.__s.__data_[13]);
  std::string::size_type v324 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v325 = &v1269;
  }
  else {
    v325 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v325->__r_.__value_.__s.__data_[13] = v323;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v326 = &v1269;
  }
  else {
    v326 = (std::string *)v324;
  }
  std::string::value_type v327 = __toupper(v326->__r_.__value_.__s.__data_[14]);
  std::string::size_type v328 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v329 = &v1269;
  }
  else {
    v329 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v329->__r_.__value_.__s.__data_[14] = v327;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v330 = &v1269;
  }
  else {
    v330 = (std::string *)v328;
  }
  std::string::value_type v331 = __toupper(v330->__r_.__value_.__s.__data_[15]);
  std::string::size_type v332 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v333 = &v1269;
  }
  else {
    v333 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v333->__r_.__value_.__s.__data_[15] = v331;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v334 = &v1269;
  }
  else {
    v334 = (std::string *)v332;
  }
  std::string::value_type v335 = __toupper(v334->__r_.__value_.__s.__data_[16]);
  std::string::size_type v336 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v337 = &v1269;
  }
  else {
    v337 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v337->__r_.__value_.__s.__data_[16] = v335;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v338 = &v1269;
  }
  else {
    v338 = (std::string *)v336;
  }
  std::string::value_type v339 = __toupper(v338->__r_.__value_.__s.__data_[17]);
  std::string::size_type v340 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v341 = &v1269;
  }
  else {
    v341 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v341->__r_.__value_.__s.__data_[17] = v339;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v342 = &v1269;
  }
  else {
    v342 = (std::string *)v340;
  }
  std::string::value_type v343 = __toupper(v342->__r_.__value_.__s.__data_[18]);
  std::string::size_type v344 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v345 = &v1269;
  }
  else {
    v345 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v345->__r_.__value_.__s.__data_[18] = v343;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v346 = &v1269;
  }
  else {
    v346 = (std::string *)v344;
  }
  std::string::value_type v347 = __toupper(v346->__r_.__value_.__s.__data_[19]);
  std::string::size_type v348 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v349 = &v1269;
  }
  else {
    v349 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v349->__r_.__value_.__s.__data_[19] = v347;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v350 = &v1269;
  }
  else {
    v350 = (std::string *)v348;
  }
  std::string::value_type v351 = __toupper(v350->__r_.__value_.__s.__data_[20]);
  std::string::size_type v352 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v353 = &v1269;
  }
  else {
    v353 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v353->__r_.__value_.__s.__data_[20] = v351;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v354 = &v1269;
  }
  else {
    v354 = (std::string *)v352;
  }
  std::string::value_type v355 = __toupper(v354->__r_.__value_.__s.__data_[21]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v356 = &v1269;
  }
  else {
    v356 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v356->__r_.__value_.__s.__data_[21] = v355;
  v1270 = &v1269;
  v357 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v357 + 7), "vendor:assigned:hw:mac");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "vendor:power:table");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 18;
  std::string::value_type v358 = __toupper(118);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v359 = &v1269;
  }
  else {
    v359 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v359->__r_.__value_.__s.__data_[0] = v358;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v360 = &v1269;
  }
  else {
    v360 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v361 = __toupper(v360->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v362 = &v1269;
  }
  else {
    v362 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v362->__r_.__value_.__s.__data_[1] = v361;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v363 = &v1269;
  }
  else {
    v363 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v364 = __toupper(v363->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v365 = &v1269;
  }
  else {
    v365 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v365->__r_.__value_.__s.__data_[2] = v364;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v366 = &v1269;
  }
  else {
    v366 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v367 = __toupper(v366->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v368 = &v1269;
  }
  else {
    v368 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v368->__r_.__value_.__s.__data_[3] = v367;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v369 = &v1269;
  }
  else {
    v369 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v370 = __toupper(v369->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v371 = &v1269;
  }
  else {
    v371 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v371->__r_.__value_.__s.__data_[4] = v370;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v372 = &v1269;
  }
  else {
    v372 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v373 = __toupper(v372->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v374 = &v1269;
  }
  else {
    v374 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v374->__r_.__value_.__s.__data_[5] = v373;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v375 = &v1269;
  }
  else {
    v375 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v376 = __toupper(v375->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v377 = &v1269;
  }
  else {
    v377 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v377->__r_.__value_.__s.__data_[6] = v376;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v378 = &v1269;
  }
  else {
    v378 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v379 = __toupper(v378->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v380 = &v1269;
  }
  else {
    v380 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v380->__r_.__value_.__s.__data_[7] = v379;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v381 = &v1269;
  }
  else {
    v381 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v382 = __toupper(v381->__r_.__value_.__s.__data_[8]);
  std::string::size_type v383 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v384 = &v1269;
  }
  else {
    v384 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v384->__r_.__value_.__s.__data_[8] = v382;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v385 = &v1269;
  }
  else {
    v385 = (std::string *)v383;
  }
  std::string::value_type v386 = __toupper(v385->__r_.__value_.__s.__data_[9]);
  std::string::size_type v387 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v388 = &v1269;
  }
  else {
    v388 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v388->__r_.__value_.__s.__data_[9] = v386;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v389 = &v1269;
  }
  else {
    v389 = (std::string *)v387;
  }
  std::string::value_type v390 = __toupper(v389->__r_.__value_.__s.__data_[10]);
  std::string::size_type v391 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v392 = &v1269;
  }
  else {
    v392 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v392->__r_.__value_.__s.__data_[10] = v390;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v393 = &v1269;
  }
  else {
    v393 = (std::string *)v391;
  }
  std::string::value_type v394 = __toupper(v393->__r_.__value_.__s.__data_[11]);
  std::string::size_type v395 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v396 = &v1269;
  }
  else {
    v396 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v396->__r_.__value_.__s.__data_[11] = v394;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v397 = &v1269;
  }
  else {
    v397 = (std::string *)v395;
  }
  std::string::value_type v398 = __toupper(v397->__r_.__value_.__s.__data_[12]);
  std::string::size_type v399 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v400 = &v1269;
  }
  else {
    v400 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v400->__r_.__value_.__s.__data_[12] = v398;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v401 = &v1269;
  }
  else {
    v401 = (std::string *)v399;
  }
  std::string::value_type v402 = __toupper(v401->__r_.__value_.__s.__data_[13]);
  std::string::size_type v403 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v404 = &v1269;
  }
  else {
    v404 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v404->__r_.__value_.__s.__data_[13] = v402;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v405 = &v1269;
  }
  else {
    v405 = (std::string *)v403;
  }
  std::string::value_type v406 = __toupper(v405->__r_.__value_.__s.__data_[14]);
  std::string::size_type v407 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v408 = &v1269;
  }
  else {
    v408 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v408->__r_.__value_.__s.__data_[14] = v406;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v409 = &v1269;
  }
  else {
    v409 = (std::string *)v407;
  }
  std::string::value_type v410 = __toupper(v409->__r_.__value_.__s.__data_[15]);
  std::string::size_type v411 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v412 = &v1269;
  }
  else {
    v412 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v412->__r_.__value_.__s.__data_[15] = v410;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v413 = &v1269;
  }
  else {
    v413 = (std::string *)v411;
  }
  std::string::value_type v414 = __toupper(v413->__r_.__value_.__s.__data_[16]);
  std::string::size_type v415 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v416 = &v1269;
  }
  else {
    v416 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v416->__r_.__value_.__s.__data_[16] = v414;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v417 = &v1269;
  }
  else {
    v417 = (std::string *)v415;
  }
  std::string::value_type v418 = __toupper(v417->__r_.__value_.__s.__data_[17]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v419 = &v1269;
  }
  else {
    v419 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v419->__r_.__value_.__s.__data_[17] = v418;
  v1270 = &v1269;
  v420 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v420 + 7), "vendor:power:table");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:Name");
  v1269.__r_.__value_.__s.__data_[13] = 0;
  HIWORD(v1269.__r_.__value_.__r.__words[1]) = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 12;
  std::string::value_type v421 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v422 = &v1269;
  }
  else {
    v422 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v422->__r_.__value_.__s.__data_[0] = v421;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v423 = &v1269;
  }
  else {
    v423 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v424 = __toupper(v423->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v425 = &v1269;
  }
  else {
    v425 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v425->__r_.__value_.__s.__data_[1] = v424;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v426 = &v1269;
  }
  else {
    v426 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v427 = __toupper(v426->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v428 = &v1269;
  }
  else {
    v428 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v428->__r_.__value_.__s.__data_[2] = v427;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v429 = &v1269;
  }
  else {
    v429 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v430 = __toupper(v429->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v431 = &v1269;
  }
  else {
    v431 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v431->__r_.__value_.__s.__data_[3] = v430;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v432 = &v1269;
  }
  else {
    v432 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v433 = __toupper(v432->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v434 = &v1269;
  }
  else {
    v434 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v434->__r_.__value_.__s.__data_[4] = v433;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v435 = &v1269;
  }
  else {
    v435 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v436 = __toupper(v435->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v437 = &v1269;
  }
  else {
    v437 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v437->__r_.__value_.__s.__data_[5] = v436;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v438 = &v1269;
  }
  else {
    v438 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v439 = __toupper(v438->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v440 = &v1269;
  }
  else {
    v440 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v440->__r_.__value_.__s.__data_[6] = v439;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v441 = &v1269;
  }
  else {
    v441 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v442 = __toupper(v441->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v443 = &v1269;
  }
  else {
    v443 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v443->__r_.__value_.__s.__data_[7] = v442;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v444 = &v1269;
  }
  else {
    v444 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v445 = __toupper(v444->__r_.__value_.__s.__data_[8]);
  std::string::size_type v446 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v447 = &v1269;
  }
  else {
    v447 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v447->__r_.__value_.__s.__data_[8] = v445;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v448 = &v1269;
  }
  else {
    v448 = (std::string *)v446;
  }
  std::string::value_type v449 = __toupper(v448->__r_.__value_.__s.__data_[9]);
  std::string::size_type v450 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v451 = &v1269;
  }
  else {
    v451 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v451->__r_.__value_.__s.__data_[9] = v449;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v452 = &v1269;
  }
  else {
    v452 = (std::string *)v450;
  }
  std::string::value_type v453 = __toupper(v452->__r_.__value_.__s.__data_[10]);
  std::string::size_type v454 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v455 = &v1269;
  }
  else {
    v455 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v455->__r_.__value_.__s.__data_[10] = v453;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v456 = &v1269;
  }
  else {
    v456 = (std::string *)v454;
  }
  std::string::value_type v457 = __toupper(v456->__r_.__value_.__s.__data_[11]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v458 = &v1269;
  }
  else {
    v458 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v458->__r_.__value_.__s.__data_[11] = v457;
  v1270 = &v1269;
  v459 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v459 + 7), "Network:Name");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:XPANID");
  v1269.__r_.__value_.__s.__data_[15] = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 14;
  std::string::value_type v460 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v461 = &v1269;
  }
  else {
    v461 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v461->__r_.__value_.__s.__data_[0] = v460;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v462 = &v1269;
  }
  else {
    v462 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v463 = __toupper(v462->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v464 = &v1269;
  }
  else {
    v464 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v464->__r_.__value_.__s.__data_[1] = v463;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v465 = &v1269;
  }
  else {
    v465 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v466 = __toupper(v465->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v467 = &v1269;
  }
  else {
    v467 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v467->__r_.__value_.__s.__data_[2] = v466;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v468 = &v1269;
  }
  else {
    v468 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v469 = __toupper(v468->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v470 = &v1269;
  }
  else {
    v470 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v470->__r_.__value_.__s.__data_[3] = v469;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v471 = &v1269;
  }
  else {
    v471 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v472 = __toupper(v471->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v473 = &v1269;
  }
  else {
    v473 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v473->__r_.__value_.__s.__data_[4] = v472;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v474 = &v1269;
  }
  else {
    v474 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v475 = __toupper(v474->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v476 = &v1269;
  }
  else {
    v476 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v476->__r_.__value_.__s.__data_[5] = v475;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v477 = &v1269;
  }
  else {
    v477 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v478 = __toupper(v477->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v479 = &v1269;
  }
  else {
    v479 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v479->__r_.__value_.__s.__data_[6] = v478;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v480 = &v1269;
  }
  else {
    v480 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v481 = __toupper(v480->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v482 = &v1269;
  }
  else {
    v482 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v482->__r_.__value_.__s.__data_[7] = v481;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v483 = &v1269;
  }
  else {
    v483 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v484 = __toupper(v483->__r_.__value_.__s.__data_[8]);
  std::string::size_type v485 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v486 = &v1269;
  }
  else {
    v486 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v486->__r_.__value_.__s.__data_[8] = v484;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v487 = &v1269;
  }
  else {
    v487 = (std::string *)v485;
  }
  std::string::value_type v488 = __toupper(v487->__r_.__value_.__s.__data_[9]);
  std::string::size_type v489 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v490 = &v1269;
  }
  else {
    v490 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v490->__r_.__value_.__s.__data_[9] = v488;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v491 = &v1269;
  }
  else {
    v491 = (std::string *)v489;
  }
  std::string::value_type v492 = __toupper(v491->__r_.__value_.__s.__data_[10]);
  std::string::size_type v493 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v494 = &v1269;
  }
  else {
    v494 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v494->__r_.__value_.__s.__data_[10] = v492;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v495 = &v1269;
  }
  else {
    v495 = (std::string *)v493;
  }
  std::string::value_type v496 = __toupper(v495->__r_.__value_.__s.__data_[11]);
  std::string::size_type v497 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v498 = &v1269;
  }
  else {
    v498 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v498->__r_.__value_.__s.__data_[11] = v496;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v499 = &v1269;
  }
  else {
    v499 = (std::string *)v497;
  }
  std::string::value_type v500 = __toupper(v499->__r_.__value_.__s.__data_[12]);
  std::string::size_type v501 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v502 = &v1269;
  }
  else {
    v502 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v502->__r_.__value_.__s.__data_[12] = v500;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v503 = &v1269;
  }
  else {
    v503 = (std::string *)v501;
  }
  std::string::value_type v504 = __toupper(v503->__r_.__value_.__s.__data_[13]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v505 = &v1269;
  }
  else {
    v505 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v505->__r_.__value_.__s.__data_[13] = v504;
  v1270 = &v1269;
  v506 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v506 + 7), "Network:XPANID");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  v507 = (char *)operator new(0x20uLL);
  strcpy(v507, "NCP:HardwareSerialNumber");
  std::string::__init_copy_ctor_external(&v1269, v507, 0x18uLL);
  for (uint64_t i = 0; i != 24; ++i)
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v509 = &v1269;
    }
    else {
      v509 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v510 = __toupper(v509->__r_.__value_.__s.__data_[i]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v511 = &v1269;
    }
    else {
      v511 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v511->__r_.__value_.__s.__data_[i] = v510;
  }
  v1270 = &v1269;
  v512 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v512 + 7), "NCP:HardwareSerialNumber");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v507);
  v513 = (char *)operator new(0x20uLL);
  strcpy(v513, "OpenThread:LogTimestampBase");
  std::string::__init_copy_ctor_external(&v1269, v513, 0x1BuLL);
  for (uint64_t j = 0; j != 27; ++j)
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v515 = &v1269;
    }
    else {
      v515 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v516 = __toupper(v515->__r_.__value_.__s.__data_[j]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v517 = &v1269;
    }
    else {
      v517 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v517->__r_.__value_.__s.__data_[j] = v516;
  }
  v1270 = &v1269;
  v518 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v518 + 7), "OpenThread:LogTimestampBase");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v513);
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 22;
  strcpy((char *)&v1269, "Thread:Leader:RouterID");
  std::string::value_type v519 = __toupper(84);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v520 = &v1269;
  }
  else {
    v520 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v520->__r_.__value_.__s.__data_[0] = v519;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v521 = &v1269;
  }
  else {
    v521 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v522 = __toupper(v521->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v523 = &v1269;
  }
  else {
    v523 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v523->__r_.__value_.__s.__data_[1] = v522;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v524 = &v1269;
  }
  else {
    v524 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v525 = __toupper(v524->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v526 = &v1269;
  }
  else {
    v526 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v526->__r_.__value_.__s.__data_[2] = v525;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v527 = &v1269;
  }
  else {
    v527 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v528 = __toupper(v527->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v529 = &v1269;
  }
  else {
    v529 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v529->__r_.__value_.__s.__data_[3] = v528;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v530 = &v1269;
  }
  else {
    v530 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v531 = __toupper(v530->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v532 = &v1269;
  }
  else {
    v532 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v532->__r_.__value_.__s.__data_[4] = v531;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v533 = &v1269;
  }
  else {
    v533 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v534 = __toupper(v533->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v535 = &v1269;
  }
  else {
    v535 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v535->__r_.__value_.__s.__data_[5] = v534;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v536 = &v1269;
  }
  else {
    v536 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v537 = __toupper(v536->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v538 = &v1269;
  }
  else {
    v538 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v538->__r_.__value_.__s.__data_[6] = v537;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v539 = &v1269;
  }
  else {
    v539 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v540 = __toupper(v539->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v541 = &v1269;
  }
  else {
    v541 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v541->__r_.__value_.__s.__data_[7] = v540;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v542 = &v1269;
  }
  else {
    v542 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v543 = __toupper(v542->__r_.__value_.__s.__data_[8]);
  std::string::size_type v544 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v545 = &v1269;
  }
  else {
    v545 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v545->__r_.__value_.__s.__data_[8] = v543;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v546 = &v1269;
  }
  else {
    v546 = (std::string *)v544;
  }
  std::string::value_type v547 = __toupper(v546->__r_.__value_.__s.__data_[9]);
  std::string::size_type v548 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v549 = &v1269;
  }
  else {
    v549 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v549->__r_.__value_.__s.__data_[9] = v547;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v550 = &v1269;
  }
  else {
    v550 = (std::string *)v548;
  }
  std::string::value_type v551 = __toupper(v550->__r_.__value_.__s.__data_[10]);
  std::string::size_type v552 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v553 = &v1269;
  }
  else {
    v553 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v553->__r_.__value_.__s.__data_[10] = v551;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v554 = &v1269;
  }
  else {
    v554 = (std::string *)v552;
  }
  std::string::value_type v555 = __toupper(v554->__r_.__value_.__s.__data_[11]);
  std::string::size_type v556 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v557 = &v1269;
  }
  else {
    v557 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v557->__r_.__value_.__s.__data_[11] = v555;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v558 = &v1269;
  }
  else {
    v558 = (std::string *)v556;
  }
  std::string::value_type v559 = __toupper(v558->__r_.__value_.__s.__data_[12]);
  std::string::size_type v560 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v561 = &v1269;
  }
  else {
    v561 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v561->__r_.__value_.__s.__data_[12] = v559;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v562 = &v1269;
  }
  else {
    v562 = (std::string *)v560;
  }
  std::string::value_type v563 = __toupper(v562->__r_.__value_.__s.__data_[13]);
  std::string::size_type v564 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v565 = &v1269;
  }
  else {
    v565 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v565->__r_.__value_.__s.__data_[13] = v563;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v566 = &v1269;
  }
  else {
    v566 = (std::string *)v564;
  }
  std::string::value_type v567 = __toupper(v566->__r_.__value_.__s.__data_[14]);
  std::string::size_type v568 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v569 = &v1269;
  }
  else {
    v569 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v569->__r_.__value_.__s.__data_[14] = v567;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v570 = &v1269;
  }
  else {
    v570 = (std::string *)v568;
  }
  std::string::value_type v571 = __toupper(v570->__r_.__value_.__s.__data_[15]);
  std::string::size_type v572 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v573 = &v1269;
  }
  else {
    v573 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v573->__r_.__value_.__s.__data_[15] = v571;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v574 = &v1269;
  }
  else {
    v574 = (std::string *)v572;
  }
  std::string::value_type v575 = __toupper(v574->__r_.__value_.__s.__data_[16]);
  std::string::size_type v576 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v577 = &v1269;
  }
  else {
    v577 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v577->__r_.__value_.__s.__data_[16] = v575;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v578 = &v1269;
  }
  else {
    v578 = (std::string *)v576;
  }
  std::string::value_type v579 = __toupper(v578->__r_.__value_.__s.__data_[17]);
  std::string::size_type v580 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v581 = &v1269;
  }
  else {
    v581 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v581->__r_.__value_.__s.__data_[17] = v579;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v582 = &v1269;
  }
  else {
    v582 = (std::string *)v580;
  }
  std::string::value_type v583 = __toupper(v582->__r_.__value_.__s.__data_[18]);
  std::string::size_type v584 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v585 = &v1269;
  }
  else {
    v585 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v585->__r_.__value_.__s.__data_[18] = v583;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v586 = &v1269;
  }
  else {
    v586 = (std::string *)v584;
  }
  std::string::value_type v587 = __toupper(v586->__r_.__value_.__s.__data_[19]);
  std::string::size_type v588 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v589 = &v1269;
  }
  else {
    v589 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v589->__r_.__value_.__s.__data_[19] = v587;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v590 = &v1269;
  }
  else {
    v590 = (std::string *)v588;
  }
  std::string::value_type v591 = __toupper(v590->__r_.__value_.__s.__data_[20]);
  std::string::size_type v592 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v593 = &v1269;
  }
  else {
    v593 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v593->__r_.__value_.__s.__data_[20] = v591;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v594 = &v1269;
  }
  else {
    v594 = (std::string *)v592;
  }
  std::string::value_type v595 = __toupper(v594->__r_.__value_.__s.__data_[21]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v596 = &v1269;
  }
  else {
    v596 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v596->__r_.__value_.__s.__data_[21] = v595;
  v1270 = &v1269;
  v597 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v597 + 7), "Thread:Leader:RouterID");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:Role");
  v1269.__r_.__value_.__s.__data_[13] = 0;
  HIWORD(v1269.__r_.__value_.__r.__words[1]) = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 12;
  std::string::value_type v598 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v599 = &v1269;
  }
  else {
    v599 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v599->__r_.__value_.__s.__data_[0] = v598;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v600 = &v1269;
  }
  else {
    v600 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v601 = __toupper(v600->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v602 = &v1269;
  }
  else {
    v602 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v602->__r_.__value_.__s.__data_[1] = v601;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v603 = &v1269;
  }
  else {
    v603 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v604 = __toupper(v603->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v605 = &v1269;
  }
  else {
    v605 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v605->__r_.__value_.__s.__data_[2] = v604;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v606 = &v1269;
  }
  else {
    v606 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v607 = __toupper(v606->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v608 = &v1269;
  }
  else {
    v608 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v608->__r_.__value_.__s.__data_[3] = v607;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v609 = &v1269;
  }
  else {
    v609 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v610 = __toupper(v609->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v611 = &v1269;
  }
  else {
    v611 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v611->__r_.__value_.__s.__data_[4] = v610;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v612 = &v1269;
  }
  else {
    v612 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v613 = __toupper(v612->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v614 = &v1269;
  }
  else {
    v614 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v614->__r_.__value_.__s.__data_[5] = v613;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v615 = &v1269;
  }
  else {
    v615 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v616 = __toupper(v615->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v617 = &v1269;
  }
  else {
    v617 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v617->__r_.__value_.__s.__data_[6] = v616;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v618 = &v1269;
  }
  else {
    v618 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v619 = __toupper(v618->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v620 = &v1269;
  }
  else {
    v620 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v620->__r_.__value_.__s.__data_[7] = v619;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v621 = &v1269;
  }
  else {
    v621 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v622 = __toupper(v621->__r_.__value_.__s.__data_[8]);
  std::string::size_type v623 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v624 = &v1269;
  }
  else {
    v624 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v624->__r_.__value_.__s.__data_[8] = v622;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v625 = &v1269;
  }
  else {
    v625 = (std::string *)v623;
  }
  std::string::value_type v626 = __toupper(v625->__r_.__value_.__s.__data_[9]);
  std::string::size_type v627 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v628 = &v1269;
  }
  else {
    v628 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v628->__r_.__value_.__s.__data_[9] = v626;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v629 = &v1269;
  }
  else {
    v629 = (std::string *)v627;
  }
  std::string::value_type v630 = __toupper(v629->__r_.__value_.__s.__data_[10]);
  std::string::size_type v631 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v632 = &v1269;
  }
  else {
    v632 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v632->__r_.__value_.__s.__data_[10] = v630;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v633 = &v1269;
  }
  else {
    v633 = (std::string *)v631;
  }
  std::string::value_type v634 = __toupper(v633->__r_.__value_.__s.__data_[11]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v635 = &v1269;
  }
  else {
    v635 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v635->__r_.__value_.__s.__data_[11] = v634;
  v1270 = &v1269;
  v636 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v636 + 7), "Network:Role");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  v637 = (char *)operator new(0x20uLL);
  strcpy(v637, "ChannelUtilizationMonitor:State");
  std::string::__init_copy_ctor_external(&v1269, v637, 0x1FuLL);
  for (uint64_t k = 0; k != 31; ++k)
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v639 = &v1269;
    }
    else {
      v639 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v640 = __toupper(v639->__r_.__value_.__s.__data_[k]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v641 = &v1269;
    }
    else {
      v641 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v641->__r_.__value_.__s.__data_[k] = v640;
  }
  v1270 = &v1269;
  v642 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v642 + 7), "ChannelUtilizationMonitor:State");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v637);
  v643 = (char *)operator new(0x20uLL);
  strcpy(v643, "Thread:ActiveDataset:Bytes");
  std::string::__init_copy_ctor_external(&v1269, v643, 0x1AuLL);
  for (uint64_t m = 0; m != 26; ++m)
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v645 = &v1269;
    }
    else {
      v645 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v646 = __toupper(v645->__r_.__value_.__s.__data_[m]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v647 = &v1269;
    }
    else {
      v647 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v647->__r_.__value_.__s.__data_[m] = v646;
  }
  v1270 = &v1269;
  v648 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v648 + 7), "Thread:ActiveDataset:Bytes");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v643);
  v1269.__r_.__value_.__r.__words[0] = 0x3A6B726F7774654ELL;
  v1269.__r_.__value_.__l.__size_ = 7955787;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 11;
  std::string::value_type v649 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v650 = &v1269;
  }
  else {
    v650 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v650->__r_.__value_.__s.__data_[0] = v649;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v651 = &v1269;
  }
  else {
    v651 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v652 = __toupper(v651->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v653 = &v1269;
  }
  else {
    v653 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v653->__r_.__value_.__s.__data_[1] = v652;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v654 = &v1269;
  }
  else {
    v654 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v655 = __toupper(v654->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v656 = &v1269;
  }
  else {
    v656 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v656->__r_.__value_.__s.__data_[2] = v655;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v657 = &v1269;
  }
  else {
    v657 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v658 = __toupper(v657->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v659 = &v1269;
  }
  else {
    v659 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v659->__r_.__value_.__s.__data_[3] = v658;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v660 = &v1269;
  }
  else {
    v660 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v661 = __toupper(v660->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v662 = &v1269;
  }
  else {
    v662 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v662->__r_.__value_.__s.__data_[4] = v661;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v663 = &v1269;
  }
  else {
    v663 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v664 = __toupper(v663->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v665 = &v1269;
  }
  else {
    v665 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v665->__r_.__value_.__s.__data_[5] = v664;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v666 = &v1269;
  }
  else {
    v666 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v667 = __toupper(v666->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v668 = &v1269;
  }
  else {
    v668 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v668->__r_.__value_.__s.__data_[6] = v667;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v669 = &v1269;
  }
  else {
    v669 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v670 = __toupper(v669->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v671 = &v1269;
  }
  else {
    v671 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v671->__r_.__value_.__s.__data_[7] = v670;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v672 = &v1269;
  }
  else {
    v672 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v673 = __toupper(v672->__r_.__value_.__s.__data_[8]);
  std::string::size_type v674 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v675 = &v1269;
  }
  else {
    v675 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v675->__r_.__value_.__s.__data_[8] = v673;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v676 = &v1269;
  }
  else {
    v676 = (std::string *)v674;
  }
  std::string::value_type v677 = __toupper(v676->__r_.__value_.__s.__data_[9]);
  std::string::size_type v678 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v679 = &v1269;
  }
  else {
    v679 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v679->__r_.__value_.__s.__data_[9] = v677;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v680 = &v1269;
  }
  else {
    v680 = (std::string *)v678;
  }
  std::string::value_type v681 = __toupper(v680->__r_.__value_.__s.__data_[10]);
  v682 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v682 = &v1269;
  }
  v682->__r_.__value_.__s.__data_[10] = v681;
  v1270 = &v1269;
  v683 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v683 + 7), "Network:Key");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:KeyIndex");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 16;
  std::string::value_type v684 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v685 = &v1269;
  }
  else {
    v685 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v685->__r_.__value_.__s.__data_[0] = v684;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v686 = &v1269;
  }
  else {
    v686 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v687 = __toupper(v686->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v688 = &v1269;
  }
  else {
    v688 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v688->__r_.__value_.__s.__data_[1] = v687;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v689 = &v1269;
  }
  else {
    v689 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v690 = __toupper(v689->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v691 = &v1269;
  }
  else {
    v691 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v691->__r_.__value_.__s.__data_[2] = v690;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v692 = &v1269;
  }
  else {
    v692 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v693 = __toupper(v692->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v694 = &v1269;
  }
  else {
    v694 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v694->__r_.__value_.__s.__data_[3] = v693;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v695 = &v1269;
  }
  else {
    v695 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v696 = __toupper(v695->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v697 = &v1269;
  }
  else {
    v697 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v697->__r_.__value_.__s.__data_[4] = v696;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v698 = &v1269;
  }
  else {
    v698 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v699 = __toupper(v698->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v700 = &v1269;
  }
  else {
    v700 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v700->__r_.__value_.__s.__data_[5] = v699;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v701 = &v1269;
  }
  else {
    v701 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v702 = __toupper(v701->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v703 = &v1269;
  }
  else {
    v703 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v703->__r_.__value_.__s.__data_[6] = v702;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v704 = &v1269;
  }
  else {
    v704 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v705 = __toupper(v704->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v706 = &v1269;
  }
  else {
    v706 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v706->__r_.__value_.__s.__data_[7] = v705;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v707 = &v1269;
  }
  else {
    v707 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v708 = __toupper(v707->__r_.__value_.__s.__data_[8]);
  std::string::size_type v709 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v710 = &v1269;
  }
  else {
    v710 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v710->__r_.__value_.__s.__data_[8] = v708;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v711 = &v1269;
  }
  else {
    v711 = (std::string *)v709;
  }
  std::string::value_type v712 = __toupper(v711->__r_.__value_.__s.__data_[9]);
  std::string::size_type v713 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v714 = &v1269;
  }
  else {
    v714 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v714->__r_.__value_.__s.__data_[9] = v712;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v715 = &v1269;
  }
  else {
    v715 = (std::string *)v713;
  }
  std::string::value_type v716 = __toupper(v715->__r_.__value_.__s.__data_[10]);
  std::string::size_type v717 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v718 = &v1269;
  }
  else {
    v718 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v718->__r_.__value_.__s.__data_[10] = v716;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v719 = &v1269;
  }
  else {
    v719 = (std::string *)v717;
  }
  std::string::value_type v720 = __toupper(v719->__r_.__value_.__s.__data_[11]);
  std::string::size_type v721 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v722 = &v1269;
  }
  else {
    v722 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v722->__r_.__value_.__s.__data_[11] = v720;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v723 = &v1269;
  }
  else {
    v723 = (std::string *)v721;
  }
  std::string::value_type v724 = __toupper(v723->__r_.__value_.__s.__data_[12]);
  std::string::size_type v725 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v726 = &v1269;
  }
  else {
    v726 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v726->__r_.__value_.__s.__data_[12] = v724;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v727 = &v1269;
  }
  else {
    v727 = (std::string *)v725;
  }
  std::string::value_type v728 = __toupper(v727->__r_.__value_.__s.__data_[13]);
  std::string::size_type v729 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v730 = &v1269;
  }
  else {
    v730 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v730->__r_.__value_.__s.__data_[13] = v728;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v731 = &v1269;
  }
  else {
    v731 = (std::string *)v729;
  }
  std::string::value_type v732 = __toupper(v731->__r_.__value_.__s.__data_[14]);
  std::string::size_type v733 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v734 = &v1269;
  }
  else {
    v734 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v734->__r_.__value_.__s.__data_[14] = v732;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v735 = &v1269;
  }
  else {
    v735 = (std::string *)v733;
  }
  std::string::value_type v736 = __toupper(v735->__r_.__value_.__s.__data_[15]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v737 = &v1269;
  }
  else {
    v737 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v737->__r_.__value_.__s.__data_[15] = v736;
  v1270 = &v1269;
  v738 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v738 + 7), "Network:KeyIndex");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:PANID");
  HIWORD(v1269.__r_.__value_.__r.__words[1]) = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 13;
  std::string::value_type v739 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v740 = &v1269;
  }
  else {
    v740 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v740->__r_.__value_.__s.__data_[0] = v739;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v741 = &v1269;
  }
  else {
    v741 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v742 = __toupper(v741->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v743 = &v1269;
  }
  else {
    v743 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v743->__r_.__value_.__s.__data_[1] = v742;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v744 = &v1269;
  }
  else {
    v744 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v745 = __toupper(v744->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v746 = &v1269;
  }
  else {
    v746 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v746->__r_.__value_.__s.__data_[2] = v745;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v747 = &v1269;
  }
  else {
    v747 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v748 = __toupper(v747->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v749 = &v1269;
  }
  else {
    v749 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v749->__r_.__value_.__s.__data_[3] = v748;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v750 = &v1269;
  }
  else {
    v750 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v751 = __toupper(v750->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v752 = &v1269;
  }
  else {
    v752 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v752->__r_.__value_.__s.__data_[4] = v751;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v753 = &v1269;
  }
  else {
    v753 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v754 = __toupper(v753->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v755 = &v1269;
  }
  else {
    v755 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v755->__r_.__value_.__s.__data_[5] = v754;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v756 = &v1269;
  }
  else {
    v756 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v757 = __toupper(v756->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v758 = &v1269;
  }
  else {
    v758 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v758->__r_.__value_.__s.__data_[6] = v757;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v759 = &v1269;
  }
  else {
    v759 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v760 = __toupper(v759->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v761 = &v1269;
  }
  else {
    v761 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v761->__r_.__value_.__s.__data_[7] = v760;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v762 = &v1269;
  }
  else {
    v762 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v763 = __toupper(v762->__r_.__value_.__s.__data_[8]);
  std::string::size_type v764 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v765 = &v1269;
  }
  else {
    v765 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v765->__r_.__value_.__s.__data_[8] = v763;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v766 = &v1269;
  }
  else {
    v766 = (std::string *)v764;
  }
  std::string::value_type v767 = __toupper(v766->__r_.__value_.__s.__data_[9]);
  std::string::size_type v768 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v769 = &v1269;
  }
  else {
    v769 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v769->__r_.__value_.__s.__data_[9] = v767;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v770 = &v1269;
  }
  else {
    v770 = (std::string *)v768;
  }
  std::string::value_type v771 = __toupper(v770->__r_.__value_.__s.__data_[10]);
  std::string::size_type v772 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v773 = &v1269;
  }
  else {
    v773 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v773->__r_.__value_.__s.__data_[10] = v771;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v774 = &v1269;
  }
  else {
    v774 = (std::string *)v772;
  }
  std::string::value_type v775 = __toupper(v774->__r_.__value_.__s.__data_[11]);
  std::string::size_type v776 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v777 = &v1269;
  }
  else {
    v777 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v777->__r_.__value_.__s.__data_[11] = v775;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v778 = &v1269;
  }
  else {
    v778 = (std::string *)v776;
  }
  std::string::value_type v779 = __toupper(v778->__r_.__value_.__s.__data_[12]);
  v780 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v780 = &v1269;
  }
  v780->__r_.__value_.__s.__data_[12] = v779;
  v1270 = &v1269;
  v781 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v781 + 7), "Network:PANID");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Network:PSKc");
  v1269.__r_.__value_.__s.__data_[13] = 0;
  HIWORD(v1269.__r_.__value_.__r.__words[1]) = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 12;
  std::string::value_type v782 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v783 = &v1269;
  }
  else {
    v783 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v783->__r_.__value_.__s.__data_[0] = v782;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v784 = &v1269;
  }
  else {
    v784 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v785 = __toupper(v784->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v786 = &v1269;
  }
  else {
    v786 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v786->__r_.__value_.__s.__data_[1] = v785;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v787 = &v1269;
  }
  else {
    v787 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v788 = __toupper(v787->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v789 = &v1269;
  }
  else {
    v789 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v789->__r_.__value_.__s.__data_[2] = v788;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v790 = &v1269;
  }
  else {
    v790 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v791 = __toupper(v790->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v792 = &v1269;
  }
  else {
    v792 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v792->__r_.__value_.__s.__data_[3] = v791;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v793 = &v1269;
  }
  else {
    v793 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v794 = __toupper(v793->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v795 = &v1269;
  }
  else {
    v795 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v795->__r_.__value_.__s.__data_[4] = v794;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v796 = &v1269;
  }
  else {
    v796 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v797 = __toupper(v796->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v798 = &v1269;
  }
  else {
    v798 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v798->__r_.__value_.__s.__data_[5] = v797;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v799 = &v1269;
  }
  else {
    v799 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v800 = __toupper(v799->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v801 = &v1269;
  }
  else {
    v801 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v801->__r_.__value_.__s.__data_[6] = v800;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v802 = &v1269;
  }
  else {
    v802 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v803 = __toupper(v802->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v804 = &v1269;
  }
  else {
    v804 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v804->__r_.__value_.__s.__data_[7] = v803;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v805 = &v1269;
  }
  else {
    v805 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v806 = __toupper(v805->__r_.__value_.__s.__data_[8]);
  std::string::size_type v807 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v808 = &v1269;
  }
  else {
    v808 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v808->__r_.__value_.__s.__data_[8] = v806;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v809 = &v1269;
  }
  else {
    v809 = (std::string *)v807;
  }
  std::string::value_type v810 = __toupper(v809->__r_.__value_.__s.__data_[9]);
  std::string::size_type v811 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v812 = &v1269;
  }
  else {
    v812 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v812->__r_.__value_.__s.__data_[9] = v810;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v813 = &v1269;
  }
  else {
    v813 = (std::string *)v811;
  }
  std::string::value_type v814 = __toupper(v813->__r_.__value_.__s.__data_[10]);
  std::string::size_type v815 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v816 = &v1269;
  }
  else {
    v816 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v816->__r_.__value_.__s.__data_[10] = v814;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v817 = &v1269;
  }
  else {
    v817 = (std::string *)v815;
  }
  std::string::value_type v818 = __toupper(v817->__r_.__value_.__s.__data_[11]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v819 = &v1269;
  }
  else {
    v819 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v819->__r_.__value_.__s.__data_[11] = v818;
  v1270 = &v1269;
  v820 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v820 + 7), "Network:PSKc");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "NCP:ExtendedAddress");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 19;
  std::string::value_type v821 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v822 = &v1269;
  }
  else {
    v822 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v822->__r_.__value_.__s.__data_[0] = v821;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v823 = &v1269;
  }
  else {
    v823 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v824 = __toupper(v823->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v825 = &v1269;
  }
  else {
    v825 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v825->__r_.__value_.__s.__data_[1] = v824;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v826 = &v1269;
  }
  else {
    v826 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v827 = __toupper(v826->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v828 = &v1269;
  }
  else {
    v828 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v828->__r_.__value_.__s.__data_[2] = v827;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v829 = &v1269;
  }
  else {
    v829 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v830 = __toupper(v829->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v831 = &v1269;
  }
  else {
    v831 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v831->__r_.__value_.__s.__data_[3] = v830;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v832 = &v1269;
  }
  else {
    v832 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v833 = __toupper(v832->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v834 = &v1269;
  }
  else {
    v834 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v834->__r_.__value_.__s.__data_[4] = v833;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v835 = &v1269;
  }
  else {
    v835 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v836 = __toupper(v835->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v837 = &v1269;
  }
  else {
    v837 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v837->__r_.__value_.__s.__data_[5] = v836;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v838 = &v1269;
  }
  else {
    v838 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v839 = __toupper(v838->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v840 = &v1269;
  }
  else {
    v840 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v840->__r_.__value_.__s.__data_[6] = v839;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v841 = &v1269;
  }
  else {
    v841 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v842 = __toupper(v841->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v843 = &v1269;
  }
  else {
    v843 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v843->__r_.__value_.__s.__data_[7] = v842;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v844 = &v1269;
  }
  else {
    v844 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v845 = __toupper(v844->__r_.__value_.__s.__data_[8]);
  std::string::size_type v846 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v847 = &v1269;
  }
  else {
    v847 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v847->__r_.__value_.__s.__data_[8] = v845;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v848 = &v1269;
  }
  else {
    v848 = (std::string *)v846;
  }
  std::string::value_type v849 = __toupper(v848->__r_.__value_.__s.__data_[9]);
  std::string::size_type v850 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v851 = &v1269;
  }
  else {
    v851 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v851->__r_.__value_.__s.__data_[9] = v849;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v852 = &v1269;
  }
  else {
    v852 = (std::string *)v850;
  }
  std::string::value_type v853 = __toupper(v852->__r_.__value_.__s.__data_[10]);
  std::string::size_type v854 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v855 = &v1269;
  }
  else {
    v855 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v855->__r_.__value_.__s.__data_[10] = v853;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v856 = &v1269;
  }
  else {
    v856 = (std::string *)v854;
  }
  std::string::value_type v857 = __toupper(v856->__r_.__value_.__s.__data_[11]);
  std::string::size_type v858 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v859 = &v1269;
  }
  else {
    v859 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v859->__r_.__value_.__s.__data_[11] = v857;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v860 = &v1269;
  }
  else {
    v860 = (std::string *)v858;
  }
  std::string::value_type v861 = __toupper(v860->__r_.__value_.__s.__data_[12]);
  std::string::size_type v862 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v863 = &v1269;
  }
  else {
    v863 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v863->__r_.__value_.__s.__data_[12] = v861;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v864 = &v1269;
  }
  else {
    v864 = (std::string *)v862;
  }
  std::string::value_type v865 = __toupper(v864->__r_.__value_.__s.__data_[13]);
  std::string::size_type v866 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v867 = &v1269;
  }
  else {
    v867 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v867->__r_.__value_.__s.__data_[13] = v865;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v868 = &v1269;
  }
  else {
    v868 = (std::string *)v866;
  }
  std::string::value_type v869 = __toupper(v868->__r_.__value_.__s.__data_[14]);
  std::string::size_type v870 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v871 = &v1269;
  }
  else {
    v871 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v871->__r_.__value_.__s.__data_[14] = v869;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v872 = &v1269;
  }
  else {
    v872 = (std::string *)v870;
  }
  std::string::value_type v873 = __toupper(v872->__r_.__value_.__s.__data_[15]);
  std::string::size_type v874 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v875 = &v1269;
  }
  else {
    v875 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v875->__r_.__value_.__s.__data_[15] = v873;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v876 = &v1269;
  }
  else {
    v876 = (std::string *)v874;
  }
  std::string::value_type v877 = __toupper(v876->__r_.__value_.__s.__data_[16]);
  std::string::size_type v878 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v879 = &v1269;
  }
  else {
    v879 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v879->__r_.__value_.__s.__data_[16] = v877;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v880 = &v1269;
  }
  else {
    v880 = (std::string *)v878;
  }
  std::string::value_type v881 = __toupper(v880->__r_.__value_.__s.__data_[17]);
  std::string::size_type v882 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v883 = &v1269;
  }
  else {
    v883 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v883->__r_.__value_.__s.__data_[17] = v881;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v884 = &v1269;
  }
  else {
    v884 = (std::string *)v882;
  }
  std::string::value_type v885 = __toupper(v884->__r_.__value_.__s.__data_[18]);
  v886 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v886 = &v1269;
  }
  v886->__r_.__value_.__s.__data_[18] = v885;
  v1270 = &v1269;
  v887 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v887 + 7), "NCP:ExtendedAddress");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Thread:OnMeshPrefixes");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 21;
  std::string::value_type v888 = __toupper(84);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v889 = &v1269;
  }
  else {
    v889 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v889->__r_.__value_.__s.__data_[0] = v888;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v890 = &v1269;
  }
  else {
    v890 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v891 = __toupper(v890->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v892 = &v1269;
  }
  else {
    v892 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v892->__r_.__value_.__s.__data_[1] = v891;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v893 = &v1269;
  }
  else {
    v893 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v894 = __toupper(v893->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v895 = &v1269;
  }
  else {
    v895 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v895->__r_.__value_.__s.__data_[2] = v894;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v896 = &v1269;
  }
  else {
    v896 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v897 = __toupper(v896->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v898 = &v1269;
  }
  else {
    v898 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v898->__r_.__value_.__s.__data_[3] = v897;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v899 = &v1269;
  }
  else {
    v899 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v900 = __toupper(v899->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v901 = &v1269;
  }
  else {
    v901 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v901->__r_.__value_.__s.__data_[4] = v900;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v902 = &v1269;
  }
  else {
    v902 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v903 = __toupper(v902->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v904 = &v1269;
  }
  else {
    v904 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v904->__r_.__value_.__s.__data_[5] = v903;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v905 = &v1269;
  }
  else {
    v905 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v906 = __toupper(v905->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v907 = &v1269;
  }
  else {
    v907 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v907->__r_.__value_.__s.__data_[6] = v906;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v908 = &v1269;
  }
  else {
    v908 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v909 = __toupper(v908->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v910 = &v1269;
  }
  else {
    v910 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v910->__r_.__value_.__s.__data_[7] = v909;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v911 = &v1269;
  }
  else {
    v911 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v912 = __toupper(v911->__r_.__value_.__s.__data_[8]);
  std::string::size_type v913 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v914 = &v1269;
  }
  else {
    v914 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v914->__r_.__value_.__s.__data_[8] = v912;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v915 = &v1269;
  }
  else {
    v915 = (std::string *)v913;
  }
  std::string::value_type v916 = __toupper(v915->__r_.__value_.__s.__data_[9]);
  std::string::size_type v917 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v918 = &v1269;
  }
  else {
    v918 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v918->__r_.__value_.__s.__data_[9] = v916;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v919 = &v1269;
  }
  else {
    v919 = (std::string *)v917;
  }
  std::string::value_type v920 = __toupper(v919->__r_.__value_.__s.__data_[10]);
  std::string::size_type v921 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v922 = &v1269;
  }
  else {
    v922 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v922->__r_.__value_.__s.__data_[10] = v920;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v923 = &v1269;
  }
  else {
    v923 = (std::string *)v921;
  }
  std::string::value_type v924 = __toupper(v923->__r_.__value_.__s.__data_[11]);
  std::string::size_type v925 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v926 = &v1269;
  }
  else {
    v926 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v926->__r_.__value_.__s.__data_[11] = v924;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v927 = &v1269;
  }
  else {
    v927 = (std::string *)v925;
  }
  std::string::value_type v928 = __toupper(v927->__r_.__value_.__s.__data_[12]);
  std::string::size_type v929 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v930 = &v1269;
  }
  else {
    v930 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v930->__r_.__value_.__s.__data_[12] = v928;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v931 = &v1269;
  }
  else {
    v931 = (std::string *)v929;
  }
  std::string::value_type v932 = __toupper(v931->__r_.__value_.__s.__data_[13]);
  std::string::size_type v933 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v934 = &v1269;
  }
  else {
    v934 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v934->__r_.__value_.__s.__data_[13] = v932;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v935 = &v1269;
  }
  else {
    v935 = (std::string *)v933;
  }
  std::string::value_type v936 = __toupper(v935->__r_.__value_.__s.__data_[14]);
  std::string::size_type v937 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v938 = &v1269;
  }
  else {
    v938 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v938->__r_.__value_.__s.__data_[14] = v936;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v939 = &v1269;
  }
  else {
    v939 = (std::string *)v937;
  }
  std::string::value_type v940 = __toupper(v939->__r_.__value_.__s.__data_[15]);
  std::string::size_type v941 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v942 = &v1269;
  }
  else {
    v942 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v942->__r_.__value_.__s.__data_[15] = v940;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v943 = &v1269;
  }
  else {
    v943 = (std::string *)v941;
  }
  std::string::value_type v944 = __toupper(v943->__r_.__value_.__s.__data_[16]);
  std::string::size_type v945 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v946 = &v1269;
  }
  else {
    v946 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v946->__r_.__value_.__s.__data_[16] = v944;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v947 = &v1269;
  }
  else {
    v947 = (std::string *)v945;
  }
  std::string::value_type v948 = __toupper(v947->__r_.__value_.__s.__data_[17]);
  std::string::size_type v949 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v950 = &v1269;
  }
  else {
    v950 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v950->__r_.__value_.__s.__data_[17] = v948;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v951 = &v1269;
  }
  else {
    v951 = (std::string *)v949;
  }
  std::string::value_type v952 = __toupper(v951->__r_.__value_.__s.__data_[18]);
  std::string::size_type v953 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v954 = &v1269;
  }
  else {
    v954 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v954->__r_.__value_.__s.__data_[18] = v952;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v955 = &v1269;
  }
  else {
    v955 = (std::string *)v953;
  }
  std::string::value_type v956 = __toupper(v955->__r_.__value_.__s.__data_[19]);
  std::string::size_type v957 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v958 = &v1269;
  }
  else {
    v958 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v958->__r_.__value_.__s.__data_[19] = v956;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v959 = &v1269;
  }
  else {
    v959 = (std::string *)v957;
  }
  std::string::value_type v960 = __toupper(v959->__r_.__value_.__s.__data_[20]);
  v961 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v961 = &v1269;
  }
  v961->__r_.__value_.__s.__data_[20] = v960;
  v1270 = &v1269;
  v962 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v962 + 7), "Thread:OnMeshPrefixes");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Thread:OffMeshRoutes");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 20;
  std::string::value_type v963 = __toupper(84);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v964 = &v1269;
  }
  else {
    v964 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v964->__r_.__value_.__s.__data_[0] = v963;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v965 = &v1269;
  }
  else {
    v965 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v966 = __toupper(v965->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v967 = &v1269;
  }
  else {
    v967 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v967->__r_.__value_.__s.__data_[1] = v966;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v968 = &v1269;
  }
  else {
    v968 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v969 = __toupper(v968->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v970 = &v1269;
  }
  else {
    v970 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v970->__r_.__value_.__s.__data_[2] = v969;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v971 = &v1269;
  }
  else {
    v971 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v972 = __toupper(v971->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v973 = &v1269;
  }
  else {
    v973 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v973->__r_.__value_.__s.__data_[3] = v972;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v974 = &v1269;
  }
  else {
    v974 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v975 = __toupper(v974->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v976 = &v1269;
  }
  else {
    v976 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v976->__r_.__value_.__s.__data_[4] = v975;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v977 = &v1269;
  }
  else {
    v977 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v978 = __toupper(v977->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v979 = &v1269;
  }
  else {
    v979 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v979->__r_.__value_.__s.__data_[5] = v978;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v980 = &v1269;
  }
  else {
    v980 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v981 = __toupper(v980->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v982 = &v1269;
  }
  else {
    v982 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v982->__r_.__value_.__s.__data_[6] = v981;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v983 = &v1269;
  }
  else {
    v983 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v984 = __toupper(v983->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v985 = &v1269;
  }
  else {
    v985 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v985->__r_.__value_.__s.__data_[7] = v984;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v986 = &v1269;
  }
  else {
    v986 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v987 = __toupper(v986->__r_.__value_.__s.__data_[8]);
  std::string::size_type v988 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v989 = &v1269;
  }
  else {
    v989 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v989->__r_.__value_.__s.__data_[8] = v987;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v990 = &v1269;
  }
  else {
    v990 = (std::string *)v988;
  }
  std::string::value_type v991 = __toupper(v990->__r_.__value_.__s.__data_[9]);
  std::string::size_type v992 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v993 = &v1269;
  }
  else {
    v993 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v993->__r_.__value_.__s.__data_[9] = v991;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v994 = &v1269;
  }
  else {
    v994 = (std::string *)v992;
  }
  std::string::value_type v995 = __toupper(v994->__r_.__value_.__s.__data_[10]);
  std::string::size_type v996 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v997 = &v1269;
  }
  else {
    v997 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v997->__r_.__value_.__s.__data_[10] = v995;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v998 = &v1269;
  }
  else {
    v998 = (std::string *)v996;
  }
  std::string::value_type v999 = __toupper(v998->__r_.__value_.__s.__data_[11]);
  std::string::size_type v1000 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1001 = &v1269;
  }
  else {
    v1001 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1001->__r_.__value_.__s.__data_[11] = v999;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1002 = &v1269;
  }
  else {
    v1002 = (std::string *)v1000;
  }
  std::string::value_type v1003 = __toupper(v1002->__r_.__value_.__s.__data_[12]);
  std::string::size_type v1004 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1005 = &v1269;
  }
  else {
    v1005 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1005->__r_.__value_.__s.__data_[12] = v1003;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1006 = &v1269;
  }
  else {
    v1006 = (std::string *)v1004;
  }
  std::string::value_type v1007 = __toupper(v1006->__r_.__value_.__s.__data_[13]);
  std::string::size_type v1008 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1009 = &v1269;
  }
  else {
    v1009 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1009->__r_.__value_.__s.__data_[13] = v1007;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1010 = &v1269;
  }
  else {
    v1010 = (std::string *)v1008;
  }
  std::string::value_type v1011 = __toupper(v1010->__r_.__value_.__s.__data_[14]);
  std::string::size_type v1012 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1013 = &v1269;
  }
  else {
    v1013 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1013->__r_.__value_.__s.__data_[14] = v1011;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1014 = &v1269;
  }
  else {
    v1014 = (std::string *)v1012;
  }
  std::string::value_type v1015 = __toupper(v1014->__r_.__value_.__s.__data_[15]);
  std::string::size_type v1016 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1017 = &v1269;
  }
  else {
    v1017 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1017->__r_.__value_.__s.__data_[15] = v1015;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1018 = &v1269;
  }
  else {
    v1018 = (std::string *)v1016;
  }
  std::string::value_type v1019 = __toupper(v1018->__r_.__value_.__s.__data_[16]);
  std::string::size_type v1020 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1021 = &v1269;
  }
  else {
    v1021 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1021->__r_.__value_.__s.__data_[16] = v1019;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1022 = &v1269;
  }
  else {
    v1022 = (std::string *)v1020;
  }
  std::string::value_type v1023 = __toupper(v1022->__r_.__value_.__s.__data_[17]);
  std::string::size_type v1024 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1025 = &v1269;
  }
  else {
    v1025 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1025->__r_.__value_.__s.__data_[17] = v1023;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1026 = &v1269;
  }
  else {
    v1026 = (std::string *)v1024;
  }
  std::string::value_type v1027 = __toupper(v1026->__r_.__value_.__s.__data_[18]);
  std::string::size_type v1028 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1029 = &v1269;
  }
  else {
    v1029 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1029->__r_.__value_.__s.__data_[18] = v1027;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1030 = &v1269;
  }
  else {
    v1030 = (std::string *)v1028;
  }
  std::string::value_type v1031 = __toupper(v1030->__r_.__value_.__s.__data_[19]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1032 = &v1269;
  }
  else {
    v1032 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1032->__r_.__value_.__s.__data_[19] = v1031;
  v1270 = &v1269;
  v1033 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1033 + 7), "Thread:OffMeshRoutes");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Interface:Up");
  v1269.__r_.__value_.__s.__data_[13] = 0;
  HIWORD(v1269.__r_.__value_.__r.__words[1]) = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 12;
  std::string::value_type v1034 = __toupper(73);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1035 = &v1269;
  }
  else {
    v1035 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1035->__r_.__value_.__s.__data_[0] = v1034;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1036 = &v1269;
  }
  else {
    v1036 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1037 = __toupper(v1036->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1038 = &v1269;
  }
  else {
    v1038 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1038->__r_.__value_.__s.__data_[1] = v1037;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1039 = &v1269;
  }
  else {
    v1039 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1040 = __toupper(v1039->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1041 = &v1269;
  }
  else {
    v1041 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1041->__r_.__value_.__s.__data_[2] = v1040;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1042 = &v1269;
  }
  else {
    v1042 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1043 = __toupper(v1042->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1044 = &v1269;
  }
  else {
    v1044 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1044->__r_.__value_.__s.__data_[3] = v1043;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1045 = &v1269;
  }
  else {
    v1045 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1046 = __toupper(v1045->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1047 = &v1269;
  }
  else {
    v1047 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1047->__r_.__value_.__s.__data_[4] = v1046;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1048 = &v1269;
  }
  else {
    v1048 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1049 = __toupper(v1048->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1050 = &v1269;
  }
  else {
    v1050 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1050->__r_.__value_.__s.__data_[5] = v1049;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1051 = &v1269;
  }
  else {
    v1051 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1052 = __toupper(v1051->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1053 = &v1269;
  }
  else {
    v1053 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1053->__r_.__value_.__s.__data_[6] = v1052;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1054 = &v1269;
  }
  else {
    v1054 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1055 = __toupper(v1054->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1056 = &v1269;
  }
  else {
    v1056 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1056->__r_.__value_.__s.__data_[7] = v1055;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1057 = &v1269;
  }
  else {
    v1057 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1058 = __toupper(v1057->__r_.__value_.__s.__data_[8]);
  std::string::size_type v1059 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1060 = &v1269;
  }
  else {
    v1060 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1060->__r_.__value_.__s.__data_[8] = v1058;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1061 = &v1269;
  }
  else {
    v1061 = (std::string *)v1059;
  }
  std::string::value_type v1062 = __toupper(v1061->__r_.__value_.__s.__data_[9]);
  std::string::size_type v1063 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1064 = &v1269;
  }
  else {
    v1064 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1064->__r_.__value_.__s.__data_[9] = v1062;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1065 = &v1269;
  }
  else {
    v1065 = (std::string *)v1063;
  }
  std::string::value_type v1066 = __toupper(v1065->__r_.__value_.__s.__data_[10]);
  std::string::size_type v1067 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1068 = &v1269;
  }
  else {
    v1068 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1068->__r_.__value_.__s.__data_[10] = v1066;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1069 = &v1269;
  }
  else {
    v1069 = (std::string *)v1067;
  }
  std::string::value_type v1070 = __toupper(v1069->__r_.__value_.__s.__data_[11]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1071 = &v1269;
  }
  else {
    v1071 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1071->__r_.__value_.__s.__data_[11] = v1070;
  v1270 = &v1269;
  v1072 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1072 + 7), "Interface:Up");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  v1073 = (char *)operator new(0x20uLL);
  strcpy(v1073, "Config:TUN:InterfaceName");
  std::string::__init_copy_ctor_external(&v1269, v1073, 0x18uLL);
  for (uint64_t n = 0; n != 24; ++n)
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1075 = &v1269;
    }
    else {
      v1075 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v1076 = __toupper(v1075->__r_.__value_.__s.__data_[n]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1077 = &v1269;
    }
    else {
      v1077 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v1077->__r_.__value_.__s.__data_[n] = v1076;
  }
  v1270 = &v1269;
  v1078 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1078 + 7), "Config:TUN:InterfaceName");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v1073);
  v1269.__r_.__value_.__r.__words[0] = 0x6F5058543A50434ELL;
  v1269.__r_.__value_.__l.__size_ = 7497079;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 11;
  std::string::value_type v1079 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1080 = &v1269;
  }
  else {
    v1080 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1080->__r_.__value_.__s.__data_[0] = v1079;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1081 = &v1269;
  }
  else {
    v1081 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1082 = __toupper(v1081->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1083 = &v1269;
  }
  else {
    v1083 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1083->__r_.__value_.__s.__data_[1] = v1082;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1084 = &v1269;
  }
  else {
    v1084 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1085 = __toupper(v1084->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1086 = &v1269;
  }
  else {
    v1086 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1086->__r_.__value_.__s.__data_[2] = v1085;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1087 = &v1269;
  }
  else {
    v1087 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1088 = __toupper(v1087->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1089 = &v1269;
  }
  else {
    v1089 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1089->__r_.__value_.__s.__data_[3] = v1088;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1090 = &v1269;
  }
  else {
    v1090 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1091 = __toupper(v1090->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1092 = &v1269;
  }
  else {
    v1092 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1092->__r_.__value_.__s.__data_[4] = v1091;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1093 = &v1269;
  }
  else {
    v1093 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1094 = __toupper(v1093->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1095 = &v1269;
  }
  else {
    v1095 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1095->__r_.__value_.__s.__data_[5] = v1094;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1096 = &v1269;
  }
  else {
    v1096 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1097 = __toupper(v1096->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1098 = &v1269;
  }
  else {
    v1098 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1098->__r_.__value_.__s.__data_[6] = v1097;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1099 = &v1269;
  }
  else {
    v1099 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1100 = __toupper(v1099->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1101 = &v1269;
  }
  else {
    v1101 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1101->__r_.__value_.__s.__data_[7] = v1100;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1102 = &v1269;
  }
  else {
    v1102 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1103 = __toupper(v1102->__r_.__value_.__s.__data_[8]);
  std::string::size_type v1104 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1105 = &v1269;
  }
  else {
    v1105 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1105->__r_.__value_.__s.__data_[8] = v1103;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1106 = &v1269;
  }
  else {
    v1106 = (std::string *)v1104;
  }
  std::string::value_type v1107 = __toupper(v1106->__r_.__value_.__s.__data_[9]);
  std::string::size_type v1108 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1109 = &v1269;
  }
  else {
    v1109 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1109->__r_.__value_.__s.__data_[9] = v1107;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1110 = &v1269;
  }
  else {
    v1110 = (std::string *)v1108;
  }
  std::string::value_type v1111 = __toupper(v1110->__r_.__value_.__s.__data_[10]);
  v1112 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1112 = &v1269;
  }
  v1112->__r_.__value_.__s.__data_[10] = v1111;
  v1270 = &v1269;
  v1113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1113 + 7), "NCP:TXPower");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "NCP:ChannelMask");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 15;
  std::string::value_type v1114 = __toupper(78);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1115 = &v1269;
  }
  else {
    v1115 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1115->__r_.__value_.__s.__data_[0] = v1114;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1116 = &v1269;
  }
  else {
    v1116 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1117 = __toupper(v1116->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1118 = &v1269;
  }
  else {
    v1118 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1118->__r_.__value_.__s.__data_[1] = v1117;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1119 = &v1269;
  }
  else {
    v1119 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1120 = __toupper(v1119->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1121 = &v1269;
  }
  else {
    v1121 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1121->__r_.__value_.__s.__data_[2] = v1120;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1122 = &v1269;
  }
  else {
    v1122 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1123 = __toupper(v1122->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1124 = &v1269;
  }
  else {
    v1124 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1124->__r_.__value_.__s.__data_[3] = v1123;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1125 = &v1269;
  }
  else {
    v1125 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1126 = __toupper(v1125->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1127 = &v1269;
  }
  else {
    v1127 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1127->__r_.__value_.__s.__data_[4] = v1126;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1128 = &v1269;
  }
  else {
    v1128 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1129 = __toupper(v1128->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1130 = &v1269;
  }
  else {
    v1130 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1130->__r_.__value_.__s.__data_[5] = v1129;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1131 = &v1269;
  }
  else {
    v1131 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1132 = __toupper(v1131->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1133 = &v1269;
  }
  else {
    v1133 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1133->__r_.__value_.__s.__data_[6] = v1132;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1134 = &v1269;
  }
  else {
    v1134 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1135 = __toupper(v1134->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1136 = &v1269;
  }
  else {
    v1136 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1136->__r_.__value_.__s.__data_[7] = v1135;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1137 = &v1269;
  }
  else {
    v1137 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1138 = __toupper(v1137->__r_.__value_.__s.__data_[8]);
  std::string::size_type v1139 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1140 = &v1269;
  }
  else {
    v1140 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1140->__r_.__value_.__s.__data_[8] = v1138;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1141 = &v1269;
  }
  else {
    v1141 = (std::string *)v1139;
  }
  std::string::value_type v1142 = __toupper(v1141->__r_.__value_.__s.__data_[9]);
  std::string::size_type v1143 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1144 = &v1269;
  }
  else {
    v1144 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1144->__r_.__value_.__s.__data_[9] = v1142;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1145 = &v1269;
  }
  else {
    v1145 = (std::string *)v1143;
  }
  std::string::value_type v1146 = __toupper(v1145->__r_.__value_.__s.__data_[10]);
  std::string::size_type v1147 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1148 = &v1269;
  }
  else {
    v1148 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1148->__r_.__value_.__s.__data_[10] = v1146;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1149 = &v1269;
  }
  else {
    v1149 = (std::string *)v1147;
  }
  std::string::value_type v1150 = __toupper(v1149->__r_.__value_.__s.__data_[11]);
  std::string::size_type v1151 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1152 = &v1269;
  }
  else {
    v1152 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1152->__r_.__value_.__s.__data_[11] = v1150;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1153 = &v1269;
  }
  else {
    v1153 = (std::string *)v1151;
  }
  std::string::value_type v1154 = __toupper(v1153->__r_.__value_.__s.__data_[12]);
  std::string::size_type v1155 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1156 = &v1269;
  }
  else {
    v1156 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1156->__r_.__value_.__s.__data_[12] = v1154;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1157 = &v1269;
  }
  else {
    v1157 = (std::string *)v1155;
  }
  std::string::value_type v1158 = __toupper(v1157->__r_.__value_.__s.__data_[13]);
  std::string::size_type v1159 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1160 = &v1269;
  }
  else {
    v1160 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1160->__r_.__value_.__s.__data_[13] = v1158;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1161 = &v1269;
  }
  else {
    v1161 = (std::string *)v1159;
  }
  std::string::value_type v1162 = __toupper(v1161->__r_.__value_.__s.__data_[14]);
  v1163 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1163 = &v1269;
  }
  v1163->__r_.__value_.__s.__data_[14] = v1162;
  v1270 = &v1269;
  v1164 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1164 + 7), "NCP:ChannelMask");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  strcpy((char *)&v1269, "Thread:RLOC16");
  HIWORD(v1269.__r_.__value_.__r.__words[1]) = 0;
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 13;
  std::string::value_type v1165 = __toupper(84);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1166 = &v1269;
  }
  else {
    v1166 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1166->__r_.__value_.__s.__data_[0] = v1165;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1167 = &v1269;
  }
  else {
    v1167 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1168 = __toupper(v1167->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1169 = &v1269;
  }
  else {
    v1169 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1169->__r_.__value_.__s.__data_[1] = v1168;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1170 = &v1269;
  }
  else {
    v1170 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1171 = __toupper(v1170->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1172 = &v1269;
  }
  else {
    v1172 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1172->__r_.__value_.__s.__data_[2] = v1171;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1173 = &v1269;
  }
  else {
    v1173 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1174 = __toupper(v1173->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1175 = &v1269;
  }
  else {
    v1175 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1175->__r_.__value_.__s.__data_[3] = v1174;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1176 = &v1269;
  }
  else {
    v1176 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1177 = __toupper(v1176->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1178 = &v1269;
  }
  else {
    v1178 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1178->__r_.__value_.__s.__data_[4] = v1177;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1179 = &v1269;
  }
  else {
    v1179 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1180 = __toupper(v1179->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1181 = &v1269;
  }
  else {
    v1181 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1181->__r_.__value_.__s.__data_[5] = v1180;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1182 = &v1269;
  }
  else {
    v1182 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1183 = __toupper(v1182->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1184 = &v1269;
  }
  else {
    v1184 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1184->__r_.__value_.__s.__data_[6] = v1183;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1185 = &v1269;
  }
  else {
    v1185 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1186 = __toupper(v1185->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1187 = &v1269;
  }
  else {
    v1187 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1187->__r_.__value_.__s.__data_[7] = v1186;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1188 = &v1269;
  }
  else {
    v1188 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1189 = __toupper(v1188->__r_.__value_.__s.__data_[8]);
  std::string::size_type v1190 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1191 = &v1269;
  }
  else {
    v1191 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1191->__r_.__value_.__s.__data_[8] = v1189;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1192 = &v1269;
  }
  else {
    v1192 = (std::string *)v1190;
  }
  std::string::value_type v1193 = __toupper(v1192->__r_.__value_.__s.__data_[9]);
  std::string::size_type v1194 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1195 = &v1269;
  }
  else {
    v1195 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1195->__r_.__value_.__s.__data_[9] = v1193;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1196 = &v1269;
  }
  else {
    v1196 = (std::string *)v1194;
  }
  std::string::value_type v1197 = __toupper(v1196->__r_.__value_.__s.__data_[10]);
  std::string::size_type v1198 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1199 = &v1269;
  }
  else {
    v1199 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1199->__r_.__value_.__s.__data_[10] = v1197;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1200 = &v1269;
  }
  else {
    v1200 = (std::string *)v1198;
  }
  std::string::value_type v1201 = __toupper(v1200->__r_.__value_.__s.__data_[11]);
  std::string::size_type v1202 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1203 = &v1269;
  }
  else {
    v1203 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1203->__r_.__value_.__s.__data_[11] = v1201;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1204 = &v1269;
  }
  else {
    v1204 = (std::string *)v1202;
  }
  std::string::value_type v1205 = __toupper(v1204->__r_.__value_.__s.__data_[12]);
  v1206 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1206 = &v1269;
  }
  v1206->__r_.__value_.__s.__data_[12] = v1205;
  v1270 = &v1269;
  v1207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1207 + 7), "Thread:RLOC16");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  v1208 = (char *)operator new(0x19uLL);
  strcpy(v1208, "Leader:Reelect:Counters");
  std::string::__init_copy_ctor_external(&v1269, v1208, 0x17uLL);
  for (iuint64_t i = 0; ii != 23; ++ii)
  {
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1210 = &v1269;
    }
    else {
      v1210 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    std::string::value_type v1211 = __toupper(v1210->__r_.__value_.__s.__data_[ii]);
    if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1212 = &v1269;
    }
    else {
      v1212 = (std::string *)v1269.__r_.__value_.__r.__words[0];
    }
    v1212->__r_.__value_.__s.__data_[ii] = v1211;
  }
  v1270 = &v1269;
  v1213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1213 + 7), "Leader:Reelect:Counters");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
  operator delete(v1208);
  strcpy((char *)&v1269, "Thread:Reconnect");
  *((unsigned char *)&v1269.__r_.__value_.__s + 23) = 16;
  std::string::value_type v1214 = __toupper(84);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1215 = &v1269;
  }
  else {
    v1215 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1215->__r_.__value_.__s.__data_[0] = v1214;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1216 = &v1269;
  }
  else {
    v1216 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1217 = __toupper(v1216->__r_.__value_.__s.__data_[1]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1218 = &v1269;
  }
  else {
    v1218 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1218->__r_.__value_.__s.__data_[1] = v1217;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1219 = &v1269;
  }
  else {
    v1219 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1220 = __toupper(v1219->__r_.__value_.__s.__data_[2]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1221 = &v1269;
  }
  else {
    v1221 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1221->__r_.__value_.__s.__data_[2] = v1220;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1222 = &v1269;
  }
  else {
    v1222 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1223 = __toupper(v1222->__r_.__value_.__s.__data_[3]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1224 = &v1269;
  }
  else {
    v1224 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1224->__r_.__value_.__s.__data_[3] = v1223;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1225 = &v1269;
  }
  else {
    v1225 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1226 = __toupper(v1225->__r_.__value_.__s.__data_[4]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1227 = &v1269;
  }
  else {
    v1227 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1227->__r_.__value_.__s.__data_[4] = v1226;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1228 = &v1269;
  }
  else {
    v1228 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1229 = __toupper(v1228->__r_.__value_.__s.__data_[5]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1230 = &v1269;
  }
  else {
    v1230 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1230->__r_.__value_.__s.__data_[5] = v1229;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1231 = &v1269;
  }
  else {
    v1231 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1232 = __toupper(v1231->__r_.__value_.__s.__data_[6]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1233 = &v1269;
  }
  else {
    v1233 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1233->__r_.__value_.__s.__data_[6] = v1232;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1234 = &v1269;
  }
  else {
    v1234 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1235 = __toupper(v1234->__r_.__value_.__s.__data_[7]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1236 = &v1269;
  }
  else {
    v1236 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1236->__r_.__value_.__s.__data_[7] = v1235;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1237 = &v1269;
  }
  else {
    v1237 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v1238 = __toupper(v1237->__r_.__value_.__s.__data_[8]);
  std::string::size_type v1239 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1240 = &v1269;
  }
  else {
    v1240 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1240->__r_.__value_.__s.__data_[8] = v1238;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1241 = &v1269;
  }
  else {
    v1241 = (std::string *)v1239;
  }
  std::string::value_type v1242 = __toupper(v1241->__r_.__value_.__s.__data_[9]);
  std::string::size_type v1243 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1244 = &v1269;
  }
  else {
    v1244 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1244->__r_.__value_.__s.__data_[9] = v1242;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1245 = &v1269;
  }
  else {
    v1245 = (std::string *)v1243;
  }
  std::string::value_type v1246 = __toupper(v1245->__r_.__value_.__s.__data_[10]);
  std::string::size_type v1247 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1248 = &v1269;
  }
  else {
    v1248 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1248->__r_.__value_.__s.__data_[10] = v1246;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1249 = &v1269;
  }
  else {
    v1249 = (std::string *)v1247;
  }
  std::string::value_type v1250 = __toupper(v1249->__r_.__value_.__s.__data_[11]);
  std::string::size_type v1251 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1252 = &v1269;
  }
  else {
    v1252 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1252->__r_.__value_.__s.__data_[11] = v1250;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1253 = &v1269;
  }
  else {
    v1253 = (std::string *)v1251;
  }
  std::string::value_type v1254 = __toupper(v1253->__r_.__value_.__s.__data_[12]);
  std::string::size_type v1255 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1256 = &v1269;
  }
  else {
    v1256 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1256->__r_.__value_.__s.__data_[12] = v1254;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1257 = &v1269;
  }
  else {
    v1257 = (std::string *)v1255;
  }
  std::string::value_type v1258 = __toupper(v1257->__r_.__value_.__s.__data_[13]);
  std::string::size_type v1259 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1260 = &v1269;
  }
  else {
    v1260 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1260->__r_.__value_.__s.__data_[13] = v1258;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1261 = &v1269;
  }
  else {
    v1261 = (std::string *)v1259;
  }
  std::string::value_type v1262 = __toupper(v1261->__r_.__value_.__s.__data_[14]);
  std::string::size_type v1263 = v1269.__r_.__value_.__r.__words[0];
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1264 = &v1269;
  }
  else {
    v1264 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1264->__r_.__value_.__s.__data_[14] = v1262;
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1265 = &v1269;
  }
  else {
    v1265 = (std::string *)v1263;
  }
  std::string::value_type v1266 = __toupper(v1265->__r_.__value_.__s.__data_[15]);
  if ((v1269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1267 = &v1269;
  }
  else {
    v1267 = (std::string *)v1269.__r_.__value_.__r.__words[0];
  }
  v1267->__r_.__value_.__s.__data_[15] = v1266;
  v1270 = &v1269;
  v1268 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v1269.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1270);
  std::string::assign((std::string *)(v1268 + 7), "Thread:Reconnect");
  if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1269.__r_.__value_.__l.__data_);
  }
}

void sub_1000AEAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void XPCIPCAPI_v1_rcp::~XPCIPCAPI_v1_rcp(XPCIPCAPI_v1_rcp *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string::value_type v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp: Destructor", v6, 2u);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 48, *((void *)this + 7));
      CFStringRef v4 = (std::__shared_weak_count *)*((void *)this + 5);
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 48, *((void *)this + 7));
    CFStringRef v4 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 48, *((void *)this + 7));
  CFStringRef v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v4) {
    goto LABEL_13;
  }
LABEL_11:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_13:
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    dispatch_release(v5);
  }
  std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy((uint64_t)this, *((char **)this + 1));
}

__n128 XPCIPCAPI_v1_rcp::get_case_corrected_property@<Q0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  p_p = &__p;
  XPCIPCAPI_v1_rcp::to_upper((uint64_t)a2, &__p);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v7 = a1 + 56;
  uint64_t v8 = v9;
  char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v9)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v12 = v7;
    do
    {
      int v13 = *(char *)(v8 + 55);
      if (v13 >= 0) {
        size_t v14 = *(unsigned __int8 *)(v8 + 55);
      }
      else {
        size_t v14 = *(void *)(v8 + 40);
      }
      if (v13 >= 0) {
        std::string::value_type v15 = (const void *)(v8 + 32);
      }
      else {
        std::string::value_type v15 = *(const void **)(v8 + 32);
      }
      if (size >= v14) {
        size_t v16 = v14;
      }
      else {
        size_t v16 = size;
      }
      int v17 = memcmp(v15, p_p, v16);
      BOOL v18 = v14 < size;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      BOOL v19 = !v18;
      if (v18) {
        uint64_t v20 = (uint64_t *)(v8 + 8);
      }
      else {
        uint64_t v20 = (uint64_t *)v8;
      }
      if (v19) {
        uint64_t v12 = v8;
      }
      uint64_t v8 = *v20;
    }
    while (*v20);
    if (v12 != v7)
    {
      int v21 = *(char *)(v12 + 55);
      std::string::size_type v22 = v21 >= 0 ? *(unsigned __int8 *)(v12 + 55) : *(void *)(v12 + 40);
      CFDictionaryRef v23 = v21 >= 0 ? (const void *)(v12 + 32) : *(const void **)(v12 + 32);
      size_t v24 = v22 >= size ? size : v22;
      int v25 = memcmp(p_p, v23, v24);
      BOOL v26 = size < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26)
      {
        if ((v10 & 0x80) == 0) {
          goto LABEL_40;
        }
LABEL_44:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v12 == v7) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
  }
  uint64_t v12 = v7;
  if (v10 < 0) {
    goto LABEL_44;
  }
LABEL_40:
  if (v12 != v7) {
LABEL_41:
  }
    std::string::operator=(a2, (const std::string *)(v12 + 56));
LABEL_42:
  __n128 result = *(__n128 *)&a2->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&a2->__r_.__value_.__l + 2);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void XPCIPCAPI_v1_rcp::property_changed(uint64_t a1, const std::string::value_type *a2, const boost::any *a3)
{
  memset(&v40, 0, sizeof(v40));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v39 = 0;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v6, "method", "property_changed");
  uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v7)
  {
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)a2;
    }
    do
    {
      int v10 = *v9;
      if (v10 < 0) {
        __uint32_t v13 = __maskrune(*v9, 0x500uLL);
      }
      else {
        __uint32_t v13 = _DefaultRuneLocale.__runetype[v10] & 0x500;
      }
      if (v10 != 95 && v13 == 0)
      {
        if (v10 == 58)
        {
          LOBYTE(v10) = 47;
        }
        else
        {
          if (v10 != 46) {
            goto LABEL_9;
          }
          LOBYTE(v10) = 95;
        }
      }
      std::string::push_back(&v40, v10);
LABEL_9:
      ++v9;
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = *(const std::string::value_type **)a2;
      }
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *((void *)a2 + 1);
      }
    }
    while (v9 != &v12[v11]);
  }
  std::operator+<char>();
  if (SHIBYTE(v39) < 0)
  {
    operator delete(__p[0]);
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v39 = *(void *)&buf[16];
    uint64_t v15 = *(void *)a3;
    if (*(void *)a3) {
      goto LABEL_28;
    }
LABEL_30:
    goto LABEL_31;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)buf;
  uint64_t v39 = *(void *)&buf[16];
  uint64_t v15 = *(void *)a3;
  if (!*(void *)a3) {
    goto LABEL_30;
  }
LABEL_28:
  size_t v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
LABEL_31:
  uint64_t v17 = v16[1];
  if (v17 != 0x80000001003F31A6
    && (((v17 & 0x80000001003F31A6 & 0x8000000000000000) != 0) == __OFSUB__(v17, 0x80000001003F31A6)
     || strcmp((const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F31A6 & 0x7FFFFFFFFFFFFFFFLL))))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        int v20 = a2[23];
        int v21 = *(uint64_t **)a2;
        int v22 = SHIBYTE(v39);
        CFDictionaryRef v23 = (void **)__p[0];
        any_to_string(a3, (uint64_t)v36);
        size_t v24 = __p;
        if (v22 < 0) {
          size_t v24 = v23;
        }
        if (v20 >= 0) {
          int v25 = a2;
        }
        else {
          int v25 = (const std::string::value_type *)v21;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        if (v37 >= 0) {
          BOOL v26 = v36;
        }
        else {
          BOOL v26 = (void **)v36[0];
        }
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&_DWORD buf[14] = v24;
        *(_WORD *)&buf[22] = 2080;
        id v42 = v26;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp:PropChanged: Key %s, Path: %s - value: %s", buf, 0x20u);
        if (v37 < 0) {
          operator delete(v36[0]);
        }
      }
      goto LABEL_56;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
LABEL_55:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_56;
  }
  BOOL v18 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v18)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "valMap Received", buf, 2u);
  }
LABEL_56:
  if (v39 >= 0) {
    std::string::value_type v27 = __p;
  }
  else {
    std::string::value_type v27 = (void **)__p[0];
  }
  xpc_dictionary_set_string(v6, "path", (const char *)v27);
  if (a2[23] >= 0) {
    int v28 = a2;
  }
  else {
    int v28 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "key", v28);
  append_to_xpc_object_by_value_type(v6, (any *)a3);
  int v29 = _Block_copy(&__block_literal_global_4);
  std::string::value_type v30 = *(NSObject **)(a1 + 24);
  if (v30) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  }
  *(void *)uint64_t buf = v29;
  *(void *)&uint8_t buf[8] = v30;
  CFDataRef v31 = *(uint64_t **)(a1 + 32);
  if (a2[23] < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v35 = *(std::string *)a2;
  }
  if (v6)
  {
    xpc_object_t v34 = v6;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v34 = v6;
    if (!v6)
    {
      xpc_object_t v6 = 0;
      xpc_object_t v34 = xpc_null_create();
      if (v29) {
        goto LABEL_75;
      }
      goto LABEL_72;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v34 = xpc_null_create();
    if (!v29) {
      goto LABEL_72;
    }
LABEL_75:
    aBlocuint64_t k = _Block_copy(v29);
    dispatch_object_t object = v30;
    if (!v30) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  xpc_retain(v6);
  if (v29) {
    goto LABEL_75;
  }
LABEL_72:
  aBlocuint64_t k = 0;
  dispatch_object_t object = v30;
  if (v30) {
LABEL_76:
  }
    dispatch_retain(v30);
LABEL_77:
  CtrXPC::Server::broadcastEvent(v31, (uint64_t)&v35, &v34, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v6);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_91:
    operator delete(v40.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_91;
  }
}

void sub_1000AF524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16XPCIPCAPI_v1_rcp16property_changedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN5boost3anyE_block_invoke(id a1)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "All Clients Rcvd the Property-Changed Event", v3, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void XPCIPCAPI_v1_rcp::received_beacon(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v4, "method", "Beacon");
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (const char *)a2;
  }
  else {
    uint64_t v5 = *(const char **)a2;
  }
  if (*v5) {
    xpc_dictionary_set_string(v4, "kWPANTUNDProperty_NetworkName", v5);
  }
  memcpyrev(&value, a2 + 24, 8uLL);
  if (value.i64[0])
  {
    memcpyrev(&value, a2 + 24, 8uLL);
    xpc_dictionary_set_uint64(v4, "kWPANTUNDProperty_NetworkXPANID", value.u64[0]);
  }
  xpc_dictionary_set_uint64(v4, "kWPANTUNDProperty_NetworkPANID", *(unsigned __int16 *)(a2 + 32));
  if (*(unsigned char *)(a2 + 38)) {
    xpc_dictionary_set_int64(v4, "kWPANTUNDProperty_NetworkNodeType", *(unsigned __int8 *)(a2 + 38));
  }
  if (*(unsigned char *)(a2 + 34))
  {
    xpc_dictionary_set_uint64(v4, "kWPANTUNDProperty_NCPChannel", *(unsigned __int8 *)(a2 + 34));
    int64_t v6 = *(char *)(a2 + 36);
    if (v6 != -128) {
      xpc_dictionary_set_int64(v4, "RSSI", v6);
    }
    xpc_dictionary_set_BOOL(v4, "kWPANTUNDProperty_NestLabs_NetworkAllowingJoin", *(unsigned char *)(a2 + 35));
  }
  uint64_t v7 = (const void *)(a2 + 39);
  memcpyrev(&value, (unint64_t)v7, 8uLL);
  if (value.i64[0]) {
    xpc_dictionary_set_data(v4, "kWPANTUNDProperty_NCPHardwareAddress", v7, 8uLL);
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v9 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      value.i16[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp: Sending Beacon", (uint8_t *)&value, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  int v10 = *(uint64_t **)(a1 + 32);
  char v16 = 6;
  strcpy((char *)__p, "Beacon");
  if (v4)
  {
    xpc_object_t v14 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v14 = v4;
    if (!v4)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_29;
    }
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v4);
    goto LABEL_30;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_29:
  xpc_object_t v14 = v11;
LABEL_30:
  aBlocuint64_t k = 0;
  dispatch_object_t object = 0;
  CtrXPC::Server::broadcastEvent(v10, (uint64_t)__p, &v14, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(v4);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000AF9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  xpc_release(object);
  dispatch_object_t object = 0;
  xpc_release(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::received_energy_scan_result(uint64_t a1, unsigned __int8 *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v4, "method", "EnergyScanResult");
  int64_t v5 = *a2;
  int64_t v6 = (char)a2[1];
  xpc_dictionary_set_int64(v4, "NCP:Channel", v5);
  xpc_dictionary_set_int64(v4, "RSSI", v6);
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  char v13 = 16;
  strcpy(__p, "EnergyScanResult");
  if (v4)
  {
    xpc_object_t v11 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v11 = v4;
    if (!v4)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  xpc_object_t v11 = v8;
LABEL_9:
  aBlocuint64_t k = 0;
  dispatch_object_t object = 0;
  CtrXPC::Server::broadcastEvent(v7, (uint64_t)__p, &v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v4);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000AFB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a10);
  xpc_release(object);
  dispatch_object_t object = 0;
  xpc_release(v18);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::add_interface(XPCIPCAPI_v1_rcp *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp - Interface added ", buf, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v4 = RcpHostContext::sRcpHostContext;
  *(void *)&long long v5 = XPCIPCAPI_v1_rcp::property_changed;
  *((void *)&v5 + 1) = 0;
  int64_t v6 = this;
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf2<void,XPCIPCAPI_v1_rcp,std::string const&,boost::any const&>,boost::_bi::list3<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>>>>((uint64_t)buf, &v5);
  boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::connect(*(void *)(v4 + 184));
}

void sub_1000AFF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000AFF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000AFF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void **boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    int64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      int64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

void XPCIPCAPI_v1_rcp::message_handler(uint64_t a1, std::string::size_type a2, xpc_object_t xdict, uint64_t a4)
{
  string = xpc_dictionary_get_string(xdict, "method");
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v10 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v11 = a2;
      if (*(char *)(a2 + 23) < 0) {
        std::string::size_type v11 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)string;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp->MH: Inbound XPC message for method \"%s\" from \"%s\"", (uint8_t *)&buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  size_t v12 = strlen(string);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  uint64_t v53 = (uint64_t)xdict;
  if (v12 >= 0x17)
  {
    uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v20 = v12 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_std::string buf = (std::string *)operator new(v20 + 1);
    buf.__r_.__value_.__l.__size_ = v13;
    buf.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
  }
  else
  {
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = v12;
    p_std::string buf = &buf;
    if (!v12)
    {
      uint64_t v15 = a4;
      buf.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v16 = a1 + 8;
      uint64_t v17 = v18;
      std::string::size_type v19 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if (!v18) {
        goto LABEL_60;
      }
      goto LABEL_18;
    }
  }
  uint64_t v15 = a4;
  memmove(p_buf, string, v13);
  p_buf->__r_.__value_.__s.__data_[v13] = 0;
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v16 = a1 + 8;
  uint64_t v17 = v22;
  std::string::size_type v19 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (!v22) {
    goto LABEL_60;
  }
LABEL_18:
  if ((v19 & 0x80u) == 0) {
    std::string::size_type size = v19;
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  if ((v19 & 0x80u) == 0) {
    size_t v24 = &buf;
  }
  else {
    size_t v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  uint64_t v25 = v16;
  do
  {
    int v26 = *(char *)(v17 + 55);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v17 + 55);
    }
    else {
      size_t v27 = *(void *)(v17 + 40);
    }
    if (v26 >= 0) {
      int v28 = (const void *)(v17 + 32);
    }
    else {
      int v28 = *(const void **)(v17 + 32);
    }
    if (size >= v27) {
      size_t v29 = v27;
    }
    else {
      size_t v29 = size;
    }
    int v30 = memcmp(v28, v24, v29);
    BOOL v31 = v27 < size;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    BOOL v32 = !v31;
    if (v31) {
      std::string::value_type v33 = (uint64_t *)(v17 + 8);
    }
    else {
      std::string::value_type v33 = (uint64_t *)v17;
    }
    if (v32) {
      uint64_t v25 = v17;
    }
    uint64_t v17 = *v33;
  }
  while (*v33);
  if (v25 != v16)
  {
    int v34 = *(char *)(v25 + 55);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v25 + 55);
    }
    else {
      size_t v35 = *(void *)(v25 + 40);
    }
    if (v34 >= 0) {
      uint64_t v36 = (const void *)(v25 + 32);
    }
    else {
      uint64_t v36 = *(const void **)(v25 + 32);
    }
    if (v35 >= size) {
      size_t v37 = size;
    }
    else {
      size_t v37 = v35;
    }
    int v38 = memcmp(v24, v36, v37);
    BOOL v39 = size < v35;
    if (v38) {
      BOOL v39 = v38 < 0;
    }
    if (!v39)
    {
      if ((v19 & 0x80) != 0) {
        goto LABEL_61;
      }
LABEL_57:
      uint64_t v40 = v15;
      if (v25 == v16) {
        goto LABEL_62;
      }
      goto LABEL_58;
    }
  }
LABEL_60:
  uint64_t v25 = v16;
  if ((v19 & 0x80) == 0) {
    goto LABEL_57;
  }
LABEL_61:
  operator delete(buf.__r_.__value_.__l.__data_);
  uint64_t v40 = v15;
  if (v25 == v16)
  {
LABEL_62:
    size_t v41 = strlen(string);
    if (v41 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v42 = v41;
    if (v41 >= 0x17)
    {
      uint64_t v47 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v47 = v41 | 7;
      }
      uint64_t v48 = v47 + 1;
      char v43 = (std::string *)operator new(v47 + 1);
      buf.__r_.__value_.__l.__size_ = v42;
      buf.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v41;
      char v43 = &buf;
      if (!v41)
      {
        buf.__r_.__value_.__s.__data_[0] = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_66:
          std::string v60 = *(std::string *)a2;
          goto LABEL_83;
        }
LABEL_82:
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_83:
        int v49 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v59, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v59 = buf;
        }
        std::string::value_type v50 = *(void **)v40;
        if (*(void *)v40)
        {
          std::string::value_type v50 = _Block_copy(v50);
          __int16 v51 = v50;
          int v52 = *(NSObject **)(v40 + 8);
          __int16 v57 = v50;
          int v58 = v52;
          if (!v52) {
            goto LABEL_89;
          }
        }
        else
        {
          __int16 v51 = 0;
          int v52 = *(NSObject **)(v40 + 8);
          __int16 v57 = 0;
          int v58 = v52;
          if (!v52)
          {
LABEL_89:
            XPCIPCAPI_v1_rcp::CallbackOtctl_Helper((uint64_t)v50, "Cmd Not Supported in RCP", (uint64_t **)&v60, (const char *)&v59, (uint64_t)&v57);
            if (v52) {
              dispatch_release(v52);
            }
            if (v51) {
              _Block_release(v51);
            }
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v59.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_95:
                if ((v49 & 0x80000000) == 0) {
                  return;
                }
LABEL_101:
                uint64_t v46 = (void *)buf.__r_.__value_.__r.__words[0];
                goto LABEL_102;
              }
            }
            else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_95;
            }
            operator delete(v60.__r_.__value_.__l.__data_);
            if ((v49 & 0x80000000) == 0) {
              return;
            }
            goto LABEL_101;
          }
        }
        dispatch_retain(v52);
        goto LABEL_89;
      }
    }
    memmove(v43, string, v42);
    v43->__r_.__value_.__s.__data_[v42] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_82;
  }
LABEL_58:
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v56 = *(std::string *)a2;
  }
  std::string::value_type v44 = *(void **)v40;
  if (*(void *)v40) {
    std::string::value_type v44 = _Block_copy(v44);
  }
  __int16 v45 = *(NSObject **)(v40 + 8);
  aBlocuint64_t k = v44;
  dispatch_object_t object = v45;
  if (v45) {
    dispatch_retain(v45);
  }
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()((void *)(v25 + 56), v53, (long long *)&v56, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v46 = (void *)v56.__r_.__value_.__r.__words[0];
LABEL_102:
    operator delete(v46);
  }
}

void sub_1000B04DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((v34 & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  else if ((v34 & 0x80) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v35 - 128));
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::CallbackOtctl_Helper(uint64_t a1, const char *a2, uint64_t **a3, const char *a4, uint64_t a5)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v10 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v11 = a4;
      if (a4[23] < 0) {
        std::string::size_type v11 = *(const char **)a4;
      }
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      *(_DWORD *)uint64_t v18 = 136315394;
      *(void *)&v18[4] = v11;
      *(_WORD *)&v18[12] = 2080;
      *(void *)&v18[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp Sending XPC response for method \"%s\" to \"%s\"", v18, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v13 = v12;
  if (a4[23] < 0) {
    a4 = *(const char **)a4;
  }
  xpc_dictionary_set_string(v12, "method", a4);
  xpc_dictionary_set_string(v13, "response", a2);
  if (v13)
  {
    xpc_object_t v14 = *(const void **)a5;
    if (*(void *)a5)
    {
LABEL_15:
      uint64_t v15 = _Block_copy(v14);
      goto LABEL_18;
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v14 = *(const void **)a5;
    if (*(void *)a5) {
      goto LABEL_15;
    }
  }
  uint64_t v15 = 0;
LABEL_18:
  uint64_t v16 = *(NSObject **)(a5 + 8);
  *(void *)uint64_t v18 = _NSConcreteStackBlock;
  *(void *)&v18[8] = 1174405120;
  *(void *)&v18[16] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
  std::string::size_type v19 = &__block_descriptor_tmp_185;
  if (v15)
  {
    uint64_t v17 = _Block_copy(v15);
    int v22 = 0;
    aBlocuint64_t k = v17;
    xpc_object_t object = v13;
    if (v13)
    {
LABEL_20:
      xpc_retain(v13);
      goto LABEL_23;
    }
  }
  else
  {
    int v22 = 0;
    aBlocuint64_t k = 0;
    xpc_object_t object = v13;
    if (v13) {
      goto LABEL_20;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_23:
  dispatch_async(v16, v18);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v13);
}

void sub_1000B07E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>::callback(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return a1;
}

void boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(void *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (!*a1)
  {
    int64_t v6 = std::runtime_error::runtime_error(&v10, "call to empty boost::function");
    v10.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(v6);
  }
  uint64_t v4 = *(void (**)(void *, uint64_t, void **, dispatch_object_t *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  long long v5 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)xpc_object_t object = *(_OWORD *)a4;
  *(_OWORD *)std::string __p = v5;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  v4(a1 + 1, a2, __p, object);
  if (object[1]) {
    dispatch_release(object[1]);
  }
  if (object[0]) {
    _Block_release(object[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B0950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000B0974(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 32));
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::CallbackWithStatus_Helper(uint64_t a1, int a2, uint64_t **a3, const char *a4, uint64_t a5)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    std::runtime_error v10 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v11 = a4;
      if (a4[23] < 0) {
        std::string::size_type v11 = *(const char **)a4;
      }
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      *(_DWORD *)uint64_t v18 = 136315650;
      *(void *)&v18[4] = v11;
      *(_WORD *)&v18[12] = 2080;
      *(void *)&v18[14] = a3;
      *(_WORD *)&v18[22] = 1024;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp Sending XPC response for method \"%s\" to \"%s\", ret : %d", v18, 0x1Cu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*(void *)a5 && *(void *)(a5 + 8))
  {
    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v13 = v12;
    if (a4[23] < 0) {
      a4 = *(const char **)a4;
    }
    xpc_dictionary_set_string(v12, "method", a4);
    xpc_dictionary_set_int64(v13, "ret", a2);
    if (v13)
    {
      xpc_object_t v14 = *(const void **)a5;
      if (*(void *)a5)
      {
LABEL_17:
        uint64_t v15 = _Block_copy(v14);
        goto LABEL_20;
      }
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t v14 = *(const void **)a5;
      if (*(void *)a5) {
        goto LABEL_17;
      }
    }
    uint64_t v15 = 0;
LABEL_20:
    uint64_t v16 = *(NSObject **)(a5 + 8);
    *(void *)uint64_t v18 = _NSConcreteStackBlock;
    *(void *)&v18[8] = 1174405120;
    *(void *)&v18[16] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
    std::string::size_type v19 = &__block_descriptor_tmp_185;
    if (v15)
    {
      uint64_t v17 = _Block_copy(v15);
      int v22 = 0;
      aBlocuint64_t k = v17;
      xpc_object_t object = v13;
      if (v13)
      {
LABEL_22:
        xpc_retain(v13);
LABEL_25:
        dispatch_async(v16, v18);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v15) {
          _Block_release(v15);
        }
        xpc_release(v13);
        return;
      }
    }
    else
    {
      int v22 = 0;
      aBlocuint64_t k = 0;
      xpc_object_t object = v13;
      if (v13) {
        goto LABEL_22;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_25;
  }
}

void sub_1000B0BF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::CallbackWithStatus2_Helper(uint64_t a1, int a2, uint64_t **a3, const char *a4, const char *a5, uint64_t a6)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v12 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v13 = a4;
      if (a4[23] < 0) {
        xpc_object_t v13 = *(const char **)a4;
      }
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)&v20[4] = v13;
      *(_WORD *)&v20[12] = 2080;
      *(void *)&v20[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp Sending XPC response for method \"%s\" to \"%s\"", v20, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*(void *)a6 && *(void *)(a6 + 8))
  {
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v15 = v14;
    if (a4[23] < 0) {
      a4 = *(const char **)a4;
    }
    xpc_dictionary_set_string(v14, "method", a4);
    if (a5[23] < 0) {
      a5 = *(const char **)a5;
    }
    xpc_dictionary_set_string(v15, "property_name", a5);
    xpc_dictionary_set_int64(v15, "ret", a2);
    if (v15)
    {
      uint64_t v16 = *(const void **)a6;
      if (*(void *)a6)
      {
LABEL_19:
        uint64_t v17 = _Block_copy(v16);
        goto LABEL_22;
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      uint64_t v16 = *(const void **)a6;
      if (*(void *)a6) {
        goto LABEL_19;
      }
    }
    uint64_t v17 = 0;
LABEL_22:
    uint64_t v18 = *(NSObject **)(a6 + 8);
    *(void *)uint64_t v20 = _NSConcreteStackBlock;
    *(void *)&v20[8] = 1174405120;
    *(void *)&v20[16] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
    uint64_t v21 = &__block_descriptor_tmp_185;
    if (v17)
    {
      std::string::size_type v19 = _Block_copy(v17);
      int v24 = 0;
      aBlocuint64_t k = v19;
      xpc_object_t object = v15;
      if (v15)
      {
LABEL_24:
        xpc_retain(v15);
LABEL_27:
        dispatch_async(v18, v20);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v17) {
          _Block_release(v17);
        }
        xpc_release(v15);
        return;
      }
    }
    else
    {
      int v24 = 0;
      aBlocuint64_t k = 0;
      xpc_object_t object = v15;
      if (v15) {
        goto LABEL_24;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_27;
  }
}

void sub_1000B0EBC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::CallbackWithStatusArg1_Helper(uint64_t a1, int a2, any *a3, char *a4, const char *a5, const char *a6, const void **a7)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v14 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v15 = a5;
      if (a5[23] < 0)
      {
        xpc_object_t v15 = *(const char **)a5;
        uint64_t v16 = a6;
        if ((a6[23] & 0x80000000) == 0)
        {
LABEL_6:
          if ((a4[23] & 0x80000000) == 0)
          {
LABEL_7:
            *(_DWORD *)int v24 = 136315650;
            *(void *)&v24[4] = v15;
            *(_WORD *)&v24[12] = 2080;
            *(void *)&v24[14] = v16;
            *(_WORD *)&v24[22] = 2080;
            uint64_t v25 = a4;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "WPANTUND_v1 Sending XPC response for method \"%s\" for property \"%s\" to \"%s\"", v24, 0x20u);
            goto LABEL_10;
          }
LABEL_42:
          a4 = *(char **)a4;
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v16 = a6;
        if ((a6[23] & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      uint64_t v16 = *(const char **)a6;
      if ((a4[23] & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_42;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
LABEL_10:
  if (!*a7 || !a7[1]) {
    return;
  }
  xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v18 = v17;
  if (a5[23] < 0) {
    a5 = *(const char **)a5;
  }
  xpc_dictionary_set_string(v17, "method", a5);
  if (a6[23] < 0) {
    a6 = *(const char **)a6;
  }
  xpc_dictionary_set_string(v18, "property_name", a6);
  if (a3->var0) {
    int v19 = 0;
  }
  else {
    int v19 = 17;
  }
  if (a2) {
    int v19 = a2;
  }
  xpc_dictionary_set_int64(v18, "ret", v19);
  if (!a3->var0) {
    operator new();
  }
  append_to_xpc_object_by_value_type(v18, a3);
  if (v18)
  {
    uint64_t v20 = *a7;
    if (*a7)
    {
LABEL_26:
      uint64_t v21 = _Block_copy(v20);
      goto LABEL_29;
    }
  }
  else
  {
    xpc_object_t v18 = xpc_null_create();
    uint64_t v20 = *a7;
    if (*a7) {
      goto LABEL_26;
    }
  }
  uint64_t v21 = 0;
LABEL_29:
  int v22 = a7[1];
  *(void *)int v24 = _NSConcreteStackBlock;
  *(void *)&v24[8] = 1174405120;
  *(void *)&v24[16] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
  uint64_t v25 = (char *)&__block_descriptor_tmp_185;
  if (!v21)
  {
    int v28 = 0;
    aBlocuint64_t k = 0;
    xpc_object_t object = v18;
    if (v18) {
      goto LABEL_31;
    }
LABEL_33:
    xpc_object_t object = xpc_null_create();
    goto LABEL_34;
  }
  CFDictionaryRef v23 = _Block_copy(v21);
  int v28 = 0;
  aBlocuint64_t k = v23;
  xpc_object_t object = v18;
  if (!v18) {
    goto LABEL_33;
  }
LABEL_31:
  xpc_retain(v18);
LABEL_34:
  dispatch_async(v22, v24);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v21) {
    _Block_release(v21);
  }
  xpc_release(v18);
}

void sub_1000B1278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::CallbackWithStatusArg2_Helper(uint64_t a1, int a2, any *a3, uint64_t **a4, const char *a5, uint64_t a6)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v12 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v13 = a5;
      if (a5[23] < 0) {
        xpc_object_t v13 = *(const char **)a5;
      }
      if (*((char *)a4 + 23) < 0) {
        a4 = (uint64_t **)*a4;
      }
      *(_DWORD *)uint64_t v21 = 136315394;
      *(void *)&v21[4] = v13;
      *(_WORD *)&v21[12] = 2080;
      *(void *)&v21[14] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp Sending XPC response for method \"%s\" to \"%s\"", v21, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*(void *)a6 && *(void *)(a6 + 8))
  {
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v15 = v14;
    if (a5[23] < 0) {
      a5 = *(const char **)a5;
    }
    xpc_dictionary_set_string(v14, "method", a5);
    if (a3->var0) {
      int v16 = 0;
    }
    else {
      int v16 = 17;
    }
    if (a2) {
      int v16 = a2;
    }
    xpc_dictionary_set_int64(v15, "ret", v16);
    if (!a3->var0) {
      operator new();
    }
    append_to_xpc_object_by_value_type(v15, a3);
    if (v15)
    {
      xpc_object_t v17 = *(const void **)a6;
      if (*(void *)a6)
      {
LABEL_25:
        xpc_object_t v18 = _Block_copy(v17);
        goto LABEL_28;
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v17 = *(const void **)a6;
      if (*(void *)a6) {
        goto LABEL_25;
      }
    }
    xpc_object_t v18 = 0;
LABEL_28:
    int v19 = *(NSObject **)(a6 + 8);
    *(void *)uint64_t v21 = _NSConcreteStackBlock;
    *(void *)&v21[8] = 1174405120;
    *(void *)&v21[16] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
    int v22 = &__block_descriptor_tmp_185;
    if (v18)
    {
      uint64_t v20 = _Block_copy(v18);
      int v25 = 0;
      aBlocuint64_t k = v20;
      xpc_object_t object = v15;
      if (v15)
      {
LABEL_30:
        xpc_retain(v15);
LABEL_33:
        dispatch_async(v19, v21);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v18) {
          _Block_release(v18);
        }
        xpc_release(v15);
        return;
      }
    }
    else
    {
      int v25 = 0;
      aBlocuint64_t k = 0;
      xpc_object_t object = v15;
      if (v15) {
        goto LABEL_30;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_33;
  }
}

void sub_1000B15E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::status_response_helper(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)a4 || !*(void *)(a4 + 8)) {
    return;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v7, "ret", a2);
  if (*(char *)(a3 + 23) < 0)
  {
    xpc_dictionary_set_string(v7, "method", *(const char **)a3);
    if (v7)
    {
LABEL_5:
      *(void *)xpc_object_t v18 = 0;
      xpc_object_t v8 = (XPCHelpers *)xpc_array_create(0, 0);
      time_t v17 = 0;
      time(&v17);
      uint64_t v9 = ctime(&v17);
      v9[strcspn(v9, "\n")] = 0;
      XPCHelpers::xpc_append_dictionary(v8, "Status at Time", (const char *)0xA, v9, v10);
      RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)&block);
      if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      {
        if (block.__r_.__value_.__l.__size_) {
          p_blocuint64_t k = (std::string *)block.__r_.__value_.__r.__words[0];
        }
        else {
          p_blocuint64_t k = (std::string *)"uninitialized";
        }
      }
      else if (*((unsigned char *)&block.__r_.__value_.__s + 23))
      {
        p_blocuint64_t k = &block;
      }
      else
      {
        p_blocuint64_t k = (std::string *)"uninitialized";
      }
      XPCHelpers::xpc_append_dictionary(v8, "RCP:State", (const char *)0xA, (const char *)p_block, v11);
      XPCHelpers::xpc_append_dictionary(v8, "Daemon:Enabled", (const char *)0xA, "true", v14);
      getSystemUptimeInSec();
      operator new();
    }
  }
  else
  {
    xpc_dictionary_set_string(v7, "method", (const char *)a3);
    if (v7) {
      goto LABEL_5;
    }
  }
  xpc_object_t v13 = xpc_null_create();
  if (*(void *)a4) {
    xpc_object_t v15 = _Block_copy(*(const void **)a4);
  }
  else {
    xpc_object_t v15 = 0;
  }
  int v16 = *(NSObject **)(a4 + 8);
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
  uint64_t v20 = &__block_descriptor_tmp_185;
  if (!v15)
  {
    int v23 = 0;
    aBlocuint64_t k = 0;
    xpc_object_t object = v13;
    if (v13) {
      goto LABEL_20;
    }
LABEL_22:
    xpc_object_t object = xpc_null_create();
    goto LABEL_23;
  }
  int v23 = 0;
  aBlocuint64_t k = _Block_copy(v15);
  xpc_object_t object = v13;
  if (!v13) {
    goto LABEL_22;
  }
LABEL_20:
  xpc_retain(v13);
LABEL_23:
  dispatch_async(v16, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v13);
}

void sub_1000B2614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void boost::any::operator=<nl::Data &>()
{
}

void sub_1000B2980()
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 16) = v2;
    operator delete(v2);
  }
  operator delete();
}

void XPCIPCAPI_v1_rcp::status_offline_response_helper(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)a4 || !*(void *)(a4 + 8)) {
    return;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v7, "ret", a2);
  if (*(char *)(a3 + 23) < 0)
  {
    xpc_dictionary_set_string(v7, "method", *(const char **)a3);
    if (v7)
    {
LABEL_5:
      *(void *)xpc_object_t v18 = 0;
      xpc_object_t v8 = (XPCHelpers *)xpc_array_create(0, 0);
      time_t v17 = 0;
      time(&v17);
      uint64_t v9 = ctime(&v17);
      v9[strcspn(v9, "\n")] = 0;
      XPCHelpers::xpc_append_dictionary(v8, "Status at Time", (const char *)0xA, v9, v10);
      RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)&block);
      if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      {
        if (block.__r_.__value_.__l.__size_) {
          p_blocuint64_t k = (std::string *)block.__r_.__value_.__r.__words[0];
        }
        else {
          p_blocuint64_t k = (std::string *)"uninitialized";
        }
      }
      else if (*((unsigned char *)&block.__r_.__value_.__s + 23))
      {
        p_blocuint64_t k = &block;
      }
      else
      {
        p_blocuint64_t k = (std::string *)"uninitialized";
      }
      XPCHelpers::xpc_append_dictionary(v8, "RCP:State", (const char *)0xA, (const char *)p_block, v11);
      XPCHelpers::xpc_append_dictionary(v8, "Daemon:Enabled", (const char *)0xA, "true", v14);
      getSystemUptimeInSec();
      operator new();
    }
  }
  else
  {
    xpc_dictionary_set_string(v7, "method", (const char *)a3);
    if (v7) {
      goto LABEL_5;
    }
  }
  xpc_object_t v13 = xpc_null_create();
  if (*(void *)a4) {
    xpc_object_t v15 = _Block_copy(*(const void **)a4);
  }
  else {
    xpc_object_t v15 = 0;
  }
  int v16 = *(NSObject **)(a4 + 8);
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke;
  uint64_t v20 = &__block_descriptor_tmp_185;
  if (!v15)
  {
    int v23 = 0;
    aBlocuint64_t k = 0;
    xpc_object_t object = v13;
    if (v13) {
      goto LABEL_20;
    }
LABEL_22:
    xpc_object_t object = xpc_null_create();
    goto LABEL_23;
  }
  int v23 = 0;
  aBlocuint64_t k = _Block_copy(v15);
  xpc_object_t object = v13;
  if (!v13) {
    goto LABEL_22;
  }
LABEL_20:
  xpc_retain(v13);
LABEL_23:
  dispatch_async(v16, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v13);
}

void sub_1000B3320(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void XPCIPCAPI_v1_rcp::interface_otctl_cmd_handler(int a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "method");
  size_t v4 = strlen(string);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int64_t v6 = operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v18 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v18) = v4;
    int64_t v6 = __dst;
    if (!v4)
    {
LABEL_9:
      *((unsigned char *)v6 + v5) = 0;
      uint64_t v9 = xpc_dictionary_get_string(xdict, "otctl_cmd");
      size_t v10 = strlen(v9);
      if (v10 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v11 = v10;
      if (v10 >= 0x17)
      {
        uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v13 = v10 | 7;
        }
        uint64_t v14 = v13 + 1;
        xpc_object_t v12 = operator new(v13 + 1);
        v15[1] = v11;
        unint64_t v16 = v14 | 0x8000000000000000;
        v15[0] = v12;
      }
      else
      {
        HIBYTE(v16) = v10;
        xpc_object_t v12 = v15;
        if (!v10)
        {
LABEL_17:
          *((unsigned char *)v12 + v11) = 0;
          operator new();
        }
      }
      memmove(v12, v9, v11);
      goto LABEL_17;
    }
  }
  memmove(v6, string, v5);
  goto LABEL_9;
}

void sub_1000B3A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 0x80) == 0)
    {
LABEL_3:
      if ((*(char *)(v25 - 97) & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)(v25 - 120));
      _Unwind_Resume(exception_object);
    }
  }
  else if ((v24 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v25 - 144));
  if ((*(char *)(v25 - 97) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void boost::bind<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>,XPCIPCAPI_v1_rcp*,boost::arg<1>,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v22 = *(std::string *)a4;
    if ((*(char *)(a5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v21 = *(std::string *)a5;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
LABEL_6:
  uint64_t v13 = *(void **)a6;
  if (*(void *)a6) {
    uint64_t v13 = _Block_copy(v13);
  }
  uint64_t v14 = *(NSObject **)(a6 + 8);
  int v19 = v13;
  dispatch_object_t v20 = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::list5(&v23, a3, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&v19);
  a7->__r_.__value_.__r.__words[0] = a1;
  a7->__r_.__value_.__l.__size_ = a2;
  a7->__r_.__value_.__r.__words[2] = v23;
  if (SHIBYTE(v25) < 0)
  {
    std::string::__init_copy_ctor_external(a7 + 1, (const std::string::value_type *)v24, *((std::string::size_type *)&v24 + 1));
  }
  else
  {
    *(_OWORD *)&a7[1].__r_.__value_.__l.__data_ = v24;
    a7[1].__r_.__value_.__r.__words[2] = v25;
  }
  xpc_object_t v15 = a7 + 2;
  if (SHIBYTE(v27) < 0)
  {
    std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = __p;
    a7[2].__r_.__value_.__r.__words[2] = v27;
  }
  unint64_t v16 = aBlock;
  if (aBlock) {
    unint64_t v16 = _Block_copy(aBlock);
  }
  time_t v17 = object;
  a7[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  a7[3].__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  if (v17)
  {
    dispatch_retain(v17);
    if (object) {
      dispatch_release(object);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v27) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
LABEL_25:
      unint64_t v18 = v20;
      if (!v20) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete((void *)v24);
  unint64_t v18 = v20;
  if (v20) {
LABEL_26:
  }
    dispatch_release(v18);
LABEL_27:
  if (v19) {
    _Block_release(v19);
  }
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_36:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_36;
  }
}

void sub_1000B3D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (*(char *)(v24 + 47) < 0) {
    operator delete(*v25);
  }
  boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::~list5((uint64_t)&a24);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a18);
  _Unwind_Resume(a1);
}

void boost::function<void ()(char const*)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(char const*)>::function<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(v4, &v2);
}

void sub_1000B3ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000B3EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void XPCIPCAPI_v1_rcp::interface_status_handler(int a1, xpc_object_t xdict, uint64_t **a3, uint64_t a4)
{
  string = xpc_dictionary_get_string(xdict, "method");
  size_t v7 = strlen(string);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_8:
  }
    memmove(p_dst, string, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = string;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_DWORD buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "XPCIPCAPI_v1_rcp Handling \"%s\" method handler for \"%s\"", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)buf);
  if (v28 < 0)
  {
    if (*(void *)&buf[8] != 7)
    {
      if (*(void *)&buf[8] == 13
        && **(void **)buf == 0x616974696E696E75
        && *(void *)(*(void *)buf + 5) == 0x64657A696C616974)
      {
        goto LABEL_45;
      }
LABEL_39:
      operator new();
    }
    xpc_object_t v15 = *(int **)buf;
LABEL_35:
    int v16 = *v15;
    int v17 = *(int *)((char *)v15 + 3);
    if (v16 == 1818650223 && v17 == 1701734764) {
      goto LABEL_45;
    }
    goto LABEL_39;
  }
  if (v28 == 7)
  {
    xpc_object_t v15 = (int *)buf;
    goto LABEL_35;
  }
  if (v28 != 13) {
    goto LABEL_39;
  }
  if (*(void *)buf != 0x616974696E696E75 || *(void *)&buf[5] != 0x64657A696C616974) {
    goto LABEL_39;
  }
LABEL_45:
  int v19 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = __dst;
  }
  dispatch_object_t v20 = *(void **)a4;
  if (*(void *)a4)
  {
    dispatch_object_t v20 = _Block_copy(v20);
    std::string v21 = v20;
    std::string v22 = *(NSObject **)(a4 + 8);
    std::string::size_type v23 = v20;
    uint64_t v24 = v22;
    if (!v22) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  std::string v21 = 0;
  std::string v22 = *(NSObject **)(a4 + 8);
  std::string::size_type v23 = 0;
  uint64_t v24 = v22;
  if (v22) {
LABEL_50:
  }
    dispatch_retain(v22);
LABEL_51:
  XPCIPCAPI_v1_rcp::status_offline_response_helper((uint64_t)v20, 0, (uint64_t)&v25, (uint64_t)&v23);
  if (v22) {
    dispatch_release(v22);
  }
  if (v21) {
    _Block_release(v21);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if ((v28 & 0x80000000) == 0)
  {
    if ((v19 & 0x80000000) == 0) {
      return;
    }
LABEL_44:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)buf);
  if (v19 < 0) {
    goto LABEL_44;
  }
}

void sub_1000B43EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (*(char *)(v33 - 97) < 0) {
    operator delete(*(void **)(v33 - 120));
  }
  _Unwind_Resume(exception_object);
}

void boost::bind<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>,XPCIPCAPI_v1_rcp*,boost::arg<1>,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    uint64_t v11 = *(void **)a5;
    if (!*(void *)a5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v18 = *(std::string *)a4;
  uint64_t v11 = *(void **)a5;
  if (*(void *)a5) {
LABEL_5:
  }
    uint64_t v11 = _Block_copy(v11);
LABEL_6:
  xpc_object_t v12 = *(NSObject **)(a5 + 8);
  int v16 = v11;
  dispatch_object_t v17 = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::list4(&v19, a3, (uint64_t)&v18, (uint64_t)&v16);
  a6->__r_.__value_.__r.__words[0] = a1;
  a6->__r_.__value_.__l.__size_ = a2;
  a6->__r_.__value_.__r.__words[2] = v19;
  uint64_t v13 = a6 + 1;
  if (SHIBYTE(v21) < 0)
  {
    std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = __p;
    a6[1].__r_.__value_.__r.__words[2] = v21;
  }
  uint64_t v14 = aBlock;
  if (aBlock) {
    uint64_t v14 = _Block_copy(aBlock);
  }
  xpc_object_t v15 = object;
  a6[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  a6[2].__r_.__value_.__l.__size_ = (std::string::size_type)v15;
  if (v15)
  {
    dispatch_retain(v15);
    if (object) {
      dispatch_release(object);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1000B4610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    uint64_t v3 = (void *)*((void *)a2 + 6);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
    uint64_t v3 = (void *)*((void *)a2 + 6);
    if (!v3)
    {
LABEL_6:
      size_t v4 = *((void *)a2 + 7);
      aBlocuint64_t k = v3;
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(v10, (uint64_t)&v5);
    }
  }
  uint64_t v3 = _Block_copy(v3);
  goto LABEL_6;
}

void sub_1000B477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000B4798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void XPCIPCAPI_v1_rcp::interface_route_add_handler()
{
}

void sub_1000B4DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a35);
  goto LABEL_6;
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(v4, &v2);
}

void sub_1000B4F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000B4F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void XPCIPCAPI_v1_rcp::interface_route_remove_handler()
{
}

void sub_1000B54C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_service_add_handler()
{
}

void sub_1000B5B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a36);
  goto LABEL_6;
}

void XPCIPCAPI_v1_rcp::interface_service_remove_handler()
{
}

void sub_1000B6214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a35);
  goto LABEL_6;
}

void XPCIPCAPI_v1_rcp::interface_config_gateway_handler()
{
}

void sub_1000B6EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v32 - 169) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((*(char *)(v32 - 169) & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v32 - 192));
  goto LABEL_6;
}

void XPCIPCAPI_v1_rcp::interface_update_accessory_addr()
{
}

void sub_1000B76F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a36);
  goto LABEL_6;
}

void XPCIPCAPI_v1_rcp::interface_prop_get_handler()
{
  memset(&v0, 0, sizeof(v0));
  operator new();
}

{
  int v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;

  OUTLINED_FUNCTION_5_1(__stack_chk_guard);
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = v0;
  OUTLINED_FUNCTION_6((void *)&_mh_execute_header, v1, v2, "property_get_value: Unsupported property \"%s\"", v3);
}

void sub_1000B84DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void boost::bind<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>,XPCIPCAPI_v1_rcp*,boost::arg<1>,boost::arg<2>,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v22 = *(std::string *)a4;
    if ((*(char *)(a5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v21 = *(std::string *)a5;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
LABEL_6:
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v20 = *(std::string *)a6;
  }
  xpc_object_t v15 = *(void **)a7;
  if (*(void *)a7) {
    xpc_object_t v15 = _Block_copy(v15);
  }
  int v16 = *(NSObject **)(a7 + 8);
  std::string v18 = v15;
  dispatch_object_t v19 = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::list7(v23, a3, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&v18);
  *a8 = a1;
  a8[1] = a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)(a8 + 2), (uint64_t)v23);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v28 < 0)
  {
    operator delete(__p);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_19:
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((v26 & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v25);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_20:
    dispatch_object_t v17 = v19;
    if (!v19) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_30:
  operator delete(v23[1]);
  dispatch_object_t v17 = v19;
  if (v19) {
LABEL_21:
  }
    dispatch_release(v17);
LABEL_22:
  if (v18) {
    _Block_release(v18);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_34:
      operator delete(v22.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
}

void sub_1000B8978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int,boost::any const&)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(int,boost::any const&)>::function<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(v4, &v2);
}

void sub_1000B8B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000B8B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 104);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 96);
  if (v3) {
    _Block_release(v3);
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_10;
  }
LABEL_7:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void XPCIPCAPI_v1_rcp::interface_prop_set_handler()
{
  memset(&v0, 0, sizeof(v0));
  operator new();
}

void sub_1000B935C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(v4, &v2);
}

void sub_1000B95A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000B95BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void XPCIPCAPI_v1_rcp::interface_thread_start_handler(int a1, xpc_object_t xdict, uint64_t *a3)
{
  string = xpc_dictionary_get_string(xdict, "method");
  size_t v5 = strlen(string);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    size_t v7 = __dst;
    if (!v5)
    {
LABEL_9:
      *((unsigned char *)v7 + v6) = 0;
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = a3;
          if (*((char *)a3 + 23) < 0) {
            uint64_t v11 = (uint64_t *)*a3;
          }
          *(_DWORD *)std::string buf = 136315394;
          xpc_object_t v15 = string;
          __int16 v16 = 2080;
          dispatch_object_t v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "interface_thread_start_handler: method \"%s\" from \"%s\"", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      operator new();
    }
  }
  memmove(v7, string, v6);
  goto LABEL_9;
}

void sub_1000B9900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 97) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v25 - 97) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 120));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_thread_stop_handler(int a1, xpc_object_t xdict, uint64_t *a3)
{
  string = xpc_dictionary_get_string(xdict, "method");
  size_t v5 = strlen(string);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    size_t v7 = __dst;
    if (!v5)
    {
LABEL_9:
      *((unsigned char *)v7 + v6) = 0;
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = a3;
          if (*((char *)a3 + 23) < 0) {
            uint64_t v11 = (uint64_t *)*a3;
          }
          *(_DWORD *)std::string buf = 136315394;
          xpc_object_t v15 = string;
          __int16 v16 = 2080;
          dispatch_object_t v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "interface_thread_start_handler: method \"%s\" from \"%s\"", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      operator new();
    }
  }
  memmove(v7, string, v6);
  goto LABEL_9;
}

void sub_1000B9CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 97) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v25 - 97) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 120));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_form_handler()
{
}

void sub_1000BACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 185) < 0) {
    operator delete(*(void **)(v48 - 208));
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_join_handler()
{
}

void sub_1000BB99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v44 - 169) < 0) {
    operator delete(*(void **)(v44 - 192));
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_leave_handler()
{
}

void sub_1000BBDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 113) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v25 - 113) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_reset_handler()
{
}

void sub_1000BC1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 113) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v25 - 113) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCAPI_v1_rcp::interface_hard_reset_handler(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    size_t v6 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v16[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Trigger RCP2 FLR", (uint8_t *)v16, 2u);
      CoreBTtriggerFLR();
      if (!*a4) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    CoreBTtriggerFLR();
    if (!*a4) {
      return;
    }
    goto LABEL_8;
  }
  CoreBTtriggerFLR();
  if (!*a4) {
    return;
  }
LABEL_8:
  if (!a4[1]) {
    return;
  }
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v10);
  xpc_dictionary_set_string(v9, "method", "HardReset");
  xpc_dictionary_set_uint64(v9, "ret", 0);
  if (v9)
  {
    xpc_retain(v9);
    xpc_object_t v11 = v9;
    xpc_object_t v12 = *a4;
    if (*a4)
    {
LABEL_17:
      unint64_t v13 = _Block_copy(v12);
      goto LABEL_20;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a4;
    if (*a4) {
      goto LABEL_17;
    }
  }
  unint64_t v13 = 0;
LABEL_20:
  uint64_t v14 = a4[1];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1174405120;
  v16[2] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJhS2_EEEvDpT__block_invoke;
  v16[3] = &__block_descriptor_tmp_190;
  if (!v13)
  {
    char v19 = 0;
    aBlocuint64_t k = 0;
    xpc_object_t object = v11;
    if (v11) {
      goto LABEL_22;
    }
LABEL_24:
    xpc_object_t object = xpc_null_create();
    goto LABEL_25;
  }
  xpc_object_t v15 = _Block_copy(v13);
  char v19 = 0;
  aBlocuint64_t k = v15;
  xpc_object_t object = v11;
  if (!v11) {
    goto LABEL_24;
  }
LABEL_22:
  xpc_retain(v11);
LABEL_25:
  dispatch_async(v14, v16);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v11);
  xpc_release(v9);
}

void sub_1000BC554(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::interface_net_scan_start_handler()
{
  v1[0] = 0;
  v1[1] = 0;
  std::string v0 = v1;
  operator new();
}

void sub_1000BCAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40 - 168, *(char **)(v40 - 160));
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::interface_discover_scan_start_handler()
{
}

void sub_1000BD340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v42 - 168, *(char **)(v42 - 160));
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::interface_energy_scan_start_handler(int a1, xpc_object_t xdict)
{
  v11[0] = 0;
  v11[1] = 0;
  xpc_object_t v10 = v11;
  string = xpc_dictionary_get_string(xdict, "method");
  size_t v3 = strlen(string);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v5 = operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v9 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v9) = v3;
    size_t v5 = __dst;
    if (!v3)
    {
LABEL_9:
      *((unsigned char *)v5 + v4) = 0;
      operator new();
    }
  }
  memmove(v5, string, v4);
  goto LABEL_9;
}

void sub_1000BD88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40 - 152, *(char **)(v40 - 144));
  _Unwind_Resume(a1);
}

void XPCIPCAPI_v1_rcp::interface_peek_handler(int a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "method");
  size_t v3 = strlen(string);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v5 = operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v9 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v9) = v3;
    size_t v5 = __dst;
    if (!v3)
    {
LABEL_9:
      *((unsigned char *)v5 + v4) = 0;
      operator new();
    }
  }
  memmove(v5, string, v4);
  goto LABEL_9;
}

void sub_1000BDCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 113) < 0) {
      goto LABEL_6;
    }
  }
  else if (*(char *)(v25 - 113) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int,boost::any const&)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(int,boost::any const&)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(v4, &v2);
}

void sub_1000BDE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000BDE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *boost::function<void ()(std::string const&,boost::any const&)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::signals2::slot_base::~slot_base(boost::signals2::slot_base *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    size_t v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        v3 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v3);
      }
      while (v3 != v2);
      size_t v4 = *(void **)this;
    }
    *((void *)this + 1) = v2;
    operator delete(v4);
  }
}

atomic_uint *boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 == 2)
  {
    __n128 result = *(atomic_uint **)(a1 + 8);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (atomic_uint *)v3();
    }
  }
  else if (v1 == 1)
  {
    __n128 result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  else
  {
    __n128 result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  return result;
}

uint64_t boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::~list5(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::~storage4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::~list4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::~list7(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_10;
  }
LABEL_7:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = *((void *)a2 + 7);
    if (v4)
    {
      if ((v4 & 1) == 0)
      {
        size_t v5 = *(void (**)(char *, char *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(a2 + 64, a2 + 64, 2);
        }
      }
      *((void *)a2 + 7) = 0;
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v6 = a2;
    }
    else
    {
      uint64_t v6 = a2;
    }
    operator delete(v6);
  }
}

char *std::__tree<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::function<void ()(void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      xpc_object_t v10 = a2;
    }
    else {
      xpc_object_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        xpc_object_t v11 = (char *)v6;
        uint64_t v14 = (const void *)v6[4];
        xpc_object_t v12 = v6 + 4;
        unint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          dispatch_object_t v17 = v12;
        }
        else {
          dispatch_object_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *(uint64_t **)v11;
        uint64_t v7 = (uint64_t **)v11;
        if (!*(void *)v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      uint64_t v6 = (uint64_t *)*((void *)v11 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v11 + 8);
        goto LABEL_27;
      }
    }
  }
  else
  {
    xpc_object_t v11 = (char *)(a1 + 1);
LABEL_27:
    std::string::size_type v23 = v11;
    xpc_object_t v11 = (char *)operator new(0x58uLL);
    char v24 = *a4;
    uint64_t v25 = *((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    *((void *)v11 + 6) = v25;
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(void *)xpc_object_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v23;
    *uint64_t v7 = (uint64_t *)v11;
    char v26 = (uint64_t *)**a1;
    std::string::size_type v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      std::string::size_type v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v5 = 0;
    boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::move_assign((uint64_t)&v5, result);
    boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::move_assign(v3, a2);
    __n128 result = (uint64_t *)boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::move_assign((uint64_t)a2, &v5);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v4 = *(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          return (uint64_t *)v4(v6, v6, 2);
        }
      }
    }
  }
  return result;
}

void sub_1000BE4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F32F1 & 0x7FFFFFFFFFFFFFFFLL)
      || (__n128 result = strcmp((const char *)result, (const char *)(0x80000001003F32F1 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker3<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::arg<3>>>,void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  v5[0] = &v4;
  v5[1] = a3;
  v5[2] = a4;
  boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::arg<3>>::operator()<boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist3<void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>((uint64_t *)(a1 + 16), a1, (uint64_t)v5);
}

void boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::arg<3>>::operator()<boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist3<void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = **(void **)a3;
  uint64_t v7 = *(void *)(v5 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  uint64_t v11 = v7;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  uint64_t v8 = *(void *)(a3 + 16);
  *(_OWORD *)xpc_object_t object = *(_OWORD *)v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v4, v6, (uint64_t)__p, (uint64_t)object);
  if (object[1]) {
    dispatch_release(object[1]);
  }
  if (object[0]) {
    _Block_release(object[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000BE68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, std::string *, void **))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  size_t v9 = (void *)(a2 + (v7 >> 1));
  if ((v7 & 1) == 0)
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    xpc_object_t v10 = *(void **)a5;
    if (!*(void *)a5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *(void (**)(void *, uint64_t, std::string *, void **))(*v9 + v8);
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v14 = *(std::string *)a4;
  xpc_object_t v10 = *(void **)a5;
  if (*(void *)a5) {
LABEL_7:
  }
    xpc_object_t v10 = _Block_copy(v10);
LABEL_8:
  uint64_t v11 = *(NSObject **)(a5 + 8);
  aBlocuint64_t k = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  v8(v9, a3, &v14, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1000BE7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)__n128 result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        __n128 result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          __n128 result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1000BE87C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1000BE88C(_Unwind_Exception *a1)
{
}

void boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::connect(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 24);
  v3[20] = (void *)10;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = v2;
  pthread_mutex_lock(v2);
  boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::nolock_connect((uint64_t ***)a1, v3);
}

void sub_1000BEA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::nolock_connect(uint64_t ***a1, void *a2)
{
}

void sub_1000BEC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::create_new_connection(uint64_t ***a1, void *a2)
{
}

void sub_1000BED1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BEDAC()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::nolock_force_unique_connection_list(uint64_t ***a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (!v2 || atomic_load_explicit((atomic_uint *volatile)v2 + 2, memory_order_acquire) != 1) {
    operator new();
  }
  uint64_t v3 = **a1;
  uint64_t v4 = a1[2];
  if (v4 == (uint64_t **)v3) {
    uint64_t v4 = (uint64_t **)v3[1];
  }
  *(void *)&long long v6 = v4;
  return boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(a1, a2, 1, (uint64_t **)&v6, 2);
}

void sub_1000BEF50()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(uint64_t ***a1, void *a2, char a3, uint64_t **a4, int a5)
{
  __n128 result = *a4;
  BOOL v22 = result;
  long long v7 = *a1;
  uint64_t v8 = **a1;
  if (v8 != result)
  {
    unsigned int v9 = a5 - 1;
    if (a3)
    {
      unsigned int v11 = 0;
      do
      {
        uint64_t v13 = result[2];
        std::string v14 = *(uint64_t **)(v13 + 32);
        if (v14)
        {
          for (uint64_t i = *v14; i != v14[1]; i += 24)
          {
            if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
            {
              if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
                goto LABEL_18;
              }
            }
            else
            {
              uint64_t v16 = *(void *)(i + 16);
              if (!v16 || !atomic_load_explicit((atomic_uint *volatile)(v16 + 8), memory_order_acquire))
              {
LABEL_18:
                if (*(unsigned char *)(v13 + 24))
                {
                  *(unsigned char *)(v13 + 24) = 0;
                  boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v13, a2);
                }
                break;
              }
            }
          }
        }
        uint64_t v17 = v22[2];
        if (*(unsigned char *)(v17 + 24)) {
          __n128 result = (uint64_t *)v22[1];
        }
        else {
          __n128 result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::erase(**a1, (int *)(v17 + 64), &v22);
        }
        BOOL v22 = result;
        ++v11;
      }
      while (result != **a1 && v9 >= v11);
    }
    else
    {
      unsigned int v18 = 1;
      do
      {
        while (1)
        {
          uint64_t v20 = result[2];
          if (*(unsigned char *)(v20 + 24)) {
            break;
          }
          __n128 result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::erase(v8, (int *)(v20 + 64), &v22);
          long long v7 = *a1;
          BOOL v22 = result;
          uint64_t v8 = *v7;
          if (result == *v7 || v9 < v18++) {
            goto LABEL_33;
          }
        }
        __n128 result = (uint64_t *)result[1];
        BOOL v22 = result;
        uint64_t v8 = *v7;
      }
      while (result != *v7 && v9 >= v18++);
    }
  }
LABEL_33:
  a1[2] = (uint64_t **)result;
  return result;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::connection_body(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_100495CF8;
  operator new();
}

void sub_1000BF208()
{
  if (*v0) {
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::connection_body((uint64_t)v0, *v0);
  }
  operator delete();
}

void sub_1000BF24C(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>>::shared_ptr<boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>>(&v2);
}

void sub_1000BF328(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  *(void *)this = off_100495D60;
  uint64_t v1 = (atomic_uint *)*((void *)this + 2);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete();
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v9 = 10;
  std::string __p = v8;
  uint64_t v11 = 0;
  xpc_object_t v12 = v2;
  pthread_mutex_lock(v2);
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::mutex,boost::iterators::function_output_iterator<boost::signals2::detail::does_nothing>>(a1, v8);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v12);
  uint64_t v4 = (char *)__p;
  if (__p)
  {
    if (v11 - 1 >= 0)
    {
      uint64_t v5 = (char *)__p + 16 * v11;
      do
      {
        long long v6 = (atomic_uint *)*((void *)v5 - 1);
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        v5 -= 16;
      }
      while (v5 > v4);
    }
    if (v9 >= 0xB) {
      operator delete(__p);
    }
  }
  return v3 != 0;
}

void sub_1000BF5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  uint64_t v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      __n128 result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    long long v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_1000BF848(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector((uint64_t *)(v1 + 8), *(void **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + v7;
      uint64_t v9 = a2 + v7;
      if ((*(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31)) == 2)
      {
        __n128 result = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 32))(*(void *)(v9 + 8));
        *(void *)(v8 + 8) = result;
      }
      else
      {
        *(void *)(v8 + 8) = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(a2 + v7 + 16);
        *(void *)(v4 + v7 + 16) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_1000BF958(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v2 - 24 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000BF9F8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      unint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        unint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000BFA88(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>>::dispose(uint64_t result)
{
  uint64_t v1 = *(void ***)(result + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      unint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        unint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete();
  }
  return result;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = off_100495CF8;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = off_100495D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::mutex,boost::iterators::function_output_iterator<boost::signals2::detail::does_nothing>>(uint64_t a1, void *a2)
{
  unint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2 != v2[1])
    {
      while (1)
      {
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v3, (uint64_t)&v9);
        if ((*(_DWORD *)v3 ^ (*(int *)v3 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v3 + 8) + 24))(*(void *)(v3 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v3 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (v9 == v9 >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
        }
        char v7 = 1;
        if (v9 == v9 >> 31)
        {
LABEL_13:
          uint64_t v8 = v11;
          if (v11)
          {
            if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v3 += 24;
          if (v3 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        return;
      }
    }
  }
}

void sub_1000BFEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>()
{
}

void sub_1000C0018(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>(v1);
  }
  __cxa_rethrow();
}

void sub_1000C0030(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::m_insert(uint64_t *a1, uint64_t *a2, int *a3, void *a4)
{
  uint64_t v8 = a1 + 4;
  int v9 = a1;
  if ((uint64_t *)*a2 != a1 + 4) {
    int v9 = *(uint64_t **)(*a2 + 48);
  }
  uint64_t v10 = operator new(0x20uLL);
  uint64_t v11 = v10;
  uint64_t v12 = a4[1];
  v10[2] = *a4;
  v10[3] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v13 = *v9;
  *(void *)(v13 + 8) = v10;
  void *v10 = v13;
  *int v9 = (uint64_t)v10;
  v10[1] = v9;
  ++a1[2];
  std::string v14 = a1 + 3;
  uint64_t v15 = *a2;
  if ((void *)v15 == v8) {
    goto LABEL_14;
  }
  int v16 = *a3;
  int v17 = *(_DWORD *)(v15 + 32);
  BOOL v18 = *a3 < v17;
  if (*a3 == v17)
  {
    if (v16 != 1) {
      goto LABEL_16;
    }
    int v16 = a3[2];
    int v17 = *(_DWORD *)(v15 + 40);
    BOOL v18 = v16 < v17;
  }
  if (v18 || v17 < v16)
  {
LABEL_14:
    uint64_t v20 = (uint64_t *)*v8;
    if (*v8) {
      goto LABEL_25;
    }
LABEL_48:
    uint64_t v36 = *(void *)a3;
    int v37 = a3[2];
    int v38 = v11;
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>((uint64_t **)a1 + 3, (int *)&v36, (uint64_t)&v36);
    return;
  }
LABEL_16:
  int v21 = *(void **)(v15 + 8);
  if (v21)
  {
    do
    {
      BOOL v22 = v21;
      int v21 = (void *)*v21;
    }
    while (v21);
  }
  else
  {
    std::string::size_type v23 = (void *)v15;
    do
    {
      BOOL v22 = (void *)v23[2];
      BOOL v29 = *v22 == (void)v23;
      std::string::size_type v23 = v22;
    }
    while (!v29);
  }
  if (*v14 == v15) {
    *std::string v14 = v22;
  }
  char v24 = (uint64_t *)a1[4];
  --a1[5];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v24, (uint64_t *)v15);
  operator delete((void *)v15);
  uint64_t v20 = (uint64_t *)*v8;
  if (!*v8) {
    goto LABEL_48;
  }
LABEL_25:
  int v25 = *a3;
  int v26 = a3[2];
  std::string::size_type v27 = v8;
  if (*a3 == 1)
  {
    do
    {
      while (1)
      {
        int v32 = *((_DWORD *)v20 + 8);
        BOOL v33 = v32 < 1;
        if (v32 == 1) {
          BOOL v33 = *((_DWORD *)v20 + 10) < v26;
        }
        if (!v33) {
          break;
        }
        uint64_t v20 = (uint64_t *)v20[1];
        if (!v20) {
          goto LABEL_40;
        }
      }
      std::string::size_type v27 = v20;
      uint64_t v20 = (uint64_t *)*v20;
    }
    while (v20);
  }
  else
  {
    do
    {
      int v28 = *((_DWORD *)v20 + 8);
      BOOL v29 = v28 == v25;
      BOOL v30 = v28 < v25;
      if (v28 >= v25) {
        BOOL v31 = (uint64_t **)v20;
      }
      else {
        BOOL v31 = (uint64_t **)(v20 + 1);
      }
      if (!v30) {
        std::string::size_type v27 = v20;
      }
      if (v29)
      {
        BOOL v31 = (uint64_t **)v20;
        std::string::size_type v27 = v20;
      }
      uint64_t v20 = *v31;
    }
    while (*v31);
  }
LABEL_40:
  if (v27 == v8 || *((_DWORD *)v27 + 8) != v25) {
    goto LABEL_48;
  }
  if (v25 == 1)
  {
    int v34 = *((_DWORD *)v27 + 10);
    if (v34 < v26 || v26 < v34) {
      goto LABEL_48;
    }
  }
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    if (*a2 != 1)
    {
      int v16 = *((_DWORD *)v5 + 8);
      if (v7 == v16) {
        return (uint64_t **)v5;
      }
      int v9 = (uint64_t **)a1[1];
      while (1)
      {
        if (v7 < v16)
        {
          uint64_t v5 = *v9;
          uint64_t v6 = v9;
          if (!*v9) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v16 >= v7) {
            return v9;
          }
          uint64_t v5 = v9[1];
          if (!v5)
          {
LABEL_11:
            uint64_t v6 = v9 + 1;
            goto LABEL_13;
          }
        }
        int v16 = *((_DWORD *)v5 + 8);
        int v9 = (uint64_t **)v5;
        if (v7 == v16) {
          return (uint64_t **)v5;
        }
      }
    }
    int v8 = a2[2];
    while (1)
    {
      int v9 = (uint64_t **)v5;
      int v10 = *((_DWORD *)v5 + 8);
      if (v10 == 1)
      {
        int v11 = *((_DWORD *)v5 + 10);
        if (v8 >= v11)
        {
          if (v11 >= v8) {
            return v9;
          }
          goto LABEL_10;
        }
LABEL_4:
        uint64_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v9;
        if (!*v9) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v10 > 1) {
          goto LABEL_4;
        }
LABEL_10:
        uint64_t v5 = (uint64_t *)v5[1];
        if (!v5) {
          goto LABEL_11;
        }
      }
    }
  }
  int v9 = a1 + 1;
LABEL_13:
  uint64_t v12 = operator new(0x38uLL);
  _DWORD v12[2] = *(_OWORD *)a3;
  *((void *)v12 + 6) = *(void *)(a3 + 16);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = v9;
  void *v6 = (uint64_t *)v12;
  uint64_t v13 = (uint64_t *)**a1;
  std::string v14 = (uint64_t *)v12;
  if (v13)
  {
    *a1 = v13;
    std::string v14 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v12;
}

uint64_t boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf2<void,XPCIPCAPI_v1_rcp,std::string const&,boost::any const&>,boost::_bi::list3<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function2<void,std::string const&,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf2<void,XPCIPCAPI_v1_rcp,std::string const&,boost::any const&>,boost::_bi::list3<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>>>>(boost::_bi::bind_t<void,boost::_mfi::mf2<void,XPCIPCAPI_v1_rcp,std::string const&,boost::any const&>,boost::_bi::list3<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000C04A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf2<void,XPCIPCAPI_v1_rcp,std::string const&,boost::any const&>,boost::_bi::list3<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F3678 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F3678 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,boost::_mfi::mf2<void,XPCIPCAPI_v1_rcp,std::string const&,boost::any const&>,boost::_bi::list3<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>>>,void,std::string const&,boost::any const&>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(uint64_t (**)(void *))a1;
  uint64_t v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::connect(uint64_t a1)
{
  unint64_t v2 = *(pthread_mutex_t **)(a1 + 24);
  v3[20] = (void *)10;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = v2;
  pthread_mutex_lock(v2);
  boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::nolock_connect((uint64_t ***)a1, v3);
}

void sub_1000C073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::nolock_connect(uint64_t ***a1, void *a2)
{
}

void sub_1000C09C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::create_new_connection(uint64_t ***a1, void *a2)
{
}

void sub_1000C0A54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0AE4()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::nolock_force_unique_connection_list(uint64_t ***a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2 || atomic_load_explicit((atomic_uint *volatile)v2 + 2, memory_order_acquire) != 1) {
    operator new();
  }
  uint64_t v3 = **a1;
  uint64_t v4 = a1[2];
  if (v4 == (uint64_t **)v3) {
    uint64_t v4 = (uint64_t **)v3[1];
  }
  *(void *)&long long v6 = v4;
  return boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(a1, a2, 1, (uint64_t **)&v6, 2);
}

void sub_1000C0C88()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(uint64_t ***a1, void *a2, char a3, uint64_t **a4, int a5)
{
  uint64_t result = *a4;
  BOOL v22 = result;
  uint64_t v7 = *a1;
  int v8 = **a1;
  if (v8 != result)
  {
    unsigned int v9 = a5 - 1;
    if (a3)
    {
      unsigned int v11 = 0;
      do
      {
        uint64_t v13 = result[2];
        std::string v14 = *(uint64_t **)(v13 + 32);
        if (v14)
        {
          for (uint64_t i = *v14; i != v14[1]; i += 24)
          {
            if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
            {
              if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
                goto LABEL_18;
              }
            }
            else
            {
              uint64_t v16 = *(void *)(i + 16);
              if (!v16 || !atomic_load_explicit((atomic_uint *volatile)(v16 + 8), memory_order_acquire))
              {
LABEL_18:
                if (*(unsigned char *)(v13 + 24))
                {
                  *(unsigned char *)(v13 + 24) = 0;
                  boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v13, a2);
                }
                break;
              }
            }
          }
        }
        uint64_t v17 = v22[2];
        if (*(unsigned char *)(v17 + 24)) {
          uint64_t result = (uint64_t *)v22[1];
        }
        else {
          uint64_t result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(**a1, (int *)(v17 + 64), &v22);
        }
        BOOL v22 = result;
        ++v11;
      }
      while (result != **a1 && v9 >= v11);
    }
    else
    {
      unsigned int v18 = 1;
      do
      {
        while (1)
        {
          uint64_t v20 = result[2];
          if (*(unsigned char *)(v20 + 24)) {
            break;
          }
          uint64_t result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(v8, (int *)(v20 + 64), &v22);
          uint64_t v7 = *a1;
          BOOL v22 = result;
          int v8 = *v7;
          if (result == *v7 || v9 < v18++) {
            goto LABEL_33;
          }
        }
        uint64_t result = (uint64_t *)result[1];
        BOOL v22 = result;
        int v8 = *v7;
      }
      while (result != *v7 && v9 >= v18++);
    }
  }
LABEL_33:
  a1[2] = (uint64_t **)result;
  return result;
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::invocation_state>(&v2);
}

void sub_1000C0F18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::invocation_state>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000C1018(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 24);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000C1148(_Unwind_Exception *a1)
{
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::invocation_state::invocation_state()
{
}

{
  operator new();
}

void sub_1000C11E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C1278()
{
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  long long v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      unsigned int v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          uint64_t v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          long long v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v14);
      }
      long long v6 = v16;
      uint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1000C13F8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    long long v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        long long v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *uint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      long long v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1000C14C0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    void v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>,boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>>()
{
}

void sub_1000C1680(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>>(v1);
  __cxa_rethrow();
}

void sub_1000C1694(_Unwind_Exception *a1)
{
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 4;
  uint64_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v12 = a1[10];
    if ((uint64_t *)v12 != *a3) {
      goto LABEL_57;
    }
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v8 = v6;
    BOOL v14 = (uint64_t **)(v6 - 1);
    if (v13 != a1)
    {
LABEL_48:
      uint64_t v40 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v14, a2, (uint64_t)&std::piecewise_construct, &v40)[6] = v13;
      goto LABEL_57;
    }
    goto LABEL_12;
  }
  int v7 = *a2;
  if (*a2 == 1)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v5;
    do
    {
      while (1)
      {
        int v10 = *((_DWORD *)v9 + 8);
        BOOL v11 = v10 < 1;
        if (v10 == 1) {
          BOOL v11 = *((_DWORD *)v9 + 10) < a2[2];
        }
        if (!v11) {
          break;
        }
        uint64_t v9 = (uint64_t *)v9[1];
        if (!v9) {
          goto LABEL_26;
        }
      }
      uint64_t v8 = v9;
      uint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = v6;
    uint64_t v17 = v5;
    do
    {
      int v18 = *((_DWORD *)v17 + 8);
      BOOL v19 = v18 == v7;
      BOOL v20 = v18 < v7;
      if (v18 >= v7) {
        int v21 = (uint64_t **)v17;
      }
      else {
        int v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        BOOL v22 = v8;
      }
      else {
        BOOL v22 = v17;
      }
      if (v19)
      {
        int v21 = (uint64_t **)v17;
        uint64_t v8 = v17;
      }
      else
      {
        uint64_t v8 = v22;
      }
      uint64_t v17 = *v21;
    }
    while (*v21);
  }
LABEL_26:
  uint64_t v23 = v8[6];
  if ((uint64_t *)v23 == *a3)
  {
    uint64_t v13 = *(uint64_t **)(v23 + 8);
    int v24 = *a2;
    if (*a2 == 1)
    {
      int v25 = v6;
      int v26 = v5;
      while (1)
      {
        int v27 = *((_DWORD *)v26 + 8);
        if (v27 == 1)
        {
          if (a2[2] < *((_DWORD *)v26 + 10)) {
            goto LABEL_34;
          }
LABEL_29:
          int v26 = (uint64_t *)v26[1];
          if (!v26) {
            goto LABEL_46;
          }
        }
        else
        {
          if (v27 <= 1) {
            goto LABEL_29;
          }
LABEL_34:
          int v25 = v26;
          int v26 = (uint64_t *)*v26;
          if (!v26) {
            goto LABEL_46;
          }
        }
      }
    }
    int v25 = v6;
    int v28 = v5;
    do
    {
      int v29 = *((_DWORD *)v28 + 8);
      BOOL v30 = (uint64_t **)(v28 + 1);
      BOOL v31 = v24 == v29;
      BOOL v32 = v24 < v29;
      if (v24 >= v29) {
        BOOL v33 = (uint64_t **)(v28 + 1);
      }
      else {
        BOOL v33 = (uint64_t **)v28;
      }
      if (!v32) {
        int v28 = v25;
      }
      if (v31) {
        BOOL v33 = v30;
      }
      else {
        int v25 = v28;
      }
      int v28 = *v33;
    }
    while (*v33);
LABEL_46:
    if (v25 == v6)
    {
      BOOL v14 = (uint64_t **)(v6 - 1);
      if (v13 != a1) {
        goto LABEL_48;
      }
    }
    else
    {
      BOOL v14 = (uint64_t **)(v6 - 1);
      if (v13 != (uint64_t *)v25[6]) {
        goto LABEL_48;
      }
    }
LABEL_12:
    uint64_t v15 = (uint64_t *)v8[1];
    if (v15)
    {
      do
      {
        uint64_t v16 = v15;
        uint64_t v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      int v34 = v8;
      do
      {
        uint64_t v16 = (uint64_t *)v34[2];
        BOOL v19 = *v16 == (void)v34;
        int v34 = v16;
      }
      while (!v19);
    }
    if (*v14 == v8) {
      *BOOL v14 = v16;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v8);
    operator delete(v8);
  }
LABEL_57:
  uint64_t v35 = *a3;
  uint64_t v36 = **a3;
  uint64_t v37 = (*a3)[1];
  *(void *)(v36 + 8) = v37;
  *(void *)v35[1] = v36;
  --a1[2];
  int v38 = (atomic_uint *)v35[3];
  if (v38)
  {
    if (atomic_fetch_add(v38 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v38 + 16))(v38);
      if (atomic_fetch_add(v38 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v38 + 24))(v38);
      }
    }
  }
  operator delete(v35);
  return v37;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>::connection_body(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_100495F40;
  operator new();
}

void sub_1000C1A70()
{
  if (*v0) {
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::connection_body((uint64_t)v0, *v0);
  }
  operator delete();
}

void sub_1000C1AB4(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>>::shared_ptr<boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>>(&v2);
}

void sub_1000C1B90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete();
}

void boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000C1CD4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000C1D64(_Unwind_Exception *a1)
{
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = off_100495F40;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = off_100495D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>()
{
}

void sub_1000C200C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>(v1);
  }
  __cxa_rethrow();
}

void sub_1000C2024(_Unwind_Exception *a1)
{
}

uint64_t boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function1<void,nl::wpantund::WPAN::NetworkInstance const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>>(boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000C20D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F3B24 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F3B24 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>,void,nl::wpantund::WPAN::NetworkInstance const&>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(uint64_t (**)(void *))a1;
  uint64_t v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::connect(uint64_t a1)
{
  unint64_t v2 = *(pthread_mutex_t **)(a1 + 24);
  v3[20] = (void *)10;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = v2;
  pthread_mutex_lock(v2);
  boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::nolock_connect((uint64_t ***)a1, v3);
}

void sub_1000C236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::nolock_connect(uint64_t ***a1, void *a2)
{
}

void sub_1000C25F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::create_new_connection(uint64_t ***a1, void *a2)
{
}

void sub_1000C2684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C2714()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::nolock_force_unique_connection_list(uint64_t ***a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2 || atomic_load_explicit((atomic_uint *volatile)v2 + 2, memory_order_acquire) != 1) {
    operator new();
  }
  uint64_t v3 = **a1;
  uint64_t v4 = a1[2];
  if (v4 == (uint64_t **)v3) {
    uint64_t v4 = (uint64_t **)v3[1];
  }
  *(void *)&long long v6 = v4;
  return boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(a1, a2, 1, (uint64_t **)&v6, 2);
}

void sub_1000C28B8()
{
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::invocation_state>(&v2);
}

void sub_1000C29A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::invocation_state>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000C2AA4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 24);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000C2BD4(_Unwind_Exception *a1)
{
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::invocation_state::invocation_state()
{
}

{
  operator new();
}

void sub_1000C2C74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C2D04()
{
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  long long v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      BOOL v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          uint64_t v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          long long v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v14);
      }
      long long v6 = v16;
      uint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1000C2E84(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    long long v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        long long v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *uint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      long long v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1000C2F4C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    void v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>>>,boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>>>>()
{
}

void sub_1000C310C(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>>(v1);
  __cxa_rethrow();
}

void sub_1000C3120(_Unwind_Exception *a1)
{
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>::connection_body(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_100496138;
  operator new();
}

void sub_1000C3224()
{
  if (*v0) {
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::connection_body((uint64_t)v0, *v0);
  }
  operator delete();
}

void sub_1000C3268(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>>::shared_ptr<boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>>(&v2);
}

void sub_1000C3344(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete();
}

void boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000C3488(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000C3518(_Unwind_Exception *a1)
{
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = off_100496138;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = off_100495D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>,boost::signals2::mutex>>()
{
}

void sub_1000C37C0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>(v1);
  }
  __cxa_rethrow();
}

void sub_1000C37D8(_Unwind_Exception *a1)
{
}

uint64_t boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function1<void,nl::wpantund::EnergyScanResultEntry const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>>(boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000C388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F3E9BLL & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F3E9BLL & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf1<void,XPCIPCAPI_v1_rcp,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>>>,void,nl::wpantund::EnergyScanResultEntry const&>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(uint64_t (**)(void *))a1;
  uint64_t v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ENS1_6objectEEEEvDpT__block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  xpc_object_t object = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void, xpc_object_t *))(v2 + 16))(v2, v1, &object);
  xpc_release(object);
}

void sub_1000C3A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFvhN3xpc4dictEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    long long v5 = _Block_copy(v4);
    long long v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    long long v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFvhN3xpc4dictEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t boost::any::holder<nl::Data>::~holder(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::any::holder<nl::Data>::~holder(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

  operator delete();
}

_UNKNOWN **boost::any::holder<nl::Data>::type()
{
}

void boost::any::holder<nl::Data>::clone()
{
}

void sub_1000C3C60()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 16) = v2;
    operator delete(v2);
  }
  operator delete();
}

void *boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::list5(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v15 = *(std::string *)a3;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v14 = *(std::string *)a4;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_6:
  uint64_t v9 = *(void **)a5;
  if (*(void *)a5) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v10 = *(NSObject **)(a5 + 8);
  aBlocuint64_t k = v9;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5(a1, a2, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1000C3DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v13 = *(std::string *)a3;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a4;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_6:
  boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage4(a1, a2, (uint64_t)&v13, (long long *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    operator delete(v13.__r_.__value_.__l.__data_);
    uint64_t v9 = *(void **)a5;
    if (!*(void *)a5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v9 = *(void **)a5;
  if (*(void *)a5) {
LABEL_12:
  }
    uint64_t v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a5 + 8);
  a1[7] = v9;
  a1[8] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  return a1;
}

void sub_1000C3F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage4(void *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    *a1 = a2;
    uint64_t v7 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      *uint64_t v7 = __p;
      uint64_t v8 = (std::string *)(a1 + 4);
      if (*((char *)a4 + 23) < 0) {
        goto LABEL_10;
      }
LABEL_8:
      long long v9 = *a4;
      v8->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      return a1;
    }
  }
  else
  {
    std::string __p = *(std::string *)a3;
    *a1 = a2;
    uint64_t v7 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v8 = (std::string *)(a1 + 4);
    if ((*((char *)a4 + 23) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = (std::string *)(a1 + 4);
    if ((*((char *)a4 + 23) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
LABEL_10:
  std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  return a1;
}

void sub_1000C4064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 31) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    long long v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    long long v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 32);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
LABEL_6:
  uint64_t v7 = *(void **)(a2 + 56);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  return a1;
}

void sub_1000C4150(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(char const*)>::function<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,char const*>::function1<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, &v3);
}

void sub_1000C4218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,char const*>::function1<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)a1, &v3);
}

void sub_1000C42D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>)::stored_vtable, &v2);
}

void sub_1000C439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>,void,char const*>::invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v2 = *a1;
  uint64_t v4 = &v3;
  boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<char const*>>(v2 + 16, v2, &v4);
}

void boost::detail::function::basic_vtable1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, (uint64_t)&v3);
}

void sub_1000C44BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)xpc_object_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 80);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 72);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 71) < 0) {
          operator delete(*(void **)(v5 + 48));
        }
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      xpc_object_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F3F27 & 0x7FFFFFFFFFFFFFFFLL)
        || (xpc_object_t result = strcmp((const char *)result, (const char *)(0x80000001003F3F27 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000C4664()
{
}

void boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<char const*>>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v12 = *(std::string *)(a1 + 8);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v11 = *(std::string *)(a1 + 32);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = *(NSObject **)(a1 + 64);
  aBlocuint64_t k = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v5, v6, (uint64_t)&v12, (uint64_t)&v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_1000C47C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void *, uint64_t, std::string *, std::string *, void **))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string v11 = (void *)(a2 + (v9 >> 1));
  if ((v9 & 1) == 0)
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v10 = *(void (**)(void *, uint64_t, std::string *, std::string *, void **))(*v11 + v10);
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v17 = *(std::string *)a4;
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    std::string v16 = *(std::string *)a5;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
LABEL_8:
  std::string v12 = *(void **)a6;
  if (*(void *)a6) {
    std::string v12 = _Block_copy(v12);
  }
  std::string v13 = *(NSObject **)(a6 + 8);
  aBlocuint64_t k = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  v10(v11, a3, &v17, &v16, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
}

void sub_1000C4968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, uint64_t a2)
{
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v2, a2 + 16);
  operator new();
}

void sub_1000C4A9C()
{
}

void sub_1000C4AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::list4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    uint64_t v7 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v12 = *(std::string *)a3;
  uint64_t v7 = *(void **)a4;
  if (*(void *)a4) {
LABEL_5:
  }
    uint64_t v7 = _Block_copy(v7);
LABEL_6:
  uint64_t v8 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage4(a1, a2, (uint64_t)&v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1000C4BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    *a1 = a2;
    uint64_t v7 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      *uint64_t v7 = __p;
      uint64_t v8 = *(void **)a4;
      if (!*(void *)a4) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::string __p = *(std::string *)a3;
    *a1 = a2;
    uint64_t v7 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v8 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  uint64_t v8 = *(void **)a4;
  if (*(void *)a4) {
LABEL_8:
  }
    uint64_t v8 = _Block_copy(v8);
LABEL_9:
  uint64_t v9 = *(NSObject **)(a4 + 8);
  a1[4] = v8;
  a1[5] = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  return a1;
}

void sub_1000C4CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    uint64_t v4 = *(void **)(a2 + 48);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)(a2 + 24);
    uint64_t v4 = *(void **)(a2 + 48);
    if (!v4)
    {
LABEL_6:
      uint64_t v5 = *(NSObject **)(a2 + 56);
      aBlocuint64_t k = v4;
      dispatch_object_t object = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, &v6);
    }
  }
  uint64_t v4 = _Block_copy(v4);
  goto LABEL_6;
}

void sub_1000C4DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    uint64_t v4 = (void *)*((void *)a2 + 6);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
    uint64_t v4 = (void *)*((void *)a2 + 6);
    if (!v4)
    {
LABEL_6:
      uint64_t v5 = *((void *)a2 + 7);
      aBlocuint64_t k = v4;
      dispatch_object_t object = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)a1, (uint64_t)&v6);
    }
  }
  uint64_t v4 = _Block_copy(v4);
  goto LABEL_6;
}

void sub_1000C4ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    long long v3 = *(void **)(a2 + 48);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)(a2 + 24);
    long long v3 = *(void **)(a2 + 48);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *(NSObject **)(a2 + 56);
      aBlocuint64_t k = v3;
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>)::stored_vtable, &v5);
    }
  }
  long long v3 = _Block_copy(v3);
  goto LABEL_6;
}

void sub_1000C4FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>,void,int>::invoke(uint64_t *a1, int a2)
{
  int v3 = a2;
  uint64_t v2 = *a1;
  uint64_t v4 = (unsigned int *)&v3;
  boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<int>>(v2 + 16, v2, &v4);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    uint64_t v4 = (void *)*((void *)a2 + 6);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
    uint64_t v4 = (void *)*((void *)a2 + 6);
    if (!v4)
    {
LABEL_6:
      long long v5 = *((void *)a2 + 7);
      aBlocuint64_t k = v4;
      dispatch_object_t object = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, (uint64_t)&v6);
    }
  }
  uint64_t v4 = _Block_copy(v4);
  goto LABEL_6;
}

void sub_1000C514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)xpc_object_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 56);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 48);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      xpc_object_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F401ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (xpc_object_t result = strcmp((const char *)result, (const char *)(0x80000001003F401ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000C532C()
{
}

void boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<int>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v7 = *(void **)(a1 + 32);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
LABEL_5:
  }
    uint64_t v7 = _Block_copy(v7);
LABEL_6:
  uint64_t v8 = *(NSObject **)(a1 + 40);
  aBlocuint64_t k = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v5, v6, (uint64_t)&v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1000C5458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, std::string *, void **))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = (void *)(a2 + (v7 >> 1));
  if ((v7 & 1) == 0)
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    uint64_t v10 = *(void **)a5;
    if (!*(void *)a5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *(void (**)(void *, uint64_t, std::string *, void **))(*v9 + v8);
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v14 = *(std::string *)a4;
  uint64_t v10 = *(void **)a5;
  if (*(void *)a5) {
LABEL_7:
  }
    uint64_t v10 = _Block_copy(v10);
LABEL_8:
  std::string v11 = *(NSObject **)(a5 + 8);
  aBlocuint64_t k = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  v8(v9, a3, &v14, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1000C5588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    int v3 = *(void **)(a2 + 48);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)(a2 + 24);
    int v3 = *(void **)(a2 + 48);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *(NSObject **)(a2 + 56);
      aBlocuint64_t k = v3;
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      boost::detail::function::basic_vtable1<void,int>::assign_functor<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>();
    }
  }
  int v3 = _Block_copy(v3);
  goto LABEL_6;
}

void sub_1000C56A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::detail::function::basic_vtable1<void,int>::assign_functor<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>()
{
}

void sub_1000C5764()
{
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, &v3);
}

void sub_1000C5834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)a1, &v3);
}

void sub_1000C58F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>)::stored_vtable, &v2);
}

void sub_1000C59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>,void,int>::invoke(uint64_t *a1, int a2)
{
  int v3 = a2;
  uint64_t v2 = *a1;
  uint64_t v4 = (unsigned int *)&v3;
  boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<int>>(v2 + 16, v2, &v4);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)xpc_object_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(NSObject **)(v5 + 80);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 72);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 71) < 0) {
          operator delete(*(void **)(v5 + 48));
        }
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      xpc_object_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F410DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (xpc_object_t result = strcmp((const char *)result, (const char *)(0x80000001003F410DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000C5BBC()
{
}

void boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<int>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v12 = *(std::string *)(a1 + 8);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v11 = *(std::string *)(a1 + 32);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = *(NSObject **)(a1 + 64);
  aBlocuint64_t k = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v5, v6, (uint64_t)&v12, (uint64_t)&v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_1000C5D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void *, uint64_t, std::string *, std::string *, void **))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string v11 = (void *)(a2 + (v9 >> 1));
  if ((v9 & 1) == 0)
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v10 = *(void (**)(void *, uint64_t, std::string *, std::string *, void **))(*v11 + v10);
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v17 = *(std::string *)a4;
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    std::string v16 = *(std::string *)a5;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
LABEL_8:
  std::string v12 = *(void **)a6;
  if (*(void *)a6) {
    std::string v12 = _Block_copy(v12);
  }
  std::string v13 = *(NSObject **)(a6 + 8);
  aBlocuint64_t k = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  v10(v11, a3, &v17, &v16, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
}

void sub_1000C5EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::list7(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a3;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v17 = *(std::string *)a4;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_6:
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v16 = *(std::string *)a5;
  }
  std::string v11 = *(void **)a6;
  if (*(void *)a6) {
    std::string v11 = _Block_copy(v11);
  }
  std::string v12 = *(NSObject **)(a6 + 8);
  aBlocuint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7(a1, a2, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_22:
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return a1;
    }
LABEL_23:
    operator delete(v18.__r_.__value_.__l.__data_);
    return a1;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_19:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
  return a1;
}

void sub_1000C607C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v16 = *(std::string *)a3;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v15 = *(std::string *)a4;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_6:
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  boost::_bi::storage6<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(a1, a2, (uint64_t)&v16, (uint64_t)&v15, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_16:
      operator delete(v16.__r_.__value_.__l.__data_);
      std::string v11 = *(void **)a6;
      if (!*(void *)a6) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_16;
  }
LABEL_12:
  std::string v11 = *(void **)a6;
  if (*(void *)a6) {
LABEL_17:
  }
    std::string v11 = _Block_copy(v11);
LABEL_18:
  std::string v12 = *(NSObject **)(a6 + 8);
  a1[10] = v11;
  a1[11] = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  return a1;
}

void sub_1000C624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage6<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v13 = *(std::string *)a3;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a4;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_6:
  boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage4(a1, a2, (uint64_t)&v13, (long long *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    operator delete(v13.__r_.__value_.__l.__data_);
    uint64_t v9 = (std::string *)(a1 + 7);
    if ((*((char *)a5 + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v9 = (std::string *)(a1 + 7);
  if ((*((char *)a5 + 23) & 0x80000000) == 0)
  {
LABEL_9:
    long long v10 = *a5;
    v9->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    return a1;
  }
LABEL_12:
  std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  return a1;
}

void sub_1000C63DC(_Unwind_Exception *a1)
{
  boost::_bi::storage4<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::~storage4(v1);
  _Unwind_Resume(a1);
}

void sub_1000C63F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    uint64_t v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 32);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
LABEL_6:
  uint64_t v7 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *(void **)(a2 + 80);
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  long long v10 = *(NSObject **)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  return a1;
}

void sub_1000C6510(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int,boost::any const&)>::function<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function2<void,int,boost::any const&>::function2<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, &v3);
}

void sub_1000C6608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function2<void,int,boost::any const&>::function2<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)a1, &v3);
}

void sub_1000C66DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>)::stored_vtable, &v2);
}

void sub_1000C67BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>,void,int,boost::any const&>::invoke(uint64_t *a1, int a2, unsigned int *a3)
{
  int v4 = a2;
  uint64_t v3 = *a1;
  v5[0] = (unsigned int *)&v4;
  v5[1] = a3;
  boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist2<int,boost::any const&>>(v3 + 16, v3, v5);
}

void boost::detail::function::basic_vtable2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, (uint64_t)&v3);
}

void sub_1000C68F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)xpc_object_t result = 0;
      return result;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 104);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 96);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 95) < 0)
        {
          operator delete(*(void **)(v5 + 72));
          if ((*(char *)(v5 + 71) & 0x80000000) == 0)
          {
LABEL_12:
            if ((*(char *)(v5 + 47) & 0x80000000) == 0) {
              goto LABEL_13;
            }
LABEL_21:
            operator delete(*(void **)(v5 + 24));
LABEL_13:
            operator delete();
          }
        }
        else if ((*(char *)(v5 + 71) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v5 + 48));
        if ((*(char *)(v5 + 47) & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
      *(void *)a2 = 0;
      return result;
    case 3:
      xpc_object_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F4202 & 0x7FFFFFFFFFFFFFFFLL)
        || (xpc_object_t result = strcmp((const char *)result, (const char *)(0x80000001003F4202 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      return result;
    default:
      a2[4] = 0;
      return result;
  }
}

void sub_1000C6AC0()
{
}

void boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist2<int,boost::any const&>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (uint64_t)a3[1];
  uint64_t v7 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v14 = *(std::string *)(a1 + 8);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v13 = *(std::string *)(a1 + 32);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v12 = *(std::string *)(a1 + 56);
  }
  long long v8 = *(void **)(a1 + 80);
  if (v8) {
    long long v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a1 + 88);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v5, v7, v6, (uint64_t)&v14, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v14.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
}

void sub_1000C6C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, std::string *, void **))a1;
  uint64_t v13 = *(void *)(a1 + 8);
  std::string v15 = (void *)(a2 + (v13 >> 1));
  if ((v13 & 1) == 0)
  {
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    if ((*(char *)(a6 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, std::string *, void **))(*v15 + v14);
  if (*(char *)(a5 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v22 = *(std::string *)a5;
  if ((*(char *)(a6 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    std::string v21 = *(std::string *)a6;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
LABEL_8:
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v20 = *(std::string *)a7;
  }
  std::string v16 = *(void **)a8;
  if (*(void *)a8) {
    std::string v16 = _Block_copy(v16);
  }
  std::string v17 = *(NSObject **)(a8 + 8);
  aBlocuint64_t k = v16;
  dispatch_object_t object = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  v14(v15, a3, a4, &v22, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_25:
      operator delete(v22.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1000C6E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, uint64_t a2)
{
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v2, a2 + 16);
  operator new();
}

void sub_1000C6FFC()
{
}

void sub_1000C7028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, &v3);
}

void sub_1000C70FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)a1, &v3);
}

void sub_1000C71D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>)::stored_vtable, &v2);
}

void sub_1000C72B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>,void,int>::invoke(uint64_t *a1, int a2)
{
  int v3 = a2;
  uint64_t v2 = *a1;
  uint64_t v4 = (unsigned int *)&v3;
  boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<int>>(v2 + 16, v2, &v4);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)xpc_object_t result = 0;
      return result;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(NSObject **)(v5 + 104);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 96);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 95) < 0)
        {
          operator delete(*(void **)(v5 + 72));
          if ((*(char *)(v5 + 71) & 0x80000000) == 0)
          {
LABEL_12:
            if ((*(char *)(v5 + 47) & 0x80000000) == 0) {
              goto LABEL_13;
            }
LABEL_21:
            operator delete(*(void **)(v5 + 24));
LABEL_13:
            operator delete();
          }
        }
        else if ((*(char *)(v5 + 71) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v5 + 48));
        if ((*(char *)(v5 + 47) & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
      *(void *)a2 = 0;
      return result;
    case 3:
      xpc_object_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F4312 & 0x7FFFFFFFFFFFFFFFLL)
        || (xpc_object_t result = strcmp((const char *)result, (const char *)(0x80000001003F4312 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      return result;
    default:
      a2[4] = 0;
      return result;
  }
}

void sub_1000C74D8()
{
}

void boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist1<int>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v13 = *(std::string *)(a1 + 8);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v12 = *(std::string *)(a1 + 32);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v11 = *(std::string *)(a1 + 56);
  }
  uint64_t v7 = *(void **)(a1 + 80);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  long long v8 = *(NSObject **)(a1 + 88);
  aBlocuint64_t k = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v5, v6, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v13.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
}

void sub_1000C7680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string v12 = *(void (**)(void *, uint64_t, std::string *, std::string *, std::string *, void **))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  std::string v13 = (void *)(a2 + (v11 >> 1));
  if ((v11 & 1) == 0)
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  std::string v12 = *(void (**)(void *, uint64_t, std::string *, std::string *, std::string *, void **))(*v13 + v12);
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v20 = *(std::string *)a4;
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    std::string v19 = *(std::string *)a5;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
LABEL_8:
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v18 = *(std::string *)a6;
  }
  std::string v14 = *(void **)a7;
  if (*(void *)a7) {
    std::string v14 = _Block_copy(v14);
  }
  std::string v15 = *(NSObject **)(a7 + 8);
  aBlocuint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  v12(v13, a3, &v20, &v19, &v18, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_25:
      operator delete(v20.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1000C7888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJhS2_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(unsigned char,xpc::dict)>::operator()<unsigned char const&,xpc::dict const&>(uint64_t *a1, unsigned __int8 *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1000C798C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void boost::function<void ()(int,boost::any const&)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function2<void,int,boost::any const&>::function2<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(a1, &v3);
}

void sub_1000C7A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function2<void,int,boost::any const&>::function2<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)a1, &v3);
}

void sub_1000C7B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage5<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage5((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf4<void,XPCIPCAPI_v1_rcp,char const*,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list5<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>)::stored_vtable, &v2);
}

void sub_1000C7BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>,void,int,boost::any const&>::invoke(uint64_t *a1, int a2, unsigned int *a3)
{
  int v4 = a2;
  uint64_t v3 = *a1;
  v5[0] = (unsigned int *)&v4;
  v5[1] = a3;
  boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist2<int,boost::any const&>>(v3 + 16, v3, v5);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  int v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)xpc_object_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(NSObject **)(v5 + 80);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 72);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 71) < 0) {
          operator delete(*(void **)(v5 + 48));
        }
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      xpc_object_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F440DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (xpc_object_t result = strcmp((const char *)result, (const char *)(0x80000001003F440DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000C7DD8()
{
}

void boost::_bi::list6<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::operator()<boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::rrlist2<int,boost::any const&>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (uint64_t)a3[1];
  uint64_t v7 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v13 = *(std::string *)(a1 + 8);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v12 = *(std::string *)(a1 + 32);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  long long v8 = *(void **)(a1 + 56);
  if (v8) {
    long long v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a1 + 64);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(a2, v5, v7, v6, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_1000C7F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf5<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string v12 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, void **))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  std::string v13 = (void *)(a2 + (v11 >> 1));
  if ((v11 & 1) == 0)
  {
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    if ((*(char *)(a6 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  std::string v12 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, void **))(*v13
                                                                                                 + v12);
  if (*(char *)(a5 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v19 = *(std::string *)a5;
  if ((*(char *)(a6 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    std::string v18 = *(std::string *)a6;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
LABEL_8:
  std::string v14 = *(void **)a7;
  if (*(void *)a7) {
    std::string v14 = _Block_copy(v14);
  }
  std::string v15 = *(NSObject **)(a7 + 8);
  aBlocuint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  v12(v13, a3, a4, &v19, &v18, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v19.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
}

void sub_1000C80E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_5_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xCu);
}

void InternalClientsInterface::InternalClientsInterface(InternalClientsInterface *this, dispatch_queue_s *a2)
{
  *((void *)this + 1) = a2;
  Instance = (void *)InternalIPCAPI::getInstance(this);
  *(void *)this = Instance;
  InternalIPCAPI::add_process_queue(Instance, a2);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v6 = logging_obg;
    if (syslog_is_the_mask_enabled(3))
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        InternalClientsInterface::InternalClientsInterface(v6);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void InternalClientsInterface::~InternalClientsInterface(InternalClientsInterface *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5))
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v2 = 0;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "OTD InternalClientInterface - Deleted", v2, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void InternalClientsInterface::add_interface(InternalClientsInterface *this)
{
  Instance = (InternalIPCAPI *)InternalIPCAPI::getInstance(this);
  InternalIPCAPI::add_interface(Instance);
}

void stabilitySettings_t::~stabilitySettings_t(void **this)
{
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    if ((*((char *)this + 87) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[8]);
    return;
  }
  operator delete(this[11]);
  if (*((char *)this + 87) < 0) {
    goto LABEL_5;
  }
}

void HostCmdTask::free_apidata(_OTCTL_CMD_DATA **this)
{
  if (!*this) {
    return;
  }
  switch(*((_DWORD *)this + 3))
  {
    case 1:
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        uint64_t v3 = logging_obg;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_DEFAULT_OTCTL", v95, 2u);
          uint64_t v4 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_174;
        }
        goto LABEL_173;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_173:
        uint64_t v4 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_174;
      }
      PcapManager::start_pcap_capture();
      uint64_t v4 = *this;
      if (*this)
      {
LABEL_174:
        _OTCTL_CMD_DATA::~_OTCTL_CMD_DATA(v4);
        goto LABEL_270;
      }
      return;
    case 2:
      uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v5)
      {
        uint64_t v6 = v5;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_THREAD_START", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (!*this) {
            return;
          }
          goto LABEL_269;
        }
        goto LABEL_176;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_176:
        uint64_t v7 = (uint64_t *)*this;
        if (!*this) {
          return;
        }
        goto LABEL_269;
      }
      PcapManager::start_pcap_capture();
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 3:
      long long v8 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v8)
      {
        uint64_t v9 = v8;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_THREAD_STOP", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (!*this) {
            return;
          }
LABEL_269:
          boost::function<void ()(std::string const&,boost::any const&)>::~function(v7);
LABEL_270:
          operator delete();
        }
LABEL_179:
        uint64_t v7 = (uint64_t *)*this;
        if (!*this) {
          return;
        }
        goto LABEL_269;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_179;
      }
      PcapManager::start_pcap_capture();
      uint64_t v7 = (uint64_t *)*this;
      if (*this) {
        goto LABEL_269;
      }
      return;
    case 4:
      long long v10 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v10)
      {
        uint64_t v11 = v10;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_PROPERTY_GET", v95, 2u);
          std::string v12 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_183;
        }
        goto LABEL_182;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_182:
        std::string v12 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_183;
      }
      PcapManager::start_pcap_capture();
      std::string v12 = *this;
      if (*this)
      {
LABEL_183:
        _PROPERTY_GET_CMD_DATA::~_PROPERTY_GET_CMD_DATA(v12);
        goto LABEL_274;
      }
      return;
    case 5:
      std::string v13 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v13)
      {
        std::string v14 = v13;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_PROPERTY_SET", v95, 2u);
          std::string v15 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_186;
        }
        goto LABEL_185;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_185:
        std::string v15 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_186;
      }
      PcapManager::start_pcap_capture();
      std::string v15 = *this;
      if (*this)
      {
LABEL_186:
        _PROPERTY_SET_CMD_DATA::~_PROPERTY_SET_CMD_DATA(v15);
        goto LABEL_274;
      }
      return;
    case 6:
      std::string v16 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v16)
      {
        std::string v17 = v16;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_SERVICE_ADD", v95, 2u);
          std::string v18 = *this;
          if (!*this) {
            return;
          }
LABEL_189:
          _SERVICE_ADD_CMD_DATA::~_SERVICE_ADD_CMD_DATA(v18);
          goto LABEL_270;
        }
LABEL_188:
        std::string v18 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_189;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_188;
      }
      PcapManager::start_pcap_capture();
      std::string v18 = *this;
      if (*this) {
        goto LABEL_189;
      }
      return;
    case 7:
      std::string v19 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v19)
      {
        std::string v20 = v19;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_SERVICE_REMOVE", v95, 2u);
          std::string v21 = *this;
          if (!*this) {
            return;
          }
LABEL_192:
          _SERVICE_REMOVE_CMD_DATA::~_SERVICE_REMOVE_CMD_DATA(v21);
          goto LABEL_270;
        }
LABEL_191:
        std::string v21 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_192;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_191;
      }
      PcapManager::start_pcap_capture();
      std::string v21 = *this;
      if (*this) {
        goto LABEL_192;
      }
      return;
    case 8:
      std::string v22 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v22)
      {
        uint64_t v23 = v22;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_ROUTE_ADD", v95, 2u);
          int v24 = *this;
          if (!*this) {
            return;
          }
LABEL_195:
          _ROUTE_ADD_CMD_DATA::~_ROUTE_ADD_CMD_DATA(v24);
          goto LABEL_270;
        }
LABEL_194:
        int v24 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_195;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_194;
      }
      PcapManager::start_pcap_capture();
      int v24 = *this;
      if (*this) {
        goto LABEL_195;
      }
      return;
    case 9:
      int v25 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v25)
      {
        int v26 = v25;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_ROUTE_REMOVE", v95, 2u);
          int v27 = *this;
          if (!*this) {
            return;
          }
LABEL_198:
          _ROUTE_REMOVE_CMD_DATA::~_ROUTE_REMOVE_CMD_DATA(v27);
          goto LABEL_270;
        }
LABEL_197:
        int v27 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_198;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_197;
      }
      PcapManager::start_pcap_capture();
      int v27 = *this;
      if (*this) {
        goto LABEL_198;
      }
      return;
    case 0xA:
      int v28 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v28)
      {
        int v29 = v28;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          BOOL v30 = "free_apidata -> HOST_CMD_PREFIX_ADD";
          goto LABEL_56;
        }
        goto LABEL_203;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_203;
      }
      PcapManager::start_pcap_capture();
      BOOL v32 = *this;
      if (*this) {
        goto LABEL_204;
      }
      return;
    case 0xB:
      BOOL v31 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v31)
      {
        int v29 = v31;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          BOOL v30 = "free_apidata -> HOST_CMD_PREFIX_REMOVE";
LABEL_56:
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, v30, v95, 2u);
          BOOL v32 = *this;
          if (!*this) {
            return;
          }
LABEL_204:
          _CONFIG_GATEWAY_CMD_DATA::~_CONFIG_GATEWAY_CMD_DATA(v32);
          operator delete();
        }
LABEL_203:
        BOOL v32 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_204;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_203;
      }
      PcapManager::start_pcap_capture();
      BOOL v32 = *this;
      if (*this) {
        goto LABEL_204;
      }
      return;
    case 0xC:
      BOOL v33 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v33)
      {
        int v34 = v33;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_FORM_THREAD_NETWORK", v95, 2u);
          uint64_t v35 = *this;
          if (!*this) {
            return;
          }
LABEL_207:
          _FORM_NETWORK_CMD_DATA::~_FORM_NETWORK_CMD_DATA(v35);
          goto LABEL_270;
        }
LABEL_206:
        uint64_t v35 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_207;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_206;
      }
      PcapManager::start_pcap_capture();
      uint64_t v35 = *this;
      if (*this) {
        goto LABEL_207;
      }
      return;
    case 0xD:
      uint64_t v36 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v36)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
          uint64_t v35 = *this;
          if (*this) {
            goto LABEL_207;
          }
          return;
        }
LABEL_209:
        uint64_t v35 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_207;
      }
      uint64_t v37 = v36;
      if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v37, OS_LOG_TYPE_INFO)) {
        goto LABEL_209;
      }
      *(_WORD *)std::string::value_type v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_JOIN_THREAD_NETWORK", v95, 2u);
      uint64_t v35 = *this;
      if (*this) {
        goto LABEL_207;
      }
      return;
    case 0xE:
      int v38 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v38)
      {
        BOOL v39 = v38;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_LEAVE_THREAD_NETWORK", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0xF:
      uint64_t v40 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v40)
      {
        size_t v41 = v40;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_RECONNECT_THREAD", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0x10:
      uint64_t v42 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v42)
      {
        char v43 = v42;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_INITIALIZE", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0x11:
      uint64_t v44 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v44)
      {
        __int16 v45 = v44;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_RESET", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0x13:
      __int16 v55 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v55)
      {
        std::string v56 = v55;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          __int16 v57 = "free_apidata -> HOST_CMD_DATASET_UPDATE";
          goto LABEL_125;
        }
        goto LABEL_244;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_244;
      }
      PcapManager::start_pcap_capture();
      if (!*this) {
        return;
      }
      goto LABEL_245;
    case 0x14:
      int v58 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v58)
      {
        std::string v59 = v58;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_STATUS", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0x15:
      std::string v60 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v60)
      {
        __int16 v61 = v60;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_NET_SCAN", v95, 2u);
          std::string::value_type v62 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_239;
        }
LABEL_232:
        std::string::value_type v62 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_239;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_232;
      }
      PcapManager::start_pcap_capture();
      std::string::value_type v62 = *this;
      if (!*this) {
        return;
      }
      goto LABEL_239;
    case 0x16:
      __int16 v63 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v63)
      {
        int v64 = v63;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_DISCOVER_SCAN", v95, 2u);
          std::string::value_type v62 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_239;
        }
LABEL_235:
        std::string::value_type v62 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_239;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_235;
      }
      PcapManager::start_pcap_capture();
      std::string::value_type v62 = *this;
      if (!*this) {
        return;
      }
      goto LABEL_239;
    case 0x17:
      std::string::value_type v65 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v65)
      {
        int v66 = v65;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_ENERGY_SCAN", v95, 2u);
          std::string::value_type v62 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_239;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        std::string::value_type v62 = *this;
        if (!*this) {
          return;
        }
LABEL_239:
        _NET_SCAN_CMD_DATA::~_NET_SCAN_CMD_DATA(v62);
        goto LABEL_270;
      }
      std::string::value_type v62 = *this;
      if (!*this) {
        return;
      }
      goto LABEL_239;
    case 0x18:
      __int16 v67 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v67)
      {
        std::string::value_type v68 = v67;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_GEN_PSKC", v95, 2u);
          std::string::size_type v69 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_242;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        std::string::size_type v69 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_242;
      }
      std::string::size_type v69 = *this;
      if (!*this) {
        return;
      }
LABEL_242:
      _GENERATE_PSKC_CMD_DATA::~_GENERATE_PSKC_CMD_DATA(v69);
      goto LABEL_274;
    case 0x19:
      int v70 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v70)
      {
        std::string v56 = v70;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          __int16 v57 = "free_apidata -> HOST_CMD_GET_RCP_CRASH_DUMP";
LABEL_125:
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, v57, v95, 2u);
          if (!*this) {
            return;
          }
          goto LABEL_245;
        }
LABEL_244:
        if (!*this) {
          return;
        }
        goto LABEL_245;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_244;
      }
      PcapManager::start_pcap_capture();
      if (!*this) {
        return;
      }
LABEL_245:
      operator delete();
    case 0x1A:
      __int16 v71 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v71)
      {
        std::string::value_type v72 = v71;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_PEEK", v95, 2u);
          std::string::size_type v73 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_248;
        }
LABEL_247:
        std::string::size_type v73 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_248;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_247;
      }
      PcapManager::start_pcap_capture();
      std::string::size_type v73 = *this;
      if (!*this) {
        return;
      }
      goto LABEL_248;
    case 0x1B:
      int v74 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v74)
      {
        __int16 v75 = v74;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_RCP_INIT", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0x1C:
      std::string::value_type v76 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v76)
      {
        std::string::size_type v77 = v76;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_CFG_TDM", v95, 2u);
          v78 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_254;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        v78 = *this;
        if (!*this) {
          return;
        }
LABEL_254:
        SendDiagnosticsCmdData::~SendDiagnosticsCmdData(v78);
        goto LABEL_270;
      }
      v78 = *this;
      if (!*this) {
        return;
      }
      goto LABEL_254;
    case 0x1E:
      v79 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v79)
      {
        std::string::value_type v80 = v79;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_REPORT_CRASH_INFO", v95, 2u);
          std::string::size_type v73 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_248;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        std::string::size_type v73 = *this;
        if (!*this) {
          return;
        }
LABEL_248:
        _PEEK_CMD_DATA::~_PEEK_CMD_DATA(v73);
        goto LABEL_270;
      }
      std::string::size_type v73 = *this;
      if (!*this) {
        return;
      }
      goto LABEL_248;
    case 0x1F:
      std::string::size_type v81 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v81)
      {
        v82 = v81;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_UPDATE_PRIMARY_RESIDENT", v95, 2u);
          v83 = (uint64_t *)*this;
          if (!*this) {
            return;
          }
          goto LABEL_260;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        v83 = (uint64_t *)*this;
        if (!*this) {
          return;
        }
        goto LABEL_260;
      }
      v83 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
LABEL_260:
      boost::function<void ()(std::string const&,boost::any const&)>::~function(v83);
      goto LABEL_274;
    case 0x23:
      std::string::value_type v84 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v84)
      {
        std::string::size_type v85 = v84;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_DIAG_GET_DEVICE_DATA", v95, 2u);
          v86 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_263;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        v86 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_263;
      }
      v86 = *this;
      if (!*this) {
        return;
      }
LABEL_263:
      _DIAG_GET_DEVICE_DATA_CMD_DATA::~_DIAG_GET_DEVICE_DATA_CMD_DATA(v86);
      goto LABEL_274;
    case 0x25:
      v87 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v87)
      {
        std::string::value_type v88 = v87;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_WED_START", v95, 2u);
          std::string::size_type v89 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_266;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        std::string::size_type v89 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_266;
      }
      std::string::size_type v89 = *this;
      if (!*this) {
        return;
      }
LABEL_266:
      _PEEK_CMD_DATA::~_PEEK_CMD_DATA(v89);
      goto LABEL_274;
    case 0x26:
      v90 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v90)
      {
        v91 = v90;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_WED_STOP", v95, 2u);
          uint64_t v7 = (uint64_t *)*this;
          if (*this) {
            goto LABEL_269;
          }
          return;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        uint64_t v7 = (uint64_t *)*this;
        if (*this) {
          goto LABEL_269;
        }
        return;
      }
      uint64_t v7 = (uint64_t *)*this;
      if (!*this) {
        return;
      }
      goto LABEL_269;
    case 0x28:
      std::string::value_type v92 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v92)
      {
        v93 = v92;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string::value_type v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_INFO, "free_apidata -> HOST_CMD_UPDATE_ACCESSORY_ADDR", v95, 2u);
          v94 = *this;
          if (!*this) {
            return;
          }
          goto LABEL_273;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
        v94 = *this;
        if (!*this) {
          return;
        }
        goto LABEL_273;
      }
      v94 = *this;
      if (!*this) {
        return;
      }
LABEL_273:
      _UPDATE_ACCESSORY_ADDR_DATA::~_UPDATE_ACCESSORY_ADDR_DATA(v94);
LABEL_274:
      operator delete();
    default:
      uint64_t v46 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v46)
      {
        uint64_t v47 = v46;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
          HostCmdTask::free_apidata(v47, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
      }
      return;
  }
}

void _OTCTL_CMD_DATA::~_OTCTL_CMD_DATA(_OTCTL_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 201);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 1616, (char *)this + 1616, 2);
      }
    }
    *((void *)this + 201) = 0;
  }
}

void _PROPERTY_GET_CMD_DATA::~_PROPERTY_GET_CMD_DATA(_PROPERTY_GET_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 32, (char *)this + 32, 2);
      }
    }
    *((void *)this + 3) = 0;
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void _PROPERTY_SET_CMD_DATA::~_PROPERTY_SET_CMD_DATA(_PROPERTY_SET_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 40, (char *)this + 40, 2);
      }
    }
    *((void *)this + 4) = 0;
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void _SERVICE_ADD_CMD_DATA::~_SERVICE_ADD_CMD_DATA(_SERVICE_ADD_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 64);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 520, (char *)this + 520, 2);
      }
    }
    *((void *)this + 64) = 0;
  }
}

void _SERVICE_REMOVE_CMD_DATA::~_SERVICE_REMOVE_CMD_DATA(_SERVICE_REMOVE_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 33);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 272, (char *)this + 272, 2);
      }
    }
    *((void *)this + 33) = 0;
  }
}

void _ROUTE_ADD_CMD_DATA::~_ROUTE_ADD_CMD_DATA(_ROUTE_ADD_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 40, (char *)this + 40, 2);
      }
    }
    *((void *)this + 4) = 0;
  }
}

void _ROUTE_REMOVE_CMD_DATA::~_ROUTE_REMOVE_CMD_DATA(_ROUTE_REMOVE_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 32, (char *)this + 32, 2);
      }
    }
    *((void *)this + 3) = 0;
  }
}

void _CONFIG_GATEWAY_CMD_DATA::~_CONFIG_GATEWAY_CMD_DATA(_CONFIG_GATEWAY_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 64, (char *)this + 64, 2);
      }
    }
    *((void *)this + 7) = 0;
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

void _UPDATE_ACCESSORY_ADDR_DATA::~_UPDATE_ACCESSORY_ADDR_DATA(_UPDATE_ACCESSORY_ADDR_DATA *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 80, (char *)this + 80, 2);
      }
    }
    *((void *)this + 9) = 0;
  }
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_12:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_12;
  }
}

void _FORM_NETWORK_CMD_DATA::~_FORM_NETWORK_CMD_DATA(_FORM_NETWORK_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 40, (char *)this + 40, 2);
      }
    }
    *((void *)this + 4) = 0;
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void _NET_SCAN_CMD_DATA::~_NET_SCAN_CMD_DATA(_NET_SCAN_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 32, (char *)this + 32, 2);
      }
    }
    *((void *)this + 3) = 0;
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void _GENERATE_PSKC_CMD_DATA::~_GENERATE_PSKC_CMD_DATA(_GENERATE_PSKC_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 56, (char *)this + 56, 2);
      }
    }
    *((void *)this + 6) = 0;
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void _PEEK_CMD_DATA::~_PEEK_CMD_DATA(_PEEK_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 16, (char *)this + 16, 2);
      }
    }
    *((void *)this + 1) = 0;
  }
}

void SendDiagnosticsCmdData::~SendDiagnosticsCmdData(SendDiagnosticsCmdData *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 48, (char *)this + 48, 2);
      }
    }
    *((void *)this + 5) = 0;
  }
}

void _DIAG_GET_DEVICE_DATA_CMD_DATA::~_DIAG_GET_DEVICE_DATA_CMD_DATA(_DIAG_GET_DEVICE_DATA_CMD_DATA *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(char *, char *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((char *)this + 56, (char *)this + 56, 2);
      }
    }
    *((void *)this + 6) = 0;
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

BOOL TaskQueueWrapper::empty(TaskQueueWrapper *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  BOOL v3 = *((void *)this + 2) == 0;
  std::mutex::unlock(v2);
  return v3;
}

void TaskQueueWrapper::pop_front(TaskQueueWrapper *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v5 = *v4;
  *(void *)(v5 + 8) = v4[1];
  *(void *)v4[1] = v5;
  *((void *)this + 2) = v3 - 1;
  uint64_t v6 = (atomic_uint *)v4[3];
  if (v6)
  {
    if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
      if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
      }
    }
  }
  operator delete(v4);

  std::mutex::unlock(v2);
}

void TaskQueueWrapper::push_back(uint64_t *a1, void *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v5 = operator new(0x20uLL);
  uint64_t v6 = a2[1];
  v5[2] = *a2;
  void v5[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  void *v5 = *a1;
  v5[1] = a1;
  *(void *)(v7 + 8) = v5;
  *a1 = (uint64_t)v5;
  ++a1[2];
  write(dword_1004B620C, "x", 1uLL);

  std::mutex::unlock(v4);
}

void sub_1000CA2D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TaskQueueWrapper::front(TaskQueueWrapper *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v5 = *((void *)this + 1);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(void *)(v5 + 24);
  *a2 = v7;
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }

  std::mutex::unlock(v4);
}

void RcpHostContext::RcpHostContext(RcpHostContext *this)
{
  *(void *)this = this;
  *((void *)this + 1) = this;
  *((_OWORD *)this + 1) = xmmword_1003F4520;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 88;
  *(_OWORD *)((char *)this + 104) = xmmword_1003F4520;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = off_100496420;
  operator new();
}

void sub_1000CA75C()
{
}

void sub_1000CA8B4()
{
}

void sub_1000CA8BC()
{
}

void sub_1000CA8C4()
{
}

void sub_1000CA8CC(_Unwind_Exception *a1)
{
  TaskQueueWrapper::~TaskQueueWrapper(v2);
  TaskQueueWrapper::~TaskQueueWrapper(v1);
  _Unwind_Resume(a1);
}

double RcpHostContext::clear_leader_reelect_counters(RcpHostContext *this)
{
  double result = 0.0;
  *((_OWORD *)this + 59) = 0u;
  return result;
}

void *boost::signals2::signal<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_1004967A0;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_1004966D0;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_100496600;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_100496420;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void TaskQueueWrapper::~TaskQueueWrapper(TaskQueueWrapper *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  if (*((void *)this + 2))
  {
    uint64_t v2 = *(void *)this;
    uint64_t v3 = (TaskQueueWrapper *)*((void *)this + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)this + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)this + 2) = 0;
    if (v3 != this)
    {
      do
      {
        uint64_t v5 = (TaskQueueWrapper *)*((void *)v3 + 1);
        uint64_t v6 = (atomic_uint *)*((void *)v3 + 3);
        if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
          if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != this);
    }
  }
}

void RcpHostContext::Initialize(RcpHostContext *this)
{
}

void sub_1000CAD54()
{
}

void RcpHostContext::signalNodeStatusChange(RcpHostContext *this)
{
  char v2 = 16;
  strcpy(__p, "Network:NodeType");
  operator new();
}

void sub_1000CAE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::add_cmd_PropertyGetNotif ()
{
}

void sub_1000CAFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000CAFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::Get_EventPropertyGetCmdData()
{
}

void RcpHostContext::persistDefaultChildNode(RcpHostContext *this, int a2)
{
  if (a2) {
    char v2 = "1";
  }
  else {
    char v2 = "0";
  }
  saveStringValue("defaultChildNode", v2);
}

void RcpHostContext::persistGeoAvailable(RcpHostContext *this, int a2)
{
  if (a2) {
    char v2 = "1";
  }
  else {
    char v2 = "0";
  }
  saveStringValue("geo", v2);
}

long long *RcpHostContext::getDefaultChildNodeFlag(RcpHostContext *this)
{
  double result = getStringValue("defaultChildNode");
  if (result) {
    return (long long *)(atoi((const char *)result) == 1);
  }
  return result;
}

long long *RcpHostContext::getPersistedGeoAvailableFlag(RcpHostContext *this)
{
  double result = getStringValue("geo");
  if (result) {
    return (long long *)(atoi((const char *)result) == 1);
  }
  return result;
}

void RcpHostContext::persistWedSession(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v3 = a3;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_5;
    }
LABEL_7:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v6 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = (const char *)a2;
        if (*(char *)(a2 + 23) < 0) {
          uint64_t v7 = *(const char **)a2;
        }
        long long v8 = v3;
        if (v3[23] < 0) {
          long long v8 = *(const char **)v3;
        }
        int v11 = 136315650;
        std::string v12 = "persistWedSession";
        __int16 v13 = 2080;
        std::string v14 = v7;
        __int16 v15 = 2080;
        std::string v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s wedAddr = %s wedmleid = %s", (uint8_t *)&v11, 0x20u);
      }
      goto LABEL_17;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
LABEL_16:
    PcapManager::start_pcap_capture();
    goto LABEL_17;
  }
  if (*(unsigned char *)(a2 + 23)) {
    goto LABEL_7;
  }
LABEL_5:
  if (a3[23] < 0)
  {
    if (*((void *)a3 + 1)) {
      goto LABEL_7;
    }
  }
  else if (a3[23])
  {
    goto LABEL_7;
  }
  uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v9)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  long long v10 = v9;
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(v11) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "wedAddr & wedmleid empty String", (uint8_t *)&v11, 2u);
  }
LABEL_17:
  if (*(char *)(a2 + 23) < 0)
  {
    saveStringValue("wedSession", *(const char **)a2);
    if ((v3[23] & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_21:
    uint64_t v3 = *(const char **)v3;
    goto LABEL_19;
  }
  saveStringValue("wedSession", (const char *)a2);
  if (v3[23] < 0) {
    goto LABEL_21;
  }
LABEL_19:
  saveStringValue("wedSession_mleid", v3);
}

void RcpHostContext::getPersistedWedMleid(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  StringValue = getStringValue("wedSession_mleid");
  uint64_t v4 = (const std::string::value_type *)StringValue;
  if (StringValue)
  {
    int v5 = *(unsigned __int8 *)StringValue;
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    uint64_t v7 = logging_obg;
    if (v5)
    {
      if (logging_obg)
      {
        if (syslog_is_the_mask_enabled(6))
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            int v8 = 136315394;
            uint64_t v9 = "getPersistedWedMleid";
            __int16 v10 = 2080;
            int v11 = v4;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s wedMleid = %s", (uint8_t *)&v8, 0x16u);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
      }
      std::string::assign(a1, v4);
    }
    else if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        uint64_t v9 = "getPersistedWedMleid";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s wedMleid empty String", (uint8_t *)&v8, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
  }
}

void sub_1000CB500(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::getPersistedWedAddr(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  StringValue = getStringValue("wedSession");
  uint64_t v4 = (const std::string::value_type *)StringValue;
  if (StringValue)
  {
    int v5 = *(unsigned __int8 *)StringValue;
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    uint64_t v7 = logging_obg;
    if (v5)
    {
      if (logging_obg)
      {
        if (syslog_is_the_mask_enabled(6))
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            int v8 = 136315394;
            uint64_t v9 = "getPersistedWedAddr";
            __int16 v10 = 2080;
            int v11 = v4;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s wedAddr = %s", (uint8_t *)&v8, 0x16u);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
      }
      std::string::assign(a1, v4);
    }
    else if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        uint64_t v9 = "getPersistedWedAddr";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s wedAddr empty String", (uint8_t *)&v8, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
  }
}

void sub_1000CB6C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RcpHostContext::isWedSessionEnabled(RcpHostContext *this)
{
  StringValue = getStringValue("wedSession");
  if (!StringValue) {
    return 0;
  }
  char v2 = StringValue;
  int v3 = *(unsigned __int8 *)StringValue;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  int v5 = logging_obg;
  if (!v3)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
          return 0;
        }
        int v8 = 136315138;
        uint64_t v9 = "isWedSessionEnabled";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s wedAddr empty String", (uint8_t *)&v8, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    return 0;
  }
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      PcapManager::start_pcap_capture();
    }
    return 1;
  }
  if (!syslog_is_the_mask_enabled(6)) {
    return 1;
  }
  uint64_t v6 = 1;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "isWedSessionEnabled";
    __int16 v10 = 2080;
    int v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s wedAddr = %s", (uint8_t *)&v8, 0x16u);
  }
  return v6;
}

BOOL RcpHostContext::isStateMachineEnabled(RcpHostContext *this)
{
  int isStateMachineEnabled = *((unsigned __int8 *)this + 449);
  if (isStateMachineEnabled == 255)
  {
    int isStateMachineEnabled = getBoolValue_isStateMachineEnabled();
    *((unsigned char *)this + 449) = isStateMachineEnabled;
  }
  return isStateMachineEnabled == 1;
}

BOOL RcpHostContext::isAudioNoThreadFeatureEnabled(RcpHostContext *this)
{
  int isAudioNoThreadFeatureEnabled = *((unsigned __int8 *)this + 451);
  if (isAudioNoThreadFeatureEnabled == 255)
  {
    int isAudioNoThreadFeatureEnabled = getBoolValue_isAudioNoThreadFeatureEnabled();
    *((unsigned char *)this + 451) = isAudioNoThreadFeatureEnabled;
  }
  return isAudioNoThreadFeatureEnabled == 1;
}

BOOL RcpHostContext::isThreadAlwaysOnFeatureEnabled(RcpHostContext *this)
{
  int isThreadAlwaysOnFeatureEnabled = *((unsigned __int8 *)this + 450);
  if (isThreadAlwaysOnFeatureEnabled == 255)
  {
    int isThreadAlwaysOnFeatureEnabled = getBoolValue_isThreadAlwaysOnFeatureEnabled();
    *((unsigned char *)this + 450) = isThreadAlwaysOnFeatureEnabled;
  }
  return isThreadAlwaysOnFeatureEnabled == 1;
}

long long *RcpHostContext::ot_event_handler(RcpHostContext *this, uint64_t a2)
{
  int v4 = *((unsigned __int8 *)this + 448);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v6 = logging_obg;
  if (!v4)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ot_event_handler: INITIALIZE", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)this + 448) = 1;
    operator new();
  }
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ot_event_handler flags[0x%llx]", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  if ((a2 & 0x4000) != 0)
  {
    uint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v7)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_THREAD_CHANNEL", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__str, "NCP:Channel");
    operator new();
  }
  if ((a2 & 0x80) != 0)
  {
    int v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_THREAD_PARTITION_ID", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&v34, "Network:PartitionId");
    operator new();
  }
  if ((a2 & 4) != 0)
  {
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_THREAD_ROLE", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)&v33.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v33, "Network:NodeType");
    operator new();
  }
  if ((a2 & 0x200) == 0) {
    goto LABEL_72;
  }
  std::mutex::lock((std::mutex *)((char *)this + 360));
  nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
  std::mutex::unlock((std::mutex *)((char *)this + 360));
  if ((buf[23] & 0x80000000) == 0)
  {
    if (buf[23] == 10)
    {
      __int16 v10 = buf;
      goto LABEL_45;
    }
LABEL_53:
    BOOL v14 = 0;
    if ((a2 & 4) != 0) {
      goto LABEL_60;
    }
    goto LABEL_54;
  }
  if (*(void *)&buf[8] != 10) {
    goto LABEL_53;
  }
  __int16 v10 = *(unsigned char **)buf;
LABEL_45:
  uint64_t v11 = *(void *)v10;
  int v12 = *((unsigned __int16 *)v10 + 4);
  BOOL v14 = v11 == 0x746169636F737361 && v12 == 25701;
  if ((a2 & 4) != 0)
  {
LABEL_60:
    std::string v16 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        std::string v17 = buf;
        if (buf[23] < 0) {
          std::string v17 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v36 = 136315138;
        *(void *)&v36[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_THREAD_NETDATA(state: %s)", v36, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v32, "Thread:Services");
    operator new();
  }
LABEL_54:
  if (v14) {
    goto LABEL_60;
  }
  __int16 v15 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v15)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      PcapManager::start_pcap_capture();
    }
LABEL_71:
    if ((buf[23] & 0x80000000) != 0) {
      goto LABEL_93;
    }
LABEL_72:
    if ((a2 & 0x10000000) == 0) {
      goto LABEL_80;
    }
LABEL_73:
    std::string v18 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v18)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_ACTIVE_DATASET", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    operator new();
  }
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
    goto LABEL_71;
  }
  *(_WORD *)uint64_t v36 = 0;
  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_THREAD_NETDATA(state: Not Associated)", v36, 2u);
  if ((buf[23] & 0x80000000) == 0) {
    goto LABEL_72;
  }
LABEL_93:
  operator delete(*(void **)buf);
  if ((a2 & 0x10000000) != 0) {
    goto LABEL_73;
  }
LABEL_80:
  if ((a2 & 0x20000000) != 0)
  {
    std::string v19 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v19)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "EVENT::OT_CHANGED_PENDING_DATASET", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    operator new();
  }
  double result = getStringValue("threadSession");
  if (result)
  {
    double result = (long long *)strcmp((const char *)result, "ON");
    if (!result)
    {
      double result = (long long *)*((unsigned __int8 *)this + 449);
      if (result == 255)
      {
        double result = (long long *)getBoolValue_isStateMachineEnabled();
        *((unsigned char *)this + 449) = (_BYTE)result;
        if (result != 1) {
          return result;
        }
      }
      else if (result != 1)
      {
        return result;
      }
      if ((a2 & 0x400000000) != 0)
      {
        std::string v21 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v21)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_PERIPHERAL_SLEEPY_DEVICE_TYPE", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        buf[23] = 20;
        strcpy(buf, "PeripheralDeviceType");
        operator new();
      }
      if ((a2 & 0x800000000) != 0)
      {
        std::string v22 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v22)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_PERIPHERAL_NON_SLEEPY_DEVICE_TYPE", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        buf[23] = 20;
        strcpy(buf, "PeripheralDeviceType");
        operator new();
      }
      if ((a2 & 0x400) != 0)
      {
        uint64_t v23 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v23)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_THREAD_CHILD_ADDED", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        *(void *)std::string buf = operator new(0x20uLL);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1003F3040;
        strcpy(*(char **)buf, "TNMWakeOnDeviceConnectionStatus");
        operator new();
      }
      if ((a2 & 0x800) != 0)
      {
        int v24 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v24)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_THREAD_CHILD_REMOVED", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        *(void *)std::string buf = operator new(0x20uLL);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1003F3040;
        strcpy(*(char **)buf, "TNMWakeOnDeviceConnectionStatus");
        operator new();
      }
      if ((a2 & 0x1000000000) != 0)
      {
        int v25 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v25)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_PERIPHERAL_WAKEUP_MAX_RETRY_ATTEMPTS_EXCEEDED", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        *(void *)std::string buf = operator new(0x20uLL);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1003F3040;
        strcpy(*(char **)buf, "TNMWakeOnDeviceConnectionStatus");
        operator new();
      }
      if ((a2 & 0x200000000) != 0)
      {
        std::mutex::lock((std::mutex *)((char *)this + 360));
        nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
        std::mutex::unlock((std::mutex *)((char *)this + 360));
        int v26 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v26)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            int v27 = buf;
            if (buf[23] < 0) {
              int v27 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v36 = 136315138;
            *(void *)&v36[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_RECEIVED_ADV(state: %s)", v36, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        v36[23] = 11;
        strcpy(v36, "ReceivedAdv");
        operator new();
      }
      if ((a2 & 0x100000000) != 0)
      {
        std::mutex::lock((std::mutex *)((char *)this + 360));
        nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
        std::mutex::unlock((std::mutex *)((char *)this + 360));
        int v28 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v28)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            int v29 = buf;
            if (buf[23] < 0) {
              int v29 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v36 = 136315138;
            *(void *)&v36[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_ATTACH_ATTEMPT_FAIL(state: %s)", v36, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        *(void *)uint64_t v36 = operator new(0x20uLL);
        *(_OWORD *)&v36[8] = xmmword_1003F3010;
        strcpy(*(char **)v36, "AttachRetryAttemptsComplete");
        operator new();
      }
      if ((a2 & 0x80000000) != 0)
      {
        std::mutex::lock((std::mutex *)((char *)this + 360));
        nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
        std::mutex::unlock((std::mutex *)((char *)this + 360));
        BOOL v30 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v30)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            BOOL v31 = buf;
            if (buf[23] < 0) {
              BOOL v31 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v36 = 136315138;
            *(void *)&v36[4] = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "ThreadConnection: EVENT::OT_CHANGED_ATTACH_ATTEMPT_SUCCESS(state: %s)", v36, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        *(void *)uint64_t v36 = operator new(0x20uLL);
        *(_OWORD *)&v36[8] = xmmword_1003F3010;
        strcpy(*(char **)v36, "AttachRetryAttemptsComplete");
        operator new();
      }
    }
  }
  return result;
}

void sub_1000CCEE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

void RcpHostContext::add_cmd_RcpInit()
{
}

void sub_1000CD23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000CD250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_Initialize()
{
}

void sub_1000CD3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000CD3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_PropertyGet()
{
}

void sub_1000CD54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000CD560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::get_rcp_state(RcpHostContext *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (std::mutex *)((char *)this + 360);
  std::mutex::lock((std::mutex *)((char *)this + 360));
  nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), a2);

  std::mutex::unlock(v4);
}

void sub_1000CD5D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_DatasetUpdate()
{
}

void sub_1000CD744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000CD758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::get_rcp_role(RcpHostContext *this@<X0>, std::string *a2@<X8>)
{
  int v4 = (std::mutex *)((char *)this + 360);
  std::mutex::lock((std::mutex *)((char *)this + 360));
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 53), *((void *)this + 54));
    int v5 = v4;
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 55);
    int v5 = v4;
  }
  std::mutex::unlock(v5);
}

void sub_1000CD80C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void RcpHostContext::update_rcp_role(uint64_t a1, const std::string *a2)
{
  int v4 = (std::mutex *)(a1 + 360);
  std::mutex::lock((std::mutex *)(a1 + 360));
  std::string::operator=((std::string *)(a1 + 424), a2);

  std::mutex::unlock(v4);
}

void sub_1000CD878(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void RcpHostContext::trigger_leader_override(RcpHostContext *this)
{
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__str, "LeaderOverride");
  operator new();
}

void sub_1000CD968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::getRcpSettingsParams(RcpHostContext *this, signed __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, BOOL *a5, unsigned int *a6, unsigned int *a7, BOOL *a8, BOOL *a9, signed __int8 *a10, unsigned __int8 *a11, unsigned __int8 *a12, unsigned __int8 *a13, unsigned __int8 *a14, unsigned __int8 *a15)
{
  char v17 = 11;
  __int16 v15 = buf;
  strcpy((char *)buf, "NCP:TXPower");
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
  operator new();
}

void sub_1000CEC64()
{
}

void RcpHostContext::getRcpStateDump(RcpHostContext *this)
{
  char v2 = 21;
  strcpy(__p, "vendor:ncp:state:dump");
  operator new();
}

void sub_1000CF398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::update_rcp_state(uint64_t a1, int a2)
{
  int v4 = (std::mutex *)(a1 + 360);
  std::mutex::lock((std::mutex *)(a1 + 360));
  if ((a2 - 2) < 3)
  {
    uint64_t v5 = 8;
    if (*(_DWORD *)(a1 + 352) == 8) {
      goto LABEL_20;
    }
LABEL_11:
    *(_DWORD *)(a1 + 352) = v5;
    nl::wpantund::ncp_state_to_string((char *)v5, (uint64_t)__p);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = __p;
        if (v9 < 0) {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "New RCP state:: %s", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    buf[23] = 9;
    strcpy((char *)buf, "NCP:State");
    operator new();
  }
  if (a2 == 1)
  {
    *(_WORD *)(a1 + 797) = 0;
    uint64_t v5 = 6;
    if (*(_DWORD *)(a1 + 352) == 6) {
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  if (!a2)
  {
    *(_WORD *)(a1 + 797) = 0;
    uint64_t v5 = 4;
    if (*(_DWORD *)(a1 + 352) == 4) {
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  uint64_t v5 = 1;
  if (*(_DWORD *)(a1 + 352) != 1) {
    goto LABEL_11;
  }
LABEL_20:
  std::mutex::unlock(v4);
}

void sub_1000CF654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t RcpHostContext::resetReportNetworkDataServiceInfo(uint64_t this)
{
  *(unsigned char *)(this + 797) = 0;
  return this;
}

uint64_t RcpHostContext::resetReportNetworkDataIPV6RouteInfo(uint64_t this)
{
  *(unsigned char *)(this + 798) = 0;
  return this;
}

void RcpHostContext::reportThreadServicesToClient(RcpHostContext *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = *((_DWORD *)this + 88);
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "reportThreadServicesToClient";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %d", buf, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
  if ((v18 & 0x80000000) == 0)
  {
    if (v18 != 10) {
      goto LABEL_32;
    }
    if (*(void *)buf != 0x746169636F737361 || *(unsigned __int16 *)&buf[8] != 25701) {
      goto LABEL_32;
    }
LABEL_23:
    *(_WORD *)((char *)this + 797) = 257;
    int v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
        char v9 = v18 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)__int16 v13 = 136315394;
        BOOL v14 = "reportThreadServicesToClient";
        __int16 v15 = 2080;
        std::string v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s %s: Notify thread services & IPV6 routes to SRP client", v13, 0x16u);
        if (v18 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&__str, "Thread:Services");
    operator new();
  }
  if (*(void *)&buf[8] != 10)
  {
    operator delete(*(void **)buf);
    goto LABEL_32;
  }
  BOOL v7 = **(void **)buf != 0x746169636F737361 || *(_WORD *)(*(void *)buf + 8) != 25701;
  operator delete(*(void **)buf);
  if (!v7) {
    goto LABEL_23;
  }
LABEL_32:
  __int16 v10 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
      if (v18 >= 0) {
        uint64_t v11 = buf;
      }
      else {
        uint64_t v11 = *(unsigned char **)buf;
      }
      *(_DWORD *)__int16 v13 = 136315394;
      BOOL v14 = "reportThreadServicesToClient";
      __int16 v15 = 2080;
      std::string v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s %s(state: Not Associated)", v13, 0x16u);
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_1000CFB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::report_threadstart_metrics(uint64_t a1, int a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 800);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v6 = logging_obg;
  if (v4)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.tv_sec) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "report_threadstart_metrics", (uint8_t *)&buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    uint64_t v7 = gettimeofday(&buf, &v15);
    int tv_sec = buf.tv_sec;
    __darwin_suseconds_t tv_usec = buf.tv_usec;
    uint64_t v10 = 274877907 * (buf.tv_usec - *(_DWORD *)(a1 + 832));
    *(_DWORD *)(a1 + 856) = (v10 >> 38)
                          + ((unint64_t)v10 >> 63)
                          + 1000 * (LODWORD(buf.tv_sec) - *(_DWORD *)(a1 + 824));
    int v11 = tv_sec - *(_DWORD *)(a1 + 808);
    uint64_t v12 = 274877907 * (tv_usec - *(_DWORD *)(a1 + 816));
    *(_DWORD *)(a1 + 860) = (v12 >> 38) + ((unint64_t)v12 >> 63) + 1000 * v11;
    switch(a2)
    {
      case 4:
        *(unsigned char *)(a1 + 867) = 1;
        break;
      case 3:
        *(unsigned char *)(a1 + 868) = 1;
        break;
      case 2:
        *(unsigned char *)(a1 + 869) = 1;
        break;
    }
    RcpHostContext::print_threadstart_metrics(v7, a1 + 800);
    analytics_send_event_lazy();
    long long v13 = *(_OWORD *)(a1 + 848);
    *(_OWORD *)(a1 + 904) = *(_OWORD *)(a1 + 832);
    *(_OWORD *)(a1 + 920) = v13;
    *(void *)(a1 + 936) = *(void *)(a1 + 864);
    long long v14 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a1 + 872) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 888) = v14;
    RcpHostContext::clear_threadstart_metrics((RcpHostContext *)a1);
  }
  else if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.tv_sec) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "report_threadstart_metrics NOT IN PROGRESS", (uint8_t *)&buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void RcpHostContext::print_threadstart_metrics(uint64_t a1, uint64_t a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v4 = logging_obg;
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(a2 + 48);
        int v6 = *(_DWORD *)(a2 + 52);
        int v7 = *(_DWORD *)(a2 + 56);
        int v8 = *(_DWORD *)(a2 + 60);
        int v9 = *(unsigned __int8 *)(a2 + 64);
        int v10 = *(unsigned __int8 *)(a2 + 65);
        int v11 = *(unsigned __int8 *)(a2 + 66);
        int v12 = *(unsigned __int8 *)(a2 + 69);
        int v13 = *(unsigned __int8 *)(a2 + 68);
        int v14 = *(unsigned __int8 *)(a2 + 67);
        v15[0] = 67111424;
        v15[1] = v5;
        __int16 v16 = 1024;
        int v17 = v6;
        __int16 v18 = 1024;
        int v19 = v7;
        __int16 v20 = 1024;
        int v21 = v8;
        __int16 v22 = 1024;
        int v23 = v9;
        __int16 v24 = 1024;
        int v25 = v10;
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 1024;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v13;
        __int16 v32 = 1024;
        int v33 = v14;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "print_threadstart_metrics: pf_time[%u] ts_time[%u] radio_time[%u] total_time_ms[%u] pref_nw_found[%d] attach_with_uuid[%d] new_network[%d] E[%d] R[%d] L[%d]", (uint8_t *)v15, 0x3Eu);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

xpc_object_t ___ZN14RcpHostContext26report_threadstart_metricsE12otDeviceRole_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "total_time_ms", *(unsigned int *)(v1 + 860));
  xpc_dictionary_set_uint64(empty, "threadstart_api_time_ms", *(unsigned int *)(v1 + 852));
  xpc_dictionary_set_uint64(empty, "pref_nw_get_time_ms", *(unsigned int *)(v1 + 848));
  xpc_dictionary_set_uint64(empty, "radio_start_time_ms", *(unsigned int *)(v1 + 856));
  xpc_dictionary_set_BOOL(empty, "is_pref_nw_start", *(unsigned char *)(v1 + 864));
  xpc_dictionary_set_BOOL(empty, "is_uuid_nw_start", *(unsigned char *)(v1 + 865));
  xpc_dictionary_set_BOOL(empty, "is_form_new_nw_start", *(unsigned char *)(v1 + 866));
  return empty;
}

void RcpHostContext::clear_threadstart_metrics(RcpHostContext *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "clear_threadstart_metrics", v4, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  *((unsigned char *)this + 800) = 0;
  *((void *)this + 107) = 0;
  *((void *)this + 106) = 0;
  *(void *)((char *)this + 862) = 0;
}

void RcpHostContext::init_threadstart_metrics(RcpHostContext *this)
{
  if (*((unsigned char *)this + 800))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      char v2 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        int v3 = "init_threadstart_metrics  IN PROGRESS";
        int v4 = v2;
        uint32_t v5 = 2;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)&v11, v5);
        return;
      }
      return;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_14:
    PcapManager::start_pcap_capture();
    return;
  }
  RcpHostContext::clear_threadstart_metrics(this);
  *((unsigned char *)this + 800) = 1;
  gettimeofday((timeval *)((char *)this + 808), (char *)this + 840);
  int v7 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v7)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_14;
  }
  int v8 = v7;
  if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *((void *)this + 101);
    int v10 = *((_DWORD *)this + 204);
    int v11 = 134218240;
    uint64_t v12 = v9;
    __int16 v13 = 1024;
    int v14 = v10;
    int v3 = "init_threadstart_metrics StartTime[%ld]s[%d]us";
    int v4 = v8;
    uint32_t v5 = 18;
    goto LABEL_10;
  }
}

void RcpHostContext::init_threadstart_radio_start(RcpHostContext *this)
{
  if (*((unsigned char *)this + 800))
  {
    gettimeofday((timeval *)((char *)this + 824), (char *)this + 840);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      int v3 = logging_obg;
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          uint64_t v4 = *((void *)this + 103);
          int v5 = *((_DWORD *)this + 208);
          int v6 = 134218240;
          uint64_t v7 = v4;
          __int16 v8 = 1024;
          int v9 = v5;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "threadstart_metrics radio_start[%ld]s[%d]us", (uint8_t *)&v6, 0x12u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
  }
}

void RcpHostContext::update_threadstart_metrics(RcpHostContext *this, timeval a2, timeval a3, int a4, int a5)
{
  *((unsigned char *)this + 864) = a4;
  *((unsigned char *)this + 865) = a5;
  if ((a4 & 1) == 0 && (a5 & 1) == 0) {
    *((unsigned char *)this + 866) = 1;
  }
  int v8 = *((_DWORD *)this + 202);
  int v9 = *((_DWORD *)this + 204);
  *((_DWORD *)this + 212) = (a2.tv_usec - v9) / 1000 + 1000 * (LODWORD(a2.tv_sec) - v8);
  *((_DWORD *)this + 213) = (a3.tv_usec - v9) / 1000 + 1000 * (LODWORD(a3.tv_sec) - v8);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v11 = logging_obg;
    if (syslog_is_the_mask_enabled(5))
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = *((_DWORD *)this + 212);
        int v13 = *((_DWORD *)this + 213);
        v14[0] = 67109888;
        v14[1] = a4;
        __int16 v15 = 1024;
        int v16 = a5;
        __int16 v17 = 1024;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "update_threadstart_metrics: preferredFound[%d] attachWithUuid[%d] check_pref_join_time_ms[%u]  total_ts_time_ms[%u]", (uint8_t *)v14, 0x1Au);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

double RcpHostContext::GetThreadStartMetrics(uint64_t a1, uint64_t *a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v5 = logging_obg;
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %u ms", "total_time_ms", *(_DWORD *)(a1 + 932));
  size_t v6 = strlen(__str);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v63 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v63) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_14:
  }
    memcpy(p_dst, __str, v7);
  *((unsigned char *)p_dst + v7) = 0;
  int v11 = operator new(0x28uLL);
  v11[1] = __dst;
  *((void *)v11 + 4) = v63;
  uint64_t v12 = *a2;
  *(void *)int v11 = *a2;
  *((void *)v11 + 1) = a2;
  *(void *)(v12 + 8) = v11;
  *a2 = (uint64_t)v11;
  ++a2[2];
  int v13 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v13)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %u ms", "threadstart_api_time_ms", *(_DWORD *)(a1 + 924));
  size_t v14 = strlen(__str);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    int v16 = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v63 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = v16;
    goto LABEL_28;
  }
  HIBYTE(v63) = v14;
  int v16 = &__dst;
  if (v14) {
LABEL_28:
  }
    memcpy(v16, __str, v15);
  *((unsigned char *)v16 + v15) = 0;
  __int16 v19 = operator new(0x28uLL);
  v19[1] = __dst;
  *((void *)v19 + 4) = v63;
  uint64_t v20 = *a2;
  *(void *)__int16 v19 = *a2;
  *((void *)v19 + 1) = a2;
  *(void *)(v20 + 8) = v19;
  *a2 = (uint64_t)v19;
  ++a2[2];
  int v21 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v21)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %u ms", "radio_start_time_ms", *(_DWORD *)(a1 + 928));
  size_t v22 = strlen(__str);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    __int16 v24 = (long long *)operator new(v25 + 1);
    *((void *)&__dst + 1) = v23;
    unint64_t v63 = v26 | 0x8000000000000000;
    *(void *)&long long __dst = v24;
    goto LABEL_42;
  }
  HIBYTE(v63) = v22;
  __int16 v24 = &__dst;
  if (v22) {
LABEL_42:
  }
    memcpy(v24, __str, v23);
  *((unsigned char *)v24 + v23) = 0;
  int v27 = operator new(0x28uLL);
  v27[1] = __dst;
  *((void *)v27 + 4) = v63;
  uint64_t v28 = *a2;
  *(void *)int v27 = *a2;
  *((void *)v27 + 1) = a2;
  *(void *)(v28 + 8) = v27;
  *a2 = (uint64_t)v27;
  ++a2[2];
  int v29 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v29)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %u ms", "pref_nw_get_time_ms", *(_DWORD *)(a1 + 920));
  size_t v30 = strlen(__str);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    __int16 v32 = (long long *)operator new(v33 + 1);
    *((void *)&__dst + 1) = v31;
    unint64_t v63 = v34 | 0x8000000000000000;
    *(void *)&long long __dst = v32;
    goto LABEL_56;
  }
  HIBYTE(v63) = v30;
  __int16 v32 = &__dst;
  if (v30) {
LABEL_56:
  }
    memcpy(v32, __str, v31);
  *((unsigned char *)v32 + v31) = 0;
  uint64_t v35 = operator new(0x28uLL);
  v35[1] = __dst;
  *((void *)v35 + 4) = v63;
  uint64_t v36 = *a2;
  *(void *)uint64_t v35 = *a2;
  *((void *)v35 + 1) = a2;
  *(void *)(v36 + 8) = v35;
  *a2 = (uint64_t)v35;
  ++a2[2];
  uint64_t v37 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v37)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_pref_nw_start", *(unsigned __int8 *)(a1 + 936));
  size_t v38 = strlen(__str);
  if (v38 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v39 = v38;
  if (v38 >= 0x17)
  {
    uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v41 = v38 | 7;
    }
    uint64_t v42 = v41 + 1;
    uint64_t v40 = (long long *)operator new(v41 + 1);
    *((void *)&__dst + 1) = v39;
    unint64_t v63 = v42 | 0x8000000000000000;
    *(void *)&long long __dst = v40;
    goto LABEL_70;
  }
  HIBYTE(v63) = v38;
  uint64_t v40 = &__dst;
  if (v38) {
LABEL_70:
  }
    memcpy(v40, __str, v39);
  *((unsigned char *)v40 + v39) = 0;
  char v43 = operator new(0x28uLL);
  v43[1] = __dst;
  *((void *)v43 + 4) = v63;
  uint64_t v44 = *a2;
  *(void *)char v43 = *a2;
  *((void *)v43 + 1) = a2;
  *(void *)(v44 + 8) = v43;
  *a2 = (uint64_t)v43;
  ++a2[2];
  __int16 v45 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v45)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_uuid_nw_start", *(unsigned __int8 *)(a1 + 937));
  size_t v46 = strlen(__str);
  if (v46 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v47 = v46;
  if (v46 >= 0x17)
  {
    uint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v49 = v46 | 7;
    }
    uint64_t v50 = v49 + 1;
    uint64_t v48 = (long long *)operator new(v49 + 1);
    *((void *)&__dst + 1) = v47;
    unint64_t v63 = v50 | 0x8000000000000000;
    *(void *)&long long __dst = v48;
    goto LABEL_84;
  }
  HIBYTE(v63) = v46;
  uint64_t v48 = &__dst;
  if (v46) {
LABEL_84:
  }
    memcpy(v48, __str, v47);
  *((unsigned char *)v48 + v47) = 0;
  uint64_t v51 = operator new(0x28uLL);
  v51[1] = __dst;
  *((void *)v51 + 4) = v63;
  uint64_t v52 = *a2;
  *(void *)uint64_t v51 = *a2;
  *((void *)v51 + 1) = a2;
  *(void *)(v52 + 8) = v51;
  *a2 = (uint64_t)v51;
  ++a2[2];
  uint64_t v53 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v53)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
      RcpHostContext::GetThreadStartMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_form_new_nw_start", *(unsigned __int8 *)(a1 + 938));
  size_t v54 = strlen(__str);
  if (v54 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v55 = v54;
  if (v54 >= 0x17)
  {
    uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v57 = v54 | 7;
    }
    uint64_t v58 = v57 + 1;
    std::string v56 = (long long *)operator new(v57 + 1);
    *((void *)&__dst + 1) = v55;
    unint64_t v63 = v58 | 0x8000000000000000;
    *(void *)&long long __dst = v56;
  }
  else
  {
    HIBYTE(v63) = v54;
    std::string v56 = &__dst;
    if (!v54) {
      goto LABEL_99;
    }
  }
  memcpy(v56, __str, v55);
LABEL_99:
  *((unsigned char *)v56 + v55) = 0;
  std::string v59 = operator new(0x28uLL);
  double result = *(double *)&__dst;
  v59[1] = __dst;
  *((void *)v59 + 4) = v63;
  uint64_t v61 = *a2;
  *(void *)std::string v59 = *a2;
  *((void *)v59 + 1) = a2;
  *(void *)(v61 + 8) = v59;
  *a2 = (uint64_t)v59;
  ++a2[2];
  return result;
}

void sub_1000D0EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL RcpHostContext::is_device_state_valid_for_service_or_route_modification(RcpHostContext *this)
{
  char v2 = (std::mutex *)((char *)this + 360);
  std::mutex::lock((std::mutex *)((char *)this + 360));
  int v3 = (char *)*((unsigned int *)this + 88);
  if (v3 == 8) {
    goto LABEL_10;
  }
  nl::wpantund::ncp_state_to_string(v3, (uint64_t)&__p);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      RcpHostContext::is_device_state_valid_for_service_or_route_modification();
      if (v7 < 0) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v7 < 0) {
LABEL_9:
  }
    operator delete(__p);
LABEL_10:
  std::mutex::unlock(v2);
  return v3 == 8;
}

void sub_1000D0FF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t RcpHostContext::canSleepForThisDevice(RcpHostContext *this)
{
  return 0;
}

void RcpHostContext::reportWakeOnDeviceConnectionStatusToClient(RcpHostContext *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = *((_DWORD *)this + 88);
      *(_DWORD *)timeval buf = 136315394;
      *(void *)&uint8_t buf[4] = "reportWakeOnDeviceConnectionStatusToClient";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %d", buf, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
  if ((v18 & 0x80000000) == 0)
  {
    if (v18 != 10) {
      goto LABEL_32;
    }
    if (*(void *)buf != 0x746169636F737361 || *(unsigned __int16 *)&buf[8] != 25701) {
      goto LABEL_32;
    }
LABEL_23:
    int v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
        uint64_t v9 = v18 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v13 = 136315394;
        size_t v14 = "reportWakeOnDeviceConnectionStatusToClient";
        __int16 v15 = 2080;
        int v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s %s: Notify WakeOnDeviceConnectionStatus to SRP client", v13, 0x16u);
        if (v18 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__str, "NCP:WedMleId");
    operator new();
  }
  if (*(void *)&buf[8] != 10)
  {
    operator delete(*(void **)buf);
    goto LABEL_32;
  }
  BOOL v7 = **(void **)buf != 0x746169636F737361 || *(_WORD *)(*(void *)buf + 8) != 25701;
  operator delete(*(void **)buf);
  if (!v7) {
    goto LABEL_23;
  }
LABEL_32:
  uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
      if (v18 >= 0) {
        int v11 = buf;
      }
      else {
        int v11 = *(unsigned char **)buf;
      }
      *(_DWORD *)int v13 = 136315394;
      size_t v14 = "reportWakeOnDeviceConnectionStatusToClient";
      __int16 v15 = 2080;
      int v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s %s(state: Not Associated)", v13, 0x16u);
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_1000D13F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::reportThreadNeighborMeshLocalAddressToClient(RcpHostContext *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = *((_DWORD *)this + 88);
      *(_DWORD *)timeval buf = 136315394;
      *(void *)&uint8_t buf[4] = "reportThreadNeighborMeshLocalAddressToClient";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %d", buf, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
  if ((v17 & 0x80000000) == 0)
  {
    if (v17 != 10) {
      goto LABEL_32;
    }
    if (*(void *)buf != 0x746169636F737361 || *(unsigned __int16 *)&buf[8] != 25701) {
      goto LABEL_32;
    }
LABEL_23:
    int v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
        uint64_t v9 = v17 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)uint64_t v12 = 136315394;
        int v13 = "reportThreadNeighborMeshLocalAddressToClient";
        __int16 v14 = 2080;
        __int16 v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s %s: Notify ThreadNeighborMeshLocalAddress to SRP client", v12, 0x16u);
        if (v17 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    strcpy((char *)operator new(0x20uLL), "Thread:NeighborMeshLocalAddress");
    operator new();
  }
  if (*(void *)&buf[8] != 10)
  {
    operator delete(*(void **)buf);
    goto LABEL_32;
  }
  BOOL v7 = **(void **)buf != 0x746169636F737361 || *(_WORD *)(*(void *)buf + 8) != 25701;
  operator delete(*(void **)buf);
  if (!v7) {
    goto LABEL_23;
  }
LABEL_32:
  uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      nl::wpantund::ncp_state_to_string((char *)*((unsigned int *)this + 88), (uint64_t)buf);
      if (v17 >= 0) {
        int v11 = buf;
      }
      else {
        int v11 = *(unsigned char **)buf;
      }
      *(_DWORD *)uint64_t v12 = 136315394;
      int v13 = "reportThreadNeighborMeshLocalAddressToClient";
      __int16 v14 = 2080;
      __int16 v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s %s(state: Not Associated)", v12, 0x16u);
      if (v17 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_1000D17EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RcpHostContext::canReportNetworkDataServiceInfo(RcpHostContext *this)
{
  return *((unsigned __int8 *)this + 797);
}

uint64_t RcpHostContext::canReportNetworkDataIPV6RouteInfo(RcpHostContext *this)
{
  return *((unsigned __int8 *)this + 798);
}

void RcpHostContext::init_clients(void **this)
{
}

void RcpHostContext::add_cmd_otctl()
{
}

void sub_1000D19C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D19D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<HostCmdTask>::shared_ptr<HostCmdTask>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<HostCmdTask>(&v2);
}

void sub_1000D1ABC(_Unwind_Exception *exception_object)
{
  int v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void RcpHostContext::add_cmd_threadstart()
{
}

void sub_1000D1CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D1CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_updatePrimaryResident()
{
}

void sub_1000D1E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D1E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_threadstop()
{
}

void sub_1000D1FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D1FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_ServiceAdd()
{
}

void sub_1000D213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_ServiceRemove()
{
}

void sub_1000D22C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D22D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_RouteAdd()
{
}

void sub_1000D244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_RouteRemove()
{
}

void sub_1000D25D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D25E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_PrefixAdd()
{
}

void sub_1000D275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_PrefixRemove()
{
}

void sub_1000D28E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D28F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_UpdateAccessoryAddr()
{
}

void sub_1000D2A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_PropertySet()
{
}

void sub_1000D2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_FormNetwork()
{
}

void sub_1000D2D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_JoinNetwork()
{
}

void sub_1000D2F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_SendDiagCmd()
{
}

void sub_1000D308C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D30A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_LeaveNetwork()
{
}

void sub_1000D3214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_ReconnectThread()
{
}

void sub_1000D339C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D33B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_Reset()
{
}

void sub_1000D3524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_Status()
{
}

void sub_1000D36AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D36C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_NetScan()
{
}

void sub_1000D3834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_DiscoverScan()
{
}

void sub_1000D39BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D39D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_EnergyScan()
{
}

void sub_1000D3B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_GeneratePskc()
{
}

void sub_1000D3CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RcpHostContext::add_process_queue(uint64_t this, dispatch_queue_s *a2)
{
  *(void *)(this + 344) = a2;
  return this;
}

void RcpHostContext::add_cmd_GetRcpCrashDump()
{
}

void sub_1000D3E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_Peek()
{
}

void sub_1000D3FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_ReportCrashInfo()
{
}

void sub_1000D416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_WedStart()
{
}

void sub_1000D42F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D4308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_WedStop()
{
}

void sub_1000D447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D4490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_PingNode()
{
}

void sub_1000D4604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D4618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::add_cmd_DiagGetDeviceData()
{
}

void sub_1000D478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D47A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RcpHostContext::handle_rcp_reset(RcpHostContext *this, int a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v4 = logging_obg;
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      RcpHostContext::handle_rcp_reset(a2, v4);
      if ((a2 - 115) > 2) {
        return;
      }
      goto LABEL_8;
    }
LABEL_7:
    if ((a2 - 115) > 2) {
      return;
    }
    goto LABEL_8;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_7;
  }
  PcapManager::start_pcap_capture();
  if ((a2 - 115) > 2) {
    return;
  }
LABEL_8:
  int v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v5)
  {
    size_t v6 = v5;
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "RCP crash detected on reset. Get crash dump info", v7, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void RcpHostContext::handle_hard_reset(RcpHostContext *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
      uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v10) {
        goto LABEL_13;
      }
LABEL_8:
      int v11 = v10;
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Trigger RCP2 FLR from RecoverFromRcpFailure", v12, 2u);
        }
      }
      goto LABEL_11;
    }
LABEL_7:
    uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  uint64_t v2 = logging_obg;
  if (!syslog_is_the_mask_enabled(3) || !os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    goto LABEL_7;
  }
  RcpHostContext::handle_hard_reset(v2, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10) {
    goto LABEL_8;
  }
LABEL_13:
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
LABEL_11:
    CoreBTtriggerFLR();
    return;
  }
  PcapManager::start_pcap_capture();
  CoreBTtriggerFLR();
}

void RcpHostContext::captureABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  memset(&v23, 0, sizeof(v23));
  uint64_t v12 = (std::string *)RcpHostContext::sRcpHostContext;
  if (*(char *)(RcpHostContext::sRcpHostContext + 503) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(RcpHostContext::sRcpHostContext + 480), *(void *)(RcpHostContext::sRcpHostContext + 488));
    uint64_t v12 = (std::string *)RcpHostContext::sRcpHostContext;
    if ((*(char *)(RcpHostContext::sRcpHostContext + 551) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v22 = *(std::string *)(RcpHostContext::sRcpHostContext + 480);
    if ((*(char *)(RcpHostContext::sRcpHostContext + 551) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v21 = v12[22];
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v21, v12[22].__r_.__value_.__l.__data_, v12[22].__r_.__value_.__l.__size_);
LABEL_6:
  if (a6)
  {
    std::mutex::lock((std::mutex *)(a1 + 360));
    nl::wpantund::ncp_state_to_string((char *)*(unsigned int *)(a1 + 352), (uint64_t)&v20);
    std::mutex::unlock((std::mutex *)(a1 + 360));
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    std::string v23 = v20;
  }
  else
  {
    std::string::assign(&v23, "ABSENT");
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      RcpHostContext::captureABC();
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_20;
      }
LABEL_18:
      std::string v19 = v23;
      goto LABEL_21;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_20:
  std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
LABEL_21:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = v21;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v22;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v15 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  AWDMetricsClient_TriggerAutoBugCaptures_internal((const std::string::value_type *)&v19, (uint64_t)&v18, (uint64_t)&v17, (uint64_t *)&v16, (uint64_t *)&v15, (uint64_t)&__p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_48;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v17.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v18.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_54:
    operator delete(v23.__r_.__value_.__l.__data_);
    return;
  }
LABEL_53:
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_54;
  }
}

void sub_1000D4DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a30);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a49 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a37);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v49 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a44);
  if ((*(char *)(v49 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v49 - 105) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v49 - 160));
  if ((*(char *)(v49 - 105) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v49 - 73) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v49 - 128));
  if ((*(char *)(v49 - 73) & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_17:
  operator delete(*(void **)(v49 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t RcpHostContext::too_many_partitions(RcpHostContext *this)
{
  gettimeofday(&v18, &v17);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
      int v4 = *((_DWORD *)this + 194);
      __darwin_time_t tv_sec = v18.tv_sec;
      if (v4) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
LABEL_7:
    int v4 = *((_DWORD *)this + 194);
    __darwin_time_t tv_sec = v18.tv_sec;
    if (v4) {
      goto LABEL_8;
    }
LABEL_19:
    uint64_t result = 0;
    *((_DWORD *)this + 194) = 1;
    *((void *)this + 96) = tv_sec;
    return result;
  }
  uint64_t v3 = logging_obg;
  if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_7;
  }
  RcpHostContext::too_many_partitions((uint64_t)this, &v18.tv_sec, v3);
  int v4 = *((_DWORD *)this + 194);
  __darwin_time_t tv_sec = v18.tv_sec;
  if (!v4) {
    goto LABEL_19;
  }
LABEL_8:
  __darwin_time_t v6 = *((void *)this + 96);
  if (tv_sec < v6 || tv_sec >= v6 + 3600) {
    goto LABEL_19;
  }
  *((_DWORD *)this + 194) = v4 + 1;
  if (v4 < 20) {
    return 0;
  }
  *((_DWORD *)this + 194) = 1;
  *((void *)this + 96) = tv_sec;
  uint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v7)
  {
    uint64_t v8 = v7;
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      RcpHostContext::too_many_partitions(v8, v9, v10, v11, v12, v13, v14, v15);
      return 1;
    }
    return 1;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    return 1;
  }
  PcapManager::start_pcap_capture();
  return 1;
}

void RcpHostContext::get_device_data(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = 0;
  int v2 = 0;
  int v3 = 0;
  int v4 = 0;
  char v5 = 0;
  char v6 = 0;
  char v7 = 0;
  char v8 = 0;
  char v9 = 0;
  int v10 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unsigned int v54 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  *(_OWORD *)std::string::value_type v62 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v64 = 1065353216;
  *(_OWORD *)std::string v59 = 0u;
  *(_OWORD *)std::string v60 = 0u;
  int v61 = 1065353216;
  unsigned int v11 = *(_DWORD *)(a1 + 960);
  if (v11 >= 3) {
    int v12 = 3;
  }
  else {
    int v12 = *(_DWORD *)(a1 + 960);
  }
  do
  {
    uint64_t v13 = a1 + 200 * (v11 & 3);
    int v55 = (*(unsigned char *)(v13 + 968) != 0) | v2;
    int v56 = (*(_DWORD *)(v13 + 972) > 0) | v3;
    int v57 = (*(unsigned char *)(v13 + 976) != 0) | v4;
    v6 |= *(unsigned char *)(v13 + 1040) != 0;
    v7 |= *(unsigned char *)(v13 + 1024) != 0;
    v8 |= *(unsigned char *)(v13 + 1025) != 0;
    v9 |= *(unsigned char *)(v13 + 1026) != 0;
    v10 += *(_DWORD *)(v13 + 1036);
    for (uint64_t i = (unsigned __int16 *)(v13 + 1064);
          ;
          std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)v62, i + 8, i + 8))
    {
      uint64_t i = *(unsigned __int16 **)i;
      if (!i) {
        break;
      }
    }
    for (uint64_t j = a1 + 200 * (v11 & 3) + 1104;
          ;
          std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)v59, (unsigned __int16 *)(j + 16), (_WORD *)(j + 16)))
    {
      uint64_t j = *(void *)j;
      if (!j) {
        break;
      }
    }
    if (v5)
    {
      std::string v16 = (_DWORD *)(a1 + 200 * (v11 & 3));
      int v17 = v16[245];
      LODWORD(v48) = v17 + v48 + v16[247];
      HIDWORD(v48) += v17;
      int v18 = v16[246];
      LODWORD(v49) = v18 + v49 + v16[248];
      HIDWORD(v49) += v18;
      LODWORD(v50) = v16[249] + v50;
      HIDWORD(v50) += v16[250];
      if (v16[251] <= v51) {
        int v19 = v51;
      }
      else {
        int v19 = v16[251];
      }
      LODWORD(v52) = v16[252] + v52;
      LODWORD(v51) = v19;
      HIDWORD(v51) += v16[253];
      LODWORD(v53) = v16[254] + v53;
      HIDWORD(v52) += v16[255];
      HIDWORD(v53) += v16[257];
      v54 += v16[258];
    }
    LOBYTE(v11) = v11 - 1;
    char v5 = 1;
    BOOL v21 = v12-- <= 0;
    int v3 = v56;
    int v4 = v57;
    int v2 = v55;
  }
  while (!v21);
  if (v55) {
    *(unsigned char *)(a2 + 1) |= 4u;
  }
  if (v56)
  {
    *(unsigned char *)(a2 + 2) |= 2u;
    if ((v57 & 1) == 0)
    {
LABEL_20:
      if ((v6 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_28;
    }
  }
  else if ((v57 & 1) == 0)
  {
    goto LABEL_20;
  }
  *(unsigned char *)(a2 + 2) |= 1u;
  if ((v6 & 1) == 0)
  {
LABEL_21:
    if ((v7 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(_WORD *)(a2 + 12) |= 8u;
  if ((v7 & 1) == 0)
  {
LABEL_22:
    if ((v8 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
LABEL_29:
  *(_WORD *)(a2 + 12) |= 0x10u;
  if ((v8 & 1) == 0)
  {
LABEL_23:
    if ((v9 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_30:
  *(_WORD *)(a2 + 12) |= 0x20u;
  if ((v9 & 1) == 0)
  {
LABEL_24:
    unsigned int v20 = 0;
    if (v48 < 0x33) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_31:
  *(_WORD *)(a2 + 12) |= 0x40u;
  unsigned int v20 = 0;
  if (v48 < 0x33) {
    goto LABEL_35;
  }
LABEL_32:
  if (HIDWORD(v48) <= v48)
  {
    unsigned int v20 = 100 * HIDWORD(v48) / v48;
    if (v20 <= 0x4F) {
      *(unsigned char *)(a2 + 2) |= 4u;
    }
  }
LABEL_35:
  BOOL v21 = v49 < 0x33 || HIDWORD(v49) > v49;
  int v22 = v21;
  if (v21)
  {
    unsigned int v23 = 0;
  }
  else
  {
    unsigned int v23 = 100 * HIDWORD(v49) / v49;
    if (v23 <= 0x4F) {
      *(unsigned char *)(a2 + 2) |= 8u;
    }
  }
  if (v50) {
    *(unsigned char *)(a2 + 2) |= 0x10u;
  }
  if (HIDWORD(v50)) {
    *(unsigned char *)(a2 + 2) |= 0x20u;
  }
  if (v51 <= 0x14)
  {
    if (!v51) {
      goto LABEL_55;
    }
    char v24 = 0x80;
  }
  else
  {
    char v24 = 64;
  }
  *(unsigned char *)(a2 + 2) |= v24;
LABEL_55:
  BOOL v25 = v52 < 0x65 || HIDWORD(v51) > v52;
  int v26 = v25;
  if (!v25 && 100 * HIDWORD(v51) / v52 <= 0x4F) {
    *(_WORD *)(a2 + 12) |= 1u;
  }
  if (v53 >= 0x65 && HIDWORD(v52) <= v53 && 100 * HIDWORD(v52) / v53 <= 0x4F) {
    *(_WORD *)(a2 + 12) |= 2u;
  }
  if (v54 >= 0x65 && HIDWORD(v53) <= v54 && 100 * HIDWORD(v53) / v54 >= 0x15) {
    *(_WORD *)(a2 + 12) |= 4u;
  }
  if (v10) {
    *(unsigned char *)(a2 + 8) |= 2u;
  }
  int v27 = __p[1];
  *(unsigned char *)(a2 + 9) = __p[1];
  uint64_t v28 = v60[1];
  *(unsigned char *)(a2 + 10) = v60[1];
  *(unsigned char *)a2 = 0;
  if (((v22 | v26) & 1) != 0
    || ((unsigned int v29 = v20 - 40, v20 >= 0x28) ? (v30 = v23 >= 0x28) : (v30 = 0),
        v30 ? (int v31 = 0) : (int v31 = 1),
        v30 && v29 >= 0x28 && v23 - 40 > 0x27))
  {
    if (!v27) {
      goto LABEL_92;
    }
  }
  else
  {
    if (v31) {
      char v46 = 2;
    }
    else {
      char v46 = 1;
    }
    *(unsigned char *)a2 = v46;
    if (!v27) {
      goto LABEL_92;
    }
  }
  __int16 v32 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v33 = (void *)*v32;
      operator delete(v32);
      __int16 v32 = v33;
    }
    while (v33);
  }
  __p[0] = 0;
  uint64_t v34 = (char *)v62[1];
  if (v62[1])
  {
    uint64_t v35 = 0;
    do
      *((void *)v62[0] + (void)v35++) = 0;
    while (v34 != v35);
  }
  __p[1] = 0;
  uint64_t v28 = v60[1];
LABEL_92:
  if (v28)
  {
    uint64_t v36 = v60[0];
    if (v60[0])
    {
      do
      {
        uint64_t v37 = (void *)*v36;
        operator delete(v36);
        uint64_t v36 = v37;
      }
      while (v37);
    }
    v60[0] = 0;
    size_t v38 = (char *)v59[1];
    if (v59[1])
    {
      size_t v39 = 0;
      do
        *((void *)v59[0] + (void)v39++) = 0;
      while (v38 != v39);
    }
    v60[1] = 0;
  }
  uint64_t v40 = v60[0];
  if (v60[0])
  {
    do
    {
      uint64_t v41 = (void *)*v40;
      operator delete(v40);
      uint64_t v40 = v41;
    }
    while (v41);
  }
  uint64_t v42 = v59[0];
  v59[0] = 0;
  if (v42) {
    operator delete(v42);
  }
  char v43 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v44 = (void *)*v43;
      operator delete(v43);
      char v43 = v44;
    }
    while (v44);
  }
  __int16 v45 = v62[0];
  v62[0] = 0;
  if (v45) {
    operator delete(v45);
  }
}

void sub_1000D56B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)va);
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned short>::~unordered_set[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void rcpHostContextInit(void)
{
}

void sub_1000D5768()
{
}

uint64_t update_group_abc_state(uint64_t result)
{
  uint64_t v1 = RcpHostContext::sRcpHostContext;
  *(unsigned char *)(RcpHostContext::sRcpHostContext + 1840) = result;
  if ((result & 1) == 0)
  {
    if (*(char *)(v1 + 1791) < 0)
    {
      **(unsigned char **)(v1 + 1768) = 0;
      *(void *)(v1 + 1776) = 0;
      if ((*(char *)(v1 + 1815) & 0x80000000) == 0)
      {
LABEL_4:
        *(unsigned char *)(v1 + 1792) = 0;
        *(unsigned char *)(v1 + 1815) = 0;
        if ((*(char *)(v1 + 1839) & 0x80000000) == 0)
        {
LABEL_5:
          *(unsigned char *)(v1 + 1816) = 0;
          *(unsigned char *)(v1 + 1839) = 0;
LABEL_9:
          *(unsigned char *)(v1 + 1840) = 0;
          return result;
        }
LABEL_8:
        **(unsigned char **)(v1 + 1816) = 0;
        *(void *)(v1 + 1824) = 0;
        goto LABEL_9;
      }
    }
    else
    {
      *(unsigned char *)(v1 + 1768) = 0;
      *(unsigned char *)(v1 + 1791) = 0;
      if ((*(char *)(v1 + 1815) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    **(unsigned char **)(v1 + 1792) = 0;
    *(void *)(v1 + 1800) = 0;
    if ((*(char *)(v1 + 1839) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  return result;
}

void *DeviceDataInstance::clear(void *this)
{
  uint64_t v1 = this;
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(void *)((char *)this + 51) = 0;
  *(void *)((char *)this + 60) = 0;
  *(void *)((char *)this + 65) = 0;
  if (this[13])
  {
    this = (void *)this[12];
    if (this)
    {
      do
      {
        int v2 = (void *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[12] = 0;
    uint64_t v3 = v1[11];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(v1[10] + 8 * i) = 0;
    }
    v1[13] = 0;
  }
  if (v1[18])
  {
    this = (void *)v1[17];
    if (this)
    {
      do
      {
        char v5 = (void *)*this;
        operator delete(this);
        this = v5;
      }
      while (v5);
    }
    v1[17] = 0;
    uint64_t v6 = v1[16];
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(v1[15] + 8 * j) = 0;
    }
    v1[18] = 0;
  }
  if (v1[23])
  {
    this = (void *)v1[22];
    if (this)
    {
      do
      {
        char v8 = (void *)*this;
        operator delete(this);
        this = v8;
      }
      while (v8);
    }
    v1[22] = 0;
    uint64_t v9 = v1[21];
    if (v9)
    {
      for (uint64_t k = 0; k != v9; ++k)
        *(void *)(v1[20] + 8 * k) = 0;
    }
    v1[23] = 0;
  }
  return this;
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>>(&v2);
}

void sub_1000D59F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_100496420;
  uint64_t v1 = (atomic_uint *)a1[2];
  if (v1)
  {
    if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
      if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
      }
    }
  }

  operator delete();
}

uint64_t boost::signals2::signal<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::signal_impl()
{
}

void sub_1000D5D1C()
{
}

void sub_1000D5D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D5D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D5D88(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        char v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::mutex>(&v2);
}

void sub_1000D5F74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D60A4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6144(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (*v2 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D61D8()
{
}

void boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>()
{
}

void sub_1000D62E8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D630C(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    operator delete();
  }
  return result;
}

void boost::detail::shared_count::shared_count<boost::signals2::mutex>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D63AC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    pthread_mutex_destroy(v1);
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D63E0(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(result + 16));
    operator delete();
  }
  return result;
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D64C4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 32);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D65F4(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 32);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete();
  }
  return result;
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>>(&v2);
}

void sub_1000D682C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_100496600;
  uint64_t v1 = (atomic_uint *)a1[2];
  if (v1)
  {
    if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
      if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
      }
    }
  }

  operator delete();
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::signal_impl()
{
}

void sub_1000D6B3C()
{
}

void sub_1000D6B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D6B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D6BA8(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6C60(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6D00(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (*v2 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D6D94()
{
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D6E28(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 32);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D6F58(_Unwind_Exception *a1)
{
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>>(&v2);
}

void sub_1000D7034(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_1004966D0;
  uint64_t v1 = (atomic_uint *)a1[2];
  if (v1)
  {
    if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
      if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
      }
    }
  }

  operator delete();
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::signal_impl()
{
}

void sub_1000D7344()
{
}

void sub_1000D7370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D7384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D73B0(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7468(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7508(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (*v2 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D759C()
{
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D7630(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 32);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D7760(_Unwind_Exception *a1)
{
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>>(&v2);
}

void sub_1000D783C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = off_1004967A0;
  uint64_t v1 = (atomic_uint *)a1[2];
  if (v1)
  {
    if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
      if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
      }
    }
  }

  operator delete();
}

void boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::signal_impl()
{
}

void sub_1000D7B4C()
{
}

void sub_1000D7B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D7B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D7BB8(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>(&v2);
}

void sub_1000D7C98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::invocation_state::invocation_state()
{
}

{
  operator new();
}

void sub_1000D7DC8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7E68(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (*v2 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7EFC()
{
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  char v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    char v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      int v10 = (void *)v6[1];
      unsigned int v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          uint64_t v16 = v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          uint64_t v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          char v7 = v18;
        }
        while (!v14);
      }
      uint64_t v6 = v16;
      char v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1000D807C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      char v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        uint64_t v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *char v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1000D8144(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    void v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        char v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>,boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>>()
{
}

void sub_1000D8304(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>>>(v1);
  __cxa_rethrow();
}

void sub_1000D8318(_Unwind_Exception *a1)
{
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D839C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 24);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D84CC(_Unwind_Exception *a1)
{
}

void boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D8550(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 32);
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = *(atomic_uint **)(v1 + 8);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D8680(_Unwind_Exception *a1)
{
}

void boost::detail::shared_count::shared_count<HostCmdTask>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000D8704(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    HostCmdTask::free_apidata((_OTCTL_CMD_DATA **)v1);
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000D873C(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<HostCmdTask>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    HostCmdTask::free_apidata(*(_OTCTL_CMD_DATA ***)(result + 16));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t **std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int16 *)v10 + 8) == v6) {
                return v10;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  BOOL v14 = operator new(0x18uLL);
  *BOOL v14 = 0;
  v14[1] = v6;
  *((_WORD *)v14 + 8) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  BOOL v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *BOOL v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    BOOL v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_1000D8AA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    float v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *unint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    float v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *unint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *float v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          float v16 = v7;
LABEL_25:
          unint64_t v7 = v16;
          float v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          unint64_t v7 = v16;
          float v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_6_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t _GLOBAL__sub_I_host_context_cpp()
{
  qword_1004B5FA8 = 0;
  qword_1004B5FA0 = 0;
  rcp_settings = (uint64_t)&qword_1004B5FA0;
  __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &rcp_settings, (void *)&_mh_execute_header);
  morty_versiouint64_t n = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_1004B5FB8 = xmmword_1003F2EE0;
  strcpy((char *)morty_version, " Morty_Version: V0.265.0.5");
  __cxa_atexit((void (*)(void *))&std::string::~string, &morty_version, (void *)&_mh_execute_header);
  stability_settings = 0uLL;
  LODWORD(xmmword_1004B5FD8) = 0;
  *(long long *)((char *)&xmmword_1004B5FD8 + 8) = 0u;
  *(long long *)((char *)&xmmword_1004B5FE8 + 8) = 0u;
  WORD4(xmmword_1004B5FF8) = 0;
  xmmword_1004B6008 = 0u;
  xmmword_1004B6018 = 0u;
  xmmword_1004B6028 = 0u;

  return __cxa_atexit((void (*)(void *))stabilitySettings_t::~stabilitySettings_t, &stability_settings, (void *)&_mh_execute_header);
}

void InternalIPCAPI::InternalIPCAPI(InternalIPCAPI *this)
{
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((void *)this + 5) = 0;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5))
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v2 = 0;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "WPANTUND-InternalXPCIPC_rcp:  Constructor", v2, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void sub_1000D8E7C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void InternalIPCAPI::~InternalIPCAPI(InternalIPCAPI *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "WPANTUND-InternalIPCAPI: Destructor", v3, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::destroy((uint64_t)this + 24, *((void *)this + 4));
}

uint64_t InternalIPCAPI::getInstance(InternalIPCAPI *this)
{
  if (!InternalIPCAPI::_instance) {
    operator new();
  }
  return InternalIPCAPI::_instance;
}

void sub_1000D8FB8()
{
}

void InternalIPCAPI::add_interface(InternalIPCAPI *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    unint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(5))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)timeval buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "OTD-InternalIPCAPI - Interface added ", buf, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *((void *)this + 1) = dispatch_queue_create("internalIpcApiQueue.xpc.queue", v4);
  uint64_t v5 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *((void *)this + 2) = dispatch_queue_create("internalIpcApiDebugQueue.xpc.queue", v5);
  uint64_t v6 = RcpHostContext::sRcpHostContext;
  *(void *)&long long v7 = InternalIPCAPI::property_changed;
  *((void *)&v7 + 1) = 0;
  uint64_t v8 = this;
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::list3<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>>>>((uint64_t)buf, &v7);
  boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::connect(*(void *)(v6 + 184));
}

void sub_1000D9758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D976C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D9780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D9794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D97A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D97BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D97D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);
  _Unwind_Resume(a1);
}

void InternalIPCAPI::property_changed(NSObject **a1, const std::string::value_type **a2, const boost::any *a3)
{
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v34, *a2, (std::string::size_type)a2[1]);
  }
  else {
    std::string v34 = *(std::string *)a2;
  }
  if (*(void *)a3) {
    uint64_t v6 = (void *)(*(uint64_t (**)(void))(**(void **)a3 + 16))(*(void *)a3);
  }
  else {
  uint64_t v7 = v6[1];
  }
  if (v7 != 0x80000001003F31A6
    && (((v7 & 0x80000001003F31A6 & 0x8000000000000000) != 0) == __OFSUB__(v7, 0x80000001003F31A6)
     || strcmp((const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F31A6 & 0x7FFFFFFFFFFFFFFFLL))))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        unint64_t v10 = (uint64_t *)a2;
        if (*((char *)a2 + 23) < 0) {
          unint64_t v10 = (uint64_t *)*a2;
        }
        any_to_string(a3, (uint64_t)__p);
        int v11 = SHIBYTE(v32);
        uint64_t v12 = (void **)__p[0];
        uint64_t SystemTime = TelephonyUtilGetSystemTime();
        uint64_t v14 = __p;
        *(_DWORD *)timeval buf = 136315650;
        if (v11 < 0) {
          uint64_t v14 = v12;
        }
        uint64_t v36 = v10;
        __int16 v37 = 2080;
        uint64_t v38 = (uint64_t)v14;
        __int16 v39 = 2048;
        uint64_t v40 = SystemTime;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "InternalIPCAPI:PropChanged: Key %s, Value: %s, at: %llu", buf, 0x20u);
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_28;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
LABEL_27:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_28;
  }
  uint64_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v8)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "InternalIPCAPI:PropChanged: valMap Received", buf, 2u);
  }
LABEL_28:
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v32 = 0x2000000000;
  uint64_t v33 = 0;
  uint64_t v33 = TelephonyUtilGetSystemTime();
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalIPCAPI16property_changedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyE_block_invoke;
  aBlock[3] = &unk_100496988;
  aBlock[4] = __p;
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *a2, (std::string::size_type)a2[1]);
  }
  else {
    std::string v28 = *(std::string *)a2;
  }
  float v15 = _Block_copy(aBlock);
  float v16 = *a1;
  if (*a1) {
    dispatch_retain(*a1);
  }
  unsigned int v29 = v15;
  BOOL v30 = v16;
  ++numPendingEventsToBeSent;
  ++numPendingEventsToRcvResponse;
  uint64_t v17 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v17)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      unint64_t v18 = (uint64_t *)a2;
      if (*((char *)a2 + 23) < 0) {
        unint64_t v18 = (uint64_t *)*a2;
      }
      uint64_t v19 = TelephonyUtilGetSystemTime();
      *(_DWORD *)timeval buf = 136315906;
      uint64_t v36 = v18;
      __int16 v37 = 2048;
      uint64_t v38 = v19;
      __int16 v39 = 2048;
      uint64_t v40 = numPendingEventsToBeSent;
      __int16 v41 = 2048;
      uint64_t v42 = numPendingEventsToRcvResponse;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Posting event (%s) to Internal Broadcast Event Handler, at: %llu, numPendingEventsToBeSent: %lld numPendingEventsToRcvResponse : %lld", buf, 0x2Au);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  unsigned int v20 = a1[1];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZN14InternalIPCAPI16property_changedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyE_block_invoke_27;
  block[3] = &__block_descriptor_tmp_28;
  block[4] = a1;
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *a2, (std::string::size_type)a2[1]);
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  uint64_t v21 = *(void *)a3;
  if (*(void *)a3) {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21);
  }
  uint64_t v24 = v21;
  if (v15)
  {
    BOOL v25 = _Block_copy(v15);
    dispatch_object_t object = v16;
    if (!v16) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  BOOL v25 = 0;
  dispatch_object_t object = v16;
  if (v16) {
LABEL_48:
  }
    dispatch_retain(v16);
LABEL_49:
  dispatch_async(v20, block);
  if (object) {
    dispatch_release(object);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    _Block_object_dispose(__p, 8);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_67:
    operator delete(v34.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  _Block_object_dispose(__p, 8);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_67;
  }
}

void sub_1000D9D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(exception_object);
}

void InternalIPCAPI::received_beacon(uint64_t a1, unsigned char *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = v8;
  if ((char)a2[23] >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *(unsigned char **)a2;
  }
  if (*v3)
  {
    std::string __p = operator new(0x20uLL);
    long long v6 = xmmword_1003F3030;
    strcpy((char *)__p, "kWPANTUNDProperty_NetworkName");
    p_p = &__p;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v7, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    operator new();
  }
  memcpyrev((int8x16_t *)&__p, (unint64_t)(a2 + 24), 8uLL);
  if (__p)
  {
    memcpyrev((int8x16_t *)&__p, (unint64_t)(a2 + 24), 8uLL);
    std::string __p = operator new(0x20uLL);
    long long v6 = xmmword_1003F3040;
    strcpy((char *)__p, "kWPANTUNDProperty_NetworkXPANID");
    p_p = &__p;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v7, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    operator new();
  }
  std::string __p = operator new(0x20uLL);
  long long v6 = xmmword_1003F2F00;
  strcpy((char *)__p, "kWPANTUNDProperty_NetworkPANID");
  p_p = &__p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v7, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  operator new();
}

void sub_1000DA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v30 - 88, *(char **)(v30 - 80));
  _Unwind_Resume(a1);
}

void InternalIPCAPI::received_energy_scan_result(uint64_t a1, unsigned __int8 *a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v5) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  uint64_t v4 = logging_obg;
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
    goto LABEL_7;
  }
  LOWORD(v9[0]) = 0;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "InternalIPCAPI: Received energy scan results", (uint8_t *)v9, 2u);
  uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v5)
  {
LABEL_12:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      -[PowerEventHandler_Rcp init:]();
    }
    return;
  }
LABEL_8:
  long long v6 = v5;
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = *a2;
    int v8 = (char)a2[1];
    v9[0] = 67109376;
    v9[1] = v7;
    __int16 v10 = 1024;
    int v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Energy scan results: Channel: %2d dBm: %4d ", (uint8_t *)v9, 0xEu);
  }
}

void InternalIPCAPI::received_network_diagnostics_response(InternalIPCAPI *this, const boost::any *a2)
{
  if (*(void *)a2) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else {
  uint64_t v5 = (const char *)(v4[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v5 != (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v5, (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      int v7 = logging_obg;
      if (syslog_is_the_mask_enabled(3))
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          InternalIPCAPI::received_network_diagnostics_response(v7);
        }
      }
      return;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_24:
    -[PowerEventHandler_Rcp init:]();
    return;
  }
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(*(void *)a2 + 8);
  uint64_t v10 = *(void *)(*(void *)a2 + 16);
  int v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v12 = v11;
  if (v9) {
    BOOL v13 = v9 == v10;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    if (!v11)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_24;
    }
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      InternalIPCAPI::received_network_diagnostics_response((void *)(v8 + 16), (uint64_t *)(v8 + 8), v12);
    }
  }
  else
  {
    if (v11)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)timeval buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Sending nw_diag_response to internal-clients", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    std::string __p = operator new(0x20uLL);
    long long v18 = xmmword_1003F2EA0;
    strcpy((char *)__p, "vendor:networkdiagnosticsrsp");
    if (*(void *)a2) {
      uint64_t v14 = (*(uint64_t (**)(void))(**(void **)a2 + 24))(*(void *)a2);
    }
    else {
      uint64_t v14 = 0;
    }
    v15[1] = 0;
    uint64_t v16 = v14;
    v15[0] = 0;
    InternalIPCAPI::IntBroadcastEvent((uint64_t)this, (const std::string::value_type *)&__p, &v16, (uint64_t)v15);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
  }
}

void sub_1000DAE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InternalIPCAPI::received_network_data_nm_update(InternalIPCAPI *this, const boost::any *a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending nw_data_nm_update to internal-clients", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  char v10 = 14;
  strcpy((char *)__p, "nm:networkdata");
  if (*(void *)a2) {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 24))(*(void *)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  v7[1] = 0;
  uint64_t v8 = v6;
  v7[0] = 0;
  InternalIPCAPI::IntBroadcastEvent((uint64_t)this, (const std::string::value_type *)__p, &v8, (uint64_t)v7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000DAFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InternalIPCAPI::received_ping_stats_nm_update(InternalIPCAPI *this, const boost::any *a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending ping_stats_nm_update to internal-clients", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  char v10 = 13;
  strcpy((char *)__p, "nm:ping:stats");
  if (*(void *)a2) {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 24))(*(void *)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  v7[1] = 0;
  uint64_t v8 = v6;
  v7[0] = 0;
  InternalIPCAPI::IntBroadcastEvent((uint64_t)this, (const std::string::value_type *)__p, &v8, (uint64_t)v7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000DB16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InternalIPCAPI::received_diag_device_data_update(InternalIPCAPI *this, const boost::any *a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending diag_device_data_update to internal-clients", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  char v10 = 18;
  strcpy(__p, "nm:diag:devicedata");
  if (*(void *)a2) {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 24))(*(void *)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  v7[1] = 0;
  uint64_t v8 = v6;
  v7[0] = 0;
  InternalIPCAPI::IntBroadcastEvent((uint64_t)this, __p, &v8, (uint64_t)v7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v10 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000DB320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InternalIPCAPI::IntBroadcastEvent(uint64_t a1, const std::string::value_type *a2, void *a3, uint64_t a4)
{
  group = dispatch_group_create();
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v62 = a1;
  int v7 = (void *)(a1 + 32);
  if (v6 != (void *)(a1 + 32))
  {
    uint64_t v8 = &_os_log_default;
    do
    {
      if (*((char *)v6 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v6[4], v6[5]);
      }
      else {
        std::string v80 = *(std::string *)(v6 + 4);
      }
      uint64_t v9 = (std::__shared_weak_count *)v6[8];
      std::string::size_type v81 = (InternalClient *)v6[7];
      v82 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v79, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      }
      else {
        std::string v79 = v80;
      }
      int v11 = v81;
      char v10 = v82;
      std::string::size_type v77 = v81;
      v78 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11)
      {
        if (InternalClient::isEventsOn(v11))
        {
          InternalClient::getClientEventListenersPtr(v11, &v75);
          uint64_t v13 = v75 + 8;
          uint64_t v12 = *(void *)(v75 + 8);
          if (!v12) {
            goto LABEL_114;
          }
          uint64_t v14 = v8;
          int v15 = a2[23];
          size_t v16 = v15 >= 0 ? *((unsigned __int8 *)a2 + 23) : *((void *)a2 + 1);
          uint64_t v17 = v15 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
          uint64_t v18 = v75 + 8;
          do
          {
            int v19 = *(char *)(v12 + 55);
            if (v19 >= 0) {
              size_t v20 = *(unsigned __int8 *)(v12 + 55);
            }
            else {
              size_t v20 = *(void *)(v12 + 40);
            }
            if (v19 >= 0) {
              uint64_t v21 = (const void *)(v12 + 32);
            }
            else {
              uint64_t v21 = *(const void **)(v12 + 32);
            }
            if (v16 >= v20) {
              size_t v22 = v20;
            }
            else {
              size_t v22 = v16;
            }
            int v23 = memcmp(v21, v17, v22);
            BOOL v24 = v20 < v16;
            if (v23) {
              BOOL v24 = v23 < 0;
            }
            BOOL v25 = !v24;
            if (v24) {
              unint64_t v26 = (uint64_t *)(v12 + 8);
            }
            else {
              unint64_t v26 = (uint64_t *)v12;
            }
            if (v25) {
              uint64_t v18 = v12;
            }
            uint64_t v12 = *v26;
          }
          while (*v26);
          uint64_t v8 = v14;
          if (v18 == v13) {
            goto LABEL_114;
          }
          int v27 = *(char *)(v18 + 55);
          if (v27 >= 0) {
            size_t v28 = *(unsigned __int8 *)(v18 + 55);
          }
          else {
            size_t v28 = *(void *)(v18 + 40);
          }
          if (v27 >= 0) {
            unsigned int v29 = (const void *)(v18 + 32);
          }
          else {
            unsigned int v29 = *(const void **)(v18 + 32);
          }
          if (v28 >= v16) {
            size_t v30 = v16;
          }
          else {
            size_t v30 = v28;
          }
          int v31 = memcmp(v17, v29, v30);
          BOOL v32 = v16 >= v28;
          uint64_t v8 = v14;
          BOOL v33 = v32;
          if (v31) {
            BOOL v33 = v31 >= 0;
          }
          if (!v33) {
            goto LABEL_114;
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            std::string v34 = &v79;
            if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string v34 = (std::string *)v79.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)timeval buf = 136315394;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&_DWORD buf[14] = v34;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Sending internal event: %s, to: %s", buf, 0x16u);
          }
          uint64_t v35 = *(const void **)(v18 + 56);
          if (v35)
          {
            uint64_t v36 = _Block_copy(v35);
            __int16 v37 = v36;
            uint64_t v38 = *(NSObject **)(v18 + 64);
            std::string::size_type v73 = v36;
            int v74 = v38;
            if (!v38)
            {
              if (v36) {
                goto LABEL_113;
              }
              goto LABEL_114;
            }
            dispatch_retain(v38);
            if (v37)
            {
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                __int16 v39 = a2;
                if (a2[23] < 0) {
                  __int16 v39 = *(const std::string::value_type **)a2;
                }
                int v40 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
                std::string::size_type v41 = v79.__r_.__value_.__r.__words[0];
                uint64_t SystemTime = TelephonyUtilGetSystemTime();
                *(_DWORD *)timeval buf = 136315650;
                char v43 = &v79;
                if (v40 < 0) {
                  char v43 = (std::string *)v41;
                }
                *(void *)&uint8_t buf[4] = v39;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&_DWORD buf[14] = v43;
                *(_WORD *)&unsigned char buf[22] = 2048;
                std::string::value_type v84 = (void *)SystemTime;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Sending internal event: %s, to: %s, at: %llu", buf, 0x20u);
              }
              dispatch_retain(v38);
              dispatch_release(v38);
              if (*a3) {
                uint64_t v44 = (*(uint64_t (**)(void))(*(void *)*a3 + 24))(*a3);
              }
              else {
                uint64_t v44 = 0;
              }
              uint64_t v50 = _Block_copy(v37);
              uint64_t v51 = v50;
              *(void *)timeval buf = _NSConcreteStackBlock;
              *(void *)&uint8_t buf[8] = 1174405120;
              *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN5boost3anyEEEclIJS2_EEEvDpT__block_invoke;
              std::string::value_type v84 = &__block_descriptor_tmp_140;
              if (v50)
              {
                std::string::size_type v85 = _Block_copy(v50);
                if (v44) {
                  goto LABEL_93;
                }
LABEL_104:
                uint64_t v86 = 0;
                dispatch_async(v38, buf);
                uint64_t v52 = v86;
                if (!v86) {
                  goto LABEL_95;
                }
LABEL_94:
                (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
                goto LABEL_95;
              }
              std::string::size_type v85 = 0;
              if (!v44) {
                goto LABEL_104;
              }
LABEL_93:
              uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
              dispatch_async(v38, buf);
              uint64_t v52 = v86;
              if (v86) {
                goto LABEL_94;
              }
LABEL_95:
              if (v85) {
                _Block_release(v85);
              }
              if (v51) {
                _Block_release(v51);
              }
              if (v44) {
                (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
              }
              dispatch_group_enter(group);
              block[0] = _NSConcreteStackBlock;
              block[1] = 1174405120;
              block[2] = ___ZN14InternalIPCAPI17IntBroadcastEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
              block[3] = &__block_descriptor_tmp_29;
              if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v70, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
              }
              else {
                std::string v70 = v79;
              }
              if (a2[23] < 0) {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
              }
              else {
                std::string __p = *(std::string *)a2;
              }
              std::string::value_type v72 = group;
              dispatch_async(v38, block);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_137;
                }
              }
              else
              {
                if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_112;
                }
LABEL_137:
                operator delete(v70.__r_.__value_.__l.__data_);
              }
LABEL_112:
              dispatch_release(v38);
LABEL_113:
              _Block_release(v37);
LABEL_114:
              uint64_t v53 = v76;
              if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
              char v10 = v78;
              goto LABEL_118;
            }
          }
          else
          {
            uint64_t v38 = *(NSObject **)(v18 + 64);
            if (!v38) {
              goto LABEL_114;
            }
            dispatch_retain(v38);
          }
          dispatch_release(v38);
          goto LABEL_114;
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          uint64_t v48 = a2;
          if (a2[23] < 0) {
            uint64_t v48 = *(const std::string::value_type **)a2;
          }
          uint64_t v49 = &v79;
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v49 = (std::string *)v79.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)timeval buf = 136315394;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&_DWORD buf[14] = v49;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Events are turned off, event:%s not sent to client: %s , continue to next client", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        __int16 v45 = a2;
        if (a2[23] < 0) {
          __int16 v45 = *(const std::string::value_type **)a2;
        }
        char v46 = &v79;
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v46 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        size_t v47 = *(void **)(v62 + 40);
        *(_DWORD *)timeval buf = 136315650;
        *(void *)&uint8_t buf[4] = v45;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&_DWORD buf[14] = v46;
        *(_WORD *)&unsigned char buf[22] = 2048;
        std::string::value_type v84 = v47;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ClientPtr is null.Event name:%s clientName:%s numClients:%lu ", buf, 0x20u);
      }
LABEL_118:
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_121:
          unsigned int v54 = v82;
          if (!v82) {
            goto LABEL_126;
          }
          goto LABEL_125;
        }
      }
      else if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_121;
      }
      operator delete(v79.__r_.__value_.__l.__data_);
      unsigned int v54 = v82;
      if (!v82) {
        goto LABEL_126;
      }
LABEL_125:
      if (atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_126:
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_127;
        }
        goto LABEL_130;
      }
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_127:
        int v55 = (void *)v6[1];
        if (v55) {
          goto LABEL_131;
        }
        goto LABEL_133;
      }
LABEL_130:
      operator delete(v80.__r_.__value_.__l.__data_);
      int v55 = (void *)v6[1];
      if (v55)
      {
        do
        {
LABEL_131:
          int v56 = v55;
          int v55 = (void *)*v55;
        }
        while (v55);
        goto LABEL_3;
      }
      do
      {
LABEL_133:
        int v56 = (void *)v6[2];
        BOOL v25 = *v56 == (void)v6;
        uint64_t v6 = v56;
      }
      while (!v25);
LABEL_3:
      uint64_t v6 = v56;
    }
    while (v56 != v7);
  }
  uint64_t v57 = a4;
  uint64_t v58 = *(void **)a4;
  if (*(void *)a4 && *(void *)(a4 + 8))
  {
    std::string v59 = *(NSObject **)(v62 + 16);
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 1174405120;
    v65[2] = ___ZN14InternalIPCAPI17IntBroadcastEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_30;
    v65[3] = &__block_descriptor_tmp_32;
    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      uint64_t v57 = a4;
      uint64_t v58 = *(void **)a4;
      if (!*(void *)a4)
      {
LABEL_144:
        std::string v60 = *(NSObject **)(v57 + 8);
        aBlocuint64_t k = v58;
        dispatch_object_t object = v60;
        if (v60) {
          dispatch_retain(v60);
        }
        dispatch_group_notify(group, v59, v65);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        goto LABEL_152;
      }
    }
    else
    {
      std::string v66 = *(std::string *)a2;
    }
    uint64_t v58 = _Block_copy(v58);
    goto LABEL_144;
  }
LABEL_152:
  dispatch_release(group);
}

void sub_1000DBCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a44);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  if (*(char *)(v48 - 233) < 0) {
    operator delete(*(void **)(v48 - 256));
  }
  std::pair<std::string const,std::shared_ptr<InternalClient>>::~pair(v48 - 224);
  _Unwind_Resume(a1);
}

void *InternalIPCAPI::add_process_queue(void *this, dispatch_queue_s *a2)
{
  *this = a2;
  return this;
}

void InternalIPCAPI::add_client(uint64_t a1, const void **a2, uint64_t **a3)
{
  uint64_t v4 = a2;
  *(void *)timeval buf = a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 24), a2, (uint64_t)&std::piecewise_construct, (long long **)buf);
  uint64_t v8 = *a3;
  int v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v6[8];
  v6[7] = v8;
  v6[8] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg) {
      goto LABEL_6;
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
LABEL_6:
      int v11 = logging_obg;
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        if (*((char *)v4 + 23) < 0) {
          uint64_t v4 = (const void **)*v4;
        }
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)timeval buf = 136315394;
        *(void *)&uint8_t buf[4] = v4;
        __int16 v14 = 2048;
        uint64_t v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Add client:%s Number of Internal clients remaining: %lu", buf, 0x16u);
      }
      return;
    }
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    -[PowerEventHandler_Rcp init:]();
  }
}

void InternalIPCAPI::remove_client(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__erase_unique<std::string>((void *)(a1 + 24), a2);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(v2 + 23) < 0) {
        uint64_t v2 = *(void *)v2;
      }
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 136315394;
      uint64_t v8 = v2;
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Remove client:%s Number of Internal clients remaining: %lu", (uint8_t *)&v7, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void InternalIPCAPI::CallbackOtctl_Helper(int a1, char *__s, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  size_t v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_8:
  }
    memcpy(p_dst, __s, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  int v15 = std::string::compare(&__dst, "Done\n");
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = a5;
      if (*((char *)a5 + 23) < 0) {
        uint64_t v17 = (uint64_t *)*a5;
      }
      if (*((char *)a4 + 23) < 0) {
        a4 = (uint64_t *)*a4;
      }
      uint64_t v18 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)timeval buf = 136315906;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v24 = 2080;
      BOOL v25 = a4;
      __int16 v26 = 2080;
      int v27 = v18;
      aBlocuint64_t k = 1024;
      BOOL aBlock_2 = v15 != 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "WPANTUND-InternalIPCAPI Sending Internal response for method \"%s\" to \"%s\", retString : %s, ret = %d", buf, 0x26u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*a6 && a6[1])
  {
    v20[0] = 0;
    v20[1] = 0;
    int v19 = v20;
    HIBYTE(v26) = 6;
    strcpy(buf, "method");
    size_t v22 = buf;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v19, (const void **)buf, (uint64_t)&std::piecewise_construct, &v22);
    operator new();
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1000DC628(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *aBlock)
{
}

void InternalIPCAPI::CallbackWithStatus2_Helper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, void *a7)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    std::string::size_type v11 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = a5;
      if (*((char *)a5 + 23) < 0) {
        uint64_t v12 = (uint64_t *)*a5;
      }
      if (*((char *)a4 + 23) < 0) {
        a4 = (uint64_t *)*a4;
      }
      *(_DWORD *)timeval buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v17 = 2080;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "WPANTUND-InternalIPCAPI Sending response for method \"%s\" to \"%s\"", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*a7)
  {
    if (a7[1])
    {
      v14[0] = 0;
      v14[1] = 0;
      uint64_t v13 = v14;
      char v19 = 6;
      strcpy(buf, "method");
      int v15 = buf;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v13, (const void **)buf, (uint64_t)&std::piecewise_construct, &v15);
      operator new();
    }
  }
}

void sub_1000DCC78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *aBlock)
{
}

void InternalIPCAPI::CallbackWithStatus_Helper(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    std::string::size_type v11 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = a5;
      if (*((char *)a5 + 23) < 0) {
        uint64_t v12 = (uint64_t *)*a5;
      }
      if (*((char *)a4 + 23) < 0) {
        a4 = (uint64_t *)*a4;
      }
      *(_DWORD *)timeval buf = 136315650;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v17 = 2080;
      uint64_t v18 = a4;
      __int16 v19 = 1024;
      LODWORD(v20) = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "ThreadRadioD-InternalIPCAPI Sending Internal response for method \"%s\" to \"%s\", ret : %d", buf, 0x1Cu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*a6)
  {
    if (a6[1])
    {
      v14[0] = 0;
      v14[1] = 0;
      uint64_t v13 = v14;
      HIBYTE(v19) = 6;
      strcpy(buf, "method");
      int v15 = buf;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v13, (const void **)buf, (uint64_t)&std::piecewise_construct, &v15);
      operator new();
    }
  }
}

void sub_1000DD200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *aBlock)
{
}

void InternalIPCAPI::CallbackWithStatusArg1_Helper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v12 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = a5;
      if (*((char *)a5 + 23) < 0)
      {
        uint64_t v13 = (uint64_t *)*a5;
        uint64_t v14 = a6;
        if ((*((char *)a6 + 23) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*((char *)a4 + 23) & 0x80000000) == 0)
          {
LABEL_7:
            *(_DWORD *)timeval buf = 136315650;
            *(void *)&uint8_t buf[4] = v13;
            __int16 v20 = 2080;
            uint64_t v21 = v14;
            __int16 v22 = 2080;
            int v23 = a4;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "ThreadRadioD-InternalIPCAPI Sending internal response for method \"%s\" for property \"%s\" to \"%s\"", buf, 0x20u);
            goto LABEL_10;
          }
LABEL_22:
          a4 = (uint64_t *)*a4;
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v14 = a6;
        if ((*((char *)a6 + 23) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      uint64_t v14 = (uint64_t *)*a6;
      if ((*((char *)a4 + 23) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_22;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
LABEL_10:
  if (*a7 && a7[1])
  {
    int v15 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v15)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)timeval buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Callbackwithstatusarg1_helper method", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    v17[0] = 0;
    v17[1] = 0;
    size_t v16 = v17;
    HIBYTE(v22) = 6;
    strcpy(buf, "method");
    uint64_t v18 = buf;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v16, (const void **)buf, (uint64_t)&std::piecewise_construct, &v18);
    operator new();
  }
}

void sub_1000DDB0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *aBlock)
{
}

void InternalIPCAPI::getProperty(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v6 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = (const std::string::value_type *)a3;
      if (*(char *)(a3 + 23) < 0) {
        int v7 = *(const std::string::value_type **)a3;
      }
      std::string::size_type v8 = a2;
      if (*(char *)(a2 + 23) < 0) {
        std::string::size_type v8 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "OTD InternalIPCAPI Handling method handler for property \"%s\" for client \"%s\"", (uint8_t *)&buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string buf = *(std::string *)a3;
  }
  operator new();
}

void sub_1000DDF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if (*(char *)(v30 - 57) < 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if (*(char *)(v30 - 57) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v30 - 80));
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int,boost::any const&)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(int,boost::any const&)>::function<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(v4, &v2);
}

void sub_1000DE104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000DE120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN14InternalIPCAPI16property_changedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyE_block_invoke(uint64_t a1)
{
  uint64_t SystemTime = TelephonyUtilGetSystemTime();
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  --numPendingEventsToRcvResponse;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = SystemTime - v3;
      int v7 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        int v7 = (void *)*v7;
      }
      int v8 = 136316162;
      uint64_t v9 = v7;
      __int16 v10 = 2048;
      uint64_t v11 = TelephonyUtilGetSystemTime();
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      __int16 v14 = 2048;
      uint64_t v15 = numPendingEventsToBeSent;
      __int16 v16 = 2048;
      uint64_t v17 = numPendingEventsToRcvResponse;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "All Internal Clients Rcvd the Property Changed Event: %s, at: %llu, conf_time: %lld numPendingEventsToBeSent:%llu numPendingEventsToRcvResponse: %lld", (uint8_t *)&v8, 0x34u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN14InternalIPCAPI16property_changedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyE_block_invoke_27(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  --numPendingEventsToBeSent;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v4 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      *(_DWORD *)std::string buf = 136315906;
      __int16 v16 = v5;
      __int16 v17 = 2048;
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      __int16 v19 = 2048;
      uint64_t v20 = numPendingEventsToBeSent;
      __int16 v21 = 2048;
      uint64_t v22 = numPendingEventsToRcvResponse;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Posted event (%s) to Internal Broadcast Event Handler, at: %llu, numPendingEventsToBeSent: %lld numPendingEventsToRcvResponse:%lld ", buf, 0x2Au);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 40);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    uint64_t v13 = v7;
    int v8 = *(const void **)(a1 + 72);
    if (v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v13 = 0;
    int v8 = *(const void **)(a1 + 72);
    if (v8)
    {
LABEL_14:
      uint64_t v9 = _Block_copy(v8);
      __int16 v10 = *(NSObject **)(a1 + 80);
      uint64_t v11 = v9;
      __int16 v12 = v10;
      if (!v10) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  uint64_t v9 = 0;
  __int16 v10 = *(NSObject **)(a1 + 80);
  uint64_t v11 = 0;
  __int16 v12 = v10;
  if (v10) {
LABEL_15:
  }
    dispatch_retain(v10);
LABEL_16:
  InternalIPCAPI::IntBroadcastEvent(v2, (const std::string::value_type *)&v14, &v13, (uint64_t)&v11);
  if (v10) {
    dispatch_release(v10);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1000DE54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c17_ZTSKN5boost3anyE72c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v5 = *(void *)(a2 + 64);
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5) {
LABEL_5:
  }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
LABEL_6:
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void **)(a2 + 72);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void sub_1000DE678(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c17_ZTSKN5boost3anyE72c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    operator delete(v5);
  }
}

uint64_t InternalIPCAPI::signal_property_changed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(RcpHostContext::sRcpHostContext + 184), a2, a3);
}

void ___ZN14InternalIPCAPI17IntBroadcastEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v2 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
    {
      uint64_t v2 = (void *)*v2;
      long long v3 = (void *)(a1 + 56);
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v3 = (void *)(a1 + 56);
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      {
LABEL_4:
        int v4 = 136315650;
        uint64_t v5 = v2;
        __int16 v6 = 2080;
        uint64_t v7 = v3;
        __int16 v8 = 2048;
        uint64_t SystemTime = TelephonyUtilGetSystemTime();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback from internal client: %s for event: %s, at: %llu", (uint8_t *)&v4, 0x20u);
        goto LABEL_5;
      }
    }
    long long v3 = (void *)*v3;
    goto LABEL_4;
  }
LABEL_5:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
    uint64_t v5 = (std::string *)(a1 + 56);
    if ((*(char *)(a2 + 79) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
    uint64_t v5 = (std::string *)(a1 + 56);
    if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 56);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
}

void sub_1000DE8D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 32);

  operator delete(v2);
}

uint64_t std::pair<std::string const,std::shared_ptr<InternalClient>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void ___ZN14InternalIPCAPI17IntBroadcastEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost3anyEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_30(uint64_t a1)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    long long v3 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      long long v3 = (void *)*v3;
    }
    *(_DWORD *)__int16 v8 = 136315394;
    *(void *)&v8[4] = v3;
    *(_WORD *)&v8[12] = 2048;
    *(void *)&v8[14] = TelephonyUtilGetSystemTime();
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "All clients were informed for: %s at: %llu", v8, 0x16u);
  }
  long long v4 = *(const void **)(a1 + 56);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = *(NSObject **)(a1 + 64);
  *(void *)__int16 v8 = _NSConcreteStackBlock;
  *(void *)&v8[8] = 1174405120;
  *(void *)&v8[16] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  uint64_t v9 = &__block_descriptor_tmp_141;
  if (!v5)
  {
    aBlocuint64_t k = 0;
    dispatch_async(v6, v8);
    uint64_t v7 = aBlock;
    if (!aBlock) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  aBlocuint64_t k = _Block_copy(v5);
  dispatch_async(v6, v8);
  uint64_t v7 = aBlock;
  if (aBlock) {
LABEL_12:
  }
    _Block_release(v7);
LABEL_13:
  if (v5) {
    _Block_release(v5);
  }
}

void sub_1000DEB68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
    long long v6 = *(void **)(a2 + 56);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  long long v6 = *(void **)(a2 + 56);
  if (v6) {
LABEL_5:
  }
    long long v6 = _Block_copy(v6);
LABEL_6:
  uint64_t v7 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void InternalIPCAPI::interface_send_ping_req()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  char v4 = 6;
  strcpy((char *)buf, "method");
  uint64_t v2 = buf;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v0, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v2);
  operator new();
}

void sub_1000DF0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,char *a26,uint64_t a27,char a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a25, a26);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v28 - 168, *(char **)(v28 - 160));
  _Unwind_Resume(a1);
}

void boost::bind<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>,InternalIPCAPI*,boost::arg<1>,std::map<std::string,boost::any>,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v35[0] = 0;
  v35[1] = 0;
  std::string v34 = v35;
  uint64_t v15 = a4 + 1;
  __int16 v16 = *a4;
  if (*a4 != (const void **)(a4 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)&v34, (uint64_t *)v35, v16 + 4, (uint64_t)(v16 + 4));
      __int16 v17 = (const void **)v16[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = (const void ***)v17;
          __int16 v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (const void ***)v16[2];
          BOOL v19 = *v18 == v16;
          __int16 v16 = (const void **)v18;
        }
        while (!v19);
      }
      __int16 v16 = (const void **)v18;
    }
    while (v18 != v15);
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v33 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v32 = *(std::string *)a6;
  }
  uint64_t v20 = *(void **)a7;
  if (*(void *)a7) {
    uint64_t v20 = _Block_copy(v20);
  }
  __int16 v21 = *(NSObject **)(a7 + 8);
  uint64_t v30 = v20;
  dispatch_object_t v31 = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::list6((uint64_t)&v36, a3, (const void ***)&v34, (uint64_t)&v33, (uint64_t)&v32, (uint64_t)&v30);
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  uint64_t v22 = v37;
  *(void *)(a8 + 16) = v36;
  *(void *)(a8 + 32) = 0;
  *(void *)(a8 + 24) = a8 + 32;
  *(void *)(a8 + 40) = 0;
  if (v22 != v38)
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)(a8 + 24), (uint64_t *)(a8 + 32), (const void **)v22 + 4, (uint64_t)(v22 + 4));
      __int16 v24 = v22[1];
      if (v24)
      {
        do
        {
          BOOL v25 = (char **)v24;
          __int16 v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          BOOL v25 = (char **)v22[2];
          BOOL v19 = *v25 == (char *)v22;
          uint64_t v22 = v25;
        }
        while (!v19);
      }
      uint64_t v22 = v25;
    }
    while (v25 != v38);
  }
  int v23 = (std::string *)(a8 + 48);
  if (SHIBYTE(v40) < 0)
  {
    std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v39, *((std::string::size_type *)&v39 + 1));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v39;
    *(void *)(a8 + 64) = v40;
  }
  __int16 v26 = (std::string *)(a8 + 72);
  if (SHIBYTE(v42) < 0)
  {
    std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = __p;
    *(void *)(a8 + 88) = v42;
  }
  int v27 = aBlock;
  if (aBlock) {
    int v27 = _Block_copy(aBlock);
  }
  uint64_t v28 = object;
  *(void *)(a8 + 96) = v27;
  *(void *)(a8 + 104) = v28;
  if (v28)
  {
    dispatch_retain(v28);
    if (object) {
      dispatch_release(object);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v42) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_42:
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v37, v38[0]);
      unsigned int v29 = v31;
      if (!v31) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete((void *)v39);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v37, v38[0]);
  unsigned int v29 = v31;
  if (v31) {
LABEL_43:
  }
    dispatch_release(v29);
LABEL_44:
  if (v30) {
    _Block_release(v30);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_53:
    operator delete(v33.__r_.__value_.__l.__data_);
    goto LABEL_48;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_53;
  }
LABEL_48:
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v34, v35[0]);
}

void sub_1000DF4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,char *a26,uint64_t a27,char a28)
{
  boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>>::~storage4(v28);
  boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::~list6((uint64_t)&a28);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a25, a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void sub_1000DF5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v6, (uint64_t)(a2 + 1));
  long long v3 = (void *)*((void *)a2 + 12);
  if (v3) {
    long long v3 = _Block_copy(v3);
  }
  char v4 = *((void *)a2 + 13);
  v6[10] = v3;
  v6[11] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(v7, (uint64_t)&v5);
}

void sub_1000DF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000DF6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 104);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 96);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_9:
    operator delete(*(void **)(a1 + 48));
    goto LABEL_7;
  }
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_9;
  }
LABEL_7:
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  return a1;
}

void InternalIPCAPI::interface_get_device_data_diag_req()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  char v4 = 6;
  strcpy((char *)buf, "method");
  uint64_t v2 = buf;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v0, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v2);
  operator new();
}

void sub_1000DFBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,char *a26,uint64_t a27,char a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a25, a26);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v28 - 168, *(char **)(v28 - 160));
  _Unwind_Resume(a1);
}

void InternalIPCAPI::interface_send_network_diagnostics_req(uint64_t a1, uint64_t *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  long long v3 = v4;
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v2);
  operator new();
}

void sub_1000E0484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a27 < 0)
  {
    operator delete(__p);
    uint64_t v50 = a28;
    if (!a28)
    {
LABEL_3:
      if (*(char *)(v48 - 193) < 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v50 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  if (*(char *)(v48 - 193) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v48 - 216));
    if (v47) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  if (v47)
  {
LABEL_5:
    operator delete(v47);
    if (!v46) {
      goto LABEL_12;
    }
LABEL_11:
    operator delete(v46);
LABEL_12:
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v48 - 192, *(char **)(v48 - 184));
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v48 - 168, *(char **)(v48 - 160));
    _Unwind_Resume(a1);
  }
LABEL_10:
  if (!v46) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t boost::bind<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>,InternalIPCAPI*,boost::arg<1>,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = *a4;
  if (*a4) {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  uint64_t v24 = v15;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v23 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v22 = *(std::string *)a6;
  }
  __int16 v16 = *(void **)a7;
  if (*(void *)a7) {
    __int16 v16 = _Block_copy(v16);
  }
  __int16 v17 = *(NSObject **)(a7 + 8);
  uint64_t v20 = v16;
  dispatch_object_t v21 = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::list6(&v25, a3, &v24, (uint64_t)&v23, (uint64_t)&v22, (uint64_t)&v20);
  *a8 = a1;
  a8[1] = a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)(a8 + 2), (uint64_t)&v25);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v30 < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_19:
      uint64_t v18 = v26;
      if (!v26) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v27);
  uint64_t v18 = v26;
  if (v26) {
LABEL_20:
  }
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
LABEL_21:
  if (v21) {
    dispatch_release(v21);
  }
  if (v20) {
    _Block_release(v20);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      uint64_t result = v24;
      if (!v24) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  uint64_t result = v24;
  if (!v24) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000E0850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v26 = a24;
    if (!a24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v26 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(v4, &v2);
}

void sub_1000E0A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000E0A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 32));
    uint64_t v4 = *(void *)(a1 + 24);
    if (!v4) {
      return a1;
    }
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

void InternalIPCAPI::interface_update_primary_resident_handler()
{
}

void sub_1000E0F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,char *a27,uint64_t a28,char a29)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a26, a27);
  if ((*(char *)(v29 - 169) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v29 - 168, *(char **)(v29 - 160));
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v29 - 192));
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v29 - 168, *(char **)(v29 - 160));
  _Unwind_Resume(a1);
}

void InternalIPCAPI::interface_wed_start_handler()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  operator new();
}

void sub_1000E1524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,char *a25,uint64_t a26,char a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a24, a25);
  if ((*(char *)(v27 - 169) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v27 - 168, *(char **)(v27 - 160));
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v27 - 192));
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v27 - 168, *(char **)(v27 - 160));
  _Unwind_Resume(a1);
}

void InternalIPCAPI::interface_wed_stop_handler()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  operator new();
}

void sub_1000E1AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,char *a25,uint64_t a26,char a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a24, a25);
  if ((*(char *)(v27 - 153) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v27 - 152, *(char **)(v27 - 144));
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v27 - 176));
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v27 - 152, *(char **)(v27 - 144));
  _Unwind_Resume(a1);
}

void InternalIPCAPI::interface_leave_handler(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v3 = v4;
  if (a3) {
    operator new();
  }
  operator new();
}

void sub_1000E2440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,char *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a24, a25);
  if ((*(char *)(v59 - 153) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v59 - 152, *(char **)(v59 - 144));
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v59 - 176));
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v59 - 152, *(char **)(v59 - 144));
  _Unwind_Resume(a1);
}

void boost::function<void ()(char const*)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v6, (uint64_t)(a2 + 1));
  uint64_t v3 = (void *)*((void *)a2 + 12);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  uint64_t v4 = *((void *)a2 + 13);
  v6[10] = v3;
  v6[11] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  boost::function<void ()(char const*)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(v7, (uint64_t)&v5);
}

void sub_1000E2724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000E2740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void InternalIPCAPI::interface_form_handler(uint64_t a1, uint64_t *a2)
{
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v2);
  operator new();
}

void sub_1000E427C()
{
}

void sub_1000E4500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (*(char *)(v55 - 105) < 0) {
    operator delete(*(void **)(v55 - 128));
  }
  if (a55) {
    JUMPOUT(0x1000E4468);
  }
  JUMPOUT(0x1000E44BCLL);
}

void InternalIPCAPI::interface_join_handler(uint64_t a1, uint64_t *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v3 = v4;
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v2);
  operator new();
}

void sub_1000E5298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a27 < 0)
  {
    operator delete(__p);
    uint64_t v61 = a28;
    if (!a28) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v61 = a28;
    if (!a28)
    {
LABEL_6:
      if (a52 < 0) {
        operator delete(a47);
      }
      if (v58) {
        operator delete(v58);
      }
      if (a58 < 0) {
        operator delete(a53);
      }
      if (*(char *)(v59 - 233) < 0) {
        operator delete(*(void **)(v59 - 256));
      }
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v59 - 224, *(char **)(v59 - 216));
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v59 - 200, *(char **)(v59 - 192));
      _Unwind_Resume(a1);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  goto LABEL_6;
}

void sub_1000E54DC()
{
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1000E5498);
  }
  JUMPOUT(0x1000E549CLL);
}

void InternalIPCAPI::interface_reset_handler()
{
}

void sub_1000E5964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,char *a25,uint64_t a26,char a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v27 - 112, *(char **)(v27 - 104));
  if (*(char *)(v27 - 129) < 0) {
    operator delete(*(void **)(v27 - 152));
  }
  _Unwind_Resume(a1);
}

void InternalIPCAPI::interface_energy_scan_start_handler(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  v4[3] = v5;
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v4);
  char v8 = 6;
  strcpy((char *)buf, "method");
  long long v6 = buf;
  long long v2 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v6);
  any_to_string((const boost::any *)(v2 + 7), (uint64_t)&__p);
  if (v8 < 0) {
    operator delete(*(void **)buf);
  }
  operator new();
}

void sub_1000E5F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v45 = a25;
    if (!a25) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v45 = a25;
    if (!a25)
    {
LABEL_6:
      if (a43 < 0) {
        operator delete(a38);
      }
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v43 - 176, *(char **)(v43 - 168));
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v43 - 152, *(char **)(v43 - 144));
      _Unwind_Resume(a1);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  goto LABEL_6;
}

void InternalIPCAPI::interface_discover_scan_start_handler()
{
}

void sub_1000E6B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,char *a30,uint64_t a31,char a32)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a29, a30);
  if (*(char *)(v32 - 193) < 0) {
    operator delete(*(void **)(v32 - 216));
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v32 - 192, *(char **)(v32 - 184));
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v32 - 168, *(char **)(v32 - 160));
  _Unwind_Resume(a1);
}

void sub_1000E6C6C()
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v0 + 16));
  operator delete();
}

void InternalIPCAPI::interface_net_scan_start_handler(uint64_t a1, uint64_t *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v3 = v4;
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v2);
  operator new();
}

void sub_1000E71DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v45 = a25;
    if (!a25) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v45 = a25;
    if (!a25)
    {
LABEL_6:
      if (a43 < 0) {
        operator delete(a38);
      }
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v43 - 176, *(char **)(v43 - 168));
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v43 - 152, *(char **)(v43 - 144));
      _Unwind_Resume(a1);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  goto LABEL_6;
}

void sub_1000E7314()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x1000E72F0);
  }
  JUMPOUT(0x1000E72F4);
}

void InternalIPCAPI::interface_hard_reset_handler(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3)
  {
    if (a3[1])
    {
      v4[0] = 0;
      v4[1] = 0;
      uint64_t v3 = v4;
      char v6 = 6;
      strcpy((char *)&__p, "method");
      p_p = &__p;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v3, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      operator new();
    }
  }
}

void sub_1000E76C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *aBlock,uint64_t a23,uint64_t a24)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a12, a13);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void InternalIPCAPI::interface_status_handler(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v23);
  char v26 = 6;
  strcpy(buf, "method");
  uint64_t v24 = buf;
  char v6 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23, (const void **)buf, (uint64_t)&std::piecewise_construct, &v24);
  any_to_string((const boost::any *)(v6 + 7), (uint64_t)&v22);
  if (v26 < 0) {
    operator delete(*(void **)buf);
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      char v8 = &v22;
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&_DWORD buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "InternalIPCAPI Handling \"%s\" method handler for \"%s\"", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)buf);
  if (v26 < 0)
  {
    if (*(void *)&buf[8] != 7)
    {
      if (*(void *)&buf[8] == 13
        && **(void **)buf == 0x616974696E696E75
        && *(void *)(*(void *)buf + 5) == 0x64657A696C616974)
      {
        goto LABEL_41;
      }
LABEL_35:
      operator new();
    }
    __int16 v12 = *(int **)buf;
LABEL_31:
    int v13 = *v12;
    int v14 = *(int *)((char *)v12 + 3);
    if (v13 == 1818650223 && v14 == 1701734764) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
  if (v26 == 7)
  {
    __int16 v12 = (int *)buf;
    goto LABEL_31;
  }
  if (v26 != 13) {
    goto LABEL_35;
  }
  if (*(void *)buf != 0x616974696E696E75 || *(void *)&buf[5] != 0x64657A696C616974) {
    goto LABEL_35;
  }
LABEL_41:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v21 = v22;
  }
  __int16 v16 = *(void **)a4;
  if (*(void *)a4)
  {
    __int16 v16 = _Block_copy(v16);
    __int16 v17 = v16;
    uint64_t v18 = *(NSObject **)(a4 + 8);
    BOOL v19 = v16;
    uint64_t v20 = v18;
    if (!v18) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  __int16 v17 = 0;
  uint64_t v18 = *(NSObject **)(a4 + 8);
  BOOL v19 = 0;
  uint64_t v20 = v18;
  if (v18) {
LABEL_46:
  }
    dispatch_retain(v18);
LABEL_47:
  InternalIPCAPI::status_offline_response_helper((uint64_t)v16, 0, v9, &v19);
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v26 < 0)
  {
    operator delete(*(void **)buf);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    operator delete(v22.__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_40;
  }
LABEL_38:
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)v23, (char *)v23[1]);
}

void sub_1000E7B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (*(char *)(v33 - 121) < 0) {
    operator delete(*(void **)(v33 - 144));
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v33 - 120, *(char **)(v33 - 112));
  _Unwind_Resume(a1);
}

void InternalIPCAPI::status_offline_response_helper(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4 && a4[1])
  {
    v9[0] = 0;
    v9[1] = 0;
    char v8 = v9;
    RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)&block);
    std::string::size_type size = HIBYTE(block.__r_.__value_.__r.__words[2]);
    if ((block.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = block.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      char v7 = 9;
      strcpy((char *)__p, "NCP:State");
      v5.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v8, (const void **)__p, (uint64_t)&std::piecewise_construct, &v5);
      operator new();
    }
    std::string::assign(&block, "true");
    char v7 = 14;
    strcpy((char *)__p, "Daemon:Enabled");
    v5.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v8, (const void **)__p, (uint64_t)&std::piecewise_construct, &v5);
    operator new();
  }
}

void sub_1000E8A34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void sub_1000E8D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock,uint64_t a30,char *a31)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v32, a31);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v31) {
    _Block_release(v31);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void InternalIPCAPI::status_response_helper(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4)
  {
    if (a4[1])
    {
      v9[0] = 0;
      v9[1] = 0;
      uint64_t v7 = 0;
      char v8 = v9;
      time_t v6 = 0;
      time(&v6);
      uint64_t v4 = ctime(&v6);
      v4[strcspn(v4, "\n")] = 0;
      char v11 = 14;
      strcpy((char *)__p, "Status at Time");
      v5.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v8, (const void **)__p, (uint64_t)&std::piecewise_construct, &v5);
      operator new();
    }
  }
}

void sub_1000EACEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *aBlock,uint64_t a41,uint64_t a42)
{
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    uint64_t v3 = (void *)*((void *)a2 + 6);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
    uint64_t v3 = (void *)*((void *)a2 + 6);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *((void *)a2 + 7);
      aBlocuint64_t k = v3;
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(v10, (uint64_t)&v5);
    }
  }
  uint64_t v3 = _Block_copy(v3);
  goto LABEL_6;
}

void sub_1000EB158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000EB174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void InternalIPCAPI::setProperty(uint64_t a1, uint64_t *a2)
{
  boost::any_cast<std::map<std::string,boost::any>>(a2, (uint64_t)v2);
  operator new();
}

void sub_1000EB8C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1000EBA60()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0x1000EBA48);
  }
  JUMPOUT(0x1000EBA4CLL);
}

uint64_t boost::bind<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>,InternalIPCAPI*,boost::arg<1>,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v17 = *a4;
  if (*a4) {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  uint64_t v29 = v17;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v28 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v27 = *(std::string *)a6;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v26 = *(std::string *)a7;
  }
  uint64_t v18 = *(void **)a8;
  if (*(void *)a8) {
    uint64_t v18 = _Block_copy(v18);
  }
  BOOL v19 = *(NSObject **)(a8 + 8);
  uint64_t v24 = v18;
  dispatch_object_t v25 = v19;
  if (v19) {
    dispatch_retain(v19);
  }
  boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::list7(&v30, a3, &v29, (uint64_t)&v28, (uint64_t)&v27, (uint64_t)&v26, (uint64_t)&v24);
  *a9 = a1;
  a9[1] = a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(a9 + 2, (uint64_t)&v30);
  uint64_t v20 = aBlock;
  if (aBlock) {
    uint64_t v20 = _Block_copy(aBlock);
  }
  std::string v21 = object;
  a9[13] = v20;
  a9[14] = v21;
  if (v21)
  {
    dispatch_retain(v21);
    if (object) {
      dispatch_release(object);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v37 < 0)
  {
    operator delete(__p);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_25:
      if ((v33 & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_40;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_26:
    uint64_t v22 = v31;
    if (!v31) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_40:
  operator delete(v32);
  uint64_t v22 = v31;
  if (v31) {
LABEL_27:
  }
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
LABEL_28:
  if (v25) {
    dispatch_release(v25);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_44;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    uint64_t result = v29;
    if (!v29) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
LABEL_44:
  operator delete(v28.__r_.__value_.__l.__data_);
  uint64_t result = v29;
  if (!v29) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000EBD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v34 = a32;
      if (!a32) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  uint64_t v34 = a32;
  if (!a32) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int)>::operator=<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v6, (uint64_t)(a2 + 1));
  uint64_t v3 = (void *)*((void *)a2 + 13);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  uint64_t v4 = *((void *)a2 + 14);
  v6[11] = v3;
  v6[12] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(v7, (uint64_t)&v5);
}

void sub_1000EBF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<void ()(std::string const&,boost::any const&)>::~function((uint64_t *)(v9 - 48));
  boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000EBF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>::~bind_t(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 112);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 104);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_13:
      operator delete(*(void **)(a1 + 32));
      uint64_t v4 = *(void *)(a1 + 24);
      if (!v4) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
LABEL_9:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

void InternalIPCAPI::interface_generate_pskc()
{
  memset(&__str, 0, sizeof(__str));
  operator new();
}

void sub_1000ECAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,_Unwind_Exception *exception_object,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a41 < 0)
  {
    operator delete(__p);
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a50 & 0x80000000) == 0)
    {
LABEL_8:
      if (a62 < 0) {
        operator delete(a57);
      }
      if (*(char *)(v62 - 217) < 0) {
        operator delete(*(void **)(v62 - 240));
      }
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v62 - 216, *(char **)(v62 - 208));
      if (*(char *)(v62 - 169) < 0) {
        operator delete(*(void **)(v62 - 192));
      }
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(exception_object);
    goto LABEL_8;
  }
  operator delete(a51);
  if ((a50 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::~list6(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_9:
    operator delete(*(void **)(a1 + 32));
    goto LABEL_7;
  }
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_9;
  }
LABEL_7:
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

uint64_t boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>>::~storage4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

uint64_t boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::~list6(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 16));
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      return a1;
    }
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

uint64_t boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::~storage5(uint64_t a1)
{
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 16));
    uint64_t v2 = *(void *)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
LABEL_4:
  }
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  return a1;
}

uint64_t boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>>::~storage4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    uint64_t v2 = *(void *)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  return a1;
}

uint64_t boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::~list7(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_13:
      operator delete(*(void **)(a1 + 16));
      uint64_t v4 = *(void *)(a1 + 8);
      if (!v4) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
LABEL_9:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::destroy(a1, *(void *)(a2 + 8));
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_5:
        long long v5 = (void *)a2;
LABEL_7:
        operator delete(v5);
        return;
      }
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(a2 + 32));
    long long v5 = (void *)a2;
    goto LABEL_7;
  }
}

uint64_t boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::list3<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function2<void,std::string const&,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::list3<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>>>>(boost::_bi::bind_t<void,boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::list3<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000ED128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    int v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::list3<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F4E11 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F4E11 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::list3<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>>>,void,std::string const&,boost::any const&>::invoke(uint64_t a1, long long *a2, long long *a3)
{
  v3[0] = a2;
  v3[1] = a3;
  boost::_bi::list3<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::arg<2>>::operator()<boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::rrlist2<std::string const&,boost::any const&>>((uint64_t *)(a1 + 16), a1, v3);
}

void boost::_bi::list3<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::arg<2>>::operator()<boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>,boost::_bi::rrlist2<std::string const&,boost::any const&>>(uint64_t *a1, uint64_t a2, long long **a3)
{
  uint64_t v5 = *a1;
  long long v6 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    uint64_t v8 = *(void *)a3[1];
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v7 = *v6;
  v10.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v7;
  uint64_t v8 = *(void *)a3[1];
  if (v8) {
LABEL_5:
  }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
LABEL_6:
  uint64_t v9 = v8;
  boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>::operator()(a2, v5, (uint64_t)&v10, &v9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1000ED370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf2<void,InternalIPCAPI,std::string,boost::any>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v6 = *(void (**)(void *, std::string *, uint64_t *))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  long long v7 = (void *)(a2 + (v5 >> 1));
  if ((v5 & 1) == 0)
  {
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    uint64_t v8 = *a4;
    if (!*a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v6 = *(void (**)(void *, std::string *, uint64_t *))(*v7 + v6);
  if (*(char *)(a3 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v10 = *(std::string *)a3;
  uint64_t v8 = *a4;
  if (*a4) {
LABEL_7:
  }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
LABEL_8:
  uint64_t v9 = v8;
  v6(v7, &v10, &v9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1000ED4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function1<void,nl::wpantund::WPAN::NetworkInstance const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>(boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000ED584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    int v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F4EC7 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F4EC7 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::WPAN::NetworkInstance const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>,void,nl::wpantund::WPAN::NetworkInstance const&>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(void *))a1;
  uint64_t v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t boost::signals2::slot<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function1<void,nl::wpantund::EnergyScanResultEntry const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>(boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000ED754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    int v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F4F50 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F4F50 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,nl::wpantund::EnergyScanResultEntry const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>,void,nl::wpantund::EnergyScanResultEntry const&>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(void *))a1;
  uint64_t v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::connect(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 24);
  v3[20] = (void *)10;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = v2;
  pthread_mutex_lock(v2);
  boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::nolock_connect((uint64_t ***)a1, v3);
}

void sub_1000ED9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::nolock_connect(uint64_t ***a1, void *a2)
{
}

void sub_1000EDC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::create_new_connection(uint64_t ***a1, void *a2)
{
}

void sub_1000EDD00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EDD90()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::nolock_force_unique_connection_list(uint64_t ***a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (!v2 || atomic_load_explicit((atomic_uint *volatile)v2 + 2, memory_order_acquire) != 1) {
    operator new();
  }
  uint64_t v3 = **a1;
  uint64_t v4 = a1[2];
  if (v4 == (uint64_t **)v3) {
    uint64_t v4 = (uint64_t **)v3[1];
  }
  *(void *)&long long v6 = v4;
  return boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(a1, a2, 1, (uint64_t **)&v6, 2);
}

void sub_1000EDF34()
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::nolock_cleanup_connections_from(uint64_t ***a1, void *a2, char a3, uint64_t **a4, int a5)
{
  uint64_t result = *a4;
  uint64_t v22 = result;
  uint64_t v7 = *a1;
  uint64_t v8 = **a1;
  if (v8 != result)
  {
    unsigned int v9 = a5 - 1;
    if (a3)
    {
      unsigned int v11 = 0;
      do
      {
        uint64_t v13 = result[2];
        int v14 = *(uint64_t **)(v13 + 32);
        if (v14)
        {
          for (uint64_t i = *v14; i != v14[1]; i += 24)
          {
            if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
            {
              if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
                goto LABEL_18;
              }
            }
            else
            {
              uint64_t v16 = *(void *)(i + 16);
              if (!v16 || !atomic_load_explicit((atomic_uint *volatile)(v16 + 8), memory_order_acquire))
              {
LABEL_18:
                if (*(unsigned char *)(v13 + 24))
                {
                  *(unsigned char *)(v13 + 24) = 0;
                  boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v13, a2);
                }
                break;
              }
            }
          }
        }
        uint64_t v17 = v22[2];
        if (*(unsigned char *)(v17 + 24)) {
          uint64_t result = (uint64_t *)v22[1];
        }
        else {
          uint64_t result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::erase(**a1, (int *)(v17 + 64), &v22);
        }
        uint64_t v22 = result;
        ++v11;
      }
      while (result != **a1 && v9 >= v11);
    }
    else
    {
      unsigned int v18 = 1;
      do
      {
        while (1)
        {
          uint64_t v20 = result[2];
          if (*(unsigned char *)(v20 + 24)) {
            break;
          }
          uint64_t result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::erase(v8, (int *)(v20 + 64), &v22);
          uint64_t v7 = *a1;
          uint64_t v22 = result;
          uint64_t v8 = *v7;
          if (result == *v7 || v9 < v18++) {
            goto LABEL_33;
          }
        }
        uint64_t result = (uint64_t *)result[1];
        uint64_t v22 = result;
        uint64_t v8 = *v7;
      }
      while (result != *v7 && v9 >= v18++);
    }
  }
LABEL_33:
  a1[2] = (uint64_t **)result;
  return result;
}

void sub_1000EE188(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EE218()
{
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  long long v6 = a1 + 4;
  long long v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v12 = a1[10];
    if ((uint64_t *)v12 != *a3) {
      goto LABEL_57;
    }
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v8 = v6;
    int v14 = (uint64_t **)(v6 - 1);
    if (v13 != a1)
    {
LABEL_48:
      uint64_t v40 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v14, a2, (uint64_t)&std::piecewise_construct, &v40)[6] = v13;
      goto LABEL_57;
    }
    goto LABEL_12;
  }
  int v7 = *a2;
  if (*a2 == 1)
  {
    uint64_t v8 = v6;
    unsigned int v9 = v5;
    do
    {
      while (1)
      {
        int v10 = *((_DWORD *)v9 + 8);
        BOOL v11 = v10 < 1;
        if (v10 == 1) {
          BOOL v11 = *((_DWORD *)v9 + 10) < a2[2];
        }
        if (!v11) {
          break;
        }
        unsigned int v9 = (uint64_t *)v9[1];
        if (!v9) {
          goto LABEL_26;
        }
      }
      uint64_t v8 = v9;
      unsigned int v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = v6;
    uint64_t v17 = v5;
    do
    {
      int v18 = *((_DWORD *)v17 + 8);
      BOOL v19 = v18 == v7;
      BOOL v20 = v18 < v7;
      if (v18 >= v7) {
        std::string v21 = (uint64_t **)v17;
      }
      else {
        std::string v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        uint64_t v22 = v8;
      }
      else {
        uint64_t v22 = v17;
      }
      if (v19)
      {
        std::string v21 = (uint64_t **)v17;
        uint64_t v8 = v17;
      }
      else
      {
        uint64_t v8 = v22;
      }
      uint64_t v17 = *v21;
    }
    while (*v21);
  }
LABEL_26:
  uint64_t v23 = v8[6];
  if ((uint64_t *)v23 == *a3)
  {
    uint64_t v13 = *(uint64_t **)(v23 + 8);
    int v24 = *a2;
    if (*a2 == 1)
    {
      dispatch_object_t v25 = v6;
      std::string v26 = v5;
      while (1)
      {
        int v27 = *((_DWORD *)v26 + 8);
        if (v27 == 1)
        {
          if (a2[2] < *((_DWORD *)v26 + 10)) {
            goto LABEL_34;
          }
LABEL_29:
          std::string v26 = (uint64_t *)v26[1];
          if (!v26) {
            goto LABEL_46;
          }
        }
        else
        {
          if (v27 <= 1) {
            goto LABEL_29;
          }
LABEL_34:
          dispatch_object_t v25 = v26;
          std::string v26 = (uint64_t *)*v26;
          if (!v26) {
            goto LABEL_46;
          }
        }
      }
    }
    dispatch_object_t v25 = v6;
    std::string v28 = v5;
    do
    {
      int v29 = *((_DWORD *)v28 + 8);
      uint64_t v30 = (uint64_t **)(v28 + 1);
      BOOL v31 = v24 == v29;
      BOOL v32 = v24 < v29;
      if (v24 >= v29) {
        char v33 = (uint64_t **)(v28 + 1);
      }
      else {
        char v33 = (uint64_t **)v28;
      }
      if (!v32) {
        std::string v28 = v25;
      }
      if (v31) {
        char v33 = v30;
      }
      else {
        dispatch_object_t v25 = v28;
      }
      std::string v28 = *v33;
    }
    while (*v33);
LABEL_46:
    if (v25 == v6)
    {
      int v14 = (uint64_t **)(v6 - 1);
      if (v13 != a1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v14 = (uint64_t **)(v6 - 1);
      if (v13 != (uint64_t *)v25[6]) {
        goto LABEL_48;
      }
    }
LABEL_12:
    uint64_t v15 = (uint64_t *)v8[1];
    if (v15)
    {
      do
      {
        uint64_t v16 = v15;
        uint64_t v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      uint64_t v34 = v8;
      do
      {
        uint64_t v16 = (uint64_t *)v34[2];
        BOOL v19 = *v16 == (void)v34;
        uint64_t v34 = v16;
      }
      while (!v19);
    }
    if (*v14 == v8) {
      *int v14 = v16;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v8);
    operator delete(v8);
  }
LABEL_57:
  char v35 = *a3;
  uint64_t v36 = **a3;
  uint64_t v37 = (*a3)[1];
  *(void *)(v36 + 8) = v37;
  *(void *)v35[1] = v36;
  --a1[2];
  uint64_t v38 = (atomic_uint *)v35[3];
  if (v38)
  {
    if (atomic_fetch_add(v38 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v38 + 16))(v38);
      if (atomic_fetch_add(v38 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v38 + 24))(v38);
      }
    }
  }
  operator delete(v35);
  return v37;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>::connection_body(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_100496AB8;
  operator new();
}

void sub_1000EE604()
{
  if (*v0) {
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::connection_body((uint64_t)v0, *v0);
  }
  operator delete();
}

void sub_1000EE648(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>>::shared_ptr<boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>>(&v2);
}

void sub_1000EE724(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete();
}

void boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000EE868(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      long long v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        long long v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete();
  }
  __cxa_rethrow();
}

void sub_1000EE8F8(_Unwind_Exception *a1)
{
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = off_100496AB8;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = off_100495D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>()
{
}

void sub_1000EEBA0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>(v1);
  }
  __cxa_rethrow();
}

void sub_1000EEBB8(_Unwind_Exception *a1)
{
}

uint64_t boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>::slot<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,boost::any const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v5 = (uint64_t)boost::function1<void,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,boost::any const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>(boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,boost::any const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>)::stored_vtable
     + 1;
  boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v5, (uint64_t *)(a1 + 24));
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t, unsigned int))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3((uint64_t)&v6, (uint64_t)&v6, 2u);
      }
    }
  }
  return a1;
}

void sub_1000EEC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v13) {
      v13(v10, v10, 2);
    }
  }
  boost::function<void ()(std::string const&,boost::any const&)>::~function(v11);
  boost::signals2::slot_base::~slot_base(v9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,boost::any const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_WORD *)(a2 + 8) = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F5180 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F5180 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf1<void,InternalIPCAPI,boost::any const&>,boost::_bi::list2<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>>>,void,boost::any const&>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(uint64_t (**)(void *))a1;
  uint64_t v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void boost::any::holder<char const*>::~holder()
{
}

void *boost::any::holder<char const*>::type()
{
}

void boost::any::holder<char const*>::clone()
{
}

void *boost::any::holder<signed char>::type()
{
}

void boost::any::holder<signed char>::clone()
{
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        BOOL v11 = (uint64_t **)v6;
        int v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        long long v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      long long v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    BOOL v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = operator new(0x48uLL);
    int v24 = (std::string *)(v23 + 4);
    dispatch_object_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    void *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *uint64_t v7 = v23;
    int v27 = (uint64_t *)**a1;
    std::string v28 = v23;
    if (v27)
    {
      *a1 = v27;
      std::string v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1000EF008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__erase_unique<std::string>(void *a1, uint64_t a2)
{
  unint64_t v2 = a1 + 1;
  uint64_t v3 = a1[1];
  if (!v3) {
    return 0;
  }
  int v5 = *(char *)(a2 + 23);
  size_t v6 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  uint64_t v7 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v8 = (uint64_t)(a1 + 1);
  do
  {
    int v9 = *(char *)(v3 + 55);
    if (v9 >= 0) {
      size_t v10 = *(unsigned __int8 *)(v3 + 55);
    }
    else {
      size_t v10 = *(void *)(v3 + 40);
    }
    if (v9 >= 0) {
      BOOL v11 = (const void *)(v3 + 32);
    }
    else {
      BOOL v11 = *(const void **)(v3 + 32);
    }
    if (v6 >= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v6;
    }
    int v13 = memcmp(v11, v7, v12);
    BOOL v14 = v10 < v6;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    BOOL v15 = !v14;
    if (v14) {
      size_t v16 = (uint64_t *)(v3 + 8);
    }
    else {
      size_t v16 = (uint64_t *)v3;
    }
    if (v15) {
      uint64_t v8 = v3;
    }
    uint64_t v3 = *v16;
  }
  while (*v16);
  if ((void *)v8 == v2) {
    return 0;
  }
  int v17 = *(char *)(v8 + 55);
  size_t v18 = v17 >= 0 ? *(unsigned __int8 *)(v8 + 55) : *(void *)(v8 + 40);
  int v19 = v17 >= 0 ? (const void *)(v8 + 32) : *(const void **)(v8 + 32);
  size_t v20 = v18 >= v6 ? v6 : v18;
  int v21 = memcmp(v7, v19, v20);
  BOOL v22 = v6 < v18;
  if (v21) {
    BOOL v22 = v21 < 0;
  }
  if (v22) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::erase(a1, v8);
  return 1;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    int v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      int v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
  return v4;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEclIJhS2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 48);
  if (v2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v6 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(v3 + 16))(v3, v4, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_1000EF2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvhN5boost3anyEEEE40c16_ZTSN5boost3anyE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  uint64_t result = *(void *)(a2 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000EF368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvhN5boost3anyEEEE40c16_ZTSN5boost3anyE(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEclIJiS2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  if (v2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v6 = v2;
  (*(void (**)(uint64_t, void, uint64_t *))(v3 + 16))(v3, v4, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_1000EF48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int,boost::any const&)>::function<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function2<void,int,boost::any const&>::function2<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, &v3);
}

void sub_1000EF564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function2<void,int,boost::any const&>::function2<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)a1, &v3);
}

void sub_1000EF638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage7<boost::_bi::value<XPCIPCAPI_v1_rcp *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>::storage7((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,XPCIPCAPI_v1_rcp,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list7<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function2<void,int,boost::any const&>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>)::stored_vtable, &v2);
}

void sub_1000EF718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>,void,int,boost::any const&>::invoke(uint64_t *a1, int a2, unsigned int *a3)
{
  int v4 = a2;
  uint64_t v3 = *a1;
  v5[0] = (unsigned int *)&v4;
  v5[1] = a3;
  boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist2<int,boost::any const&>>(v3 + 16, v3, v5);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  int v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(NSObject **)(v5 + 104);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 96);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 95) < 0)
        {
          operator delete(*(void **)(v5 + 72));
          if ((*(char *)(v5 + 71) & 0x80000000) == 0)
          {
LABEL_12:
            if ((*(char *)(v5 + 47) & 0x80000000) == 0) {
              goto LABEL_13;
            }
LABEL_21:
            operator delete(*(void **)(v5 + 24));
LABEL_13:
            operator delete();
          }
        }
        else if ((*(char *)(v5 + 71) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v5 + 48));
        if ((*(char *)(v5 + 47) & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
      *(void *)a2 = 0;
      return result;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F5206 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F5206 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      return result;
    default:
      a2[4] = 0;
      return result;
  }
}

void sub_1000EF940()
{
}

void boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::arg<2>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist2<int,boost::any const&>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (uint64_t)a3[1];
  uint64_t v7 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v14 = *(std::string *)(a1 + 8);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v13 = *(std::string *)(a1 + 32);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v12 = *(std::string *)(a1 + 56);
  }
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  int v9 = *(NSObject **)(a1 + 88);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(a2, v5, v7, v6, (uint64_t)&v14, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v14.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
}

void sub_1000EFAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any const&,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, std::string *, void **))a1;
  uint64_t v13 = *(void *)(a1 + 8);
  BOOL v15 = (void *)(a2 + (v13 >> 1));
  if ((v13 & 1) == 0)
  {
    if ((*(char *)(a5 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    if ((*(char *)(a6 + 23) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, std::string *, void **))(*v15 + v14);
  if (*(char *)(a5 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v22 = *(std::string *)a5;
  if ((*(char *)(a6 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    std::string v21 = *(std::string *)a6;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
LABEL_8:
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v20 = *(std::string *)a7;
  }
  size_t v16 = *(void **)a8;
  if (*(void *)a8) {
    size_t v16 = _Block_copy(v16);
  }
  int v17 = *(NSObject **)(a8 + 8);
  aBlocuint64_t k = v16;
  dispatch_object_t object = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  v14(v15, a3, a4, &v22, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_25:
      operator delete(v22.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1000EFD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN5boost3anyEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  uint64_t v4 = v1;
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v4);
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void sub_1000EFE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFvN5boost3anyEEEE40c16_ZTSN5boost3anyE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  uint64_t result = *(void *)(a2 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000EFE9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFvN5boost3anyEEEE40c16_ZTSN5boost3anyE(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::list6(uint64_t a1, uint64_t a2, const void ***a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v23 = v24;
  BOOL v11 = a3 + 1;
  std::string v12 = *a3;
  if (*a3 != (const void **)(a3 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)&v23, (uint64_t *)v24, v12 + 4, (uint64_t)(v12 + 4));
      uint64_t v13 = (const void **)v12[1];
      if (v13)
      {
        do
        {
          std::string v14 = (const void ***)v13;
          uint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string v14 = (const void ***)v12[2];
          BOOL v15 = *v14 == v12;
          std::string v12 = (const void **)v14;
        }
        while (!v15);
      }
      std::string v12 = (const void **)v14;
    }
    while (v14 != v11);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v22 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v21 = *(std::string *)a5;
  }
  size_t v16 = *(void **)a6;
  if (*(void *)a6) {
    size_t v16 = _Block_copy(v16);
  }
  int v17 = *(NSObject **)(a6 + 8);
  aBlocuint64_t k = v16;
  dispatch_object_t object = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6(a1, a2, (const void ***)&v23, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_27:
    operator delete(v22.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
LABEL_25:
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v23, v24[0]);
  return a1;
}

void sub_1000F0120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,char *a25)
{
  if ((a23 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a24, a25);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void sub_1000F01AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
}

uint64_t boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6(uint64_t a1, uint64_t a2, const void ***a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[0] = 0;
  v22[1] = 0;
  std::string v21 = v22;
  BOOL v11 = a3 + 1;
  std::string v12 = *a3;
  if (*a3 != (const void **)(a3 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)&v21, (uint64_t *)v22, v12 + 4, (uint64_t)(v12 + 4));
      uint64_t v13 = (const void **)v12[1];
      if (v13)
      {
        do
        {
          std::string v14 = (const void ***)v13;
          uint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string v14 = (const void ***)v12[2];
          BOOL v15 = *v14 == v12;
          std::string v12 = (const void **)v14;
        }
        while (!v15);
      }
      std::string v12 = (const void **)v14;
    }
    while (v14 != v11);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v20 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(a1, a2, (const void ***)&v21, (uint64_t)&v20, (long long *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v20.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v21, v22[0]);
    size_t v16 = *(void **)a6;
    if (!*(void *)a6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v21, v22[0]);
  size_t v16 = *(void **)a6;
  if (*(void *)a6) {
LABEL_21:
  }
    size_t v16 = _Block_copy(v16);
LABEL_22:
  int v17 = *(NSObject **)(a6 + 8);
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  return a1;
}

void sub_1000F035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,char *a23)
{
  if ((a21 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a22, a23);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_1000F03DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
}

uint64_t boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(uint64_t a1, uint64_t a2, const void ***a3, uint64_t a4, long long *a5)
{
  v19[0] = 0;
  v19[1] = 0;
  size_t v18 = v19;
  int v9 = a3 + 1;
  size_t v10 = *a3;
  if (*a3 != (const void **)(a3 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)&v18, (uint64_t *)v19, v10 + 4, (uint64_t)(v10 + 4));
      BOOL v11 = (const void **)v10[1];
      if (v11)
      {
        do
        {
          std::string v12 = (const void ***)v11;
          BOOL v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          std::string v12 = (const void ***)v10[2];
          BOOL v13 = *v12 == v10;
          size_t v10 = (const void **)v12;
        }
        while (!v13);
      }
      size_t v10 = (const void **)v12;
    }
    while (v12 != v9);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>>::storage4(a1, a2, (const void ***)&v18, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v18, v19[0]);
    std::string v14 = (std::string *)(a1 + 56);
    if ((*((char *)a5 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_16:
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a5, *((void *)a5 + 1));
    return a1;
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v18, v19[0]);
  std::string v14 = (std::string *)(a1 + 56);
  if (*((char *)a5 + 23) < 0) {
    goto LABEL_16;
  }
LABEL_14:
  long long v15 = *a5;
  v14->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
  *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  return a1;
}

void sub_1000F054C(_Unwind_Exception *a1)
{
  boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>>::~storage4(v1);
  _Unwind_Resume(a1);
}

void sub_1000F0560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_1000F0578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a15, a16);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>>::storage4(uint64_t a1, uint64_t a2, const void ***a3, long long *a4)
{
  v19[0] = 0;
  v19[1] = 0;
  size_t v18 = v19;
  uint64_t v7 = a3 + 1;
  uint64_t v8 = *a3;
  if (*a3 != (const void **)(a3 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)&v18, (uint64_t *)v19, v8 + 4, (uint64_t)(v8 + 4));
      size_t v10 = (const void **)v8[1];
      if (v10)
      {
        do
        {
          BOOL v11 = (const void ***)v10;
          size_t v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (const void ***)v8[2];
          BOOL v12 = *v11 == v8;
          uint64_t v8 = (const void **)v11;
        }
        while (!v12);
      }
      uint64_t v8 = (const void **)v11;
    }
    while (v11 != v7);
    BOOL v13 = (uint64_t *)v18;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a1 + 16;
    *(void *)(a1 + 24) = 0;
    if (v13 != (uint64_t *)v19)
    {
      do
      {
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)(a1 + 8), (uint64_t *)(a1 + 16), (const void **)v13 + 4, (uint64_t)(v13 + 4));
        size_t v16 = (char *)v13[1];
        if (v16)
        {
          do
          {
            int v17 = (char **)v16;
            size_t v16 = *(char **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            int v17 = (char **)v13[2];
            BOOL v12 = *v17 == (char *)v13;
            BOOL v13 = (uint64_t *)v17;
          }
          while (!v12);
        }
        BOOL v13 = (uint64_t *)v17;
      }
      while (v17 != v19);
    }
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v18, v19[0]);
    int v9 = (std::string *)(a1 + 32);
    if (*((char *)a4 + 23) < 0) {
      goto LABEL_3;
    }
LABEL_13:
    long long v14 = *a4;
    v9->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v14;
    return a1;
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v18, v19[0]);
  int v9 = (std::string *)(a1 + 32);
  if ((*((char *)a4 + 23) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  return a1;
}

void sub_1000F0748(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v2, *v1);
  _Unwind_Resume(a1);
}

void sub_1000F0760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v3, *v4);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)va, *v2);
  _Unwind_Resume(a1);
}

void sub_1000F0788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)va, *v2);
  _Unwind_Resume(a1);
}

void *boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[2] = 0;
  uint64_t v4 = a1 + 2;
  a1[1] = a1 + 2;
  uint64_t v5 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  uint64_t v6 = *(const void ***)(a2 + 8);
  uint64_t v7 = (const void ***)(a2 + 16);
  if (v6 != (const void **)(a2 + 16))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>(v5, v4, v6 + 4, (uint64_t)(v6 + 4));
      size_t v10 = (const void **)v6[1];
      if (v10)
      {
        do
        {
          BOOL v11 = (const void ***)v10;
          size_t v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (const void ***)v6[2];
          BOOL v12 = *v11 == v6;
          uint64_t v6 = (const void **)v11;
        }
        while (!v12);
      }
      uint64_t v6 = (const void **)v11;
    }
    while (v11 != v7);
  }
  uint64_t v8 = (std::string *)(a1 + 4);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 32);
    a1[6] = *(void *)(a2 + 48);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  BOOL v13 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_1000F08C4(_Unwind_Exception *a1)
{
  boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>>::~storage4(v1);
  _Unwind_Resume(a1);
}

void sub_1000F08D8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1000F08F0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v7, a2 + 16);
  uint64_t v4 = *(void **)(a2 + 96);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 104);
  v7[10] = v4;
  v7[11] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, &v6);
}

void sub_1000F09D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v6 = *a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v7, (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)*((void *)a2 + 12);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *((void *)a2 + 13);
  v7[10] = v4;
  v7[11] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)a1, (uint64_t)&v6);
}

void sub_1000F0ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v6, a2 + 16);
  uint64_t v3 = *(void **)(a2 + 96);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  uint64_t v4 = *(NSObject **)(a2 + 104);
  v6[10] = v3;
  v6[11] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>)::stored_vtable, &v5);
}

void sub_1000F0BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>,void,int>::invoke(uint64_t a1, int a2)
{
  int v2 = a2;
  uint64_t v3 = &v2;
  boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>();
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v7, (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)*((void *)a2 + 12);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  long long v5 = *((void *)a2 + 13);
  v7[10] = v4;
  v7[11] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, (uint64_t)&v6);
}

void sub_1000F0D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 104);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 96);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 95) < 0) {
          operator delete(*(void **)(v5 + 72));
        }
        if (*(char *)(v5 + 71) < 0) {
          operator delete(*(void **)(v5 + 48));
        }
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v5 + 24, *(char **)(v5 + 32));
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F530CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F530CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000F0EE4()
{
}

void boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>()
{
}

void sub_1000F1130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v25 = a24;
    if (!a24) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v25 = a24;
    if (!a24) {
LABEL_6:
    }
      _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

uint64_t boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v12 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, void **))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  BOOL v13 = (void *)(a2 + (v11 >> 1));
  if (v11)
  {
    BOOL v12 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, void **))(*v13 + v12);
    uint64_t v14 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v14 = *a4;
  if (*a4) {
LABEL_5:
  }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
LABEL_6:
  uint64_t v22 = v14;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v21 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v20 = *(std::string *)a6;
  }
  long long v15 = *(void **)a7;
  if (*(void *)a7) {
    long long v15 = _Block_copy(v15);
  }
  size_t v16 = *(NSObject **)(a7 + 8);
  aBlocuint64_t k = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  v12(v13, a3, &v22, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t result = v22;
      if (!v22) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  uint64_t result = v22;
  if (!v22) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000F13A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v25 = a24;
    if (!a24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v25 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v5, a2 + 16);
  uint64_t v3 = *(void **)(a2 + 96);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  uint64_t v4 = *(NSObject **)(a2 + 104);
  v5[10] = v3;
  v5[11] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  operator new();
}

void sub_1000F1574()
{
}

void sub_1000F15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::list6(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v20 = v11;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v19 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v18 = *(std::string *)a5;
  }
  BOOL v12 = *(void **)a6;
  if (*(void *)a6) {
    BOOL v12 = _Block_copy(v12);
  }
  BOOL v13 = *(NSObject **)(a6 + 8);
  aBlocuint64_t k = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6(a1, a2, &v20, (uint64_t)&v19, (uint64_t)&v18, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_23:
    operator delete(v19.__r_.__value_.__l.__data_);
    uint64_t v14 = v20;
    if (!v20) {
      return a1;
    }
    goto LABEL_20;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t v14 = v20;
  if (v20) {
LABEL_20:
  }
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  return a1;
}

void sub_1000F1734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v25 = *(void *)(v23 - 56);
    if (!v25) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v25 = *(void *)(v23 - 56);
    if (!v25) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v18 = v11;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v17 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(a1, a2, &v18, (uint64_t)&v17, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v12 = v18;
      if (!v18) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  uint64_t v12 = v18;
  if (v18) {
LABEL_12:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_13:
  BOOL v13 = *(void **)a6;
  if (*(void *)a6) {
    BOOL v13 = _Block_copy(v13);
  }
  uint64_t v14 = *(NSObject **)(a6 + 8);
  a1[8] = v13;
  a1[9] = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  return a1;
}

void sub_1000F1938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    uint64_t v23 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v23 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(void *a1, uint64_t a2, void *a3, uint64_t a4, long long *a5)
{
  if (*a3)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a3 + 24))(*a3);
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a4;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_6:
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    uint64_t v11 = v10;
    *a1 = a2;
    if (v10)
    {
      a1[1] = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      uint64_t v12 = (std::string *)(a1 + 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_9;
      }
LABEL_13:
      *uint64_t v12 = __p;
      goto LABEL_14;
    }
  }
  else
  {
    *a1 = a2;
  }
  a1[1] = 0;
  uint64_t v12 = (std::string *)(a1 + 2);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  BOOL v13 = (std::string *)(a1 + 5);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v14 = *a5;
    a1[7] = *((void *)a5 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_1000F1BB4(_Unwind_Exception *a1)
{
  boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>>::~storage4(v1);
  _Unwind_Resume(a1);
}

void sub_1000F1BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*v15)
  {
    (*(void (**)(void))(*(void *)*v15 + 8))(*v15);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if (!v14) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *(void *)(a1 + 8) = v4;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  long long v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *(void **)(a2 + 64);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  return a1;
}

void sub_1000F1D5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, &v3);
}

void sub_1000F1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v3 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)a1, &v3);
}

void sub_1000F1F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)&v3, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>)::stored_vtable, &v2);
}

void sub_1000F2058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>,void,int>::invoke(uint64_t *a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *a1;
  long long v5 = (unsigned int *)&v4;
  return boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>(v2 + 16, v2, &v5);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)&v4, (uint64_t)(a2 + 1));
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, (uint64_t)&v3);
}

void sub_1000F219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 88);
        if (v6) {
          dispatch_release(v6);
        }
        long long v7 = *(const void **)(v5 + 80);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 79) < 0)
        {
          operator delete(*(void **)(v5 + 56));
          if ((*(char *)(v5 + 55) & 0x80000000) == 0)
          {
LABEL_12:
            uint64_t v8 = *(void *)(v5 + 24);
            if (!v8) {
              goto LABEL_14;
            }
            goto LABEL_13;
          }
        }
        else if ((*(char *)(v5 + 55) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v5 + 32));
        uint64_t v8 = *(void *)(v5 + 24);
        if (!v8) {
LABEL_14:
        }
          operator delete();
LABEL_13:
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        goto LABEL_14;
      }
      *(void *)a2 = 0;
      return result;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F5440 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F5440 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      return result;
    default:
      a2[4] = 0;
      return result;
  }
}

void sub_1000F2384()
{
}

uint64_t boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t v15 = v6;
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 16);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v13 = *(std::string *)(a1 + 40);
  }
  uint64_t v8 = *(void **)(a1 + 64);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a1 + 72);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(a2, v7, v5, &v15, (uint64_t)&v14, (uint64_t)&v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      uint64_t result = v15;
      if (!v15) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  uint64_t result = v15;
  if (!v15) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000F2534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v25 = *(void *)(v23 - 40);
    if (!v25) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v25 = *(void *)(v23 - 40);
    if (!v25) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage6((uint64_t)&v2, a2 + 16);
  operator new();
}

void sub_1000F26CC()
{
}

void sub_1000F26F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function<void ()(char const*)>::function<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v7, a2 + 16);
  uint64_t v4 = *(void **)(a2 + 96);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 104);
  v7[10] = v4;
  v7[11] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::function1<void,char const*>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, &v6);
}

void sub_1000F27DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,char const*>::function1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v6 = *a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v7, (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)*((void *)a2 + 12);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *((void *)a2 + 13);
  v7[10] = v4;
  v7[11] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::function1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)a1, (uint64_t)&v6);
}

void sub_1000F28C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(v6, a2 + 16);
  long long v3 = *(void **)(a2 + 96);
  if (v3) {
    long long v3 = _Block_copy(v3);
  }
  uint64_t v4 = *(NSObject **)(a2 + 104);
  v6[10] = v3;
  v6[11] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,int,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)boost::function1<void,char const*>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>)::stored_vtable, &v5);
}

void sub_1000F29C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>,void,char const*>::invoke(uint64_t a1, uint64_t a2)
{
  v2[0] = a2;
  v2[1] = v2;
  boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<char const*>>();
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list6<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 104);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 96);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 95) < 0) {
          operator delete(*(void **)(v5 + 72));
        }
        if (*(char *)(v5 + 71) < 0) {
          operator delete(*(void **)(v5 + 48));
        }
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v5 + 24, *(char **)(v5 + 32));
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F553DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F553DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000F2BF4()
{
}

void boost::_bi::list6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::map<std::string,boost::any>>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<char const*>>()
{
}

void sub_1000F2E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v25 = a24;
    if (!a24) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v25 = a24;
    if (!a24) {
LABEL_6:
    }
      _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

uint64_t boost::_mfi::mf5<void,InternalIPCAPI,char const*,boost::any,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, void **))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  std::string v13 = (void *)(a2 + (v11 >> 1));
  if (v11)
  {
    uint64_t v12 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, void **))(*v13 + v12);
    uint64_t v14 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v14 = *a4;
  if (*a4) {
LABEL_5:
  }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
LABEL_6:
  uint64_t v22 = v14;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v21 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v20 = *(std::string *)a6;
  }
  uint64_t v15 = *(void **)a7;
  if (*(void *)a7) {
    uint64_t v15 = _Block_copy(v15);
  }
  size_t v16 = *(NSObject **)(a7 + 8);
  aBlocuint64_t k = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  v12(v13, a3, &v22, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t result = v22;
      if (!v22) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  uint64_t result = v22;
  if (!v22) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000F30B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v25 = a24;
    if (!a24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v25 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEclIJhNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES2_NS7_4lessISE_EENSC_INS7_4pairIKSE_S2_EEEEEEEEEvDpT__block_invoke()
{
}

void dispatch::block<void({block_pointer})(unsigned char,boost::any)>::operator()<unsigned char const&,std::map<std::string,boost::any> const&>()
{
}

void sub_1000F32A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    awdmetricsclient_convert_ValMap_to_xpc_object();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void *__copy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvhN5boost3anyEEEE40c127_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost3anyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEE(uint64_t a1, void *a2)
{
  uint64_t result = (const void *)a2[4];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = (const void **)a2[5];
  long long v6 = (const void **)(a2 + 6);
  if (v5 != v6)
  {
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>((uint64_t **)(a1 + 40), (uint64_t *)(a1 + 48), v5 + 4, (uint64_t)(v5 + 4));
      uint64_t v7 = (const void **)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void **)v5[2];
          BOOL v9 = *v8 == v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

void sub_1000F33A4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v2, *(char **)(v1 + 48));
  uint64_t v4 = *(const void **)(v1 + 32);
  if (v4) {
    _Block_release(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvhN5boost3anyEEEE40c127_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost3anyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEE(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1 + 40, *(char **)(a1 + 48));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    uint64_t v4 = *(void **)(a2 + 48);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)(a2 + 24);
    uint64_t v4 = *(void **)(a2 + 48);
    if (!v4)
    {
LABEL_6:
      uint64_t v5 = *(NSObject **)(a2 + 56);
      aBlocuint64_t k = v4;
      dispatch_object_t object = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, &v6);
    }
  }
  uint64_t v4 = _Block_copy(v4);
  goto LABEL_6;
}

void sub_1000F34F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    uint64_t v4 = (void *)*((void *)a2 + 6);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
    uint64_t v4 = (void *)*((void *)a2 + 6);
    if (!v4)
    {
LABEL_6:
      uint64_t v5 = *((void *)a2 + 7);
      aBlocuint64_t k = v4;
      dispatch_object_t object = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)a1, (uint64_t)&v6);
    }
  }
  uint64_t v4 = _Block_copy(v4);
  goto LABEL_6;
}

void sub_1000F35F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    long long v3 = *(void **)(a2 + 48);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)(a2 + 24);
    long long v3 = *(void **)(a2 + 48);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *(NSObject **)(a2 + 56);
      aBlocuint64_t k = v3;
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,XPCIPCAPI_v1_rcp,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>,boost::_bi::list4<boost::_bi::value<XPCIPCAPI_v1_rcp*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>)::stored_vtable, &v5);
    }
  }
  long long v3 = _Block_copy(v3);
  goto LABEL_6;
}

void sub_1000F36FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>,void,int>::invoke(uint64_t *a1, int a2)
{
  int v3 = a2;
  uint64_t v2 = *a1;
  uint64_t v4 = (unsigned int *)&v3;
  boost::_bi::list4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>(v2 + 16, v2, &v4);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list4<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(NSObject **)(v5 + 56);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 48);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F5674 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F5674 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1000F3938()
{
}

void boost::_bi::list4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = **a3;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v7 = *(void **)(a1 + 32);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
LABEL_5:
  }
    uint64_t v7 = _Block_copy(v7);
LABEL_6:
  uint64_t v8 = *(NSObject **)(a1 + 40);
  aBlocuint64_t k = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(a2, v5, v6, (uint64_t)&v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1000F3A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::_mfi::mf3<void,InternalIPCAPI,int,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, std::string *, void **))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  BOOL v9 = (void *)(a2 + (v7 >> 1));
  if ((v7 & 1) == 0)
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    uint64_t v10 = *(void **)a5;
    if (!*(void *)a5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *(void (**)(void *, uint64_t, std::string *, void **))(*v9 + v8);
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string v14 = *(std::string *)a4;
  uint64_t v10 = *(void **)a5;
  if (*(void *)a5) {
LABEL_7:
  }
    uint64_t v10 = _Block_copy(v10);
LABEL_8:
  std::string v11 = *(NSObject **)(a5 + 8);
  aBlocuint64_t k = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  v8(v9, a3, &v14, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1000F3B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::any::holder<char *>::~holder()
{
}

void *boost::any::holder<char *>::type()
{
}

void boost::any::holder<char *>::clone()
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEclIJiNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES2_NS7_4lessISE_EENSC_INS7_4pairIKSE_S2_EEEEEEEEEvDpT__block_invoke()
{
}

void dispatch::block<void({block_pointer})(unsigned char,boost::any)>::operator()<int const&,std::map<std::string,boost::any> const&>()
{
}

void sub_1000F3D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    awdmetricsclient_convert_ValMap_to_xpc_object();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::list7(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *a3;
  if (*a3) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  uint64_t v23 = v13;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v22 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v21 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v20 = *(std::string *)a6;
  }
  std::string v14 = *(void **)a7;
  if (*(void *)a7) {
    std::string v14 = _Block_copy(v14);
  }
  uint64_t v15 = *(NSObject **)(a7 + 8);
  aBlocuint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  boost::_bi::storage7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage7(a1, a2, &v23, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_28:
      operator delete(v22.__r_.__value_.__l.__data_);
      uint64_t v16 = v23;
      if (!v23) {
        return a1;
      }
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_23:
  uint64_t v16 = v23;
  if (v23) {
LABEL_24:
  }
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  return a1;
}

void sub_1000F3F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v32 = *(void *)(v30 - 56);
      if (!v32) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  uint64_t v32 = *(void *)(v30 - 56);
  if (!v32) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::storage7(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *a3;
  if (*a3) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  uint64_t v21 = v13;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v20 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v19 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string __p = *(std::string *)a6;
  }
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(a1, a2, &v21, (uint64_t)&v20, (uint64_t)&v19, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    uint64_t v14 = v21;
    if (!v21) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_24:
  operator delete(v20.__r_.__value_.__l.__data_);
  uint64_t v14 = v21;
  if (v21) {
LABEL_16:
  }
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
LABEL_17:
  uint64_t v15 = *(void **)a7;
  if (*(void *)a7) {
    uint64_t v15 = _Block_copy(v15);
  }
  uint64_t v16 = *(NSObject **)(a7 + 8);
  a1[11] = v15;
  a1[12] = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  return a1;
}

void sub_1000F4200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v30 = *(void *)(v28 - 56);
      if (!v30) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  uint64_t v30 = *(void *)(v28 - 56);
  if (!v30) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v18 = v11;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v17 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage5(a1, a2, &v18, (uint64_t)&v17, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v12 = v18;
      if (!v18) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  uint64_t v12 = v18;
  if (v18) {
LABEL_12:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_13:
  uint64_t v13 = (std::string *)(a1 + 8);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v14 = *a6;
    a1[10] = *((void *)a6 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_1000F4428(_Unwind_Exception *a1)
{
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::~storage5(v1);
  _Unwind_Resume(a1);
}

void sub_1000F443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    uint64_t v23 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v23 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  _Unwind_Resume(exception_object);
}

void *boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  a1[1] = v4;
  uint64_t v5 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 5);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    a1[7] = *(void *)(a2 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  BOOL v9 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1000F45BC(_Unwind_Exception *a1)
{
  boost::_bi::storage5<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::~storage5(v1);
  _Unwind_Resume(a1);
}

void sub_1000F45D0(_Unwind_Exception *a1)
{
  boost::_bi::storage4<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>>::~storage4(v1);
  _Unwind_Resume(a1);
}

void sub_1000F45E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::function<void ()(int)>::function<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v7, a2 + 16);
  uint64_t v4 = *(void **)(a2 + 104);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 112);
  v7[11] = v4;
  v7[12] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, &v6);
}

void sub_1000F4708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::function1<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(void *a1, long long *a2)
{
  *a1 = 0;
  long long v6 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v7, (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)*((void *)a2 + 13);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *((void *)a2 + 14);
  v7[11] = v4;
  v7[12] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)a1, (uint64_t)&v6);
}

void sub_1000F4828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v6, a2 + 16);
  uint64_t v3 = *(void **)(a2 + 104);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  uint64_t v4 = *(NSObject **)(a2 + 112);
  v6[11] = v3;
  v6[12] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>((uint64_t)boost::function1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>)::stored_vtable, &v5);
}

void sub_1000F4964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>,void,int>::invoke(uint64_t *a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *a1;
  long long v5 = (unsigned int *)&v4;
  return boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>(v2 + 16, v2, &v5);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v7, (uint64_t)(a2 + 1));
  int v4 = (void *)*((void *)a2 + 13);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  long long v5 = *((void *)a2 + 14);
  v7[11] = v4;
  v7[12] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(a1, (uint64_t)&v6);
}

void sub_1000F4AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  int v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(void *)a2)
      {
        long long v6 = *(NSObject **)(v5 + 112);
        if (v6) {
          dispatch_release(v6);
        }
        uint64_t v7 = *(const void **)(v5 + 104);
        if (v7) {
          _Block_release(v7);
        }
        if (*(char *)(v5 + 103) < 0)
        {
          operator delete(*(void **)(v5 + 80));
          if ((*(char *)(v5 + 79) & 0x80000000) == 0)
          {
LABEL_12:
            if ((*(char *)(v5 + 55) & 0x80000000) == 0) {
              goto LABEL_13;
            }
            goto LABEL_23;
          }
        }
        else if ((*(char *)(v5 + 79) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v5 + 56));
        if ((*(char *)(v5 + 55) & 0x80000000) == 0)
        {
LABEL_13:
          uint64_t v8 = *(void *)(v5 + 24);
          if (!v8) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
LABEL_23:
        operator delete(*(void **)(v5 + 32));
        uint64_t v8 = *(void *)(v5 + 24);
        if (!v8) {
LABEL_15:
        }
          operator delete();
LABEL_14:
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        goto LABEL_15;
      }
      *(void *)a2 = 0;
      return result;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001003F5776 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F5776 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      return result;
    default:
      a2[4] = 0;
      return result;
  }
}

void sub_1000F4D14()
{
}

uint64_t boost::_bi::list7<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>::operator()<boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::rrlist1<int>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t v16 = v6;
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string v15 = *(std::string *)(a1 + 16);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 40);
  }
  if (*(char *)(a1 + 87) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else {
    std::string v13 = *(std::string *)(a1 + 64);
  }
  uint64_t v8 = *(void **)(a1 + 88);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  BOOL v9 = *(NSObject **)(a1 + 96);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(a2, v7, v5, &v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    uint64_t result = v16;
    if (!v16) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
LABEL_28:
  operator delete(v15.__r_.__value_.__l.__data_);
  uint64_t result = v16;
  if (!v16) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000F4F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v25 = *(void *)(v23 - 40);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v23 - 64));
  uint64_t v25 = *(void *)(v23 - 40);
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

uint64_t boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, std::string *, void **))a1;
  uint64_t v13 = *(void *)(a1 + 8);
  std::string v15 = (void *)(a2 + (v13 >> 1));
  if (v13)
  {
    std::string v14 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, std::string *, void **))(*v15 + v14);
    uint64_t v16 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v16 = *a4;
  if (*a4) {
LABEL_5:
  }
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
LABEL_6:
  uint64_t v25 = v16;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v24 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v23 = *(std::string *)a6;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v22 = *(std::string *)a7;
  }
  std::string v17 = *(void **)a8;
  if (*(void *)a8) {
    std::string v17 = _Block_copy(v17);
  }
  uint64_t v18 = *(NSObject **)(a8 + 8);
  aBlocuint64_t k = v17;
  dispatch_object_t object = v18;
  if (v18) {
    dispatch_retain(v18);
  }
  v14(v15, a3, &v25, &v24, &v23, &v22, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    uint64_t result = v25;
    if (!v25) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
LABEL_31:
  operator delete(v24.__r_.__value_.__l.__data_);
  uint64_t result = v25;
  if (!v25) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1000F51C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v32 = *(void *)(v30 - 72);
      if (!v32) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  uint64_t v32 = *(void *)(v30 - 72);
  if (!v32) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable1<void,int>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf6<void,InternalIPCAPI,int,boost::any,std::string,std::string,std::string,dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>,boost::_bi::list7<boost::_bi::value<InternalIPCAPI*>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<dispatch::callback<void({block_pointer})(unsigned char,boost::any)>>>>>(uint64_t a1, uint64_t a2)
{
  boost::_bi::storage6<boost::_bi::value<InternalIPCAPI *>,boost::arg<1>,boost::_bi::value<boost::any>,boost::_bi::value<std::string>,boost::_bi::value<std::string>,boost::_bi::value<std::string>>::storage6(v5, a2 + 16);
  uint64_t v3 = *(void **)(a2 + 104);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  int v4 = *(NSObject **)(a2 + 112);
  v5[11] = v3;
  v5[12] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  operator new();
}

void sub_1000F53F8()
{
}

void sub_1000F5424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

atomic_uint *OUTLINED_FUNCTION_4_1()
{
  return boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v0 - 24);
}

void *CtrXPC::ServerClientState::ServerClientState(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

void CtrXPC::ServerClientState::ServerClientState()
{
}

void sub_1000F552C()
{
}

std::string *CtrXPC::ServerClientState::setCheckedIn(std::string **a1, const std::string *a2)
{
  uint64_t v2 = *a1;
  uint64_t result = std::string::operator=(*a1, a2);
  v2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

BOOL CtrXPC::ServerClientState::isNotificationRegistered_sync(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  BOOL result = CtrXPC::ServerClientState::State::isNotificationRegistered(v2, (const void **)&__p.__r_.__value_.__l.__data_);
  BOOL v4 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v4;
  }
  return result;
}

void sub_1000F5634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CtrXPC::ServerClientState::State::isNotificationRegistered(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3) {
    goto LABEL_71;
  }
  char v4 = *((unsigned char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  uint64_t v7 = a1 + 40;
  uint64_t v8 = *(void *)(a1 + 40);
  do
  {
    int v9 = *(char *)(v8 + 55);
    if (v9 >= 0) {
      size_t v10 = *(unsigned __int8 *)(v8 + 55);
    }
    else {
      size_t v10 = *(void *)(v8 + 40);
    }
    if (v9 >= 0) {
      uint64_t v11 = (const void *)(v8 + 32);
    }
    else {
      uint64_t v11 = *(const void **)(v8 + 32);
    }
    if (v5 >= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v5;
    }
    int v13 = memcmp(v11, v6, v12);
    BOOL v14 = v10 < v5;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    BOOL v15 = !v14;
    if (v14) {
      uint64_t v16 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)v8;
    }
    if (v15) {
      uint64_t v7 = v8;
    }
    uint64_t v8 = *v16;
  }
  while (*v16);
  if (v7 != v2)
  {
    std::string v19 = *(const void **)(v7 + 32);
    uint64_t v18 = v7 + 32;
    std::string v17 = v19;
    int v20 = *(char *)(v18 + 23);
    if (v20 >= 0) {
      size_t v21 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      size_t v21 = *(void *)(v18 + 8);
    }
    if (v20 >= 0) {
      std::string v22 = (const void *)v18;
    }
    else {
      std::string v22 = v17;
    }
    if (v21 >= v5) {
      size_t v23 = v5;
    }
    else {
      size_t v23 = v21;
    }
    int v24 = memcmp(v6, v22, v23);
    BOOL v25 = v5 >= v21;
    if (v24) {
      BOOL v25 = v24 >= 0;
    }
    if (v25) {
      return 1;
    }
  }
  char v45 = 3;
  __s2[0] = 7105601;
  uint64_t v27 = v2;
  do
  {
    unint64_t v28 = *(unsigned __int8 *)(v3 + 55);
    int v29 = (char)v28;
    if ((v28 & 0x80u) != 0) {
      unint64_t v28 = *(void *)(v3 + 40);
    }
    if (v29 >= 0) {
      uint64_t v30 = (const void *)(v3 + 32);
    }
    else {
      uint64_t v30 = *(const void **)(v3 + 32);
    }
    if (v28 >= 3) {
      size_t v31 = 3;
    }
    else {
      size_t v31 = v28;
    }
    BOOL v32 = v28 < 3;
    int v33 = memcmp(v30, __s2, v31);
    BOOL v34 = v33 < 0;
    if (!v33) {
      BOOL v34 = v32;
    }
    BOOL v35 = !v34;
    if (v34) {
      uint64_t v36 = (uint64_t *)(v3 + 8);
    }
    else {
      uint64_t v36 = (uint64_t *)v3;
    }
    if (v35) {
      uint64_t v27 = v3;
    }
    uint64_t v3 = *v36;
  }
  while (*v36);
  if (v27 == v2) {
    goto LABEL_71;
  }
  unint64_t v37 = *(unsigned __int8 *)(v27 + 55);
  int v38 = (char)v37;
  if ((v37 & 0x80u) != 0) {
    unint64_t v37 = *(void *)(v27 + 40);
  }
  long long v39 = v38 >= 0 ? (const void *)(v27 + 32) : *(const void **)(v27 + 32);
  size_t v40 = v37 >= 3 ? 3 : v37;
  BOOL v41 = v37 > 3;
  int v42 = memcmp(__s2, v39, v40);
  BOOL v43 = v42 < 0;
  if (!v42) {
    BOOL v43 = v41;
  }
  if (v43) {
LABEL_71:
  }
    uint64_t v27 = v2;
  return v27 != v2;
}

void CtrXPC::ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  char v4 = *a1;
  size_t v5 = *a3;
  if (*a3) {
    CFRetain(v5);
  }
  v6.length = CFArrayGetCount((CFArrayRef)v5);
  if (a2) {
    uint64_t v7 = (void (__cdecl *)(const void *, void *))CtrXPC::ServerClientState::State::registerNotificationApplier;
  }
  else {
    uint64_t v7 = (void (__cdecl *)(const void *, void *))CtrXPC::ServerClientState::State::unregisterNotificationApplier;
  }
  v6.locatiouint64_t n = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1000F58D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void CtrXPC::ServerClientState::getName(CtrXPC::ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void CtrXPC::ServerClientState::State::registerNotificationApplier(CtrXPC::ServerClientState::State *this, uint64_t **a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000F59C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CtrXPC::ServerClientState::State::unregisterNotificationApplier(CtrXPC::ServerClientState::State *this, void *a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v5 = 0;
  std::__tree<std::string>::__erase_unique<std::string>(a2 + 4, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000F5A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    do
    {
      while (1)
      {
        size_t v10 = (uint64_t **)v5;
        int v13 = (const void *)v5[4];
        uint64_t v11 = v5 + 4;
        size_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        long long v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return v10;
      }
      uint64_t v5 = v10[1];
    }
    while (v5);
    long long v6 = v10 + 1;
LABEL_26:
    std::string v22 = operator new(0x38uLL);
    size_t v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    size_t v10 = a1 + 1;
    std::string v22 = operator new(0x38uLL);
    size_t v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v23->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
LABEL_30:
  *std::string v22 = 0;
  v22[1] = 0;
  v22[2] = v10;
  const void *v6 = v22;
  int v24 = (uint64_t *)**a1;
  BOOL v25 = v22;
  if (v24)
  {
    *a1 = v24;
    BOOL v25 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v22;
}

void sub_1000F5C34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(void *a1, uint64_t a2)
{
  long long v3 = a1 + 1;
  uint64_t v2 = (uint64_t *)a1[1];
  if (!v2) {
    return 0;
  }
  char v5 = *(unsigned char *)(a2 + 23);
  size_t v6 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  int v7 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
  size_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  do
  {
    int v10 = *(char *)(v9 + 55);
    if (v10 >= 0) {
      size_t v11 = *(unsigned __int8 *)(v9 + 55);
    }
    else {
      size_t v11 = *(void *)(v9 + 40);
    }
    if (v10 >= 0) {
      size_t v12 = (const void *)(v9 + 32);
    }
    else {
      size_t v12 = *(const void **)(v9 + 32);
    }
    if (v6 >= v11) {
      size_t v13 = v11;
    }
    else {
      size_t v13 = v6;
    }
    int v14 = memcmp(v12, v7, v13);
    BOOL v15 = v11 < v6;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    BOOL v16 = !v15;
    if (v15) {
      size_t v17 = (uint64_t *)(v9 + 8);
    }
    else {
      size_t v17 = (uint64_t *)v9;
    }
    if (v16) {
      size_t v8 = (void *)v9;
    }
    uint64_t v9 = *v17;
  }
  while (*v17);
  if (v8 == v3) {
    return 0;
  }
  int v18 = *((char *)v8 + 55);
  if (v18 >= 0) {
    size_t v19 = *((unsigned __int8 *)v8 + 55);
  }
  else {
    size_t v19 = v8[5];
  }
  if (v18 >= 0) {
    int v20 = v8 + 4;
  }
  else {
    int v20 = (const void *)v8[4];
  }
  if (v19 >= v6) {
    size_t v21 = v6;
  }
  else {
    size_t v21 = v19;
  }
  int v22 = memcmp(v7, v20, v21);
  BOOL v23 = v6 < v19;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (v23) {
    return 0;
  }
  BOOL v25 = (void *)v8[1];
  if (v25)
  {
    do
    {
      long long v26 = v25;
      BOOL v25 = (void *)*v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v27 = v8;
    do
    {
      long long v26 = (void *)v27[2];
      BOOL v16 = *v26 == (void)v27;
      uint64_t v27 = v26;
    }
    while (!v16);
  }
  if ((void *)*a1 == v8) {
    *a1 = v26;
  }
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v8);
  if (*((char *)v8 + 55) < 0) {
    operator delete((void *)v8[4]);
  }
  operator delete(v8);
  return 1;
}

void std::__shared_ptr_pointer<CtrXPC::ServerClientState::State *,std::shared_ptr<CtrXPC::ServerClientState::State>::__shared_ptr_default_delete<CtrXPC::ServerClientState::State,CtrXPC::ServerClientState::State>,std::allocator<CtrXPC::ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_pointer<CtrXPC::ServerClientState::State *,std::shared_ptr<CtrXPC::ServerClientState::State>::__shared_ptr_default_delete<CtrXPC::ServerClientState::State,CtrXPC::ServerClientState::State>,std::allocator<CtrXPC::ServerClientState::State>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CtrXPC::ServerClientState::State *,std::shared_ptr<CtrXPC::ServerClientState::State>::__shared_ptr_default_delete<CtrXPC::ServerClientState::State,CtrXPC::ServerClientState::State>,std::allocator<CtrXPC::ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001003F590ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001003F590ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001003F590ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F590ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::map<std::string,unsigned char>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void sub_1000F6110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void StoreCountryCodeMapping(const __CFString *a1, const __CFString *a2)
{
  if (a1 && a2)
  {
    *(_DWORD *)buffer = 0;
    CFStringGetCString(a1, buffer, 4, 0x8000100u);
    *(_DWORD *)size_t v19 = 0;
    CFStringGetCString(a2, v19, 4, 0x8000100u);
    if (CFStringCompare(a2, @"N/A", 0))
    {
      char v3 = atoi(v19);
      size_t v4 = strlen(buffer);
      if (v4 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_5;
      }
    }
    else
    {
      char v3 = 0;
      size_t v4 = strlen(buffer);
      if (v4 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_5:
        size_t v5 = v4;
        if (v4 >= 0x17)
        {
          uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v4 | 7) != 0x17) {
            uint64_t v7 = v4 | 7;
          }
          uint64_t v8 = v7 + 1;
          size_t v6 = operator new(v7 + 1);
          *(void *)&__dst[8] = v5;
          *(void *)&__dst[16] = v8 | 0x8000000000000000;
          *(void *)std::string __dst = v6;
        }
        else
        {
          __dst[23] = v4;
          size_t v6 = __dst;
          if (!v4)
          {
LABEL_12:
            v6[v5] = 0;
            __p[0] = __dst;
            *((unsigned char *)std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&ThreadCountryMappingTable, (const void **)__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)__p)+ 56) = v3;
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (!v9)
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                PcapManager::start_pcap_capture();
              }
              goto LABEL_32;
            }
            if (!syslog_is_the_mask_enabled(6))
            {
LABEL_32:

              return;
            }
            int v10 = v9;
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
LABEL_31:

              goto LABEL_32;
            }
            size_t v11 = strlen(buffer);
            if (v11 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v12 = (void *)v11;
            if (v11 >= 0x17)
            {
              uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v11 | 7) != 0x17) {
                uint64_t v14 = v11 | 7;
              }
              uint64_t v15 = v14 + 1;
              size_t v13 = operator new(v14 + 1);
              __p[1] = v12;
              unint64_t v18 = v15 | 0x8000000000000000;
              __p[0] = v13;
            }
            else
            {
              HIBYTE(v18) = v11;
              size_t v13 = __p;
              if (!v11)
              {
LABEL_29:
                *((unsigned char *)v12 + (void)v13) = 0;
                size_t v21 = __p;
                int v16 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&ThreadCountryMappingTable, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21)+ 56);
                *(_DWORD *)std::string __dst = 136315650;
                *(void *)&__dst[4] = "StoreCountryCodeMapping";
                *(_WORD *)&__dst[12] = 2080;
                *(void *)&__dst[14] = buffer;
                *(_WORD *)&__dst[22] = 1024;
                int v23 = v16;
                _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s [PowerTable] CountryCode [%s] ==> Value[%d]", __dst, 0x1Cu);
                if (SHIBYTE(v18) < 0) {
                  operator delete(__p[0]);
                }
                goto LABEL_31;
              }
            }
            memcpy(v13, buffer, (size_t)v12);
            goto LABEL_29;
          }
        }
        memcpy(v6, buffer, v5);
        goto LABEL_12;
      }
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
}

void sub_1000F645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void readSpecificCountryCodeMapping(const __CFString *a1)
{
  if (a1)
  {
    ot::Posix::HardwareIdentifier::HardwareIdentifier((ot::Posix::HardwareIdentifier *)v15);
    if (ot::Posix::HardwareIdentifier::isCCMappingVer100((ot::Posix::HardwareIdentifier *)v15))
    {
      CFStringRef v2 = @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.ccmapping_ios_ver_100.plist";
    }
    else if (ot::Posix::HardwareIdentifier::isCCMappingVer200((ot::Posix::HardwareIdentifier *)v15))
    {
      CFStringRef v2 = @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.ccmapping_ios_ver_200.plist";
    }
    else
    {
      CFStringRef v2 = @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.ccmapping_ios.plist";
    }
    char v3 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v3)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        size_t v4 = v3;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          CStringPtr = CFStringGetCStringPtr(v2, 0x8000100u);
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = CStringPtr;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Country code mapping Plist Name: %s", buf, 0xCu);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }

    CFDictionaryRef v6 = (const __CFDictionary *)CFPreferencesCopyAppValue(a1, v2);
    CFDictionaryRef v7 = v6;
    if (v6)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v6, @"ISM 2.4");
      StoreCountryCodeMapping(a1, Value);
      CFRelease(v7);
      if (Value) {
        CFRelease(Value);
      }
      return;
    }
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Country code mapping not found :  %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }

    char v18 = 2;
    strcpy(buf, "XZ");
    int v16 = buf;
    *((unsigned char *)std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&ThreadCountryMappingTable, (const void **)buf, (uint64_t)&std::piecewise_construct, &v16)+ 56) = 0;
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v10 = RcpHostContext::sRcpHostContext;
    HIBYTE(v14[2]) = 20;
    strcpy((char *)v14, "Country Code Mapping");
    HIBYTE(v13[2]) = 20;
    strcpy((char *)v13, "Invalid Country Code");
    std::string __p = operator new(0x28uLL);
    long long v12 = xmmword_1003F2E00;
    strcpy((char *)__p, "Unexpected Country Code is provided");
    RcpHostContext::captureABC(v10, (uint64_t)v14, (uint64_t)v13, (uint64_t)&__p, 0, 1);
    if (SHIBYTE(v12) < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v13[2]) & 0x80000000) == 0)
      {
LABEL_27:
        if ((SHIBYTE(v14[2]) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_31;
      }
    }
    else if ((SHIBYTE(v13[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v13[0]);
    if ((SHIBYTE(v14[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_31:
    operator delete(v14[0]);
  }
}

void sub_1000F682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_1000F6B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void updateRegionNcp(uint64_t *a1)
{
  CFStringRef v2 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v2)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      char v3 = a1;
      if (*((char *)a1 + 23) < 0) {
        char v3 = (uint64_t *)*a1;
      }
      int v4 = 136315138;
      size_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[PowerTable] updateRegionNcp:: New Country [%s]", (uint8_t *)&v4, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }

  operator new();
}

void sub_1000F7240(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F73D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F73E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void startGeoServicesHandler(void *a1)
{
  id v1 = a1;
  CFStringRef v2 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v2)
  {
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[PowerTable]startGeoServicesHandler: Starting GEO Services", buf, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }

  char v3 = objc_alloc_init(GeoServicesHandler);
  int v4 = (void *)PowerTable::geoServicesHandler;
  PowerTable::geoServicesHandler = (uint64_t)v3;

  [(id)PowerTable::geoServicesHandler startMonitoring:v1];
  uint64_t v5 = RcpHostContext::sRcpHostContext;
  *(void *)&long long v6 = country_update_property_changed_handler;
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>(buf, &v6);
  boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::connect(*(void *)(v5 + 184));
}

void sub_1000F75E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F75F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::~slot((void **)va);

  _Unwind_Resume(a1);
}

void sub_1000F7610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void country_update_property_changed_handler(const char *a1, const boost::any *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!strcasecmp(a1, "RCP:Reset"))
  {
    char v3 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v3)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        int v4 = v3;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          v5[0] = 67109120;
          v5[1] = any_to_int(a2);
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "country_update_property_changed_handler: RCP reset, configure country zone on RCP value[%d]", (uint8_t *)v5, 8u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
  }
}

void sub_1000F775C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>(_OWORD *a1, long long *a2)
{
  *a1 = 0u;
  a1[1] = 0u;
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::init_slot_function<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>((uint64_t)a1, a2);
  return a1;
}

void sub_1000F77B4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3)
  {
    if ((v3 & 1) == 0)
    {
      int v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
      if (v4) {
        v4(v1 + 32, v1 + 32, 2);
      }
    }
    *(void *)(v1 + 24) = 0;
  }
  boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::slot<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>((void **)v1);
  _Unwind_Resume(a1);
}

void power_limit_set_callback(uint64_t *a1, int a2)
{
  int v4 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v4)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = (uint64_t *)*a1;
      }
      int v6 = 136315394;
      CFDictionaryRef v7 = v5;
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[PowerTable]power_limit_set_callback[%s] Retval = %d", (uint8_t *)&v6, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_1000F7904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void power_get_callback(uint64_t *a1, int a2, const boost::any *a3)
{
  int v6 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v6)
  {
    if (syslog_is_the_mask_enabled(6))
    {
      CFDictionaryRef v7 = v6;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = *((char *)a1 + 23);
        int v9 = (uint64_t *)*a1;
        int v10 = any_to_int(a3);
        if (v8 >= 0) {
          size_t v11 = a1;
        }
        else {
          size_t v11 = v9;
        }
        int v12 = 136315650;
        size_t v13 = v11;
        __int16 v14 = 1024;
        int v15 = a2;
        __int16 v16 = 2048;
        double v17 = (double)v10 * 0.25;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[PowerTable]power_get_callback[%s] Retval = [%d] Power = [%f]", (uint8_t *)&v12, 0x1Cu);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_1000F7A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void createTmpSubDir(void)
{
  char v0 = _set_user_dir_suffix();
  uint64_t v1 = log_get_logging_obg("com.apple.threadradiod", "default");
  CFStringRef v2 = v1;
  if (v0)
  {
    if (v1)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v3 = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set user directory suffix: com.apple.threadradiod", v3, 2u);
        }
      }
      goto LABEL_6;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
LABEL_6:

    return;
  }
  if (v1)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      createTmpSubDir(v2);

      return;
    }
    goto LABEL_6;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_6;
  }
LABEL_14:
  PcapManager::start_pcap_capture();
}

void sub_1000F7BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  CFDictionaryRef v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      int v10 = a2;
    }
    else {
      int v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        size_t v11 = (uint64_t **)v6;
        __int16 v14 = (const void *)v6[4];
        int v12 = v6 + 4;
        size_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          double v17 = v12;
        }
        else {
          double v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        int v6 = *v11;
        CFDictionaryRef v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      int v6 = v11[1];
      if (!v6)
      {
        CFDictionaryRef v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    size_t v11 = a1 + 1;
LABEL_27:
    int v23 = (uint64_t *)v11;
    size_t v11 = (uint64_t **)operator new(0x40uLL);
    int v24 = *a4;
    BOOL v25 = (uint64_t *)*((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((unsigned char *)v11 + 56) = 0;
    *size_t v11 = 0;
    v11[1] = 0;
    void v11[2] = v23;
    *CFDictionaryRef v7 = (uint64_t *)v11;
    long long v26 = (uint64_t *)**a1;
    uint64_t v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      uint64_t v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>::init_slot_function<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v4 = (uint64_t)boost::function2<void,std::string const&,boost::any const&>::assign_to<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>(boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>)::stored_vtable
     + 1;
  BOOL result = boost::function3<void,void *,std::string,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>>::swap(&v4, (uint64_t *)(a1 + 24));
  if (v4 && (v4 & 1) == 0)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, _WORD *, unsigned int))(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v3) {
      return (uint64_t *)v3((uint64_t)&v5, &v5, 2u);
    }
  }
  return result;
}

void sub_1000F7DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9 && (a9 & 1) == 0)
  {
    size_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(a9 & 0xFFFFFFFFFFFFFFFELL);
    if (v11) {
      v11(v9, v9, 2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      a2[4] = 0;
      return result;
    }
    BOOL result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F5969 & 0x7FFFFFFFFFFFFFFFLL)
      || (BOOL result = strcmp((const char *)result, (const char *)(0x80000001003F5969 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,void (*)(std::string const&,boost::any const&),boost::_bi::list2<boost::arg<1>,boost::arg<2>>>,void,std::string const&,boost::any const&>::invoke(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,void (*)(std::string const&,int),boost::_bi::list2<boost::_bi::value<char const*>,boost::arg<1>>>>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      a2[4] = 0;
      return result;
    }
    BOOL result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F59F6 & 0x7FFFFFFFFFFFFFFFLL)
      || (BOOL result = strcmp((const char *)result, (const char *)(0x80000001003F59F6 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void,void (*)(std::string const&,int),boost::_bi::list2<boost::_bi::value<char const*>,boost::arg<1>>>,void,int>::invoke(uint64_t a1, int a2)
{
  int v2 = a2;
  uint64_t v3 = (unsigned int *)&v2;
  boost::_bi::list2<boost::_bi::value<char const*>,boost::arg<1>>::operator()<void (*)(std::string const&,int),boost::_bi::rrlist1<int>>((const char **)(a1 + 8), (void (**)(void **, void))a1, &v3);
}

void boost::_bi::list2<boost::_bi::value<char const*>,boost::arg<1>>::operator()<void (*)(std::string const&,int),boost::_bi::rrlist1<int>>(const char **a1, void (**a2)(void **, void), unsigned int **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a1;
  size_t v6 = strlen(*a1);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFDictionaryRef v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v6;
  int v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  v4(__dst, **a3);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1000F80C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,void (*)(std::string const&,int,boost::any),boost::_bi::list3<boost::_bi::value<char const*>,boost::arg<1>,boost::arg<2>>>>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      a2[4] = 0;
      return result;
    }
    BOOL result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F5A7FLL & 0x7FFFFFFFFFFFFFFFLL)
      || (BOOL result = strcmp((const char *)result, (const char *)(0x80000001003F5A7FLL & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker2<boost::_bi::bind_t<void,void (*)(std::string const&,int,boost::any),boost::_bi::list3<boost::_bi::value<char const*>,boost::arg<1>,boost::arg<2>>>,void,int,boost::any const&>::invoke(uint64_t a1, int a2, unsigned int *a3)
{
  int v3 = a2;
  v4[0] = (unsigned int *)&v3;
  v4[1] = a3;
  boost::_bi::list3<boost::_bi::value<char const*>,boost::arg<1>,boost::arg<2>>::operator()<void (*)(std::string const&,int,boost::any),boost::_bi::rrlist2<int,boost::any const&>>((const char **)(a1 + 8), (void (**)(void **, uint64_t, uint64_t *))a1, v4);
}

void boost::_bi::list3<boost::_bi::value<char const*>,boost::arg<1>,boost::arg<2>>::operator()<void (*)(std::string const&,int,boost::any),boost::_bi::rrlist2<int,boost::any const&>>(const char **a1, void (**a2)(void **, uint64_t, uint64_t *), unsigned int **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a1;
  size_t v6 = strlen(*a1);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFDictionaryRef v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v8 = (void **)operator new(v12 + 1);
    __dst[1] = v7;
    unint64_t v17 = v13 | 0x8000000000000000;
    __dst[0] = v8;
LABEL_9:
    memmove(v8, v5, (size_t)v7);
    *((unsigned char *)v7 + (void)v8) = 0;
    __int16 v14 = (uint64_t *)a3[1];
    uint64_t v10 = **a3;
    uint64_t v11 = *v14;
    if (!*v14) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v6;
  int v8 = __dst;
  if (v6) {
    goto LABEL_9;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v9 = (uint64_t *)a3[1];
  uint64_t v10 = **a3;
  uint64_t v11 = *v9;
  if (*v9) {
LABEL_10:
  }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
LABEL_11:
  uint64_t v15 = v11;
  v4(__dst, v10, &v15);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1000F8344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_GeoServicesHandlerRcp_mm()
{
  qword_1004B6068 = 0;
  qword_1004B6060 = 0;
  ThreadCountryMappingTable = (uint64_t)&qword_1004B6060;
  __cxa_atexit((void (*)(void *))std::map<std::string,unsigned char>::~map[abi:ne180100], &ThreadCountryMappingTable, (void *)&_mh_execute_header);
  *(void *)&country[8] = 0;
  *(void *)&country[16] = 0;
  *(void *)country = 0;
  __cxa_atexit((void (*)(void *))&std::string::~string, country, (void *)&_mh_execute_header);
}

void any_to_data(const boost::any *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *(void *)a1;
  if (v4) {
    long long v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t v6 = v5[1];
  }
  if (v6 == 0x80000001003F6406
    || ((v6 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v6, 0x80000001003F6406)
    && !strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      CFDictionaryRef v7 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    uint64_t v9 = v7[1] & 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v10 = (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL);
    if (v9 != (0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v9 = strcmp((const char *)v9, v10);
      if (v9)
      {
        __src.__vftable = 0;
        std::bad_cast::bad_cast(&__src);
        __src.__vftable = (std::bad_cast_vtbl *)off_100495C28;
        boost::throw_exception<boost::bad_any_cast>();
      }
    }
    uint64_t v11 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
    }
    else
    {
      long long v12 = *(_OWORD *)(v11 + 8);
      v34.__r_.__value_.__r.__words[2] = *(void *)(v11 + 24);
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v12;
    }
    __chkstk_darwin(v9, v10);
    __int16 v14 = (char *)&v31 - v13;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v15 = (unint64_t)HIBYTE(v34.__r_.__value_.__r.__words[2]) >> 1;
    }
    else {
      unint64_t v15 = v34.__r_.__value_.__l.__size_ >> 1;
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v16 = &v34;
    }
    else {
      size_t v16 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    int v17 = parse_string_into_data(v14, v15, v16);
    __src.__vftable = 0;
    v33[0] = 0;
    v33[1] = 0;
    if (v17)
    {
      if (v17 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      size_t v18 = v17;
      int v19 = (char *)operator new(v17);
      memcpy(v19, v14, v18);
      *a2 = v19;
      a2[1] = &v19[v18];
      a2[2] = &v19[v18];
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    BOOL v20 = (std::bad_cast_vtbl *)v34.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v20);
    return;
  }
  if (*(void *)a1) {
    int v8 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
  uint64_t v21 = v8[1];
  }
  if (v21 == 0x80000001003F6658
    || ((v21 & 0x80000001003F6658 & 0x8000000000000000) != 0) != __OFSUB__(v21, 0x80000001003F6658)
    && !strcmp((const char *)(v21 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<nl::Data>((uint64_t *)a1, &v34);
    std::string::size_type v22 = v34.__r_.__value_.__r.__words[2];
    *(_OWORD *)a2 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
    a2[2] = v22;
    return;
  }
  if (*(void *)a1)
  {
    uint64_t v23 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v25 = __OFSUB__(v23, v24);
    if (v23 == v24) {
      goto LABEL_48;
    }
  }
  else
  {
    BOOL v25 = __OFSUB__(v23, v24);
    if (v23 == v24) {
      goto LABEL_48;
    }
  }
  if ((v24 & v23) < 0 != v25
    && !strcmp((const char *)(v23 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_48:
    if (*(void *)a1)
    {
      int v29 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v30 = (const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL);
      if (v29 == (const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v30 = (const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL);
      if (v29 == (const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_53:
        __src.__vftable = *(std::bad_cast_vtbl **)(*(void *)a1 + 8);
        reverse_bytes((char *)&__src, 8uLL);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)a2, 0, (char *)&__src, (char *)v33, 8);
        return;
      }
    }
    if (strcmp(v29, v30))
    {
      v34.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&v34);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_53;
  }
  boost::any_cast<std::vector<unsigned char>>((uint64_t *)a1, &__src);
  memset(&v34, 0, sizeof(v34));
  long long v26 = __src.__vftable;
  size_t v27 = v33[0] - (unint64_t)__src.__vftable;
  if ((std::bad_cast_vtbl *)v33[0] == __src.__vftable)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v26) {
      return;
    }
    goto LABEL_56;
  }
  if ((v27 & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v28 = (char *)operator new(v33[0] - (unint64_t)__src.__vftable);
  memcpy(v28, v26, v27);
  *a2 = v28;
  a2[1] = &v28[v27];
  a2[2] = &v28[v27];
  if (v26)
  {
LABEL_56:
    v33[0] = v26;
    BOOL v20 = v26;
    goto LABEL_30;
  }
}

void sub_1000F88F4(_Unwind_Exception *a1)
{
  std::bad_cast::~bad_cast((std::bad_cast *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_1000F8908(_Unwind_Exception *a1)
{
}

void sub_1000F895C(_Unwind_Exception *a1)
{
  std::bad_cast::~bad_cast((std::bad_cast *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1000F8970(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t boost::any_cast<unsigned long long>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(void *)(*a1 + 8);
}

void sub_1000F8A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t any_to_int(const boost::any *a1)
{
  uint64_t v2 = *(void *)a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = v3[1];
  }
  if (v4 == 0x80000001003F6406
    || ((v4 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v4, 0x80000001003F6406)
    && !strcmp((const char *)(v4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      long long v5 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    uint64_t v9 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v9 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v9, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v10 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
    }
    else
    {
      long long v11 = *(_OWORD *)(v10 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t result = strtol((const char *)p_p, 0, 0);
    uint64_t v14 = result;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      return v14;
    }
    return result;
  }
  if (*(void *)a1)
  {
    uint64_t v6 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v8 = __OFSUB__(v6, v7);
    if (v6 == v7) {
      goto LABEL_31;
    }
  }
  else
  {
    BOOL v8 = __OFSUB__(v6, v7);
    if (v6 == v7) {
      goto LABEL_31;
    }
  }
  if ((v7 & v6) < 0 != v8
    && !strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_31:
    if (*(void *)a1)
    {
      size_t v18 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      int v19 = (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      if (v18 == (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL)) {
        return *(unsigned __int8 *)(*(void *)a1 + 8);
      }
    }
    else
    {
      int v19 = (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      if (v18 == (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL)) {
        return *(unsigned __int8 *)(*(void *)a1 + 8);
      }
    }
    if (strcmp(v18, v19))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    return *(unsigned __int8 *)(*(void *)a1 + 8);
  }
  if (*(void *)a1)
  {
    uint64_t v15 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v17 = __OFSUB__(v15, v16);
    if (v15 == v16) {
      goto LABEL_44;
    }
  }
  else
  {
    BOOL v17 = __OFSUB__(v15, v16);
    if (v15 == v16) {
      goto LABEL_44;
    }
  }
  if ((v16 & v15) < 0 != v17
    && !strcmp((const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_44:
    if (*(void *)a1)
    {
      uint64_t v23 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v24 = (const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
      if (v23 == (const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL)) {
        return *(char *)(*(void *)a1 + 8);
      }
    }
    else
    {
      uint64_t v24 = (const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
      if (v23 == (const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL)) {
        return *(char *)(*(void *)a1 + 8);
      }
    }
    if (strcmp(v23, v24))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    return *(char *)(*(void *)a1 + 8);
  }
  if (*(void *)a1)
  {
    uint64_t v20 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v22 = __OFSUB__(v20, v21);
    if (v20 == v21) {
      goto LABEL_57;
    }
  }
  else
  {
    BOOL v22 = __OFSUB__(v20, v21);
    if (v20 == v21) {
      goto LABEL_57;
    }
  }
  if ((v21 & v20) < 0 != v22
    && !strcmp((const char *)(v20 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v21 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_57:
    if (*(void *)a1)
    {
      unint64_t v28 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      int v29 = (const char *)(v21 & 0x7FFFFFFFFFFFFFFFLL);
      if (v28 == (const char *)(v21 & 0x7FFFFFFFFFFFFFFFLL)) {
        return *(unsigned __int16 *)(*(void *)a1 + 8);
      }
    }
    else
    {
      int v29 = (const char *)(v21 & 0x7FFFFFFFFFFFFFFFLL);
      if (v28 == (const char *)(v21 & 0x7FFFFFFFFFFFFFFFLL)) {
        return *(unsigned __int16 *)(*(void *)a1 + 8);
      }
    }
    if (strcmp(v28, v29))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    return *(unsigned __int16 *)(*(void *)a1 + 8);
  }
  if (*(void *)a1)
  {
    uint64_t v25 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v27 = __OFSUB__(v25, v26);
    if (v25 == v26) {
      goto LABEL_69;
    }
  }
  else
  {
    BOOL v27 = __OFSUB__(v25, v26);
    if (v25 == v26) {
      goto LABEL_69;
    }
  }
  if ((v26 & v25) < 0 != v27
    && !strcmp((const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v26 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_69:
    if (*(void *)a1) {
      uint64_t v31 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    BOOL v32 = (const char *)(v31[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v32 != (const char *)(v26 & 0x7FFFFFFFFFFFFFFFLL) && strcmp(v32, (const char *)(v26 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    return *(__int16 *)(*(void *)a1 + 8);
  }
  if (*(void *)a1) {
    uint64_t v30 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
  uint64_t v33 = v30[1];
  }
  if (v33 == v34
    || (v34 & v33) < 0 != __OFSUB__(v33, v34)
    && !strcmp((const char *)(v33 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v34 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    goto LABEL_77;
  }
  BOOL v35 = *(void *)a1
      ? (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1)
    goto LABEL_87;
  if (*(void *)a1) {
    uint64_t v36 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
    return boost::any_cast<BOOL>((uint64_t *)a1);
  }
  unint64_t v37 = *(void *)a1
      ? (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1)
  {
LABEL_77:
    return boost::any_cast<unsigned int>((uint64_t *)a1);
  }
  else
  {
LABEL_87:
    return boost::any_cast<int>((uint64_t *)a1);
  }
}

void sub_1000F92A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000F92BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000F92D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000F92E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000F92F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

uint64_t boost::any_cast<unsigned int>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(unsigned int *)(*a1 + 8);
}

void sub_1000F93D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t boost::any_cast<int>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(unsigned int *)(*a1 + 8);
}

void sub_1000F94B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t boost::any_cast<BOOL>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(unsigned __int8 *)(*a1 + 8);
}

void sub_1000F958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t any_to_ipv6(const boost::any *a1)
{
  long long __dst = 0uLL;
  uint64_t v2 = *(void *)a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = v3[1];
  }
  if (v4 == 0x80000001003F6406
    || ((v4 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v4, 0x80000001003F6406)
    && !strcmp((const char *)(v4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      long long v5 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    std::bad_cast v7 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v7 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v7, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v28.__vftable = 0;
      std::bad_cast::bad_cast(&v28);
      v28.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v8 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    uint64_t v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    if (v15)
    {
      std::string::size_type v16 = 0;
      while (memchr("0123456789abcdefABCDEF:.", p_p->__r_.__value_.__s.__data_[v16], 0x18uLL))
      {
        if (v15 == ++v16) {
          goto LABEL_33;
        }
      }
      if (v16 != -1)
      {
        BOOL v17 = (char *)(v12 + size);
        if (v11 >= 0) {
          BOOL v17 = (char *)&__p + v10;
        }
        std::string::erase(&__p, v16, v17 - (char *)p_p - v16);
        LOBYTE(v11) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
        std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
      }
    }
LABEL_33:
    if ((v11 & 0x80u) == 0) {
      size_t v18 = &__p;
    }
    else {
      size_t v18 = (std::string *)v12;
    }
    if (inet_pton(30, (const char *)v18, &__dst) <= 0)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "String not IPv6 address");
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (*(void *)a1) {
      uint64_t v6 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    uint64_t v19 = v6[1];
    }
    if (v19 == 0x80000001003F6658
      || ((v19 & 0x80000001003F6658 & 0x8000000000000000) != 0) != __OFSUB__(v19, 0x80000001003F6658)
      && !strcmp((const char *)(v19 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      boost::any_cast<nl::Data>((uint64_t *)a1, &__p);
      uint64_t v20 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] <= 0x10)
      {
        if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = (const void *)__p.__r_.__value_.__r.__words[0];
        }
        memcpy(&__dst, v21, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
      }
      if (v20)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
        operator delete(v20);
      }
    }
    else
    {
      if (*(void *)a1) {
        BOOL v22 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
      }
      else {
      uint64_t v23 = (const char *)(v22[1] & 0x7FFFFFFFFFFFFFFFLL);
      }
      if (v23 != (const char *)(0x80000001003F5B76 & 0x7FFFFFFFFFFFFFFFLL)
        && strcmp(v23, (const char *)(0x80000001003F5B76 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
        boost::throw_exception<boost::bad_any_cast>();
      }
      return *(_OWORD *)(*(void *)a1 + 8);
    }
  }
  return __dst;
}

void sub_1000F9994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::any_cast<in6_addr>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != (const char *)(0x80000001003F5B76 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v4, (const char *)(0x80000001003F5B76 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6.__vftable = 0;
    std::bad_cast::bad_cast(&v6);
    v6.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(void *)(*a1 + 8);
}

void sub_1000F9AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

unint64_t any_to_uint64(const boost::any *a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4) {
    long long v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t v6 = v5[1];
  }
  if (v6 == 0x80000001003F6406
    || ((v6 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v6, 0x80000001003F6406)
    && !strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      std::bad_cast v7 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    long long v9 = (const char *)(v7[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v9 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v9, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v27.i64[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&v27);
      v27.i64[0] = (uint64_t)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v10 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a2) {
        goto LABEL_17;
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(v10 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a2)
      {
LABEL_17:
        if ((v12 & 0x80u) == 0) {
          std::string::size_type size = v12;
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size != 16)
        {
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "String not 16 characters long");
        }
        int v14 = 16;
LABEL_24:
        if ((v12 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unint64_t v16 = strtoull((const char *)p_p, 0, v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_37:
          operator delete(v17);
          return v16;
        }
        return v16;
      }
    }
    int v14 = 0;
    goto LABEL_24;
  }
  if (*(void *)a1) {
    uint64_t v8 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
  uint64_t v18 = v8[1];
  }
  if (v18 == 0x80000001003F6658
    || ((v18 & 0x80000001003F6658 & 0x8000000000000000) != 0) != __OFSUB__(v18, 0x80000001003F6658)
    && !strcmp((const char *)(v18 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    boost::any_cast<nl::Data>((uint64_t *)a1, &__p);
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] != 8)
    {
      uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v25, "Data not 8 bytes long");
    }
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = __p.__r_.__value_.__r.__words[0];
    }
    memcpyrev(&v27, v19, 8uLL);
    unint64_t v16 = v27.i64[0];
    BOOL v17 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_37;
    }
    return v16;
  }
  if (*(void *)a1) {
    uint64_t v21 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
  BOOL v22 = (const char *)(v21[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v22 != v23 && strcmp(v22, v23))
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    std::bad_cast::bad_cast((std::bad_cast *)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(void *)(*(void *)a1 + 8);
}

void sub_1000F9EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000F9EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::bad_cast a15)
{
  __cxa_free_exception(v15);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL any_to_BOOL(const boost::any *a1)
{
  uint64_t v2 = *(void *)a1;
  if (v2) {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  uint64_t v4 = v3[1];
  }
  if (v4 == 0x80000001003F6406
    || ((v4 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v4, 0x80000001003F6406)
    && !strcmp((const char *)(v4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      long long v5 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    long long v9 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v9 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v9, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v10 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_18:
        if (v12 == 1)
        {
          if (__p.__r_.__value_.__s.__data_[0] != 49) {
            goto LABEL_69;
          }
        }
        else
        {
          if (v12 != 3)
          {
            if (v12 == 4)
            {
              BOOL v13 = 1;
              if (LODWORD(__p.__r_.__value_.__l.__data_) == 1163219540
                || LODWORD(__p.__r_.__value_.__l.__data_) == 1702195828)
              {
LABEL_75:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return v13;
                }
                goto LABEL_81;
              }
            }
LABEL_69:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "false")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "no")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "0")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "FALSE")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "NO"))
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              BOOL v13 = strtol((const char *)p_p, 0, 0) != 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return v13;
              }
              goto LABEL_81;
            }
            BOOL v13 = 0;
            goto LABEL_75;
          }
          if (LOWORD(__p.__r_.__value_.__l.__data_) != 25977 || __p.__r_.__value_.__s.__data_[2] != 115)
          {
            unint64_t v16 = &__p;
LABEL_65:
            int data_low = LOWORD(v16->__r_.__value_.__l.__data_);
            int v24 = v16->__r_.__value_.__s.__data_[2];
            if (data_low != 17753 || v24 != 83) {
              goto LABEL_69;
            }
          }
        }
LABEL_63:
        BOOL v13 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v13;
        }
LABEL_81:
        operator delete(__p.__r_.__value_.__l.__data_);
        return v13;
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(v10 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == 3)
    {
      if (*(_WORD *)__p.__r_.__value_.__l.__data_ == 25977 && *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 2) == 115) {
        goto LABEL_63;
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    else if (__p.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1702195828)
    {
      goto LABEL_63;
    }
    if (size == 1)
    {
      if (*__p.__r_.__value_.__l.__data_ == 49) {
        goto LABEL_63;
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size == 4)
    {
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1163219540) {
        goto LABEL_63;
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size != 3) {
      goto LABEL_69;
    }
    unint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_65;
  }
  if (*(void *)a1)
  {
    uint64_t v6 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v8 = __OFSUB__(v6, v7);
    if (v6 == v7) {
      goto LABEL_47;
    }
  }
  else
  {
    BOOL v8 = __OFSUB__(v6, v7);
    if (v6 == v7) {
      goto LABEL_47;
    }
  }
  if ((v7 & v6) < 0 != v8
    && !strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_47:
    if (*(void *)a1)
    {
      uint64_t v18 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      unint64_t v19 = (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      if (v18 == (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v19 = (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      if (v18 == (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_52:
        BOOL v17 = *(unsigned char *)(*(void *)a1 + 8) == 0;
        return !v17;
      }
    }
    if (strcmp(v18, v19))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_52;
  }
  BOOL v17 = any_to_int(a1) == 0;
  return !v17;
}

void sub_1000FA42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_1000FA440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void any_to_string(const boost::any *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void *)a1;
  if (v4) {
    long long v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t v6 = v5[1];
  }
  if (v6 == 0x80000001003F6406
    || ((v6 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v6, 0x80000001003F6406)
    && !strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      uint64_t v7 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    long long v11 = (const char *)(v7[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v11 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v11, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      __p[0] = off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v12 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v12 + 8), *(void *)(v12 + 16));
    }
    else
    {
      long long v13 = *(_OWORD *)(v12 + 8);
      v60.__r_.__value_.__r.__words[2] = *(void *)(v12 + 24);
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v13;
    }
    goto LABEL_19;
  }
  if (*(void *)a1)
  {
    uint64_t v8 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v10 = __OFSUB__(v8, v9);
    if (v8 == v9) {
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v10 = __OFSUB__(v8, v9);
    if (v8 == v9) {
      goto LABEL_29;
    }
  }
  if ((v9 & v8) < 0 != v10
    && !strcmp((const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_29:
    if (*(void *)a1)
    {
      BOOL v17 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v18 = (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
      if (v17 == (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v18 = (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
      if (v17 == (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_34:
        snprintf((char *)&v60, 0xAuLL, "%u", *(unsigned __int8 *)(*(void *)a1 + 8));
        std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
        return;
      }
    }
    if (strcmp(v17, v18))
    {
      __p[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      __p[0] = off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_34;
  }
  if (*(void *)a1)
  {
    uint64_t v14 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v16 = __OFSUB__(v14, v15);
    if (v14 == v15) {
      goto LABEL_42;
    }
  }
  else
  {
    BOOL v16 = __OFSUB__(v14, v15);
    if (v14 == v15) {
      goto LABEL_42;
    }
  }
  if ((v15 & v14) < 0 != v16
    && !strcmp((const char *)(v14 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_42:
    if (*(void *)a1)
    {
      BOOL v22 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v23 = (const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
      if (v22 == (const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v23 = (const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
      if (v22 == (const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_47:
        snprintf((char *)&v60, 0xAuLL, "%d", *(char *)(*(void *)a1 + 8));
        std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
        return;
      }
    }
    if (strcmp(v22, v23))
    {
      __p[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      __p[0] = off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_47;
  }
  if (*(void *)a1)
  {
    uint64_t v19 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v21 = __OFSUB__(v19, v20);
    if (v19 == v20) {
      goto LABEL_55;
    }
  }
  else
  {
    BOOL v21 = __OFSUB__(v19, v20);
    if (v19 == v20) {
      goto LABEL_55;
    }
  }
  if ((v20 & v19) < 0 != v21
    && !strcmp((const char *)(v19 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v20 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_55:
    if (*(void *)a1)
    {
      int8x16_t v27 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      std::bad_cast v28 = (const char *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
      if (v27 == (const char *)(v20 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_60;
      }
    }
    else
    {
      std::bad_cast v28 = (const char *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
      if (v27 == (const char *)(v20 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_60:
        snprintf((char *)&v60, 0xAuLL, "%u", *(unsigned __int16 *)(*(void *)a1 + 8));
        std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
        return;
      }
    }
    if (strcmp(v27, v28))
    {
      __p[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      __p[0] = off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_60;
  }
  if (*(void *)a1)
  {
    uint64_t v24 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v26 = __OFSUB__(v24, v25);
    if (v24 == v25) {
      goto LABEL_67;
    }
  }
  else
  {
    BOOL v26 = __OFSUB__(v24, v25);
    if (v24 == v25) {
      goto LABEL_67;
    }
  }
  if ((v25 & v24) < 0 != v26
    && !strcmp((const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_67:
    if (*(void *)a1) {
      uint64_t v30 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    uint64_t v31 = (const char *)(v30[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v31 != (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL) && strcmp(v31, (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      __p[0] = off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    snprintf((char *)&v60, 0xAuLL, "%d", *(__int16 *)(*(void *)a1 + 8));
    std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
    return;
  }
  if (*(void *)a1) {
    int v29 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
  uint64_t v32 = v29[1];
  }
  if (v32 == v33
    || (v33 & v32) < 0 != __OFSUB__(v32, v33)
    && !strcmp((const char *)(v32 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v33 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    goto LABEL_93;
  }
  if (*(void *)a1) {
    uint64_t v34 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else {
    goto LABEL_83;
  }
  if (*(void *)a1) {
    uint64_t v36 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else
  {
    uint64_t v37 = boost::any_cast<unsigned long long>((uint64_t *)a1);
    snprintf((char *)&v60, 0x14uLL, "%08x%08x", HIDWORD(v37), v37);
    std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
    return;
  }
  int v38 = *(void *)a1
      ? (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1)
  {
LABEL_93:
    int v39 = boost::any_cast<unsigned int>((uint64_t *)a1);
    snprintf((char *)&v60, 0xAuLL, "%u", v39);
    std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
    return;
  }
  if (*(void *)a1) {
    size_t v40 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else
  {
LABEL_83:
    int v35 = boost::any_cast<int>((uint64_t *)a1);
    snprintf((char *)&v60, 0xAuLL, "%d", v35);
    std::string::assign((std::string *)a2, (const std::string::value_type *)&v60);
    return;
  }
  if (*(void *)a1) {
    BOOL v41 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else
  {
    if (boost::any_cast<BOOL>((uint64_t *)a1)) {
      int v42 = "true";
    }
    else {
      int v42 = "false";
    }
    std::string::assign((std::string *)a2, v42);
    return;
  }
  if (*(void *)a1) {
    BOOL v43 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
  }
  else
  {
    if (*(void *)a1) {
      uint64_t v48 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else
    {
      boost::any_cast<std::list<std::string>>((uint64_t *)a1, &v60);
      if (v60.__r_.__value_.__r.__words[2])
      {
        std::string::assign((std::string *)a2, "{\n");
        for (uint64_t i = (std::string *)v60.__r_.__value_.__l.__size_; i != &v60; uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
        {
          std::operator+<char>();
          uint64_t v50 = std::string::append(&v57, "\"\n");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          int64_t v59 = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          if (v59 >= 0) {
            uint64_t v52 = __p;
          }
          else {
            uint64_t v52 = (void **)__p[0];
          }
          if (v59 >= 0) {
            std::string::size_type v53 = HIBYTE(v59);
          }
          else {
            std::string::size_type v53 = (std::string::size_type)__p[1];
          }
          std::string::append((std::string *)a2, (const std::string::value_type *)v52, v53);
          if (SHIBYTE(v59) < 0)
          {
            operator delete(__p[0]);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
LABEL_141:
            }
              operator delete(v57.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_141;
          }
        }
        std::string::append((std::string *)a2, "}");
      }
      else
      {
        std::string::assign((std::string *)a2, "{ }");
      }
      std::list<std::string>::~list((char *)&v60);
      return;
    }
    if (*(void *)a1) {
      unsigned int v54 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else
    {
      std::string::append((std::string *)a2, "<");
      if (*(void *)a1) {
        int v56 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
      }
      else {
      std::string::append((std::string *)a2, (const std::string::value_type *)(v56[1] & 0x7FFFFFFFFFFFFFFFLL));
      }
      std::string::append((std::string *)a2, ">");
      return;
    }
    __p[0] = (void *)boost::any_cast<in6_addr>((uint64_t *)a1);
    __p[1] = v55;
    in6_addr_to_string((const in6_addr *)__p, &v60);
LABEL_19:
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v60;
    return;
  }
  boost::any_cast<nl::Data>((uint64_t *)a1, &v60);
  std::string::basic_string[abi:ne180100](__p, 2 * (v60.__r_.__value_.__l.__size_ - v60.__r_.__value_.__r.__words[0]), 0);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v59;
  std::string::reserve((std::string *)a2, (2 * (v60.__r_.__value_.__l.__size_ - v60.__r_.__value_.__r.__words[0])) | 1);
  if (v60.__r_.__value_.__l.__size_ == v60.__r_.__value_.__r.__words[0]) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = (unsigned __int8 *)v60.__r_.__value_.__r.__words[0];
  }
  int v45 = *(char *)(a2 + 23);
  if (v45 >= 0) {
    char v46 = (char *)a2;
  }
  else {
    char v46 = *(char **)a2;
  }
  if (v45 >= 0) {
    unint64_t v47 = 22;
  }
  else {
    unint64_t v47 = (*(void *)(a2 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  encode_data_into_string(v44, v60.__r_.__value_.__l.__size_ - v60.__r_.__value_.__r.__words[0], v46, v47, 0);
  if (v60.__r_.__value_.__r.__words[0])
  {
    v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
    operator delete(v60.__r_.__value_.__l.__data_);
  }
}

void sub_1000FB148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::bad_cast a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::list<std::string>::~list((char *)&__p);
  if (*(char *)(v26 + 23) < 0)
  {
    operator delete(*(void **)v26);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void any_to_int_set(const boost::any *a1@<X0>, uint64_t **a2@<X8>)
{
  a2[1] = 0;
  uint64_t v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  uint64_t v5 = *(void *)a1;
  if (v5) {
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else {
  uint64_t v7 = v6[1];
  }
  if (v7 == 0x80000001003F6406
    || ((v7 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v7, 0x80000001003F6406)
    && !strcmp((const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1) {
      size_t v8 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
    }
    else {
    uint64_t v12 = (const char *)(v8[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v12 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v12, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v71.__vftable = 0;
      std::bad_cast::bad_cast(&v71);
      v71.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v13 = *(void *)a1;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
    }
    else
    {
      long long v14 = *(_OWORD *)(v13 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (std::string::find(&__p, 44, 0) == -1)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((p_p->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
          && (_DefaultRuneLocale.__runetype[p_p->__r_.__value_.__s.__data_[0]] & 0x400) != 0)
        {
          int v17 = strtol((const char *)p_p, 0, 0);
          int v18 = v17;
          uint64_t v19 = *v4;
          uint64_t v20 = v4;
          if (*v4)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v20 = (void *)v19;
                int v21 = *(_DWORD *)(v19 + 28);
                if (v21 <= v17) {
                  break;
                }
                uint64_t v19 = *v20;
                uint64_t v4 = v20;
                if (!*v20) {
                  goto LABEL_35;
                }
              }
              if (v21 >= v17) {
                break;
              }
              uint64_t v19 = v20[1];
              if (!v19)
              {
                uint64_t v4 = v20 + 1;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            BOOL v22 = operator new(0x20uLL);
            v22[7] = v18;
            *(void *)BOOL v22 = 0;
            *((void *)v22 + 1) = 0;
            *((void *)v22 + 2) = v20;
            void *v4 = v22;
            uint64_t v23 = (uint64_t *)**a2;
            if (v23)
            {
              *a2 = v23;
              BOOL v22 = (_DWORD *)*v4;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], (uint64_t *)v22);
            a2[2] = (uint64_t *)((char *)a2[2] + 1);
          }
          goto LABEL_38;
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, &__p);
      }
      else
      {
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "integer mask string format not yet implemented");
      }
    }
LABEL_38:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*(void *)a1)
  {
    uint64_t v9 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
    BOOL v11 = __OFSUB__(v9, v10);
    if (v9 == v10) {
      goto LABEL_47;
    }
  }
  else
  {
    BOOL v11 = __OFSUB__(v9, v10);
    if (v9 == v10) {
      goto LABEL_47;
    }
  }
  if ((v10 & v9) < 0 == v11
    || strcmp((const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a1)
    {
      uint64_t v24 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
      BOOL v26 = __OFSUB__(v24, v25);
      if (v24 == v25) {
        goto LABEL_67;
      }
    }
    else
    {
      BOOL v26 = __OFSUB__(v24, v25);
      if (v24 == v25) {
        goto LABEL_67;
      }
    }
    if ((v25 & v24) < 0 != v26
      && !strcmp((const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL)))
    {
LABEL_67:
      if (*(void *)a1)
      {
        uint64_t v36 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v37 = (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
        if (v36 == (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL)) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v37 = (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
        if (v36 == (const char *)(v25 & 0x7FFFFFFFFFFFFFFFLL))
        {
LABEL_72:
          int v29 = *(char *)(*(void *)a1 + 8);
          uint64_t v38 = *v4;
          uint64_t v31 = v4;
          if (!*v4) {
            goto LABEL_118;
          }
          while (1)
          {
            while (1)
            {
              uint64_t v31 = (void *)v38;
              int v39 = *(_DWORD *)(v38 + 28);
              if (v39 <= v29) {
                break;
              }
              uint64_t v38 = *v31;
              uint64_t v4 = v31;
              if (!*v31) {
                goto LABEL_118;
              }
            }
            if (v39 >= v29) {
              return;
            }
            uint64_t v38 = v31[1];
            if (!v38)
            {
              uint64_t v4 = v31 + 1;
              goto LABEL_118;
            }
          }
        }
      }
      if (strcmp(v36, v37))
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
        boost::throw_exception<boost::bad_any_cast>();
      }
      goto LABEL_72;
    }
    if (*(void *)a1)
    {
      uint64_t v33 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
      BOOL v35 = __OFSUB__(v33, v34);
      if (v33 == v34) {
        goto LABEL_87;
      }
    }
    else
    {
      BOOL v35 = __OFSUB__(v33, v34);
      if (v33 == v34) {
        goto LABEL_87;
      }
    }
    if ((v34 & v33) < 0 != v35
      && !strcmp((const char *)(v33 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v34 & 0x7FFFFFFFFFFFFFFFLL)))
    {
LABEL_87:
      if (*(void *)a1)
      {
        BOOL v43 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v44 = (const char *)(v34 & 0x7FFFFFFFFFFFFFFFLL);
        if (v43 == (const char *)(v34 & 0x7FFFFFFFFFFFFFFFLL)) {
          goto LABEL_92;
        }
      }
      else
      {
        uint64_t v44 = (const char *)(v34 & 0x7FFFFFFFFFFFFFFFLL);
        if (v43 == (const char *)(v34 & 0x7FFFFFFFFFFFFFFFLL))
        {
LABEL_92:
          int v29 = *(unsigned __int16 *)(*(void *)a1 + 8);
          uint64_t v45 = *v4;
          uint64_t v31 = v4;
          if (!*v4) {
            goto LABEL_118;
          }
          while (1)
          {
            while (1)
            {
              uint64_t v31 = (void *)v45;
              int v46 = *(_DWORD *)(v45 + 28);
              if (v46 <= v29) {
                break;
              }
              uint64_t v45 = *v31;
              uint64_t v4 = v31;
              if (!*v31) {
                goto LABEL_118;
              }
            }
            if (v46 >= v29) {
              return;
            }
            uint64_t v45 = v31[1];
            if (!v45)
            {
              uint64_t v4 = v31 + 1;
              goto LABEL_118;
            }
          }
        }
      }
      if (strcmp(v43, v44))
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        std::bad_cast::bad_cast((std::bad_cast *)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
        boost::throw_exception<boost::bad_any_cast>();
      }
      goto LABEL_92;
    }
    if (*(void *)a1)
    {
      uint64_t v40 = *(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8);
      BOOL v42 = __OFSUB__(v40, v41);
      if (v40 == v41) {
        goto LABEL_106;
      }
    }
    else
    {
      BOOL v42 = __OFSUB__(v40, v41);
      if (v40 == v41)
      {
LABEL_106:
        if (*(void *)a1) {
          uint64_t v48 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
        }
        else {
        uint64_t v49 = (const char *)(v48[1] & 0x7FFFFFFFFFFFFFFFLL);
        }
        if (v49 != (const char *)(v41 & 0x7FFFFFFFFFFFFFFFLL)
          && strcmp(v49, (const char *)(v41 & 0x7FFFFFFFFFFFFFFFLL)))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          std::bad_cast::bad_cast((std::bad_cast *)&__p);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
          boost::throw_exception<boost::bad_any_cast>();
        }
        int v29 = *(__int16 *)(*(void *)a1 + 8);
        uint64_t v50 = *v4;
        uint64_t v31 = v4;
        if (!*v4) {
          goto LABEL_118;
        }
        while (1)
        {
          while (1)
          {
            uint64_t v31 = (void *)v50;
            int v51 = *(_DWORD *)(v50 + 28);
            if (v51 <= v29) {
              break;
            }
            uint64_t v50 = *v31;
            uint64_t v4 = v31;
            if (!*v31) {
              goto LABEL_118;
            }
          }
          if (v51 >= v29) {
            return;
          }
          uint64_t v50 = v31[1];
          if (!v50)
          {
            uint64_t v4 = v31 + 1;
            goto LABEL_118;
          }
        }
      }
    }
    if ((v41 & v40) < 0 == v42
      || strcmp((const char *)(v40 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v41 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      if (*(void *)a1) {
        unint64_t v47 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
      }
      else {
      uint64_t v54 = v47[1];
      }
      if (v54 == v55
        || (v55 & v54) < 0 != __OFSUB__(v54, v55)
        && !strcmp((const char *)(v54 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v55 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = boost::any_cast<unsigned int>((uint64_t *)a1);
        std::set<int>::insert[abi:ne180100](a2, (int *)&__p);
      }
      else
      {
        if (*(void *)a1) {
          int v56 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
        }
        else
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = boost::any_cast<int>((uint64_t *)a1);
          std::set<int>::insert[abi:ne180100](a2, (int *)&__p);
        }
        else
        {
          if (*(void *)a1) {
            std::string v57 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
          }
          else
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = boost::any_cast<BOOL>((uint64_t *)a1);
            std::set<int>::insert[abi:ne180100](a2, (int *)&__p);
          }
          else
          {
            if (*(void *)a1) {
              uint64_t v58 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
            }
            else
            {
              boost::any_cast<std::list<int>>((uint64_t *)a1, (uint64_t *)&__p);
              std::set<int>::insert[abi:ne180100]<std::__list_iterator<int,void *>>((uint64_t *)a2, __p.__r_.__value_.__l.__size_, (uint64_t)&__p);
              std::list<int>::~list((uint64_t *)&__p);
            }
            else
            {
              if (*(void *)a1) {
                int64_t v59 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1);
              }
              else
              {
                boost::any_cast<std::list<boost::any>>((uint64_t *)a1, &__p);
                for (uint64_t i = (std::string *)__p.__r_.__value_.__l.__size_;
                      i != &__p;
                      uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
                {
                  int v61 = any_to_int((const boost::any *)&i->__r_.__value_.__r.__words[2]);
                  int v62 = v61;
                  uint64_t v63 = *v4;
                  int v64 = v4;
                  std::string::value_type v65 = v4;
                  if (*v4)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        std::string::value_type v65 = (void *)v63;
                        int v66 = *(_DWORD *)(v63 + 28);
                        if (v61 >= v66) {
                          break;
                        }
                        uint64_t v63 = *v65;
                        int v64 = v65;
                        if (!*v65) {
                          goto LABEL_158;
                        }
                      }
                      if (v66 >= v61) {
                        break;
                      }
                      uint64_t v63 = v65[1];
                      if (!v63)
                      {
                        int v64 = v65 + 1;
                        goto LABEL_158;
                      }
                    }
                  }
                  else
                  {
LABEL_158:
                    __int16 v67 = operator new(0x20uLL);
                    v67[7] = v62;
                    *(void *)__int16 v67 = 0;
                    *((void *)v67 + 1) = 0;
                    *((void *)v67 + 2) = v65;
                    *int v64 = v67;
                    std::string::value_type v68 = (uint64_t *)**a2;
                    if (v68)
                    {
                      *a2 = v68;
                      __int16 v67 = (_DWORD *)*v64;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], (uint64_t *)v67);
                    a2[2] = (uint64_t *)((char *)a2[2] + 1);
                  }
                }
                std::list<boost::any>::~list((uint64_t *)&__p);
              }
              else
              {
                boost::any_cast<std::set<int>>((uint64_t *)a1, (uint64_t *)&__p);
                std::set<int>::operator=[abi:ne180100]((uint64_t)a2, &__p);
                std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&__p, (void *)__p.__r_.__value_.__l.__size_);
              }
            }
          }
        }
      }
      return;
    }
    goto LABEL_106;
  }
LABEL_47:
  if (*(void *)a1)
  {
    int8x16_t v27 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a1 + 16))(*(void *)a1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    std::bad_cast v28 = (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 == (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL)) {
      goto LABEL_52;
    }
LABEL_51:
    if (strcmp(v27, v28))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_52;
  }
  std::bad_cast v28 = (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
  if (v27 != (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL)) {
    goto LABEL_51;
  }
LABEL_52:
  int v29 = *(unsigned __int8 *)(*(void *)a1 + 8);
  uint64_t v30 = *v4;
  uint64_t v31 = v4;
  if (!*v4)
  {
LABEL_118:
    uint64_t v52 = operator new(0x20uLL);
    v52[7] = v29;
    *(void *)uint64_t v52 = 0;
    *((void *)v52 + 1) = 0;
    *((void *)v52 + 2) = v31;
    void *v4 = v52;
    std::string::size_type v53 = (uint64_t *)**a2;
    if (v53)
    {
      *a2 = v53;
      uint64_t v52 = (_DWORD *)*v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], (uint64_t *)v52);
    a2[2] = (uint64_t *)((char *)a2[2] + 1);
    return;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v31 = (void *)v30;
      int v32 = *(_DWORD *)(v30 + 28);
      if (v32 <= v29) {
        break;
      }
      uint64_t v30 = *v31;
      uint64_t v4 = v31;
      if (!*v31) {
        goto LABEL_118;
      }
    }
    if (v32 >= v29) {
      break;
    }
    uint64_t v30 = v31[1];
    if (!v30)
    {
      uint64_t v4 = v31 + 1;
      goto LABEL_118;
    }
  }
}

void sub_1000FBEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v14, *(void **)(v14 + 8));
  _Unwind_Resume(a1);
}

void sub_1000FBFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12)
{
  std::bad_cast::~bad_cast(&a12);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v12, *(void **)(v12 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::set<int>::insert[abi:ne180100](uint64_t **a1, int *a2)
{
  uint64_t v4 = a1 + 1;
  int v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 7);
        if (v5 >= v7) {
          break;
        }
        int v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= v5) {
        return v6;
      }
      int v3 = v6[1];
      if (!v3)
      {
        uint64_t v4 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    size_t v8 = v6;
    uint64_t v9 = operator new(0x20uLL);
    v9[7] = v5;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v8;
    void *v4 = (uint64_t *)v9;
    uint64_t v10 = (uint64_t *)**a1;
    BOOL v11 = (uint64_t *)v9;
    if (v10)
    {
      *a1 = v10;
      BOOL v11 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v9;
  }
}

uint64_t boost::any_cast<std::list<int>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    int v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t result = v5[1] & 0x7FFFFFFFFFFFFFFFLL;
  }
  if (result != (0x80000001003F5B80 & 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F5B80 & 0x7FFFFFFFFFFFFFFFLL));
    if (result)
    {
      v12.__vftable = 0;
      std::bad_cast::bad_cast(&v12);
      v12.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
  }
  uint64_t v7 = *a1;
  uint64_t v8 = *a1 + 8;
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9 != v8)
  {
    uint64_t v10 = 1;
    BOOL v11 = a2;
    do
    {
      uint64_t result = (uint64_t)operator new(0x18uLL);
      *(_DWORD *)(result + 16) = *(_DWORD *)(v9 + 16);
      *(void *)uint64_t result = v11;
      *(void *)(result + 8) = a2;
      v11[1] = result;
      *a2 = result;
      a2[2] = v10;
      uint64_t v9 = *(void *)(v9 + 8);
      ++v10;
      BOOL v11 = (uint64_t *)result;
    }
    while (v9 != v8);
  }
  return result;
}

void sub_1000FC208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__list_iterator<int,void *>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    v15[7] = v3;
    v15[8] = v4;
    uint64_t v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      uint64_t result = std::__tree<int>::__find_equal<int>(v7, v8, v15, &v14, (int *)(v6 + 16));
      if (!*result)
      {
        uint64_t v10 = result;
        BOOL v11 = operator new(0x20uLL);
        v11[7] = *(_DWORD *)(v6 + 16);
        std::bad_cast v12 = v15[0];
        *(void *)BOOL v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        uint64_t *v10 = (uint64_t)v11;
        uint64_t v13 = *(void **)*v7;
        if (v13)
        {
          *uint64_t v7 = (uint64_t)v13;
          uint64_t v9 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v9 = (uint64_t *)v11;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v9);
        ++v7[2];
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t *std::list<int>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        int v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void *boost::any_cast<std::list<boost::any>>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4) {
    int v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else {
  uint64_t v6 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v6 != (const char *)(0x80000001003F5BCBLL & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v6, (const char *)(0x80000001003F5BCBLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v9.__vftable = 0;
    std::bad_cast::bad_cast(&v9);
    v9.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  uint64_t v7 = *a1 + 8;

  return std::list<boost::any>::list(a2, v7);
}

void sub_1000FC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t *std::list<boost::any>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

uint64_t std::set<int>::operator=[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  int v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
  return a1;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  int v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    BOOL v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = __dst - v11;
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      size_t v15 = (size_t)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v25 = v15 + v13;
    size_t v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    size_t v27 = v26;
    size_t v28 = v25;
    if (v11 != v5)
    {
      int v29 = v5;
      size_t v28 = v25;
      if (v13 < 0x20) {
        goto LABEL_47;
      }
      int v29 = v5;
      size_t v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20) {
        goto LABEL_47;
      }
      int v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      size_t v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v30 = v5 - 16;
      uint64_t v31 = (char *)(v27 + v5 - 16 - v11);
      unint64_t v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)uint64_t v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          char v34 = *--v29;
          *(unsigned char *)--size_t v28 = v34;
        }
        while (v29 != v11);
      }
      uint64_t v10 = *(char **)(a1 + 8);
    }
    BOOL v35 = (char *)(v25 + a5);
    size_t v36 = v27 + v16;
    if (v10 != v5) {
      memmove(v35, v5, v10 - v5);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v35[v10 - v5];
    *(void *)(a1 + 16) = v36;
    if (v37) {
      operator delete(v37);
    }
    return (char *)v25;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    int v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
    int v21 = &__dst[a5];
    BOOL v22 = &v10[-a5];
    uint64_t v23 = v20;
    if ((unint64_t)v10 < a5) {
      goto LABEL_39;
    }
    goto LABEL_18;
  }
  int v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    int v21 = &v5[a5];
    BOOL v22 = &v20[-a5];
    uint64_t v23 = &v10[v19];
    if (&v20[-a5] >= v10) {
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      uint64_t v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        uint64_t v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        int v39 = v20 + 16;
        uint64_t v40 = (long long *)(v22 + 16);
        unint64_t v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *int v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        BOOL v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      uint64_t v23 = v20;
    }
    do
    {
      char v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(v21, v5, v20 - v21);
    }
    if (v18 != __src) {
      memmove(v5, __src, v18 - __src);
    }
  }
  return v5;
}

void *std::list<boost::any>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v8 = *(void *)(v3 + 16);
      if (v8)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
        uint64_t v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      v7[1] = a1;
      void v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = *(void *)(v3 + 8);
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1000FC938(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1[2])
  {
    uint64_t v4 = *v1;
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(*v1 + 8);
    **(void **)(v4 + 8) = v6;
    void v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v8 = (uint64_t *)v5[1];
        uint64_t v7 = v5[2];
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v1);
    }
  }
  _Unwind_Resume(a1);
}

void create_xpc_server(NSObject *a1, dispatch_queue_s *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___Z17create_xpc_serverP16dispatch_queue_sS0__block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  void block[4] = a2;
  dispatch_sync(a1, block);
  (*(void (**)(uint64_t))(*(void *)xpc_server + 16))(xpc_server);
  InternalClientsInterface::add_interface((InternalClientsInterface *)internal_client_if);
}

void ___Z17create_xpc_serverP16dispatch_queue_sS0__block_invoke()
{
}

void sub_1000FCAF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t delete_xpc_server(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v1 = logging_obg;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      delete_xpc_server(v1);
      uint64_t result = xpc_server;
      if (!xpc_server) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
LABEL_7:
    uint64_t result = xpc_server;
    if (!xpc_server) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_7;
  }
  -[PowerEventHandler_Rcp init:]();
  uint64_t result = xpc_server;
  if (!xpc_server) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void send_response_to_otctl(const char *a1)
{
  TaskQueueWrapper::front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext, &v5);
  uint64_t v2 = *(void *)(*(void *)v5 + 1608);
  if (!v2)
  {
    std::runtime_error::runtime_error(&buf, "call to empty boost::function");
    buf.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&buf);
  }
  (*(void (**)(uint64_t, const char *))((v2 & 0xFFFFFFFFFFFFFFFELL) + 8))(*(void *)v5 + 1616, a1);
  TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      uint64_t v4 = v6;
      if (!v6) {
        return;
      }
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
LABEL_8:
    uint64_t v4 = v6;
    if (!v6) {
      return;
    }
    goto LABEL_9;
  }
  LOWORD(buf.__vftable) = 0;
  _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "-----------------------------------", (uint8_t *)&buf, 2u);
  uint64_t v4 = v6;
  if (!v6) {
    return;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
}

void sub_1000FCF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void sub_1000FCF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000FCF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OUTLINED_FUNCTION_2_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t std::map<std::pair<std::string,std::string>,os_log_s *>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t daemonExitInProgress()
{
  return daemonExit;
}

void setDaemonExit()
{
  daemonExit = 1;
  BOOL v0 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
  if (v0) {
    setDaemonExit_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
  }
}

void log_create_log_domain(const char *a1, char *category)
{
  if (!a1 || !category)
  {
    BOOL v8 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v8) {
      log_create_log_domain_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return;
  }
  os_log_t v4 = os_log_create(a1, category);
  size_t v5 = strlen(a1);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (long long *)operator new(v16 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v26 = v17 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v26) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_12:
  }
    memcpy(p_dst, a1, v6);
  *((unsigned char *)p_dst + v6) = 0;
  size_t v18 = strlen(category);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = (long long *)operator new(v21 + 1);
    *((void *)&v23 + 1) = v19;
    unint64_t v24 = v22 | 0x8000000000000000;
    *(void *)&long long v23 = v20;
  }
  else
  {
    HIBYTE(v24) = v18;
    uint64_t v20 = &v23;
    if (!v18) {
      goto LABEL_21;
    }
  }
  memcpy(v20, category, v19);
LABEL_21:
  *((unsigned char *)v20 + v19) = 0;
  *(_OWORD *)size_t v27 = __dst;
  unint64_t v28 = v26;
  *(_OWORD *)std::string __p = v23;
  unint64_t v30 = v24;
  *(void *)&long long __dst = v27;
  std::__tree<std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,os_log_s *>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>((uint64_t)&logObject, (const void **)v27, (uint64_t)&std::piecewise_construct, (long long **)&__dst)[10] = (uint64_t)v4;
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v27[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v28) < 0) {
    goto LABEL_25;
  }
}

void sub_1000FD22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000FD240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void *log_get_logging_obg(char *__s, const char *a2)
{
  if (daemonExit) {
    return &_os_log_default;
  }
  int v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)long long __dst = 0u;
  long long v53 = 0u;
  int v51 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)__sa = 0u;
  long long v46 = 0u;
  if (!__s || !a2)
  {
    uint64_t v2 = &_os_log_default;
    BOOL v14 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v14) {
      log_get_logging_obg_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    return v2;
  }
  if (strlen(__s) > 0x63 || strlen(a2) >= 0x64)
  {
    uint64_t v2 = &_os_log_default;
    BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v6) {
      log_get_logging_obg_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return v2;
  }
  strncpy(__dst, __s, 0x63uLL);
  strncpy(__sa, a2, 0x63uLL);
  size_t v22 = strlen(__dst);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    unint64_t v24 = (long long *)operator new(v25 + 1);
    *((void *)&v39 + 1) = v23;
    unint64_t v40 = v26 | 0x8000000000000000;
    *(void *)&long long v39 = v24;
    goto LABEL_19;
  }
  HIBYTE(v40) = v22;
  unint64_t v24 = &v39;
  if (v22) {
LABEL_19:
  }
    memcpy(v24, __dst, v23);
  *((unsigned char *)v24 + v23) = 0;
  size_t v27 = strlen(__sa);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    int v29 = (long long *)operator new(v30 + 1);
    *((void *)&v37 + 1) = v28;
    unint64_t v38 = v31 | 0x8000000000000000;
    *(void *)&long long v37 = v29;
  }
  else
  {
    HIBYTE(v38) = v27;
    int v29 = &v37;
    if (!v27) {
      goto LABEL_28;
    }
  }
  memcpy(v29, __sa, v28);
LABEL_28:
  *((unsigned char *)v29 + v28) = 0;
  *(_OWORD *)unint64_t v41 = v39;
  unint64_t v42 = v40;
  *(_OWORD *)std::string __p = v37;
  unint64_t v44 = v38;
  for (uint64_t i = qword_1004B60A8; i; uint64_t i = *(void *)i)
  {
    if ((std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((uint64_t)&qword_1004B60B0, (const void **)v41, (const void **)(i + 32)) & 1) == 0)
    {
      if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((uint64_t)&qword_1004B60B0, (const void **)(i + 32), (const void **)v41))
      {
        uint64_t v33 = qword_1004B60A8;
        if (!qword_1004B60A8) {
          goto LABEL_41;
        }
        char v34 = &qword_1004B60A8;
        do
        {
          int v35 = std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((uint64_t)&qword_1004B60B0, (const void **)(v33 + 32), (const void **)v41);
          size_t v36 = (uint64_t *)(v33 + 8);
          if (!v35)
          {
            size_t v36 = (uint64_t *)v33;
            char v34 = (uint64_t *)v33;
          }
          uint64_t v33 = *v36;
        }
        while (*v36);
        if (v34 == &qword_1004B60A8
          || std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((uint64_t)&qword_1004B60B0, (const void **)v41, (const void **)v34 + 4))
        {
LABEL_41:
          char v34 = &qword_1004B60A8;
        }
        uint64_t v2 = (void *)v34[10];
        goto LABEL_45;
      }
      i += 8;
    }
  }
  uint64_t v2 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    log_get_logging_obg_cold_3((uint64_t)__dst, (uint64_t)__sa);
  }
LABEL_45:
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[0]);
  }
  return v2;
}

void sub_1000FD610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000FD624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FD660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void log_create_log_modules_threadnetwork()
{
  log_create_log_domain("com.apple.ThreadNetwork", "default");
  log_create_log_domain("com.apple.ThreadNetwork", "thclient");

  log_create_log_domain("com.apple.ThreadNetwork", "thserver");
}

void log_create_log_modules()
{
  log_create_log_domain("com.apple.wpantund", "default");
  log_create_log_domain("com.apple.wpantund.ncp", "default");
  log_create_log_domain("com.apple.wpantund.tnm", "default");
  log_create_log_domain("com.apple.wpantund.tnm", "form");
  log_create_log_domain("com.apple.wpantund.tnm", "join");
  log_create_log_domain("com.apple.wpantund.tnm", "commissioning");
  log_create_log_domain("com.apple.wpantund.tnm", "init");
  log_create_log_domain("com.apple.wpantund.commissioning", "commissioning");
  log_create_log_domain("com.apple.wpantund.tnm", "threadStart");
  log_create_log_domain("com.apple.wpantund.tnm", "Wed");
  log_create_log_domain("com.apple.wpantund.awd", "default");
  log_create_log_domain("com.apple.wpantund.xpcserver", "default");
  log_create_log_domain("com.apple.wpantund.tdm", "default");
  log_create_log_domain("com.apple.wpantund.tdm", "init");
  log_create_log_domain("com.apple.wpantund.nm", "default");
  log_create_log_domain("com.apple.wpantund.nm", "init");
  log_create_log_domain("com.apple.threadradiod", "default");
  log_create_log_domain("com.apple.openthread", "default");

  log_create_log_domain("com.apple.rcp", "default");
}

uint64_t log_is_the_mask_enabled()
{
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,os_log_s *>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(uint64_t a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (uint64_t **)(a1 + 8);
  BOOL v6 = *(uint64_t **)(a1 + 8);
  if (!v6)
  {
    uint64_t v9 = (uint64_t **)(a1 + 8);
LABEL_9:
    std::__tree<std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,os_log_s *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(a1, a4, (uint64_t)&v14);
    uint64_t v11 = v14;
    *BOOL v14 = 0;
    v11[1] = 0;
    void v11[2] = (uint64_t)v9;
    *uint64_t v7 = v11;
    uint64_t v12 = **(void **)a1;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v11 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
    return v14;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v9 = (uint64_t **)v6;
      uint64_t v10 = (const void **)(v6 + 4);
      if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 16, a2, (const void **)v6 + 4))break; {
      BOOL v6 = *v9;
      }
      uint64_t v7 = v9;
      if (!*v9) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 16, v10, a2)) {
      break;
    }
    uint64_t v7 = v9 + 1;
    BOOL v6 = v9[1];
    if (!v6) {
      goto LABEL_9;
    }
  }
  uint64_t result = *v7;
  if (!*v7) {
    goto LABEL_9;
  }
  return result;
}

void std::__tree<std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,os_log_s *>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,os_log_s *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x58uLL);
  uint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *((_OWORD *)v6 + 2) = v9;
  }
  uint64_t v10 = (std::string *)(v7 + 56);
  if (*((char *)v8 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)v8 + 3), *((void *)v8 + 4));
  }
  else
  {
    long long v11 = *(long long *)((char *)v8 + 24);
    *((void *)v7 + 9) = *((void *)v8 + 5);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *((void *)v7 + 10) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1000FDA20(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 55) < 0)
  {
    operator delete(*v3);
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5 = *((char *)a3 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v5 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16) {
    return 0;
  }
  uint64_t v19 = (const void **)a3[3];
  uint64_t v18 = a3 + 3;
  uint64_t v17 = v19;
  int v20 = *((char *)v18 + 23);
  size_t v23 = (const void **)a2[3];
  size_t v22 = a2 + 3;
  uint64_t v21 = v23;
  int v24 = *((char *)v22 + 23);
  if (v24 >= 0) {
    size_t v25 = *((unsigned __int8 *)v22 + 23);
  }
  else {
    size_t v25 = (size_t)v22[1];
  }
  if (v24 >= 0) {
    uint64_t v26 = v22;
  }
  else {
    uint64_t v26 = v21;
  }
  if (v20 >= 0) {
    size_t v27 = *((unsigned __int8 *)v18 + 23);
  }
  else {
    size_t v27 = (size_t)v18[1];
  }
  if (v20 >= 0) {
    size_t v28 = v18;
  }
  else {
    size_t v28 = v17;
  }
  if (v27 >= v25) {
    size_t v29 = v25;
  }
  else {
    size_t v29 = v27;
  }
  int v30 = memcmp(v26, v28, v29);
  if (v30) {
    return v30 < 0;
  }
  else {
    return v25 < v27;
  }
}

uint64_t _GLOBAL__sub_I_log_cpp()
{
  qword_1004B60B0 = 0;
  qword_1004B60A8 = 0;
  logObject = (uint64_t)&qword_1004B60A8;
  return __cxa_atexit((void (*)(void *))std::map<std::pair<std::string,std::string>,os_log_s *>::~map[abi:ne180100], &logObject, (void *)&_mh_execute_header);
}

double memcpyrev(int8x16_t *a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > (unint64_t)a1 && (unint64_t)a1->u64 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      int v6 = (int8x16_t *)(a3 + a2 - 16);
      size_t v7 = a1 + 1;
      unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v9 = vrev64q_s8(*v6);
        int8x16_t v10 = vextq_s8(v9, v9, 8uLL);
        int8x16_t v11 = vrev64q_s8(v6[-1]);
        v7[-1] = v10;
        *size_t v7 = vextq_s8(v11, v11, 8uLL);
        v6 -= 2;
        v7 += 2;
        v8 -= 32;
      }
      while (v8);
      if (v3 == a3) {
        return *(double *)v10.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        int v5 = &a1->i8[v3];
        do
          *v5++ = *(unsigned char *)(a2 - 1 + v4--);
        while (v4);
        return *(double *)v10.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v12 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = a2 - v12 - 8;
    BOOL v14 = (uint64_t *)((char *)a1->i64 + v12);
    unint64_t v15 = v12 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *(int8x8_t *)v10.i8 = vrev64_s8(*(int8x8_t *)(v13 + a3));
      *v14++ = v10.i64[0];
      v13 -= 8;
      v15 += 8;
    }
    while (v15);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v10.i64;
}

uint64_t memcmprev(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v3 = 0;
  unint64_t v4 = (unsigned __int8 *)(a3 + a2 - 1);
  do
  {
    int v5 = *v4--;
    uint64_t v6 = *(unsigned __int8 *)(a1 + v3++) - v5;
  }
  while (v3 < a3 && !v6);
  return v6;
}

char *reverse_bytes(char *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = a2 >> 1;
    unint64_t v3 = &result[a2 - 1];
    do
    {
      char v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t parse_string_into_data(unsigned char *a1, uint64_t a2, unsigned char *a3)
{
  char v3 = *a3;
  if (*a3) {
    BOOL v4 = a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && a2 != 0)
  {
    size_t v7 = a3;
    uint64_t v8 = a2;
    int8x16_t v9 = a1;
    uint64_t v10 = 0;
    while (1)
    {
      unint64_t v12 = v7 + 1;
      __darwin_ct_rune_t v13 = __tolower(v3);
      if ((v13 - 48) < 0xA || (v13 - 97) <= 5)
      {
        if ((v13 - 48) >= 0xA) {
          char v15 = v13 + 9;
        }
        else {
          char v15 = v13;
        }
        *int8x16_t v9 = 16 * v15;
        uint64_t v10 = (v10 + 1);
        __darwin_ct_rune_t v16 = (char)*v12;
        if (!*v12) {
          return v10;
        }
        --v8;
        unint64_t v12 = v7 + 2;
        __darwin_ct_rune_t v17 = __tolower(v16);
        unsigned int v18 = v17 - 48;
        if ((v17 - 48) < 0xA || (v17 - 97) <= 5)
        {
          if (v18 >= 0xA) {
            LOBYTE(v18) = v17 - 87;
          }
          *v9++ |= v18;
        }
      }
      char v3 = *v12;
      if (*v12) {
        BOOL v11 = v8 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      size_t v7 = v12;
      if (v11) {
        return v10;
      }
    }
  }
  return 0;
}

uint64_t encode_data_into_string(unsigned __int8 *a1, uint64_t a2, char *__b, unint64_t a4, int a5)
{
  uint64_t v6 = 0;
  if (a2 && a4 >= 3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 - 1;
    do
    {
      unsigned int v9 = *a1++;
      --a5;
      *__b = a0123456789abcd_0[(unint64_t)v9 >> 4];
      uint64_t v10 = __b + 2;
      __b[1] = a0123456789abcd_0[v9 & 0xF];
      v7 -= 2;
      if (v8-- == 0) {
        break;
      }
      __b += 2;
    }
    while (v7 + a4 > 2);
    uint64_t v6 = -(int)v7;
    a4 += v7;
    __b = v10;
  }
  if (a5 >= 1 && a4 >= 3)
  {
    if ((a4 - 3) >> 1 >= (a5 - 1)) {
      unint64_t v12 = (a5 - 1);
    }
    else {
      unint64_t v12 = (a4 - 3) >> 1;
    }
    memset(__b, 48, 2 * v12 + 2);
    __b += 2 * v12 + 2;
    uint64_t v6 = (v6 + 2 * v12 + 2);
  }
  *__b = 0;
  return v6;
}

unint64_t strtoBOOL(const char *a1)
{
  unsigned int v1 = *a1 - 70;
  if (v1 < 0x34 && ((0x8410100084101uLL >> v1) & 1) != 0) {
    return (0xFFEFEFFFFFEFEuLL >> v1) & 1;
  }
  else {
    return strtol(a1, 0, 0) != 0;
  }
}

uint64_t strtomask_uint32(const char *a1)
{
  unsigned int v1 = strdup(a1);
  unint64_t v2 = strtok(v1, ",");
  if (v2)
  {
    char v3 = v2;
    LODWORD(v4) = 0;
    while (1)
    {
      int v5 = strchr(v3, 45);
      if (v5)
      {
        char *v5 = 0;
        uint64_t v6 = v5 + 1;
        int v7 = atoi(v3);
        int v8 = atoi(v6);
        if (v7 >= v8) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v7;
        }
        if (v7 <= v8) {
          int v10 = v8;
        }
        else {
          int v10 = v7;
        }
        int v11 = v10 + 1;
        unsigned int v12 = v11 - v9;
        if (v11 - v9 >= 8)
        {
          unsigned int v13 = v9 + (v12 & 0xFFFFFFF8);
          int8x16_t v14 = 0uLL;
          int8x16_t v15 = (int8x16_t)v4;
          int32x4_t v16 = vaddq_s32(vdupq_n_s32(v9), (int32x4_t)xmmword_1003F5C40);
          unsigned int v17 = v12 & 0xFFFFFFF8;
          v18.i64[0] = 0x400000004;
          v18.i64[1] = 0x400000004;
          v19.i64[0] = 0x100000001;
          v19.i64[1] = 0x100000001;
          v20.i64[0] = 0x800000008;
          v20.i64[1] = 0x800000008;
          do
          {
            int8x16_t v15 = vorrq_s8(v15, (int8x16_t)vshlq_u32(v19, (uint32x4_t)v16));
            int8x16_t v14 = vorrq_s8(v14, (int8x16_t)vshlq_u32(v19, (uint32x4_t)vaddq_s32(v16, v18)));
            int32x4_t v16 = vaddq_s32(v16, v20);
            v17 -= 8;
          }
          while (v17);
          int8x16_t v21 = vorrq_s8(v14, v15);
          int8x8_t v22 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
          uint64_t v4 = (v22.i32[0] | v22.i32[1]);
          if (v12 == (v12 & 0xFFFFFFF8)) {
            goto LABEL_4;
          }
        }
        else
        {
          unsigned int v13 = v9;
        }
        do
          uint64_t v4 = v4 | (1 << v13++);
        while (v11 != v13);
      }
      else
      {
        uint64_t v4 = (1 << strtol(v3, 0, 0)) | v4;
      }
LABEL_4:
      char v3 = strtok(0, ",");
      if (!v3) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_20:
  free(v1);
  return v4;
}

uint64_t strtologmask(const char *a1, uint64_t a2)
{
  uint64_t result = strtol(a1, 0, 0);
  if (!result)
  {
    if (strcasestr(a1, "all"))
    {
      if (strcasestr(a1, "-all")) {
        a2 = 0;
      }
      else {
        a2 = 0xFFFFFFFFLL;
      }
    }
    if (strcasestr(a1, "emerg"))
    {
      if (!strcasestr(a1, "-emerg"))
      {
        a2 = a2 | 1;
        if (!strcasestr(a1, "alert")) {
          goto LABEL_15;
        }
        goto LABEL_10;
      }
      a2 = a2 & 0xFFFFFFFE;
    }
    if (!strcasestr(a1, "alert")) {
      goto LABEL_15;
    }
LABEL_10:
    if (strcasestr(a1, "-alert")) {
      a2 = a2 & 0xFFFFFFFD;
    }
    else {
      a2 = a2 | 2;
    }
LABEL_15:
    if (strcasestr(a1, "crit"))
    {
      if (!strcasestr(a1, "-crit"))
      {
        a2 = a2 | 4;
        if (!strcasestr(a1, "err")) {
          goto LABEL_24;
        }
        goto LABEL_19;
      }
      a2 = a2 & 0xFFFFFFFB;
    }
    if (!strcasestr(a1, "err")) {
      goto LABEL_24;
    }
LABEL_19:
    if (strcasestr(a1, "-err")) {
      a2 = a2 & 0xFFFFFFF7;
    }
    else {
      a2 = a2 | 8;
    }
LABEL_24:
    if (strcasestr(a1, "warn"))
    {
      if (!strcasestr(a1, "-warn"))
      {
        a2 = a2 | 0x10;
        if (!strcasestr(a1, "notice")) {
          goto LABEL_33;
        }
        goto LABEL_28;
      }
      a2 = a2 & 0xFFFFFFEF;
    }
    if (!strcasestr(a1, "notice")) {
      goto LABEL_33;
    }
LABEL_28:
    if (strcasestr(a1, "-notice")) {
      a2 = a2 & 0xFFFFFFDF;
    }
    else {
      a2 = a2 | 0x20;
    }
LABEL_33:
    if (strcasestr(a1, "info"))
    {
      if (!strcasestr(a1, "-info"))
      {
        a2 = a2 | 0x40;
        if (strcasestr(a1, "debug"))
        {
LABEL_37:
          if (strcasestr(a1, "-debug")) {
            return a2 & 0xFFFFFF7F;
          }
          else {
            return a2 | 0x80;
          }
        }
        return a2;
      }
      a2 = a2 & 0xFFFFFFBF;
    }
    if (strcasestr(a1, "debug")) {
      goto LABEL_37;
    }
    return a2;
  }
  return result;
}

BOOL buffer_is_nonzero(unsigned __int8 *a1, uint64_t a2)
{
  do
  {
    uint64_t v2 = a2;
    if (a2-- == 0) {
      break;
    }
  }
  while (!*a1++);
  return v2 != 0;
}

BOOL is_hex(unsigned __int8 *a1, uint64_t a2)
{
  do
  {
    uint64_t v2 = a2;
    if (!a2) {
      break;
    }
    --a2;
    int v3 = *a1++;
  }
  while ((_DefaultRuneLocale.__runetype[v3] & 0x10000) != 0);
  return v2 == 0;
}

uint64_t is_uppercase_or_digit(char *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v3 = a2 - 1;
  do
  {
    int v4 = *a1;
    if (*a1 < 0) {
      __uint32_t v5 = __maskrune(*a1, 0x8000uLL);
    }
    else {
      __uint32_t v5 = _DefaultRuneLocale.__runetype[*a1] & 0x8000;
    }
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = (v4 - 48) >= 0xA;
    }
    uint64_t result = !v6;
    BOOL v6 = v3-- != 0;
    char v8 = v6;
    if (result != 1) {
      break;
    }
    ++a1;
  }
  while ((v8 & 1) != 0);
  return result;
}

uint64_t OpenFile1M(const char **a1, int *a2)
{
  uint64_t v4 = open(a1[1], 131078);
  uint64_t v5 = v4;
  if (v4 == -1)
  {
    perror("open uart failed");
    return v5;
  }
  fcntl(v4, 4, 4);
  tcflush(v5, 3);
  int v6 = fcntl(v5, 3);
  fcntl(v5, 4, v6 | 4u);
  int v17 = 0;
  setsockopt(v5, 0xFFFF, 4130, &v17, 4u);
  if (tcgetattr(v5, &v25)
    || (memset(v25.c_cc, 255, sizeof(v25.c_cc)),
        *(_OWORD *)&v25.c_cflag = xmmword_1003F5C50,
        v25.c_iflag = 0,
        v25.c_oflag = 0,
        cfmakeraw(&v25),
        tcsetattr(v5, 0, &v25)))
  {
    OpenFile1M();
  }
  CFStringRef Value = ot::Url::Url::GetValue((ot::Url::Url *)a1, "uart-baudrate", 0);
  if (!Value)
  {
    int v8 = *a2;
    if (*a2 == 115200) {
      goto LABEL_9;
    }
LABEL_8:
    if (v8 != 1000000)
    {
      int8x16_t v14 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/Rcp/host-ot-adaptation/RcpConfigHelper.cpp";
      int8x16_t v15 = strrchr[abi:ne180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/Rcp/host-ot-adaptation/RcpConfigHelper.cpp", 47);
      if (v15) {
        int8x16_t v14 = v15 + 1;
      }
      int32x4_t v16 = otExitCodeToString(2u);
      otLogCritPlat("%s() at %s:%d: %s", "OpenFile1M", v14, 74, v16);
      handle_daemon_exit();
      exit(2);
    }
    goto LABEL_9;
  }
  int v8 = atoi(Value);
  *a2 = v8;
  if (v8 != 115200) {
    goto LABEL_8;
  }
LABEL_9:
  int v18 = v8;
  int v9 = ioctl(v5, 0x80085402uLL, &v18);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v11 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      unsigned int v12 = strerror(v9);
      *(_DWORD *)std::runtime_error buf = 67109634;
      int v20 = 1000000;
      __int16 v21 = 2080;
      int8x8_t v22 = v12;
      __int16 v23 = 1024;
      int v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "IOCTL: baud rate(with CTS/RTS) [%d], %s(%u)", buf, 0x18u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    FaultInfo::setControlInterface();
  }
  return v5;
}

uint64_t CAMetricsClient_update_channelSelectionData(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  uint64_t v3 = v1;
  CAMetricsHandlers_handle_update_channelSelectionData((const boost::any *)&v3);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void sub_1000FE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    __ThreadPowerAssertDispatchTask_block_invoke_cold_3(a10);
  }
  _Unwind_Resume(exception_object);
}

void CAMetricsClient_UpdateMetrics_SrpUnicast_MultiToOne(uint64_t a1, int a2)
{
  strcpy(__p, "Unicast_MultiToOne");
  char v3 = 18;
  CAMetricsHandlers_handle_srp_update((uint64_t *)__p, a1, a2);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000FE820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CAMetricsClient_UpdateMetrics_SrpUnicast_ZeroToNonZero(uint64_t a1, int a2)
{
  strcpy(__p, "Unicast_ZeroToNonZero");
  char v3 = 21;
  CAMetricsHandlers_handle_srp_update((uint64_t *)__p, a1, a2);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000FE8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CAMetricsClient_UpdateMetrics_SrpAnycast_MultiToOne(uint64_t a1, int a2)
{
  strcpy(__p, "Anycast_MultiToOne");
  char v3 = 18;
  CAMetricsHandlers_handle_srp_update((uint64_t *)__p, a1, a2);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000FE968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CAMetricsClient_UpdateMetrics_SrpAnycast_ZeroToNonZero(uint64_t a1, int a2)
{
  strcpy(__p, "Anycast_ZeroToNonZero");
  char v3 = 21;
  CAMetricsHandlers_handle_srp_update((uint64_t *)__p, a1, a2);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000FEA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CAMetricsClient_UpdateMetrics_SrpPrefix_MultiToOne(uint64_t a1, int a2)
{
  strcpy(__p, "Prefix_MultiToOne");
  char v3 = 17;
  CAMetricsHandlers_handle_srp_update((uint64_t *)__p, a1, a2);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000FEAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CAMetricsClient_UpdateMetrics_SrpPrefix_ZeroToNonZero(uint64_t a1, int a2)
{
  strcpy(__p, "Prefix_ZeroToNonZero");
  char v3 = 20;
  CAMetricsHandlers_handle_srp_update((uint64_t *)__p, a1, a2);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1000FEB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 CAMetricsClient_UpdateMetrics_Periodic_Netdata_Update(_OWORD *a1)
{
  long long v1 = a1[5];
  v5[4] = a1[4];
  v5[5] = v1;
  v5[6] = a1[6];
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  long long v3 = a1[3];
  _DWORD v5[2] = a1[2];
  void v5[3] = v3;
  CAMetricsHandlers_handle_periodic_netdata_update((unsigned int *)v5);
  return result;
}

__n128 CAMetricsClient_UpdateMetrics_matter_resident_reboot_Update(_OWORD *a1)
{
  long long v1 = a1[3];
  void v4[2] = a1[2];
  v5[0] = v1;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 60);
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  CAMetricsHandlers_handle_matter_resident_reboot_update((unsigned __int16 *)v4);
  return result;
}

void _GLOBAL__sub_I_CAMetricsClient_mm()
{
}

void XPCIPCServer_rcp::get_xpc_connection(XPCIPCServer_rcp *this)
{
  xpc_object_t v2 = xpc_null_create();
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v5);
  xpc_object_t v6 = xpc_string_create("threadradiod");
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "ServerHostName", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_string_create("com.apple.wpantund.xpc");
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "ServiceXPCName", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_string_create("wpantund.daemon.ready");
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "ServiceNotificationName", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_BOOL_create(0);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "ServerEnableSignalHandler", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  int8x16_t v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v15 = dispatch_queue_create("threadradiod.xpc.queue", v14);
  int32x4_t v16 = *((void *)this + 4);
  *((void *)this + 4) = v15;
  if (v16) {
    dispatch_release(v16);
  }
  xpc_object_t v20 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v20 = xpc_null_create();
  }
  int v17 = _Block_copy(&__block_literal_global_5);
  uint64_t v18 = *((void *)this + 4);
  if (v18) {
    dispatch_retain(*((dispatch_object_t *)this + 4));
  }
  v19[0] = v17;
  v19[1] = v18;
  CtrXPC::Server::create(&v20, (uint64_t)v19);
}

void sub_1000FF254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a21);
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a38 & 0x80000000) == 0)
      {
LABEL_8:
        if (a56 < 0) {
          operator delete(a51);
        }
        if (*(char *)(v58 - 145) < 0) {
          operator delete(*(void **)(v58 - 168));
        }
        std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v57);
        xpc_release(v56);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a33);
      goto LABEL_8;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a38 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1000FF374()
{
  dispatch::callback<void({block_pointer})(void)>::~callback(v0 - 104);
  xpc_release(*(xpc_object_t *)(v0 - 88));
  *(void *)(v0 - 88) = 0;
  JUMPOUT(0x1000FF35CLL);
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke(id a1, int a2)
{
  uint64_t v2 = *(void *)&a2;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v4 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      CtrXPC::Server::statusToString(v2, (char *)__p);
      if (v7 >= 0) {
        xpc_object_t v5 = __p;
      }
      else {
        xpc_object_t v5 = (void **)__p[0];
      }
      *(_DWORD *)std::runtime_error buf = 136315138;
      xpc_object_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "OTD Server status: %s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_10(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v10 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v11 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        xpc_object_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::runtime_error buf = 136315138;
      uint64_t v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Posted %s to Otd Process Queue", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  xpc_object_t v12 = *(NSObject **)(v8 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_11;
  block[3] = &__block_descriptor_tmp_13;
  void block[4] = v8;
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v20 = *a2;
  __int16 v21 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int8x16_t v14 = *a3;
  xpc_object_t v22 = v14;
  if (!v14)
  {
    xpc_object_t v22 = xpc_null_create();
    dispatch_queue_t v15 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  xpc_retain(v14);
  dispatch_queue_t v15 = *(void **)a4;
  if (*(void *)a4) {
LABEL_18:
  }
    dispatch_queue_t v15 = _Block_copy(v15);
LABEL_19:
  int32x4_t v16 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  dispatch_async(v12, block);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v22);
  xpc_object_t v22 = 0;
  int v17 = v21;
  if (!v21 || atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_28:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1000FF798(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_11(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v4 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v5 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        xpc_object_t v5 = (void *)*v5;
      }
      CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)(a1 + 64), &v27);
      int v6 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v7 = v27.__r_.__value_.__r.__words[0];
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(a1 + 80));
      uint64_t v8 = &v27;
      if (v6 < 0) {
        uint64_t v8 = (std::string *)v7;
      }
      if (v26 >= 0) {
        xpc_object_t v9 = __p;
      }
      else {
        xpc_object_t v9 = (void **)__p[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      size_t v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Handling command: %s for client %s with inputs %s", (uint8_t *)&buf, 0x20u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)(a1 + 64), &buf);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  size_t v11 = strlen((const char *)p_buf);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v18 = v11 | 7;
    }
    uint64_t v19 = v18 + 1;
    xpc_object_t v13 = (void **)operator new(v18 + 1);
    __dst[1] = v12;
    unint64_t v24 = v19 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v24) = v11;
    xpc_object_t v13 = __dst;
    if (!v11)
    {
      LOBYTE(__dst[0]) = 0;
      xpc_object_t v14 = *(xpc_object_t *)(a1 + 80);
      xpc_object_t v22 = v14;
      if (v14) {
        goto LABEL_24;
      }
      goto LABEL_38;
    }
  }
  memmove(v13, p_buf, (size_t)v12);
  *((unsigned char *)v12 + (void)v13) = 0;
  xpc_object_t v14 = *(xpc_object_t *)(a1 + 80);
  xpc_object_t v22 = v14;
  if (v14)
  {
LABEL_24:
    xpc_retain(v14);
    dispatch_queue_t v15 = *(const void **)(a1 + 88);
    if (v15) {
      goto LABEL_25;
    }
    goto LABEL_39;
  }
LABEL_38:
  xpc_object_t v14 = xpc_null_create();
  xpc_object_t v22 = v14;
  dispatch_queue_t v15 = *(const void **)(a1 + 88);
  if (v15)
  {
LABEL_25:
    int32x4_t v16 = _Block_copy(v15);
    int v17 = *(NSObject **)(a1 + 96);
    uint64_t v20 = v16;
    __int16 v21 = v17;
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_39:
  int32x4_t v16 = 0;
  int v17 = *(NSObject **)(a1 + 96);
  uint64_t v20 = 0;
  __int16 v21 = v17;
  if (v17) {
LABEL_26:
  }
    dispatch_retain(v17);
LABEL_27:
  XPCIPCServer_rcp::xpc_message_handler(v2, (uint64_t)__dst, &v22, (uint64_t)&v20);
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(v14);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_42:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_42;
  }
}

void sub_1000FFAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCServer_rcp::xpc_message_handler(uint64_t a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  if (xpc_get_type(*a3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string(*a3, "method");
    size_t v11 = xpc_dictionary_get_string(*a3, "interface");
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      xpc_object_t v13 = logging_obg;
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        xpc_object_t v22 = v11;
        __int16 v23 = 2080;
        unint64_t v24 = string;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "ThreadRadioD:XPCServer - Received message for: interface = \"%s\", method = \"%s\"", buf, 0x16u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    if (!strcmp(v11, "org.wpantund.v1") || !strcmp(v11, "com.nestlabs.WPANTunnelDriver"))
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v20 = *(std::string *)a2;
      }
      xpc_object_t v14 = *a3;
      dispatch_queue_t v15 = *(void **)a4;
      if (*(void *)a4) {
        dispatch_queue_t v15 = _Block_copy(v15);
      }
      uint64_t v16 = a1 + 64;
      int v17 = *(NSObject **)(a4 + 8);
      aBlocuint64_t k = v15;
      dispatch_object_t object = v17;
      if (v17) {
        dispatch_retain(v17);
      }
      XPCIPCAPI_v1_rcp::message_handler(v16, (std::string::size_type)&v20, v14, (uint64_t)&aBlock);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    uint64_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (syslog_is_the_mask_enabled(3))
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          XPCIPCServer_rcp::xpc_message_handler(v9);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
}

void sub_1000FFD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c32_ZTSN6CtrXPC17ServerClientStateE80c15_ZTSN3xpc4dictE88c57_ZTSN8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEE(void *a1, uint64_t a2)
{
  xpc_object_t v4 = (std::string *)(a1 + 5);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = *(void *)(a2 + 72);
    a1[8] = *(void *)(a2 + 64);
    a1[9] = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  uint64_t v6 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v6;
  if (v6) {
LABEL_3:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
LABEL_4:
  std::string::size_type v7 = *(void **)(a2 + 80);
  a1[10] = v7;
  if (!v7)
  {
    a1[10] = xpc_null_create();
    uint64_t v8 = *(void **)(a2 + 88);
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  xpc_retain(v7);
  uint64_t v8 = *(void **)(a2 + 88);
  if (v8) {
LABEL_10:
  }
    uint64_t v8 = _Block_copy(v8);
LABEL_11:
  xpc_object_t v9 = *(NSObject **)(a2 + 96);
  a1[11] = v8;
  a1[12] = v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c32_ZTSN6CtrXPC17ServerClientStateE80c15_ZTSN3xpc4dictE88c57_ZTSN8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 80));
  *(void *)(a1 + 80) = 0;
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    return;
  }
  long long v5 = *(void **)(a1 + 40);

  operator delete(v5);
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_17(uint64_t a1, CtrXPC::ServerClientState *a2, void **a3, uint64_t a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v9 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v10 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        xpc_object_t v10 = (void *)*v10;
      }
      CtrXPC::ServerClientState::getName(a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      xpc_object_t v22 = v10;
      __int16 v23 = 2080;
      unint64_t v24 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Posted %s to TNM Process Queue from client : %s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if ((ctrUtilIsThreadFeatureEnabled() & 1) == 0)
  {
    xpc_object_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v12)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Thread is not ready, sleep for 100 msec before handling the messages", (uint8_t *)&__p, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    usleep(0x186A0u);
  }
  CtrXPC::ServerClientState::getName(a2, &v19);
  xpc_object_t v13 = *a3;
  xpc_object_t v18 = v13;
  if (!v13)
  {
    xpc_object_t v18 = xpc_null_create();
    xpc_object_t v14 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  xpc_retain(v13);
  xpc_object_t v14 = *(void **)a4;
  if (*(void *)a4) {
LABEL_25:
  }
    xpc_object_t v14 = _Block_copy(v14);
LABEL_26:
  dispatch_queue_t v15 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  threadNetworkManager_MsgHandler(&v19, &v18, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v18);
  xpc_object_t v18 = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1001001E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_20(uint64_t a1, CtrXPC::ServerClientState *a2, void **a3, uint64_t a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v9 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v10 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        xpc_object_t v10 = (void *)*v10;
      }
      CtrXPC::ServerClientState::getName(a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      __int16 v21 = v10;
      __int16 v22 = 2080;
      __int16 v23 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Posted %s to TDM Process Queue from client : %s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  CtrXPC::ServerClientState::getName(a2, &v18);
  xpc_object_t v12 = *a3;
  xpc_object_t v17 = v12;
  if (!v12)
  {
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t v13 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  xpc_retain(v12);
  xpc_object_t v13 = *(void **)a4;
  if (*(void *)a4) {
LABEL_17:
  }
    xpc_object_t v13 = _Block_copy(v13);
LABEL_18:
  xpc_object_t v14 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v13;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  threadDiagnosticsManager_MsgHandler((uint64_t)&v18, &v17, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_10010045C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_25(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v10 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      size_t v11 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        size_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136315138;
      char v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Posted %s to Otd Process Queue", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  xpc_object_t v12 = *(NSObject **)(v8 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_26;
  block[3] = &__block_descriptor_tmp_29_0;
  void block[4] = v8;
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v20 = *a2;
  __int16 v21 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v14 = *a3;
  xpc_object_t v22 = v14;
  if (!v14)
  {
    xpc_object_t v22 = xpc_null_create();
    dispatch_queue_t v15 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  xpc_retain(v14);
  dispatch_queue_t v15 = *(void **)a4;
  if (*(void *)a4) {
LABEL_18:
  }
    dispatch_queue_t v15 = _Block_copy(v15);
LABEL_19:
  uint64_t v16 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  dispatch_async(v12, block);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_object_t v17 = v21;
  if (!v21 || atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_28:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_10010072C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN16XPCIPCServer_rcp18get_xpc_connectionEv_block_invoke_26(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    xpc_object_t v4 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      long long v5 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        long long v5 = (void *)*v5;
      }
      CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)(a1 + 64), &v27);
      int v6 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v7 = v27.__r_.__value_.__r.__words[0];
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(a1 + 80));
      uint64_t v8 = &v27;
      if (v6 < 0) {
        uint64_t v8 = (std::string *)v7;
      }
      if (v26 >= 0) {
        xpc_object_t v9 = __p;
      }
      else {
        xpc_object_t v9 = (void **)__p[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      size_t v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Handling command: %s for client %s with inputs %s", (uint8_t *)&buf, 0x20u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)(a1 + 64), &buf);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  size_t v11 = strlen((const char *)p_buf);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v18 = v11 | 7;
    }
    uint64_t v19 = v18 + 1;
    xpc_object_t v13 = (void **)operator new(v18 + 1);
    __dst[1] = v12;
    unint64_t v24 = v19 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v24) = v11;
    xpc_object_t v13 = __dst;
    if (!v11)
    {
      LOBYTE(__dst[0]) = 0;
      xpc_object_t v14 = *(xpc_object_t *)(a1 + 80);
      xpc_object_t v22 = v14;
      if (v14) {
        goto LABEL_24;
      }
      goto LABEL_38;
    }
  }
  memmove(v13, p_buf, (size_t)v12);
  *((unsigned char *)v12 + (void)v13) = 0;
  xpc_object_t v14 = *(xpc_object_t *)(a1 + 80);
  xpc_object_t v22 = v14;
  if (v14)
  {
LABEL_24:
    xpc_retain(v14);
    dispatch_queue_t v15 = *(const void **)(a1 + 88);
    if (v15) {
      goto LABEL_25;
    }
    goto LABEL_39;
  }
LABEL_38:
  xpc_object_t v14 = xpc_null_create();
  xpc_object_t v22 = v14;
  dispatch_queue_t v15 = *(const void **)(a1 + 88);
  if (v15)
  {
LABEL_25:
    uint64_t v16 = _Block_copy(v15);
    xpc_object_t v17 = *(NSObject **)(a1 + 96);
    uint64_t v20 = v16;
    __int16 v21 = v17;
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_39:
  uint64_t v16 = 0;
  xpc_object_t v17 = *(NSObject **)(a1 + 96);
  uint64_t v20 = 0;
  __int16 v21 = v17;
  if (v17) {
LABEL_26:
  }
    dispatch_retain(v17);
LABEL_27:
  XPCIPCServer_rcp::xpc_message_handler(v2, (uint64_t)__dst, &v22, (uint64_t)&v20);
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(v14);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_42:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_42;
  }
}

void sub_100100A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void XPCIPCServer_rcp::XPCIPCServer_rcp(XPCIPCServer_rcp *this, dispatch_queue_s *a2)
{
  *(void *)this = off_100497240;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = a2;
  XPCIPCServer_rcp::get_xpc_connection(this);
}

void sub_100100C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v12);
  dispatch_queue_t v15 = *(NSObject **)(v11 + 32);
  if (v15)
  {
    dispatch_release(v15);
    if ((*(char *)(v11 + 31) & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v11 + 31) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v13);
  _Unwind_Resume(a1);
}

void XPCIPCServer_rcp::~XPCIPCServer_rcp(XPCIPCServer_rcp *this)
{
  *(void *)this = off_100497240;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "OTD XPCServer - Deleted", v6, 2u);
      XPCIPCAPI_v1_rcp::~XPCIPCAPI_v1_rcp((XPCIPCServer_rcp *)((char *)this + 64));
      xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    XPCIPCAPI_v1_rcp::~XPCIPCAPI_v1_rcp((XPCIPCServer_rcp *)((char *)this + 64));
    xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  XPCIPCAPI_v1_rcp::~XPCIPCAPI_v1_rcp((XPCIPCServer_rcp *)((char *)this + 64));
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v4) {
    goto LABEL_13;
  }
LABEL_11:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_13:
  long long v5 = *((void *)this + 4);
  if (v5) {
    dispatch_release(v5);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  XPCIPCServer_rcp::~XPCIPCServer_rcp(this);

  operator delete();
}

void XPCIPCServer_rcp::add_interface(XPCIPCServer_rcp *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    long long v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v4 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        xpc_object_t v4 = (void *)*v4;
      }
      int v5 = 136315138;
      int v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "OTD XPCServer - Interface added \"%s\"", (uint8_t *)&v5, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  XPCIPCAPI_v1_rcp::add_interface((XPCIPCServer_rcp *)((char *)this + 64));
}

int setlogmask(int a1)
{
  int v1 = logMask;
  logMasuint64_t k = a1;
  return v1;
}

uint64_t syslog_is_the_mask_enabled(char a1)
{
  return (logMask >> a1) & 1;
}

void CtrXPC::Server::State::~State(CtrXPC::Server::State *this)
{
  *(void *)this = &off_1004972D8;
  uint64_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 25));
    *((void *)this + 25) = 0;
  }
  std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy((uint64_t)this + 232, *((char **)this + 30));
  std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  long long v3 = *((void *)this + 24);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (const void *)*((void *)this + 23);
  if (v4) {
    _Block_release(v4);
  }
  if (*((char *)this + 167) < 0)
  {
    operator delete(*((void **)this + 18));
    if ((*((char *)this + 143) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*((char *)this + 119) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 143) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*((void **)this + 15));
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*((char *)this + 95) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*((void **)this + 12));
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_11:
    int v5 = this;
    goto LABEL_13;
  }
LABEL_17:
  operator delete(*((void **)this + 9));
  int v5 = this;

LABEL_13:
  ctu::XpcServer::~XpcServer(v5);
}

{
  uint64_t vars8;

  CtrXPC::Server::State::~State(this);

  operator delete();
}

void CtrXPC::Server::State::Parameters::~Parameters(void **this)
{
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void *CtrXPC::Server::Server(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void CtrXPC::Server::~Server(CtrXPC::Server *this)
{
  int v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  int v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void CtrXPC::Server::create(void **a1, uint64_t a2)
{
  long long v3 = *a1;
  xpc_object_t v8 = v3;
  if (v3)
  {
    xpc_retain(v3);
    xpc_object_t v4 = *(void **)a2;
    if (!*(void *)a2)
    {
LABEL_6:
      int v5 = *(NSObject **)(a2 + 8);
      aBlocuint64_t k = v4;
      dispatch_object_t object = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      CtrXPC::Server::State::create(&v8, &v9);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      xpc_release(v8);
      xpc_object_t v8 = 0;
      operator new();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v4 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_6;
    }
  }
  xpc_object_t v4 = _Block_copy(v4);
  goto LABEL_6;
}

void sub_10010158C()
{
  if (*v0) {
    CtrXPC::Server::create(*v0);
  }
  operator delete();
}

void sub_1001015D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object)
{
}

void CtrXPC::Server::State::create(xpc_object_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (xpc_get_type(*a1) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_2;
  }
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)std::string __p = 0u;
  xpc_object_t value = xpc_dictionary_get_value(*a1, "ServiceXPCName");
  xpc_object_t v28 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__dst, (xpc *)&v28, (const object *)"", v5);
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = __dst;
  v24[0] = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  xpc_release(v28);
  xpc_object_t v6 = xpc_dictionary_get_value(*a1, "ServiceNotificationName");
  xpc_object_t v28 = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__dst, (xpc *)&v28, (const object *)"", v7);
  if (SHIBYTE(v24[3]) < 0) {
    operator delete((void *)v24[1]);
  }
  *(_OWORD *)&v24[1] = __dst;
  v24[3] = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  xpc_release(v28);
  xpc_object_t v8 = xpc_dictionary_get_value(*a1, "ServerHostName");
  xpc_object_t v28 = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__dst, (xpc *)&v28, (const object *)"UnknownServerHost", v9);
  if (SHIBYTE(v26[0]) < 0) {
    operator delete((void *)v25);
  }
  long long v25 = __dst;
  v26[0] = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  xpc_release(v28);
  xpc_object_t v10 = xpc_dictionary_get_value(*a1, "ServerEnableSignalHandler");
  *(void *)&long long __dst = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)&long long __dst = xpc_null_create();
  }
  char v27 = xpc::dyn_cast_or_default((xpc *)&__dst, 0, v11);
  xpc_release((xpc_object_t)__dst);
  uint64_t v12 = (void *)HIBYTE(v24[0]);
  char v13 = HIBYTE(v24[0]);
  xpc_object_t v14 = __p[1];
  if (v24[0] >= 0) {
    size_t v15 = HIBYTE(v24[0]);
  }
  else {
    size_t v15 = (size_t)__p[1];
  }
  unint64_t v16 = v15 + 6;
  if (v15 + 6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (long long *)operator new(v18 + 1);
    *((void *)&__dst + 1) = v15 + 6;
    unint64_t v30 = v19 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    unint64_t v30 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v30) = v15 + 6;
    if (!v15) {
      goto LABEL_36;
    }
  }
  if (v24[0] >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  memmove(p_dst, v20, v15);
LABEL_36:
  strcpy((char *)p_dst + v15, ".allow");
  if (SHIBYTE(v26[3]) < 0)
  {
    operator delete((void *)v26[1]);
    uint64_t v12 = (void *)HIBYTE(v24[0]);
    xpc_object_t v14 = __p[1];
    char v13 = HIBYTE(v24[0]);
  }
  *(_OWORD *)&v26[1] = __dst;
  v26[3] = v30;
  if (v13 >= 0) {
    __int16 v21 = v12;
  }
  else {
    __int16 v21 = v14;
  }
  if (v21)
  {
    uint64_t v22 = HIBYTE(v24[3]);
    if (v24[3] < 0) {
      uint64_t v22 = v24[2];
    }
    if (v22) {
      operator new();
    }
  }
  if (SHIBYTE(v26[3]) < 0)
  {
    operator delete((void *)v26[1]);
    if ((SHIBYTE(v26[0]) & 0x80000000) == 0)
    {
LABEL_48:
      if ((SHIBYTE(v24[3]) & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v26[0]) & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete((void *)v25);
  if ((SHIBYTE(v24[3]) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v24[0]) & 0x80000000) == 0) {
      goto LABEL_2;
    }
LABEL_54:
    operator delete(__p[0]);
    goto LABEL_2;
  }
LABEL_53:
  operator delete((void *)v24[1]);
  if (SHIBYTE(v24[0]) < 0) {
    goto LABEL_54;
  }
LABEL_2:
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
    CtrXPC::Server::State::create(logging_obg);
  }
}

void sub_100101B88()
{
}

void sub_100101BE0()
{
  xpc_release(*(xpc_object_t *)(v0 - 144));
  JUMPOUT(0x100101C60);
}

void sub_100101C00()
{
  xpc_release(*(xpc_object_t *)(v0 - 192));
  JUMPOUT(0x100101C60);
}

void sub_100101C20()
{
  xpc_release(*(xpc_object_t *)(v0 - 192));
  JUMPOUT(0x100101C60);
}

void sub_100101C40()
{
  xpc_release(*(xpc_object_t *)(v0 - 192));
  JUMPOUT(0x100101C60);
}

void sub_100101C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  CtrXPC::Server::State::Parameters::~Parameters(&a27);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void sub_100101C78(_Unwind_Exception *a1)
{
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_100101C8C(_Unwind_Exception *a1)
{
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

uint64_t CtrXPC::Server::start(CtrXPC::Server *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)this + 8;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _OWORD v5[2] = ___ZN6CtrXPC6Server5State5startEv_block_invoke;
  void v5[3] = &__block_descriptor_tmp_23_0;
  v5[4] = v1;
  xpc_object_t v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_17;
  void block[4] = v2;
  void block[5] = &v6;
  long long v3 = *(NSObject **)(v1 + 24);
  if (*(void *)(v1 + 32)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  return *(unsigned int *)(v1 + 176);
}

void CtrXPC::Server::broadcastEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v5 = *(void **)a3;
    if (!*(void *)a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v9 = *(std::string *)a2;
  int v5 = *(void **)a3;
  if (*(void *)a3) {
LABEL_5:
  }
    int v5 = _Block_copy(v5);
LABEL_6:
  xpc_object_t v6 = *(NSObject **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  CtrXPC::Server::State::broadcast(v4, (uint64_t)&v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_100101E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CtrXPC::Server::State::broadcast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  xpc_object_t v9 = xpc_null_create();
  int v5 = *(void **)a3;
  if (*(void *)a3) {
    int v5 = _Block_copy(v5);
  }
  xpc_object_t v6 = *(NSObject **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  CtrXPC::Server::State::broadcast(a1, (uint64_t)&v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v9);
  xpc_object_t v9 = 0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_100101F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  dispatch_object_t object = 0;
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CtrXPC::Server::broadcastEvent(uint64_t *a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string v13 = *(std::string *)a2;
    std::string::size_type v7 = *a3;
    xpc_object_t v12 = v7;
    if (v7) {
      goto LABEL_3;
    }
LABEL_6:
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v8 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  std::string::size_type v7 = *a3;
  xpc_object_t v12 = v7;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v7);
  xpc_object_t v8 = *(void **)a4;
  if (*(void *)a4) {
LABEL_7:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_8:
  xpc_object_t v9 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  CtrXPC::Server::State::broadcast(v6, (uint64_t)&v13, &v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v12);
  xpc_object_t v12 = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1001020E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  dispatch_object_t object = 0;
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CtrXPC::Server::State::broadcast(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120;
  void v11[2] = ___ZN6CtrXPC6Server5State9broadcastENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_29_1;
  std::string::size_type v7 = *a3;
  v11[4] = a1;
  xpc_object_t v12 = v7;
  if (v7)
  {
    xpc_retain(v7);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_6:
  xpc_object_t v8 = *(void **)a4;
  if (*(void *)a4) {
    xpc_object_t v8 = _Block_copy(v8);
  }
  xpc_object_t v9 = (uint64_t *)(a1 + 8);
  std::string v10 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v12);
}

void sub_100102248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
}

uint64_t CtrXPC::Server::setCommandHandler(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v5 = *(void **)a3;
    if (!*(void *)a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)a2;
  int v5 = *(void **)a3;
  if (*(void *)a3) {
LABEL_5:
  }
    int v5 = _Block_copy(v5);
LABEL_6:
  uint64_t v6 = *(NSObject **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = CtrXPC::Server::State::setCommandHandler(v4, (uint64_t)&v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_10010234C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CtrXPC::Server::State::setCommandHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  v10[2] = ___ZN6CtrXPC6Server5State17setCommandHandlerENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvNS_17ServerClientStateEN3xpc4dictENSA_IU13block_pointerFvhSD_EEEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_32_1;
  void v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v5 = *(void **)a3;
    if (!*(void *)a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  int v5 = *(void **)a3;
  if (*(void *)a3) {
LABEL_5:
  }
    int v5 = _Block_copy(v5);
LABEL_6:
  uint64_t v6 = *(NSObject **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  xpc_object_t v14 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_17;
  void block[4] = a1 + 8;
  void block[5] = &v14;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    dispatch_async_and_wait(v7, block);
    xpc_object_t v8 = object;
    if (!object) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  dispatch_sync(v7, block);
  xpc_object_t v8 = object;
  if (object) {
LABEL_10:
  }
    dispatch_release(v8);
LABEL_11:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t CtrXPC::Server::statusToString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 7;
      strcpy(a2, "Stopped");
      break;
    case 1:
      a2[23] = 7;
      strcpy(a2, "Started");
      break;
    case 2:
      a2[23] = 7;
      strcpy(a2, "SIGTERM");
      break;
    case 3:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    default:
      a2[23] = 0;
      *a2 = 0;
      break;
  }
  return result;
}

void CtrXPC::Server::State::handleServerError_sync(uint64_t a1, xpc_object_t *a2)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
    goto LABEL_2;
  }
  xpc_object_t v14 = xpc_copy_description(*a2);
  size_t v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_blocuint64_t k = (void ***)operator new(v18 + 1);
    uint64_t v24 = v16;
    int64_t v25 = v19 | 0x8000000000000000;
    blocuint64_t k = (void **)p_block;
  }
  else
  {
    HIBYTE(v25) = v15;
    p_blocuint64_t k = &block;
    if (!v15) {
      goto LABEL_31;
    }
  }
  memcpy(p_block, v14, v16);
LABEL_31:
  *((unsigned char *)p_block + v16) = 0;
  free(v14);
  uint64_t v20 = &block;
  if (v25 < 0) {
    uint64_t v20 = (void ***)block;
  }
  *(_DWORD *)std::string buf = 136315138;
  unint64_t v30 = v20;
  _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "Server error: %s", buf, 0xCu);
  if (SHIBYTE(v25) < 0) {
    operator delete(block);
  }
LABEL_2:
  *(_DWORD *)(a1 + 176) = 3;
  int v5 = *(const void **)(a1 + 184);
  if (v5) {
    uint64_t v6 = _Block_copy(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(a1 + 192);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v24 = 1174405120;
  int64_t v25 = (int64_t)___ZNK8dispatch8callbackIU13block_pointerFvN6CtrXPC6Server12ServerStatusEEEclIJS3_EEEvDpT__block_invoke;
  char v26 = &__block_descriptor_tmp_22;
  if (v6) {
    xpc_object_t v8 = _Block_copy(v6);
  }
  else {
    xpc_object_t v8 = 0;
  }
  aBlocuint64_t k = v8;
  int v28 = 3;
  dispatch_async(v7, &block);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  size_t v9 = strlen("ServerStateError");
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    std::string v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v22 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_19;
  }
  HIBYTE(v22) = v9;
  std::string v11 = __dst;
  if (v9) {
LABEL_19:
  }
    memmove(v11, "ServerStateError", (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  CtrXPC::Server::State::broadcastServerState(a1, (const char *)__dst);
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1001028B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CtrXPC::Server::State::handleNewClient_sync(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, void **a3@<X8>)
{
  xpc_object_t v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  char isConnectionAllowed = CtrXPC::Server::State::isConnectionAllowed(a1, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if ((isConnectionAllowed & 1) == 0)
  {
    *a3 = 0;
    return;
  }
  xpc_object_t v8 = xpc_copy_description(*a2);
  size_t v9 = strlen(v8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    std::string v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    int64_t v34 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_13;
  }
  HIBYTE(v34) = v9;
  std::string v11 = __dst;
  if (v9) {
LABEL_13:
  }
    memcpy(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  free(v8);
  CtrXPC::ServerClientState::ServerClientState(&v30, __dst);
  if (SHIBYTE(v34) < 0) {
    operator delete(__dst[0]);
  }
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)
    || ((xpc::object::to_string((uint64_t *)__dst, (xpc::object *)a2), v34 >= 0)
      ? (size_t v15 = __dst)
      : (size_t v15 = (void **)__dst[0]),
        *(_DWORD *)std::string buf = 136315138,
        *(void *)&uint8_t buf[4] = v15,
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "New client: \"%s\"", buf, 0xCu),
        (SHIBYTE(v34) & 0x80000000) == 0))
  {
    *(void *)std::string buf = a2;
    size_t v16 = (uint64_t **)(a1 + 216);
    xpc_object_t v17 = *(uint64_t **)(a1 + 216);
    if (v17) {
      goto LABEL_22;
    }
LABEL_29:
    uint64_t v19 = v16;
    uint64_t v20 = v16;
LABEL_30:
    unint64_t v22 = v16 - 1;
    std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<xpc::connection const&>,std::tuple<>>((uint64_t)(v16 - 1), (void ***)buf, (uint64_t)__dst);
    __int16 v23 = (uint64_t *)__dst[0];
    *(void *)__dst[0] = 0;
    v23[1] = 0;
    v23[2] = (uint64_t)v20;
    *uint64_t v19 = v23;
    uint64_t v24 = (uint64_t *)**v22;
    if (v24)
    {
      *unint64_t v22 = v24;
      __int16 v23 = *v19;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v23);
    ++*(void *)(a1 + 224);
    uint64_t v20 = (uint64_t **)__dst[0];
    goto LABEL_33;
  }
  operator delete(__dst[0]);
  *(void *)std::string buf = a2;
  size_t v16 = (uint64_t **)(a1 + 216);
  xpc_object_t v17 = *(uint64_t **)(a1 + 216);
  if (!v17) {
    goto LABEL_29;
  }
LABEL_22:
  xpc_object_t v18 = *a2;
  while (1)
  {
    while (1)
    {
      uint64_t v20 = (uint64_t **)v17;
      unint64_t v21 = v17[4];
      if ((unint64_t)v18 >= v21) {
        break;
      }
      xpc_object_t v17 = *v20;
      uint64_t v19 = v20;
      if (!*v20) {
        goto LABEL_30;
      }
    }
    if (v21 >= (unint64_t)v18) {
      break;
    }
    xpc_object_t v17 = v20[1];
    if (!v17)
    {
      uint64_t v19 = v20 + 1;
      goto LABEL_30;
    }
  }
LABEL_33:
  char v26 = v30;
  int64_t v25 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (std::__shared_weak_count *)v20[6];
  v20[5] = v26;
  v20[6] = (uint64_t *)v25;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 0x40000000;
  v29[2] = ___ZN6CtrXPC6Server5State20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v29[3] = &__block_descriptor_tmp_34;
  v29[4] = a1;
  *a3 = _Block_copy(v29);
  int v28 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_100102CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100102CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100102CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, xpc_object_t object, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CtrXPC::Server::State::handleClientError_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  CtrXPC::ServerClientState::ServerClientState(&v38);
  xpc_object_t v8 = (void *)(a1 + 216);
  uint64_t v7 = *(void **)(a1 + 216);
  if (v7)
  {
    size_t v9 = (void *)(a1 + 216);
    do
    {
      unint64_t v10 = v7[4];
      BOOL v11 = v10 >= (unint64_t)v6;
      if (v10 >= (unint64_t)v6) {
        uint64_t v12 = v7;
      }
      else {
        uint64_t v12 = v7 + 1;
      }
      if (v11) {
        size_t v9 = v7;
      }
      uint64_t v7 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v8 && (unint64_t)v6 >= v9[4])
    {
      uint64_t v14 = v9[5];
      uint64_t v13 = (std::__shared_weak_count *)v9[6];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v15 = v39;
      uint64_t v38 = v14;
      long long v39 = v13;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  xpc_release(v6);
  if (v38)
  {
    CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)&v38, &v40);
    size_t v16 = std::string::insert(&v40, 0, "Client '");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    xpc_object_t v18 = std::string::append(&v41, "' ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t v37 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        uint64_t v20 = *(void **)a3;
        if (*(_UNKNOWN **)a3 != &_xpc_error_connection_invalid) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
    }
    else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    uint64_t v20 = *(void **)a3;
    if (*(_UNKNOWN **)a3 != &_xpc_error_connection_invalid)
    {
LABEL_24:
      if (v20 == &_xpc_error_connection_interrupted)
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
        if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
          goto LABEL_61;
        }
        uint64_t v33 = __p;
        if (v37 < 0) {
          uint64_t v33 = (void **)__p[0];
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
        WORD2(v41.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"connection interrupted";
      }
      else
      {
        if (v20 != &_xpc_error_termination_imminent)
        {
          unint64_t v21 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            xpc::object::to_string((uint64_t *)&v41, a3);
            unint64_t v22 = __p;
            if (v37 < 0) {
              unint64_t v22 = (void **)__p[0];
            }
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v23 = &v41;
            }
            else {
              __int16 v23 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            LODWORD(v40.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
            WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "prefix: %s: %s", (uint8_t *)&v40, 0x16u);
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v41.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_61;
        }
        logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
        if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
LABEL_61:
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_63;
        }
        int64_t v34 = __p;
        if (v37 < 0) {
          int64_t v34 = (void **)__p[0];
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        WORD2(v41.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"will be terminated";
      }
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "prefix: %s: %s", (uint8_t *)&v41, 0x16u);
      goto LABEL_61;
    }
LABEL_36:
    uint64_t v24 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      int64_t v25 = __p;
      if (v37 < 0) {
        int64_t v25 = (void **)__p[0];
      }
      LODWORD(v41.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      WORD2(v41.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"disappeared";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "prefix: %s: %s", (uint8_t *)&v41, 0x16u);
    }
    char v26 = *(void **)(a1 + 216);
    if (v26)
    {
      xpc_object_t v27 = *a2;
      uint64_t v28 = a1 + 216;
      do
      {
        unint64_t v29 = v26[4];
        BOOL v30 = v29 >= (unint64_t)v27;
        if (v29 >= (unint64_t)v27) {
          uint64_t v31 = v26;
        }
        else {
          uint64_t v31 = v26 + 1;
        }
        if (v30) {
          uint64_t v28 = (uint64_t)v26;
        }
        char v26 = (void *)*v31;
      }
      while (*v31);
      if ((void *)v28 != v8 && (unint64_t)v27 >= *(void *)(v28 + 32)) {
        std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::erase((void *)(a1 + 208), v28);
      }
    }
    goto LABEL_61;
  }
LABEL_63:
  int v35 = v39;
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_100103204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100103270(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

std::string *CtrXPC::Server::State::Parameters::Parameters(std::string *this, const CtrXPC::Server::State::Parameters *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    int v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    int v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  xpc_object_t v8 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[4].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 96);
  return this;
}

void sub_100103394(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t CtrXPC::Server::State::State(uint64_t a1, char *a2, uint64_t a3)
{
  char v12 = 6;
  strcpy((char *)__p, "Server");
  long long v6 = a2;
  if (a2[23] < 0) {
    long long v6 = *(const char **)a2;
  }
  xpc_object_t mach_service = xpc_connection_create_mach_service(v6, 0, 1uLL);
  if (!mach_service) {
    xpc_object_t mach_service = xpc_null_create();
  }
  ctu::XpcServer::XpcServer();
  xpc_release(mach_service);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &off_1004972D8;
  CtrXPC::Server::State::Parameters::Parameters((std::string *)(a1 + 72), (const CtrXPC::Server::State::Parameters *)a2);
  *(_DWORD *)(a1 + 176) = 0;
  long long v7 = *(void **)a3;
  if (*(void *)a3) {
    long long v7 = _Block_copy(v7);
  }
  *(void *)(a1 + 184) = v7;
  xpc_object_t v8 = *(NSObject **)(a3 + 8);
  *(void *)(a1 + 192) = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  return a1;
}

void sub_100103540(_Unwind_Exception *a1)
{
  ctu::XpcServer::~XpcServer(v1);
  _Unwind_Resume(a1);
}

void sub_100103558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a11);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<CtrXPC::Server::State>::shared_ptr[abi:ne180100]<CtrXPC::Server::State,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1001036BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<CtrXPC::Server::State>::shared_ptr[abi:ne180100]<CtrXPC::Server::State,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CtrXPC::Server::State *,std::shared_ptr<CtrXPC::Server::State>::__shared_ptr_default_delete<CtrXPC::Server::State,CtrXPC::Server::State>,std::allocator<CtrXPC::Server::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CtrXPC::Server::State *,std::shared_ptr<CtrXPC::Server::State>::__shared_ptr_default_delete<CtrXPC::Server::State,CtrXPC::Server::State>,std::allocator<CtrXPC::Server::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001003F5D0FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001003F5D0FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001003F5D0FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F5D0FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZN6CtrXPC6Server5State4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 168))
  {
    *(void *)(v1 + 200) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, *(dispatch_queue_t *)(v1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v2 || (uint64_t v3 = *(void *)(v1 + 8), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v5 = v4;
    p_shared_weak_owners = &v4->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v7 = *(NSObject **)(v1 + 200);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = ___ZN6CtrXPC6Server5State4initEv_block_invoke_2;
    handler[3] = &__block_descriptor_tmp_5;
    handler[4] = v1;
    handler[5] = v3;
    long long v9 = v5;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v7, handler);
    dispatch_activate(*(dispatch_object_t *)(v1 + 200));
    signal(15, (void (__cdecl *)(int))1);
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1001038CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN6CtrXPC6Server5State4initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (CtrXPC::Server::State *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5]) {
        CtrXPC::Server::State::handleSIGTERM(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1001039AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CtrXPC::Server::State::handleSIGTERM(CtrXPC::Server::State *this)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "SIGTERM received", buf, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v3 || (uint64_t v4 = *((void *)this + 1), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  size_t v7 = strlen("EventServerSIGTERM");
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v19 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_14;
  }
  HIBYTE(v19) = v7;
  long long v9 = __dst;
  if (v7) {
LABEL_14:
  }
    memmove(v9, "EventServerSIGTERM", (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = ___ZN6CtrXPC6Server5State13handleSIGTERMEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_21;
  v14[4] = this;
  v14[5] = v4;
  size_t v15 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v12 = _Block_copy(v14);
  uint64_t v13 = *((void *)this + 3);
  if (v13) {
    dispatch_retain(*((dispatch_object_t *)this + 3));
  }
  aBlocuint64_t k = v12;
  dispatch_object_t object = v13;
  CtrXPC::Server::State::broadcast((uint64_t)this, (uint64_t)__dst, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_100103C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_100103C5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void ___ZN6CtrXPC6Server5State13handleSIGTERMEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5])
      {
        long long v6 = *(const void **)(v3 + 184);
        if (v6) {
          size_t v7 = _Block_copy(v6);
        }
        else {
          size_t v7 = 0;
        }
        xpc_object_t v8 = *(NSObject **)(v3 + 192);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 1174405120;
        v10[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN6CtrXPC6Server12ServerStatusEEEclIJS3_EEEvDpT__block_invoke;
        v10[3] = &__block_descriptor_tmp_22;
        if (v7) {
          long long v9 = _Block_copy(v7);
        }
        else {
          long long v9 = 0;
        }
        aBlocuint64_t k = v9;
        int v12 = 2;
        dispatch_async(v8, v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v7) {
          _Block_release(v7);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN6CtrXPC6Server12ServerStatusEEEclIJS3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c72_ZTSN8dispatch5blockIU13block_pointerFvN6CtrXPC6Server12ServerStatusEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c72_ZTSN8dispatch5blockIU13block_pointerFvN6CtrXPC6Server12ServerStatusEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN6CtrXPC6Server5State5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CtrXPC::Server::State **)(a1 + 32);
  if (!*((_DWORD *)v1 + 44)) {
    CtrXPC::Server::State::start_sync(v1);
  }
}

void CtrXPC::Server::State::start_sync(CtrXPC::Server::State *this)
{
  ctu::XpcServer::startListener_sync(this);
  uint64_t v2 = (char *)this + 96;
  if (*((char *)this + 119) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  CFStringRef v3 = CFStringCreateWithCString(kCFAllocatorDefault, v2, 0x600u);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, v3, 0, 0, 1u);
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = CFStringGetCStringPtr(v3, 0x8000100u);
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Server posted notification: %s", (uint8_t *)&buf, 0xCu);
  }
  CFRelease(v3);
  *((_DWORD *)this + 44) = 1;
  long long v6 = (const void *)*((void *)this + 23);
  if (v6) {
    size_t v7 = _Block_copy(v6);
  }
  else {
    size_t v7 = 0;
  }
  xpc_object_t v8 = *((void *)this + 24);
  *(void *)&long long buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 1174405120;
  __int16 v23 = ___ZNK8dispatch8callbackIU13block_pointerFvN6CtrXPC6Server12ServerStatusEEEclIJS3_EEEvDpT__block_invoke;
  uint64_t v24 = &__block_descriptor_tmp_22;
  if (v7) {
    long long v9 = _Block_copy(v7);
  }
  else {
    long long v9 = 0;
  }
  aBlocuint64_t k = v9;
  int v26 = 1;
  dispatch_async(v8, &buf);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  size_t v10 = strlen("ServerStateStarted");
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v19 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_22;
  }
  HIBYTE(v19) = v10;
  int v12 = __dst;
  if (v10) {
LABEL_22:
  }
    memmove(v12, "ServerStateStarted", (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  CtrXPC::Server::State::broadcastServerState((uint64_t)this, (const char *)__dst);
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
  size_t v15 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    switch(*((_DWORD *)this + 44))
    {
      case 0:
        HIBYTE(v23) = 7;
        LODWORD(buf) = 1886352467;
        unsigned __int16 v16 = 28784;
        goto LABEL_31;
      case 1:
        HIBYTE(v23) = 7;
        LODWORD(buf) = 1918989395;
        unsigned __int16 v16 = 29810;
LABEL_31:
        int v17 = v16 | 0x64650000;
        goto LABEL_32;
      case 2:
        HIBYTE(v23) = 7;
        LODWORD(buf) = 1413957971;
        int v17 = 1297237332;
LABEL_32:
        *(_DWORD *)((char *)&buf + 3) = v17;
        BYTE7(buf) = 0;
        break;
      case 3:
        HIBYTE(v23) = 5;
        strcpy((char *)&buf, "Error");
        break;
      default:
        HIBYTE(v23) = 0;
        LOBYTE(buf) = 0;
        break;
    }
    *(_DWORD *)uint64_t v20 = 136315138;
    p_long long buf = &buf;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, " Status = %s", v20, 0xCu);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)buf);
    }
  }
}

void sub_100104268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CtrXPC::Server::State::broadcastServerState(uint64_t a1, const char *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  xpc_object_t v6 = xpc_string_create(a2);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "KeyServerState", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  size_t v8 = strlen("EventServerStateChange");
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    size_t v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v17 = v12 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_19:
    memmove(v10, "EventServerStateChange", (size_t)v9);
    *((unsigned char *)v9 + (void)v10) = 0;
    xpc_object_t v15 = v5;
    if (v5) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  HIBYTE(v17) = v8;
  size_t v10 = __dst;
  if (v8) {
    goto LABEL_19;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v15 = v5;
  if (v5)
  {
LABEL_15:
    xpc_retain(v5);
    goto LABEL_21;
  }
LABEL_20:
  xpc_object_t v15 = xpc_null_create();
LABEL_21:
  aBlocuint64_t k = 0;
  dispatch_object_t object = 0;
  CtrXPC::Server::State::broadcast(a1, (uint64_t)__dst, &v15, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v15);
  xpc_object_t v15 = 0;
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v5);
}

void sub_1001044D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  xpc_release(object);
  dispatch_object_t object = 0;
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void ___ZN6CtrXPC6Server5State9broadcastENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v45 = v4;
  if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = *(xpc_object_t *)(a1 + 40);
    if (v5) {
      xpc_retain(*(xpc_object_t *)(a1 + 40));
    }
    else {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "eventData", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
  }
  xpc_object_t v7 = xpc_string_create("eventNotification");
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "command", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  long long v9 = (const char **)(a1 + 48);
  size_t v10 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    size_t v10 = *v9;
  }
  xpc_object_t v11 = xpc_string_create(v10);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "event", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  uint64_t v13 = dispatch_group_create();
  uint64_t v14 = (std::__shared_weak_count *)v2[2];
  if (!v14 || (v43 = v2[1], (xpc_object_t v15 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned __int16 v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v44 = v16;
    unint64_t v17 = (void *)v2[26];
    unint64_t v42 = v2;
    xpc_object_t v18 = v2 + 27;
    if (v17 == v2 + 27) {
      goto LABEL_80;
    }
LABEL_26:
    while (1)
    {
      xpc_object_t v19 = (xpc_object_t)v17[4];
      xpc_object_t v61 = v19;
      if (v19) {
        break;
      }
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v61 = v19;
      uint64_t v20 = v17[5];
      unint64_t v21 = (std::__shared_weak_count *)v17[6];
      uint64_t v62 = v20;
      uint64_t v63 = v21;
      if (v21) {
        goto LABEL_28;
      }
LABEL_29:
      if (v19)
      {
        xpc_retain(v19);
        uint64_t v59 = v20;
        std::string v60 = v21;
        if (!v21) {
          goto LABEL_32;
        }
LABEL_31:
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_32;
      }
      xpc_object_t v19 = xpc_null_create();
      uint64_t v59 = v20;
      std::string v60 = v21;
      if (v21) {
        goto LABEL_31;
      }
LABEL_32:
      if (*(char *)(a1 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
        v58.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
      }
      BOOL isNotificationRegistered_sync = CtrXPC::ServerClientState::isNotificationRegistered_sync(&v59, (uint64_t)&v58);
      BOOL v23 = isNotificationRegistered_sync;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v58.__r_.__value_.__l.__data_);
        if (!v23) {
          goto LABEL_66;
        }
      }
      else if (!isNotificationRegistered_sync)
      {
        goto LABEL_66;
      }
      logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        int64_t v25 = (const char *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          int64_t v25 = *v9;
        }
        int v26 = v13;
        CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)&v59, &v57);
        int v27 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
        std::string::size_type v28 = v57.__r_.__value_.__r.__words[0];
        uint64_t SystemTime = TelephonyUtilGetSystemTime();
        *(_DWORD *)long long buf = 136315650;
        BOOL v30 = &v57;
        if (v27 < 0) {
          BOOL v30 = (std::string *)v28;
        }
        std::string::value_type v65 = v25;
        __int16 v66 = 2080;
        __int16 v67 = v30;
        __int16 v68 = 2048;
        uint64_t v69 = SystemTime;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Sending: %s, to: %s, at: %llu", buf, 0x20u);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        xpc_object_t v4 = v45;
        uint64_t v13 = v26;
      }
      if (!*(void *)(a1 + 72) || !*(void *)(a1 + 80))
      {
        xpc_connection_send_message((xpc_connection_t)v19, v4);
        goto LABEL_66;
      }
      dispatch_group_enter(v13);
      uint64_t v31 = v42[3];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 1174405120;
      handler[2] = ___ZN6CtrXPC6Server5State9broadcastENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_24;
      handler[3] = &__block_descriptor_tmp_26;
      handler[4] = v43;
      uint64_t v52 = v44;
      atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v53 = v59;
      long long v54 = v60;
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(a1 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
        __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
      }
      long long v56 = v13;
      xpc_connection_send_message_with_reply((xpc_connection_t)v19, v4, v31, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        unint64_t v32 = v54;
        if (!v54) {
          goto LABEL_64;
        }
      }
      else
      {
        unint64_t v32 = v54;
        if (!v54) {
          goto LABEL_64;
        }
      }
      if (atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_64:
        uint64_t v33 = v52;
        if (!v52) {
          goto LABEL_66;
        }
LABEL_65:
        std::__shared_weak_count::__release_weak(v33);
        goto LABEL_66;
      }
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      uint64_t v33 = v52;
      if (v52) {
        goto LABEL_65;
      }
LABEL_66:
      int64_t v34 = v60;
      if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      xpc_release(v19);
      int v35 = v63;
      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      xpc_release(v61);
      size_t v36 = (void *)v17[1];
      if (v36)
      {
        do
        {
          int64_t v37 = v36;
          size_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          int64_t v37 = (void *)v17[2];
          BOOL v38 = *v37 == (void)v17;
          unint64_t v17 = v37;
        }
        while (!v38);
      }
      unint64_t v17 = v37;
      if (v37 == v18) {
        goto LABEL_80;
      }
    }
    xpc_retain(v19);
    uint64_t v20 = v17[5];
    unint64_t v21 = (std::__shared_weak_count *)v17[6];
    uint64_t v62 = v20;
    uint64_t v63 = v21;
    if (!v21) {
      goto LABEL_29;
    }
LABEL_28:
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_29;
  }
  unint64_t v44 = v15;
  unint64_t v17 = (void *)v2[26];
  unint64_t v42 = v2;
  xpc_object_t v18 = v2 + 27;
  if (v17 != v2 + 27) {
    goto LABEL_26;
  }
LABEL_80:
  if (*(void *)(a1 + 72) && *(void *)(a1 + 80))
  {
    long long v39 = v42[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = ___ZN6CtrXPC6Server5State9broadcastENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_27;
    block[3] = &__block_descriptor_tmp_28_0;
    void block[4] = v43;
    long long v47 = v44;
    atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
      v48.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
    }
    std::string v40 = *(void **)(a1 + 72);
    if (v40) {
      std::string v40 = _Block_copy(v40);
    }
    std::string v41 = *(NSObject **)(a1 + 80);
    aBlocuint64_t k = v40;
    dispatch_object_t object = v41;
    if (v41) {
      dispatch_retain(v41);
    }
    dispatch_group_notify(v13, v39, block);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  dispatch_release(v13);
  std::__shared_weak_count::__release_weak(v44);
  xpc_release(v4);
}

void sub_100104CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN6CtrXPC6Server5State9broadcastENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_24(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2 && (xpc_object_t v3 = std::__shared_weak_count::lock(v2), (v12 = v3) != 0))
  {
    xpc_object_t v4 = v3;
    if (*(void *)(a1 + 32))
    {
      logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)(a1 + 48), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v7 = (void *)(a1 + 64);
        if (*(char *)(a1 + 87) < 0) {
          xpc_object_t v7 = (void *)*v7;
        }
        uint64_t SystemTime = TelephonyUtilGetSystemTime();
        *(_DWORD *)long long buf = 136315650;
        uint64_t v14 = p_p;
        __int16 v15 = 2080;
        unsigned __int16 v16 = v7;
        __int16 v17 = 2048;
        uint64_t v18 = SystemTime;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s responded to: %s, at: %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    long long v9 = *(NSObject **)(a1 + 88);
    dispatch_group_leave(v9);
  }
}

void sub_100104FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE48c32_ZTSN6CtrXPC17ServerClientStateE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1001050DC(_Unwind_Exception *a1)
{
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE48c32_ZTSN6CtrXPC17ServerClientStateE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return;
  }
LABEL_7:

  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::pair<xpc::connection const,CtrXPC::ServerClientState>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void ___ZN6CtrXPC6Server5State9broadcastENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_27(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(void *)(a1 + 32))
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          xpc_object_t v5 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            xpc_object_t v5 = (void *)*v5;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v5;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "All clients responded to: %s", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    long long v6 = *(const void **)(a1 + 72);
    if (v6) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = 0;
    long long v6 = *(const void **)(a1 + 72);
    if (v6)
    {
LABEL_9:
      xpc_object_t v7 = _Block_copy(v6);
      goto LABEL_12;
    }
  }
  xpc_object_t v7 = 0;
LABEL_12:
  xpc_object_t v8 = *(NSObject **)(a1 + 80);
  *(void *)&long long buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 1174405120;
  xpc_object_t v11 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0;
  xpc_object_t v12 = &__block_descriptor_tmp_31;
  if (!v7)
  {
    aBlocuint64_t k = 0;
    dispatch_async(v8, &buf);
    long long v9 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlocuint64_t k = _Block_copy(v7);
  dispatch_async(v8, &buf);
  long long v9 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v9);
LABEL_17:
  if (v7) {
    _Block_release(v7);
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100105418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10010542C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  xpc_object_t v7 = *(void **)(a2 + 72);
  if (v7) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  xpc_object_t v8 = *(NSObject **)(a2 + 80);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1001054F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v4) {
      return;
    }
  }
  else
  {
    std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v4) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v4);
}

void __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v5 = a1 + 2;
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 48);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  else
  {
    a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
    xpc_object_t v5 = a1 + 2;
    if ((*(char *)(a2 + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
LABEL_6:
  xpc_object_t v7 = *(void **)(a2 + 72);
  if (v7) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  xpc_object_t v8 = *(NSObject **)(a2 + 80);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_100105640(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1004974F0;
  void block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  size_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZN6CtrXPC6Server5State17setCommandHandlerENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvNS_17ServerClientStateEN3xpc4dictENSA_IU13block_pointerFvhSD_EEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      std::string::size_type v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Registered command: %s", buf, 0xCu);
  }
  *(void *)long long buf = a1 + 40;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v2 + 232), (const void **)(a1 + 40), (uint64_t)&std::piecewise_construct, (long long **)buf);
  long long v6 = *(void **)(a1 + 64);
  if (v6) {
    long long v6 = _Block_copy(v6);
  }
  xpc_object_t v7 = v5[7];
  _OWORD v5[7] = (uint64_t *)v6;
  if (v7) {
    _Block_release(v7);
  }
  xpc_object_t v8 = *(NSObject **)(a1 + 72);
  if (v8) {
    dispatch_retain(v8);
  }
  long long v9 = v5[8];
  v5[8] = (uint64_t *)v8;
  if (v9) {
    dispatch_release(v9);
  }
}

void sub_100105A00(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c114_ZTSN8dispatch8callbackIU13block_pointerFvN6CtrXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFvhS4_EEEEEE(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    long long v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  long long v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    long long v6 = _Block_copy(v6);
LABEL_6:
  xpc_object_t v7 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c114_ZTSN8dispatch8callbackIU13block_pointerFvN6CtrXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFvhS4_EEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::size_type v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

uint64_t CtrXPC::Server::State::isConnectionAllowed(uint64_t a1, xpc_object_t *a2)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
    return 1;
  }
  std::string::size_type v4 = xpc_copy_description(*a2);
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    xpc_object_t v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    int64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    xpc_object_t v7 = __dst;
    if (!v5) {
      goto LABEL_10;
    }
  }
  memcpy(v7, v4, (size_t)v6);
LABEL_10:
  *((unsigned char *)v6 + (void)v7) = 0;
  free(v4);
  size_t v10 = __dst;
  if (v13 < 0) {
    size_t v10 = (void **)__dst[0];
  }
  *(_DWORD *)long long buf = 136315138;
  __int16 v15 = v10;
  _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Entitlement checks are disabled for client connections, allowing: %s \n", buf, 0xCu);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void ___ZN6CtrXPC6Server5State20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  std::string::size_type v4 = *(void **)(a1 + 32);
  size_t v5 = *a2;
  xpc_object_t v8 = v5;
  if (!v5)
  {
    xpc_object_t v8 = xpc_null_create();
    long long v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  long long v6 = *a3;
  xpc_object_t object = v6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  CtrXPC::Server::State::handleMessage_sync(v4, &v8, (xpc::object *)&object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_100105D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void CtrXPC::Server::State::handleMessage_sync(void *a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  CtrXPC::ServerClientState::ServerClientState(&v32);
  xpc_object_t v7 = (void *)a1[27];
  if (v7)
  {
    xpc_object_t v8 = a1 + 27;
    do
    {
      unint64_t v9 = v7[4];
      BOOL v10 = v9 >= (unint64_t)v6;
      if (v9 >= (unint64_t)v6) {
        xpc_object_t v11 = v7;
      }
      else {
        xpc_object_t v11 = v7 + 1;
      }
      if (v10) {
        xpc_object_t v8 = v7;
      }
      xpc_object_t v7 = (void *)*v11;
    }
    while (*v11);
    if (v8 != a1 + 27 && (unint64_t)v6 >= v8[4])
    {
      uint64_t v13 = v8[5];
      xpc_object_t v12 = (std::__shared_weak_count *)v8[6];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = v33;
      uint64_t v32 = v13;
      uint64_t v33 = v12;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  xpc_release(v6);
  if (v32)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
    if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
      goto LABEL_35;
    }
    CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)&v32, &v31);
    int v16 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    std::string::size_type v17 = v31.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    uint64_t v18 = &v31;
    if (v16 < 0) {
      uint64_t v18 = (std::string *)v17;
    }
    if (v30 >= 0) {
      xpc_object_t v19 = __p;
    }
    else {
      xpc_object_t v19 = (void **)__p[0];
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
    if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
      goto LABEL_35;
    }
    xpc::object::to_string((uint64_t *)&v31, (xpc::object *)a2);
    int v20 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    std::string::size_type v21 = v31.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    uint64_t v18 = &v31;
    if (v20 < 0) {
      uint64_t v18 = (std::string *)v21;
    }
    if (v30 >= 0) {
      xpc_object_t v19 = __p;
    }
    else {
      xpc_object_t v19 = (void **)__p[0];
    }
  }
  *(_DWORD *)long long buf = 136315394;
  int v35 = v18;
  __int16 v36 = 2080;
  int64_t v37 = v19;
  _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Got message from: %s, of: %s ", buf, 0x16u);
  if ((v30 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_38:
    operator delete(v31.__r_.__value_.__l.__data_);
    unint64_t v22 = *(void **)a3;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    if (v22) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
LABEL_35:
  unint64_t v22 = *(void **)a3;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  if (v22)
  {
LABEL_36:
    xpc_retain(v22);
    xpc_object_t v23 = (xpc_object_t)v31.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
LABEL_39:
  xpc_object_t v23 = xpc_null_create();
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
LABEL_40:
  if (xpc_get_type(v23) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v24 = *a2;
    xpc_object_t object = v24;
    if (v24) {
      xpc_retain(v24);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    CtrXPC::Server::State::handlePublicMessage_sync(a1, &object, (xpc_object_t *)&v31.__r_.__value_.__l.__data_);
    xpc_release(object);
    xpc_object_t object = 0;
  }
  if (xpc_get_type(v31.__r_.__value_.__l.__data_) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v25 = *a2;
    xpc_object_t v27 = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      xpc_object_t v27 = xpc_null_create();
    }
    CtrXPC::Server::State::handleInternalMessage_sync((uint64_t)a1, &v27, (xpc_object_t *)&v31.__r_.__value_.__l.__data_);
    xpc_release(v27);
    xpc_object_t v27 = 0;
  }
  xpc_release(v31.__r_.__value_.__l.__data_);
  int v26 = v33;
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_100106104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<xpc::connection const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, void ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  xpc_object_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  xpc_object_t v7 = **a2;
  v6[4] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    v6[4] = xpc_null_create();
  }
  uint64_t result = CtrXPC::ServerClientState::ServerClientState(v6 + 5);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100106258(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(void *)(v2 + 32) = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      xpc_release(*(xpc_object_t *)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void CtrXPC::Server::State::handlePublicMessage_sync(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t value = xpc_dictionary_get_value(*a3, "command");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v67 = 0;
  __int16 v68 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  uint64_t v7 = a1[30];
  if (v7)
  {
    xpc_object_t v8 = (v65 & 0x80u) == 0 ? (void *)v65 : v64[1];
    unint64_t v9 = (v65 & 0x80u) == 0 ? v64 : (void **)v64[0];
    BOOL v10 = a1 + 30;
    do
    {
      int v11 = *(char *)(v7 + 55);
      if (v11 >= 0) {
        size_t v12 = *(unsigned __int8 *)(v7 + 55);
      }
      else {
        size_t v12 = *(void *)(v7 + 40);
      }
      if (v11 >= 0) {
        uint64_t v13 = (const void *)(v7 + 32);
      }
      else {
        uint64_t v13 = *(const void **)(v7 + 32);
      }
      if ((unint64_t)v8 >= v12) {
        size_t v14 = v12;
      }
      else {
        size_t v14 = (size_t)v8;
      }
      int v15 = memcmp(v13, v9, v14);
      BOOL v16 = v12 < (unint64_t)v8;
      if (v15) {
        BOOL v16 = v15 < 0;
      }
      BOOL v17 = !v16;
      if (v16) {
        uint64_t v18 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v18 = (uint64_t *)v7;
      }
      if (v17) {
        BOOL v10 = (void *)v7;
      }
      uint64_t v7 = *v18;
    }
    while (*v18);
    if (v10 != a1 + 30)
    {
      int v19 = *((char *)v10 + 55);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)v10 + 55);
      }
      else {
        size_t v20 = v10[5];
      }
      if (v19 >= 0) {
        std::string::size_type v21 = v10 + 4;
      }
      else {
        std::string::size_type v21 = (const void *)v10[4];
      }
      if (v20 >= (unint64_t)v8) {
        size_t v22 = (size_t)v8;
      }
      else {
        size_t v22 = v20;
      }
      int v23 = memcmp(v9, v21, v22);
      BOOL v24 = (unint64_t)v8 >= v20;
      if (v23) {
        BOOL v24 = v23 >= 0;
      }
      if (v24)
      {
        xpc_object_t v25 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v25 = xpc_null_create();
        }
        CtrXPC::ServerClientState::ServerClientState(&object);
        int v26 = (void *)a1[27];
        if (v26)
        {
          xpc_object_t v27 = a1 + 27;
          do
          {
            unint64_t v28 = v26[4];
            BOOL v29 = v28 >= (unint64_t)v25;
            if (v28 >= (unint64_t)v25) {
              char v30 = v26;
            }
            else {
              char v30 = v26 + 1;
            }
            if (v29) {
              xpc_object_t v27 = v26;
            }
            int v26 = (void *)*v30;
          }
          while (*v30);
          if (v27 != a1 + 27 && (unint64_t)v25 >= v27[4])
          {
            uint64_t v32 = (void *)v27[5];
            std::string v31 = (std::__shared_weak_count *)v27[6];
            if (v31) {
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = v63;
            xpc_object_t object = v32;
            uint64_t v63 = v31;
            if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
        xpc_release(v25);
        xpc_object_t reply = xpc_dictionary_create_reply(*a3);
        if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
        {
          if (xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
          {
            xpc_retain(reply);
            xpc_object_t v35 = reply;
          }
          else
          {
            xpc_object_t v35 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v35 = xpc_null_create();
          xpc_object_t reply = 0;
        }
        xpc_release(reply);
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN6CtrXPC6Server5State24handlePublicMessage_syncEN3xpc10connectionERNS2_4dictE_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_36;
        xpc_object_t v58 = v35;
        if (v35)
        {
          xpc_retain(v35);
          xpc_object_t v36 = *a2;
          xpc_object_t v59 = v36;
          if (v36)
          {
LABEL_70:
            xpc_retain(v36);
            goto LABEL_73;
          }
        }
        else
        {
          xpc_object_t v58 = xpc_null_create();
          xpc_object_t v36 = *a2;
          xpc_object_t v59 = v36;
          if (v36) {
            goto LABEL_70;
          }
        }
        xpc_object_t v59 = xpc_null_create();
LABEL_73:
        int64_t v37 = _Block_copy(aBlock);
        BOOL v38 = a1[3];
        if (v38) {
          dispatch_retain(v38);
        }
        std::string v60 = v37;
        dispatch_object_t v61 = v38;
        xpc_object_t v39 = *a2;
        xpc_object_t v56 = v39;
        if (v39)
        {
          xpc_retain(v39);
          xpc_object_t v40 = *a3;
          xpc_object_t v55 = v40;
          if (v40) {
            goto LABEL_77;
          }
        }
        else
        {
          xpc_object_t v56 = xpc_null_create();
          xpc_object_t v40 = *a3;
          xpc_object_t v55 = v40;
          if (v40)
          {
LABEL_77:
            xpc_retain(v40);
            if (v37) {
              goto LABEL_78;
            }
            goto LABEL_92;
          }
        }
        xpc_object_t v55 = xpc_null_create();
        if (v37)
        {
LABEL_78:
          uint64_t v53 = _Block_copy(v37);
          dispatch_object_t v54 = v38;
          if (!v38) {
            goto LABEL_80;
          }
          goto LABEL_79;
        }
LABEL_92:
        uint64_t v53 = 0;
        dispatch_object_t v54 = v38;
        if (!v38)
        {
LABEL_80:
          int v41 = checkEntitlementInServer(&v56, &v55, (uint64_t)&v53);
          if (v54) {
            dispatch_release(v54);
          }
          if (v53) {
            _Block_release(v53);
          }
          xpc_release(v55);
          xpc_object_t v55 = 0;
          xpc_release(v56);
          xpc_object_t v56 = 0;
          if (!v41) {
            goto LABEL_126;
          }
          xpc_object_t v43 = object;
          unint64_t v42 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          xpc_object_t v44 = *a3;
          if (*a3)
          {
            xpc_retain(*a3);
            if (!v37)
            {
LABEL_96:
              if (v38) {
                dispatch_retain(v38);
              }
              xpc_object_t v45 = (const void *)v10[7];
              if (v45) {
                long long v46 = _Block_copy(v45);
              }
              else {
                long long v46 = 0;
              }
              long long v47 = v10[8];
              std::string __p = _NSConcreteStackBlock;
              uint64_t v67 = 1174405120;
              __int16 v68 = ___ZNK8dispatch8callbackIU13block_pointerFvN6CtrXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFvhS4_EEEEEclIJS2_S4_S7_EEEvDpT__block_invoke;
              uint64_t v69 = &__block_descriptor_tmp_37;
              if (v46)
              {
                std::string v70 = _Block_copy(v46);
                xpc_object_t v71 = v43;
                std::string::value_type v72 = v42;
                if (!v42) {
                  goto LABEL_104;
                }
              }
              else
              {
                std::string v70 = 0;
                xpc_object_t v71 = v43;
                std::string::value_type v72 = v42;
                if (!v42)
                {
LABEL_104:
                  xpc_object_t v73 = v44;
                  if (v44)
                  {
                    xpc_retain(v44);
                    if (v37) {
                      goto LABEL_106;
                    }
                  }
                  else
                  {
                    xpc_object_t v73 = xpc_null_create();
                    if (v37)
                    {
LABEL_106:
                      int v74 = _Block_copy(v37);
                      dispatch_object_t v75 = v38;
                      if (!v38)
                      {
LABEL_108:
                        dispatch_async(v47, &__p);
                        if (v75) {
                          dispatch_release(v75);
                        }
                        if (v74) {
                          _Block_release(v74);
                        }
                        xpc_release(v73);
                        xpc_object_t v73 = 0;
                        std::string v48 = v72;
                        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                          std::__shared_weak_count::__release_weak(v48);
                        }
                        if (v70) {
                          _Block_release(v70);
                        }
                        if (v46) {
                          _Block_release(v46);
                        }
                        if (v38) {
                          dispatch_release(v38);
                        }
                        if (v37) {
                          _Block_release(v37);
                        }
                        xpc_release(v44);
                        if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                          std::__shared_weak_count::__release_weak(v42);
                        }
LABEL_126:
                        xpc_object_t v49 = xpc_null_create();
                        xpc_object_t v50 = xpc_null_create();
                        xpc_object_t v51 = *a3;
                        *a3 = v49;
                        xpc_release(v51);
                        xpc_release(v50);
                        if (v61) {
                          dispatch_release(v61);
                        }
                        if (v60) {
                          _Block_release(v60);
                        }
                        xpc_release(v59);
                        xpc_object_t v59 = 0;
                        xpc_release(v58);
                        xpc_object_t v58 = 0;
                        xpc_release(v35);
                        uint64_t v52 = v63;
                        if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                          std::__shared_weak_count::__release_weak(v52);
                        }
                        goto LABEL_133;
                      }
LABEL_107:
                      dispatch_retain(v38);
                      goto LABEL_108;
                    }
                  }
                  int v74 = 0;
                  dispatch_object_t v75 = v38;
                  if (!v38) {
                    goto LABEL_108;
                  }
                  goto LABEL_107;
                }
              }
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_104;
            }
          }
          else
          {
            xpc_object_t v44 = xpc_null_create();
            if (!v37) {
              goto LABEL_96;
            }
          }
          int64_t v37 = _Block_copy(v37);
          goto LABEL_96;
        }
LABEL_79:
        dispatch_retain(v38);
        goto LABEL_80;
      }
    }
  }
LABEL_133:
  if ((char)v65 < 0) {
    operator delete(v64[0]);
  }
}

void sub_100106A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, xpc_object_t a19, char a20,uint64_t a21,xpc_object_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(a13);
  a13 = 0;
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a20);
  xpc_release(a19);
  a19 = 0;
  xpc_release(a18);
  a18 = 0;
  xpc_release(v35);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void CtrXPC::Server::State::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t value = xpc_dictionary_get_value(*a3, "command");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  size_t v7 = v105;
  unsigned __int8 v8 = v105;
  if ((v105 & 0x80u) != 0) {
    size_t v7 = v104;
  }
  if (v7)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string((uint64_t *)&buf, (xpc::object *)a3);
      BOOL v10 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "internal message sync dict: %s", (uint8_t *)&object, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    xpc_object_t reply = xpc_dictionary_create_reply(*a3);
    if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
    {
      if (xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(reply);
        xpc_object_t v12 = reply;
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t reply = 0;
    }
    xpc_release(reply);
    size_t v13 = strlen("checkIn");
    size_t v14 = v105;
    if ((char)v105 < 0)
    {
      size_t v17 = v104;
      if (v13 != v104)
      {
        if (strlen("eventsOn") != v104) {
          goto LABEL_44;
        }
        goto LABEL_39;
      }
      if (v13 != -1)
      {
        if (memcmp(__s1, "checkIn", v13))
        {
LABEL_23:
          size_t v15 = strlen("eventsOn");
          if ((v14 & 0x80) == 0)
          {
            if (v15 == v14) {
              goto LABEL_25;
            }
            goto LABEL_35;
          }
          size_t v17 = v104;
          if (v15 != v104)
          {
LABEL_44:
            if (strlen("eventsOff") != v17) {
              goto LABEL_229;
            }
            goto LABEL_47;
          }
LABEL_39:
          if (v17 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          if (memcmp(__s1, "eventsOn", v17)) {
            goto LABEL_26;
          }
          goto LABEL_41;
        }
LABEL_32:
        xpc_object_t v18 = xpc_dictionary_get_value(*a3, "clientName");
        xpc_object_t v102 = v18;
        if (v18) {
          xpc_retain(v18);
        }
        else {
          xpc_object_t v102 = xpc_null_create();
        }
        memset(&buf, 0, sizeof(buf));
        xpc::dyn_cast_or_default();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        xpc_release(v102);
        xpc_object_t v23 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v23 = xpc_null_create();
        }
        CtrXPC::ServerClientState::ServerClientState(&buf);
        BOOL v24 = *(void **)(a1 + 216);
        if (v24)
        {
          xpc_object_t v25 = (void *)(a1 + 216);
          do
          {
            unint64_t v26 = v24[4];
            BOOL v27 = v26 >= (unint64_t)v23;
            if (v26 >= (unint64_t)v23) {
              unint64_t v28 = v24;
            }
            else {
              unint64_t v28 = v24 + 1;
            }
            if (v27) {
              xpc_object_t v25 = v24;
            }
            BOOL v24 = (void *)*v28;
          }
          while (*v28);
          if (v25 != (void *)(a1 + 216) && (unint64_t)v23 >= v25[4])
          {
            std::string::size_type v30 = v25[5];
            std::string::size_type v29 = v25[6];
            if (v29) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
            buf.__r_.__value_.__r.__words[0] = v30;
            buf.__r_.__value_.__l.__size_ = v29;
            if (size && !atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        xpc_release(v23);
        if (buf.__r_.__value_.__r.__words[0]) {
          CtrXPC::ServerClientState::setCheckedIn((std::string **)&buf, &object);
        }
        uint64_t v32 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(object.__r_.__value_.__l.__data_);
        }
        unsigned int v33 = 0;
        goto LABEL_185;
      }
    }
    else
    {
      if (v13 != v105)
      {
        if (strlen("eventsOn") == v105)
        {
LABEL_25:
          if (memcmp(&__s1, "eventsOn", v14))
          {
LABEL_26:
            size_t v16 = strlen("eventsOff");
            if ((v14 & 0x80) == 0)
            {
              if (v16 != v14) {
                goto LABEL_229;
              }
LABEL_36:
              if (memcmp(&__s1, "eventsOff", v14)) {
                goto LABEL_229;
              }
LABEL_49:
              xpc_object_t v21 = xpc_dictionary_get_value(*a3, "eventList");
              object.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              if (v21) {
                xpc_retain(v21);
              }
              else {
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
              }
              xpc::bridge((uint64_t *)&buf, (xpc *)&object, v22);
              unint64_t v42 = (const void *)buf.__r_.__value_.__r.__words[0];
              if (buf.__r_.__value_.__r.__words[0])
              {
                CFTypeID v43 = CFGetTypeID(buf.__r_.__value_.__l.__data_);
                if (v43 == CFArrayGetTypeID()) {
                  CFRetain(v42);
                }
                else {
                  unint64_t v42 = 0;
                }
                if (buf.__r_.__value_.__r.__words[0]) {
                  CFRelease(buf.__r_.__value_.__l.__data_);
                }
              }
              xpc_release(object.__r_.__value_.__l.__data_);
              if (v42) {
                xpc_object_t v44 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
              }
              else {
                xpc_object_t v44 = 0;
              }
              if (!v44)
              {
                unsigned int v33 = 3;
                if (v42) {
LABEL_146:
                }
                  CFRelease(v42);
LABEL_185:
                xpc_object_t v72 = xpc_int64_create(v33);
                if (!v72) {
                  xpc_object_t v72 = xpc_null_create();
                }
                xpc_dictionary_set_value(v12, "commandResult", v72);
                xpc_object_t v73 = xpc_null_create();
                xpc_release(v72);
                xpc_release(v73);
                int v74 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
                if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
                {
                  p_s1 = &__s1;
                  if ((v105 & 0x80u) != 0) {
                    p_s1 = (void **)__s1;
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_s1;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"success";
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "Replying to client's command:: %s, with return code: %s ", (uint8_t *)&buf, 0x16u);
                }
                xpc_connection_send_message((xpc_connection_t)*a2, v12);
                xpc_object_t v76 = xpc_null_create();
                xpc_object_t v77 = xpc_null_create();
                xpc_object_t v78 = *a3;
                *a3 = v76;
                xpc_release(v78);
                xpc_release(v77);
                size_t v79 = strlen("eventsOn");
                if ((char)v105 < 0)
                {
                  if (v79 != v104) {
                    goto LABEL_229;
                  }
                  if (v79 != -1)
                  {
                    if (memcmp(__s1, "eventsOn", v79)) {
                      goto LABEL_229;
                    }
LABEL_199:
                    if (*(_DWORD *)(a1 + 176) == 1)
                    {
                      xpc_object_t v80 = xpc_dictionary_create(0, 0, 0);
                      if (v80 || (xpc_object_t v80 = xpc_null_create()) != 0)
                      {
                        if (xpc_get_type(v80) == (xpc_type_t)&_xpc_type_dictionary)
                        {
                          xpc_retain(v80);
                          xpc_object_t v81 = v80;
                        }
                        else
                        {
                          xpc_object_t v81 = xpc_null_create();
                        }
                      }
                      else
                      {
                        xpc_object_t v81 = xpc_null_create();
                        xpc_object_t v80 = 0;
                      }
                      xpc_release(v80);
                      xpc_object_t v82 = xpc_string_create("ServerStateStarted");
                      if (!v82) {
                        xpc_object_t v82 = xpc_null_create();
                      }
                      xpc_dictionary_set_value(v81, "KeyServerState", v82);
                      xpc_object_t v83 = xpc_null_create();
                      xpc_release(v82);
                      xpc_release(v83);
                      xpc_object_t v84 = *a2;
                      xpc_object_t v97 = v84;
                      if (v84) {
                        xpc_retain(v84);
                      }
                      else {
                        xpc_object_t v97 = xpc_null_create();
                      }
                      size_t v85 = strlen("EventServerStateChange");
                      if (v85 >= 0x7FFFFFFFFFFFFFF8) {
                        std::string::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v86 = (void *)v85;
                      if (v85 >= 0x17)
                      {
                        uint64_t v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v85 | 7) != 0x17) {
                          uint64_t v88 = v85 | 7;
                        }
                        uint64_t v89 = v88 + 1;
                        v87 = (void **)operator new(v88 + 1);
                        __dst[1] = v86;
                        unint64_t v96 = v89 | 0x8000000000000000;
                        __dst[0] = v87;
                      }
                      else
                      {
                        HIBYTE(v96) = v85;
                        v87 = __dst;
                        if (!v85) {
                          goto LABEL_219;
                        }
                      }
                      memmove(v87, "EventServerStateChange", (size_t)v86);
LABEL_219:
                      *((unsigned char *)v86 + (void)v87) = 0;
                      xpc_object_t v94 = v81;
                      if (v81) {
                        xpc_retain(v81);
                      }
                      else {
                        xpc_object_t v94 = xpc_null_create();
                      }
                      aBlocuint64_t k = 0;
                      dispatch_object_t v93 = 0;
                      CtrXPC::Server::State::unicast(a1, &v97, (uint64_t)__dst, &v94, (uint64_t)&aBlock);
                      if (v93) {
                        dispatch_release(v93);
                      }
                      if (aBlock) {
                        _Block_release(aBlock);
                      }
                      xpc_release(v94);
                      xpc_object_t v94 = 0;
                      if (SHIBYTE(v96) < 0) {
                        operator delete(__dst[0]);
                      }
                      xpc_release(v97);
                      xpc_object_t v97 = 0;
                      xpc_release(v81);
                    }
LABEL_229:
                    xpc_release(v12);
                    unsigned __int8 v8 = v105;
                    goto LABEL_230;
                  }
                }
                else
                {
                  if (v79 != v105) {
                    goto LABEL_229;
                  }
                  if (v79 != -1)
                  {
                    if (memcmp(&__s1, "eventsOn", v79)) {
                      goto LABEL_229;
                    }
                    goto LABEL_199;
                  }
                }
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              xpc_object_t v45 = *a2;
              xpc_object_t v99 = v45;
              if (v45)
              {
                xpc_retain(v45);
                CFTypeRef cf = v42;
                if (!v42)
                {
LABEL_143:
                  CtrXPC::Server::State::registerNotification(a1, &v99, 0, &cf);
                  if (cf) {
                    CFRelease(cf);
                  }
                  xpc_release(v99);
                  unsigned int v33 = 0;
                  xpc_object_t v99 = 0;
                  if (v42) {
                    goto LABEL_146;
                  }
                  goto LABEL_185;
                }
              }
              else
              {
                CFTypeRef cf = v42;
                xpc_object_t v99 = xpc_null_create();
                if (!v42) {
                  goto LABEL_143;
                }
              }
              CFRetain(v42);
              goto LABEL_143;
            }
            size_t v17 = v104;
            if (v16 != v104) {
              goto LABEL_229;
            }
LABEL_47:
            if (v17 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            if (memcmp(__s1, "eventsOff", v17)) {
              goto LABEL_229;
            }
            goto LABEL_49;
          }
LABEL_41:
          xpc_object_t v19 = xpc_dictionary_get_value(*a3, "eventList");
          object.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          if (v19) {
            xpc_retain(v19);
          }
          else {
            object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
          }
          xpc::bridge((uint64_t *)&buf, (xpc *)&object, v20);
          xpc_object_t v34 = (xpc_object_t)buf.__r_.__value_.__r.__words[0];
          if (buf.__r_.__value_.__r.__words[0]
            && (CFTypeID v35 = CFGetTypeID(buf.__r_.__value_.__l.__data_), v35 == CFArrayGetTypeID()))
          {
            xpc_object_t v102 = v34;
            CFRetain(v34);
            xpc_object_t v36 = (const void *)buf.__r_.__value_.__r.__words[0];
            if (!buf.__r_.__value_.__r.__words[0])
            {
LABEL_88:
              xpc_release(object.__r_.__value_.__l.__data_);
              if (v34) {
                int64_t v37 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
              }
              else {
                int64_t v37 = 0;
              }
              if (!v37)
              {
                unsigned int v33 = 3;
                if (!v34) {
                  goto LABEL_185;
                }
                goto LABEL_184;
              }
              CFStringRef v38 = CFStringCreateWithCString(0, "Thread:Services", 0x8000100u);
              CFStringRef v39 = CFStringCreateWithCString(0, "WakeOnDeviceConnectionStatus", 0x8000100u);
              CFStringRef v40 = CFStringCreateWithCString(0, "ThreadNeighborMeshLocalAddress", 0x8000100u);
              xpc_object_t v41 = *a2;
              if (*a2) {
                xpc_retain(*a2);
              }
              else {
                xpc_object_t v41 = xpc_null_create();
              }
              v91 = a2;
              CtrXPC::ServerClientState::ServerClientState(&object);
              long long v46 = *(void **)(a1 + 216);
              if (v46)
              {
                long long v47 = (void *)(a1 + 216);
                do
                {
                  unint64_t v48 = v46[4];
                  BOOL v49 = v48 >= (unint64_t)v41;
                  if (v48 >= (unint64_t)v41) {
                    xpc_object_t v50 = v46;
                  }
                  else {
                    xpc_object_t v50 = v46 + 1;
                  }
                  if (v49) {
                    long long v47 = v46;
                  }
                  long long v46 = (void *)*v50;
                }
                while (*v50);
                if (v47 != (void *)(a1 + 216) && (unint64_t)v41 >= v47[4])
                {
                  std::string::size_type v52 = v47[5];
                  std::string::size_type v51 = v47[6];
                  if (v51) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v53 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
                  object.__r_.__value_.__r.__words[0] = v52;
                  object.__r_.__value_.__l.__size_ = v51;
                  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
              }
              CFStringRef v90 = v40;
              xpc_release(v41);
              CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)&object, &buf);
              int64_t v54 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
              int v55 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
              xpc_object_t v56 = (void *)buf.__r_.__value_.__r.__words[0];
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              {
                p_std::string buf = &buf;
              }
              else
              {
                int64_t v54 = buf.__r_.__value_.__l.__size_;
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              if (v54 >= 14)
              {
                xpc_object_t v58 = (char *)p_buf + v54;
                xpc_object_t v59 = p_buf;
                do
                {
                  std::string v60 = (char *)memchr(v59, 115, v54 - 13);
                  if (!v60) {
                    break;
                  }
                  if (*(void *)v60 == 0x736E646D2D707273 && *(void *)(v60 + 6) == 0x79786F72702D736ELL)
                  {
                    if (v60 == v58 || v60 - (char *)p_buf == -1) {
                      break;
                    }
                    CFIndex Count = CFArrayGetCount((CFArrayRef)v34);
                    a2 = v91;
                    CFStringRef v63 = v38;
                    CFStringRef v65 = v90;
                    CFStringRef v64 = v39;
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(buf.__r_.__value_.__l.__data_);
                    }
                    if (Count >= 1)
                    {
                      v108.length = CFArrayGetCount((CFArrayRef)v34);
                      v108.locatiouint64_t n = 0;
                      if (CFArrayContainsValue((CFArrayRef)v34, v108, v63) == 1)
                      {
                        __int16 v66 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
                        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
                        {
                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "eventsOn Thread:Services Subscription", (uint8_t *)&buf, 2u);
                        }
                        RcpHostContext::reportThreadServicesToClient((RcpHostContext *)RcpHostContext::sRcpHostContext);
                      }
                      v109.length = CFArrayGetCount((CFArrayRef)v34);
                      v109.locatiouint64_t n = 0;
                      if (CFArrayContainsValue((CFArrayRef)v34, v109, v39) == 1)
                      {
                        uint64_t v67 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
                        if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                        {
                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "eventsOn WakeOnDeviceConnectionStatus Subscription", (uint8_t *)&buf, 2u);
                        }
                        RcpHostContext::reportWakeOnDeviceConnectionStatusToClient((RcpHostContext *)RcpHostContext::sRcpHostContext);
                      }
                      v110.length = CFArrayGetCount((CFArrayRef)v34);
                      v110.locatiouint64_t n = 0;
                      if (CFArrayContainsValue((CFArrayRef)v34, v110, v90) == 1)
                      {
                        __int16 v68 = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
                        if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
                        {
                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "eventsOn ThreadNeighborMeshLocalAddress Subscription", (uint8_t *)&buf, 2u);
                        }
                        RcpHostContext::reportThreadNeighborMeshLocalAddressToClient((RcpHostContext *)RcpHostContext::sRcpHostContext);
                      }
                    }
                    goto LABEL_167;
                  }
                  xpc_object_t v59 = (std::string *)(v60 + 1);
                  int64_t v54 = v58 - (char *)v59;
                }
                while (v58 - (char *)v59 >= 14);
              }
              if (v55 < 0) {
                operator delete(v56);
              }
              a2 = v91;
              CFStringRef v63 = v38;
              CFStringRef v65 = v90;
              CFStringRef v64 = v39;
LABEL_167:
              if (v63) {
                CFRelease(v63);
              }
              if (v64) {
                CFRelease(v64);
              }
              if (v65) {
                CFRelease(v65);
              }
              xpc_object_t v69 = *a2;
              xpc_object_t v101 = v69;
              if (v69)
              {
                xpc_retain(v69);
                xpc_object_t v70 = v102;
                CFTypeRef v100 = v102;
                if (!v102)
                {
LABEL_178:
                  CtrXPC::Server::State::registerNotification(a1, &v101, 1, &v100);
                  if (v100) {
                    CFRelease(v100);
                  }
                  xpc_release(v101);
                  xpc_object_t v101 = 0;
                  xpc_object_t v71 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
                  if (object.__r_.__value_.__l.__size_
                    && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                  unsigned int v33 = 0;
                  xpc_object_t v34 = v102;
                  if (!v102) {
                    goto LABEL_185;
                  }
LABEL_184:
                  CFRelease(v34);
                  goto LABEL_185;
                }
              }
              else
              {
                xpc_object_t v101 = xpc_null_create();
                xpc_object_t v70 = v102;
                CFTypeRef v100 = v102;
                if (!v102) {
                  goto LABEL_178;
                }
              }
              CFRetain(v70);
              goto LABEL_178;
            }
          }
          else
          {
            xpc_object_t v34 = 0;
            xpc_object_t v102 = 0;
            xpc_object_t v36 = (const void *)buf.__r_.__value_.__r.__words[0];
            if (!buf.__r_.__value_.__r.__words[0]) {
              goto LABEL_88;
            }
          }
          CFRelease(v36);
          goto LABEL_88;
        }
LABEL_35:
        if (strlen("eventsOff") != v14) {
          goto LABEL_229;
        }
        goto LABEL_36;
      }
      if (v13 != -1)
      {
        if (memcmp(&__s1, "checkIn", v13)) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_230:
  if ((v8 & 0x80) != 0) {
    operator delete(__s1);
  }
}

void sub_100107A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, xpc_object_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,xpc_object_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN6CtrXPC6Server5State24handlePublicMessage_syncEN3xpc10connectionERNS2_4dictE_block_invoke(uint64_t a1, unsigned int a2, xpc_object_t *a3)
{
  xpc_object_t v6 = (xpc_object_t *)(a1 + 32);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 32)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v7 = xpc_int64_create(a2);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(*v6, "commandResult", v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    if (xpc_get_type(*a3) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v9 = *a3;
      if (v9) {
        xpc_retain(v9);
      }
      else {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(*v6, "commandData", v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
    }
    logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)v6);
      if (v14 >= 0) {
        xpc_object_t v12 = __p;
      }
      else {
        xpc_object_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      size_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Sending Reply as: %s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), *(xpc_object_t *)(a1 + 32));
  }
}

void sub_100107F1C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4)
  {
    xpc_retain(v4);
    uint64_t v5 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  else
  {
    *(void *)(a1 + 32) = xpc_null_create();
    uint64_t v5 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN6CtrXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFvhS4_EEEEEclIJS2_S4_S7_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>::operator()<CtrXPC::ServerClientState const&,xpc::dict const&,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)> const&>(uint64_t *a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  xpc_object_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  size_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v7 = *a3;
  xpc_object_t v13 = v7;
  if (!v7)
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v8 = *(void **)a4;
    if (!*(void *)a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v7);
  xpc_object_t v8 = *(void **)a4;
  if (*(void *)a4) {
LABEL_7:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_8:
  xpc_object_t v9 = *(NSObject **)(a4 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  (*(void (**)(uint64_t, uint64_t *, xpc_object_t *, void **))(v5 + 16))(v5, &v14, &v13, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t v10 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_10010817C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13)
{
  dispatch_object_t object = 0;
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c119_ZTSN8dispatch5blockIU13block_pointerFvN6CtrXPC17ServerClientStateEN3xpc4dictENS_8callbackIU13block_pointerFvhS4_EEEEEE40c32_ZTSN6CtrXPC17ServerClientStateE56c15_ZTSN3xpc4dictE64c57_ZTSN8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEE(void *a1, void *a2)
{
  std::string::size_type v4 = (void *)a2[4];
  if (v4) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  uint64_t v6 = a2[5];
  uint64_t v5 = a2[6];
  a1[4] = v4;
  a1[5] = v6;
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v7 = (void *)a2[7];
  a1[7] = v7;
  if (!v7)
  {
    a1[7] = xpc_null_create();
    xpc_object_t v8 = (void *)a2[8];
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  xpc_retain(v7);
  xpc_object_t v8 = (void *)a2[8];
  if (v8) {
LABEL_9:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_10:
  xpc_object_t v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void __destroy_helper_block_e8_32c119_ZTSN8dispatch5blockIU13block_pointerFvN6CtrXPC17ServerClientStateEN3xpc4dictENS_8callbackIU13block_pointerFvhS4_EEEEEE40c32_ZTSN6CtrXPC17ServerClientStateE56c15_ZTSN3xpc4dictE64c57_ZTSN8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = *(const void **)(a1 + 32);
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = *(const void **)(a1 + 32);
    if (!v5) {
      return;
    }
  }
  _Block_release(v5);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void CtrXPC::Server::State::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  void v9[2] = ___ZN6CtrXPC6Server5State20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_46;
  xpc_object_t v7 = *a2;
  v9[4] = a1;
  xpc_object_t object = v7;
  if (!v7)
  {
    xpc_object_t object = xpc_null_create();
    char v12 = a3;
    xpc_object_t v8 = *a4;
    CFTypeRef cf = v8;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v7);
  char v12 = a3;
  xpc_object_t v8 = *a4;
  CFTypeRef cf = v8;
  if (v8) {
LABEL_5:
  }
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
}

void CtrXPC::Server::State::unicast(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = ___ZN6CtrXPC6Server5State7unicastEN3xpc10connectionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS2_4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_53;
  xpc_object_t v9 = *a4;
  v14[4] = a1;
  xpc_object_t v15 = v9;
  if (v9)
  {
    xpc_retain(v9);
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_6:
  xpc_object_t v10 = *a2;
  xpc_object_t v17 = v10;
  if (!v10)
  {
    xpc_object_t v17 = xpc_null_create();
    int v11 = *(void **)a5;
    if (!*(void *)a5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  xpc_retain(v10);
  int v11 = *(void **)a5;
  if (*(void *)a5) {
LABEL_10:
  }
    int v11 = _Block_copy(v11);
LABEL_11:
  char v12 = (uint64_t *)(a1 + 8);
  xpc_object_t v13 = *(NSObject **)(a5 + 8);
  aBlocuint64_t k = v11;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(v12, (uint64_t)v14);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v15);
}

void sub_100108568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void ___ZN6CtrXPC6Server5State20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (xpc::object *)(a1 + 40);
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 40);
  if (v4) {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
  }
  else {
    xpc_object_t v4 = xpc_null_create();
  }
  CtrXPC::ServerClientState::ServerClientState(&v23);
  xpc_object_t v7 = *(void **)(v2 + 216);
  uint64_t v6 = (void *)(v2 + 216);
  uint64_t v5 = v7;
  if (v7)
  {
    xpc_object_t v8 = v6;
    do
    {
      unint64_t v9 = v5[4];
      BOOL v10 = v9 >= (unint64_t)v4;
      if (v9 >= (unint64_t)v4) {
        int v11 = v5;
      }
      else {
        int v11 = v5 + 1;
      }
      if (v10) {
        xpc_object_t v8 = v5;
      }
      uint64_t v5 = (void *)*v11;
    }
    while (*v11);
    if (v8 != v6 && (unint64_t)v4 >= v8[4])
    {
      xpc_object_t v13 = (void *)v8[5];
      char v12 = (std::__shared_weak_count *)v8[6];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = v24;
      xpc_object_t v23 = v13;
      BOOL v24 = v12;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  xpc_release(v4);
  if (v23)
  {
    int v15 = *(unsigned __int8 *)(a1 + 56);
    size_t v16 = *(const void **)(a1 + 48);
    CFTypeRef cf = v16;
    if (v16) {
      CFRetain(v16);
    }
    CtrXPC::ServerClientState::registerNotification_sync(&v23, v15 != 0, &cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string((uint64_t *)__p, v3);
      xpc_object_t v18 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v26 = "is not in client list";
      __int16 v27 = 2080;
      unint64_t v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s \"%s\" ", buf, 0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  xpc_object_t v19 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1001087E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100108820()
{
  xpc_release(v0);
  JUMPOUT(0x10010883CLL);
}

void sub_100108834(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (!v4)
  {
    *(void *)(a1 + 40) = xpc_null_create();
    CFTypeRef result = *(CFTypeRef *)(a2 + 48);
    *(void *)(a1 + 48) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  xpc_retain(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ___ZN6CtrXPC6Server5State7unicastEN3xpc10connectionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS2_4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = *(xpc_object_t *)(a1 + 40);
    if (v5) {
      xpc_retain(*(xpc_object_t *)(a1 + 40));
    }
    else {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, "eventData", v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
  }
  xpc_object_t v7 = xpc_string_create("eventNotification");
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "command", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  unint64_t v9 = (const char **)(a1 + 48);
  BOOL v10 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    BOOL v10 = *v9;
  }
  xpc_object_t v11 = xpc_string_create(v10);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "event", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = dispatch_group_create();
  uint64_t v14 = (std::__shared_weak_count *)v2[2];
  if (!v14 || (uint64_t v15 = v2[1], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v17 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v18 = *(xpc_object_t *)(a1 + 72);
    if (v18)
    {
LABEL_22:
      xpc_retain(v18);
      goto LABEL_25;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
    xpc_object_t v18 = *(xpc_object_t *)(a1 + 72);
    if (v18) {
      goto LABEL_22;
    }
  }
  xpc_object_t v18 = xpc_null_create();
LABEL_25:
  CtrXPC::ServerClientState::ServerClientState(&v60);
  xpc_object_t v19 = (void *)v2[27];
  if (v19)
  {
    size_t v20 = v2 + 27;
    do
    {
      unint64_t v21 = v19[4];
      BOOL v22 = v21 >= (unint64_t)v18;
      if (v21 >= (unint64_t)v18) {
        xpc_object_t v23 = v19;
      }
      else {
        xpc_object_t v23 = v19 + 1;
      }
      if (v22) {
        size_t v20 = v19;
      }
      xpc_object_t v19 = (void *)*v23;
    }
    while (*v23);
    if (v20 != v2 + 27 && (unint64_t)v18 >= v20[4])
    {
      uint64_t v25 = v20[5];
      BOOL v24 = (std::__shared_weak_count *)v20[6];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v26 = v61;
      uint64_t v60 = v25;
      dispatch_object_t v61 = v24;
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  xpc_release(v18);
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    v59.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
  }
  BOOL isNotificationRegistered_sync = CtrXPC::ServerClientState::isNotificationRegistered_sync(&v60, (uint64_t)&v59);
  BOOL v28 = isNotificationRegistered_sync;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v59.__r_.__value_.__l.__data_);
    if (!v28) {
      goto LABEL_71;
    }
  }
  else if (!isNotificationRegistered_sync)
  {
    goto LABEL_71;
  }
  logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v30 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v30 = *v9;
    }
    uint64_t v44 = v15;
    xpc_object_t v45 = v4;
    std::string v31 = v13;
    CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)&v60, &__p);
    int v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v33 = __p.__r_.__value_.__r.__words[0];
    uint64_t SystemTime = TelephonyUtilGetSystemTime();
    p_p = &__p;
    *(_DWORD *)std::string buf = 136315650;
    if (v32 < 0) {
      p_p = (std::string *)v33;
    }
    CFStringRef v63 = v30;
    __int16 v64 = 2080;
    CFStringRef v65 = p_p;
    __int16 v66 = 2048;
    uint64_t v67 = SystemTime;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Sending: %s, to: %s, at: %llu", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_object_t v13 = v31;
    uint64_t v15 = v44;
    xpc_object_t v4 = v45;
  }
  if (*(void *)(a1 + 80) && *(void *)(a1 + 88))
  {
    dispatch_group_enter(v13);
    xpc_object_t v36 = *(_xpc_connection_s **)(a1 + 72);
    int64_t v37 = v2[3];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = ___ZN6CtrXPC6Server5State7unicastEN3xpc10connectionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS2_4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_47;
    handler[3] = &__block_descriptor_tmp_50;
    handler[4] = v15;
    uint64_t v53 = v17;
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v54 = v60;
    int v55 = v61;
    if (v61) {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
      v56.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
    }
    std::string v57 = v13;
    xpc_connection_send_message_with_reply(v36, v4, v37, handler);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    CFStringRef v38 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  else
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), v4);
  }
LABEL_71:
  if (!*(void *)(a1 + 80) || !*(void *)(a1 + 88)) {
    goto LABEL_90;
  }
  CFStringRef v39 = v2[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZN6CtrXPC6Server5State7unicastEN3xpc10connectionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS2_4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_51;
  block[3] = &__block_descriptor_tmp_52;
  void block[4] = v15;
  long long v47 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFStringRef v40 = *(void **)(a1 + 72);
  xpc_object_t v48 = v40;
  if (!v40)
  {
    xpc_object_t v48 = xpc_null_create();
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_75;
    }
LABEL_77:
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    goto LABEL_78;
  }
  xpc_retain(v40);
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_77;
  }
LABEL_75:
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
  v49.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
LABEL_78:
  xpc_object_t v41 = *(void **)(a1 + 80);
  if (v41) {
    xpc_object_t v41 = _Block_copy(v41);
  }
  unint64_t v42 = *(NSObject **)(a1 + 88);
  aBlocuint64_t k = v41;
  dispatch_object_t object = v42;
  if (v42) {
    dispatch_retain(v42);
  }
  dispatch_group_notify(v13, v39, block);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  xpc_release(v48);
  xpc_object_t v48 = 0;
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
LABEL_90:
  dispatch_release(v13);
  CFTypeID v43 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  std::__shared_weak_count::__release_weak(v17);
  xpc_release(v4);
}

void sub_10010900C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v46 + 48);
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v47 - 160);
  std::__shared_weak_count::__release_weak(v45);
  xpc_release(v44);
  _Unwind_Resume(a1);
}

void ___ZN6CtrXPC6Server5State7unicastEN3xpc10connectionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS2_4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_47(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2 && (xpc_object_t v3 = std::__shared_weak_count::lock(v2), (v12 = v3) != 0))
  {
    xpc_object_t v4 = v3;
    if (*(void *)(a1 + 32))
    {
      logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        CtrXPC::ServerClientState::getName((CtrXPC::ServerClientState *)(a1 + 48), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v7 = (void *)(a1 + 64);
        if (*(char *)(a1 + 87) < 0) {
          xpc_object_t v7 = (void *)*v7;
        }
        uint64_t SystemTime = TelephonyUtilGetSystemTime();
        *(_DWORD *)std::string buf = 136315650;
        uint64_t v14 = p_p;
        __int16 v15 = 2080;
        size_t v16 = v7;
        __int16 v17 = 2048;
        uint64_t v18 = SystemTime;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s responded to: %s, at: %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    unint64_t v9 = *(NSObject **)(a1 + 88);
    dispatch_group_leave(v9);
  }
}

void sub_100109344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ___ZN6CtrXPC6Server5State7unicastEN3xpc10connectionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS2_4dictEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_51(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    xpc_object_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(void *)(a1 + 32))
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.xpcserver", "default");
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          xpc::object::to_string((uint64_t *)__p, (xpc::object *)(a1 + 48));
          xpc_object_t v5 = (void **)__p[0];
          if (SHIBYTE(v12) >= 0) {
            xpc_object_t v5 = __p;
          }
          xpc_object_t v6 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            xpc_object_t v6 = (void *)*v6;
          }
          *(_DWORD *)std::string buf = 136315394;
          size_t v16 = v5;
          __int16 v17 = 2080;
          uint64_t v18 = v6;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Client: %s, responded to: %s", buf, 0x16u);
          if (SHIBYTE(v12) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  else
  {
    xpc_object_t v3 = 0;
  }
  xpc_object_t v7 = *(const void **)(a1 + 80);
  if (v7) {
    xpc_object_t v8 = _Block_copy(v7);
  }
  else {
    xpc_object_t v8 = 0;
  }
  unint64_t v9 = *(NSObject **)(a1 + 88);
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)1174405120;
  xpc_object_t v12 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0;
  xpc_object_t v13 = &__block_descriptor_tmp_31;
  if (!v8)
  {
    aBlocuint64_t k = 0;
    dispatch_async(v9, __p);
    BOOL v10 = aBlock;
    if (!aBlock) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  aBlocuint64_t k = _Block_copy(v8);
  dispatch_async(v9, __p);
  BOOL v10 = aBlock;
  if (aBlock) {
LABEL_19:
  }
    _Block_release(v10);
LABEL_20:
  if (v8) {
    _Block_release(v8);
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1001095B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001095D0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE48c23_ZTSKN3xpc10connectionE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = *(void **)(a2 + 48);
  a1[6] = v5;
  if (v5)
  {
    xpc_retain(v5);
    xpc_object_t v6 = (std::string *)(a1 + 7);
    if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    {
LABEL_5:
      long long v7 = *(_OWORD *)(a2 + 56);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_8;
    }
  }
  else
  {
    a1[6] = xpc_null_create();
    xpc_object_t v6 = (std::string *)(a1 + 7);
    if ((*(char *)(a2 + 79) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
LABEL_8:
  xpc_object_t v8 = *(void **)(a2 + 80);
  if (v8) {
    xpc_object_t v8 = _Block_copy(v8);
  }
  unint64_t v9 = *(NSObject **)(a2 + 88);
  a1[10] = v8;
  a1[11] = v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void sub_1001096C8(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE48c23_ZTSKN3xpc10connectionE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c23_ZTSKN3xpc10connectionE80c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(std::string *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v5 = a1 + 2;
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 48);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  else
  {
    a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
    xpc_object_t v5 = a1 + 2;
    if ((*(char *)(a2 + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
LABEL_6:
  long long v7 = *(void **)(a2 + 72);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (!v7)
  {
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v8 = *(void **)(a2 + 80);
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  xpc_retain(v7);
  xpc_object_t v8 = *(void **)(a2 + 80);
  if (v8) {
LABEL_10:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_11:
  unint64_t v9 = *(NSObject **)(a2 + 88);
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void sub_100109850(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c23_ZTSKN3xpc10connectionE80c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void *std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::erase(void *a1, uint64_t a2)
{
  xpc_object_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      xpc_object_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    xpc_object_t v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      xpc_object_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  long long v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  xpc_object_t v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));
  operator delete((void *)a2);
  return v4;
}

void std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,CtrXPC::ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,CtrXPC::ServerClientState>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_release((xpc_object_t)a2[4]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(CtrXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(unsigned char,xpc::dict)>)>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = *((void *)a2 + 8);
    if (v4) {
      dispatch_release(v4);
    }
    xpc_object_t v5 = (const void *)*((void *)a2 + 7);
    if (v5) {
      _Block_release(v5);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      BOOL v6 = a2;
    }
    else
    {
      BOOL v6 = a2;
    }
    operator delete(v6);
  }
}

uint64_t std::__shared_ptr_pointer<CtrXPC::Server *,std::shared_ptr<CtrXPC::Server>::__shared_ptr_default_delete<CtrXPC::Server,CtrXPC::Server>,std::allocator<CtrXPC::Server>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CtrXPC::Server *,std::shared_ptr<CtrXPC::Server>::__shared_ptr_default_delete<CtrXPC::Server,CtrXPC::Server>,std::allocator<CtrXPC::Server>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001003F5DE1) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001003F5DE1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001003F5DE1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F5DE1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sendUserBTNotification()
{
  if (RcpHostContext::sRcpHostContext) {
    operator new();
  }
}

void sub_100109DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL checkBluetoothStateAndNotifyUser(void)
{
  BOOL CoreBTState = getCoreBTState();
  uint64_t v1 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    uint64_t v2 = "OFF";
    xpc_object_t v5 = "BOOL checkBluetoothStateAndNotifyUser()";
    int v4 = 136315650;
    if (CoreBTState) {
      uint64_t v2 = "ON";
    }
    __int16 v6 = 1024;
    int v7 = 31;
    __int16 v8 = 2080;
    unint64_t v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s%d:bluetooth is %s", (uint8_t *)&v4, 0x1Cu);
  }

  return CoreBTState;
}

void _GLOBAL__sub_I_BTNotificationHelper_mm()
{
}

void append_complex_to_xpc_object_by_value_type(void *a1, const boost::any *a2)
{
  if (*(void *)a2) {
    int v4 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else {
  uint64_t v5 = v4[1];
  }
  if (v5 == 0x80000001003F30A0
    || ((v5 & 0x80000001003F30A0 & 0x8000000000000000) != 0) != __OFSUB__(v5, 0x80000001003F30A0)
    && !strcmp((const char *)(v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F30A0 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a2) {
      __int16 v6 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
    }
    else {
    __int16 v8 = (const char *)(v6[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v8 != (const char *)(0x80000001003F30A0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v8, (const char *)(0x80000001003F30A0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v57.__vftable = 0;
      std::bad_cast::bad_cast(&v57);
      v57.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    std::list<std::string>::list(&__p, *(void *)a2 + 8);
    xpc_dictionary_set_uint64(a1, "v_type", 0xDuLL);
    xpc_object_t v9 = xpc_array_create(0, 0);
    for (uint64_t i = v55; i != (char *)&__p; uint64_t i = (char *)*((void *)i + 1))
    {
      xpc_object_t v11 = i + 16;
      if (i[39] < 0) {
        xpc_object_t v11 = *(const char **)v11;
      }
      xpc_array_set_string(v9, 0xFFFFFFFFFFFFFFFFLL, v11);
    }
    xpc_dictionary_set_value(a1, "value", v9);
    xpc_release(v9);
    if (v56)
    {
      xpc_object_t v12 = (void **)__p;
      xpc_object_t v13 = v55;
      uint64_t v14 = *(void *)v55;
      *(void *)(v14 + 8) = *((void *)__p + 1);
      *v12[1] = v14;
      uint64_t v56 = 0;
      if (v13 != (char *)&__p)
      {
        do
        {
          __int16 v15 = (void **)*((void *)v13 + 1);
          if (v13[39] < 0) {
            operator delete(*((void **)v13 + 2));
          }
          operator delete(v13);
          xpc_object_t v13 = (char *)v15;
        }
        while (v15 != &__p);
      }
    }
  }
  else
  {
    if (*(void *)a2) {
      int v7 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
    }
    else {
    uint64_t v16 = v7[1];
    }
    if (v16 == 0x80000001003F30F4
      || ((v16 & 0x80000001003F30F4 & 0x8000000000000000) != 0) != __OFSUB__(v16, 0x80000001003F30F4)
      && !strcmp((const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F30F4 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      boost::any_cast<std::set<std::string>>((uint64_t *)a2, (uint64_t)&__p);
      xpc_dictionary_set_uint64(a1, "v_type", 0xDuLL);
      xpc_object_t v17 = xpc_array_create(0, 0);
      uint64_t v18 = (char *)__p;
      if (__p != &v55)
      {
        do
        {
          xpc_object_t v19 = v18 + 32;
          if (v18[55] < 0) {
            xpc_object_t v19 = *(const char **)v19;
          }
          xpc_array_set_string(v17, 0xFFFFFFFFFFFFFFFFLL, v19);
          size_t v20 = (char *)*((void *)v18 + 1);
          if (v20)
          {
            do
            {
              unint64_t v21 = (char **)v20;
              size_t v20 = *(char **)v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              unint64_t v21 = (char **)*((void *)v18 + 2);
              BOOL v22 = *v21 == v18;
              uint64_t v18 = (char *)v21;
            }
            while (!v22);
          }
          uint64_t v18 = (char *)v21;
        }
        while (v21 != &v55);
      }
      xpc_dictionary_set_value(a1, "value", v17);
      xpc_release(v17);
      std::__tree<std::string>::destroy((uint64_t)&__p, v55);
    }
    else
    {
      if (*(void *)a2) {
        xpc_object_t v23 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
      }
      else {
      uint64_t v24 = v23[1];
      }
      if (v24 == 0x80000001003F6658
        || ((v24 & 0x80000001003F6658 & 0x8000000000000000) != 0) != __OFSUB__(v24, 0x80000001003F6658)
        && !strcmp((const char *)(v24 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        boost::any_cast<nl::Data>((uint64_t *)a2, &__p);
        xpc_dictionary_set_uint64(a1, "v_type", 0xEuLL);
        xpc_object_t v25 = xpc_array_create(0, 0);
        unint64_t v26 = __p;
        if (__p != v55)
        {
          do
          {
            xpc_array_set_uint64(v25, 0xFFFFFFFFFFFFFFFFLL, *(unsigned __int8 *)v26);
            unint64_t v26 = (void *)((char *)v26 + 1);
          }
          while (v26 != (void *)v55);
        }
      }
      else
      {
        if (*(void *)a2) {
          __int16 v27 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
        }
        else {
        uint64_t v28 = v27[1];
        }
        if (v28 != 0x80000001003F3155
          && (((v28 & 0x80000001003F3155 & 0x8000000000000000) != 0) == __OFSUB__(v28, 0x80000001003F3155)
           || strcmp((const char *)(v28 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F3155 & 0x7FFFFFFFFFFFFFFFLL))))
        {
          if (*(void *)a2) {
            std::string::size_type v30 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
          }
          else {
          uint64_t v31 = v30[1];
          }
          if (v31 == 0x80000001003F3179
            || ((v31 & 0x80000001003F3179 & 0x8000000000000000) != 0) != __OFSUB__(v31, 0x80000001003F3179)
            && !strcmp((const char *)(v31 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F3179 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            boost::any_cast<std::set<int>>((uint64_t *)a2, (uint64_t *)&__p);
            xpc_dictionary_set_uint64(a1, "v_type", 0xFuLL);
            xpc_object_t v32 = xpc_array_create(0, 0);
            std::string::size_type v33 = (char *)__p;
            if (__p != &v55)
            {
              do
              {
                xpc_array_set_int64(v32, 0xFFFFFFFFFFFFFFFFLL, *((int *)v33 + 7));
                xpc_object_t v34 = (char *)*((void *)v33 + 1);
                if (v34)
                {
                  do
                  {
                    CFTypeID v35 = (char **)v34;
                    xpc_object_t v34 = *(char **)v34;
                  }
                  while (v34);
                }
                else
                {
                  do
                  {
                    CFTypeID v35 = (char **)*((void *)v33 + 2);
                    BOOL v22 = *v35 == v33;
                    std::string::size_type v33 = (char *)v35;
                  }
                  while (!v22);
                }
                std::string::size_type v33 = (char *)v35;
              }
              while (v35 != &v55);
            }
            xpc_dictionary_set_value(a1, "value", v32);
            xpc_release(v32);
            std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&__p, v55);
          }
          else
          {
            if (*(void *)a2) {
              xpc_object_t v36 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
            }
            else {
            uint64_t v37 = v36[1];
            }
            if (v37 == 0x80000001003F67CCLL
              || ((v37 & 0x80000001003F67CCLL & 0x8000000000000000) != 0) != __OFSUB__(v37, 0x80000001003F67CCLL)
              && !strcmp((const char *)(v37 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F67CCLL & 0x7FFFFFFFFFFFFFFFLL)))
            {
              boost::any_cast<std::map<std::string,boost::any>>((uint64_t *)a2, (uint64_t)&__p);
              if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_dictionary)
              {
                xpc_dictionary_set_uint64(a1, "v_type", 0xCuLL);
                xpc_object_t v45 = xpc_array_create(0, 0);
                uint64_t v46 = (char *)__p;
                if (__p != &v55)
                {
                  do
                  {
                    uint64_t v47 = v46 + 32;
                    if (v46[55] < 0) {
                      uint64_t v47 = *(const char **)v47;
                    }
                    xpc_object_t v48 = xpc_dictionary_create(0, 0, 0);
                    xpc_dictionary_set_string(v48, "key", v47);
                    if (is_value_basic_type((const any *)v46 + 7)) {
                      append_basic_to_xpc_object_by_value_type(v48, (const boost::any *)(v46 + 56));
                    }
                    else {
                      append_complex_to_xpc_object_by_value_type(v48, (const boost::any *)(v46 + 56));
                    }
                    xpc_array_append_value(v45, v48);
                    xpc_release(v48);
                    std::string v49 = (char *)*((void *)v46 + 1);
                    if (v49)
                    {
                      do
                      {
                        xpc_object_t v50 = (char **)v49;
                        std::string v49 = *(char **)v49;
                      }
                      while (v49);
                    }
                    else
                    {
                      do
                      {
                        xpc_object_t v50 = (char **)*((void *)v46 + 2);
                        BOOL v22 = *v50 == v46;
                        uint64_t v46 = (char *)v50;
                      }
                      while (!v22);
                    }
                    uint64_t v46 = (char *)v50;
                  }
                  while (v50 != &v55);
                }
                xpc_dictionary_set_value(a1, "value", v45);
                xpc_release(v45);
              }
              else if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
              {
                xpc_object_t v38 = xpc_array_create(0, 0);
                CFStringRef v39 = (char *)__p;
                if (__p != &v55)
                {
                  do
                  {
                    CFStringRef v40 = v39 + 32;
                    if (v39[55] < 0) {
                      CFStringRef v40 = *(const char **)v40;
                    }
                    xpc_object_t v41 = xpc_dictionary_create(0, 0, 0);
                    xpc_dictionary_set_string(v41, "key", v40);
                    if (is_value_basic_type((const any *)v39 + 7)) {
                      append_basic_to_xpc_object_by_value_type(v41, (const boost::any *)(v39 + 56));
                    }
                    else {
                      append_complex_to_xpc_object_by_value_type(v41, (const boost::any *)(v39 + 56));
                    }
                    xpc_array_append_value(v38, v41);
                    xpc_release(v41);
                    unint64_t v42 = (char *)*((void *)v39 + 1);
                    if (v42)
                    {
                      do
                      {
                        CFTypeID v43 = (char **)v42;
                        unint64_t v42 = *(char **)v42;
                      }
                      while (v42);
                    }
                    else
                    {
                      do
                      {
                        CFTypeID v43 = (char **)*((void *)v39 + 2);
                        BOOL v22 = *v43 == v39;
                        CFStringRef v39 = (char *)v43;
                      }
                      while (!v22);
                    }
                    CFStringRef v39 = (char *)v43;
                  }
                  while (v43 != &v55);
                }
                xpc_array_append_value(a1, v38);
                xpc_release(v38);
              }
              std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&__p, v55);
            }
            else
            {
              if (*(void *)a2) {
                uint64_t v44 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
              }
              else
              {
                exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported type");
              }
              boost::any_cast<std::list<std::map<std::string,boost::any>>>((uint64_t *)a2, (uint64_t *)&__p);
              if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_dictionary)
              {
                xpc_dictionary_set_uint64(a1, "v_type", 0xCuLL);
                xpc_object_t v52 = xpc_array_create(0, 0);
                if (v55 != (char *)&__p) {
                  operator new();
                }
                xpc_dictionary_set_value(a1, "value", v52);
                xpc_release(v52);
              }
              else if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
              {
                xpc_object_t v51 = xpc_array_create(0, 0);
                if (v55 != (char *)&__p) {
                  operator new();
                }
                xpc_array_append_value(a1, v51);
                xpc_release(v51);
              }
              std::list<std::map<std::string,boost::any>>::~list((uint64_t *)&__p);
            }
          }
          return;
        }
        boost::any_cast<std::vector<unsigned char>>((uint64_t *)a2, &__p);
        xpc_dictionary_set_uint64(a1, "v_type", 0xEuLL);
        xpc_object_t v25 = xpc_array_create(0, 0);
        std::string::size_type v29 = __p;
        if (__p != v55)
        {
          do
          {
            xpc_array_set_uint64(v25, 0xFFFFFFFFFFFFFFFFLL, *(unsigned __int8 *)v29);
            std::string::size_type v29 = (void *)((char *)v29 + 1);
          }
          while (v29 != (void *)v55);
        }
      }
      xpc_dictionary_set_value(a1, "value", v25);
      xpc_release(v25);
      if (__p)
      {
        int v55 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_10010ABB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10010ABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_10010AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_10010ACB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
}

void sub_10010ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
}

void sub_10010ACE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
}

void sub_10010AD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12)
{
}

void sub_10010AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_10010AD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_10010AD40()
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v0 + 16));
  operator delete();
}

void sub_10010AD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_10010ADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
}

void sub_10010ADE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void XPCHelpers::xpc_append_dictionary(XPCHelpers *this, const char *a2, const boost::any *a3, const boost::any *a4)
{
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v7, "key", a2);
  if (is_value_basic_type((const any *)a3)) {
    append_basic_to_xpc_object_by_value_type(v7, a3);
  }
  else {
    append_complex_to_xpc_object_by_value_type(v7, a3);
  }
  xpc_array_append_value(this, v7);

  xpc_release(v7);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  CFTypeRef result = std::logic_error::logic_error(a1, a2);
  return result;
}

void append_basic_to_xpc_object_by_value_type(void *a1, const boost::any *a2)
{
  if (*(void *)a2) {
    int v4 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else {
  uint64_t v5 = v4[1];
  }
  if (v5 == 0x80000001003F6406
    || ((v5 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v5, 0x80000001003F6406)
    && !strcmp((const char *)(v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(void *)a2) {
      __int16 v6 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
    }
    else {
    BOOL v10 = (const char *)(v6[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v10 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v10, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v71.__vftable = 0;
      std::bad_cast::bad_cast(&v71);
      v71.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v11 = *(void *)a2;
    if (*(char *)(*(void *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
    }
    else
    {
      long long v12 = *(_OWORD *)(v11 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v11 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v14 = __p.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_uint64(a1, "v_type", 0xAuLL);
    if (v13 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)v14;
    }
    goto LABEL_45;
  }
  if (*(void *)a2)
  {
    uint64_t v7 = *(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8);
    BOOL v9 = __OFSUB__(v7, v8);
    if (v7 == v8) {
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v9 = __OFSUB__(v7, v8);
    if (v7 == v8) {
      goto LABEL_29;
    }
  }
  if ((v8 & v7) < 0 != v9
    && !strcmp((const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_29:
    if (*(void *)a2)
    {
      xpc_object_t v19 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      size_t v20 = (const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      if (v19 == (const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_34;
      }
    }
    else
    {
      size_t v20 = (const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      if (v19 == (const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_34;
      }
    }
    if (strcmp(v19, v20))
    {
      v71.__vftable = 0;
      std::bad_cast::bad_cast(&v71);
      v71.__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
LABEL_34:
    unint64_t v21 = *(const char **)(*(void *)a2 + 8);
    size_t v22 = strlen(v21);
    if (v22 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v23 = v22;
    if (v22 >= 0x17)
    {
      uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v25 = v22 | 7;
      }
      uint64_t v26 = v25 + 1;
      uint64_t v24 = (std::string *)operator new(v25 + 1);
      __p.__r_.__value_.__l.__size_ = v23;
      __p.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v22;
      uint64_t v24 = &__p;
      if (!v22)
      {
LABEL_42:
        v24->__r_.__value_.__s.__data_[v23] = 0;
        int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v28 = __p.__r_.__value_.__r.__words[0];
        xpc_dictionary_set_uint64(a1, "v_type", 0xAuLL);
        if (v27 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)v28;
        }
LABEL_45:
        xpc_dictionary_set_string(a1, "value", (const char *)p_p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    memmove(v24, v21, v23);
    goto LABEL_42;
  }
  if (*(void *)a2)
  {
    uint64_t v16 = *(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8);
    BOOL v18 = __OFSUB__(v16, v17);
    if (v16 == v17) {
      goto LABEL_55;
    }
  }
  else
  {
    BOOL v18 = __OFSUB__(v16, v17);
    if (v16 == v17) {
      goto LABEL_55;
    }
  }
  if ((v17 & v16) < 0 != v18
    && !strcmp((const char *)(v16 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_55:
    if (*(void *)a2)
    {
      xpc_object_t v32 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      std::string::size_type v33 = (const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
      if (v32 == (const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_60;
      }
    }
    else
    {
      std::string::size_type v33 = (const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
      if (v32 == (const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_60:
        char v34 = *(unsigned char *)(*(void *)a2 + 8);
        xpc_dictionary_set_uint64(a1, "v_type", 2uLL);
        xpc_dictionary_set_BOOL(a1, "value", v34);
        return;
      }
    }
    if (strcmp(v32, v33))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_60;
  }
  if (*(void *)a2)
  {
    uint64_t v29 = *(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8);
    BOOL v31 = __OFSUB__(v29, v30);
    if (v29 == v30) {
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v31 = __OFSUB__(v29, v30);
    if (v29 == v30) {
      goto LABEL_70;
    }
  }
  if ((v30 & v29) < 0 != v31
    && !strcmp((const char *)(v29 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v30 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_70:
    if (*(void *)a2)
    {
      xpc_object_t v38 = (const char *)(*(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      CFStringRef v39 = (const char *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
      if (v38 == (const char *)(v30 & 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_75;
      }
    }
    else
    {
      CFStringRef v39 = (const char *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
      if (v38 == (const char *)(v30 & 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_75:
        uint64_t v40 = *(unsigned __int8 *)(*(void *)a2 + 8);
        xpc_object_t v41 = a1;
        uint64_t v42 = 1;
LABEL_76:
        xpc_dictionary_set_uint64(v41, "v_type", v42);
        CFTypeID v43 = a1;
        uint64_t v44 = v40;
LABEL_77:
        xpc_dictionary_set_uint64(v43, "value", v44);
        return;
      }
    }
    if (strcmp(v38, v39))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    goto LABEL_75;
  }
  if (*(void *)a2)
  {
    uint64_t v35 = *(void *)((*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2) + 8);
    BOOL v37 = __OFSUB__(v35, v36);
    if (v35 == v36) {
      goto LABEL_86;
    }
  }
  else
  {
    BOOL v37 = __OFSUB__(v35, v36);
    if (v35 == v36) {
      goto LABEL_86;
    }
  }
  if ((v36 & v35) < 0 != v37
    && !strcmp((const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v36 & 0x7FFFFFFFFFFFFFFFLL)))
  {
LABEL_86:
    if (*(void *)a2) {
      uint64_t v46 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
    }
    else {
    uint64_t v47 = (const char *)(v46[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v47 != (const char *)(v36 & 0x7FFFFFFFFFFFFFFFLL) && strcmp(v47, (const char *)(v36 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v48 = *(char *)(*(void *)a2 + 8);
    std::string v49 = a1;
    uint64_t v50 = 3;
    goto LABEL_92;
  }
  if (*(void *)a2) {
    xpc_object_t v45 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else {
  uint64_t v53 = v45[1];
  }
  if (v53 == v54
    || (v54 & v53) < 0 != __OFSUB__(v53, v54)
    && !strcmp((const char *)(v53 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v54 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    unsigned int v55 = boost::any_cast<unsigned short>((uint64_t *)a2);
    uint64_t v56 = a1;
    uint64_t v57 = 4;
LABEL_99:
    xpc_dictionary_set_uint64(v56, "v_type", v57);
    uint64_t v44 = v55;
    CFTypeID v43 = a1;
    goto LABEL_77;
  }
  if (*(void *)a2) {
    xpc_object_t v58 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else
  {
    int v59 = boost::any_cast<short>((uint64_t *)a2);
    uint64_t v60 = a1;
    uint64_t v61 = 3;
LABEL_108:
    xpc_dictionary_set_uint64(v60, "v_type", v61);
    int64_t v52 = v59;
    xpc_object_t v51 = a1;
    goto LABEL_93;
  }
  if (*(void *)a2) {
    uint64_t v62 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else
  {
    unsigned int v55 = boost::any_cast<unsigned int>((uint64_t *)a2);
    uint64_t v56 = a1;
    uint64_t v57 = 6;
    goto LABEL_99;
  }
  if (*(void *)a2) {
    CFStringRef v63 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else
  {
    int v59 = boost::any_cast<int>((uint64_t *)a2);
    uint64_t v60 = a1;
    uint64_t v61 = 5;
    goto LABEL_108;
  }
  if (*(void *)a2) {
    __int16 v64 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else
  {
    uint64_t v40 = boost::any_cast<unsigned long long>((uint64_t *)a2);
    xpc_object_t v41 = a1;
    uint64_t v42 = 8;
    goto LABEL_76;
  }
  if (*(void *)a2) {
    CFStringRef v65 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else
  {
    uint64_t v48 = boost::any_cast<long long>((uint64_t *)a2);
    std::string v49 = a1;
    uint64_t v50 = 7;
LABEL_92:
    xpc_dictionary_set_uint64(v49, "v_type", v50);
    xpc_object_t v51 = a1;
    int64_t v52 = v48;
LABEL_93:
    xpc_dictionary_set_int64(v51, "value", v52);
    return;
  }
  if (*(void *)a2) {
    __int16 v66 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
  }
  else
  {
    double v67 = boost::any_cast<double>((uint64_t *)a2);
  }
  else
  {
    if (*(void *)a2) {
      __int16 v68 = (void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))(*(void *)a2);
    }
    else
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported type");
    }
    double v67 = boost::any_cast<float>((uint64_t *)a2);
  }
  xpc_dictionary_set_uint64(a1, "v_type", 9uLL);

  xpc_dictionary_set_double(a1, "value", v67);
}

void sub_10010BAAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10010BAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_10010BAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_10010BAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_cast a9)
{
}

void sub_10010BAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12)
{
}

void sub_10010BB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12)
{
}

void sub_10010BB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::any_cast<unsigned short>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  int v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(unsigned __int16 *)(*a1 + 8);
}

void sub_10010BC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t boost::any_cast<short>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  int v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(__int16 *)(*a1 + 8);
}

void sub_10010BCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t boost::any_cast<long long>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  int v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(void *)(*a1 + 8);
}

void sub_10010BDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

double boost::any_cast<double>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  int v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(double *)(*a1 + 8);
}

void sub_10010BEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

float boost::any_cast<float>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
  int v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v4 != v5 && strcmp(v4, v5))
  {
    v7.__vftable = 0;
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *(float *)(*a1 + 8);
}

void sub_10010BF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void append_basic_to_xpc_object_by_type(xpc_object_t xdict, uint64_t a2, const char *a3)
{
  switch(a2)
  {
    case 1:
      xpc_dictionary_set_uint64(xdict, "v_type", 1uLL);
      uint64_t v5 = *(unsigned __int8 *)a3;
      goto LABEL_15;
    case 2:
      xpc_dictionary_set_uint64(xdict, "v_type", 2uLL);
      char v6 = *a3;
      xpc_dictionary_set_BOOL(xdict, "value", v6);
      return;
    case 3:
      xpc_dictionary_set_uint64(xdict, "v_type", 3uLL);
      int64_t v7 = *a3;
      goto LABEL_11;
    case 4:
      xpc_dictionary_set_uint64(xdict, "v_type", 4uLL);
      uint64_t v5 = *(unsigned __int16 *)a3;
      goto LABEL_15;
    case 5:
      xpc_dictionary_set_uint64(xdict, "v_type", 5uLL);
      int64_t v7 = *(int *)a3;
      goto LABEL_11;
    case 6:
      xpc_dictionary_set_uint64(xdict, "v_type", 6uLL);
      uint64_t v5 = *(unsigned int *)a3;
      goto LABEL_15;
    case 7:
      xpc_dictionary_set_uint64(xdict, "v_type", 7uLL);
      int64_t v7 = *(void *)a3;
LABEL_11:
      xpc_dictionary_set_int64(xdict, "value", v7);
      break;
    case 8:
      xpc_dictionary_set_uint64(xdict, "v_type", 8uLL);
      uint64_t v5 = *(void *)a3;
LABEL_15:
      xpc_dictionary_set_uint64(xdict, "value", v5);
      break;
    case 9:
      xpc_dictionary_set_uint64(xdict, "v_type", 9uLL);
      double v8 = *(double *)a3;
      xpc_dictionary_set_double(xdict, "value", v8);
      break;
    case 10:
      xpc_dictionary_set_uint64(xdict, "v_type", 0xAuLL);
      xpc_dictionary_set_string(xdict, "value", a3);
      break;
    default:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported type");
  }
}

void sub_10010C1D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t is_value_basic_type(const any *a1)
{
  var0 = a1->var0;
  if (var0) {
    uint64_t v3 = (void *)(*(uint64_t (**)(placeholder *))(*(void *)var0 + 16))(var0);
  }
  else {
  uint64_t v4 = v3[1];
  }
  if (v4 == 0x80000001003F6406
    || ((v4 & 0x80000001003F6406 & 0x8000000000000000) != 0) != __OFSUB__(v4, 0x80000001003F6406)
    && !strcmp((const char *)(v4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 1;
  }
  if (a1->var0)
  {
    uint64_t v5 = *(void *)((*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0) + 8);
    BOOL v7 = __OFSUB__(v5, v6);
    if (v5 == v6) {
      return 1;
    }
  }
  else
  {
    BOOL v7 = __OFSUB__(v5, v6);
    if (v5 == v6) {
      return 1;
    }
  }
  if ((v6 & v5) < 0 != v7
    && !strcmp((const char *)(v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 1;
  }
  if (a1->var0)
  {
    uint64_t v8 = *(void *)((*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0) + 8);
    BOOL v10 = __OFSUB__(v8, v9);
    if (v8 == v9) {
      return 1;
    }
  }
  else
  {
    BOOL v10 = __OFSUB__(v8, v9);
    if (v8 == v9) {
      return 1;
    }
  }
  if ((v9 & v8) < 0 != v10
    && !strcmp((const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 1;
  }
  if (a1->var0)
  {
    uint64_t v11 = *(void *)((*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0) + 8);
    BOOL v13 = __OFSUB__(v11, v12);
    if (v11 == v12) {
      return 1;
    }
  }
  else
  {
    BOOL v13 = __OFSUB__(v11, v12);
    if (v11 == v12) {
      return 1;
    }
  }
  if ((v12 & v11) < 0 != v13
    && !strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v12 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 1;
  }
  if (!a1->var0)
  {
    BOOL v16 = __OFSUB__(v14, v15);
    if (v14 != v15) {
      goto LABEL_33;
    }
    return 1;
  }
  uint64_t v14 = *(void *)((*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0) + 8);
  BOOL v16 = __OFSUB__(v14, v15);
  if (v14 == v15) {
    return 1;
  }
LABEL_33:
  if ((v15 & v14) < 0 != v16
    && !strcmp((const char *)(v14 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v15 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 1;
  }
  uint64_t v17 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
  uint64_t v18 = v17[1];
  if (v18 == v19
    || (v19 & v18) < 0 != __OFSUB__(v18, v19)
    && !strcmp((const char *)(v18 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v19 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 1;
  }
  size_t v20 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    return 1;
  unint64_t v21 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    return 1;
  size_t v22 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    return 1;
  std::string::size_type v23 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    return 1;
  uint64_t v24 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    return 1;
  uint64_t v25 = a1->var0
      ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    return 1;
  if (a1->var0) {
    int v27 = (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0);
  }
  else
  {
    std::string::size_type v28 = a1->var0
        ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
    {
      uint64_t v29 = a1->var0
          ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
      {
        uint64_t v30 = a1->var0
            ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
        {
          BOOL v31 = a1->var0
              ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
          {
            xpc_object_t v32 = a1->var0
                ? (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0)
            {
              if (a1->var0) {
                std::string::size_type v33 = (void *)(*(uint64_t (**)(placeholder *))(*(void *)a1->var0 + 16))(a1->var0);
              }
              else {
            }
              }
          }
        }
      }
    }
  }
  return 0;
}

void append_to_xpc_object_by_value_type(void *a1, any *a2)
{
  if (is_value_basic_type(a2))
  {
    append_basic_to_xpc_object_by_value_type(a1, (const boost::any *)a2);
  }
  else
  {
    append_complex_to_xpc_object_by_value_type(a1, (const boost::any *)a2);
  }
}

void XPCHelpers::xpc_append_dictionary(XPCHelpers *this, const char *a2, const char *a3, const char *a4, void *a5)
{
  if (a3 != (const char *)10 || a4)
  {
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_uint64(v9, "v_type", (uint64_t)a3);
    xpc_dictionary_set_string(v9, "key", a2);
    append_basic_to_xpc_object_by_type(v9, (uint64_t)a3, a4);
    xpc_array_append_value(this, v9);
    xpc_release(v9);
  }
}

void InternalClient::create(InternalClient *this, const char *a2)
{
}

void sub_10010CBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v17);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void InternalClient::registerClient(InternalIPCAPI *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Instance = InternalIPCAPI::getInstance(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v7 = *(std::__shared_weak_count **)(a3 + 8);
    xpc_object_t v9 = *(uint64_t **)a3;
    BOOL v10 = v7;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string __p = *(std::string *)a2;
  BOOL v7 = *(std::__shared_weak_count **)(a3 + 8);
  xpc_object_t v9 = *(uint64_t **)a3;
  BOOL v10 = v7;
  if (v7) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  InternalIPCAPI::add_client(Instance, (const void **)&__p.__r_.__value_.__l.__data_, &v9);
  uint64_t v8 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_7:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_8:
  InternalClient::eventsOn((InternalClient *)a1);
}

void sub_10010CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void InternalClient::InternalClient(InternalClient *this, const char *a2)
{
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v5 = dispatch_queue_create(a2, v4);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v5;
  if (v5)
  {
    uint64_t v6 = v5;
    dispatch_retain(v5);
    *((void *)this + 3) = 0;
    dispatch_release(v6);
    BOOL v7 = (char *)this + 32;
    size_t v8 = strlen(a2);
    if (v8 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_3;
    }
  }
  else
  {
    *((void *)this + 3) = 0;
    BOOL v7 = (char *)this + 32;
    size_t v8 = strlen(a2);
    if (v8 < 0x7FFFFFFFFFFFFFF8)
    {
LABEL_3:
      size_t v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v11 = v8 | 7;
        }
        uint64_t v12 = v11 + 1;
        BOOL v10 = operator new(v11 + 1);
        *((void *)this + 5) = v9;
        *((void *)this + 6) = v12 | 0x8000000000000000;
        *((void *)this + 4) = v10;
      }
      else
      {
        *((unsigned char *)this + 55) = v8;
        BOOL v10 = v7;
        if (!v8)
        {
LABEL_10:
          v10[v9] = 0;
          operator new();
        }
      }
      memmove(v10, a2, v9);
      goto LABEL_10;
    }
  }
  std::string::__throw_length_error[abi:ne180100]();
}

void sub_10010CEC0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::shared_ptr<CtrXPC::Server>::~shared_ptr[abi:ne180100](v4);
  if (*(char *)(v1 + 55) < 0)
  {
    operator delete(*v2);
    ctu::SharedSynchronizable<InternalClient>::~SharedSynchronizable((void *)v1);
    _Unwind_Resume(a1);
  }
  ctu::SharedSynchronizable<InternalClient>::~SharedSynchronizable((void *)v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedSynchronizable<InternalClient>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void InternalClient::eventsOn(InternalClient *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v8 = 136315138;
      size_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Internal client clientName:%s eventsOn initiate set to true", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *((unsigned char *)this + 80) = 1;
  uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v5)
  {
    uint64_t v6 = v5;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      BOOL v7 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        BOOL v7 = (void *)*v7;
      }
      int v8 = 136315138;
      size_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Internal client clientName:%s eventsOn set to true", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

InternalClient *InternalClient::getClientEventListenersPtr@<X0>(InternalClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 8);
  *a2 = *((void *)this + 7);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t InternalClient::isEventsOn(InternalClient *this)
{
  return *((unsigned __int8 *)this + 80);
}

void InternalClient::eventsOff(InternalClient *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v8 = 136315138;
      size_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Internal client clientName:%s eventsOff initiate set to false", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *((unsigned char *)this + 80) = 0;
  uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v5)
  {
    uint64_t v6 = v5;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      BOOL v7 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        BOOL v7 = (void *)*v7;
      }
      int v8 = 136315138;
      size_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Internal client clientName:%s eventsOff  set to false", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void InternalClient::~InternalClient(InternalClient *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_4:
      uint64_t v3 = *((void *)this + 3);
      if (!v3) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*((void **)this + 4));
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
LABEL_5:
  }
    dispatch_release(v3);
LABEL_6:
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void InternalClient::get(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  char v29 = 1;
  int v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient3getENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5boost3anyE_block_invoke;
  aBlock[3] = &unk_100497738;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  void aBlock[4] = &v26;
  uint64_t v22 = a3;
  dispatch_object_t v23 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  size_t v9 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  uint64_t v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v24 = v9;
  uint64_t v25 = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1174405120;
  v16[2] = ___ZN14InternalClient3getENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5boost3anyE_block_invoke_5;
  v16[3] = &__block_descriptor_tmp_7;
  void v16[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (v9)
  {
    uint64_t v18 = _Block_copy(v9);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v18 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped(a1, (uint64_t)v16);
  if (v8)
  {
    intptr_t v12 = dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v13 = v27;
    if (v12) {
      *((unsigned char *)v27 + 24) = 1;
    }
  }
  else
  {
    BOOL v13 = v27;
  }
  int v14 = *((unsigned __int8 *)v13 + 24);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
  if (v14) {
    int v15 = 3;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)a4 = v15;
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v8) {
    dispatch_release(v8);
  }
  _Block_object_dispose(&v26, 8);
}

void sub_10010D65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,dispatch_object_t object)
{
  dispatch::callback<void({block_pointer})(void)>::~callback(v32 - 128);
  if (object)
  {
    dispatch_release(object);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      if (!v31) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if (!v31)
  {
LABEL_4:
    _Block_object_dispose((const void *)(v32 - 112), 8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v31);
  _Block_object_dispose((const void *)(v32 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN14InternalClient3getENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5boost3anyE_block_invoke(uint64_t a1, int a2, uint64_t *a3)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
      size_t v9 = *(uint64_t **)(a1 + 64);
      uint64_t v10 = *a3;
      if (!*a3) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
LABEL_9:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
    size_t v9 = *(uint64_t **)(a1 + 64);
    uint64_t v10 = *a3;
    if (!*a3) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  BOOL v7 = logging_obg;
  if (!syslog_is_the_mask_enabled(5) || !os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
    goto LABEL_9;
  }
  int v8 = (void *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    int v8 = (void *)*v8;
  }
  int v13 = 136315650;
  int v14 = "get_block_invoke";
  __int16 v15 = 1024;
  int v16 = a2;
  __int16 v17 = 2080;
  uint64_t v18 = v8;
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Received callback in %s with status %d for cmd: %s", (uint8_t *)&v13, 0x1Cu);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  size_t v9 = *(uint64_t **)(a1 + 64);
  uint64_t v10 = *a3;
  if (!*a3)
  {
LABEL_14:
    uint64_t v12 = *v9;
    *size_t v9 = 0;
    if (!v12) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  uint64_t v12 = *v9;
  *size_t v9 = v11;
  if (v12) {
LABEL_11:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_12:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v6 = *(NSObject **)(a2 + 72);
    *(void *)(a1 + 72) = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = *(NSObject **)(a2 + 72);
    *(void *)(a1 + 72) = v6;
    if (!v6) {
      return;
    }
  }

  dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void ___ZN14InternalClient3getENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5boost3anyE_block_invoke_5(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Instance = InternalIPCAPI::getInstance((InternalIPCAPI *)a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v7 = *(std::string *)(v2 + 32);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v6 = *(std::string *)(a1 + 40);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
LABEL_6:
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_copy(v4);
  }
  long long v5 = *(NSObject **)(a1 + 72);
  if (v5) {
    dispatch_retain(v5);
  }
  InternalIPCAPI::getProperty(Instance, (std::string::size_type)&v7, (uint64_t)&v6);
}

void sub_10010DAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    std::string v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  std::string v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    std::string v6 = _Block_copy(v6);
LABEL_6:
  std::string v7 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void InternalClient::set(uint64_t a1, uint64_t a2)
{
  v17[0] = 0;
  v17[1] = v17;
  void v17[2] = 0x2000000000;
  char v18 = 1;
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient3setENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKc_block_invoke;
  aBlock[3] = &unk_1004977A0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  void aBlock[4] = v17;
  dispatch_object_t v14 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v4 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  std::string v6 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  __int16 v15 = v4;
  int v16 = v6;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = v11;
  char v9 = 13;
  strcpy((char *)__p, "property_type");
  v7[0] = __p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v10, (const void **)__p, (uint64_t)&std::piecewise_construct, v7);
  operator new();
}

void sub_10010E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,dispatch_object_t object)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a33, a34);
  dispatch::callback<void({block_pointer})(void)>::~callback(v48 - 160);
  if (object)
  {
    dispatch_release(object);
    if ((a46 & 0x80000000) == 0)
    {
LABEL_3:
      if (!v47) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a46 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if (!v47)
  {
LABEL_4:
    _Block_object_dispose((const void *)(v48 - 144), 8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v47);
  _Block_object_dispose((const void *)(v48 - 144), 8);
  _Unwind_Resume(a1);
}

void ___ZN14InternalClient3setENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKc_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = 136315650;
    std::string v6 = "set_block_invoke";
    __int16 v7 = 1024;
    int v8 = a2;
    __int16 v9 = 2080;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d for cmd: %s", (uint8_t *)&v5, 0x1Cu);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    std::string v6 = *(NSObject **)(a2 + 64);
    *(void *)(a1 + 64) = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    std::string v6 = *(NSObject **)(a2 + 64);
    *(void *)(a1 + 64) = v6;
    if (!v6) {
      return;
    }
  }

  dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void ___ZN14InternalClient3setENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKc_block_invoke_13(InternalIPCAPI *a1)
{
}

void sub_10010E760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c127_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost3anyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEE64c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(void *a1, void *a2)
{
  a1[6] = 0;
  uint64_t v4 = a1 + 6;
  a1[5] = a1 + 6;
  long long v5 = (uint64_t **)(a1 + 5);
  a1[7] = 0;
  std::string v6 = (const void **)a2[5];
  __int16 v7 = (const void ***)(a2 + 6);
  if (v6 != a2 + 6)
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>(v5, v4, v6 + 4, (uint64_t)(v6 + 4));
      uint64_t v10 = (const void **)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = (const void ***)v10;
          uint64_t v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (const void ***)v6[2];
          BOOL v12 = *v11 == v6;
          std::string v6 = (const void **)v11;
        }
        while (!v12);
      }
      std::string v6 = (const void **)v11;
    }
    while (v11 != v7);
  }
  int v8 = (void *)a2[8];
  if (v8) {
    int v8 = _Block_copy(v8);
  }
  __int16 v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void sub_10010E8DC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v2, *v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c127_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost3anyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEE64c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (char *)a1[6];

  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)(a1 + 5), v4);
}

void InternalClient::setEventHandler(uint64_t a1, uint64_t a2, void *a3, NSObject **a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    __int16 v9 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = (const std::string::value_type *)a2;
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v10 = *(const std::string::value_type **)a2;
      }
      uint64_t v11 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&_DWORD buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "InternalClient::setEventHandler for %s by %s.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (a3) {
    a3 = _Block_copy(a3);
  }
  BOOL v12 = *a4;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)std::string buf = a3;
  *(void *)&uint8_t buf[8] = v12;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  _DWORD v13[2] = ___ZN14InternalClient15setEventHandlerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEU13block_pointerFvN5boost3anyEEN8dispatch5queueE_block_invoke;
  v13[3] = &__block_descriptor_tmp_15_0;
  uint8_t v13[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (a3)
  {
    aBlocuint64_t k = _Block_copy(a3);
    dispatch_object_t object = v12;
    if (!v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v12;
  if (v12) {
LABEL_20:
  }
    dispatch_retain(v12);
LABEL_21:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped((uint64_t *)a1, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (a3) {
    _Block_release(a3);
  }
}

void sub_10010EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10010EB90(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN14InternalClient15setEventHandlerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEU13block_pointerFvN5boost3anyEEN8dispatch5queueE_block_invoke(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(void *)(a1 + 48)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 63))
  {
    return;
  }
  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    uint64_t v2 = (const void **)(a1 + 40);
    uint64_t v3 = *(uint64_t ***)(*(void *)(a1 + 32) + 56);
    __int16 v9 = (long long *)(a1 + 40);
    uint64_t v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v2, (uint64_t)&std::piecewise_construct, &v9);
    long long v5 = *(void **)(a1 + 64);
    if (v5) {
      long long v5 = _Block_copy(v5);
    }
    std::string v6 = v4[7];
    v4[7] = (uint64_t *)v5;
    if (v6) {
      _Block_release(v6);
    }
    __int16 v7 = *(NSObject **)(a1 + 72);
    if (v7) {
      dispatch_retain(v7);
    }
    int v8 = v4[8];
    v4[8] = (uint64_t *)v7;
    if (v8) {
      dispatch_release(v8);
    }
  }
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c57_ZTSN8dispatch8callbackIU13block_pointerFvN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    std::string v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  std::string v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    std::string v6 = _Block_copy(v6);
LABEL_6:
  __int16 v7 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c57_ZTSN8dispatch8callbackIU13block_pointerFvN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void InternalClient::setEventHandler(uint64_t a1, uint64_t a2, void *a3, NSObject *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    __int16 v9 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = (const std::string::value_type *)a2;
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v10 = *(const std::string::value_type **)a2;
      }
      uint64_t v11 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&_DWORD buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "InternalClient::setEventHandler for %s by %s", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (a3) {
    a3 = _Block_copy(a3);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  *(void *)std::string buf = a3;
  *(void *)&uint8_t buf[8] = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1174405120;
  _DWORD v12[2] = ___ZN14InternalClient15setEventHandlerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEU13block_pointerFvN5boost3anyEEP16dispatch_queue_s_block_invoke;
  v12[3] = &__block_descriptor_tmp_18_0;
  uint8_t v12[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (a3)
  {
    aBlocuint64_t k = _Block_copy(a3);
    dispatch_object_t object = a4;
    if (!a4) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = a4;
  if (a4) {
LABEL_20:
  }
    dispatch_retain(a4);
LABEL_21:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped((uint64_t *)a1, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (a3) {
    _Block_release(a3);
  }
}

void sub_10010EFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10010EFC0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN14InternalClient15setEventHandlerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEU13block_pointerFvN5boost3anyEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(void *)(a1 + 48)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 63))
  {
    return;
  }
  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    uint64_t v2 = (const void **)(a1 + 40);
    uint64_t v3 = *(uint64_t ***)(*(void *)(a1 + 32) + 56);
    __int16 v9 = (long long *)(a1 + 40);
    uint64_t v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<InternalClient>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<InternalClient>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v2, (uint64_t)&std::piecewise_construct, &v9);
    long long v5 = *(void **)(a1 + 64);
    if (v5) {
      long long v5 = _Block_copy(v5);
    }
    std::string v6 = v4[7];
    v4[7] = (uint64_t *)v5;
    if (v6) {
      _Block_release(v6);
    }
    __int16 v7 = *(NSObject **)(a1 + 72);
    if (v7) {
      dispatch_retain(v7);
    }
    int v8 = v4[8];
    v4[8] = (uint64_t *)v7;
    if (v8) {
      dispatch_release(v8);
    }
  }
}

void InternalClient::sendData(InternalClient *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
}

void InternalClient::send_diagnostics_req()
{
  v9[0] = 0;
  v9[1] = v9;
  void v9[2] = 0x2000000000;
  char v10 = 1;
  uint64_t v0 = dispatch_group_create();
  dispatch_group_enter(v0);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient20send_diagnostics_reqE22Ctr_send_diagnostics_t_block_invoke;
  aBlock[3] = &unk_100497868;
  void aBlock[4] = v9;
  void aBlock[5] = v0;
  if (v0) {
    dispatch_retain(v0);
  }
  uint64_t v1 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  uint64_t v3 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[6] = v1;
  aBlock[7] = v3;
  v7[0] = 0;
  v7[1] = 0;
  std::string v6 = v7;
  char v5 = 6;
  strcpy((char *)&__p, "method");
  p_p = &__p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v6, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  operator new();
}

void sub_10010F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,dispatch_object_t object)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a25, a26);
  dispatch::callback<void({block_pointer})(void)>::~callback(v34 - 160);
  if (object)
  {
    dispatch_release(object);
    if (!v33)
    {
LABEL_3:
      _Block_object_dispose((const void *)(v34 - 144), 8);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_3;
  }
  dispatch_release(v33);
  _Block_object_dispose((const void *)(v34 - 144), 8);
  _Unwind_Resume(a1);
}

void ___ZN14InternalClient20send_diagnostics_reqE22Ctr_send_diagnostics_t_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    char v5 = "send_diagnostics_req_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

void ___ZN14InternalClient20send_diagnostics_reqE22Ctr_send_diagnostics_t_block_invoke_24()
{
}

void sub_10010F9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void InternalClient::send_ping_node_req(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  char v26 = 1;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient18send_ping_node_reqE20Ctr_send_ping_node_t_block_invoke;
  aBlock[3] = &unk_1004978D0;
  void aBlock[4] = &v23;
  dispatch_object_t v20 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  __int16 v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  std::string v21 = v7;
  uint64_t v22 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = ___ZN14InternalClient18send_ping_node_reqE20Ctr_send_ping_node_t_block_invoke_31;
  v14[3] = &__block_descriptor_tmp_33;
  v14[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  __int16 v16 = *(_WORD *)(a2 + 24);
  if (v7)
  {
    __int16 v17 = _Block_copy(v7);
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  __int16 v17 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_10:
  }
    dispatch_retain(v9);
LABEL_11:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped(a1, (uint64_t)v14);
  if (v6)
  {
    intptr_t v10 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v11 = v24;
    if (v10) {
      *((unsigned char *)v24 + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = v24;
  }
  int v12 = *((unsigned __int8 *)v11 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  if (v12) {
    int v13 = 3;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)a3 = v13;
  if (object) {
    dispatch_release(object);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v23, 8);
}

void sub_10010FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_object_t object)
{
  dispatch::callback<void({block_pointer})(void)>::~callback(v27 - 128);
  if (object)
  {
    dispatch_release(object);
    if (!v26)
    {
LABEL_3:
      _Block_object_dispose((const void *)(v27 - 112), 8);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_3;
  }
  dispatch_release(v26);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN14InternalClient18send_ping_node_reqE20Ctr_send_ping_node_t_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    char v5 = "send_ping_node_req_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient18send_ping_node_reqE20Ctr_send_ping_node_t_block_invoke_31(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v8 = *(std::string *)(a1 + 40);
  }
  strcpy(__p, "NetworkMonitorPingNode");
  char v7 = 22;
  if (*(char *)(v2 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
  }
  else {
    std::string v5 = *(std::string *)(v2 + 32);
  }
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_copy(v3);
  }
  int v4 = *(NSObject **)(a1 + 80);
  if (v4) {
    dispatch_retain(v4);
  }
  InternalIPCAPI::interface_send_ping_req();
}

void sub_10010FF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c26_ZTS20Ctr_send_ping_node_t72c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    __int16 v6 = *(void **)(a2 + 72);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  __int16 v6 = *(void **)(a2 + 72);
  if (v6) {
LABEL_5:
  }
    __int16 v6 = _Block_copy(v6);
LABEL_6:
  char v7 = *(NSObject **)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c26_ZTS20Ctr_send_ping_node_t72c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    int v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void InternalClient::get_device_data_diag_req(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  char v21 = 1;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = ___ZN14InternalClient24get_device_data_diag_reqE19Ctr_get_diag_data_t_block_invoke;
  v14[3] = &unk_100497938;
  v14[4] = &v18;
  dispatch_object_t v15 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  char v7 = _Block_copy(v14);
  global_queue = dispatch_get_global_queue(0, 0);
  __int16 v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  __int16 v16 = v7;
  __int16 v17 = v9;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1174405120;
  v22[2] = ___ZN14InternalClient24get_device_data_diag_reqE19Ctr_get_diag_data_t_block_invoke_37;
  v22[3] = &__block_descriptor_tmp_39;
  v22[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  long long v24 = *(_OWORD *)(a2 + 24);
  __int16 v25 = *(_WORD *)(a2 + 40);
  if (v7)
  {
    aBlocuint64_t k = _Block_copy(v7);
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_10:
  }
    dispatch_retain(v9);
LABEL_11:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped(a1, (uint64_t)v22);
  if (v6)
  {
    intptr_t v10 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v11 = v19;
    if (v10) {
      *((unsigned char *)v19 + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = v19;
  }
  int v12 = *((unsigned __int8 *)v11 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  if (v12) {
    int v13 = 3;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)a3 = v13;
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v15) {
    dispatch_release(v15);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v18, 8);
}

void sub_10011032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, char a15, uint64_t a16, char a17)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a15);
  if (object) {
    dispatch_release(object);
  }
  if (v17) {
    dispatch_release(v17);
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100110364(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN14InternalClient24get_device_data_diag_reqE19Ctr_get_diag_data_t_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    long long v5 = "get_device_data_diag_req_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient24get_device_data_diag_reqE19Ctr_get_diag_data_t_block_invoke_37(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v8 = *(std::string *)(a1 + 40);
  }
  long long v9 = *(_OWORD *)(a1 + 64);
  __int16 v10 = *(_WORD *)(a1 + 80);
  std::string __p = operator new(0x20uLL);
  long long v7 = xmmword_1003F3010;
  strcpy((char *)__p, "NetworkMonitorGetDeviceData");
  if (*(char *)(v2 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
  }
  else {
    std::string v5 = *(std::string *)(v2 + 32);
  }
  uint64_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_copy(v3);
  }
  int v4 = *(NSObject **)(a1 + 96);
  if (v4) {
    dispatch_retain(v4);
  }
  InternalIPCAPI::interface_get_device_data_diag_req();
}

void sub_1001105FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(a17);
    if (a28 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c25_ZTS19Ctr_get_diag_data_t88c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    long long v8 = *(_OWORD *)(a2 + 64);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v8;
    long long v7 = *(void **)(a2 + 88);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  long long v7 = *(void **)(a2 + 88);
  if (v7) {
LABEL_5:
  }
    long long v7 = _Block_copy(v7);
LABEL_6:
  long long v9 = *(NSObject **)(a2 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void __destroy_helper_block_e8_40c25_ZTS19Ctr_get_diag_data_t88c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    int v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void InternalClient::form(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2000000000;
  char v23 = 1;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v20 = v21;
  int v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient4formE8Ctr_form_block_invoke;
  aBlock[3] = &unk_1004979A0;
  void aBlock[4] = v22;
  dispatch_object_t v17 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  long long v5 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  long long v7 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v18 = v5;
  dispatch_object_t object = v7;
  long long v8 = *(const char **)(a1 + 72);
  if (v8)
  {
    long long v9 = *(const void **)a1;
    if (*(void *)a1) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v8 = "router";
    *(void *)(a1 + 72) = "router";
    long long v9 = *(const void **)a1;
    if (*(void *)a1)
    {
LABEL_7:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0]) = 136315394;
        *(const void **)((char *)buf + 4) = v9;
        WORD2(buf[1]) = 2080;
        *(const void **)((char *)&buf[1] + 6) = v8;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Forming WPAN \"%s\" as node type \"%s\"", (uint8_t *)buf, 0x16u);
      }
      if (*(unsigned char *)(a1 + 8))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          int v10 = *(unsigned __int16 *)(a1 + 10);
          LODWORD(buf[0]) = 67109120;
          HIDWORD(buf[0]) = v10;
          uint64_t v11 = ", channel:%d";
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, v11, (uint8_t *)buf, 8u);
        }
      }
      else if (*(unsigned char *)(a1 + 12) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        int v12 = *(_DWORD *)(a1 + 16);
        LODWORD(buf[0]) = 67109120;
        HIDWORD(buf[0]) = v12;
        uint64_t v11 = ", channel-mask:0x%x";
        goto LABEL_18;
      }
      if (*(unsigned char *)(a1 + 20) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        int v13 = *(unsigned __int16 *)(a1 + 22);
        LODWORD(buf[0]) = 67109120;
        HIDWORD(buf[0]) = v13;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, ", panid:0x%04X", (uint8_t *)buf, 8u);
      }
      if (*(unsigned char *)(a1 + 24) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        dispatch_object_t v14 = *(const void **)(a1 + 32);
        LODWORD(buf[0]) = 134217984;
        *(const void **)((char *)buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, ", xpanid:0x%016llX", (uint8_t *)buf, 0xCu);
      }
      if (*(unsigned char *)(a1 + 40))
      {
        encode_data_into_string((unsigned __int8 *)(a1 + 41), 16, (char *)buf, 0x24uLL, 0);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          LODWORD(v24[0]) = 136315138;
          *(_OWORD **)((char *)v24 + 4) = buf;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, ", key:[%s]", (uint8_t *)v24, 0xCu);
        }
      }
      if (*(unsigned char *)(a1 + 57) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        int v15 = *(_DWORD *)(a1 + 60);
        LODWORD(buf[0]) = 67109120;
        HIDWORD(buf[0]) = v15;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, ", key-index:%d", (uint8_t *)buf, 8u);
      }
      if (*(unsigned char *)(a1 + 80))
      {
        memset((char *)buf + 2, 0, 44);
        LOWORD(buf[0]) = 14906;
        v24[0] = *(_OWORD **)(a1 + 81);
        v24[1] = 0;
        inet_ntop(30, v24, (char *)buf, 0x2Eu);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int16 v25 = 136315138;
          *(void *)&v25[4] = buf;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, ", mesh-local-prefix:\"%s\"", v25, 0xCu);
        }
      }
      if (*(unsigned char *)(a1 + 89))
      {
        memset((char *)buf + 2, 0, 44);
        LOWORD(buf[0]) = 14906;
        v24[0] = *(_OWORD **)(a1 + 90);
        v24[1] = 0;
        inet_ntop(30, v24, (char *)buf, 0x2Eu);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int16 v25 = 136315138;
          *(void *)&v25[4] = buf;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, ", legacy-prefix:\"%s\"", v25, 0xCu);
        }
      }
      HIBYTE(buf[2]) = 6;
      strcpy((char *)buf, "method");
      v24[0] = buf;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, buf, (uint64_t)&std::piecewise_construct, v24);
      operator new();
    }
  }
  *(_DWORD *)a2 = 10;
  strcpy((char *)(a2 + 8), "Network Name not Given");
  *(unsigned char *)(a2 + 31) = 22;
  if (v7) {
    dispatch_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v4) {
    dispatch_release(v4);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v20, v21[0]);
  _Block_object_dispose(v22, 8);
}

void sub_100111A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,dispatch_object_t object,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100111B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v16, a7);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)va);
  if (a16) {
    JUMPOUT(0x100111B74);
  }
  JUMPOUT(0x100111B0CLL);
}

void ___ZN14InternalClient4formE8Ctr_form_block_invoke(uint64_t a1, int a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    long long v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      long long v7 = "form_block_invoke";
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received callback for %s with status %d", (uint8_t *)&v6, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient4formE8Ctr_form_block_invoke_57(InternalIPCAPI *a1)
{
}

void sub_100111E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void InternalClient::leave(InternalClient *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v20 = 0;
  char v21 = &v20;
  uint64_t v22 = 0x2000000000;
  char v23 = 1;
  int v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient5leaveEb_block_invoke;
  aBlock[3] = &unk_100497A08;
  void aBlock[4] = &v20;
  dispatch_object_t v19 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = ___ZN14InternalClient5leaveEb_block_invoke_64;
  v14[3] = &__block_descriptor_tmp_65;
  v14[4] = this;
  char v17 = a2;
  if (v7)
  {
    int v15 = _Block_copy(v7);
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v15 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_7:
  }
    dispatch_retain(v9);
LABEL_8:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped((uint64_t *)this, (uint64_t)v14);
  if (v6)
  {
    intptr_t v10 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v11 = v21;
    if (v10) {
      *((unsigned char *)v21 + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = v21;
  }
  int v12 = *((unsigned __int8 *)v11 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  if (v12) {
    int v13 = 3;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)a3 = v13;
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v19) {
    dispatch_release(v19);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v20, 8);
}

void ___ZN14InternalClient5leaveEb_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    long long v5 = "leave_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient5leaveEb_block_invoke_64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Instance = InternalIPCAPI::getInstance((InternalIPCAPI *)a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    int v4 = *(unsigned __int8 *)(a1 + 56);
    long long v5 = *(const void **)(a1 + 40);
    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string v7 = *(std::string *)(v2 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 56);
    long long v5 = *(const void **)(a1 + 40);
    if (!v5)
    {
LABEL_6:
      __int16 v6 = *(NSObject **)(a1 + 48);
      if (v6) {
        dispatch_retain(v6);
      }
      InternalIPCAPI::interface_leave_handler(Instance, (uint64_t)&v7, v4 != 0);
    }
  }
  _Block_copy(v5);
  goto LABEL_6;
}

void sub_1001122A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  long long v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void InternalClient::updatePrimaryResident(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  char v24 = 1;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient21updatePrimaryResidentE23Ctr_primaryResidentInfo_block_invoke;
  aBlock[3] = &unk_100497A70;
  void aBlock[4] = &v21;
  dispatch_object_t v20 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  std::string v7 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = ___ZN14InternalClient21updatePrimaryResidentE23Ctr_primaryResidentInfo_block_invoke_69;
  v14[3] = &__block_descriptor_tmp_70;
  v14[4] = a1;
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  if (v7)
  {
    char v17 = _Block_copy(v7);
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  char v17 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_7:
  }
    dispatch_retain(v9);
LABEL_8:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped(a1, (uint64_t)v14);
  if (v6)
  {
    intptr_t v10 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v11 = v22;
    if (v10) {
      *((unsigned char *)v22 + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = v22;
  }
  int v12 = *((unsigned __int8 *)v11 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  if (v12) {
    int v13 = 3;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)a3 = v13;
  if (object) {
    dispatch_release(object);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v21, 8);
}

void ___ZN14InternalClient21updatePrimaryResidentE23Ctr_primaryResidentInfo_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    long long v5 = "updatePrimaryResident_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient21updatePrimaryResidentE23Ctr_primaryResidentInfo_block_invoke_69(InternalIPCAPI *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  InternalIPCAPI::getInstance(a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    uint64_t v3 = (const void *)*((void *)a1 + 8);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string v5 = *(std::string *)(v2 + 32);
    uint64_t v3 = (const void *)*((void *)a1 + 8);
    if (!v3)
    {
LABEL_6:
      int v4 = *((void *)a1 + 9);
      if (v4) {
        dispatch_retain(v4);
      }
      InternalIPCAPI::interface_update_primary_resident_handler();
    }
  }
  _Block_copy(v3);
  goto LABEL_6;
}

void sub_100112768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_64c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 64);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  std::string v5 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_64c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
}

void InternalClient::wedStart(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  char v23 = 1;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient8wedStartE13Ctr_wed_start_block_invoke;
  aBlock[3] = &unk_100497AD8;
  void aBlock[4] = &v20;
  dispatch_object_t v19 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1174405120;
  void v15[2] = ___ZN14InternalClient8wedStartE13Ctr_wed_start_block_invoke_74;
  v15[3] = &__block_descriptor_tmp_75;
  v15[4] = a1;
  v15[5] = a2;
  if (v7)
  {
    uint64_t v16 = _Block_copy(v7);
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v16 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_7:
  }
    dispatch_retain(v9);
LABEL_8:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped(a1, (uint64_t)v15);
  if (v6)
  {
    intptr_t v10 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v11 = v21;
    if (v10) {
      *((unsigned char *)v21 + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = v21;
  }
  int v12 = *((unsigned __int8 *)v11 + 24);
  if (v12 == 9) {
    int v13 = 14;
  }
  else {
    int v13 = 3;
  }
  if (v12) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)a3 = v14;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v19) {
    dispatch_release(v19);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v20, 8);
}

void ___ZN14InternalClient8wedStartE13Ctr_wed_start_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    std::string v5 = "wedStart_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient8wedStartE13Ctr_wed_start_block_invoke_74(InternalIPCAPI *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  InternalIPCAPI::getInstance(a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    uint64_t v3 = (const void *)*((void *)a1 + 6);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string v5 = *(std::string *)(v2 + 32);
    uint64_t v3 = (const void *)*((void *)a1 + 6);
    if (!v3)
    {
LABEL_6:
      int v4 = *((void *)a1 + 7);
      if (v4) {
        dispatch_retain(v4);
      }
      InternalIPCAPI::interface_wed_start_handler();
    }
  }
  _Block_copy(v3);
  goto LABEL_6;
}

void sub_100112BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 48);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  std::string v5 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_48c58_ZTSN8dispatch8callbackIU13block_pointerFvhN5boost3anyEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
}

void InternalClient::wedStop(InternalClient *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = 0;
  dispatch_object_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  char v21 = 1;
  int v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient7wedStopEv_block_invoke;
  aBlock[3] = &unk_100497B40;
  void aBlock[4] = &v18;
  dispatch_object_t v17 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  std::string v5 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v7 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  _DWORD v13[2] = ___ZN14InternalClient7wedStopEv_block_invoke_79;
  v13[3] = &__block_descriptor_tmp_82;
  uint8_t v13[4] = this;
  if (v5)
  {
    int v14 = _Block_copy(v5);
    dispatch_object_t object = v7;
    if (!v7) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v14 = 0;
  dispatch_object_t object = v7;
  if (v7) {
LABEL_7:
  }
    dispatch_retain(v7);
LABEL_8:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped((uint64_t *)this, (uint64_t)v13);
  if (v4)
  {
    intptr_t v8 = dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    int v9 = v19;
    if (v8) {
      *((unsigned char *)v19 + 24) = 1;
    }
  }
  else
  {
    int v9 = v19;
  }
  int v10 = *((unsigned __int8 *)v9 + 24);
  if (v10 == 9) {
    int v11 = 14;
  }
  else {
    int v11 = 3;
  }
  if (v10) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)a2 = v12;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  if (object) {
    dispatch_release(object);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v7) {
    dispatch_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v4) {
    dispatch_release(v4);
  }
  _Block_object_dispose(&v18, 8);
}

void ___ZN14InternalClient7wedStopEv_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    std::string v5 = "wedStop_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient7wedStopEv_block_invoke_79(InternalIPCAPI *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  InternalIPCAPI::getInstance(a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    uint64_t v3 = (const void *)*((void *)a1 + 5);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string v5 = *(std::string *)(v2 + 32);
    uint64_t v3 = (const void *)*((void *)a1 + 5);
    if (!v3)
    {
LABEL_6:
      int v4 = *((void *)a1 + 6);
      if (v4) {
        dispatch_retain(v4);
      }
      InternalIPCAPI::interface_wed_stop_handler();
    }
  }
  _Block_copy(v3);
  goto LABEL_6;
}

void sub_100113078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void InternalClient::scan(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x2000000000;
  char v12 = 1;
  v10[0] = 0;
  v10[1] = 0;
  int v9 = v10;
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient4scanE8Ctr_scan_block_invoke;
  aBlock[3] = &unk_100497BA8;
  void aBlock[4] = v11;
  void aBlock[5] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  int v4 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  __int16 v6 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[6] = v4;
  aBlock[7] = v6;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v7 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Starting Scan of Type %d \n", buf, 8u);
  }
  buf[23] = 12;
  int v13 = buf;
  strcpy((char *)buf, "channel_mask");
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v9, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v13);
  operator new();
}

void sub_100113C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,dispatch_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14InternalClient4scanE8Ctr_scan_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    std::string v5 = "scan_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient4scanE8Ctr_scan_block_invoke_87(InternalIPCAPI *a1)
{
}

void sub_100113F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14InternalClient4scanE8Ctr_scan_block_invoke_95(InternalIPCAPI *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  InternalIPCAPI::getInstance(a1);
  v11[0] = 0;
  v11[1] = 0;
  int v10 = v11;
  uint64_t v3 = (const void **)*((void *)a1 + 5);
  if (v3 != (const void **)((char *)a1 + 48))
  {
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>(&v10, v11, v3 + 4, (uint64_t)(v3 + 4));
      int v4 = (const void **)v3[1];
      if (v4)
      {
        do
        {
          std::string v5 = (const void ***)v4;
          int v4 = (const void **)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          std::string v5 = (const void ***)v3[2];
          BOOL v6 = *v5 == v3;
          uint64_t v3 = (const void **)v5;
        }
        while (!v6);
      }
      uint64_t v3 = (const void **)v5;
    }
    while (v5 != (const void ***)((char *)a1 + 48));
  }
  if (*(char *)(v2 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
  }
  else {
    std::string v9 = *(std::string *)(v2 + 32);
  }
  int v7 = (const void *)*((void *)a1 + 8);
  if (v7) {
    _Block_copy(v7);
  }
  intptr_t v8 = *((void *)a1 + 9);
  if (v8) {
    dispatch_retain(v8);
  }
  InternalIPCAPI::interface_discover_scan_start_handler();
}

void sub_100114174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char *a18)
{
}

void ___ZN14InternalClient4scanE8Ctr_scan_block_invoke_100(InternalIPCAPI *a1)
{
}

void sub_100114378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void InternalClient::join(void *a1@<X1>, uint64_t a2@<X8>)
{
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  char v19 = 1;
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v16 = v17;
  int v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient4joinE8Ctr_join_block_invoke;
  aBlock[3] = &unk_100497C70;
  void aBlock[4] = v18;
  dispatch_object_t v13 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  std::string v5 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v7 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  int v14 = v5;
  dispatch_object_t object = v7;
  if (*a1)
  {
    char v11 = 6;
    strcpy((char *)__p, "method");
    v9[0] = __p;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v16, (const void **)__p, (uint64_t)&std::piecewise_construct, v9);
    operator new();
  }
  intptr_t v8 = (char *)operator new(0x20uLL);
  strcpy(v8, "Network name is not given");
  *(_DWORD *)a2 = 10;
  *(void *)(a2 + 8) = v8;
  *(_OWORD *)(a2 + 16) = xmmword_1003F3000;
  if (v7) {
    dispatch_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v13) {
    dispatch_release(v13);
  }
  if (v4) {
    dispatch_release(v4);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v16, v17[0]);
  _Block_object_dispose(v18, 8);
}

void sub_100114DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,dispatch_object_t object,char a37)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a37);
  if (object)
  {
    dispatch_release(object);
    if (!v37)
    {
LABEL_4:
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v38 - 176, *(char **)(v38 - 168));
      _Block_object_dispose((const void *)(v38 - 152), 8);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_4;
  }
  dispatch_release(v37);
  goto LABEL_4;
}

void ___ZN14InternalClient4joinE8Ctr_join_block_invoke(uint64_t a1, int a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    std::string v5 = logging_obg;
    if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "join_block_invoke";
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received callback for %s with status %d", (uint8_t *)&v6, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient4joinE8Ctr_join_block_invoke_110(InternalIPCAPI *a1)
{
}

void sub_1001151D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void InternalClient::joiner(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
}

void InternalClient::resume(InternalClient *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
}

void InternalClient::reset(InternalClient *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v24 = 0;
  __int16 v25 = &v24;
  uint64_t v26 = 0x2000000000;
  char v27 = 1;
  int v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient5resetEb_block_invoke;
  aBlock[3] = &unk_100497CD8;
  void aBlock[4] = &v24;
  dispatch_object_t v23 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  BOOL v10 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v10)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Hard Resetting RCP. . .\n", buf, 2u);
    }
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1174405120;
    void v15[2] = ___ZN14InternalClient5resetEb_block_invoke_121;
    v15[3] = &__block_descriptor_tmp_124;
    v15[4] = this;
    if (v7)
    {
      uint64_t v16 = _Block_copy(v7);
      dispatch_object_t object = v9;
      if (!v9)
      {
LABEL_11:
        ctu::SharedSynchronizable<InternalClient>::execute_wrapped((uint64_t *)this, (uint64_t)v15);
        if (object) {
          dispatch_release(object);
        }
        if (v16) {
          _Block_release(v16);
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v16 = 0;
      dispatch_object_t object = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    dispatch_retain(v9);
    goto LABEL_11;
  }
  if (v10)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Resetting RCP. . .\n", buf, 2u);
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1174405120;
  v18[2] = ___ZN14InternalClient5resetEb_block_invoke_117;
  void v18[3] = &__block_descriptor_tmp_120;
  v18[4] = this;
  if (!v7)
  {
    char v19 = 0;
    dispatch_object_t v20 = v9;
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  char v19 = _Block_copy(v7);
  dispatch_object_t v20 = v9;
  if (v9) {
LABEL_19:
  }
    dispatch_retain(v9);
LABEL_20:
  ctu::SharedSynchronizable<InternalClient>::execute_wrapped((uint64_t *)this, (uint64_t)v18);
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
LABEL_24:
  if (v6)
  {
    intptr_t v11 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    char v12 = v25;
    if (v11) {
      *((unsigned char *)v25 + 24) = 1;
    }
  }
  else
  {
    char v12 = v25;
  }
  int v13 = *((unsigned __int8 *)v12 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  if (v13) {
    int v14 = 3;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)a3 = v14;
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v24, 8);
}

void ___ZN14InternalClient5resetEb_block_invoke(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    std::string v5 = "reset_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s with status=%d", (uint8_t *)&v4, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void ___ZN14InternalClient5resetEb_block_invoke_117(InternalIPCAPI *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  InternalIPCAPI::getInstance(a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    uint64_t v3 = (const void *)*((void *)a1 + 5);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string v5 = *(std::string *)(v2 + 32);
    uint64_t v3 = (const void *)*((void *)a1 + 5);
    if (!v3)
    {
LABEL_6:
      int v4 = *((void *)a1 + 6);
      if (v4) {
        dispatch_retain(v4);
      }
      InternalIPCAPI::interface_reset_handler();
    }
  }
  _Block_copy(v3);
  goto LABEL_6;
}

void sub_100115760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN14InternalClient5resetEb_block_invoke_121(InternalIPCAPI *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t Instance = InternalIPCAPI::getInstance(a1);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    int v4 = (void *)*((void *)a1 + 5);
    if (!v4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v8 = *(std::string *)(v2 + 32);
  int v4 = (void *)*((void *)a1 + 5);
  if (v4) {
LABEL_5:
  }
    int v4 = _Block_copy(v4);
LABEL_6:
  std::string v5 = *((void *)a1 + 6);
  aBlocuint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  InternalIPCAPI::interface_hard_reset_handler(Instance, (uint64_t)&v8, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_100115868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void InternalClient::generatePSKc(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v19[0] = 0;
  v19[1] = v19;
  void v19[2] = 0x2000000000;
  char v20 = 1;
  v18[0] = 0;
  v18[1] = 0;
  dispatch_object_t v17 = v18;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient12generatePSKcE16Ctr_generatePSKcPN5boost3anyE_block_invoke;
  aBlock[3] = &unk_100497D70;
  void aBlock[4] = v19;
  void aBlock[5] = a2;
  dispatch_object_t v14 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  int v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  long long v15 = v7;
  dispatch_object_t object = v9;
  if (*a1)
  {
    if (a1[2])
    {
      char v22 = 6;
      strcpy((char *)&__dst, "method");
      std::string __p = &__dst;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v17, &__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
      operator new();
    }
    intptr_t v11 = (char *)operator new(0x20uLL);
    strcpy(v11, "Pass phrase is not given");
    *(_DWORD *)a3 = 10;
    *(void *)(a3 + 8) = v11;
    *(_OWORD *)(a3 + 16) = xmmword_1003F2BE0;
  }
  else
  {
    BOOL v10 = (char *)operator new(0x20uLL);
    strcpy(v10, "Network name is not given");
    *(_DWORD *)a3 = 10;
    *(void *)(a3 + 8) = v10;
    *(_OWORD *)(a3 + 16) = xmmword_1003F3000;
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v6) {
    dispatch_release(v6);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&v17, v18[0]);
  _Block_object_dispose(v19, 8);
}

void sub_1001161D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,dispatch_object_t object,char a33,uint64_t a34,char a35,char *a36)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a33);
  if (object)
  {
    dispatch_release(object);
    if (!v36)
    {
LABEL_4:
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a35, a36);
      _Block_object_dispose((const void *)(v37 - 192), 8);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_4;
  }
  dispatch_release(v36);
  goto LABEL_4;
}

void ___ZN14InternalClient12generatePSKcE16Ctr_generatePSKcPN5boost3anyE_block_invoke(uint64_t a1, int a2, void *a3)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    BOOL v10 = "generatePSKc_block_invoke";
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Received callback for %s : status=%d", (uint8_t *)&v9, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  __int16 v6 = *(uint64_t **)(a1 + 40);
  if (!*a3)
  {
    uint64_t v8 = *v6;
    uint64_t *v6 = 0;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a3 + 24))(*a3);
  uint64_t v8 = *v6;
  uint64_t *v6 = v7;
  if (v8) {
LABEL_5:
  }
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __copy_helper_block_e8_48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 48);
  if (v1) {
    dispatch_release(v1);
  }
}

void ___ZN14InternalClient12generatePSKcE16Ctr_generatePSKcPN5boost3anyE_block_invoke_129(InternalIPCAPI *a1)
{
}

void sub_100116620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void InternalClient::signal_property_changed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO);
  if (v5)
  {
    __int16 v6 = (const std::string::value_type *)a2;
    if (*(char *)(a2 + 23) < 0) {
      __int16 v6 = *(const std::string::value_type **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    BOOL v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Signaling Property change for key: %s. . .\n", buf, 0xCu);
  }
  uint64_t Instance = InternalIPCAPI::getInstance((InternalIPCAPI *)v5);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  InternalIPCAPI::signal_property_changed(Instance, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001167BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void InternalClient::getNCPStatus(InternalClient *this, boost::any *a2)
{
  v12[0] = 0;
  v12[1] = v12;
  _DWORD v12[2] = 0x2000000000;
  char v13 = 1;
  v11[0] = 0;
  v11[1] = 0;
  BOOL v10 = v11;
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN14InternalClient12getNCPStatusEPN5boost3anyE_block_invoke;
  aBlock[3] = &unk_100497DD8;
  void aBlock[4] = v12;
  void aBlock[5] = a2;
  void aBlock[6] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  int v4 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  __int16 v6 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[7] = v4;
  void aBlock[8] = v6;
  char v8 = 6;
  strcpy((char *)&__p, "method");
  p_p = &__p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v10, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  operator new();
}

void sub_100116C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,dispatch_object_t object,char a33)
{
  if (a25 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a33);
    uint64_t v36 = object;
    if (!object)
    {
LABEL_3:
      if (!v33) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a33);
    uint64_t v36 = object;
    if (!object) {
      goto LABEL_3;
    }
  }
  dispatch_release(v36);
  if (!v33)
  {
LABEL_5:
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v34 - 168, *(char **)(v34 - 160));
    _Block_object_dispose((const void *)(v34 - 144), 8);
    _Unwind_Resume(a1);
  }
LABEL_4:
  dispatch_release(v33);
  goto LABEL_5;
}

void ___ZN14InternalClient12getNCPStatusEPN5boost3anyE_block_invoke(uint64_t a1, char a2, boost::any *a3)
{
  any_to_string(a3, (uint64_t)&__p);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  __int16 v6 = *(uint64_t **)(a1 + 40);
  if (*(void *)a3)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a3 + 24))(*(void *)a3);
    uint64_t v8 = *v6;
    uint64_t *v6 = v7;
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v8 = *v6;
  uint64_t *v6 = 0;
  if (v8) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
LABEL_4:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  if (v10 < 0) {
    operator delete(__p);
  }
}

void sub_100116DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14InternalClient12getNCPStatusEPN5boost3anyE_block_invoke_137(InternalIPCAPI *a1)
{
}

void sub_100116F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<InternalClient>::shared_ptr[abi:ne180100]<InternalClient,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100117170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<InternalClient>::~unique_ptr[abi:ne180100]((InternalClient **)va);
  _Unwind_Resume(a1);
}

InternalClient **std::unique_ptr<InternalClient>::~unique_ptr[abi:ne180100](InternalClient **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    InternalClient::~InternalClient(v2);
    operator delete();
  }
  return a1;
}

InternalClient *std::__shared_ptr_pointer<InternalClient *,std::shared_ptr<InternalClient>::__shared_ptr_default_delete<InternalClient,InternalClient>,std::allocator<InternalClient>>::__on_zero_shared(uint64_t a1)
{
  CFTypeRef result = *(InternalClient **)(a1 + 24);
  if (result)
  {
    InternalClient::~InternalClient(result);
    operator delete();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<InternalClient *,std::shared_ptr<InternalClient>::__shared_ptr_default_delete<InternalClient,InternalClient>,std::allocator<InternalClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001003F5EACLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001003F5EACLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001003F5EACLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F5EACLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::__shared_ptr_pointer<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>> *,std::shared_ptr<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>::__shared_ptr_default_delete<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>,std::allocator<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>>::destroy(*(void *)(result + 24), *(char **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>> *,std::shared_ptr<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>::__shared_ptr_default_delete<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>,std::allocator<std::map<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001003F5FFELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001003F5FFELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001003F5FFELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003F5FFELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::callback<void({block_pointer})(boost::any)>>>>::destroy(a1, *((void *)a2 + 1));
    int v4 = *((void *)a2 + 8);
    if (v4) {
      dispatch_release(v4);
    }
    BOOL v5 = (const void *)*((void *)a2 + 7);
    if (v5) {
      _Block_release(v5);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      __int16 v6 = a2;
    }
    else
    {
      __int16 v6 = a2;
    }
    operator delete(v6);
  }
}

void ctu::SharedSynchronizable<InternalClient>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14InternalClientE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_100497EE0;
  void block[5] = v5;
  int v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  char v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14InternalClientE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14InternalClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14InternalClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *boost::any::holder<unsigned long>::type()
{
}

void boost::any::holder<unsigned long>::clone()
{
}

uint64_t HostInterpreter::ProcessSendNetworkDiagnostics(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned __int8 *__src)
{
  memcpy(v12, __src, *((unsigned __int16 *)__src + 16));
  otIp6AddressToString((uint64_t)v12, v16, 48);
  uint64_t v6 = otThreadSendDiagnosticGet(*((void *)this + 28), (uint64_t)v12, __src + 16, __src[34], (uint64_t)HostInterpreter::HandleDiagnosticGetResponse, (uint64_t)this);
  uint64_t v7 = 1;
  switch((int)v6)
  {
    case 0:
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          int v9 = *((unsigned __int16 *)__src + 17);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v16;
          __int16 v14 = 1024;
          int v15 = v9;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM HostInterpreter::ProcessSendNetworkDiagnostics Sent network diagnostic get cmd to:%s tlv_len:%d", buf, 0x12u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      uint64_t v7 = 0;
      break;
    case 5:
      uint64_t v7 = 9;
      break;
    case 7:
      uint64_t v7 = 2;
      break;
    case 13:
      uint64_t v7 = 4;
      break;
    default:
      break;
  }
  uint64_t v10 = *((void *)__src + 5);
  if (!v10)
  {
    std::runtime_error::runtime_error((std::runtime_error *)buf, "call to empty boost::function");
    *(void *)std::string buf = off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)buf);
  }
  (*(void (**)(char *, uint64_t))((v10 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)__src + 48, v7);
  return v6;
}

void sub_10011787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

uint64_t HostInterpreter::ProcessDatasetUpdate(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned int *a4)
{
  if (*a4 == 1)
  {
    uint64_t PendingTlvs = otDatasetGetPendingTlvs(*((void *)this + 28), v13);
    if (!PendingTlvs)
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessDatasetUpdate();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      if (v14) {
        dskeychainRcp::AddDataSet(1u, v13, v14);
      }
      else {
        dskeychainRcp::DeleteDataSet(1u);
      }
      return 0;
    }
  }
  else
  {
    if (*a4)
    {
      uint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v7)
      {
        uint64_t v8 = v7;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessDatasetUpdate();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      uint64_t PendingTlvs = 7;
      goto LABEL_18;
    }
    uint64_t PendingTlvs = otDatasetGetActiveTlvs(*((void *)this + 28), v13);
    if (!PendingTlvs)
    {
      uint64_t v6 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v6)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessDatasetUpdate: Active Dataset Len[%d]", buf, 8u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      if (v14) {
        dskeychainRcp::AddDataSet(0, v13, v14);
      }
      else {
        dskeychainRcp::DeleteDataSet(0);
      }
      buf[23] = 20;
      strcpy((char *)buf, "ActiveDataSetChanged");
      operator new();
    }
  }
  if (PendingTlvs == 23)
  {
    dskeychainRcp::DeleteDataSet(*a4);
    return 0;
  }
LABEL_18:
  int v9 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v9)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::ProcessDatasetUpdate();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return PendingTlvs;
}

void sub_100117C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessDiscoverScan(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t **a4)
{
  char v68 = 16;
  strcpy(__s1, "Scan:ChannelMask");
  uint64_t v6 = a4[1];
  if (!v6)
  {
LABEL_20:
    int v65 = 0;
    goto LABEL_29;
  }
  uint64_t v7 = a4[1];
  while (1)
  {
    int v8 = *((char *)v7 + 55);
    if (v8 >= 0) {
      unint64_t v9 = *((unsigned __int8 *)v7 + 55);
    }
    else {
      unint64_t v9 = v7[5];
    }
    if (v8 >= 0) {
      uint64_t v10 = v7 + 4;
    }
    else {
      uint64_t v10 = (const void *)v7[4];
    }
    if (v9 >= 0x10) {
      size_t v11 = 16;
    }
    else {
      size_t v11 = v9;
    }
    int v12 = memcmp(__s1, v10, v11);
    BOOL v13 = v12 < 0;
    if (!v12) {
      BOOL v13 = v9 > 0x10;
    }
    if (v13) {
      goto LABEL_3;
    }
    int v14 = memcmp(v10, __s1, v11);
    BOOL v15 = v9 < 0x10;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (!v15) {
      break;
    }
    ++v7;
LABEL_3:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_20;
    }
  }
  char v68 = 16;
  strcpy(__s1, "Scan:ChannelMask");
  v66.__vftable = (std::bad_cast_vtbl *)__s1;
  uint64_t v16 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v66);
  dispatch_object_t v17 = v16[7];
  if (v17) {
    uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t *))(*v17 + 16))(v17);
  }
  else {
  char v19 = (const char *)(v18[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v19 != v20 && strcmp(v19, v20))
  {
    v66.__vftable = 0;
    std::bad_cast::bad_cast(&v66);
    v66.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  int v21 = *((_DWORD *)v16[7] + 2);
  if (v68 < 0) {
    operator delete(*(void **)__s1);
  }
  int v65 = v21;
  uint64_t v6 = a4[1];
LABEL_29:
  char v68 = 10;
  strcpy(__s1, "Scan:PANID");
  if (!v6)
  {
LABEL_48:
    __int16 v64 = -1;
    goto LABEL_57;
  }
  char v22 = v6;
  while (2)
  {
    int v23 = *((char *)v22 + 55);
    if (v23 >= 0) {
      unint64_t v24 = *((unsigned __int8 *)v22 + 55);
    }
    else {
      unint64_t v24 = v22[5];
    }
    if (v23 >= 0) {
      __int16 v25 = v22 + 4;
    }
    else {
      __int16 v25 = (const void *)v22[4];
    }
    if (v24 >= 0xA) {
      size_t v26 = 10;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(__s1, v25, v26);
    BOOL v28 = v27 < 0;
    if (!v27) {
      BOOL v28 = v24 > 0xA;
    }
    if (v28)
    {
LABEL_31:
      char v22 = (uint64_t *)*v22;
      if (!v22) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
  int v29 = memcmp(v25, __s1, v26);
  BOOL v30 = v24 < 0xA;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  if (v30)
  {
    ++v22;
    goto LABEL_31;
  }
  char v68 = 10;
  v66.__vftable = (std::bad_cast_vtbl *)__s1;
  strcpy(__s1, "Scan:PANID");
  BOOL v31 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v66);
  uint64_t v32 = v31[7];
  if (v32) {
    std::string::size_type v33 = (void *)(*(uint64_t (**)(uint64_t *))(*v32 + 16))(v32);
  }
  else {
  uint64_t v34 = (const char *)(v33[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v34 != v35 && strcmp(v34, v35))
  {
    v66.__vftable = 0;
    std::bad_cast::bad_cast(&v66);
    v66.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  __int16 v64 = *((_WORD *)v31[7] + 4);
  if (v68 < 0) {
    operator delete(*(void **)__s1);
  }
  uint64_t v6 = a4[1];
LABEL_57:
  char v68 = 20;
  strcpy(__s1, "Scan:EnableFiltering");
  if (v6)
  {
    uint64_t v36 = v6;
    do
    {
      int v37 = *((char *)v36 + 55);
      if (v37 >= 0) {
        unint64_t v38 = *((unsigned __int8 *)v36 + 55);
      }
      else {
        unint64_t v38 = v36[5];
      }
      if (v37 >= 0) {
        CFStringRef v39 = v36 + 4;
      }
      else {
        CFStringRef v39 = (const void *)v36[4];
      }
      if (v38 >= 0x14) {
        size_t v40 = 20;
      }
      else {
        size_t v40 = v38;
      }
      int v41 = memcmp(__s1, v39, v40);
      BOOL v42 = v41 < 0;
      if (!v41) {
        BOOL v42 = v38 > 0x14;
      }
      if (!v42)
      {
        int v43 = memcmp(v39, __s1, v40);
        BOOL v44 = v38 < 0x14;
        if (v43) {
          BOOL v44 = v43 < 0;
        }
        if (!v44)
        {
          char v68 = 20;
          strcpy(__s1, "Scan:EnableFiltering");
          v66.__vftable = (std::bad_cast_vtbl *)__s1;
          xpc_object_t v45 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v66);
          char v63 = any_to_BOOL((const boost::any *)(v45 + 7));
          if (v68 < 0) {
            operator delete(*(void **)__s1);
          }
          uint64_t v46 = this;
          uint64_t v6 = a4[1];
          goto LABEL_80;
        }
        ++v36;
      }
      uint64_t v36 = (uint64_t *)*v36;
    }
    while (v36);
  }
  uint64_t v46 = this;
  char v63 = 0;
LABEL_80:
  char v68 = 15;
  strcpy(__s1, "Scan:JoinerFlag");
  if (!v6)
  {
LABEL_101:
    char v56 = 0;
    unsigned __int16 v58 = v64;
    int v57 = v65;
    goto LABEL_102;
  }
  while (2)
  {
    int v47 = *((char *)v6 + 55);
    if (v47 >= 0) {
      unint64_t v48 = *((unsigned __int8 *)v6 + 55);
    }
    else {
      unint64_t v48 = v6[5];
    }
    if (v47 >= 0) {
      std::string v49 = v6 + 4;
    }
    else {
      std::string v49 = (const void *)v6[4];
    }
    if (v48 >= 0xF) {
      size_t v50 = 15;
    }
    else {
      size_t v50 = v48;
    }
    int v51 = memcmp(__s1, v49, v50);
    BOOL v52 = v51 < 0;
    if (!v51) {
      BOOL v52 = v48 > 0xF;
    }
    if (v52)
    {
LABEL_83:
      uint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_101;
      }
      continue;
    }
    break;
  }
  int v53 = memcmp(v49, __s1, v50);
  BOOL v54 = v48 < 0xF;
  if (v53) {
    BOOL v54 = v53 < 0;
  }
  if (v54)
  {
    ++v6;
    goto LABEL_83;
  }
  char v68 = 15;
  strcpy(__s1, "Scan:JoinerFlag");
  v66.__vftable = (std::bad_cast_vtbl *)__s1;
  unsigned int v55 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v66);
  char v56 = any_to_BOOL((const boost::any *)(v55 + 7));
  unsigned __int16 v58 = v64;
  int v57 = v65;
  if (v68 < 0) {
    operator delete(*(void **)__s1);
  }
LABEL_102:
  uint64_t v59 = otThreadDiscover(*((void *)v46 + 28), v57, v58, v56, v63, (uint64_t)HostInterpreter::HandleActiveScanResultFromBeacon, (uint64_t)v46);
  if (v59)
  {
    uint64_t v60 = a4[3];
    if (!v60)
    {
      std::runtime_error::runtime_error((std::runtime_error *)__s1, "call to empty boost::function");
      *(void *)__s1 = off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)__s1);
    }
    (*(void (**)(char *, uint64_t))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 32, v59);
    TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
  }
  else
  {
    mNetScanCmdApiData = (uint64_t)a4;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__s1 = 67109120;
      *(_DWORD *)&__s1[4] = v59;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessDiscoverScan error = %d", (uint8_t *)__s1, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return v59;
}

void sub_1001183F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::bad_cast a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessEnergyScan(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t **a4)
{
  char v42 = 16;
  strcpy(__s1, "Scan:ChannelMask");
  uint64_t v6 = a4[1];
  if (v6)
  {
    uint64_t v7 = a4[1];
    do
    {
      int v8 = *((char *)v7 + 55);
      if (v8 >= 0) {
        unint64_t v9 = *((unsigned __int8 *)v7 + 55);
      }
      else {
        unint64_t v9 = v7[5];
      }
      if (v8 >= 0) {
        uint64_t v10 = v7 + 4;
      }
      else {
        uint64_t v10 = (const void *)v7[4];
      }
      if (v9 >= 0x10) {
        size_t v11 = 16;
      }
      else {
        size_t v11 = v9;
      }
      int v12 = memcmp(__s1, v10, v11);
      BOOL v13 = v12 < 0;
      if (!v12) {
        BOOL v13 = v9 > 0x10;
      }
      if (!v13)
      {
        int v14 = memcmp(v10, __s1, v11);
        BOOL v15 = v9 < 0x10;
        if (v14) {
          BOOL v15 = v14 < 0;
        }
        if (!v15)
        {
          char v42 = 16;
          strcpy(__s1, "Scan:ChannelMask");
          v40.__vftable = (std::bad_cast_vtbl *)__s1;
          dispatch_object_t v17 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v40);
          uint64_t v18 = v17[7];
          if (v18) {
            char v19 = (void *)(*(uint64_t (**)(uint64_t *))(*v18 + 16))(v18);
          }
          else {
          char v20 = (const char *)(v19[1] & 0x7FFFFFFFFFFFFFFFLL);
          }
          if (v20 != v21 && strcmp(v20, v21))
          {
            v40.__vftable = 0;
            std::bad_cast::bad_cast(&v40);
            v40.__vftable = (std::bad_cast_vtbl *)off_100495C28;
            boost::throw_exception<boost::bad_any_cast>();
          }
          unsigned int v16 = *((_DWORD *)v17[7] + 2);
          if (v42 < 0) {
            operator delete(*(void **)__s1);
          }
          uint64_t v6 = a4[1];
          goto LABEL_29;
        }
        ++v7;
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  unsigned int v16 = 0;
LABEL_29:
  char v42 = 11;
  strcpy(__s1, "Scan:Period");
  if (!v6)
  {
LABEL_48:
    __int16 v30 = 0;
    goto LABEL_49;
  }
  while (1)
  {
    int v22 = *((char *)v6 + 55);
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)v6 + 55);
    }
    else {
      unint64_t v23 = v6[5];
    }
    if (v22 >= 0) {
      unint64_t v24 = v6 + 4;
    }
    else {
      unint64_t v24 = (const void *)v6[4];
    }
    if (v23 >= 0xB) {
      size_t v25 = 11;
    }
    else {
      size_t v25 = v23;
    }
    int v26 = memcmp(__s1, v24, v25);
    BOOL v27 = v26 < 0;
    if (!v26) {
      BOOL v27 = v23 > 0xB;
    }
    if (v27) {
      goto LABEL_31;
    }
    int v28 = memcmp(v24, __s1, v25);
    BOOL v29 = v23 < 0xB;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (!v29) {
      break;
    }
    ++v6;
LABEL_31:
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_48;
    }
  }
  char v42 = 11;
  v40.__vftable = (std::bad_cast_vtbl *)__s1;
  strcpy(__s1, "Scan:Period");
  uint64_t v35 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v40);
  uint64_t v36 = v35[7];
  if (v36) {
    int v37 = (void *)(*(uint64_t (**)(uint64_t *))(*v36 + 16))(v36);
  }
  else {
  unint64_t v38 = (const char *)(v37[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v38 != v39 && strcmp(v38, v39))
  {
    v40.__vftable = 0;
    std::bad_cast::bad_cast(&v40);
    v40.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  __int16 v30 = *((_WORD *)v35[7] + 4);
  if (v42 < 0) {
    operator delete(*(void **)__s1);
  }
LABEL_49:
  uint64_t v31 = otLinkEnergyScan(*((void *)this + 28), v16, v30, (uint64_t)HostInterpreter::HandleEnergyScanResult, (uint64_t)this);
  if (v31)
  {
    uint64_t v32 = a4[3];
    if (!v32)
    {
      std::runtime_error::runtime_error((std::runtime_error *)__s1, "call to empty boost::function");
      *(void *)__s1 = off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)__s1);
    }
    (*(void (**)(char *, uint64_t))(((unint64_t)v32 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 32, v31);
    TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
  }
  else
  {
    mEnergyScanCmdApiData = (uint64_t)a4;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__s1 = 67109120;
      *(_DWORD *)&__s1[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessEnergyScan error = %d", (uint8_t *)__s1, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return v31;
}

void sub_10011895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessForm(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t **a4)
{
  *(_OWORD *)std::string __str = 0u;
  long long v75 = 0u;
  memset(&v66, 0, sizeof(v66));
  gettimeofday(&v65, 0);
  __darwin_time_t tv_sec = v65.tv_sec;
  long long v72 = 0u;
  long long v70 = 0u;
  memset(v71, 0, sizeof(v71));
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  memset(v69, 0, sizeof(v69));
  strcpy((char *)&__p, "Thread:DeviceMode");
  v62[0].__vftable = (std::bad_cast_vtbl *)&__p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v62);
  if (*((char *)v7 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v64, (const std::string::value_type *)v7[7], (std::string::size_type)v7[8]);
  }
  else {
    std::string v64 = *(std::string *)(v7 + 7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    std::string v63 = v64;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external(&v63, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
LABEL_9:
  uint64_t v8 = HostInterpreter::DeviceModeConfig((uint64_t)this, (const std::string::value_type *)&v63);
  NewNetworuint64_t k = v8;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v63.__r_.__value_.__l.__data_);
    if (!NewNetwork) {
      goto LABEL_13;
    }
LABEL_14:
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_13:
  NewNetworuint64_t k = otDatasetCreateNewNetwork(*((void *)this + 28), (uint64_t)v69);
  if (NewNetwork) {
    goto LABEL_14;
  }
  WORD4(v72) |= 1u;
  *(void *)&v69[0] = tv_sec;
  WORD4(v69[0]) = 0;
  BYTE10(v69[0]) = 1;
  otThreadGetPskc(*((void *)this + 28), (uint64_t)&v73);
  if (vmaxvq_u8((uint8x16_t)vtstq_s8(v73, v73)))
  {
    *(void *)((char *)&v71[3] + 6) = 0;
    *(void *)((char *)&v71[2] + 14) = 0;
    otThreadGetPskc(*((void *)this + 28), (uint64_t)&v71[2] + 14);
    WORD4(v72) |= 0x200u;
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "ProcessForm::pskc not present. Generated new pskc", (uint8_t *)&__p, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  __int16 v16 = *((_WORD *)a4 + 12);
  if ((v16 & 0x100) != 0)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__p, "NCP:Channel");
    v62[0].__vftable = (std::bad_cast_vtbl *)&__p;
    dispatch_object_t v17 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v62);
    uint64_t v18 = v17[7];
    if (v18) {
      char v19 = (void *)(*(uint64_t (**)(uint64_t *))(*v18 + 16))(v18);
    }
    else {
    int v21 = (const char *)(v19[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v21 != v22 && strcmp(v21, v22))
    {
      v62[0].__vftable = 0;
      std::bad_cast::bad_cast(v62);
      v62[0].__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    WORD5(v71[2]) = *((_WORD *)v17[7] + 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    WORD4(v72) |= 0x100u;
    __int16 v16 = *((_WORD *)a4 + 12);
  }
  if ((v16 & 0x80) != 0)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&__p, "Network:PANID");
    v62[0].__vftable = (std::bad_cast_vtbl *)&__p;
    unint64_t v23 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v62);
    unint64_t v24 = v23[7];
    if (v24) {
      size_t v25 = (void *)(*(uint64_t (**)(uint64_t *))(*v24 + 16))(v24);
    }
    else {
    int v26 = (const char *)(v25[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v26 != v27 && strcmp(v26, v27))
    {
      v62[0].__vftable = 0;
      std::bad_cast::bad_cast(v62);
      v62[0].__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    WORD4(v71[2]) = *((_WORD *)v23[7] + 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    WORD4(v72) |= 0x80u;
    __int16 v16 = *((_WORD *)a4 + 12);
  }
  if ((v16 & 8) != 0)
  {
    HIBYTE(v62[2].__vftable) = 12;
    strcpy((char *)v62, "Network:Name");
    double v67 = v62;
    int v28 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v62[0].__vftable, (uint64_t)&std::piecewise_construct, (_OWORD **)&v67);
    boost::any_cast<std::string>((uint64_t)(v28 + 7), &__p);
    std::string v66 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v62[2].__vftable) < 0) {
      operator delete(v62[0].__vftable);
    }
    memset(v71, 0, 17);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v29 = &v66;
    }
    else {
      BOOL v29 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v66.__r_.__value_.__l.__size_;
    }
    memcpy(v71, v29, size);
    WORD4(v72) |= 8u;
    __int16 v16 = *((_WORD *)a4 + 12);
  }
  if ((v16 & 0x10) != 0)
  {
    *(void *)((char *)&v71[1] + 1) = 0;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "Network:XPANID");
    v62[0].__vftable = (std::bad_cast_vtbl *)&__p;
    uint64_t v31 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v62);
    uint64_t v32 = v31[7];
    if (v32) {
      std::string::size_type v33 = (void *)(*(uint64_t (**)(uint64_t *))(*v32 + 16))(v32);
    }
    else {
    uint64_t v34 = (const char *)(v33[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v34 != v35 && strcmp(v34, v35))
    {
      v62[0].__vftable = 0;
      std::bad_cast::bad_cast(v62);
      v62[0].__vftable = (std::bad_cast_vtbl *)off_100495C28;
      boost::throw_exception<boost::bad_any_cast>();
    }
    uint64_t v36 = v31[7][1];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    snprintf(__str, 0x20uLL, "%016llx", v36);
    int v37 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v37)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)__str;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "::Xpanid = [%s]", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    NewNetworuint64_t k = ot::Utils::CmdLineParser::ParseAsHexString((ot::Utils::CmdLineParser *)__str, (char *)&v71[1] + 1, (unsigned __int8 *)8);
    if (NewNetwork) {
      goto LABEL_14;
    }
    WORD4(v72) |= 0x10u;
    __int16 v16 = *((_WORD *)a4 + 12);
  }
  if ((v16 & 4) != 0)
  {
    HIBYTE(v62[2].__vftable) = 11;
    strcpy((char *)v62, "Network:Key");
    double v67 = v62;
    unint64_t v38 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v62[0].__vftable, (uint64_t)&std::piecewise_construct, (_OWORD **)&v67);
    any_to_data((const boost::any *)(v38 + 7), &__p);
    std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
    uint64_t v10 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
    memset(&__p, 0, sizeof(__p));
    if (SHIBYTE(v62[2].__vftable) < 0) {
      operator delete(v62[0].__vftable);
    }
    unint64_t v40 = 2 * (v39 - (void)v10);
    if (v40 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v40 >= 0x17)
    {
      uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v42 = v40 | 7;
      }
      uint64_t v43 = v42 + 1;
      p_p = (std::string *)operator new(v42 + 1);
      __p.__r_.__value_.__l.__size_ = 2 * (v39 - (void)v10);
      __p.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 2 * (v39 - (_BYTE)v10);
      p_p = &__p;
      if (!v40)
      {
LABEL_95:
        p_p->__r_.__value_.__s.__data_[v40] = 0;
        std::string::reserve(&__p, v40 | 1);
        if (v10 == (unsigned __int8 *)v39) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v10;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v45 = &__p;
        }
        else {
          xpc_object_t v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v46 = 22;
        }
        else {
          unint64_t v46 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        }
        encode_data_into_string(v44, v39 - (void)v10, (char *)v45, v46, 0);
        long long v70 = 0uLL;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v47 = (ot::Utils::CmdLineParser *)&__p;
        }
        else {
          int v47 = (ot::Utils::CmdLineParser *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v48 = ot::Utils::CmdLineParser::ParseAsHexString(v47, (char *)&v70, (unsigned __int8 *)0x10);
        NewNetworuint64_t k = v48;
        if (v48)
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_109;
          }
        }
        else
        {
          WORD4(v72) |= 4u;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_109:
            if (v48) {
              goto LABEL_15;
            }
LABEL_115:
            if (((_WORD)a4[3] & 0x20) == 0) {
              goto LABEL_136;
            }
            goto LABEL_116;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if (NewNetwork) {
          goto LABEL_15;
        }
        goto LABEL_115;
      }
    }
    bzero(p_p, 2 * (v39 - (void)v10));
    goto LABEL_95;
  }
  uint64_t v10 = 0;
  if ((v16 & 0x20) == 0) {
    goto LABEL_136;
  }
LABEL_116:
  HIBYTE(v62[2].__vftable) = 20;
  strcpy((char *)v62, "IPv6:MeshLocalPrefix");
  double v67 = v62;
  std::string v49 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v62[0].__vftable, (uint64_t)&std::piecewise_construct, (_OWORD **)&v67);
  any_to_string((const boost::any *)(v49 + 7), (uint64_t)&__p);
  if (SHIBYTE(v62[2].__vftable) < 0) {
    operator delete(v62[0].__vftable);
  }
  std::string::size_type v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v50 = __p.__r_.__value_.__l.__size_;
  }
  if (v50)
  {
    if (v50 >= 5)
    {
      std::string::size_type v52 = 4;
      unsigned __int8 v53 = 4;
      do
      {
        std::string::insert(&__p, v52, ":");
        v53 += 5;
        std::string::size_type v52 = v53;
        std::string::size_type v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v54 = __p.__r_.__value_.__l.__size_;
        }
      }
      while (v54 > v53);
    }
    std::string::append(&__p, "::");
    char v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *(void *)((char *)&v71[1] + 9) = 0;
  if (v51 >= 0) {
    unsigned int v55 = &__p;
  }
  else {
    unsigned int v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v56 = ot::Utils::CmdLineParser::ParseAsIp6Address((const char *)v55, (uint64_t)v62);
  NewNetworuint64_t k = v56;
  if (v56)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_132;
    }
LABEL_135:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (NewNetwork) {
      goto LABEL_15;
    }
    goto LABEL_136;
  }
  *(std::bad_cast *)((char *)&v71[1] + 9) = v62[0];
  WORD4(v72) |= 0x20u;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_135;
  }
LABEL_132:
  if (v56) {
    goto LABEL_15;
  }
LABEL_136:
  NewNetworuint64_t k = otDatasetSetActive(*((void *)this + 28), (uint64_t)v69);
  if (NewNetwork) {
    goto LABEL_15;
  }
  int v57 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v57)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Dataset commit active, Done", (uint8_t *)&__p, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*((unsigned char *)a4 + 26))
  {
    RcpHostContext::init_threadstart_radio_start((RcpHostContext *)RcpHostContext::sRcpHostContext);
    otIp6SetSlaacEnabled(*((void *)this + 28), 1);
    NewNetworuint64_t k = otIp6SetEnabled(*((void *)this + 28), 1);
    if (NewNetwork) {
      goto LABEL_15;
    }
    unsigned __int16 v58 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v58)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Ifconfig up, Done", (uint8_t *)&__p, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    NewNetworuint64_t k = otThreadSetEnabled(*((void *)this + 28), 1);
    if (NewNetwork)
    {
LABEL_15:
      HIDWORD(v11) = NewNetwork - 1;
      LODWORD(v11) = NewNetwork - 1;
      uint64_t v12 = 1;
      uint64_t v13 = 1;
      switch((v11 >> 1))
      {
        case 0u:
          goto LABEL_23;
        case 2u:
          uint64_t v13 = 9;
          uint64_t v12 = 5;
          int v14 = a4[4];
          if (!v14) {
            goto LABEL_19;
          }
          goto LABEL_24;
        case 3u:
          uint64_t v13 = 2;
          uint64_t v12 = 7;
          int v14 = a4[4];
          if (!v14) {
            goto LABEL_19;
          }
          goto LABEL_24;
        case 6u:
          uint64_t v13 = 4;
          uint64_t v12 = 13;
          int v14 = a4[4];
          if (!v14) {
            goto LABEL_19;
          }
          goto LABEL_24;
        default:
          uint64_t v13 = 1;
          uint64_t v12 = NewNetwork;
LABEL_23:
          int v14 = a4[4];
          if (v14) {
            goto LABEL_24;
          }
          goto LABEL_19;
      }
    }
    if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) == 6) {
      otThreadBecomeLeader(*((void *)this + 28), 0);
    }
    uint64_t v60 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v60)
    {
      uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(6);
      if (is_the_mask_enabled)
      {
        uint64_t is_the_mask_enabled = os_log_type_enabled(v60, OS_LOG_TYPE_INFO);
        if (is_the_mask_enabled)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessForm";
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "%s Thread start, Done", (uint8_t *)&__p, 0xCu);
        }
      }
    }
    else
    {
      uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (is_the_mask_enabled) {
        -[PowerEventHandler_Rcp init:]();
      }
    }
    HostInterpreter::transactionEnabled((HostInterpreter *)is_the_mask_enabled, 1);
  }
  else
  {
    uint64_t v59 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v59)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessForm(uint8_t, char **, void *)";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 732;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "%s:%d:Network will not be created ", (uint8_t *)&__p, 0x12u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = a4[4];
  if (!v14)
  {
LABEL_19:
    std::runtime_error::runtime_error((std::runtime_error *)&__p, "call to empty boost::function");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)&__p);
  }
LABEL_24:
  (*(void (**)(char *, uint64_t))(((unint64_t)v14 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 40, v13);
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_30:
    operator delete(v66.__r_.__value_.__l.__data_);
    if (!v10) {
      return v12;
    }
    goto LABEL_27;
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_26:
  if (v10) {
LABEL_27:
  }
    operator delete(v10);
  return v12;
}

void sub_1001197CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::bad_cast a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,std::runtime_error a43,int a44,__int16 a45,char a46,char a47)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
LABEL_3:
    if (!v47) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  operator delete(a34);
  if (!v47) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v47);
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessGeneratePSKc(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t **a4)
{
  char v21 = 11;
  uint64_t v5 = a4 + 3;
  strcpy((char *)v20, "pass_phrase");
  __p[0] = v20;
  uint64_t v6 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4 + 3, v20, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  uint64_t v7 = (long long *)&v22;
  any_to_string((const boost::any *)(v6 + 7), (uint64_t)&v22);
  if (v23 < 0) {
    uint64_t v7 = (long long *)v22.__vftable;
  }
  char v17 = 12;
  strcpy((char *)v16, "network_name");
  unint64_t v24 = v16;
  uint64_t v8 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, v16, (uint64_t)&std::piecewise_construct, (_OWORD **)&v24);
  any_to_string((const boost::any *)(v8 + 7), (uint64_t)__p);
  int v9 = v19;
  uint64_t v10 = (void **)__p[0];
  otThreadGetExtendedPanId(*((void *)this + 28));
  if (v9 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t Pskc = otDatasetGeneratePskc(v7, (uint64_t)v12, v11, (uint64_t)&v25);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete((void *)v16[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v22.__vftable);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_10:
    if (Pskc) {
      goto LABEL_11;
    }
LABEL_19:
    *(_OWORD *)operator new(0x10uLL) = v25;
    operator new();
  }
LABEL_18:
  operator delete((void *)v20[0]);
  if (!Pskc) {
    goto LABEL_19;
  }
LABEL_11:
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::ProcessGeneratePSKc();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return Pskc;
}

void sub_100119C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::runtime_error a19)
{
  std::runtime_error::~runtime_error(&a19);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_100119D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if (a27 < 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a28);
  if (a27 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessGetRcpCrashDump(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(&v84, 0, sizeof(v84));
  memset(&v83, 0, sizeof(v83));
  *(_DWORD *)((char *)v82 + 3) = 0;
  v82[0] = 0;
  memset(&__p, 0, sizeof(__p));
  DWORD1(xmmword_1004B5FE8) = 0;
  uint64_t FaultInfo = otPlatVendorGetFaultInfo(*((void *)this + 28), (uint64_t)&v85, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (FaultInfo)
  {
LABEL_2:
    uint64_t v10 = 0;
    int v11 = 0;
    goto LABEL_3;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v86;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = DWORD1(v86);
      *(_WORD *)&_DWORD buf[14] = 1024;
      *(_DWORD *)uint64_t v88 = v85;
      *(_WORD *)&v88[4] = 1024;
      *(_DWORD *)&v88[6] = WORD4(v86);
      __int16 v89 = 1024;
      int v90 = DWORD1(v85);
      __int16 v91 = 2048;
      uint64_t v92 = *((void *)&v85 + 1);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Fatal info address = %u line = %u random_id = %u crash_size_t count = %u crash_type = %u time_stamp = %llu", buf, 0x2Au);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  int v14 = DWORD1(v85);
  switch(DWORD1(v85))
  {
    case 0:
      BOOL v15 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v15)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          __int16 v16 = "ProcessGetFaultInfo: Fault info: NONE";
          goto LABEL_69;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      goto LABEL_72;
    case 1:
      std::string::assign(&v84, "assert_dump_");
      char v17 = "E_NCP_RESET_CAUSE_ASSERT";
      DWORD1(xmmword_1004B5FE8) = v14;
      break;
    case 2:
      std::string::assign(&v84, "fault_dump_");
      char v17 = "E_NCP_RESET_CAUSE_HARD_FAULT";
      DWORD1(xmmword_1004B5FE8) = v14;
      break;
    case 3:
      std::string::assign(&v84, "stackoverflow_dump_");
      char v17 = "E_NCP_RESET_CAUSE_STACK_OVERFLOW";
      DWORD1(xmmword_1004B5FE8) = v14;
      break;
    default:
      std::string::assign(&v84, "unknown_dump_");
      char v17 = "E_NCP_RESET_CAUSE_OTHER";
      break;
  }
  std::string::assign(&__p, v17);
  *(void *)&xmmword_1004B5FF8 = v86;
  WORD4(xmmword_1004B5FF8) = WORD4(v86);
  LODWORD(xmmword_1004B5FE8) = v85;
  *((void *)&xmmword_1004B5FE8 + 1) = *((void *)&v85 + 1);
  HostInterpreter::save_awd_stability_counters((CFDateFormatterRef *)this);
  uint64_t FaultInfo = otPlatVendorGetVersion(*((void *)this + 28), (uint64_t)__s, 500, v18, v19, v20, v21, v22);
  std::string::assign(&v83, __s);
  if (FaultInfo)
  {
    char v23 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v23)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessGetRcpCrashDump();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    goto LABEL_2;
  }
  unint64_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v24)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = __s;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "RCP crashed: Vendor versiouint64_t n = %s", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v83.__r_.__value_.__l.__size_;
  }
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = &v83;
  }
  else {
    int v26 = (std::string *)v83.__r_.__value_.__r.__words[0];
  }
  if (size < 5) {
    goto LABEL_65;
  }
  BOOL v27 = (char *)v26 + size;
  int64_t v28 = size;
  BOOL v29 = v26;
  while (1)
  {
    __int16 v30 = (char *)memchr(v29, 68, v28 - 4);
    if (!v30) {
      goto LABEL_65;
    }
    if (*(_DWORD *)v30 == 1430406468 && v30[4] == 71) {
      break;
    }
    BOOL v29 = (std::string *)(v30 + 1);
    int64_t v28 = v27 - (char *)v29;
    if (v27 - (char *)v29 < 5) {
      goto LABEL_65;
    }
  }
  if (v30 == v27 || v30 - (char *)v26 == -1)
  {
LABEL_65:
    BOOL v15 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v15)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        __int16 v16 = "Crash dump support only present in DEBUG FW version";
LABEL_69:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v16, buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
LABEL_72:
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t FaultInfo = 0;
    goto LABEL_3;
  }
  int v32 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = v84.__r_.__value_.__l.__size_;
  }
  unint64_t v34 = size + v33;
  if (size + v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v34 > 0x16)
  {
    uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v36 = v34 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = (char *)operator new(v36 + 1);
    *(void *)&uint8_t buf[8] = size + v33;
    *(void *)uint64_t v88 = v37 | 0x8000000000000000;
    *(void *)std::string buf = v35;
  }
  else
  {
    *(void *)uint64_t v88 = 0;
    memset(buf, 0, sizeof(buf));
    uint64_t v35 = (char *)buf;
    v88[7] = size + v33;
  }
  if (v33)
  {
    if (v32 >= 0) {
      unint64_t v38 = &v84;
    }
    else {
      unint64_t v38 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    memmove(v35, v38, v33);
  }
  std::string::size_type v39 = &v35[v33];
  memmove(v39, v26, size);
  v39[size] = 0;
  if (v32 < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  v84.__r_.__value_.__r.__words[2] = *(void *)v88;
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
  if ((v88[7] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v80, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v84;
  }
  char new_crash_dump_file = create_new_crash_dump_file(__src, 250, (uint64_t *)&v80);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if ((new_crash_dump_file & 1) == 0)
  {
    BOOL v44 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v44)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        uint64_t FaultInfo = 1;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Failed to create crash dump file", buf, 2u);
        }
        goto LABEL_2;
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t FaultInfo = 1;
    goto LABEL_3;
  }
  size_t v41 = strlen(__src);
  if (v41 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v42 = v41;
  if (v41 >= 0x17)
  {
    uint64_t v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v45 = v41 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v43 = operator new(v45 + 1);
    *(void *)&uint8_t buf[8] = v42;
    *(void *)uint64_t v88 = v46 | 0x8000000000000000;
    *(void *)std::string buf = v43;
    goto LABEL_100;
  }
  v88[7] = v41;
  uint64_t v43 = buf;
  if (v41) {
LABEL_100:
  }
    memcpy(v43, __src, v42);
  *((unsigned char *)v43 + v42) = 0;
  int v47 = v88[7];
  if ((v88[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
  }
  else
  {
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    v79.__r_.__value_.__r.__words[2] = *(void *)v88;
  }
  uint64_t FaultInfo = HostInterpreter::SaveCrashLogs((uint64_t)this, (uint64_t)&v79);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (FaultInfo)
  {
    uint64_t v48 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v48)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessGetRcpCrashDump();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v10 = 0;
    int v11 = 0;
    if (v47 < 0) {
      goto LABEL_148;
    }
    goto LABEL_3;
  }
  int v49 = xmmword_1004B5FE8;
  std::to_string(&v74, xmmword_1004B5FF8);
  std::string::size_type v50 = std::string::insert(&v74, 0, "{ADDRESS=");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v52 = std::string::append(&v75, ";");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v54 = std::string::append(&v76, "LINE=");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v73, DWORD1(xmmword_1004B5FF8));
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v56 = &v73;
  }
  else {
    uint64_t v56 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v57 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v57 = v73.__r_.__value_.__l.__size_;
  }
  unsigned __int16 v58 = std::string::append(&v77, (const std::string::value_type *)v56, v57);
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  uint64_t v60 = std::string::append(&v78, "}");
  uint64_t v10 = (std::string::value_type *)v60->__r_.__value_.__r.__words[0];
  std::string::size_type v61 = v60->__r_.__value_.__l.__size_;
  v82[0] = v60->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v82 + 3) = *(_DWORD *)((char *)&v60->__r_.__value_.__r.__words[2] + 3);
  int v11 = SHIBYTE(v60->__r_.__value_.__r.__words[2]);
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_122:
      if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_137;
    }
  }
  else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_122;
  }
  operator delete(v73.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_123:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_138;
  }
LABEL_137:
  operator delete(v77.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
LABEL_139:
    operator delete(v75.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_140;
  }
LABEL_138:
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_139;
  }
LABEL_125:
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_126;
  }
LABEL_140:
  operator delete(v74.__r_.__value_.__l.__data_);
LABEL_126:
  if (v11 < 0)
  {
    std::string::__init_copy_ctor_external(&v70, v10, v61);
  }
  else
  {
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v70.__r_.__value_.__l.__size_ = v61;
    LODWORD(v70.__r_.__value_.__r.__words[2]) = v82[0];
    *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v82 + 3);
    *((unsigned char *)&v70.__r_.__value_.__s + 23) = v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = __p;
  }
  BOOL v72 = v49 == -559038737;
  analytics_send_event_lazy();
  if (v49 != -559038737) {
    AWDMetricsClient_TriggerAutoBugCapture();
  }
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t FaultInfo = otPlatVendorSetFaultInfo(*((void *)this + 28), v62, v63, v64, v65, v66, v67, v68);
  if (!FaultInfo)
  {
    xpc_object_t v69 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v69)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        LOWORD(v78.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "Reset the fault info", (uint8_t *)&v78, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_147:
      if ((v47 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      goto LABEL_148;
    }
  }
  else if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_147;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (v47 < 0) {
LABEL_148:
  }
    operator delete(*(void **)buf);
LABEL_3:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_5:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_14:
      operator delete(v83.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return FaultInfo;
      }
LABEL_15:
      operator delete(v84.__r_.__value_.__l.__data_);
      return FaultInfo;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v10);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
LABEL_6:
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
  return FaultInfo;
}

void sub_10011A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a23 < 0)
  {
    operator delete(a18);
    if (v74 < 0)
    {
LABEL_3:
      operator delete(__p);
      if (a62 < 0)
      {
LABEL_7:
        operator delete(a57);
        if ((v75 & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
LABEL_11:
      if ((v75 & 0x80000000) == 0)
      {
LABEL_8:
        if (a69 < 0) {
          goto LABEL_9;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(v73);
      if (a69 < 0)
      {
LABEL_9:
        operator delete(a64);
        if ((a72 & 0x80000000) == 0) {
          goto LABEL_15;
        }
LABEL_14:
        operator delete(a70);
LABEL_15:
        _Unwind_Resume(a1);
      }
LABEL_13:
      if ((a72 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else if (v74 < 0)
  {
    goto LABEL_3;
  }
  if (a62 < 0) {
    goto LABEL_7;
  }
  goto LABEL_11;
}

void HostInterpreter::ProcessInitialize(HostInterpreter *this, unsigned __int8 a2, char **a3, void *a4)
{
  memset(&v39, 0, sizeof(v39));
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessInitialize", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  RcpHostContext::clear_threadstart_metrics((RcpHostContext *)RcpHostContext::sRcpHostContext);
  if (FillmoreControllerGetTmac(v53))
  {
    uint64_t v6 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v6)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "tmac:MG Read success", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    int v27 = otPlatVendorSetAssignedHwMac(*((void *)this + 28), (uint64_t)v53, v7, v8, v9, v10, v11, v12);
    if (v27)
    {
      int64_t v28 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v28)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v27;
          BOOL v29 = "tmac: set in RCP2 failed ret=[%d]";
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, v29, buf, 8u);
          goto LABEL_55;
        }
        goto LABEL_55;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    *(void *)std::string __str = 0;
    int AssignedHwMac = otPlatVendorGetAssignedHwMac(*((void *)this + 28), (uint64_t)__str, v21, v22, v23, v24, v25, v26);
    if (AssignedHwMac)
    {
      int64_t v28 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v28)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = AssignedHwMac;
          BOOL v29 = "tmac:read from RCP2 fail ret=[%d]";
          goto LABEL_31;
        }
LABEL_55:
        uint64_t v52 = 0;
        if (otPlatVendorGetAssignedHwMac(*((void *)this + 28), (uint64_t)&v52, v14, v15, v16, v17, v18, v19))
        {
          int v32 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v32)
          {
            if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              HostInterpreter::ProcessInitialize();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            -[PowerEventHandler_Rcp init:]();
          }
        }
        snprintf(__str, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", v52, BYTE1(v52), BYTE2(v52), BYTE3(v52), BYTE4(v52), BYTE5(v52), BYTE6(v52), HIBYTE(v52));
        std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 456), __str);
        std::string::size_type v33 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v33)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            unint64_t v34 = (void *)(RcpHostContext::sRcpHostContext + 456);
            if (*(char *)(RcpHostContext::sRcpHostContext + 479) < 0) {
              unint64_t v34 = (void *)*v34;
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "vendor:assigned:hw:mac := %s", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        ExtendedAddress = (unsigned __int8 *)otLinkGetExtendedAddress(*((void *)this + 28));
        snprintf(__s, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", *ExtendedAddress, ExtendedAddress[1], ExtendedAddress[2], ExtendedAddress[3], ExtendedAddress[4], ExtendedAddress[5], ExtendedAddress[6], ExtendedAddress[7]);
        std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 712), __s);
        uint64_t v36 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v36)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            uint64_t v37 = (void *)(RcpHostContext::sRcpHostContext + 712);
            if (*(char *)(RcpHostContext::sRcpHostContext + 735) < 0) {
              uint64_t v37 = (void *)*v37;
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v37;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "mac Extended Address := %s", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        BYTE1(v41) = 20;
        strcpy(buf, "ca:reporting:enabled");
        long long __dst = buf;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, &__dst);
        operator new();
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
LABEL_54:
      -[PowerEventHandler_Rcp init:]();
      goto LABEL_55;
    }
    uint64_t v31 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v31)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67110912;
        *(_DWORD *)&uint8_t buf[4] = __str[0];
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = __str[1];
        *(_WORD *)&_DWORD buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = __str[2];
        *(_WORD *)&buf[20] = 1024;
        int v41 = __str[3];
        __int16 v42 = 1024;
        int v43 = __str[4];
        __int16 v44 = 1024;
        int v45 = __str[5];
        __int16 v46 = 1024;
        int v47 = __str[6];
        __int16 v48 = 1024;
        int v49 = __str[7];
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "tmac: read from RCP2=%x%x%x%x%x%x%x%x", buf, 0x32u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    if (*(void *)v53 == *(void *)__str)
    {
      uint64_t v13 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v13)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_55;
      }
      *(_WORD *)std::string buf = 0;
      uint64_t v20 = "tmac:Verification success";
    }
    else
    {
      uint64_t v13 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v13)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_55;
      }
      *(_WORD *)std::string buf = 0;
      uint64_t v20 = "tmac:Verification fail";
    }
  }
  else
  {
    uint64_t v13 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v13)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_55;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v20 = "tmac:MG Read failed";
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v20, buf, 2u);
  goto LABEL_55;
}

void sub_10011C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8))(a29);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  if (a31) {
    (*(void (**)(uint64_t))(*(void *)a31 + 8))(a31);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessJoin(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t **a4)
{
  memset(&v50, 0, sizeof(v50));
  ot::Settings::Init((ot::Settings *)(*((void *)this + 28) + 200));
  memset(v49, 0, 7);
  memset(v53, 0, sizeof(v53));
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  if ((*((unsigned char *)a4 + 25) & 1) == 0)
  {
LABEL_38:
    uint64_t v21 = 0;
    int v22 = 0;
LABEL_39:
    uint64_t v23 = 2;
    uint64_t v24 = 7;
    goto LABEL_40;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "NCP:Channel");
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v48);
  uint64_t v7 = v6[7];
  if (v7) {
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
  }
  else {
  uint64_t v9 = (const char *)(v8[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  uint64_t v11 = (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
  if (v9 != (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL) && strcmp(v9, (const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v48.__r_.__value_.__r.__words[0] = 0;
    std::bad_cast::bad_cast((std::bad_cast *)&v48);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  WORD5(v57) = *((_WORD *)v6[7] + 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    WORD4(v59) |= 0x100u;
    if (((_BYTE)a4[3] & 0x80) == 0) {
      goto LABEL_38;
    }
  }
  else
  {
    WORD4(v59) |= 0x100u;
    if (((_BYTE)a4[3] & 0x80) == 0) {
      goto LABEL_38;
    }
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__p, "Network:PANID");
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v12 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v48);
  uint64_t v13 = v12[7];
  if (v13)
  {
    uint64_t v14 = (const char *)(*(void *)((*(uint64_t (**)(uint64_t *))(*v13 + 16))(v13) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v14 == v11) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v14 == v11) {
      goto LABEL_16;
    }
  }
  if (strcmp(v14, v11))
  {
    v48.__r_.__value_.__r.__words[0] = 0;
    std::bad_cast::bad_cast((std::bad_cast *)&v48);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
LABEL_16:
  WORD4(v57) = *((_WORD *)v12[7] + 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    WORD4(v59) |= 0x80u;
    if (((_BYTE)a4[3] & 8) == 0) {
      goto LABEL_38;
    }
  }
  else
  {
    WORD4(v59) |= 0x80u;
    if (((_BYTE)a4[3] & 8) == 0) {
      goto LABEL_38;
    }
  }
  *((unsigned char *)&v48.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v48, "Network:Name");
  long long v51 = &v48;
  uint64_t v15 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v48.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
  boost::any_cast<std::string>((uint64_t)(v15 + 7), &__p);
  std::string v50 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  long long v55 = 0uLL;
  LOBYTE(v56) = 0;
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v50;
  }
  else {
    uint64_t v16 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  memcpy(&v55, v16, size);
  WORD4(v59) |= 8u;
  if (((_BYTE)a4[3] & 0x10) == 0) {
    goto LABEL_38;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "Network:XPANID");
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v18 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v48);
  unint64_t v19 = any_to_uint64((const boost::any *)(v18 + 7), 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "DatasetTest buf extpanid saved: %llx", (uint8_t *)&__p, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *(void *)((char *)&v56 + 1) = v19;
  WORD4(v59) |= 0x10u;
  if (((_BYTE)a4[3] & 4) == 0) {
    goto LABEL_38;
  }
  *((unsigned char *)&v48.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v48, "Network:Key");
  long long v51 = &v48;
  int v27 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v48.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
  any_to_data((const boost::any *)(v27 + 7), &__p);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string::size_type v28 = 2 * (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
  if (v28 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v28 >= 0x17)
  {
    uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v30 = v28 | 7;
    }
    uint64_t v31 = v30 + 1;
    BOOL v29 = operator new(v30 + 1);
    v48.__r_.__value_.__l.__size_ = v28;
    v48.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    goto LABEL_55;
  }
  *((unsigned char *)&v48.__r_.__value_.__s + 23) = 2 * (__p.__r_.__value_.__s.__data_[8] - __p.__r_.__value_.__s.__data_[0]);
  BOOL v29 = &v48;
  if (v28) {
LABEL_55:
  }
    bzero(v29, v28);
  *((unsigned char *)v29 + v28) = 0;
  std::string::reserve(&v48, (2 * (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0])) | 1);
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0]) {
    int v32 = 0;
  }
  else {
    int v32 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = &v48;
  }
  else {
    std::string::size_type v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v34 = 22;
  }
  else {
    unint64_t v34 = (v48.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  encode_data_into_string(v32, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0], (char *)v33, v34, 0);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v48;
  }
  else {
    uint64_t v35 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  uint64_t v36 = ot::Utils::CmdLineParser::ParseAsHexString((ot::Utils::CmdLineParser *)v35, (char *)&v54, (unsigned __int8 *)0x10);
  if (v36)
  {
    int v37 = 6;
  }
  else
  {
    int v37 = 0;
    WORD4(v59) |= 4u;
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v37)
  {
    uint64_t v21 = 0;
    if (!v36)
    {
      uint64_t v24 = 0;
      int v22 = 0;
      uint64_t v23 = 0;
      goto LABEL_40;
    }
    int v22 = 0;
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "Network:NodeType");
  long long v51 = &v48;
  unint64_t v38 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v48.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
  boost::any_cast<std::string>((uint64_t)(v38 + 7), &__p);
  std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
  uint64_t v21 = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  v49[0] = __p.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3);
  int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v22 < 0)
  {
    std::string::__init_copy_ctor_external(&v47, v21, v39);
  }
  else
  {
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v47.__r_.__value_.__l.__size_ = v39;
    LODWORD(v47.__r_.__value_.__r.__words[2]) = v49[0];
    *(_DWORD *)((char *)&v47.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v49 + 3);
    *((unsigned char *)&v47.__r_.__value_.__s + 23) = v22;
  }
  uint64_t v36 = HostInterpreter::DeviceModeConfig((uint64_t)this, (const std::string::value_type *)&v47);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v36) {
    goto LABEL_102;
  }
  uint64_t v36 = otDatasetSetActive(*((void *)this + 28), (uint64_t)v53);
  if (v36) {
    goto LABEL_102;
  }
  unint64_t v40 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v40)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "Dataset commit active, Done", (uint8_t *)&__p, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::setExtendedMACAddressInDataSetIfAvailableinDB(this);
  otIp6SetSlaacEnabled(*((void *)this + 28), 1);
  uint64_t v36 = otIp6SetEnabled(*((void *)this + 28), 1);
  if (v36) {
    goto LABEL_102;
  }
  int v41 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v41)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Ifconfig up, Done", (uint8_t *)&__p, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v36 = otThreadSetEnabled(*((void *)this + 28), 1);
  if (v36)
  {
LABEL_102:
    HIDWORD(v42) = v36 - 1;
    LODWORD(v42) = v36 - 1;
    uint64_t v24 = 1;
    uint64_t v23 = 1;
    switch((v42 >> 1))
    {
      case 0u:
        goto LABEL_40;
      case 2u:
        uint64_t v23 = 9;
        uint64_t v24 = 5;
        break;
      case 3u:
        goto LABEL_39;
      case 6u:
        uint64_t v23 = 4;
        uint64_t v24 = 13;
        break;
      default:
        uint64_t v23 = 1;
        uint64_t v24 = v36;
        break;
    }
    goto LABEL_40;
  }
  if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) == 6) {
    otThreadBecomeLeader(*((void *)this + 28), 0);
  }
  int v43 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v43)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessJoin";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "%s Thread start, Done", (uint8_t *)&__p, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::saveExtendedMACAddressIfNotAvailableinDB(this);
  BOOL isThreadSessionJoinEnabled = HostInterpreter::isThreadSessionJoinEnabled(v44);
  if (!isThreadSessionJoinEnabled)
  {
    __int16 v46 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v46)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessJoin";
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "%s Thread Session Join THREAD_SESSION_ON", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    HostInterpreter::persistThreadSessionJoin(this, 1);
  }
  HostInterpreter::transactionEnabled((HostInterpreter *)isThreadSessionJoinEnabled, 1);
  uint64_t v24 = 0;
  uint64_t v23 = 0;
LABEL_40:
  uint64_t v25 = a4[4];
  if (!v25)
  {
    std::runtime_error::runtime_error((std::runtime_error *)&__p, "call to empty boost::function");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)&__p);
  }
  (*(void (**)(unsigned char *, uint64_t))(((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL) + 8))((unsigned char *)a4 + 40, v23);
  if (v22 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  return v24;
}

void sub_10011D004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::bad_cast a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32,int a33,__int16 a34,char a35,char a36)
{
  if (v37 < 0) {
    operator delete(v36);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessLeave(HostInterpreter *this, unsigned __int8 a2, char **a3, char *a4)
{
  HostInterpreter::transactionEnabled(this, 0);
  HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer((dispatch_source_t *)this);
  if (HostInterpreter::isThreadSessionJoinEnabled(v6))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v8 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LODWORD(v36) = 136315138;
        *(void *)((char *)&v36 + 4) = "ProcessLeave";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Thread Session Join THREAD_SESSION_OFF", (uint8_t *)&v36, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    saveStringValue("threadSessionJoin", "OFF");
    uint64_t v9 = HostInterpreter::detachIfWedConnectionInProgress(this);
    if (v9) {
      goto LABEL_23;
    }
  }
  HostInterpreter::clearRcpSrpAnycastServiceCovergenceTimer((dispatch_source_t *)this);
  HostInterpreter::clearSrpAdvertisedWithoutPrefixTimer((dispatch_source_t *)this);
  HostInterpreter::clearRcpSrpUnicastServiceCovergenceTimer((dispatch_source_t *)this);
  HostInterpreter::clearSrpPrefixCovergenceTimer((dispatch_source_t *)this);
  HostInterpreter::clearChildRoleDetectionTimer((dispatch_source_t *)this);
  HostInterpreter::clearRcpSrpServiceABCTimer((dispatch_source_t *)this);
  otIp6SetSlaacEnabled(*((void *)this + 28), 0);
  uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      LODWORD(v36) = 136315138;
      *(void *)((char *)&v36 + 4) = "ProcessLeave";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s: SLAAC Disabled, Done", (uint8_t *)&v36, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v9 = otThreadSetEnabled(*((void *)this + 28), 0);
  if (v9) {
    goto LABEL_23;
  }
  uint64_t v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v11)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LODWORD(v36) = 136315138;
      *(void *)((char *)&v36 + 4) = "ProcessLeave";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s: Thread stop, Done", (uint8_t *)&v36, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v9 = otIp6SetEnabled(*((void *)this + 28), 0);
  if (v9) {
    goto LABEL_23;
  }
  uint64_t v31 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v31)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      LODWORD(v36) = 136315138;
      *(void *)((char *)&v36 + 4) = "ProcessLeave";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s: Ifconfig down, Done", (uint8_t *)&v36, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (otDatasetGetActive(*((void *)this + 28), (uint64_t)&v36) != 23)
  {
    int v32 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v32)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__vftable) = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "OT Active Dataset present", (uint8_t *)&buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v9 = otDatasetSetActive(*((void *)this + 28), (uint64_t)&v36);
    if (v9) {
      goto LABEL_23;
    }
    unint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v34)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__vftable) = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Deleted OT Active Dataset", (uint8_t *)&buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  if (otDatasetGetPending(*((void *)this + 28), (uint64_t)&v36) == 23) {
    goto LABEL_57;
  }
  std::string::size_type v33 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v33)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__vftable) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "OT pending Dataset present", (uint8_t *)&buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v9 = otDatasetSetPending(*((void *)this + 28), (uint64_t)&v36);
  if (!v9)
  {
    uint64_t v35 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v35)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__vftable) = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Deleted OT pending Dataset", (uint8_t *)&buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
LABEL_57:
    otLinkRegenerateExAddr(*((void *)this + 28));
    otThreadResetRloc16(*((void *)this + 28));
    otNetDataReset(*((void *)this + 28));
    HostInterpreter::remove_all_address_prefix_route_entries(this, 1);
    uint64_t v9 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)a4;
    if (!*(void *)a4) {
      goto LABEL_43;
    }
    goto LABEL_26;
  }
LABEL_23:
  HostInterpreter::remove_all_address_prefix_route_entries(this, 1);
  HIDWORD(v13) = v9 - 1;
  LODWORD(v13) = v9 - 1;
  unsigned int v12 = v13 >> 1;
  if (v12 > 6 || ((0x4Du >> v12) & 1) == 0)
  {
    uint64_t v14 = 1;
    uint64_t v15 = *(void *)a4;
    if (*(void *)a4) {
      goto LABEL_26;
    }
LABEL_43:
    BOOL v29 = std::runtime_error::runtime_error(&buf, "call to empty boost::function");
    buf.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(v29);
  }
  uint64_t v28 = 4 * (int)v12;
  uint64_t v9 = *(unsigned int *)((char *)&unk_1003F6A00 + v28);
  uint64_t v14 = *(unsigned int *)((char *)&unk_1003F6A1C + v28);
  uint64_t v15 = *(void *)a4;
  if (!*(void *)a4) {
    goto LABEL_43;
  }
LABEL_26:
  (*(void (**)(char *, uint64_t))((v15 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, v14);
  uint64_t v16 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v16)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__vftable) = 136315138;
      *(std::runtime_error_vtbl **)((char *)&buf.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessLeave";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s: Closing settings fd", (uint8_t *)&buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  otPlatSettingsDeinit();
  usleep(0x186A0u);
  BOOL v24 = otPlatVendorResetRCP(*((void *)this + 28), v17, v18, v19, v20, v21, v22, v23) == 0;
  uint64_t v25 = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v26 = v25;
  if (!v24)
  {
    if (v25)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__vftable) = 0;
        int v27 = "Failed to Reset RCP2 to sleep state";
LABEL_41:
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, v27, (uint8_t *)&buf, 2u);
        return v9;
      }
      return v9;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v9;
    }
LABEL_47:
    -[PowerEventHandler_Rcp init:]();
    return v9;
  }
  if (!v25)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v9;
    }
    goto LABEL_47;
  }
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__vftable) = 0;
    int v27 = "Reset RCP2 to sleep state";
    goto LABEL_41;
  }
  return v9;
}

void sub_10011D924(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessNetScan(HostInterpreter *this, unsigned __int8 a2, char **a3, uint64_t **a4)
{
  char v42 = 16;
  strcpy(__s1, "Scan:ChannelMask");
  uint64_t v6 = a4[1];
  if (v6)
  {
    uint64_t v7 = a4[1];
    do
    {
      int v8 = *((char *)v7 + 55);
      if (v8 >= 0) {
        unint64_t v9 = *((unsigned __int8 *)v7 + 55);
      }
      else {
        unint64_t v9 = v7[5];
      }
      if (v8 >= 0) {
        uint64_t v10 = v7 + 4;
      }
      else {
        uint64_t v10 = (const void *)v7[4];
      }
      if (v9 >= 0x10) {
        size_t v11 = 16;
      }
      else {
        size_t v11 = v9;
      }
      int v12 = memcmp(__s1, v10, v11);
      BOOL v13 = v12 < 0;
      if (!v12) {
        BOOL v13 = v9 > 0x10;
      }
      if (!v13)
      {
        int v14 = memcmp(v10, __s1, v11);
        BOOL v15 = v9 < 0x10;
        if (v14) {
          BOOL v15 = v14 < 0;
        }
        if (!v15)
        {
          char v42 = 16;
          strcpy(__s1, "Scan:ChannelMask");
          v40.__vftable = (std::bad_cast_vtbl *)__s1;
          uint64_t v17 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v40);
          uint64_t v18 = v17[7];
          if (v18) {
            uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t *))(*v18 + 16))(v18);
          }
          else {
          uint64_t v20 = (const char *)(v19[1] & 0x7FFFFFFFFFFFFFFFLL);
          }
          if (v20 != v21 && strcmp(v20, v21))
          {
            v40.__vftable = 0;
            std::bad_cast::bad_cast(&v40);
            v40.__vftable = (std::bad_cast_vtbl *)off_100495C28;
            boost::throw_exception<boost::bad_any_cast>();
          }
          unsigned int v16 = *((_DWORD *)v17[7] + 2);
          if (v42 < 0) {
            operator delete(*(void **)__s1);
          }
          uint64_t v6 = a4[1];
          goto LABEL_29;
        }
        ++v7;
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  unsigned int v16 = 0;
LABEL_29:
  char v42 = 11;
  strcpy(__s1, "Scan:Period");
  if (!v6)
  {
LABEL_48:
    __int16 v30 = 0;
    goto LABEL_49;
  }
  while (1)
  {
    int v22 = *((char *)v6 + 55);
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)v6 + 55);
    }
    else {
      unint64_t v23 = v6[5];
    }
    if (v22 >= 0) {
      BOOL v24 = v6 + 4;
    }
    else {
      BOOL v24 = (const void *)v6[4];
    }
    if (v23 >= 0xB) {
      size_t v25 = 11;
    }
    else {
      size_t v25 = v23;
    }
    int v26 = memcmp(__s1, v24, v25);
    BOOL v27 = v26 < 0;
    if (!v26) {
      BOOL v27 = v23 > 0xB;
    }
    if (v27) {
      goto LABEL_31;
    }
    int v28 = memcmp(v24, __s1, v25);
    BOOL v29 = v23 < 0xB;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (!v29) {
      break;
    }
    ++v6;
LABEL_31:
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_48;
    }
  }
  char v42 = 11;
  v40.__vftable = (std::bad_cast_vtbl *)__s1;
  strcpy(__s1, "Scan:Period");
  uint64_t v35 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)__s1, (uint64_t)&std::piecewise_construct, &v40);
  long long v36 = v35[7];
  if (v36) {
    long long v37 = (void *)(*(uint64_t (**)(uint64_t *))(*v36 + 16))(v36);
  }
  else {
  long long v38 = (const char *)(v37[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v38 != v39 && strcmp(v38, v39))
  {
    v40.__vftable = 0;
    std::bad_cast::bad_cast(&v40);
    v40.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  __int16 v30 = *((_WORD *)v35[7] + 4);
  if (v42 < 0) {
    operator delete(*(void **)__s1);
  }
LABEL_49:
  uint64_t active = otLinkActiveScan(*((void *)this + 28), v16, v30, (uint64_t)HostInterpreter::HandleActiveScanResultFromBeacon, (uint64_t)this);
  if (active)
  {
    int v32 = a4[3];
    if (!v32)
    {
      std::runtime_error::runtime_error((std::runtime_error *)__s1, "call to empty boost::function");
      *(void *)__s1 = off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)__s1);
    }
    (*(void (**)(char *, uint64_t))(((unint64_t)v32 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 32, active);
    TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
  }
  else
  {
    mNetScanCmdApiData = (uint64_t)a4;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__s1 = 67109120;
      *(_DWORD *)&__s1[4] = active;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessNetScan error = %d", (uint8_t *)__s1, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return active;
}

void sub_10011DE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void HostInterpreter::ProcessPeekCmd(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned int *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v6 = logging_obg;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::ProcessPeekCmd();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  unsigned __int16 __sz = 0;
  unsigned int v11 = *((unsigned __int16 *)a4 + 2);
  if (v11 >= 0x400)
  {
    int v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v12)
    {
      if (syslog_is_the_mask_enabled(3))
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessPeekCmd();
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    operator new();
  }
  otPlatPeek((uint64_t)__src, (uint64_t)&__sz, *a4, v11, v7, v8, v9, v10);
  if (__sz)
  {
    for (unint64_t i = 0; i < __sz; ++i)
    {
      BOOL v15 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v15)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = __src[i];
          int __sz_2 = 67109376;
          *(_DWORD *)__sz_6 = i;
          *(_WORD *)&__sz_6[4] = 1024;
          *(_DWORD *)&__sz_6[6] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Byte[%d]=%x", (uint8_t *)&__sz_2, 0xEu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int __sz_2 = 136315394;
        *(void *)__sz_6 = "com.apple.wpantund.ncp";
        *(_WORD *)&__sz_6[8] = 2080;
        uint64_t v21 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", (uint8_t *)&__sz_2, 0x16u);
      }
      size_t v14 = __sz;
    }
    if (__sz)
    {
      uint64_t v17 = operator new(__sz);
      memcpy(v17, __src, v14);
    }
  }
  operator new();
}

void sub_10011E348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::runtime_error a17)
{
  std::runtime_error::~runtime_error(&a17);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  if (v17)
  {
    operator delete(v17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessPrefixAdd(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned __int8 *a4)
{
  v41[0] = 0;
  v41[1] = 0;
  uint64_t v42 = 0;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v7 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *((_DWORD *)a4 + 5);
      LODWORD(buf.__vftable) = 67109120;
      HIDWORD(buf.__vftable) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "OnMeshPrefixes: priority %d", (uint8_t *)&buf, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  v40[0] = 0;
  v40[1] = 0;
  long long v39 = v40;
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)&v39, *((int **)a4 + 4), (int *)a4 + 10);
  __int16 v9 = OnMeshPrefixEntry::encode_flag_set((uint64_t)&v39, *((_DWORD *)a4 + 5));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v39, v40[0]);
  IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v37, (const in6_addr *)a4, a4[16]);
  unsigned __int8 v10 = a4[24];
  unsigned int v11 = v9;
  LODWORD(v35) = 2;
  WORD2(v35) = v9;
  BYTE6(v35) = v10;
  LOWORD(v36) = 0;
  IPv6Prefix::to_string(&v37, &buf);
  if (v46 >= 0) {
    p_std::runtime_error buf = (ot *)&buf;
  }
  else {
    p_std::runtime_error buf = (ot *)buf.__vftable;
  }
  uint64_t v13 = ot::Utils::CmdLineParser::ParseAsIp6Prefix(p_buf, (uint64_t)v41);
  uint64_t v14 = v13;
  if (v46 < 0)
  {
    operator delete(buf.__vftable);
    if (v14)
    {
LABEL_12:
      BOOL v15 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v15)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessPrefixAdd();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      goto LABEL_24;
    }
  }
  else if (v13)
  {
    goto LABEL_12;
  }
  prefix_entry = (uint64_t **)HostInterpreter::find_prefix_entry((uint64_t)this, (uint64_t)&v37, (uint64_t)&v35);
  if ((uint64_t **)((char *)this + 64) == prefix_entry)
  {
    BOOL v24 = (char *)operator new(0x40uLL);
    *((_DWORD *)v24 + 11) = v38;
    *(in6_addr *)(v24 + 28) = v37;
    *((void *)v24 + 6) = v35;
    *((_DWORD *)v24 + 14) = v36;
    size_t v25 = *prefix_entry;
    int v26 = prefix_entry;
    BOOL v27 = prefix_entry;
    if (*prefix_entry)
    {
      do
      {
        while (1)
        {
          int v26 = (uint64_t **)v25;
          if (!IPv6Prefix::operator<((uint64_t)(v24 + 28), (uint64_t)v25 + 28)) {
            break;
          }
          size_t v25 = *v26;
          BOOL v27 = v26;
          if (!*v26) {
            goto LABEL_41;
          }
        }
        size_t v25 = v26[1];
      }
      while (v25);
      BOOL v27 = v26 + 1;
    }
LABEL_41:
    *(void *)BOOL v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    const char *v27 = (uint64_t *)v24;
    uint64_t v28 = **((void **)this + 7);
    if (v28)
    {
      *((void *)this + 7) = v28;
      BOOL v24 = (char *)*v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*prefix_entry, (uint64_t *)v24);
    ++*((void *)this + 9);
    BOOL v29 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v29)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        OnMeshPrefixEntry::get_description((OnMeshPrefixEntry *)&v35, &v37, 0, &buf);
        __int16 v30 = v46 >= 0 ? &buf : (std::runtime_error *)buf.__vftable;
        *(_DWORD *)long long v43 = 136315138;
        __int16 v44 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Adding %s", v43, 0xCu);
        if (v46 < 0) {
          operator delete(buf.__vftable);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    int v31 = (v11 >> 6) & 1;
    if ((~v11 & 0xC0) == 0) {
      int v31 = 3;
    }
    unsigned int v32 = *(_WORD *)((unsigned char *)&v42 + 1) & 0xF900 | v31 | (4 * (__rbit32(v11) >> 26));
    if ((v11 & 0x80000000) != 0) {
      LOWORD(v32) = v32 | 0x200;
    }
    *(_WORD *)((char *)&v42 + 1) = (v11 >> 4) & 0x400 | (a4[24] << 8) | v32 & 0xFAFF;
    uint64_t v14 = otBorderRouterAddOnMeshPrefix(*((void *)this + 28), (uint64_t)v41);
    if (v14)
    {
      std::string::size_type v33 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v33)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessPrefixAdd();
        }
        goto LABEL_24;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v14 = otBorderRouterRegister(*((void *)this + 28));
      if (!v14)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *((void *)a4 + 7);
        if (v21) {
          goto LABEL_27;
        }
        goto LABEL_39;
      }
      unint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v34)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessPrefixAdd();
        }
LABEL_24:
        HIDWORD(v19) = v14 - 1;
        LODWORD(v19) = v14 - 1;
        unsigned int v18 = v19 >> 1;
        if (v18 <= 6 && ((0x4Du >> v18) & 1) != 0)
        {
          uint64_t v23 = 4 * (int)v18;
          uint64_t v14 = *(unsigned int *)((char *)&unk_1003F6A00 + v23);
          uint64_t v20 = *(unsigned int *)((char *)&unk_1003F6A1C + v23);
          uint64_t v21 = *((void *)a4 + 7);
          if (v21) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v20 = 1;
          uint64_t v21 = *((void *)a4 + 7);
          if (v21) {
            goto LABEL_27;
          }
        }
LABEL_39:
        std::runtime_error::runtime_error(&buf, "call to empty boost::function");
        buf.__vftable = (std::runtime_error_vtbl *)off_100495450;
        boost::throw_exception<boost::bad_function_call>(&buf);
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
    }
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_24;
  }
  uint64_t v17 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v17)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::ProcessPrefixAdd();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v14 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = *((void *)a4 + 7);
  if (!v21) {
    goto LABEL_39;
  }
LABEL_27:
  (*(void (**)(char *, uint64_t))((v21 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 64, v20);
  return v14;
}

void sub_10011EA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::runtime_error a21)
{
}

void sub_10011EA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessPrefixRemove(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned __int8 *a4)
{
  memset(v37, 0, sizeof(v37));
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v35 = v36;
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)&v35, *((int **)a4 + 4), (int *)a4 + 10);
  __int16 v6 = OnMeshPrefixEntry::encode_flag_set((uint64_t)&v35, *((_DWORD *)a4 + 5));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v35, v36[0]);
  IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v34, (const in6_addr *)a4, a4[16]);
  unsigned __int8 v7 = a4[24];
  int v30 = 2;
  __int16 v31 = v6;
  unsigned __int8 v32 = v7;
  __int16 v33 = 0;
  prefix_entry = HostInterpreter::find_prefix_entry((uint64_t)this, (uint64_t)&v34, (uint64_t)&v30);
  if ((uint64_t *)((char *)this + 64) == prefix_entry)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)a4 + 7);
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        OnMeshPrefixEntry::get_description((OnMeshPrefixEntry *)&v30, &v34, 0, &__p);
        unsigned __int8 v10 = v29 >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
        *(_DWORD *)std::runtime_error buf = 136315138;
        long long v39 = v10;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Removing %s", buf, 0xCu);
        if (v29 < 0) {
          operator delete(__p.__vftable);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v14 = (uint64_t *)prefix_entry[1];
    if (v14)
    {
      do
      {
        BOOL v15 = v14;
        uint64_t v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      int v16 = prefix_entry;
      do
      {
        BOOL v15 = (uint64_t *)v16[2];
        BOOL v17 = *v15 == (void)v16;
        int v16 = v15;
      }
      while (!v17);
    }
    if (*((uint64_t **)this + 7) == prefix_entry) {
      *((void *)this + 7) = v15;
    }
    unsigned int v18 = (uint64_t *)*((void *)this + 8);
    --*((void *)this + 9);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v18, prefix_entry);
    operator delete(prefix_entry);
    IPv6Prefix::to_string(&v34, &__p);
    if (v29 >= 0) {
      p_p = (ot *)&__p;
    }
    else {
      p_p = (ot *)__p.__vftable;
    }
    uint64_t v20 = ot::Utils::CmdLineParser::ParseAsIp6Prefix(p_p, (uint64_t)v37);
    uint64_t v11 = v20;
    if (v29 < 0)
    {
      operator delete(__p.__vftable);
      if (v11) {
        goto LABEL_27;
      }
    }
    else if (v20)
    {
LABEL_27:
      uint64_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessPrefixAdd();
        }
        goto LABEL_50;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
LABEL_49:
      -[PowerEventHandler_Rcp init:]();
      goto LABEL_50;
    }
    uint64_t v11 = otBorderRouterRemoveOnMeshPrefix(*((void *)this + 28), (uint64_t)v37);
    if (v11)
    {
      int v22 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v22)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessPrefixRemove();
      }
LABEL_50:
      HIDWORD(v25) = v11 - 1;
      LODWORD(v25) = v11 - 1;
      unsigned int v24 = v25 >> 1;
      if (v24 <= 6 && ((0x4Du >> v24) & 1) != 0)
      {
        uint64_t v27 = 4 * (int)v24;
        uint64_t v11 = *(unsigned int *)((char *)&unk_1003F6A00 + v27);
        uint64_t v12 = *(unsigned int *)((char *)&unk_1003F6A1C + v27);
        uint64_t v13 = *((void *)a4 + 7);
        if (v13) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v12 = 1;
        uint64_t v13 = *((void *)a4 + 7);
        if (v13) {
          goto LABEL_53;
        }
      }
LABEL_11:
      std::runtime_error::runtime_error(&__p, "call to empty boost::function");
      __p.__vftable = (std::runtime_error_vtbl *)off_100495450;
      boost::throw_exception<boost::bad_function_call>(&__p);
    }
    uint64_t v11 = otBorderRouterRegister(*((void *)this + 28));
    if (v11)
    {
      uint64_t v23 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v23)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessPrefixRemove();
      }
      goto LABEL_50;
    }
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)a4 + 7);
    if (!v13) {
      goto LABEL_11;
    }
  }
LABEL_53:
  (*(void (**)(char *, uint64_t))((v13 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 64, v12);
  return v11;
}

void sub_10011EF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

void sub_10011EF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessPropertyGet(HostInterpreter *this, uint64_t a2, char **a3, void *a4)
{
  uint64_t v4 = __chkstk_darwin(this, a2);
  std::string::size_type v6 = v5;
  uint64_t v7 = v4;
  if (*(char *)(v5 + 23) < 0)
  {
    uint64_t v67 = *(const char **)v5;
    if (strcmp(*(const char **)v5, "NCP:Channel"))
    {
      if (strcmp(v67, "nm:trigger:devicedata:interval"))
      {
        if (strcmp(v67, "NCP:ChannelMask"))
        {
          if (strcmp(v67, "NCP:TXPower"))
          {
            if (strcmp(v67, "Network:NodeType"))
            {
              if (strcmp(v67, "Network:Role"))
              {
                if (strcmp(v67, "Network:LastRole"))
                {
                  if (strcmp(v67, "Network:PartitionId"))
                  {
                    if (strcmp(v67, "Thread:RLOC16"))
                    {
                      if (strcmp(v67, "isPrimaryResident"))
                      {
                        if (strcmp(v67, "wasPrimaryResident"))
                        {
                          if (strcmp(v67, "Network:PSKc"))
                          {
                            if (strcmp(v67, "NCP:ExtendedAddress"))
                            {
                              if (strcmp(v67, "Thread:NeighborMeshLocalAddress"))
                              {
                                if (strcmp(v67, "Thread:EmacId"))
                                {
                                  if (strcmp(v67, "NCP:WedExtendedAddress"))
                                  {
                                    if (strcmp(v67, "NCP:WedMleId"))
                                    {
                                      if (strcmp(v67, "wasDeviceEverAChildInCurrentNetwork"))
                                      {
                                        if (strcmp(v67, "Config:TUN:InterfaceName"))
                                        {
                                          if (strcmp(v67, "IPv6:Routes"))
                                          {
                                            if (strcmp(v67, "thread_version"))
                                            {
                                              if (strcmp(v67, "cametrics_triggerbased_stability_data"))
                                              {
                                                if (strcmp(v67, "cametrics_periodic_stability_data"))
                                                {
                                                  if (strcmp(v67, "primary_resident_data"))
                                                  {
                                                    if (strcmp(v67, "numOnMeshPrefixes"))
                                                    {
                                                      if (strcmp(v67, "numRouters"))
                                                      {
                                                        if (strcmp(v67, "numOffMeshRoutes"))
                                                        {
                                                          if (strcmp(v67, "Thread:OnMeshPrefixes"))
                                                          {
                                                            if (strcmp(v67, "Thread:OffMeshRoutes"))
                                                            {
                                                              if (strcmp(v67, "nm:networkdata"))
                                                              {
                                                                if (strcmp(v67, "Thread:Services"))
                                                                {
                                                                  if (strcmp(v67, "NCP:State"))
                                                                  {
                                                                    if (strcmp(v67, "Network:Name"))
                                                                    {
                                                                      if (strcmp(v67, "Network:XPANID"))
                                                                      {
                                                                        if (strcmp(v67, "Network:PANID"))
                                                                        {
                                                                          if (strcmp(v67, "NCP:HardwareSerialNumber"))
                                                                          {
                                                                            if (strcmp(v67, "vendor:assigned:hw:mac"))
                                                                            {
                                                                              if (strcmp(v67, "NCP:HardwareAddress"))
                                                                              {
                                                                                if (strcmp(v67, "IPv6:AllAddresses"))
                                                                                {
                                                                                  if (strcmp(v67, "Thread:Leader:RouterID"))
                                                                                  {
                                                                                    if (strcmp(v67, "Thread:Leader:ExtendedAddress"))
                                                                                    {
                                                                                      if (strcmp(v67, "ChannelUtilizationMonitor:State"))
                                                                                      {
                                                                                        if (strcmp(v67, "Network:Key"))
                                                                                        {
                                                                                          if (strcmp(v67, "Network:KeyIndex"))
                                                                                          {
                                                                                            if (strcmp(v67, "Thread:ActiveDataset:Bytes"))
                                                                                            {
                                                                                              if (strcmp(v67, "vendor:assert"))
                                                                                              {
                                                                                                if (strcmp(v67, "vendor:hard:fault"))
                                                                                                {
                                                                                                  if (strcmp(v67, "vendor:stack:overflow"))
                                                                                                  {
                                                                                                    if (strcmp(v67, "Leader:Reelect:Counters"))
                                                                                                    {
                                                                                                      if (strcmp(v67, "vendor:neighbor:count:histogram") && strcmp(v67, "vendor:neighbor:count:histogram:AsValMap"))
                                                                                                      {
                                                                                                        if (strcmp(v67, "vendor:bbr:counters") && strcmp(v67, "vendor:bbr:counters:AsValMap"))
                                                                                                        {
                                                                                                          if (strcmp(v67, "vendor:linkloss:counters") && strcmp(v67, "vendor:linkloss:counters:AsValMap"))
                                                                                                          {
                                                                                                            if (strcmp(v67, "NCP:Counter:Thread:Mle") && strcmp(v67, "NCP:Counter:Thread:Mle:AsValMap"))
                                                                                                            {
                                                                                                              if (strcmp(v67, "NCP:Counter:Thread:Neighbor:TriggerBased"))
                                                                                                              {
                                                                                                                if (strcmp(v67, "NCP:Counter:AllIPv6") && strcmp(v67, "NCP:Counter:AllIPv6:AsValMap"))
                                                                                                                {
                                                                                                                  if (strcmp(v67, "NCP:Counter:AllMac") && strcmp(v67, "NCP:Counter:AllMac:AsValMap"))
                                                                                                                  {
                                                                                                                    if (strcmp(v67, "vendor:radio:stats") && strcmp(v67, "vendor:radio:stats:asvalmap"))
                                                                                                                    {
                                                                                                                      if (strcmp(v67, "vendor:mle:adv:tx:num"))
                                                                                                                      {
                                                                                                                        if (strcmp(v67, "vendor:min:mac:interframedelay"))
                                                                                                                        {
                                                                                                                          if (strcmp(v67, "vendor:csl:tx:schedframe:reqahead:timeinus"))
                                                                                                                          {
                                                                                                                            if (strcmp(v67, "vendor:radio:counters") && strcmp(v67, "vendor:radio:counters:asvalmap"))
                                                                                                                            {
                                                                                                                              if (strcmp(v67, "vendor:joiner:RSSIHistogram") && strcmp(v67, "vendor:joiner:RSSIHistogram:AsValMap"))
                                                                                                                              {
                                                                                                                                if (strcmp(v67, "Daemon:Version"))
                                                                                                                                {
                                                                                                                                  if (strcmp(v67, "DaemonMorty:Version"))
                                                                                                                                  {
                                                                                                                                    if (strcmp(v67, "vendor:version"))
                                                                                                                                    {
                                                                                                                                      if (strcmp(v67, "vendor:last:host:wake:reason"))
                                                                                                                                      {
                                                                                                                                        if (strcmp(v67, "vendor:deepsleep:region:loglevels"))
                                                                                                                                        {
                                                                                                                                          if (strcmp(v67, "vendor:deepsleep:loglevel"))
                                                                                                                                          {
                                                                                                                                            if (strcmp(v67, "vendor:deepsleep:filter:list"))
                                                                                                                                            {
                                                                                                                                              if (strcmp(v67, "vendor:MAC:packet:SizeHistogram") && strcmp(v67, "vendor:MAC:packet:SizeHistogram:AsValMap"))
                                                                                                                                              {
                                                                                                                                                if (strcmp(v67, "vendor:MAC:packet:ErrorHistogram") && strcmp(v67, "vendor:MAC:packet:ErrorHistogram:AsValMap"))
                                                                                                                                                {
                                                                                                                                                  if (strcmp(v67, "vendor:MAC:packet:LQIHistogram") && strcmp(v67, "vendor:MAC:packet:LQIHistogram:AsValMap"))
                                                                                                                                                  {
                                                                                                                                                    if (strcmp(v67, "vendor:MAC:packet:RSSIHistogram") && strcmp(v67, "vendor:MAC:packet:RSSIHistogram:AsValMap"))
                                                                                                                                                    {
                                                                                                                                                      if (strcmp(v67, "NCP:MacRetryHistogram") && strcmp(v67, "NCP:MacRetryHistogram:AsValMap"))
                                                                                                                                                      {
                                                                                                                                                        if (strcmp(v67, "vendor:openthread:radio:counters") && strcmp(v67, "vendor:openthread:radio:counters:AsValMap"))
                                                                                                                                                        {
                                                                                                                                                          if (strcmp(v67, "IPv6:MeshLocalPrefix"))
                                                                                                                                                          {
                                                                                                                                                            if (strcmp(v67, "IPv6:MeshLocalAddress"))
                                                                                                                                                            {
                                                                                                                                                              if (strcmp(v67, "vendor:ncp:state:dump"))
                                                                                                                                                              {
                                                                                                                                                                if (strcmp(v67, "Thread:RouterTable"))
                                                                                                                                                                {
                                                                                                                                                                  if (strcmp(v67, "Thread:EidCache"))
                                                                                                                                                                  {
                                                                                                                                                                    if (strcmp(v67, "Thread:MessageBufferStats"))
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t v52 = (HostInterpreter *)strcmp(v67, "is_threadsession_on");
                                                                                                                                                                      if (v52)
                                                                                                                                                                      {
                                                                                                                                                                        if (strcmp(v67, "vendor:power"))
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t v59 = strcmp(v67, "vendor:power:table");
                                                                                                                                                                          if (v59)
                                                                                                                                                                          {
                                                                                                                                                                            if (strcmp(v67, "vendor:coex:radioload"))
                                                                                                                                                                            {
                                                                                                                                                                              if (strcmp(v67, "is_bt_audioCall_on"))
                                                                                                                                                                              {
                                                                                                                                                                                if (strcmp(v67, "vendor:coex:rcp2:counters"))
                                                                                                                                                                                {
                                                                                                                                                                                  if (strcmp(v67, "Daemon:VirtualInterface:ReadBufferSize"))
                                                                                                                                                                                  {
                                                                                                                                                                                    if (strcmp(v67, "vendor:power:limit:table"))
                                                                                                                                                                                    {
                                                                                                                                                                                      if (strcmp(v67, "vendor:power:limit:table:active:id"))
                                                                                                                                                                                      {
                                                                                                                                                                                        if (strcmp(v67, "vendor:fem:enabled"))
                                                                                                                                                                                        {
                                                                                                                                                                                          if (strcmp(v67, "NCP:PcapEnabled"))
                                                                                                                                                                                          {
                                                                                                                                                                                            if (strcmp(v67, "Daemon:PromiscuousPcap"))
                                                                                                                                                                                            {
                                                                                                                                                                                              if (strcmp(v67, "vendor:ifs:ackdata"))
                                                                                                                                                                                              {
                                                                                                                                                                                                if (strcmp(v67, "ca:reporting:enabled"))
                                                                                                                                                                                                {
                                                                                                                                                                                                  if (strcmp(v67, "streamRawRespTimeHist"))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    if (strcmp(v67, "coex:rcp2:coex:counters:asvalmap"))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      if (strcmp(v67, "coex:rcp2:btwifi:load"))
                                                                                                                                                                                                      {
                                                                                                                                                                                                        if (strcmp(v67, "Thread:Health:Metrics"))
                                                                                                                                                                                                        {
                                                                                                                                                                                                          if (strcmp(v67, "ThreadStartMetrics"))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            if (!strcmp(v67, "NetdataFull:NoUnicastService"))
                                                                                                                                                                                                            {
LABEL_118:
                                                                                                                                                                                                              logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                              if (logging_obg)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                xpc_object_t v69 = logging_obg;
                                                                                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  int v70 = *(unsigned __int8 *)(v6 + 56);
                                                                                                                                                                                                                  std::string::size_type v71 = v6;
                                                                                                                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                                    std::string::size_type v71 = *(void *)v6;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109378;
                                                                                                                                                                                                                  HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v70;
                                                                                                                                                                                                                  LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                                                                                                                                                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = v71;
                                                                                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s", (uint8_t *)v572, 0x12u);
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                              {
                                                                                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                              }
                                                                                                                                                                                                              *(_DWORD *)v594 = 0;
                                                                                                                                                                                                              if (*(unsigned __int8 *)(*(void *)(v7 + 224) + 142952) >= 0xF1u)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                HostInterpreter::get_srp_service_advertised_info((HostInterpreter *)v7, (BOOL *)&v599, (BOOL *)&v598, (unsigned int *)v594, (unsigned int *)v588);
                                                                                                                                                                                                                if (!*(_DWORD *)v594)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  std::string::value_type v531 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                                  if (v531)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    if (syslog_is_the_mask_enabled(4))
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      if (os_log_type_enabled(v531, OS_LOG_TYPE_ERROR)) {
                                                                                                                                                                                                                        HostInterpreter::ProcessPropertyGet();
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              operator new();
                                                                                                                                                                                                            }
LABEL_240:
                                                                                                                                                                                                            int v72 = strcmp(v67, "LeaderOverride");
                                                                                                                                                                                                            std::string v73 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                            int v74 = v73;
                                                                                                                                                                                                            if (v72)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              if (v73)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  std::string::size_type v75 = v6;
                                                                                                                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                                    std::string::size_type v75 = *(void *)v6;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                                                                                                                                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v75;
                                                                                                                                                                                                                  WORD2(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                                                                                                                                                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Property Not Found";
                                                                                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = %s", (uint8_t *)v572, 0x16u);
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                              {
                                                                                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                              }
                                                                                                                                                                                                              std::string::basic_string[abi:ne180100]<0>(v572, "Property Not Found");
                                                                                                                                                                                                              operator new();
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v73)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                              {
                                                                                                                                                                                                                int v529 = *(unsigned __int8 *)(v6 + 56);
                                                                                                                                                                                                                std::string::size_type v530 = v6;
                                                                                                                                                                                                                if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                                  std::string::size_type v530 = *(void *)v6;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109378;
                                                                                                                                                                                                                HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v529;
                                                                                                                                                                                                                LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                                                                                                                                                *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = v530;
                                                                                                                                                                                                                _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet[E(%d)]: %s", (uint8_t *)v572, 0x12u);
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                            }
                                                                                                                                                                                                            gettimeofday((timeval *)v594, &v599);
                                                                                                                                                                                                            std::string::basic_string[abi:ne180100]<0>(v572, "is_primary_resident");
                                                                                                                                                                                                            *(void *)std::string::size_type v588 = v572;
                                                                                                                                                                                                            std::string::size_type v552 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v588);
                                                                                                                                                                                                            BOOL v553 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v552 + 7, "1");
                                                                                                                                                                                                            if (SHIBYTE(v572[0].__r_.__value_.__r.__words[2]) < 0) {
                                                                                                                                                                                                              operator delete(v572[0].__r_.__value_.__l.__data_);
                                                                                                                                                                                                            }
                                                                                                                                                                                                            v554 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                            if (v554)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v554, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                              {
                                                                                                                                                                                                                std::string::size_type v555 = *(void *)(v7 + 312);
                                                                                                                                                                                                                LODWORD(v572[0].__r_.__value_.__l.__data_) = 134218496;
                                                                                                                                                                                                                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = *(void *)v594;
                                                                                                                                                                                                                WORD2(v572[0].__r_.__value_.__r.__words[1]) = 2048;
                                                                                                                                                                                                                *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v555;
                                                                                                                                                                                                                HIWORD(v572[0].__r_.__value_.__r.__words[2]) = 1024;
                                                                                                                                                                                                                LODWORD(v572[1].__r_.__value_.__l.__data_) = v553;
                                                                                                                                                                                                                _os_log_impl((void *)&_mh_execute_header, v554, OS_LOG_TYPE_INFO, "Leader re-election attempt(Event) CurrTimeSec[%ld] LastTriggerTime[%ld] Primary[%d]", (uint8_t *)v572, 0x1Cu);
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                            }
                                                                                                                                                                                                            ++*(_DWORD *)(RcpHostContext::sRcpHostContext + 952);
                                                                                                                                                                                                            if (otThreadBecomeLeader(*(void *)(v7 + 224), 1))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              std::string::size_type v556 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                              if (v556)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v556, OS_LOG_TYPE_ERROR)) {
                                                                                                                                                                                                                  HostInterpreter::ProcessPropertyGet();
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                              {
                                                                                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else
                                                                                                                                                                                                            {
                                                                                                                                                                                                              *(void *)(v7 + 312) = *(void *)v594;
                                                                                                                                                                                                              v557 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                              if (v557)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v557, OS_LOG_TYPE_ERROR)) {
                                                                                                                                                                                                                  HostInterpreter::ProcessPropertyGet();
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                              {
                                                                                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                              }
                                                                                                                                                                                                              ++*(_DWORD *)(RcpHostContext::sRcpHostContext + 956);
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (!*(unsigned char *)(v6 + 56)) {
                                                                                                                                                                                                              operator new();
                                                                                                                                                                                                            }
                                                                                                                                                                                                            return 0;
                                                                                                                                                                                                          }
LABEL_1284:
                                                                                                                                                                                                          std::string::value_type v525 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                          if (v525)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v526 = v525;
                                                                                                                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v526, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              int v527 = *(unsigned __int8 *)(v6 + 56);
                                                                                                                                                                                                              std::string::size_type v528 = v6;
                                                                                                                                                                                                              if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                                std::string::size_type v528 = *(void *)v6;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109378;
                                                                                                                                                                                                              HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v527;
                                                                                                                                                                                                              LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                                                                                                                                              *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = v528;
                                                                                                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v526, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s", (uint8_t *)v572, 0x12u);
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                          }
                                                                                                                                                                                                          v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                                                                                                                                                                          v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                                                                                                                                                                                          v572[0].__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                                                                          RcpHostContext::GetThreadStartMetrics(RcpHostContext::sRcpHostContext, (uint64_t *)v572);
                                                                                                                                                                                                          boost::any::any<std::list<std::string> &>();
                                                                                                                                                                                                        }
LABEL_1278:
                                                                                                                                                                                                        v520 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                        if (v520)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          v521 = v520;
                                                                                                                                                                                                          uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(6);
                                                                                                                                                                                                          if (is_the_mask_enabled)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t is_the_mask_enabled = os_log_type_enabled(v521, OS_LOG_TYPE_INFO);
                                                                                                                                                                                                            if (is_the_mask_enabled)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              int v523 = *(unsigned __int8 *)(v6 + 56);
                                                                                                                                                                                                              std::string::size_type v524 = v6;
                                                                                                                                                                                                              if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                                std::string::size_type v524 = *(void *)v6;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109378;
                                                                                                                                                                                                              HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v523;
                                                                                                                                                                                                              LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                                                                                                                                              *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = v524;
                                                                                                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v521, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s", (uint8_t *)v572, 0x12u);
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        else
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
                                                                                                                                                                                                          if (is_the_mask_enabled) {
                                                                                                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                                                                                                                                                                        v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                                                                                                                                                                                        v572[0].__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                                                                        HostInterpreter::GetThreadHealthMetrics(is_the_mask_enabled, (uint64_t *)v572);
                                                                                                                                                                                                        boost::any::any<std::list<std::string> &>();
                                                                                                                                                                                                      }
LABEL_1272:
                                                                                                                                                                                                      v517 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                      if (v517)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v518 = v517;
                                                                                                                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v518, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                        {
                                                                                                                                                                                                          std::string::size_type v519 = v6;
                                                                                                                                                                                                          if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                            std::string::size_type v519 = *(void *)v6;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v519;
                                                                                                                                                                                                          _os_log_impl((void *)&_mh_execute_header, v518, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                      {
                                                                                                                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                      }
                                                                                                                                                                                                      *(_OWORD *)&v572[0].__r_.__value_.__r.__words[1] = 0uLL;
                                                                                                                                                                                                      v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v572[0].__r_.__value_.__l.__size_;
                                                                                                                                                                                                      HostInterpreter::GetCoExRCP2BTWifiLoadAsValMap((uint64_t)v594);
                                                                                                                                                                                                    }
LABEL_1266:
                                                                                                                                                                                                    v514 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                    if (v514)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v515 = v514;
                                                                                                                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v515, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                      {
                                                                                                                                                                                                        std::string::size_type v516 = v6;
                                                                                                                                                                                                        if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                          std::string::size_type v516 = *(void *)v6;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                                                                        *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v516;
                                                                                                                                                                                                        _os_log_impl((void *)&_mh_execute_header, v515, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                    }
                                                                                                                                                                                                    HostInterpreter::GetCoExRCP2CountersAsValMap((uint64_t)v572);
                                                                                                                                                                                                  }
LABEL_1260:
                                                                                                                                                                                                  v511 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                  if (v511)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    v512 = v511;
                                                                                                                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v512, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      std::string::size_type v513 = v6;
                                                                                                                                                                                                      if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                        std::string::size_type v513 = *(void *)v6;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v513;
                                                                                                                                                                                                      _os_log_impl((void *)&_mh_execute_header, v512, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                  }
                                                                                                                                                                                                  uint64_t v582 = 0;
                                                                                                                                                                                                  long long v580 = 0u;
                                                                                                                                                                                                  long long v581 = 0u;
                                                                                                                                                                                                  long long v578 = 0u;
                                                                                                                                                                                                  long long v579 = 0u;
                                                                                                                                                                                                  long long v576 = 0u;
                                                                                                                                                                                                  long long v577 = 0u;
                                                                                                                                                                                                  long long v574 = 0u;
                                                                                                                                                                                                  long long v575 = 0u;
                                                                                                                                                                                                  long long v573 = 0u;
                                                                                                                                                                                                  memset(v572, 0, sizeof(v572));
                                                                                                                                                                                                  otGetStreamRawResponseHistogram(*(void *)(v7 + 224), (uint64_t)v572);
                                                                                                                                                                                                  *(void *)&v594[16] = 0;
                                                                                                                                                                                                  *(void *)&v594[8] = 0;
                                                                                                                                                                                                  *(void *)v594 = &v594[8];
                                                                                                                                                                                                  memset(v588, 0, 24);
                                                                                                                                                                                                  v538 = (char *)v6;
                                                                                                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                    v538 = *(char **)v6;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  std::string::basic_string[abi:ne180100]<0>(&buf, v538);
                                                                                                                                                                                                  std::string::basic_string[abi:ne180100]<0>(&v593, "[");
                                                                                                                                                                                                  if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                                                                    v539 = &v593;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    v539 = (std::string *)v593.__r_.__value_.__r.__words[0];
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                                                                    std::string::size_type size = HIBYTE(v593.__r_.__value_.__r.__words[2]);
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    std::string::size_type size = v593.__r_.__value_.__l.__size_;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  v541 = std::string::append(&buf, (const std::string::value_type *)v539, size);
                                                                                                                                                                                                  long long v542 = *(_OWORD *)&v541->__r_.__value_.__l.__data_;
                                                                                                                                                                                                  v598.__r_.__value_.__r.__words[2] = v541->__r_.__value_.__r.__words[2];
                                                                                                                                                                                                  *(_OWORD *)&v598.__r_.__value_.__l.__data_ = v542;
                                                                                                                                                                                                  v541->__r_.__value_.__l.__size_ = 0;
                                                                                                                                                                                                  v541->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                                                                  v541->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                                                                                  std::to_string(&v592, 0);
                                                                                                                                                                                                  if ((v592.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                                                                    std::string::value_type v543 = &v592;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    std::string::value_type v543 = (std::string *)v592.__r_.__value_.__r.__words[0];
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if ((v592.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                                                                    std::string::size_type v544 = HIBYTE(v592.__r_.__value_.__r.__words[2]);
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    std::string::size_type v544 = v592.__r_.__value_.__l.__size_;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  v545 = std::string::append(&v598, (const std::string::value_type *)v543, v544);
                                                                                                                                                                                                  long long v546 = *(_OWORD *)&v545->__r_.__value_.__l.__data_;
                                                                                                                                                                                                  v599.__r_.__value_.__r.__words[2] = v545->__r_.__value_.__r.__words[2];
                                                                                                                                                                                                  *(_OWORD *)&v599.__r_.__value_.__l.__data_ = v546;
                                                                                                                                                                                                  v545->__r_.__value_.__l.__size_ = 0;
                                                                                                                                                                                                  v545->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                                                                  v545->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                                                                                  std::string::basic_string[abi:ne180100]<0>(v563, "]");
                                                                                                                                                                                                  if ((v564 & 0x80u) == 0) {
                                                                                                                                                                                                    std::string::value_type v547 = (const std::string::value_type *)v563;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    std::string::value_type v547 = (const std::string::value_type *)v563[0];
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if ((v564 & 0x80u) == 0) {
                                                                                                                                                                                                    std::string::size_type v548 = v564;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    std::string::size_type v548 = (std::string::size_type)v563[1];
                                                                                                                                                                                                  }
                                                                                                                                                                                                  v549 = std::string::append(&v599, v547, v548);
                                                                                                                                                                                                  std::string::size_type v550 = v549->__r_.__value_.__r.__words[0];
                                                                                                                                                                                                  v571[0] = v549->__r_.__value_.__l.__size_;
                                                                                                                                                                                                  *(void *)((char *)v571 + 7) = *(std::string::size_type *)((char *)&v549->__r_.__value_.__r.__words[1] + 7);
                                                                                                                                                                                                  char v551 = HIBYTE(v549->__r_.__value_.__r.__words[2]);
                                                                                                                                                                                                  v549->__r_.__value_.__l.__size_ = 0;
                                                                                                                                                                                                  v549->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                                                                  v549->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                                                                                  if ((v588[23] & 0x80000000) != 0) {
                                                                                                                                                                                                    operator delete(*(void **)v588);
                                                                                                                                                                                                  }
                                                                                                                                                                                                  *(void *)std::string::size_type v588 = v550;
                                                                                                                                                                                                  *(void *)&v588[8] = v571[0];
                                                                                                                                                                                                  *(void *)&v588[15] = *(void *)((char *)v571 + 7);
                                                                                                                                                                                                  v588[23] = v551;
                                                                                                                                                                                                  if ((char)v564 < 0)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    operator delete(v563[0]);
                                                                                                                                                                                                    if ((SHIBYTE(v599.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                    {
LABEL_1398:
                                                                                                                                                                                                      if ((SHIBYTE(v592.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                        goto LABEL_1399;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      goto LABEL_1405;
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else if ((SHIBYTE(v599.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    goto LABEL_1398;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  operator delete(v599.__r_.__value_.__l.__data_);
                                                                                                                                                                                                  if ((SHIBYTE(v592.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                  {
LABEL_1399:
                                                                                                                                                                                                    if ((SHIBYTE(v598.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                      goto LABEL_1400;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    goto LABEL_1406;
                                                                                                                                                                                                  }
LABEL_1405:
                                                                                                                                                                                                  operator delete(v592.__r_.__value_.__l.__data_);
                                                                                                                                                                                                  if ((SHIBYTE(v598.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                  {
LABEL_1400:
                                                                                                                                                                                                    if ((SHIBYTE(v593.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                      goto LABEL_1401;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    goto LABEL_1407;
                                                                                                                                                                                                  }
LABEL_1406:
                                                                                                                                                                                                  operator delete(v598.__r_.__value_.__l.__data_);
                                                                                                                                                                                                  if ((SHIBYTE(v593.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                  {
LABEL_1401:
                                                                                                                                                                                                    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                      goto LABEL_1402;
                                                                                                                                                                                                    }
LABEL_1408:
                                                                                                                                                                                                    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_1402:
                                                                                                                                                                                                    v599.__r_.__value_.__r.__words[0] = (std::string::size_type)v588;
                                                                                                                                                                                                    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v594, (const void **)v588, (uint64_t)&std::piecewise_construct, (long long **)&v599);
                                                                                                                                                                                                    boost::any::operator=<unsigned int &>();
                                                                                                                                                                                                  }
LABEL_1407:
                                                                                                                                                                                                  operator delete(v593.__r_.__value_.__l.__data_);
                                                                                                                                                                                                  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                    goto LABEL_1402;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  goto LABEL_1408;
                                                                                                                                                                                                }
LABEL_1254:
                                                                                                                                                                                                v508 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                                if (v508)
                                                                                                                                                                                                {
                                                                                                                                                                                                  v509 = v508;
                                                                                                                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v509, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    std::string::size_type v510 = v6;
                                                                                                                                                                                                    if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                                      std::string::size_type v510 = *(void *)v6;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                                                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v510;
                                                                                                                                                                                                    _os_log_impl((void *)&_mh_execute_header, v509, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                {
                                                                                                                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                                }
                                                                                                                                                                                                operator new();
                                                                                                                                                                                              }
                                                                                                                                                                                              goto LABEL_1248;
                                                                                                                                                                                            }
LABEL_1247:
                                                                                                                                                                                            std::string::basic_string[abi:ne180100]<0>(v572, "Daemon:PromiscuousPcap");
                                                                                                                                                                                            *(void *)v594 = v572;
                                                                                                                                                                                            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v594);
                                                                                                                                                                                            boost::any::any<std::string &>();
                                                                                                                                                                                          }
LABEL_1243:
                                                                                                                                                                                          v490 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                          if (v490)
                                                                                                                                                                                          {
                                                                                                                                                                                            v491 = v490;
                                                                                                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v491, OS_LOG_TYPE_INFO))
                                                                                                                                                                                            {
                                                                                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315650;
                                                                                                                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertyGet(uint8_t, char **, void *)";
                                                                                                                                                                                              WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                                                                                                                                                                              *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = 5095;
                                                                                                                                                                                              WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                                                                                                                                                                                              *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"NCP:PcapEnabled";
                                                                                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v491, OS_LOG_TYPE_INFO, "%s:%d: HostInterpreter:::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0x1Cu);
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                          {
                                                                                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                          }
                                                                                                                                                                                          int PcapEnabled = otPlatRadioGetPcapEnabled(*(void *)(v7 + 224), v492, v493, v494, v495, v496, v497, v498);
                                                                                                                                                                                          std::string::value_type v537 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                          if (v537)
                                                                                                                                                                                          {
                                                                                                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v537, OS_LOG_TYPE_INFO))
                                                                                                                                                                                            {
                                                                                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315906;
                                                                                                                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertyGet(uint8_t, char **, void *)";
                                                                                                                                                                                              WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                                                                                                                                                                              *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = 5097;
                                                                                                                                                                                              WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                                                                                                                                                                                              *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"NCP:PcapEnabled";
                                                                                                                                                                                              WORD2(v572[1].__r_.__value_.__r.__words[0]) = 1024;
                                                                                                                                                                                              *(_DWORD *)((char *)v572[1].__r_.__value_.__r.__words + 6) = PcapEnabled;
                                                                                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v537, OS_LOG_TYPE_INFO, "%s:%d: HostInterpreter:::ProcessPropertyGet[E(0)]: %s, isPcapEnable : %d", (uint8_t *)v572, 0x22u);
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                          {
                                                                                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                          }
                                                                                                                                                                                          operator new();
                                                                                                                                                                                        }
                                                                                                                                                                                        goto LABEL_1239;
                                                                                                                                                                                      }
                                                                                                                                                                                      goto LABEL_1235;
                                                                                                                                                                                    }
                                                                                                                                                                                    goto LABEL_1230;
                                                                                                                                                                                  }
LABEL_1224:
                                                                                                                                                                                  v470 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                                  if (v470)
                                                                                                                                                                                  {
                                                                                                                                                                                    v471 = v470;
                                                                                                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v471, OS_LOG_TYPE_INFO))
                                                                                                                                                                                    {
                                                                                                                                                                                      std::string::size_type v472 = v6;
                                                                                                                                                                                      if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                                        std::string::size_type v472 = *(void *)v6;
                                                                                                                                                                                      }
                                                                                                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v472;
                                                                                                                                                                                      _os_log_impl((void *)&_mh_execute_header, v471, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                  {
                                                                                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                                  }
                                                                                                                                                                                  otSysGetThreadVirtualInterfaceReadBufferSize();
                                                                                                                                                                                  operator new();
                                                                                                                                                                                }
                                                                                                                                                                                goto LABEL_1218;
                                                                                                                                                                              }
LABEL_1214:
                                                                                                                                                                              v458 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                              if (v458)
                                                                                                                                                                              {
                                                                                                                                                                                v459 = v458;
                                                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v459, OS_LOG_TYPE_INFO))
                                                                                                                                                                                {
                                                                                                                                                                                  int v460 = *(unsigned __int8 *)(v7 + 184);
                                                                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                                                                                                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"is_bt_audioCall_on";
                                                                                                                                                                                  WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                                                                                                                                                                  *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v460;
                                                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v459, OS_LOG_TYPE_INFO, "BT Load, Audio detection: HostInterpreter::ProcessPropertyGet[E(0)]: %s, BTAudioCallStatus is %d]", (uint8_t *)v572, 0x12u);
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                              {
                                                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                              }
                                                                                                                                                                              operator new();
                                                                                                                                                                            }
LABEL_1213:
                                                                                                                                                                            operator new();
                                                                                                                                                                          }
                                                                                                                                                                          goto LABEL_1208;
                                                                                                                                                                        }
                                                                                                                                                                        goto LABEL_1203;
                                                                                                                                                                      }
LABEL_1199:
                                                                                                                                                                      HostInterpreter::isThreadSessionEnabled(v52);
                                                                                                                                                                      std::string::value_type v449 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                      if (v449)
                                                                                                                                                                      {
                                                                                                                                                                        std::string::size_type v450 = v449;
                                                                                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v450, OS_LOG_TYPE_INFO))
                                                                                                                                                                        {
                                                                                                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"is_threadsession_on";
                                                                                                                                                                          _os_log_impl((void *)&_mh_execute_header, v450, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                      {
                                                                                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                      }
                                                                                                                                                                      operator new();
                                                                                                                                                                    }
LABEL_1184:
                                                                                                                                                                    *(void *)v594 = v594;
                                                                                                                                                                    *(void *)&v594[8] = v594;
                                                                                                                                                                    *(void *)&v594[16] = 0;
                                                                                                                                                                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v572);
                                                                                                                                                                    memset(v588, 0, 24);
                                                                                                                                                                    uint64_t v437 = *(void *)(v7 + 224);
                                                                                                                                                                    if (*(unsigned char *)(v437 + 85220))
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t v438 = 0;
                                                                                                                                                                      std::string::value_type v439 = (const char *)(v437 + 65805);
                                                                                                                                                                      *(void *)&long long v562 = &v572[1];
                                                                                                                                                                      uint64_t v440 = 224;
                                                                                                                                                                      do
                                                                                                                                                                      {
                                                                                                                                                                        std::string::basic_string[abi:ne180100]<0>(&v599, "");
                                                                                                                                                                        std::stringbuf::str();
                                                                                                                                                                        if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
                                                                                                                                                                          operator delete(v599.__r_.__value_.__l.__data_);
                                                                                                                                                                        }
                                                                                                                                                                        v441 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)"Buf", 3);
                                                                                                                                                                        *(void *)((char *)v441 + *(void *)(*v441 - 24) + 24) = 3;
                                                                                                                                                                        v599.__r_.__value_.__s.__data_[0] = 48;
                                                                                                                                                                        std::operator<<[abi:ne180100]<std::char_traits<char>>(v441, (char *)&v599);
                                                                                                                                                                        std::ostream::operator<<();
                                                                                                                                                                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)":", 1);
                                                                                                                                                                        std::ostream::operator<<();
                                                                                                                                                                        if (*(v439 - 33)) {
                                                                                                                                                                          std::string::value_type v442 = " (A), ";
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                          std::string::value_type v442 = " (D), ";
                                                                                                                                                                        }
                                                                                                                                                                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)v442, 6);
                                                                                                                                                                        v443 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)"#A:", 3);
                                                                                                                                                                        *(void *)((char *)v443 + *(void *)(*v443 - 24) + 24) = 10;
                                                                                                                                                                        v599.__r_.__value_.__s.__data_[0] = 48;
                                                                                                                                                                        std::operator<<[abi:ne180100]<std::char_traits<char>>(v443, (char *)&v599);
                                                                                                                                                                        std::ostream::operator<<();
                                                                                                                                                                        v444 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)", #D:", 5);
                                                                                                                                                                        *(void *)((char *)v444 + *(void *)(*v444 - 24) + 24) = 10;
                                                                                                                                                                        v599.__r_.__value_.__s.__data_[0] = 48;
                                                                                                                                                                        std::operator<<[abi:ne180100]<std::char_traits<char>>(v444, (char *)&v599);
                                                                                                                                                                        std::ostream::operator<<();
                                                                                                                                                                        if (*(v439 - 32))
                                                                                                                                                                        {
                                                                                                                                                                          std::string::value_type v445 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)", LastAllocTimestamp: ", 22);
                                                                                                                                                                          size_t v446 = strlen(v439 - 32);
                                                                                                                                                                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v445, (uint64_t)(v439 - 32), v446);
                                                                                                                                                                        }
                                                                                                                                                                        if (*v439)
                                                                                                                                                                        {
                                                                                                                                                                          v447 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)", LastDeallocTimestamp: ", 24);
                                                                                                                                                                          size_t v448 = strlen(v439);
                                                                                                                                                                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v447, (uint64_t)v439, v448);
                                                                                                                                                                        }
                                                                                                                                                                        std::stringbuf::str();
                                                                                                                                                                        if ((v588[23] & 0x80000000) != 0) {
                                                                                                                                                                          operator delete(*(void **)v588);
                                                                                                                                                                        }
                                                                                                                                                                        *(std::string *)std::string::size_type v588 = v599;
                                                                                                                                                                        std::list<std::string>::push_back((uint64_t *)v594, (uint64_t)v588);
                                                                                                                                                                        ++v438;
                                                                                                                                                                        v439 += 76;
                                                                                                                                                                        v440 += 256;
                                                                                                                                                                      }
                                                                                                                                                                      while (v438 != 256);
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      std::string::basic_string[abi:ne180100]<0>(&v599, "");
                                                                                                                                                                      std::stringbuf::str();
                                                                                                                                                                      if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
                                                                                                                                                                        operator delete(v599.__r_.__value_.__l.__data_);
                                                                                                                                                                      }
                                                                                                                                                                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)"BufferStats is disabled.", 24);
                                                                                                                                                                      std::stringbuf::str();
                                                                                                                                                                      if ((v588[23] & 0x80000000) != 0) {
                                                                                                                                                                        operator delete(*(void **)v588);
                                                                                                                                                                      }
                                                                                                                                                                      *(std::string *)std::string::size_type v588 = v599;
                                                                                                                                                                      std::list<std::string>::push_back((uint64_t *)v594, (uint64_t)v588);
                                                                                                                                                                    }
                                                                                                                                                                    boost::any::any<std::list<std::string> &>();
                                                                                                                                                                  }
LABEL_1171:
                                                                                                                                                                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
                                                                                                                                                                  v599.__r_.__value_.__r.__words[0] = (std::string::size_type)&v599;
                                                                                                                                                                  v599.__r_.__value_.__l.__size_ = (std::string::size_type)&v599;
                                                                                                                                                                  v599.__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v572);
                                                                                                                                                                  memset(&v598, 0, sizeof(v598));
                                                                                                                                                                  *(void *)&long long v562 = &v591;
                                                                                                                                                                  while (!otThreadGetNextCacheEntry(*(void *)(v7 + 224), (uint64_t)v588, (uint64_t)&buf))
                                                                                                                                                                  {
                                                                                                                                                                    std::string::basic_string[abi:ne180100]<0>(v594, "");
                                                                                                                                                                    std::stringbuf::str();
                                                                                                                                                                    if ((v594[23] & 0x80000000) != 0) {
                                                                                                                                                                      operator delete(*(void **)v594);
                                                                                                                                                                    }
                                                                                                                                                                    ot::Ip6::Address::ToString((ot::Ip6::Address *)v588, (ot::StringWriter *)v594);
                                                                                                                                                                    size_t v428 = strlen(&v594[12]);
                                                                                                                                                                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)&v594[12], v428);
                                                                                                                                                                    v429 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)" ", 1);
                                                                                                                                                                    v594[0] = 48;
                                                                                                                                                                    std::string::value_type v430 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v429, v594);
                                                                                                                                                                    uint64_t v431 = *v430;
                                                                                                                                                                    *(uint64_t *)((char *)v430 + *(void *)(*v430 - 24) + 24) = 4;
                                                                                                                                                                    *(_DWORD *)((char *)v430 + *(void *)(v431 - 24) + 8) = *(_DWORD *)((unsigned char *)v430 + *(void *)(v431 - 24) + 8) & 0xFFFFFFB5 | 8;
                                                                                                                                                                    std::ostream::operator<<();
                                                                                                                                                                    v432 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)" ", 1);
                                                                                                                                                                    size_t v433 = strlen(HostInterpreter::ProcessPropertyGet(unsigned char,char **,void *)::kStateStrings[*(unsigned int *)&v588[20]]);
                                                                                                                                                                    v434 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v432, (uint64_t)HostInterpreter::ProcessPropertyGet(unsigned char,char **,void *)::kStateStrings[*(unsigned int *)&v588[20]], v433);
                                                                                                                                                                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v434, (uint64_t)" canEvict=", 10);
                                                                                                                                                                    std::ostream::operator<<();
                                                                                                                                                                    if (*(_DWORD *)&v588[20])
                                                                                                                                                                    {
                                                                                                                                                                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)" timeout=", 9);
                                                                                                                                                                      std::ostream::operator<<();
                                                                                                                                                                    }
                                                                                                                                                                    else if ((v588[24] & 4) != 0)
                                                                                                                                                                    {
                                                                                                                                                                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)" transTime=", 11);
                                                                                                                                                                      std::ostream::operator<<();
                                                                                                                                                                      v435 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)" eid=", 5);
                                                                                                                                                                      ot::Ip6::Address::ToString((ot::Ip6::Address *)v562, (ot::StringWriter *)v594);
                                                                                                                                                                      size_t v436 = strlen(&v594[12]);
                                                                                                                                                                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v435, (uint64_t)&v594[12], v436);
                                                                                                                                                                    }
                                                                                                                                                                    if (*(_DWORD *)&v588[20] == 3)
                                                                                                                                                                    {
                                                                                                                                                                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2], (uint64_t)" retryDelay=", 12);
                                                                                                                                                                      std::ostream::operator<<();
                                                                                                                                                                    }
                                                                                                                                                                    std::endl[abi:ne180100]<char,std::char_traits<char>>(&v572[0].__r_.__value_.__r.__words[2]);
                                                                                                                                                                    std::stringbuf::str();
                                                                                                                                                                    if (SHIBYTE(v598.__r_.__value_.__r.__words[2]) < 0) {
                                                                                                                                                                      operator delete(v598.__r_.__value_.__l.__data_);
                                                                                                                                                                    }
                                                                                                                                                                    std::string v598 = *(std::string *)v594;
                                                                                                                                                                    std::list<std::string>::push_back((uint64_t *)&v599, (uint64_t)&v598);
                                                                                                                                                                  }
                                                                                                                                                                  boost::any::any<std::list<std::string> &>();
                                                                                                                                                                }
LABEL_1167:
                                                                                                                                                                unsigned int MaxRouterId = otThreadGetMaxRouterId();
                                                                                                                                                                *(void *)std::string::size_type v588 = v588;
                                                                                                                                                                *(void *)&v588[8] = v588;
                                                                                                                                                                *(void *)&v588[16] = 0;
                                                                                                                                                                v426 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                if (v426)
                                                                                                                                                                {
                                                                                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v426, OS_LOG_TYPE_INFO))
                                                                                                                                                                  {
                                                                                                                                                                    *(_WORD *)v594 = 0;
                                                                                                                                                                    _os_log_impl((void *)&_mh_execute_header, v426, OS_LOG_TYPE_INFO, "| ID | RLOC16 | ExtendedAddress | NextHop  | PathCost | LQIn | LQOut | Age | Link", v594, 2u);
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                {
                                                                                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                                                                                }
                                                                                                                                                                unsigned __int8 v532 = 0;
                                                                                                                                                                *(void *)&long long v427 = 136315394;
                                                                                                                                                                long long v562 = v427;
                                                                                                                                                                *(void *)&long long v427 = 67112960;
                                                                                                                                                                long long v561 = v427;
                                                                                                                                                                while (1)
                                                                                                                                                                {
                                                                                                                                                                  if (!otThreadGetRouterInfo(*(void *)(v7 + 224), v532, (uint64_t)&v599))
                                                                                                                                                                  {
                                                                                                                                                                    std::string::value_type v534 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                                    if (v534)
                                                                                                                                                                    {
                                                                                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v534, OS_LOG_TYPE_INFO))
                                                                                                                                                                      {
                                                                                                                                                                        *(_DWORD *)v594 = v561;
                                                                                                                                                                        *(_WORD *)&v594[8] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[10] = LOWORD(v599.__r_.__value_.__r.__words[1]);
                                                                                                                                                                        *(_WORD *)&v594[14] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[4] = v599.__r_.__value_.__s.__data_[10];
                                                                                                                                                                        *(_DWORD *)&v594[16] = v599.__r_.__value_.__s.__data_[0];
                                                                                                                                                                        *(_WORD *)&v594[20] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[22] = v599.__r_.__value_.__s.__data_[1];
                                                                                                                                                                        *(_WORD *)&v594[26] = 1024;
                                                                                                                                                                        *(_WORD *)&v594[32] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[34] = v599.__r_.__value_.__s.__data_[3];
                                                                                                                                                                        *(_WORD *)&v594[38] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[28] = v599.__r_.__value_.__s.__data_[2];
                                                                                                                                                                        *(_DWORD *)&v594[40] = v599.__r_.__value_.__s.__data_[4];
                                                                                                                                                                        *(_WORD *)&v594[44] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[46] = v599.__r_.__value_.__s.__data_[5];
                                                                                                                                                                        *(_WORD *)&v594[50] = 1024;
                                                                                                                                                                        *(_WORD *)&v594[56] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[58] = v599.__r_.__value_.__s.__data_[7];
                                                                                                                                                                        *(_WORD *)&v594[62] = 1024;
                                                                                                                                                                        *(_DWORD *)&v594[52] = v599.__r_.__value_.__s.__data_[6];
                                                                                                                                                                        LODWORD(v595) = v599.__r_.__value_.__s.__data_[11];
                                                                                                                                                                        WORD2(v595) = 1024;
                                                                                                                                                                        *(_DWORD *)((char *)&v595 + 6) = v599.__r_.__value_.__s.__data_[12];
                                                                                                                                                                        WORD5(v595) = 1024;
                                                                                                                                                                        LOWORD(v596[0]) = 1024;
                                                                                                                                                                        *(_DWORD *)((char *)v596 + 2) = v599.__r_.__value_.__s.__data_[14];
                                                                                                                                                                        HIWORD(v596[1]) = 1024;
                                                                                                                                                                        HIDWORD(v595) = v599.__r_.__value_.__s.__data_[13];
                                                                                                                                                                        v596[2] = v599.__r_.__value_.__s.__data_[15];
                                                                                                                                                                        LOWORD(v596[3]) = 1024;
                                                                                                                                                                        *(_DWORD *)((char *)&v596[3] + 2) = (v599.__r_.__value_.__s.__data_[16] >> 1) & 1;
                                                                                                                                                                        _os_log_impl((void *)&_mh_execute_header, v534, OS_LOG_TYPE_INFO, "| %2d| 0x%04x | %02X%02X%02X%02X%02X%02X%02X%02X | %8d | %8d | %9d | %3u | %3d |%2d", v594, 0x62u);
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                                    {
                                                                                                                                                                      *(_DWORD *)v594 = v562;
                                                                                                                                                                      *(void *)&v594[4] = "com.apple.wpantund.ncp";
                                                                                                                                                                      *(_WORD *)&v594[12] = 2080;
                                                                                                                                                                      *(void *)&v594[14] = "default";
                                                                                                                                                                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v594, 0x16u);
                                                                                                                                                                    }
                                                                                                                                                                    snprintf((char *)v572, 0x3E8uLL, "Router id = %u,  RLOC16 = 0x%x, ExtendedAddress = %02X%02X%02X%02X%02X%02X%02X%02X, NextHop = %d, PathCost = %d, LQIn =%d, LQOut = %d, Age = %d, Linuint64_t k = %d", v599.__r_.__value_.__s.__data_[10], LOWORD(v599.__r_.__value_.__r.__words[1]), v599.__r_.__value_.__s.__data_[0], v599.__r_.__value_.__s.__data_[1], v599.__r_.__value_.__s.__data_[2], v599.__r_.__value_.__s.__data_[3], v599.__r_.__value_.__s.__data_[4], v599.__r_.__value_.__s.__data_[5], v599.__r_.__value_.__s.__data_[6], v599.__r_.__value_.__s.__data_[7], v599.__r_.__value_.__s.__data_[11], v599.__r_.__value_.__s.__data_[12], v599.__r_.__value_.__s.__data_[13], v599.__r_.__value_.__s.__data_[14], v599.__r_.__value_.__s.__data_[15], (v599.__r_.__value_.__s.__data_[16] >> 1) & 1);
                                                                                                                                                                    std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                                                                                                                    v535 = operator new(0x28uLL);
                                                                                                                                                                    v535[1] = *(_OWORD *)v594;
                                                                                                                                                                    *((void *)v535 + 4) = *(void *)&v594[16];
                                                                                                                                                                    uint64_t v533 = *(void *)v588;
                                                                                                                                                                    *(void *)v535 = *(void *)v588;
                                                                                                                                                                    *((void *)v535 + 1) = v588;
                                                                                                                                                                    *(void *)(v533 + 8) = v535;
                                                                                                                                                                    *(void *)std::string::size_type v588 = v535;
                                                                                                                                                                    ++*(void *)&v588[16];
                                                                                                                                                                  }
                                                                                                                                                                  if (MaxRouterId < ++v532) {
                                                                                                                                                                    boost::any::any<std::list<std::string> &>();
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
LABEL_1161:
                                                                                                                                                              std::string::value_type v421 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                              if (v421)
                                                                                                                                                              {
                                                                                                                                                                v422 = v421;
                                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v422, OS_LOG_TYPE_INFO))
                                                                                                                                                                {
                                                                                                                                                                  int v423 = *(unsigned __int8 *)(v6 + 56);
                                                                                                                                                                  std::string::size_type v424 = v6;
                                                                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                    std::string::size_type v424 = *(void *)v6;
                                                                                                                                                                  }
                                                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109378;
                                                                                                                                                                  HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v423;
                                                                                                                                                                  LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                                                                                                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = v424;
                                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v422, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s", (uint8_t *)v572, 0x12u);
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                              {
                                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                                              }
                                                                                                                                                              v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                                                                                                                              v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                                                                                                                                              v572[0].__r_.__value_.__r.__words[2] = 0;
                                                                                                                                                              HostInterpreter::GetRcpStateInfo(v7, (uint64_t *)v572);
                                                                                                                                                            }
                                                                                                                                                            goto LABEL_1138;
                                                                                                                                                          }
LABEL_1129:
                                                                                                                                                          std::string::size_type v411 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                          if (v411)
                                                                                                                                                          {
                                                                                                                                                            v412 = v411;
                                                                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v412, OS_LOG_TYPE_INFO))
                                                                                                                                                            {
                                                                                                                                                              std::string::size_type v413 = v6;
                                                                                                                                                              if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                                std::string::size_type v413 = *(void *)v6;
                                                                                                                                                              }
                                                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v413;
                                                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v412, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                          {
                                                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                                                          }
                                                                                                                                                          otThreadGetMeshLocalPrefix(*(void *)(v7 + 224));
                                                                                                                                                          snprintf((char *)v572, 0xC8uLL, "%x:%x:%x:%x::/64", __rev16(*v414), __rev16(v414[1]), __rev16(v414[2]), __rev16(v414[3]));
                                                                                                                                                          std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                                                                                                          operator new();
                                                                                                                                                        }
                                                                                                                                                        goto LABEL_1116;
                                                                                                                                                      }
LABEL_1107:
                                                                                                                                                      v405 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                      if (v405)
                                                                                                                                                      {
                                                                                                                                                        std::string::value_type v406 = v405;
                                                                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v406, OS_LOG_TYPE_INFO))
                                                                                                                                                        {
                                                                                                                                                          std::string::size_type v407 = v6;
                                                                                                                                                          if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                            std::string::size_type v407 = *(void *)v6;
                                                                                                                                                          }
                                                                                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v407;
                                                                                                                                                          _os_log_impl((void *)&_mh_execute_header, v406, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                      {
                                                                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                                                                      }
                                                                                                                                                      v588[0] = 0;
                                                                                                                                                      v599.__r_.__value_.__s.__data_[0] = 0;
                                                                                                                                                      otLinkGetTxDirectRetrySuccessHistogram(*(void *)(v7 + 224), v588);
                                                                                                                                                      otLinkGetTxIndirectRetrySuccessHistogram(*(void *)(v7 + 224), (unsigned __int8 *)&v599);
                                                                                                                                                      HostInterpreter::GetMacRetryHistogramAsValMap(v588[0], v599.__r_.__value_.__s.__data_[0], (uint64_t)v572);
                                                                                                                                                      boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                                    }
LABEL_1098:
                                                                                                                                                    std::string::value_type v402 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                    if (v402)
                                                                                                                                                    {
                                                                                                                                                      std::string::size_type v403 = v402;
                                                                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v403, OS_LOG_TYPE_INFO))
                                                                                                                                                      {
                                                                                                                                                        std::string::size_type v404 = v6;
                                                                                                                                                        if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                          std::string::size_type v404 = *(void *)v6;
                                                                                                                                                        }
                                                                                                                                                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                        *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v404;
                                                                                                                                                        _os_log_impl((void *)&_mh_execute_header, v403, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                    {
                                                                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                                                                    }
                                                                                                                                                    v588[0] = 0;
                                                                                                                                                    v599.__r_.__value_.__s.__data_[0] = 0;
                                                                                                                                                    otLinkGetRouterRssiHistogram(*(void *)(v7 + 224), v588);
                                                                                                                                                    otLinkGetEndDeviceRssiHistogram(*(void *)(v7 + 224), (unsigned __int8 *)&v599);
                                                                                                                                                    HostInterpreter::GetNeighRSSIHistogramAsValMap(v588[0], v599.__r_.__value_.__s.__data_[0], (uint64_t)v572);
                                                                                                                                                    boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                                  }
LABEL_1089:
                                                                                                                                                  std::string::size_type v399 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                  if (v399)
                                                                                                                                                  {
                                                                                                                                                    v400 = v399;
                                                                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v400, OS_LOG_TYPE_INFO))
                                                                                                                                                    {
                                                                                                                                                      std::string::size_type v401 = v6;
                                                                                                                                                      if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                        std::string::size_type v401 = *(void *)v6;
                                                                                                                                                      }
                                                                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v401;
                                                                                                                                                      _os_log_impl((void *)&_mh_execute_header, v400, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                  {
                                                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                                                  }
                                                                                                                                                  v588[0] = 0;
                                                                                                                                                  otLinkGetLqiHistogram(*(void *)(v7 + 224), v588);
                                                                                                                                                  HostInterpreter::GetMacPacketLQIHistogramAsValMap(v588[0], (uint64_t)v572);
                                                                                                                                                  boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                                }
LABEL_1052:
                                                                                                                                                v385 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                if (v385)
                                                                                                                                                {
                                                                                                                                                  std::string::value_type v386 = v385;
                                                                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v386, OS_LOG_TYPE_INFO))
                                                                                                                                                  {
                                                                                                                                                    std::string::size_type v387 = v6;
                                                                                                                                                    if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                      std::string::size_type v387 = *(void *)v6;
                                                                                                                                                    }
                                                                                                                                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v387;
                                                                                                                                                    _os_log_impl((void *)&_mh_execute_header, v386, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                {
                                                                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                                                                }
                                                                                                                                                v588[0] = 0;
                                                                                                                                                v599.__r_.__value_.__s.__data_[0] = 0;
                                                                                                                                                otLinkGetTxDirectErrorNoAckHistogram(*(void *)(v7 + 224), v588);
                                                                                                                                                otLinkGetTxDirectErrorChannelAccessFailureHistogram(*(void *)(v7 + 224), (unsigned __int8 *)&v599);
                                                                                                                                                HostInterpreter::GetMacPacketErrHistogramAsValMap(v588[0], v599.__r_.__value_.__s.__data_[0], (uint64_t)v572);
                                                                                                                                                boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                              }
LABEL_1008:
                                                                                                                                              v363 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                              if (v363)
                                                                                                                                              {
                                                                                                                                                std::string::value_type v364 = v363;
                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v364, OS_LOG_TYPE_INFO))
                                                                                                                                                {
                                                                                                                                                  std::string::size_type v365 = v6;
                                                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                    std::string::size_type v365 = *(void *)v6;
                                                                                                                                                  }
                                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v365;
                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v364, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                              {
                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                              }
                                                                                                                                              v588[0] = 0;
                                                                                                                                              v599.__r_.__value_.__s.__data_[0] = 0;
                                                                                                                                              otLinkGetTxPacketSizeHistogram(*(void *)(v7 + 224), v588);
                                                                                                                                              otLinkGetRxPacketSizeHistogram(*(void *)(v7 + 224), (unsigned __int8 *)&v599);
                                                                                                                                              HostInterpreter::GetMacPacketSizeHistogramAsValMap(v588[0], v599.__r_.__value_.__s.__data_[0], (uint64_t)v572);
                                                                                                                                              boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                            }
LABEL_1014:
                                                                                                                                            v366 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                            if (v366)
                                                                                                                                            {
                                                                                                                                              std::string::value_type v367 = v366;
                                                                                                                                              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v367, OS_LOG_TYPE_INFO))
                                                                                                                                              {
                                                                                                                                                std::string::size_type v373 = v6;
                                                                                                                                                if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                  std::string::size_type v373 = *(void *)v6;
                                                                                                                                                }
                                                                                                                                                LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v373;
                                                                                                                                                _os_log_impl((void *)&_mh_execute_header, v367, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                            {
                                                                                                                                              -[PowerEventHandler_Rcp init:]();
                                                                                                                                            }
                                                                                                                                            *(void *)&v594[16] = 0;
                                                                                                                                            *(void *)&v594[8] = 0;
                                                                                                                                            *(void *)v594 = &v594[8];
                                                                                                                                            LOBYTE(v563[0]) = 0;
                                                                                                                                            if (!otPlatVendorGetDeepSleepFilterList(*(void *)(v7 + 224), (uint64_t)v572, (uint64_t)v563, v368, v369, v370, v371, v372))
                                                                                                                                            {
                                                                                                                                              if (!LOBYTE(v563[0])) {
                                                                                                                                                boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                              }
                                                                                                                                              v388 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, "[");
                                                                                                                                              v389 = std::string::insert(v388, 0, "DeepSleepFilterList");
                                                                                                                                              long long v390 = *(_OWORD *)&v389->__r_.__value_.__l.__data_;
                                                                                                                                              v598.__r_.__value_.__r.__words[2] = v389->__r_.__value_.__r.__words[2];
                                                                                                                                              *(_OWORD *)&v598.__r_.__value_.__l.__data_ = v390;
                                                                                                                                              v389->__r_.__value_.__l.__size_ = 0;
                                                                                                                                              v389->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                              v389->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                              std::to_string(&v593, 0);
                                                                                                                                              if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                std::string::size_type v391 = &v593;
                                                                                                                                              }
                                                                                                                                              else {
                                                                                                                                                std::string::size_type v391 = (std::string *)v593.__r_.__value_.__r.__words[0];
                                                                                                                                              }
                                                                                                                                              if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                std::string::size_type v392 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
                                                                                                                                              }
                                                                                                                                              else {
                                                                                                                                                std::string::size_type v392 = v593.__r_.__value_.__l.__size_;
                                                                                                                                              }
                                                                                                                                              v393 = std::string::append(&v598, (const std::string::value_type *)v391, v392);
                                                                                                                                              long long v394 = *(_OWORD *)&v393->__r_.__value_.__l.__data_;
                                                                                                                                              v599.__r_.__value_.__r.__words[2] = v393->__r_.__value_.__r.__words[2];
                                                                                                                                              *(_OWORD *)&v599.__r_.__value_.__l.__data_ = v394;
                                                                                                                                              v393->__r_.__value_.__l.__size_ = 0;
                                                                                                                                              v393->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                              v393->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                              std::string::basic_string[abi:ne180100]<0>(&v592, "]");
                                                                                                                                              if ((v592.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                std::string::size_type v395 = &v592;
                                                                                                                                              }
                                                                                                                                              else {
                                                                                                                                                std::string::size_type v395 = (std::string *)v592.__r_.__value_.__r.__words[0];
                                                                                                                                              }
                                                                                                                                              if ((v592.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                                std::string::size_type v396 = HIBYTE(v592.__r_.__value_.__r.__words[2]);
                                                                                                                                              }
                                                                                                                                              else {
                                                                                                                                                std::string::size_type v396 = v592.__r_.__value_.__l.__size_;
                                                                                                                                              }
                                                                                                                                              v397 = std::string::append(&v599, (const std::string::value_type *)v395, v396);
                                                                                                                                              long long v398 = *(_OWORD *)&v397->__r_.__value_.__l.__data_;
                                                                                                                                              *(void *)&v588[16] = *((void *)&v397->__r_.__value_.__l + 2);
                                                                                                                                              *(_OWORD *)std::string::size_type v588 = v398;
                                                                                                                                              v397->__r_.__value_.__l.__size_ = 0;
                                                                                                                                              v397->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                              v397->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                              if (SHIBYTE(v592.__r_.__value_.__r.__words[2]) < 0)
                                                                                                                                              {
                                                                                                                                                operator delete(v592.__r_.__value_.__l.__data_);
                                                                                                                                                if ((SHIBYTE(v599.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                {
LABEL_1079:
                                                                                                                                                  if ((SHIBYTE(v593.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                    goto LABEL_1080;
                                                                                                                                                  }
                                                                                                                                                  goto LABEL_1085;
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              else if ((SHIBYTE(v599.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                              {
                                                                                                                                                goto LABEL_1079;
                                                                                                                                              }
                                                                                                                                              operator delete(v599.__r_.__value_.__l.__data_);
                                                                                                                                              if ((SHIBYTE(v593.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                              {
LABEL_1080:
                                                                                                                                                if ((SHIBYTE(v598.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                  goto LABEL_1081;
                                                                                                                                                }
                                                                                                                                                goto LABEL_1086;
                                                                                                                                              }
LABEL_1085:
                                                                                                                                              operator delete(v593.__r_.__value_.__l.__data_);
                                                                                                                                              if ((SHIBYTE(v598.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                              {
LABEL_1081:
                                                                                                                                                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                  goto LABEL_1082;
                                                                                                                                                }
LABEL_1087:
                                                                                                                                                operator delete(buf.__r_.__value_.__l.__data_);
LABEL_1082:
                                                                                                                                                v599.__r_.__value_.__r.__words[0] = (std::string::size_type)v588;
                                                                                                                                                std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v594, (const void **)v588, (uint64_t)&std::piecewise_construct, (long long **)&v599);
                                                                                                                                                boost::any::operator=<unsigned char>();
                                                                                                                                              }
LABEL_1086:
                                                                                                                                              operator delete(v598.__r_.__value_.__l.__data_);
                                                                                                                                              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                goto LABEL_1082;
                                                                                                                                              }
                                                                                                                                              goto LABEL_1087;
                                                                                                                                            }
LABEL_903:
                                                                                                                                            std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)v594, *(char **)&v594[8]);
                                                                                                                                            goto LABEL_316;
                                                                                                                                          }
                                                                                                                                          goto LABEL_998;
                                                                                                                                        }
LABEL_988:
                                                                                                                                        v346 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                        if (v346)
                                                                                                                                        {
                                                                                                                                          std::string::value_type v347 = v346;
                                                                                                                                          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v347, OS_LOG_TYPE_INFO))
                                                                                                                                          {
                                                                                                                                            std::string::size_type v353 = v6;
                                                                                                                                            if (*(char *)(v6 + 23) < 0) {
                                                                                                                                              std::string::size_type v353 = *(void *)v6;
                                                                                                                                            }
                                                                                                                                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                            *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v353;
                                                                                                                                            _os_log_impl((void *)&_mh_execute_header, v347, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                        {
                                                                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                                                                        }
                                                                                                                                        *(void *)&v594[16] = 0;
                                                                                                                                        *(void *)&v594[8] = 0;
                                                                                                                                        *(void *)v594 = &v594[8];
                                                                                                                                        LOBYTE(v563[0]) = -12;
                                                                                                                                        if (otPlatVendorGetDeepSleepRegionLogLevels(*(void *)(v7 + 224), (uint64_t)v572, (uint64_t)v563, v348, v349, v350, v351, v352)) {
                                                                                                                                          goto LABEL_903;
                                                                                                                                        }
                                                                                                                                        if (!LOBYTE(v563[0])) {
                                                                                                                                          boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                                        }
                                                                                                                                        v374 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, "[");
                                                                                                                                        v375 = std::string::insert(v374, 0, "DeepSleepRegionLogLevel");
                                                                                                                                        long long v376 = *(_OWORD *)&v375->__r_.__value_.__l.__data_;
                                                                                                                                        v598.__r_.__value_.__r.__words[2] = v375->__r_.__value_.__r.__words[2];
                                                                                                                                        *(_OWORD *)&v598.__r_.__value_.__l.__data_ = v376;
                                                                                                                                        v375->__r_.__value_.__l.__size_ = 0;
                                                                                                                                        v375->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                        v375->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                        std::to_string(&v593, 0);
                                                                                                                                        if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                          v377 = &v593;
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                          v377 = (std::string *)v593.__r_.__value_.__r.__words[0];
                                                                                                                                        }
                                                                                                                                        if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                          std::string::size_type v378 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                          std::string::size_type v378 = v593.__r_.__value_.__l.__size_;
                                                                                                                                        }
                                                                                                                                        std::string::value_type v379 = std::string::append(&v598, (const std::string::value_type *)v377, v378);
                                                                                                                                        long long v380 = *(_OWORD *)&v379->__r_.__value_.__l.__data_;
                                                                                                                                        v599.__r_.__value_.__r.__words[2] = v379->__r_.__value_.__r.__words[2];
                                                                                                                                        *(_OWORD *)&v599.__r_.__value_.__l.__data_ = v380;
                                                                                                                                        v379->__r_.__value_.__l.__size_ = 0;
                                                                                                                                        v379->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                        v379->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                        std::string::basic_string[abi:ne180100]<0>(&v592, "]");
                                                                                                                                        if ((v592.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                          v381 = &v592;
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                          v381 = (std::string *)v592.__r_.__value_.__r.__words[0];
                                                                                                                                        }
                                                                                                                                        if ((v592.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                                                                                                                          std::string::size_type v382 = HIBYTE(v592.__r_.__value_.__r.__words[2]);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                          std::string::size_type v382 = v592.__r_.__value_.__l.__size_;
                                                                                                                                        }
                                                                                                                                        std::string::size_type v383 = std::string::append(&v599, (const std::string::value_type *)v381, v382);
                                                                                                                                        long long v384 = *(_OWORD *)&v383->__r_.__value_.__l.__data_;
                                                                                                                                        *(void *)&v588[16] = *((void *)&v383->__r_.__value_.__l + 2);
                                                                                                                                        *(_OWORD *)std::string::size_type v588 = v384;
                                                                                                                                        v383->__r_.__value_.__l.__size_ = 0;
                                                                                                                                        v383->__r_.__value_.__r.__words[2] = 0;
                                                                                                                                        v383->__r_.__value_.__r.__words[0] = 0;
                                                                                                                                        if (SHIBYTE(v592.__r_.__value_.__r.__words[2]) < 0)
                                                                                                                                        {
                                                                                                                                          operator delete(v592.__r_.__value_.__l.__data_);
                                                                                                                                          if ((SHIBYTE(v599.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                          {
LABEL_1038:
                                                                                                                                            if ((SHIBYTE(v593.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                              goto LABEL_1039;
                                                                                                                                            }
                                                                                                                                            goto LABEL_1044;
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        else if ((SHIBYTE(v599.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                        {
                                                                                                                                          goto LABEL_1038;
                                                                                                                                        }
                                                                                                                                        operator delete(v599.__r_.__value_.__l.__data_);
                                                                                                                                        if ((SHIBYTE(v593.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                        {
LABEL_1039:
                                                                                                                                          if ((SHIBYTE(v598.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                            goto LABEL_1040;
                                                                                                                                          }
                                                                                                                                          goto LABEL_1045;
                                                                                                                                        }
LABEL_1044:
                                                                                                                                        operator delete(v593.__r_.__value_.__l.__data_);
                                                                                                                                        if ((SHIBYTE(v598.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                        {
LABEL_1040:
                                                                                                                                          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                            goto LABEL_1041;
                                                                                                                                          }
LABEL_1046:
                                                                                                                                          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_1041:
                                                                                                                                          v599.__r_.__value_.__r.__words[0] = (std::string::size_type)v588;
                                                                                                                                          std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v594, (const void **)v588, (uint64_t)&std::piecewise_construct, (long long **)&v599);
                                                                                                                                          boost::any::operator=<unsigned char>();
                                                                                                                                        }
LABEL_1045:
                                                                                                                                        operator delete(v598.__r_.__value_.__l.__data_);
                                                                                                                                        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                          goto LABEL_1041;
                                                                                                                                        }
                                                                                                                                        goto LABEL_1046;
                                                                                                                                      }
                                                                                                                                      goto LABEL_971;
                                                                                                                                    }
                                                                                                                                    goto LABEL_957;
                                                                                                                                  }
LABEL_951:
                                                                                                                                  std::string::value_type v323 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                  if (v323)
                                                                                                                                  {
                                                                                                                                    std::string::size_type v324 = v323;
                                                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v324, OS_LOG_TYPE_INFO))
                                                                                                                                    {
                                                                                                                                      std::string::size_type v325 = v6;
                                                                                                                                      if (*(char *)(v6 + 23) < 0) {
                                                                                                                                        std::string::size_type v325 = *(void *)v6;
                                                                                                                                      }
                                                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v325;
                                                                                                                                      _os_log_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                  {
                                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                                  }
                                                                                                                                  if (*(char *)(RcpHostContext::sRcpHostContext + 503) < 0) {
                                                                                                                                    std::string::__init_copy_ctor_external(v572, *(const std::string::value_type **)(RcpHostContext::sRcpHostContext + 480), *(void *)(RcpHostContext::sRcpHostContext + 488));
                                                                                                                                  }
                                                                                                                                  else {
                                                                                                                                    v572[0] = *(std::string *)(RcpHostContext::sRcpHostContext + 480);
                                                                                                                                  }
                                                                                                                                  std::string::size_type v345 = HIBYTE(v572[0].__r_.__value_.__r.__words[2]);
                                                                                                                                  if ((v572[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                                                                                                                    std::string::size_type v345 = v572[0].__r_.__value_.__l.__size_;
                                                                                                                                  }
                                                                                                                                  if (v345) {
                                                                                                                                    boost::any::any<std::string &>();
                                                                                                                                  }
                                                                                                                                  if ((*((unsigned char *)&v572[0].__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_987:
                                                                                                                                  }
                                                                                                                                    operator delete(v572[0].__r_.__value_.__l.__data_);
LABEL_316:
                                                                                                                                  operator new();
                                                                                                                                }
LABEL_945:
                                                                                                                                std::string::size_type v320 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                if (v320)
                                                                                                                                {
                                                                                                                                  v321 = v320;
                                                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v321, OS_LOG_TYPE_INFO))
                                                                                                                                  {
                                                                                                                                    std::string::size_type v322 = v6;
                                                                                                                                    if (*(char *)(v6 + 23) < 0) {
                                                                                                                                      std::string::size_type v322 = *(void *)v6;
                                                                                                                                    }
                                                                                                                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v322;
                                                                                                                                    _os_log_impl((void *)&_mh_execute_header, v321, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                {
                                                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                                                }
                                                                                                                                VersionString = (char *)otGetVersionString();
                                                                                                                                std::string::basic_string[abi:ne180100]<0>(v572, VersionString);
                                                                                                                                std::string::size_type v335 = HIBYTE(v572[0].__r_.__value_.__r.__words[2]);
                                                                                                                                if ((v572[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                                                                                                                  std::string::size_type v335 = v572[0].__r_.__value_.__l.__size_;
                                                                                                                                }
                                                                                                                                if (v335) {
                                                                                                                                  boost::any::any<std::string &>();
                                                                                                                                }
                                                                                                                                if ((*((unsigned char *)&v572[0].__r_.__value_.__s + 23) & 0x80) != 0) {
                                                                                                                                  goto LABEL_987;
                                                                                                                                }
                                                                                                                                goto LABEL_316;
                                                                                                                              }
LABEL_926:
                                                                                                                              v317 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                              if (v317)
                                                                                                                              {
                                                                                                                                v318 = v317;
                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v318, OS_LOG_TYPE_INFO))
                                                                                                                                {
                                                                                                                                  std::string::size_type v319 = v6;
                                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                                    std::string::size_type v319 = *(void *)v6;
                                                                                                                                  }
                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v319;
                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v318, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                }
                                                                                                                              }
                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                              {
                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                              }
                                                                                                                              v588[0] = 0;
                                                                                                                              otLinkGetJoinerRssiHistogram(*(void *)(v7 + 224), v588);
                                                                                                                              HostInterpreter::GetJoinerRssiHistogramAsValMap(v588[0], (uint64_t)v572);
                                                                                                                              boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                                            }
LABEL_913:
                                                                                                                            v306 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                            if (v306)
                                                                                                                            {
                                                                                                                              std::string::value_type v307 = v306;
                                                                                                                              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v307, OS_LOG_TYPE_INFO))
                                                                                                                              {
                                                                                                                                std::string::size_type v314 = v6;
                                                                                                                                if (*(char *)(v6 + 23) < 0) {
                                                                                                                                  std::string::size_type v314 = *(void *)v6;
                                                                                                                                }
                                                                                                                                LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v314;
                                                                                                                                _os_log_impl((void *)&_mh_execute_header, v307, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                              }
                                                                                                                            }
                                                                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                            {
                                                                                                                              -[PowerEventHandler_Rcp init:]();
                                                                                                                            }
                                                                                                                            if (!otPlatVendorGetRadioCounters(*(void *)(v7 + 224), (uint64_t)v594, v308, v309, v310, v311, v312, v313)) {
                                                                                                                              HostInterpreter::GetVendorRadioCountersAsValMap((uint64_t)v572);
                                                                                                                            }
                                                                                                                            goto LABEL_316;
                                                                                                                          }
LABEL_919:
                                                                                                                          otLinkGetCslRequestAhead(*(void *)(v7 + 224));
                                                                                                                          std::string::value_type v315 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                          if (v315)
                                                                                                                          {
                                                                                                                            std::string::size_type v316 = v315;
                                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v316, OS_LOG_TYPE_INFO))
                                                                                                                            {
                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vendor:csl:tx:schedframe:reqahead:timeinus";
                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v316, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                                                                                                                            }
                                                                                                                          }
                                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                          {
                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                          }
                                                                                                                          operator new();
                                                                                                                        }
LABEL_908:
                                                                                                                        *(_DWORD *)v594 = 0;
                                                                                                                        if (!otPlatRadioGetMinInterframeDelay(*(void *)(v7 + 224), (uint64_t)v594, v46, v47, v48, v49, v50, v51))
                                                                                                                        {
                                                                                                                          v305 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                          if (v305)
                                                                                                                          {
                                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v305, OS_LOG_TYPE_INFO))
                                                                                                                            {
                                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vendor:min:mac:interframedelay";
                                                                                                                              _os_log_impl((void *)&_mh_execute_header, v305, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                                                                                                                            }
                                                                                                                          }
                                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                          {
                                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                                          }
                                                                                                                          operator new();
                                                                                                                        }
                                                                                                                        goto LABEL_316;
                                                                                                                      }
LABEL_904:
                                                                                                                      otLinkGetMleAdvTxNum(*(void *)(v7 + 224));
                                                                                                                      std::string::value_type v303 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                      if (v303)
                                                                                                                      {
                                                                                                                        std::string::size_type v304 = v303;
                                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v304, OS_LOG_TYPE_INFO))
                                                                                                                        {
                                                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vendor:mle:adv:tx:num";
                                                                                                                          _os_log_impl((void *)&_mh_execute_header, v304, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                      {
                                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                                      }
                                                                                                                      operator new();
                                                                                                                    }
LABEL_890:
                                                                                                                    std::string::value_type v294 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                    if (v294)
                                                                                                                    {
                                                                                                                      v295 = v294;
                                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v295, OS_LOG_TYPE_INFO))
                                                                                                                      {
                                                                                                                        std::string::size_type v302 = v6;
                                                                                                                        if (*(char *)(v6 + 23) < 0) {
                                                                                                                          std::string::size_type v302 = *(void *)v6;
                                                                                                                        }
                                                                                                                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                        *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v302;
                                                                                                                        _os_log_impl((void *)&_mh_execute_header, v295, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                      }
                                                                                                                    }
                                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                    {
                                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                                    }
                                                                                                                    if (!otPlatVendorGetRadioStats(*(void *)(v7 + 224), (uint64_t)v572, v296, v297, v298, v299, v300, v301)) {
                                                                                                                      HostInterpreter::GetVendorRadioStatsAsValMap((uint64_t)v594);
                                                                                                                    }
                                                                                                                    goto LABEL_316;
                                                                                                                  }
LABEL_881:
                                                                                                                  std::string::value_type v291 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                  if (v291)
                                                                                                                  {
                                                                                                                    v292 = v291;
                                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v292, OS_LOG_TYPE_INFO))
                                                                                                                    {
                                                                                                                      std::string::size_type v293 = v6;
                                                                                                                      if (*(char *)(v6 + 23) < 0) {
                                                                                                                        std::string::size_type v293 = *(void *)v6;
                                                                                                                      }
                                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v293;
                                                                                                                      _os_log_impl((void *)&_mh_execute_header, v292, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                    }
                                                                                                                  }
                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                  {
                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                  }
                                                                                                                  otLinkGetCounters(*(void *)(v7 + 224));
                                                                                                                  HostInterpreter::GetMacCountersAsValMap((uint64_t)v572);
                                                                                                                }
LABEL_874:
                                                                                                                otThreadGetIp6Counters(*(void *)(v7 + 224));
                                                                                                                HostInterpreter::GetOtIpCountersAsValMap((uint64_t)v572);
                                                                                                              }
LABEL_875:
                                                                                                              v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                                                                              v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                                                                                              v572[0].__r_.__value_.__r.__words[2] = 0;
                                                                                                              HostInterpreter::GetNeighborTriggerBasedCounters(v7);
                                                                                                              v289 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                              if (v289)
                                                                                                              {
                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v289, OS_LOG_TYPE_INFO))
                                                                                                                {
                                                                                                                  std::string::size_type v290 = v6;
                                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                                    std::string::size_type v290 = *(void *)v6;
                                                                                                                  }
                                                                                                                  *(_DWORD *)v594 = 136315138;
                                                                                                                  *(void *)&v594[4] = v290;
                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v289, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", v594, 0xCu);
                                                                                                                }
                                                                                                              }
                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                              {
                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                              }
                                                                                                              boost::any::any<std::list<std::map<std::string,boost::any>> &>();
                                                                                                            }
LABEL_870:
                                                                                                            otThreadGetMleCounters(*(void *)(v7 + 224));
                                                                                                            HostInterpreter::GetMleOtCountersAsValMap((uint64_t **)v572);
                                                                                                          }
LABEL_861:
                                                                                                          otThreadGetMleLinkLossCounters(*(void *)(v7 + 224));
                                                                                                          v286 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                          if (v286)
                                                                                                          {
                                                                                                            v287 = v286;
                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v287, OS_LOG_TYPE_INFO))
                                                                                                            {
                                                                                                              std::string::size_type v288 = v6;
                                                                                                              if (*(char *)(v6 + 23) < 0) {
                                                                                                                std::string::size_type v288 = *(void *)v6;
                                                                                                              }
                                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v288;
                                                                                                              _os_log_impl((void *)&_mh_execute_header, v287, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                            }
                                                                                                          }
                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                          {
                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                          }
                                                                                                          *(_OWORD *)&v572[0].__r_.__value_.__r.__words[1] = 0uLL;
                                                                                                          v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v572[0].__r_.__value_.__l.__size_;
                                                                                                          std::string::basic_string[abi:ne180100]<0>(v594, "link_loss_nbr_child_count");
                                                                                                          *(void *)std::string::size_type v588 = v594;
                                                                                                          std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v572, (const void **)v594, (uint64_t)&std::piecewise_construct, (_OWORD **)v588);
                                                                                                          boost::any::operator=<unsigned short>();
                                                                                                        }
LABEL_843:
                                                                                                        otThreadGetBbrCounters(*(void *)(v7 + 224));
                                                                                                        v283 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                        if (v283)
                                                                                                        {
                                                                                                          v284 = v283;
                                                                                                          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
                                                                                                          {
                                                                                                            std::string::size_type v285 = v6;
                                                                                                            if (*(char *)(v6 + 23) < 0) {
                                                                                                              std::string::size_type v285 = *(void *)v6;
                                                                                                            }
                                                                                                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                            *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v285;
                                                                                                            _os_log_impl((void *)&_mh_execute_header, v284, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                          }
                                                                                                        }
                                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                        {
                                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                                        }
                                                                                                        *(_OWORD *)&v572[0].__r_.__value_.__r.__words[1] = 0uLL;
                                                                                                        v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v572[0].__r_.__value_.__l.__size_;
                                                                                                        std::string::basic_string[abi:ne180100]<0>(v594, "bbr_primary_count");
                                                                                                        *(void *)std::string::size_type v588 = v594;
                                                                                                        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v572, (const void **)v594, (uint64_t)&std::piecewise_construct, (_OWORD **)v588);
                                                                                                        boost::any::operator=<unsigned short>();
                                                                                                      }
LABEL_828:
                                                                                                      v277 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                      if (v277)
                                                                                                      {
                                                                                                        v278 = v277;
                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
                                                                                                        {
                                                                                                          std::string::size_type v279 = v6;
                                                                                                          if (*(char *)(v6 + 23) < 0) {
                                                                                                            std::string::size_type v279 = *(void *)v6;
                                                                                                          }
                                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v279;
                                                                                                          _os_log_impl((void *)&_mh_execute_header, v278, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                        }
                                                                                                      }
                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                      {
                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                      }
                                                                                                      v588[0] = 0;
                                                                                                      v599.__r_.__value_.__s.__data_[0] = 0;
                                                                                                      otThreadGetConnectedChildNodesHistogram(*(void *)(v7 + 224), v588);
                                                                                                      otThreadGetConnectedRouterNodesHistogram(*(void *)(v7 + 224), (unsigned __int8 *)&v599);
                                                                                                      HostInterpreter::GetNeighborsCountAsValMap(v588[0], v599.__r_.__value_.__s.__data_[0], (uint64_t)v572);
                                                                                                      boost::any::any<std::map<std::string,boost::any> &>();
                                                                                                    }
LABEL_834:
                                                                                                    v280 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                    if (v280)
                                                                                                    {
                                                                                                      v281 = v280;
                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v281, OS_LOG_TYPE_INFO))
                                                                                                      {
                                                                                                        std::string::size_type v282 = v6;
                                                                                                        if (*(char *)(v6 + 23) < 0) {
                                                                                                          std::string::size_type v282 = *(void *)v6;
                                                                                                        }
                                                                                                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                        *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v282;
                                                                                                        _os_log_impl((void *)&_mh_execute_header, v281, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                      }
                                                                                                    }
                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                    {
                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                    }
                                                                                                    HostInterpreter::GetLeaderReelectCountersAsValMap((uint64_t)v572);
                                                                                                  }
LABEL_823:
                                                                                                  if (!otPlatVendorGenerateStackOverflow(*(void *)(v7 + 224), v39, v40, v41, v42, v43, v44, v45))
                                                                                                  {
                                                                                                    v275 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                    if (v275)
                                                                                                    {
                                                                                                      std::string::value_type v276 = v275;
                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v276, OS_LOG_TYPE_INFO))
                                                                                                      {
                                                                                                        LOWORD(v572[0].__r_.__value_.__l.__data_) = 0;
                                                                                                        _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_INFO, "StackOverflow", (uint8_t *)v572, 2u);
                                                                                                      }
                                                                                                    }
                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                    {
                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                    }
                                                                                                    std::string::basic_string[abi:ne180100]<0>(v572, "StackOverflow triggered");
                                                                                                    operator new();
                                                                                                  }
                                                                                                  goto LABEL_316;
                                                                                                }
LABEL_814:
                                                                                                if (!otPlatVendorGenerateHardFault(*(void *)(v7 + 224), v32, v33, v34, v35, v36, v37, v38))
                                                                                                {
                                                                                                  std::string::size_type v273 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                  if (v273)
                                                                                                  {
                                                                                                    v274 = v273;
                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v274, OS_LOG_TYPE_INFO))
                                                                                                    {
                                                                                                      LOWORD(v572[0].__r_.__value_.__l.__data_) = 0;
                                                                                                      _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_INFO, "HardFault", (uint8_t *)v572, 2u);
                                                                                                    }
                                                                                                  }
                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                  {
                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                  }
                                                                                                  std::string::basic_string[abi:ne180100]<0>(v572, "Hard fault triggered");
                                                                                                  operator new();
                                                                                                }
                                                                                                goto LABEL_316;
                                                                                              }
LABEL_806:
                                                                                              *(_DWORD *)v594 = 0;
                                                                                              if (!otPlatVendorGenerateAssert(*(void *)(v7 + 224), (uint64_t)v594, v26, v27, v28, v29, v30, v31))
                                                                                              {
                                                                                                std::string::value_type v272 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                if (v272)
                                                                                                {
                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v272, OS_LOG_TYPE_INFO))
                                                                                                  {
                                                                                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109120;
                                                                                                    HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = *(_DWORD *)v594;
                                                                                                    _os_log_impl((void *)&_mh_execute_header, v272, OS_LOG_TYPE_INFO, "VendorAssert = %u", (uint8_t *)v572, 8u);
                                                                                                  }
                                                                                                }
                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                {
                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                }
                                                                                                operator new();
                                                                                              }
                                                                                              goto LABEL_316;
                                                                                            }
LABEL_799:
                                                                                            v270 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                            if (v270)
                                                                                            {
                                                                                              v271 = v270;
                                                                                              if (syslog_is_the_mask_enabled(6)
                                                                                                && os_log_type_enabled(v271, OS_LOG_TYPE_INFO))
                                                                                              {
                                                                                                LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Thread:ActiveDataset:Bytes";
                                                                                                _os_log_impl((void *)&_mh_execute_header, v271, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                              }
                                                                                            }
                                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                            {
                                                                                              -[PowerEventHandler_Rcp init:]();
                                                                                            }
                                                                                            if (!otDatasetGetActiveTlvs(*(void *)(v7 + 224), v572))
                                                                                            {
                                                                                              nl::Data::Data((nl::Data *)v594, (const unsigned __int8 *)v572, v583);
                                                                                              boost::any::any<nl::Data &>();
                                                                                            }
                                                                                            goto LABEL_316;
                                                                                          }
LABEL_787:
                                                                                          std::string::value_type v268 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                          if (v268)
                                                                                          {
                                                                                            std::string::size_type v269 = v268;
                                                                                            if (syslog_is_the_mask_enabled(6)
                                                                                              && os_log_type_enabled(v269, OS_LOG_TYPE_INFO))
                                                                                            {
                                                                                              LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                              *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:KeyIndex";
                                                                                              _os_log_impl((void *)&_mh_execute_header, v269, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                            }
                                                                                          }
                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                          {
                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                          }
                                                                                          otThreadGetKeySequenceCounter(*(void *)(v7 + 224));
                                                                                          operator new();
                                                                                        }
LABEL_773:
                                                                                        v264 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                        if (v264)
                                                                                        {
                                                                                          std::string::value_type v265 = v264;
                                                                                          if (syslog_is_the_mask_enabled(6)
                                                                                            && os_log_type_enabled(v265, OS_LOG_TYPE_INFO))
                                                                                          {
                                                                                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                            *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:Key";
                                                                                            _os_log_impl((void *)&_mh_execute_header, v265, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                          }
                                                                                        }
                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                        {
                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                        }
                                                                                        otThreadGetNetworkKey(*(void *)(v7 + 224), (uint64_t)v594);
                                                                                        nl::Data::Data((nl::Data *)v572, v594, 0x10uLL);
                                                                                        boost::any::any<nl::Data &>();
                                                                                      }
LABEL_764:
                                                                                      std::string::basic_string[abi:ne180100]<0>(v594, "not-implemented");
                                                                                      v261 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                      if (v261)
                                                                                      {
                                                                                        if (syslog_is_the_mask_enabled(6)
                                                                                          && os_log_type_enabled(v261, OS_LOG_TYPE_INFO))
                                                                                        {
                                                                                          int v262 = *(unsigned __int8 *)(v6 + 56);
                                                                                          v263 = v594;
                                                                                          if (v594[23] < 0) {
                                                                                            v263 = *(unsigned char **)v594;
                                                                                          }
                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109634;
                                                                                          HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v262;
                                                                                          LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                                                                          *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"ChannelUtilizationMonitor:State";
                                                                                          WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                                                                                          *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v263;
                                                                                          _os_log_impl((void *)&_mh_execute_header, v261, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s = %s", (uint8_t *)v572, 0x1Cu);
                                                                                        }
                                                                                      }
                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                      {
                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                      }
                                                                                      if (*(unsigned char *)(v6 + 56))
                                                                                      {
                                                                                        std::string::basic_string[abi:ne180100]<0>(v572, "ChannelUtilizationMonitor:State");
                                                                                        boost::any::any<std::string &>();
                                                                                      }
                                                                                      boost::any::any<std::string &>();
                                                                                    }
LABEL_755:
                                                                                    std::string::value_type v256 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                    if (v256)
                                                                                    {
                                                                                      v257 = v256;
                                                                                      if (syslog_is_the_mask_enabled(6)
                                                                                        && os_log_type_enabled(v257, OS_LOG_TYPE_INFO))
                                                                                      {
                                                                                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                        *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Thread:Leader:ExtendedAddress";
                                                                                        _os_log_impl((void *)&_mh_execute_header, v257, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                                                                                      }
                                                                                    }
                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                    {
                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                    }
                                                                                    HostInterpreter::ProcessUpdateLeaderInfo((HostInterpreter *)v7);
                                                                                    *(void *)std::string::size_type v588 = -1;
                                                                                    nl::Data::Data((nl::Data *)v572, v588, 8uLL);
                                                                                    int v266 = *(unsigned __int16 *)(v7 + 152);
                                                                                    if (v266 == (otThreadGetLeaderRouterId(*(void *)(v7 + 224)) & 0x3F) << 10)
                                                                                    {
                                                                                      nl::Data::Data((nl::Data *)v594, (const unsigned __int8 *)(v7 + 154), 8uLL);
                                                                                      if (v572[0].__r_.__value_.__r.__words[0])
                                                                                      {
                                                                                        v572[0].__r_.__value_.__l.__size_ = v572[0].__r_.__value_.__r.__words[0];
                                                                                        operator delete(v572[0].__r_.__value_.__l.__data_);
                                                                                      }
                                                                                      v572[0] = *(std::string *)v594;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v267 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                      if (v267)
                                                                                      {
                                                                                        if (syslog_is_the_mask_enabled(3)
                                                                                          && os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
                                                                                        {
                                                                                          HostInterpreter::ProcessPropertyGet();
                                                                                        }
                                                                                      }
                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                      {
                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                      }
                                                                                    }
                                                                                    boost::any::any<nl::Data &>();
                                                                                  }
LABEL_748:
                                                                                  int LeaderRouterId = otThreadGetLeaderRouterId(*(void *)(v7 + 224));
                                                                                  v254 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                  if (v254)
                                                                                  {
                                                                                    v255 = v254;
                                                                                    if (syslog_is_the_mask_enabled(6)
                                                                                      && os_log_type_enabled(v255, OS_LOG_TYPE_INFO))
                                                                                    {
                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Thread:Leader:RouterID";
                                                                                      WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                                                                      *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1]
                                                                                                + 6) = LeaderRouterId;
                                                                                      _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = %d", (uint8_t *)v572, 0x12u);
                                                                                    }
                                                                                  }
                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                  {
                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                  }
                                                                                  operator new();
                                                                                }
LABEL_741:
                                                                                *(void *)v594 = v594;
                                                                                *(void *)&v594[8] = v594;
                                                                                *(void *)&v594[16] = 0;
                                                                                v252 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                if (v252)
                                                                                {
                                                                                  if (syslog_is_the_mask_enabled(6)
                                                                                    && os_log_type_enabled(v252, OS_LOG_TYPE_INFO))
                                                                                  {
                                                                                    *(_DWORD *)std::string::size_type v588 = 136315138;
                                                                                    *(void *)&v588[4] = "IPv6:AllAddresses";
                                                                                    _os_log_impl((void *)&_mh_execute_header, v252, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", v588, 0xCu);
                                                                                  }
                                                                                }
                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                {
                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                }
                                                                                for (uint64_t i = otIp6GetUnicastAddresses(*(void *)(v7 + 224));
                                                                                      i;
                                                                                      uint64_t i = *(void *)(i + 24))
                                                                                {
                                                                                  otIp6AddressToString(i, (char *)v572, 40);
                                                                                  std::string::basic_string[abi:ne180100]<0>(v588, (char *)v572);
                                                                                  std::string::value_type v259 = operator new(0x28uLL);
                                                                                  v259[1] = *(_OWORD *)v588;
                                                                                  *((void *)v259 + 4) = *(void *)&v588[16];
                                                                                  uint64_t v260 = *(void *)v594;
                                                                                  *(void *)std::string::value_type v259 = *(void *)v594;
                                                                                  *((void *)v259 + 1) = v594;
                                                                                  *(void *)(v260 + 8) = v259;
                                                                                  *(void *)v594 = v259;
                                                                                  ++*(void *)&v594[16];
                                                                                }
                                                                                boost::any::any<std::list<std::string> &>();
                                                                              }
LABEL_734:
                                                                              std::string::value_type v244 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                              if (v244)
                                                                              {
                                                                                v245 = v244;
                                                                                if (syslog_is_the_mask_enabled(6)
                                                                                  && os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
                                                                                {
                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:HardwareAddress";
                                                                                  _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                }
                                                                              }
                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                              {
                                                                                -[PowerEventHandler_Rcp init:]();
                                                                              }
                                                                              *(void *)v594 = 0;
                                                                              otPlatVendorGetAssignedHwMac(*(void *)(v7 + 224), (uint64_t)v594, v246, v247, v248, v249, v250, v251);
                                                                              nl::Data::Data((nl::Data *)v572, v594, 8uLL);
                                                                              boost::any::any<nl::Data &>();
                                                                            }
LABEL_727:
                                                                            *(void *)std::string::size_type v588 = 0;
                                                                            otPlatVendorGetAssignedHwMac(*(void *)(v7 + 224), (uint64_t)v588, v20, v21, v22, v23, v24, v25);
                                                                            snprintf((char *)v572, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", v588[0], v588[1], v588[2], v588[3], v588[4], v588[5], v588[6], v588[7]);
                                                                            v243 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                            if (v243)
                                                                            {
                                                                              if (syslog_is_the_mask_enabled(6)
                                                                                && os_log_type_enabled(v243, OS_LOG_TYPE_INFO))
                                                                              {
                                                                                *(_DWORD *)v594 = 136315394;
                                                                                *(void *)&v594[4] = "vendor:assigned:hw:mac";
                                                                                *(_WORD *)&v594[12] = 2080;
                                                                                *(void *)&v594[14] = v572;
                                                                                _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = %s", v594, 0x16u);
                                                                              }
                                                                            }
                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                            {
                                                                              -[PowerEventHandler_Rcp init:]();
                                                                            }
                                                                            std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                            operator new();
                                                                          }
LABEL_718:
                                                                          otPlatVendorGetDeviceId(*(void *)(v7 + 224), (uint64_t)&v599, v14, v15, v16, v17, v18, v19);
                                                                          snprintf((char *)v572, 0x1EuLL, "%02X%02X%02X%02X%02X%02X%02X%02X", v599.__r_.__value_.__s.__data_[0], v599.__r_.__value_.__s.__data_[1], v599.__r_.__value_.__s.__data_[2], v599.__r_.__value_.__s.__data_[3], v599.__r_.__value_.__s.__data_[4], v599.__r_.__value_.__s.__data_[5], v599.__r_.__value_.__s.__data_[6], v599.__r_.__value_.__s.__data_[7]);
                                                                          std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                          v240 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                          if (v240)
                                                                          {
                                                                            if (syslog_is_the_mask_enabled(6)
                                                                              && os_log_type_enabled(v240, OS_LOG_TYPE_INFO))
                                                                            {
                                                                              std::string::value_type v241 = v594;
                                                                              if (v594[23] < 0) {
                                                                                std::string::value_type v241 = *(unsigned char **)v594;
                                                                              }
                                                                              *(_DWORD *)std::string::size_type v588 = 136315394;
                                                                              *(void *)&v588[4] = "NCP:HardwareSerialNumber";
                                                                              *(_WORD *)&v588[12] = 2080;
                                                                              *(void *)&v588[14] = v241;
                                                                              _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = %s", v588, 0x16u);
                                                                            }
                                                                          }
                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                          {
                                                                            -[PowerEventHandler_Rcp init:]();
                                                                          }
                                                                          boost::any::any<std::string &>();
                                                                        }
LABEL_666:
                                                                        int PanId = otLinkGetPanId(*(void *)(v7 + 224));
                                                                        std::string::value_type v226 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                        if (v226)
                                                                        {
                                                                          v227 = v226;
                                                                          if (syslog_is_the_mask_enabled(6)
                                                                            && os_log_type_enabled(v227, OS_LOG_TYPE_INFO))
                                                                          {
                                                                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                                                            *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:PANID";
                                                                            WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                                                            *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1]
                                                                                      + 6) = PanId;
                                                                            _os_log_impl((void *)&_mh_execute_header, v227, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = 0x%x6", (uint8_t *)v572, 0x12u);
                                                                          }
                                                                        }
                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                        {
                                                                          -[PowerEventHandler_Rcp init:]();
                                                                        }
                                                                        operator new();
                                                                      }
LABEL_659:
                                                                      std::string::value_type v223 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                      if (v223)
                                                                      {
                                                                        v224 = v223;
                                                                        if (syslog_is_the_mask_enabled(6)
                                                                          && os_log_type_enabled(v224, OS_LOG_TYPE_INFO))
                                                                        {
                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:XPANID";
                                                                          _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                        }
                                                                      }
                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                      {
                                                                        -[PowerEventHandler_Rcp init:]();
                                                                      }
                                                                      otThreadGetExtendedPanId(*(void *)(v7 + 224));
                                                                      nl::Data::Data((nl::Data *)v572, v242, 8uLL);
                                                                      boost::any::any<nl::Data &>();
                                                                    }
LABEL_642:
                                                                    otThreadGetNetworkName(*(void *)(v7 + 224));
                                                                    std::string::basic_string[abi:ne180100]<0>(v572, v216);
                                                                    std::string::value_type v217 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                    if (v217)
                                                                    {
                                                                      if (syslog_is_the_mask_enabled(6)
                                                                        && os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
                                                                      {
                                                                        v218 = v572;
                                                                        if ((v572[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                                                          v218 = (std::string *)v572[0].__r_.__value_.__r.__words[0];
                                                                        }
                                                                        *(_DWORD *)v594 = 136315394;
                                                                        *(void *)&v594[4] = "Network:Name";
                                                                        *(_WORD *)&v594[12] = 2080;
                                                                        *(void *)&v594[14] = v218;
                                                                        _os_log_impl((void *)&_mh_execute_header, v217, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = %s", v594, 0x16u);
                                                                      }
                                                                    }
                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                    {
                                                                      -[PowerEventHandler_Rcp init:]();
                                                                    }
                                                                    boost::any::any<std::string &>();
                                                                  }
LABEL_590:
                                                                  RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)v572);
                                                                  v200 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                  if (v200)
                                                                  {
                                                                    if (syslog_is_the_mask_enabled(6)
                                                                      && os_log_type_enabled(v200, OS_LOG_TYPE_INFO))
                                                                    {
                                                                      v201 = v572;
                                                                      if ((v572[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                                                        v201 = (std::string *)v572[0].__r_.__value_.__r.__words[0];
                                                                      }
                                                                      *(_DWORD *)v594 = 136315394;
                                                                      *(void *)&v594[4] = "NCP:State";
                                                                      *(_WORD *)&v594[12] = 2080;
                                                                      *(void *)&v594[14] = v201;
                                                                      _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s = %s", v594, 0x16u);
                                                                    }
                                                                  }
                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                  {
                                                                    -[PowerEventHandler_Rcp init:]();
                                                                  }
                                                                  boost::any::any<std::string &>();
                                                                }
LABEL_586:
                                                                LODWORD(v563[0]) = 0;
                                                                uint64_t v195 = *(void *)(v7 + 8);
                                                                uint64_t v196 = *(void *)(v7 + 16);
                                                                memset(v588, 0, 24);
                                                                std::vector<ServiceEntry>::__init_with_size[abi:ne180100]<ServiceEntry*,ServiceEntry*>(v588, v195, v196, 0xCCCCCCCCCCCCCCCDLL * ((v196 - v195) >> 4));
                                                                v599.__r_.__value_.__r.__words[0] = (std::string::size_type)&v599;
                                                                v599.__r_.__value_.__l.__size_ = (std::string::size_type)&v599;
                                                                v599.__r_.__value_.__r.__words[2] = 0;
                                                                v197 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                if (v197)
                                                                {
                                                                  if (syslog_is_the_mask_enabled(6)
                                                                    && os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
                                                                  {
                                                                    int v199 = *(unsigned __int8 *)(v6 + 56);
                                                                    *(_DWORD *)v594 = 67109378;
                                                                    *(_DWORD *)&v594[4] = v199;
                                                                    *(_WORD *)&v594[8] = 2080;
                                                                    *(void *)&v594[10] = "Thread:Services";
                                                                    _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s", v594, 0x12u);
                                                                  }
                                                                }
                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                {
                                                                  -[PowerEventHandler_Rcp init:]();
                                                                }
                                                                if (!*(unsigned char *)(v6 + 56))
                                                                {
                                                                  uint64_t v222 = *(void *)(v7 + 8);
                                                                  if (v222 != *(void *)(v7 + 16))
                                                                  {
                                                                    *(void *)&long long v562 = &v594[8];
                                                                    *(void *)&long long v198 = 136315394;
                                                                    long long v561 = v198;
                                                                    *(void *)&v594[8] = 0;
                                                                    *(void *)&v594[16] = 0;
                                                                    *(void *)v594 = &v594[8];
                                                                    LODWORD(v593.__r_.__value_.__l.__data_) = *(_DWORD *)(v222 + 12);
                                                                    std::string::basic_string[abi:ne180100]<0>(&v598, "EnterpriseNumber");
                                                                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v598;
                                                                    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v594, (const void **)&v598.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &buf);
                                                                    boost::any::operator=<unsigned int &>();
                                                                  }
                                                                  boost::any::any<std::list<std::map<std::string,boost::any>> &>();
                                                                }
                                                                uint64_t v219 = *(void *)(v7 + 224);
                                                                uint64_t v220 = *(unsigned __int8 *)(v219 + 142952);
                                                                unsigned int v560 = *(unsigned __int8 *)(v219 + 142952);
                                                                update_netdata_maxlength_metric(v220);
                                                                if (v560 < 0xF1) {
                                                                  goto LABEL_678;
                                                                }
                                                                update_netdata_full_metric(1);
                                                                v221 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                if (v221)
                                                                {
                                                                  if (syslog_is_the_mask_enabled(3)
                                                                    && os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
                                                                  {
                                                                    HostInterpreter::ProcessPropertyGet();
                                                                  }
                                                                }
                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                {
                                                                  -[PowerEventHandler_Rcp init:]();
                                                                }
                                                                uint64_t v228 = RcpHostContext::sRcpHostContext;
                                                                std::string::basic_string[abi:ne180100]<0>(v569, "Stability");
                                                                std::string::basic_string[abi:ne180100]<0>(v567, "Network Data Health");
                                                                std::string::basic_string[abi:ne180100]<0>(v565, "Network Data full");
                                                                RcpHostContext::captureABC(v228, (uint64_t)v569, (uint64_t)v567, (uint64_t)v565, 0, 1);
                                                                if (v566 < 0)
                                                                {
                                                                  operator delete(v565[0]);
                                                                  if ((v568 & 0x80000000) == 0)
                                                                  {
LABEL_677:
                                                                    if ((v570 & 0x80000000) == 0)
                                                                    {
LABEL_678:
                                                                      std::string::value_type v229 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                      if (v229)
                                                                      {
                                                                        if (syslog_is_the_mask_enabled(6)
                                                                          && os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
                                                                        {
                                                                          *(_DWORD *)v594 = 67109120;
                                                                          *(_DWORD *)&v594[4] = v560;
                                                                          _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_INFO, "NETDATA_LEN = %d", v594, 8u);
                                                                        }
                                                                      }
                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                      {
                                                                        -[PowerEventHandler_Rcp init:]();
                                                                      }
                                                                      unsigned __int8 v231 = 0;
                                                                      *(void *)&long long v230 = 136315394;
                                                                      long long v559 = v230;
                                                                      *(void *)&long long v230 = 67109120;
                                                                      long long v562 = v230;
                                                                      *(void *)&long long v230 = 136315138;
                                                                      long long v561 = v230;
                                                                      while (1)
                                                                      {
                                                                        uint64_t NextService = otNetDataGetNextService(*(void *)(v7 + 224), (unsigned int *)v563, (uint64_t)v572);
                                                                        if (NextService)
                                                                        {
                                                                          uint64_t v238 = *(void *)v588;
                                                                          uint64_t v239 = *(void *)&v588[8];
                                                                          while (v238 != v239)
                                                                          {
                                                                            if (!*(_DWORD *)(v238 + 8))
                                                                            {
                                                                              HostInterpreter::find_and_erase_service_entry(NextService, 0, *(_DWORD *)(v238 + 12), (const void **)(v238 + 16), (const void **)(v238 + 48), *(unsigned __int16 *)(v238 + 72), (uint64_t *)(v7 + 8));
                                                                              uint64_t v239 = *(void *)&v588[8];
                                                                            }
                                                                            v238 += 80;
                                                                          }
                                                                          HostInterpreter::signal_service_list_change((HostInterpreter *)v7);
                                                                          if (v560 >= 0xF1 && !v231) {
                                                                            HostInterpreter::force_leader_reelection((HostInterpreter *)v7);
                                                                          }
                                                                          std::list<std::map<std::string,boost::any>>::~list((uint64_t *)&v599);
                                                                          std::vector<ServiceEntry>::~vector[abi:ne180100]((void **)v588);
                                                                          return 0;
                                                                        }
                                                                        nl::Data::Data((nl::Data *)&v598, (const unsigned __int8 *)&v572[0].__r_.__value_.__s.__data_[9], v572[0].__r_.__value_.__s.__data_[8]);
                                                                        if (v572[0].__r_.__value_.__s.__data_[8] == 1
                                                                          && v572[0].__r_.__value_.__s.__data_[9] == 93)
                                                                        {
                                                                          v233 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                          ++v231;
                                                                          if (v233)
                                                                          {
                                                                            if (syslog_is_the_mask_enabled(6)
                                                                              && os_log_type_enabled(v233, OS_LOG_TYPE_INFO))
                                                                            {
                                                                              *(_DWORD *)v594 = v562;
                                                                              *(_DWORD *)&v594[4] = v231;
                                                                              _os_log_impl((void *)&_mh_execute_header, v233, OS_LOG_TYPE_INFO, "unicast_service_size_t count = %d", v594, 8u);
                                                                            }
                                                                          }
                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                          {
                                                                            *(_DWORD *)v594 = v559;
                                                                            *(void *)&v594[4] = "com.apple.wpantund.ncp";
                                                                            *(_WORD *)&v594[12] = 2080;
                                                                            *(void *)&v594[14] = "default";
                                                                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v594, 0x16u);
                                                                          }
                                                                        }
                                                                        v234 = nl::Data::Data((nl::Data *)&buf, v586, v585);
                                                                        HostInterpreter::find_and_erase_service_entry((uint64_t)v234, 0, SHIDWORD(v572[0].__r_.__value_.__r.__words[0]), (const void **)&v598.__r_.__value_.__l.__data_, (const void **)&buf.__r_.__value_.__l.__data_, v587, (uint64_t *)v588);
                                                                        uint64_t v235 = ServiceEntry::ServiceEntry((uint64_t)v594, 0, SHIDWORD(v572[0].__r_.__value_.__r.__words[0]), (uint64_t)&v598, v584 & 1, (uint64_t)&buf);
                                                                        if ((HostInterpreter::find_service_entry(v235, 0, SHIDWORD(v572[0].__r_.__value_.__r.__words[0]), (const void **)&v598.__r_.__value_.__l.__data_, (const void **)&buf.__r_.__value_.__l.__data_, v587, (uint64_t *)(v7 + 8)) & 1) == 0)
                                                                        {
                                                                          WORD4(v595) = v587;
                                                                          BYTE10(v595) = v572[0].__r_.__value_.__s.__data_[0];
                                                                          std::vector<ServiceEntry>::push_back[abi:ne180100]((void *)(v7 + 8), (const ServiceEntry *)v594);
                                                                          v236 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                          if (v236)
                                                                          {
                                                                            if (syslog_is_the_mask_enabled(6)
                                                                              && os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
                                                                            {
                                                                              ServiceEntry::get_description((ServiceEntry *)v594);
                                                                            }
                                                                          }
                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                          {
                                                                            LODWORD(v593.__r_.__value_.__l.__data_) = v559;
                                                                            *(std::string::size_type *)((char *)v593.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
                                                                            WORD2(v593.__r_.__value_.__r.__words[1]) = 2080;
                                                                            *(std::string::size_type *)((char *)&v593.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
                                                                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", (uint8_t *)&v593, 0x16u);
                                                                            ServiceEntry::~ServiceEntry((ServiceEntry *)v594);
                                                                            v237 = (void *)buf.__r_.__value_.__r.__words[0];
                                                                            if (!buf.__r_.__value_.__r.__words[0]) {
                                                                              goto LABEL_702;
                                                                            }
LABEL_701:
                                                                            buf.__r_.__value_.__l.__size_ = (std::string::size_type)v237;
                                                                            operator delete(v237);
                                                                            goto LABEL_702;
                                                                          }
                                                                        }
                                                                        ServiceEntry::~ServiceEntry((ServiceEntry *)v594);
                                                                        v237 = (void *)buf.__r_.__value_.__r.__words[0];
                                                                        if (buf.__r_.__value_.__r.__words[0]) {
                                                                          goto LABEL_701;
                                                                        }
LABEL_702:
                                                                        if (v598.__r_.__value_.__r.__words[0])
                                                                        {
                                                                          v598.__r_.__value_.__l.__size_ = v598.__r_.__value_.__r.__words[0];
                                                                          operator delete(v598.__r_.__value_.__l.__data_);
                                                                        }
                                                                      }
                                                                    }
LABEL_717:
                                                                    operator delete(v569[0]);
                                                                    goto LABEL_678;
                                                                  }
                                                                }
                                                                else if ((v568 & 0x80000000) == 0)
                                                                {
                                                                  goto LABEL_677;
                                                                }
                                                                operator delete(v567[0]);
                                                                if ((v570 & 0x80000000) == 0) {
                                                                  goto LABEL_678;
                                                                }
                                                                goto LABEL_717;
                                                              }
LABEL_582:
                                                              LODWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                              int Rloc16 = otThreadGetRloc16(*(void *)(v7 + 224));
                                                              memset(v594, 0, sizeof(v594));
                                                              long long v595 = 0u;
                                                              memset(v596, 0, sizeof(v596));
                                                              v193 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                              if (v193)
                                                              {
                                                                std::string::value_type v194 = v193;
                                                                if (syslog_is_the_mask_enabled(6)
                                                                  && os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
                                                                {
                                                                  *(_DWORD *)std::string::size_type v588 = 136315138;
                                                                  *(void *)&v588[4] = "nm:networkdata";
                                                                  _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(1)]: %s", v588, 0xCu);
                                                                }
                                                              }
                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                              {
                                                                -[PowerEventHandler_Rcp init:]();
                                                              }
                                                              LODWORD(v562) = otThreadGetPartitionId(*(void *)(v7 + 224));
                                                              uint64_t v202 = *(void *)(v7 + 224);
                                                              LODWORD(v561) = *(unsigned __int8 *)(v202 + 142952);
                                                              unsigned __int16 v203 = 0;
                                                              if (otNetDataGetNextService(v202, (unsigned int *)&buf, (uint64_t)v572))
                                                              {
                                                                unsigned __int8 v204 = 0;
                                                                unsigned __int8 v205 = 0;
                                                              }
                                                              else
                                                              {
                                                                unsigned __int8 v206 = 0;
                                                                unsigned __int8 v204 = 0;
                                                                unsigned __int8 v205 = 0;
                                                                do
                                                                {
                                                                  nl::Data::Data((nl::Data *)v588, (const unsigned __int8 *)&v572[0].__r_.__value_.__s.__data_[9], v572[0].__r_.__value_.__s.__data_[8]);
                                                                  if (v572[0].__r_.__value_.__s.__data_[8] == 1
                                                                    && v572[0].__r_.__value_.__s.__data_[9] == 93)
                                                                  {
                                                                    ++v204;
                                                                  }
                                                                  else if (v572[0].__r_.__value_.__s.__data_[8] == 2 {
                                                                         && v572[0].__r_.__value_.__s.__data_[9] == 92)
                                                                  }
                                                                  {
                                                                    ++v203;
                                                                    if (v206)
                                                                    {
                                                                      uint64_t v207 = v206;
                                                                      v208 = v594;
                                                                      uint64_t v209 = v206;
                                                                      while (1)
                                                                      {
                                                                        int v210 = *v208++;
                                                                        if (v210 == v572[0].__r_.__value_.__s.__data_[10]) {
                                                                          break;
                                                                        }
                                                                        if (!--v209) {
                                                                          goto LABEL_612;
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      uint64_t v207 = 0;
LABEL_612:
                                                                      v594[v207] = v572[0].__r_.__value_.__s.__data_[10];
                                                                      ++v206;
                                                                      ++v205;
                                                                    }
                                                                  }
                                                                  if (*(void *)v588)
                                                                  {
                                                                    *(void *)&v588[8] = *(void *)v588;
                                                                    operator delete(*(void **)v588);
                                                                  }
                                                                }
                                                                while (!otNetDataGetNextService(*(void *)(v7 + 224), (unsigned int *)&buf, (uint64_t)v572));
                                                                if (v205 >= 2u)
                                                                {
                                                                  HostInterpreter::setRcpSrpAnycastServiceCovergenceTimer((HostInterpreter *)v7);
                                                                  goto LABEL_619;
                                                                }
                                                              }
                                                              HostInterpreter::clearRcpSrpAnycastServiceCovergenceTimer((dispatch_source_t *)v7);
LABEL_619:
                                                              LODWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                              if (otNetDataGetNextOnMeshPrefix(*(void *)(v7 + 224), (unsigned int *)&buf, (uint64_t)&v599))
                                                              {
                                                                unsigned __int8 v211 = 0;
                                                                int v212 = 0;
                                                              }
                                                              else
                                                              {
                                                                char v213 = 0;
                                                                unsigned __int8 v211 = 0;
                                                                do
                                                                {
                                                                  ++v211;
                                                                  v213 |= Rloc16 == WORD2(v599.__r_.__value_.__r.__words[2]);
                                                                }
                                                                while (!otNetDataGetNextOnMeshPrefix(*(void *)(v7 + 224), (unsigned int *)&buf, (uint64_t)&v599));
                                                                int v212 = v213 & 1;
                                                              }
                                                              if (*(_WORD *)(v7 + 162) != v204
                                                                || *(unsigned __int16 *)(v7 + 164) != v203
                                                                || *(_WORD *)(v7 + 166) != v211)
                                                              {
                                                                std::string::value_type v214 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                if (v214)
                                                                {
                                                                  if (syslog_is_the_mask_enabled(6)
                                                                    && os_log_type_enabled(v214, OS_LOG_TYPE_INFO))
                                                                  {
                                                                    *(_DWORD *)std::string::size_type v588 = 67110144;
                                                                    *(_WORD *)&v588[8] = 1024;
                                                                    *(_DWORD *)&v588[10] = v203;
                                                                    *(_WORD *)&v588[14] = 1024;
                                                                    *(_DWORD *)&v588[4] = v204;
                                                                    *(_DWORD *)&v588[16] = v211;
                                                                    *(_WORD *)&v588[20] = 1024;
                                                                    *(_DWORD *)&v588[22] = v205;
                                                                    __int16 v589 = 1024;
                                                                    int v590 = v212;
                                                                    _os_log_impl((void *)&_mh_execute_header, v214, OS_LOG_TYPE_INFO, "NetData: numUnicastServices = %d, numAnycastServices = %d, numOnmeshPrefixes = %d, numAnycastServicesUniqueSeq = %d, myOnmeshPrefixAdvertised = %d", v588, 0x20u);
                                                                  }
                                                                }
                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                {
                                                                  -[PowerEventHandler_Rcp init:]();
                                                                }
                                                                *(_WORD *)(v7 + 162) = v204;
                                                                *(_WORD *)(v7 + 164) = v203;
                                                                *(_WORD *)(v7 + 166) = v211;
                                                              }
                                                              if (!(v205 | v204) || v211) {
                                                                HostInterpreter::clearSrpAdvertisedWithoutPrefixTimer((dispatch_source_t *)v7);
                                                              }
                                                              else {
                                                                HostInterpreter::setSrpAdvertisedWithoutPrefixTimer((HostInterpreter *)v7);
                                                              }
                                                              std::string::basic_string[abi:ne180100]<0>(v588, "is_primary_resident");
                                                              v598.__r_.__value_.__r.__words[0] = (std::string::size_type)v588;
                                                              v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)v588, (uint64_t)&std::piecewise_construct, &v598);
                                                              std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v215 + 7, "1");
                                                              if ((v588[23] & 0x80000000) != 0) {
                                                                operator delete(*(void **)v588);
                                                              }
                                                              operator new();
                                                            }
LABEL_579:
                                                            v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                            v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                                            v572[0].__r_.__value_.__r.__words[2] = 0;
                                                            uint64_t v191 = *(void *)(v7 + 80);
                                                            if (v191 != v7 + 88)
                                                            {
                                                              *(void *)&v594[8] = 0;
                                                              *(void *)&v594[16] = 0;
                                                              *(void *)v594 = &v594[8];
                                                              IPv6Prefix::to_string((const in6_addr *)(v191 + 28), v588);
                                                              std::string::basic_string[abi:ne180100]<0>(&v599, "address");
                                                              v598.__r_.__value_.__r.__words[0] = (std::string::size_type)&v599;
                                                              std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v594, (const void **)&v599.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v598);
                                                              boost::any::operator=<std::string>();
                                                            }
                                                            boost::any::any<std::list<std::map<std::string,boost::any>> &>();
                                                          }
LABEL_570:
                                                          v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                          v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                                          v572[0].__r_.__value_.__r.__words[2] = 0;
                                                          v184 = *(void **)(v7 + 56);
                                                          v185 = (void *)(v7 + 64);
                                                          if (v184 != v185)
                                                          {
                                                            do
                                                            {
                                                              OnMeshPrefixEntry::get_description((OnMeshPrefixEntry *)(v184 + 6), (const in6_addr *)((char *)v184 + 28), 1, v594);
                                                              std::string::value_type v186 = operator new(0x28uLL);
                                                              v186[1] = *(_OWORD *)v594;
                                                              *((void *)v186 + 4) = *(void *)&v594[16];
                                                              std::string::size_type v187 = v572[0].__r_.__value_.__r.__words[0];
                                                              *(void *)std::string::value_type v186 = v572[0].__r_.__value_.__r.__words[0];
                                                              *((void *)v186 + 1) = v572;
                                                              *(void *)(v187 + 8) = v186;
                                                              v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
                                                              ++v572[0].__r_.__value_.__r.__words[2];
                                                              v188 = (void *)v184[1];
                                                              if (v188)
                                                              {
                                                                do
                                                                {
                                                                  v189 = v188;
                                                                  v188 = (void *)*v188;
                                                                }
                                                                while (v188);
                                                              }
                                                              else
                                                              {
                                                                do
                                                                {
                                                                  v189 = (void *)v184[2];
                                                                  BOOL v190 = *v189 == (void)v184;
                                                                  v184 = v189;
                                                                }
                                                                while (!v190);
                                                              }
                                                              v184 = v189;
                                                            }
                                                            while (v189 != v185);
                                                          }
                                                          boost::any::any<std::list<std::string> &>();
                                                        }
LABEL_569:
                                                        HostInterpreter::get_num_unique_off_mesh_routes((HostInterpreter *)v7);
                                                        operator new();
                                                      }
LABEL_568:
                                                      HostInterpreter::get_num_routers((HostInterpreter *)v7);
                                                      operator new();
                                                    }
LABEL_567:
                                                    HostInterpreter::get_num_unique_on_mesh_prefixes((HostInterpreter *)v7);
                                                    operator new();
                                                  }
LABEL_557:
                                                  *(void *)&v594[16] = 0;
                                                  *(void *)&v594[8] = 0;
                                                  *(void *)v594 = &v594[8];
                                                  memset(v588, 0, 24);
                                                  memset(&v599, 0, sizeof(v599));
                                                  memset(&v598, 0, sizeof(v598));
                                                  StringCFStringRef Value = getStringValue("is_primary_resident");
                                                  if (StringValue) {
                                                    v179 = (const std::string::value_type *)StringValue;
                                                  }
                                                  else {
                                                    v179 = "0";
                                                  }
                                                  std::string::assign((std::string *)v588, v179);
                                                  std::string::value_type v180 = getStringValue("is_primary_resident_thread_capable");
                                                  if (v180) {
                                                    v181 = (const std::string::value_type *)v180;
                                                  }
                                                  else {
                                                    v181 = "0";
                                                  }
                                                  std::string::assign(&v599, v181);
                                                  v182 = getStringValue("primary_resident_info");
                                                  if (v182) {
                                                    std::string::value_type v183 = (const std::string::value_type *)v182;
                                                  }
                                                  else {
                                                    std::string::value_type v183 = "0";
                                                  }
                                                  std::string::assign(&v598, v183);
                                                  std::string::basic_string[abi:ne180100]<0>(v572, "is_primary_resident");
                                                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                                  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v594, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &buf);
                                                  boost::any::operator=<std::string &>();
                                                }
LABEL_547:
                                                *(_OWORD *)&v572[0].__r_.__value_.__r.__words[1] = 0uLL;
                                                v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v572[0].__r_.__value_.__l.__size_;
                                                memset(v594, 0, 24);
                                                memset(v588, 0, 24);
                                                memset(&v599, 0, sizeof(v599));
                                                v172 = getStringValue("num_daemon_restart_due_to_reboots");
                                                if (v172) {
                                                  v173 = (const std::string::value_type *)v172;
                                                }
                                                else {
                                                  v173 = "0";
                                                }
                                                std::string::assign((std::string *)v594, v173);
                                                std::string::value_type v174 = getStringValue("num_daemon_restart_due_to_crashes_or_jetsams");
                                                if (v174) {
                                                  v175 = (const std::string::value_type *)v174;
                                                }
                                                else {
                                                  v175 = "0";
                                                }
                                                std::string::assign((std::string *)v588, v175);
                                                v176 = getStringValue("num_firmware_resets");
                                                if (v176) {
                                                  std::string::value_type v177 = (const std::string::value_type *)v176;
                                                }
                                                else {
                                                  std::string::value_type v177 = "0";
                                                }
                                                std::string::assign(&v599, v177);
                                                std::string::basic_string[abi:ne180100]<0>(&v598, "num_daemon_restart_due_to_reboots");
                                                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v598;
                                                std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v572, (const void **)&v598.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &buf);
                                                boost::any::operator=<std::string &>();
                                              }
LABEL_525:
                                              *(_OWORD *)&v572[0].__r_.__value_.__r.__words[1] = 0uLL;
                                              v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v572[0].__r_.__value_.__l.__size_;
                                              memset(v594, 0, 24);
                                              memset(v588, 0, 24);
                                              memset(&v599, 0, sizeof(v599));
                                              std::string::value_type v165 = getStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
                                              if (v165) {
                                                v166 = (const std::string::value_type *)v165;
                                              }
                                              else {
                                                v166 = "0";
                                              }
                                              std::string::assign((std::string *)v594, v166);
                                              v167 = getStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
                                              if (v167) {
                                                std::string::value_type v168 = (const std::string::value_type *)v167;
                                              }
                                              else {
                                                std::string::value_type v168 = "0";
                                              }
                                              std::string::assign((std::string *)v588, v168);
                                              v169 = getStringValue("ca_trigger_based_counters_num_firmware_resets");
                                              if (v169) {
                                                v170 = (const std::string::value_type *)v169;
                                              }
                                              else {
                                                v170 = "0";
                                              }
                                              std::string::assign(&v599, v170);
                                              std::string::basic_string[abi:ne180100]<0>(&v598, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
                                              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v598;
                                              std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v572, (const void **)&v598.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &buf);
                                              boost::any::operator=<std::string &>();
                                            }
LABEL_488:
                                            operator new();
                                          }
                                          goto LABEL_466;
                                        }
LABEL_450:
                                        ThreadNetifName = otSysGetThreadNetifName();
                                        std::string::basic_string[abi:ne180100]<0>(v594, ThreadNetifName);
                                        v145 = log_get_logging_obg("com.apple.threadradiod", "default");
                                        if (v145)
                                        {
                                          if (syslog_is_the_mask_enabled(6)
                                            && os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
                                          {
                                            int v146 = *(unsigned __int8 *)(v6 + 56);
                                            std::string::value_type v147 = v594;
                                            if (v594[23] < 0) {
                                              std::string::value_type v147 = *(unsigned char **)v594;
                                            }
                                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109634;
                                            HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v146;
                                            LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                            *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Config:TUN:InterfaceName";
                                            WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                                            *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v147;
                                            _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s = [%s]", (uint8_t *)v572, 0x1Cu);
                                          }
                                        }
                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          -[PowerEventHandler_Rcp init:]();
                                        }
                                        if (*(unsigned char *)(v6 + 56))
                                        {
                                          std::string::basic_string[abi:ne180100]<0>(v572, "Config:TUN:InterfaceName");
                                          boost::any::any<std::string &>();
                                        }
                                        boost::any::any<std::string &>();
                                      }
LABEL_439:
                                      otThreadGetWasChild(*(void *)(v7 + 224));
                                      operator new();
                                    }
LABEL_424:
                                    memset(v572, 0, 40);
                                    std::string::basic_string[abi:ne180100]<0>(v588, "");
                                    std::string::basic_string[abi:ne180100]<0>(&v599, "");
                                    std::string::size_type v140 = log_get_logging_obg("com.apple.threadradiod", "default");
                                    if (v140)
                                    {
                                      if (syslog_is_the_mask_enabled(6)
                                        && os_log_type_enabled(v140, OS_LOG_TYPE_INFO))
                                      {
                                        int v141 = *(unsigned __int8 *)(v6 + 56);
                                        *(_DWORD *)v594 = 136315650;
                                        *(void *)&v594[4] = "ProcessPropertyGet";
                                        *(_WORD *)&v594[12] = 1024;
                                        *(_DWORD *)&v594[14] = v141;
                                        *(_WORD *)&v594[18] = 2080;
                                        *(void *)&v594[20] = "NCP:WedMleId";
                                        _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(%d)]: %s] otThreadGetCslPeripheralMleID", v594, 0x1Cu);
                                      }
                                    }
                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                    {
                                      -[PowerEventHandler_Rcp init:]();
                                    }
                                    if ((otThreadGetLinkMode(*(void *)(v7 + 224)) & 7) == 6)
                                    {
                                      otThreadGetCslPeripheralMleID(*(void *)(v7 + 224), (char *)v572, 40);
                                    }
                                    else
                                    {
                                      std::string::size_type v148 = log_get_logging_obg("com.apple.threadradiod", "default");
                                      if (v148)
                                      {
                                        if (syslog_is_the_mask_enabled(6)
                                          && os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
                                        {
                                          char LinkMode = otThreadGetLinkMode(*(void *)(v7 + 224));
                                          *(_DWORD *)v594 = 136315394;
                                          *(void *)&v594[4] = "ProcessPropertyGet";
                                          *(_WORD *)&v594[12] = 1024;
                                          *(_DWORD *)&v594[14] = (LinkMode & 7) == 6;
                                          _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_INFO, "%s: isSleepyRouter=[%d]", v594, 0x12u);
                                        }
                                      }
                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        -[PowerEventHandler_Rcp init:]();
                                      }
                                    }
                                    if (v572[0].__r_.__value_.__s.__data_[0])
                                    {
                                      std::string::assign((std::string *)v588, (const std::string::value_type *)v572);
                                      v153 = log_get_logging_obg("com.apple.threadradiod", "default");
                                      if (v153)
                                      {
                                        if (syslog_is_the_mask_enabled(6)
                                          && os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
                                        {
                                          int v154 = *(unsigned __int8 *)(v6 + 56);
                                          std::string::value_type v155 = v588;
                                          if (v588[23] < 0) {
                                            std::string::value_type v155 = *(unsigned char **)v588;
                                          }
                                          *(_DWORD *)v594 = 136315906;
                                          *(void *)&v594[4] = "ProcessPropertyGet";
                                          *(_WORD *)&v594[12] = 1024;
                                          *(_DWORD *)&v594[14] = v154;
                                          *(_WORD *)&v594[18] = 2080;
                                          *(void *)&v594[20] = "NCP:WedMleId";
                                          *(_WORD *)&v594[28] = 2080;
                                          *(void *)&v594[30] = v155;
                                          _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(%d)]: %s wedMleIdStr = %s", v594, 0x26u);
                                        }
                                        goto LABEL_496;
                                      }
                                      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                        goto LABEL_496;
                                      }
                                    }
                                    else
                                    {
                                      std::string::size_type v156 = log_get_logging_obg("com.apple.threadradiod", "default");
                                      if (v156)
                                      {
                                        if (syslog_is_the_mask_enabled(6)
                                          && os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
                                        {
                                          int v157 = *(unsigned __int8 *)(v6 + 56);
                                          *(_DWORD *)v594 = 136315650;
                                          *(void *)&v594[4] = "ProcessPropertyGet";
                                          *(_WORD *)&v594[12] = 1024;
                                          *(_DWORD *)&v594[14] = v157;
                                          *(_WORD *)&v594[18] = 2080;
                                          *(void *)&v594[20] = "NCP:WedMleId";
                                          _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(%d)]: %s wedMleIdStr empty", v594, 0x1Cu);
                                        }
LABEL_496:
                                        if (!*(unsigned char *)(v6 + 56))
                                        {
                                          std::string::value_type v159 = log_get_logging_obg("com.apple.threadradiod", "default");
                                          if (v159)
                                          {
                                            if (syslog_is_the_mask_enabled(6)
                                              && os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
                                            {
                                              *(_DWORD *)v594 = 136315394;
                                              *(void *)&v594[4] = "ProcessPropertyGet";
                                              *(_WORD *)&v594[12] = 2080;
                                              *(void *)&v594[14] = "NCP:WedMleId";
                                              _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(0)]: %s] Events Off", v594, 0x16u);
                                            }
                                          }
                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                          {
                                            -[PowerEventHandler_Rcp init:]();
                                          }
                                          boost::any::any<std::string &>();
                                        }
                                        v158 = log_get_logging_obg("com.apple.threadradiod", "default");
                                        if (v158)
                                        {
                                          if (syslog_is_the_mask_enabled(6)
                                            && os_log_type_enabled(v158, OS_LOG_TYPE_INFO))
                                          {
                                            *(_DWORD *)v594 = 136315394;
                                            *(void *)&v594[4] = "ProcessPropertyGet";
                                            *(_WORD *)&v594[12] = 2080;
                                            *(void *)&v594[14] = "NCP:WedMleId";
                                            _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(1)]: %s] Events On", v594, 0x16u);
                                          }
                                        }
                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          -[PowerEventHandler_Rcp init:]();
                                        }
                                        uint64_t v160 = v588[23];
                                        if (v588[23] < 0) {
                                          uint64_t v160 = *(void *)&v588[8];
                                        }
                                        if (v160)
                                        {
                                          CslPeripheralAddr = (const std::string::value_type *)otThreadGetCslPeripheralAddr(*(void *)(v7 + 224));
                                          if (!CslPeripheralAddr) {
                                            goto LABEL_546;
                                          }
                                          std::string::assign(&v599, CslPeripheralAddr);
                                          std::string::value_type v162 = log_get_logging_obg("com.apple.threadradiod", "default");
                                          if (v162)
                                          {
                                            if (syslog_is_the_mask_enabled(6)
                                              && os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
                                            {
                                              v163 = &v599;
                                              if ((v599.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                                v163 = (std::string *)v599.__r_.__value_.__r.__words[0];
                                              }
                                              *(_DWORD *)v594 = 136315394;
                                              *(void *)&v594[4] = "ProcessPropertyGet";
                                              *(_WORD *)&v594[12] = 2080;
                                              *(void *)&v594[14] = v163;
                                              v164 = "%s: Found Wed Address: %s";
                                              goto LABEL_521;
                                            }
                                            goto LABEL_546;
                                          }
                                          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                            goto LABEL_546;
                                          }
                                        }
                                        else
                                        {
                                          std::string::value_type v162 = log_get_logging_obg("com.apple.threadradiod", "default");
                                          if (v162)
                                          {
                                            if (syslog_is_the_mask_enabled(6)
                                              && os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
                                            {
                                              *(_DWORD *)v594 = 136315394;
                                              *(void *)&v594[4] = "ProcessPropertyGet";
                                              *(_WORD *)&v594[12] = 2080;
                                              *(void *)&v594[14] = "WakeOnDeviceConnectionStatus";
                                              v164 = "%s: no WED Found, Empty Signal: %s";
LABEL_521:
                                              _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_INFO, v164, v594, 0x16u);
                                            }
LABEL_546:
                                            *(void *)&v594[16] = 0;
                                            *(void *)&v594[8] = 0;
                                            *(void *)v594 = &v594[8];
                                            std::string::basic_string[abi:ne180100]<0>(&v598, "mleid");
                                            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v598;
                                            std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v594, (const void **)&v598.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &buf);
                                            boost::any::operator=<std::string &>();
                                          }
                                          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                            goto LABEL_546;
                                          }
                                        }
                                        -[PowerEventHandler_Rcp init:]();
                                        goto LABEL_546;
                                      }
                                      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                        goto LABEL_496;
                                      }
                                    }
                                    -[PowerEventHandler_Rcp init:]();
                                    goto LABEL_496;
                                  }
LABEL_394:
                                  v130 = (const std::string::value_type *)otThreadGetCslPeripheralAddr(*(void *)(v7 + 224));
                                  std::string::basic_string[abi:ne180100]<0>(v572, "");
                                  if (v130)
                                  {
                                    std::string::assign(v572, v130);
                                    std::string::value_type v131 = log_get_logging_obg("com.apple.threadradiod", "default");
                                    if (v131)
                                    {
                                      if (syslog_is_the_mask_enabled(6)
                                        && os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
                                      {
                                        std::string::size_type v132 = v572;
                                        if ((v572[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                          std::string::size_type v132 = (std::string *)v572[0].__r_.__value_.__r.__words[0];
                                        }
                                        *(_DWORD *)v594 = 136315394;
                                        *(void *)&v594[4] = "NCP:WedExtendedAddress";
                                        *(_WORD *)&v594[12] = 2080;
                                        *(void *)&v594[14] = v132;
                                        _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s wedAddrStr = %s", v594, 0x16u);
                                      }
                                      goto LABEL_472;
                                    }
                                    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                      goto LABEL_472;
                                    }
                                  }
                                  else
                                  {
                                    std::string::value_type v143 = log_get_logging_obg("com.apple.threadradiod", "default");
                                    if (v143)
                                    {
                                      if (syslog_is_the_mask_enabled(6)
                                        && os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
                                      {
                                        *(_DWORD *)v594 = 136315138;
                                        *(void *)&v594[4] = "NCP:WedExtendedAddress";
                                        _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s wedAddrStr empty", v594, 0xCu);
                                      }
LABEL_472:
                                      boost::any::any<std::string &>();
                                    }
                                    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                      goto LABEL_472;
                                    }
                                  }
                                  -[PowerEventHandler_Rcp init:]();
                                  goto LABEL_472;
                                }
LABEL_385:
                                PairingDeviceExtAddr = (unsigned __int8 *)otLinkGetPairingDeviceExtAddr(*(void *)(v7 + 224));
                                memset(v594, 0, 24);
                                snprintf((char *)v572, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", *PairingDeviceExtAddr, PairingDeviceExtAddr[1], PairingDeviceExtAddr[2], PairingDeviceExtAddr[3], PairingDeviceExtAddr[4], PairingDeviceExtAddr[5], PairingDeviceExtAddr[6], PairingDeviceExtAddr[7]);
                                std::string::assign((std::string *)v594, (const std::string::value_type *)v572);
                                std::string::size_type v128 = log_get_logging_obg("com.apple.threadradiod", "default");
                                if (v128)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
                                  {
                                    v129 = v594;
                                    if (v594[23] < 0) {
                                      v129 = *(unsigned char **)v594;
                                    }
                                    *(_DWORD *)std::string::size_type v588 = 136315394;
                                    *(void *)&v588[4] = "Thread:EmacId";
                                    *(_WORD *)&v588[12] = 2080;
                                    *(void *)&v588[14] = v129;
                                    _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s extAddr = %s", v588, 0x16u);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                boost::any::any<std::string &>();
                              }
LABEL_378:
                              std::string::size_type v124 = log_get_logging_obg("com.apple.threadradiod", "default");
                              if (v124)
                              {
                                v125 = v124;
                                if (syslog_is_the_mask_enabled(6)
                                  && os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
                                {
                                  int v126 = *(unsigned __int8 *)(v6 + 56);
                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315650;
                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertyGet";
                                  WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                  *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v126;
                                  WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"Thread:NeighborMeshLocalAddress";
                                  _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(%d)]: %s] ProcessDiagGetSingleHopPeerMeshLocalIPAddr", (uint8_t *)v572, 0x1Cu);
                                }
                              }
                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                -[PowerEventHandler_Rcp init:]();
                              }
                              if ((otThreadGetLinkMode(*(void *)(v7 + 224)) & 7) == 6 || *(void *)(v7 + 256))
                              {
                                v133 = log_get_logging_obg("com.apple.threadradiod", "default");
                                if (v133)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
                                  {
                                    BOOL v134 = (otThreadGetLinkMode(*(void *)(v7 + 224)) & 7) == 6;
                                    uint64_t v135 = *(void *)(v7 + 256);
                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertyGet";
                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315650;
                                    if (v135) {
                                      std::string::size_type v136 = "True";
                                    }
                                    else {
                                      std::string::size_type v136 = "False";
                                    }
                                    WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                                    *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v134;
                                    WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                                    *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v136;
                                    _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_INFO, "%s: isSleepyRouter=%d, rcpSrpMeshLocalAddressTimer started = %s", (uint8_t *)v572, 0x1Cu);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                uint64_t SingleHopPeerMeshLocalIPAddr = 23;
                              }
                              else
                              {
                                uint64_t SingleHopPeerMeshLocalIPAddr = HostInterpreter::ProcessDiagGetSingleHopPeerMeshLocalIPAddr((HostInterpreter *)v7);
                              }
                              BOOL v137 = *(unsigned char *)(v6 + 56) == 0;
                              v138 = log_get_logging_obg("com.apple.threadradiod", "default");
                              std::string::value_type v139 = v138;
                              if (v137)
                              {
                                if (v138)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
                                  {
                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertyGet";
                                    WORD2(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                    *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Thread:NeighborMeshLocalAddress";
                                    _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(0)]: %s] Events Off", (uint8_t *)v572, 0x16u);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                operator new();
                              }
                              if (v138)
                              {
                                if (syslog_is_the_mask_enabled(6)
                                  && os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
                                {
                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertyGet";
                                  WORD2(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Thread:NeighborMeshLocalAddress";
                                  _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_INFO, "%s: HostInterpreter::ProcessPropertyGet[E(1)]: %s] Events On", (uint8_t *)v572, 0x16u);
                                }
                              }
                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                -[PowerEventHandler_Rcp init:]();
                              }
                              if (SingleHopPeerMeshLocalIPAddr)
                              {
                                v142 = log_get_logging_obg("com.apple.threadradiod", "default");
                                if (v142)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
                                  {
                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertyGet";
                                    WORD2(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                                    *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"ThreadNeighborMeshLocalAddress";
                                    _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_INFO, "%s: no Neighbor Found, Empty Signal: %s", (uint8_t *)v572, 0x16u);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
                                v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
                                v572[0].__r_.__value_.__r.__words[2] = 0;
                                std::string::basic_string[abi:ne180100]<0>(v594, "ThreadNeighborMeshLocalAddress");
                                boost::any::any<std::list<std::string> &>();
                              }
                              return SingleHopPeerMeshLocalIPAddr;
                            }
LABEL_371:
                            ExtendedAddress = (const unsigned __int8 *)otLinkGetExtendedAddress(*(void *)(v7 + 224));
                            nl::Data::Data((nl::Data *)v572, ExtendedAddress, 8uLL);
                            std::string::value_type v123 = log_get_logging_obg("com.apple.threadradiod", "default");
                            if (v123)
                            {
                              if (syslog_is_the_mask_enabled(6)
                                && os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)v594 = 136315138;
                                *(void *)&v594[4] = "NCP:ExtendedAddress";
                                _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", v594, 0xCu);
                              }
                            }
                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
                              -[PowerEventHandler_Rcp init:]();
                            }
                            boost::any::any<nl::Data &>();
                          }
LABEL_364:
                          otThreadGetPskc(*(void *)(v7 + 224), (uint64_t)v594);
                          nl::Data::Data((nl::Data *)v572, v594, 0x10uLL);
                          v121 = log_get_logging_obg("com.apple.threadradiod", "default");
                          if (v121)
                          {
                            if (syslog_is_the_mask_enabled(6)
                              && os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)std::string::size_type v588 = 136315138;
                              *(void *)&v588[4] = "Network:PSKc";
                              _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", v588, 0xCu);
                            }
                          }
                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            -[PowerEventHandler_Rcp init:]();
                          }
                          boost::any::any<nl::Data &>();
                        }
LABEL_355:
                        std::string::basic_string[abi:ne180100]<0>(v572, "wasPrimaryResident");
                        *(void *)v594 = v572;
                        v118 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v594);
                        BOOL v119 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v118 + 7, "1");
                        if (SHIBYTE(v572[0].__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v572[0].__r_.__value_.__l.__data_);
                        }
                        std::string::size_type v120 = log_get_logging_obg("com.apple.threadradiod", "default");
                        if (v120)
                        {
                          if (syslog_is_the_mask_enabled(6)
                            && os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
                          {
                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                            *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"wasPrimaryResident";
                            WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                            *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v119;
                            _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s[%d]]", (uint8_t *)v572, 0x12u);
                          }
                        }
                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          -[PowerEventHandler_Rcp init:]();
                        }
                        operator new();
                      }
LABEL_344:
                      std::string::basic_string[abi:ne180100]<0>(v572, "is_primary_resident");
                      *(void *)v594 = v572;
                      std::string::value_type v116 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v594);
                      std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v116 + 7, "1");
                      if (SHIBYTE(v572[0].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v572[0].__r_.__value_.__l.__data_);
                      }
                      v117 = log_get_logging_obg("com.apple.threadradiod", "default");
                      if (v117)
                      {
                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
                        {
                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"is_primary_resident";
                          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                        }
                      }
                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                      {
                        -[PowerEventHandler_Rcp init:]();
                      }
                      operator new();
                    }
LABEL_335:
                    otThreadGetRloc16(*(void *)(v7 + 224));
                    v112 = log_get_logging_obg("com.apple.threadradiod", "default");
                    if (v112)
                    {
                      std::string::value_type v113 = v112;
                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
                      {
                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Thread:RLOC16";
                        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s]", (uint8_t *)v572, 0xCu);
                      }
                    }
                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      -[PowerEventHandler_Rcp init:]();
                    }
                    operator new();
                  }
LABEL_304:
                  int PartitionId = otThreadGetPartitionId(*(void *)(v7 + 224));
                  unsigned __int8 v105 = log_get_logging_obg("com.apple.threadradiod", "default");
                  if (v105)
                  {
                    v106 = v105;
                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
                    {
                      int v107 = *(unsigned __int8 *)(v6 + 56);
                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109634;
                      HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v107;
                      LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Network:PartitionId";
                      WORD1(v572[0].__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(v572[0].__r_.__value_.__r.__words[2]) = PartitionId;
                      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s[%d]", (uint8_t *)v572, 0x18u);
                    }
                  }
                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    -[PowerEventHandler_Rcp init:]();
                  }
                  if (*(unsigned char *)(v6 + 56))
                  {
                    std::string::basic_string[abi:ne180100]<0>(v572, "Network:PartitionId");
                    operator new();
                  }
                  operator new();
                }
LABEL_290:
                xpc_object_t v97 = log_get_logging_obg("com.apple.threadradiod", "default");
                if (v97)
                {
                  std::string::value_type v98 = v97;
                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
                  {
                    std::string::basic_string[abi:ne180100]<0>(v572, "Network:LastRole");
                    *(void *)std::string::size_type v588 = v572;
                    xpc_object_t v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v588);
                    CFTypeRef v100 = v99 + 7;
                    if (*((char *)v99 + 79) < 0) {
                      CFTypeRef v100 = (void *)*v100;
                    }
                    *(_DWORD *)v594 = 136315394;
                    *(void *)&v594[4] = "Network:PartitionId";
                    *(_WORD *)&v594[12] = 2080;
                    *(void *)&v594[14] = v100;
                    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s[%s]", v594, 0x16u);
                    if (SHIBYTE(v572[0].__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v572[0].__r_.__value_.__l.__data_);
                    }
                  }
                }
                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  -[PowerEventHandler_Rcp init:]();
                }
                *((unsigned char *)&v572[0].__r_.__value_.__s + 23) = 16;
                strcpy((char *)v572, "Network:LastRole");
                *(void *)v594 = v572;
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v572[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v594);
                operator new();
              }
LABEL_288:
              unsigned int DeviceRole = otThreadGetDeviceRole(*(void *)(v7 + 224));
              memset(v594, 0, 24);
              if (DeviceRole >= 5)
              {
                snprintf((char *)v572, 0x10uLL, "(role-%u)", DeviceRole);
                std::string::assign((std::string *)v594, (const std::string::value_type *)v572);
              }
              else
              {
                std::string::assign((std::string *)v594, off_100498E20[DeviceRole]);
              }
              xpc_object_t v101 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v101)
              {
                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
                {
                  int v102 = *(unsigned __int8 *)(v6 + 56);
                  v103 = v594;
                  if (v594[23] < 0) {
                    v103 = *(unsigned char **)v594;
                  }
                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109634;
                  HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v102;
                  LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Network:Role";
                  WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v103;
                  _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s = %s", (uint8_t *)v572, 0x1Cu);
                }
              }
              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                -[PowerEventHandler_Rcp init:]();
              }
              if (*(unsigned char *)(v6 + 56))
              {
                *((unsigned char *)&v572[0].__r_.__value_.__s + 23) = 12;
                strcpy((char *)v572, "Network:Role");
                operator new();
              }
              boost::any::any<std::string &>();
            }
LABEL_272:
            int v87 = otThreadGetDeviceRole(*(void *)(v7 + 224));
            char v88 = otThreadGetLinkMode(*(void *)(v7 + 224));
            memset(v594, 0, 24);
            char v89 = v88;
            int v90 = "unknown";
            switch(v87)
            {
              case 0:
              case 1:
                goto LABEL_322;
              case 2:
                std::string::assign((std::string *)v594, "end-device");
                if ((v89 & 3) != 0) {
                  break;
                }
                if (otLinkIsCslEnabled(*(void *)(v7 + 224))) {
                  int v90 = "synchronized-sleepy-end-device";
                }
                else {
                  int v90 = "sleepy-end-device";
                }
                goto LABEL_322;
              case 3:
                CFRange v108 = "router";
                goto LABEL_319;
              case 4:
                CFRange v108 = "leader";
LABEL_319:
                if (v88) {
                  int v90 = v108;
                }
                else {
                  int v90 = "sleepy-router";
                }
LABEL_322:
                std::string::assign((std::string *)v594, v90);
                break;
              default:
                snprintf((char *)v572, 0x10uLL, "(node-type-%u)", v87);
                std::string::assign((std::string *)v594, (const std::string::value_type *)v572);
                break;
            }
            otInstanceGetUptimeAsString(*(void *)(v7 + 224), v588, 24);
            CFRange v109 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (v109)
            {
              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
              {
                int v110 = *(unsigned __int8 *)(v6 + 56);
                v111 = v594;
                if (v594[23] < 0) {
                  v111 = *(unsigned char **)v594;
                }
                LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v588;
                WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v110;
                WORD1(v572[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"Network:NodeType";
                WORD2(v572[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)v572[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v111;
                _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_INFO, "%s HostInterpreter::ProcessPropertyGet[E(%d)]: %s = %s", (uint8_t *)v572, 0x26u);
              }
            }
            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              -[PowerEventHandler_Rcp init:]();
            }
            if (*(unsigned char *)(v6 + 56))
            {
              *((unsigned char *)&v572[0].__r_.__value_.__s + 23) = 16;
              strcpy((char *)v572, "Network:NodeType");
              operator new();
            }
            operator new();
          }
LABEL_264:
          v588[0] = 0;
          if (!otPlatRadioGetTransmitPower(*(void *)(v7 + 224), (uint64_t)v588, v8, v9, v10, v11, v12, v13))
          {
            long long v86 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (v86)
            {
              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
              {
                LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:TXPower";
                WORD2(v572[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 6) = v588[0];
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s[%d]", (uint8_t *)v572, 0x12u);
              }
            }
            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              -[PowerEventHandler_Rcp init:]();
            }
            operator new();
          }
          goto LABEL_316;
        }
LABEL_255:
        SupportedChannelMasuint64_t k = otLinkGetSupportedChannelMask(*(void *)(v7 + 224));
        std::string v83 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v83)
        {
          std::string v84 = v83;
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
          {
            int v85 = *(unsigned __int8 *)(v6 + 56);
            LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109634;
            HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v85;
            LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"NCP:ChannelMask";
            WORD1(v572[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v572[0].__r_.__value_.__r.__words[2]) = SupportedChannelMask;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s[%u]", (uint8_t *)v572, 0x18u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        snprintf(v588, 0x10uLL, "0x%x", SupportedChannelMask);
        size_t v91 = strlen(v588);
        if (v91 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v92 = v91;
        if (v91 >= 0x17)
        {
          uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v91 | 7) != 0x17) {
            uint64_t v94 = v91 | 7;
          }
          uint64_t v95 = v94 + 1;
          dispatch_object_t v93 = (std::string *)operator new(v94 + 1);
          v572[0].__r_.__value_.__l.__size_ = v92;
          v572[0].__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
          v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
        }
        else
        {
          *((unsigned char *)&v572[0].__r_.__value_.__s + 23) = v91;
          dispatch_object_t v93 = v572;
          if (!v91)
          {
LABEL_287:
            v93->__r_.__value_.__s.__data_[v92] = 0;
            operator new();
          }
        }
        memcpy(v93, v588, v92);
        goto LABEL_287;
      }
LABEL_251:
      std::string v80 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v80)
      {
        xpc_object_t v81 = v80;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
        {
          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"nm:trigger:devicedata:interval";
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[%s]", (uint8_t *)v572, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      operator new();
    }
LABEL_247:
    int Channel = otLinkGetChannel(*(void *)(v7 + 224));
    std::string v77 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v77)
    {
      std::string v78 = v77;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        int v79 = *(unsigned __int8 *)(v6 + 56);
        LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v79;
        LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"NCP:Channel";
        WORD1(v572[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v572[0].__r_.__value_.__r.__words[2]) = Channel;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s[%u]", (uint8_t *)v572, 0x18u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    if (*(unsigned char *)(v6 + 56))
    {
      *((unsigned char *)&v572[0].__r_.__value_.__s + 23) = 11;
      strcpy((char *)v572, "NCP:Channel");
      operator new();
    }
    operator new();
  }
  if (!strcmp((const char *)v5, "NCP:Channel")) {
    goto LABEL_247;
  }
  if (!strcmp((const char *)v6, "nm:trigger:devicedata:interval")) {
    goto LABEL_251;
  }
  if (!strcmp((const char *)v6, "NCP:ChannelMask")) {
    goto LABEL_255;
  }
  if (!strcmp((const char *)v6, "NCP:TXPower")) {
    goto LABEL_264;
  }
  if (!strcmp((const char *)v6, "Network:NodeType")) {
    goto LABEL_272;
  }
  if (!strcmp((const char *)v6, "Network:Role")) {
    goto LABEL_288;
  }
  if (!strcmp((const char *)v6, "Network:LastRole")) {
    goto LABEL_290;
  }
  if (!strcmp((const char *)v6, "Network:PartitionId")) {
    goto LABEL_304;
  }
  if (!strcmp((const char *)v6, "Thread:RLOC16")) {
    goto LABEL_335;
  }
  if (!strcmp((const char *)v6, "isPrimaryResident")) {
    goto LABEL_344;
  }
  if (!strcmp((const char *)v6, "wasPrimaryResident")) {
    goto LABEL_355;
  }
  if (!strcmp((const char *)v6, "Network:PSKc")) {
    goto LABEL_364;
  }
  if (!strcmp((const char *)v6, "NCP:ExtendedAddress")) {
    goto LABEL_371;
  }
  if (!strcmp((const char *)v6, "Thread:NeighborMeshLocalAddress")) {
    goto LABEL_378;
  }
  if (!strcmp((const char *)v6, "Thread:EmacId")) {
    goto LABEL_385;
  }
  if (!strcmp((const char *)v6, "NCP:WedExtendedAddress")) {
    goto LABEL_394;
  }
  if (!strcmp((const char *)v6, "NCP:WedMleId")) {
    goto LABEL_424;
  }
  if (!strcmp((const char *)v6, "wasDeviceEverAChildInCurrentNetwork")) {
    goto LABEL_439;
  }
  if (!strcmp((const char *)v6, "Config:TUN:InterfaceName")) {
    goto LABEL_450;
  }
  if (strcmp((const char *)v6, "IPv6:Routes"))
  {
    if (strcmp((const char *)v6, "thread_version"))
    {
      if (strcmp((const char *)v6, "cametrics_triggerbased_stability_data"))
      {
        if (strcmp((const char *)v6, "cametrics_periodic_stability_data"))
        {
          if (strcmp((const char *)v6, "primary_resident_data"))
          {
            if (strcmp((const char *)v6, "numOnMeshPrefixes"))
            {
              if (strcmp((const char *)v6, "numRouters"))
              {
                if (strcmp((const char *)v6, "numOffMeshRoutes"))
                {
                  if (strcmp((const char *)v6, "Thread:OnMeshPrefixes"))
                  {
                    if (strcmp((const char *)v6, "Thread:OffMeshRoutes"))
                    {
                      if (strcmp((const char *)v6, "nm:networkdata"))
                      {
                        if (strcmp((const char *)v6, "Thread:Services"))
                        {
                          if (strcmp((const char *)v6, "NCP:State"))
                          {
                            if (strcmp((const char *)v6, "Network:Name"))
                            {
                              if (strcmp((const char *)v6, "Network:XPANID"))
                              {
                                if (strcmp((const char *)v6, "Network:PANID"))
                                {
                                  if (strcmp((const char *)v6, "NCP:HardwareSerialNumber"))
                                  {
                                    if (strcmp((const char *)v6, "vendor:assigned:hw:mac"))
                                    {
                                      if (strcmp((const char *)v6, "NCP:HardwareAddress"))
                                      {
                                        if (strcmp((const char *)v6, "IPv6:AllAddresses"))
                                        {
                                          if (strcmp((const char *)v6, "Thread:Leader:RouterID"))
                                          {
                                            if (strcmp((const char *)v6, "Thread:Leader:ExtendedAddress"))
                                            {
                                              if (strcmp((const char *)v6, "ChannelUtilizationMonitor:State"))
                                              {
                                                if (strcmp((const char *)v6, "Network:Key"))
                                                {
                                                  if (strcmp((const char *)v6, "Network:KeyIndex"))
                                                  {
                                                    if (strcmp((const char *)v6, "Thread:ActiveDataset:Bytes"))
                                                    {
                                                      if (strcmp((const char *)v6, "vendor:assert"))
                                                      {
                                                        if (strcmp((const char *)v6, "vendor:hard:fault"))
                                                        {
                                                          if (strcmp((const char *)v6, "vendor:stack:overflow"))
                                                          {
                                                            if (strcmp((const char *)v6, "Leader:Reelect:Counters"))
                                                            {
                                                              if (strcmp((const char *)v6, "vendor:neighbor:count:histogram")&& strcmp((const char *)v6, "vendor:neighbor:count:histogram:AsValMap"))
                                                              {
                                                                if (strcmp((const char *)v6, "vendor:bbr:counters")
                                                                  && strcmp((const char *)v6, "vendor:bbr:counters:AsValMap"))
                                                                {
                                                                  if (strcmp((const char *)v6, "vendor:linkloss:counters")&& strcmp((const char *)v6, "vendor:linkloss:counters:AsValMap"))
                                                                  {
                                                                    if (strcmp((const char *)v6, "NCP:Counter:Thread:Mle")&& strcmp((const char *)v6, "NCP:Counter:Thread:Mle:AsValMap"))
                                                                    {
                                                                      if (strcmp((const char *)v6, "NCP:Counter:Thread:Neighbor:TriggerBased"))
                                                                      {
                                                                        if (strcmp((const char *)v6, "NCP:Counter:AllIPv6")&& strcmp((const char *)v6, "NCP:Counter:AllIPv6:AsValMap"))
                                                                        {
                                                                          if (strcmp((const char *)v6, "NCP:Counter:AllMac")&& strcmp((const char *)v6, "NCP:Counter:AllMac:AsValMap"))
                                                                          {
                                                                            if (strcmp((const char *)v6, "vendor:radio:stats")&& strcmp((const char *)v6, "vendor:radio:stats:asvalmap"))
                                                                            {
                                                                              if (strcmp((const char *)v6, "vendor:mle:adv:tx:num"))
                                                                              {
                                                                                if (strcmp((const char *)v6, "vendor:min:mac:interframedelay"))
                                                                                {
                                                                                  if (strcmp((const char *)v6, "vendor:csl:tx:schedframe:reqahead:timeinus"))
                                                                                  {
                                                                                    if (strcmp((const char *)v6, "vendor:radio:counters")&& strcmp((const char *)v6, "vendor:radio:counters:asvalmap"))
                                                                                    {
                                                                                      if (strcmp((const char *)v6, "vendor:joiner:RSSIHistogram")&& strcmp((const char *)v6, "vendor:joiner:RSSIHistogram:AsValMap"))
                                                                                      {
                                                                                        if (strcmp((const char *)v6, "Daemon:Version"))
                                                                                        {
                                                                                          if (strcmp((const char *)v6, "DaemonMorty:Version"))
                                                                                          {
                                                                                            if (strcmp((const char *)v6, "vendor:version"))
                                                                                            {
                                                                                              if (strcmp((const char *)v6, "vendor:last:host:wake:reason"))
                                                                                              {
                                                                                                if (strcmp((const char *)v6, "vendor:deepsleep:region:loglevels"))
                                                                                                {
                                                                                                  if (strcmp((const char *)v6, "vendor:deepsleep:loglevel"))
                                                                                                  {
                                                                                                    if (strcmp((const char *)v6, "vendor:deepsleep:filter:list"))
                                                                                                    {
                                                                                                      if (strcmp((const char *)v6, "vendor:MAC:packet:SizeHistogram") && strcmp((const char *)v6, "vendor:MAC:packet:SizeHistogram:AsValMap"))
                                                                                                      {
                                                                                                        if (strcmp((const char *)v6, "vendor:MAC:packet:ErrorHistogram") && strcmp((const char *)v6, "vendor:MAC:packet:ErrorHistogram:AsValMap"))
                                                                                                        {
                                                                                                          if (strcmp((const char *)v6, "vendor:MAC:packet:LQIHistogram") && strcmp((const char *)v6, "vendor:MAC:packet:LQIHistogram:AsValMap"))
                                                                                                          {
                                                                                                            if (strcmp((const char *)v6, "vendor:MAC:packet:RSSIHistogram") && strcmp((const char *)v6, "vendor:MAC:packet:RSSIHistogram:AsValMap"))
                                                                                                            {
                                                                                                              if (strcmp((const char *)v6, "NCP:MacRetryHistogram") && strcmp((const char *)v6, "NCP:MacRetryHistogram:AsValMap"))
                                                                                                              {
                                                                                                                if (strcmp((const char *)v6, "vendor:openthread:radio:counters") && strcmp((const char *)v6, "vendor:openthread:radio:counters:AsValMap"))
                                                                                                                {
                                                                                                                  if (strcmp((const char *)v6, "IPv6:MeshLocalPrefix"))
                                                                                                                  {
                                                                                                                    if (strcmp((const char *)v6, "IPv6:MeshLocalAddress"))
                                                                                                                    {
                                                                                                                      if (strcmp((const char *)v6, "vendor:ncp:state:dump"))
                                                                                                                      {
                                                                                                                        if (strcmp((const char *)v6, "Thread:RouterTable"))
                                                                                                                        {
                                                                                                                          if (strcmp((const char *)v6, "Thread:EidCache"))
                                                                                                                          {
                                                                                                                            if (strcmp((const char *)v6, "Thread:MessageBufferStats"))
                                                                                                                            {
                                                                                                                              uint64_t v52 = (HostInterpreter *)strcmp((const char *)v6, "is_threadsession_on");
                                                                                                                              if (v52)
                                                                                                                              {
                                                                                                                                if (strcmp((const char *)v6, "vendor:power"))
                                                                                                                                {
                                                                                                                                  uint64_t v59 = strcmp((const char *)v6, "vendor:power:table");
                                                                                                                                  if (v59)
                                                                                                                                  {
                                                                                                                                    if (strcmp((const char *)v6, "vendor:coex:radioload"))
                                                                                                                                    {
                                                                                                                                      if (strcmp((const char *)v6, "is_bt_audioCall_on"))
                                                                                                                                      {
                                                                                                                                        if (strcmp((const char *)v6, "vendor:coex:rcp2:counters"))
                                                                                                                                        {
                                                                                                                                          if (strcmp((const char *)v6, "Daemon:VirtualInterface:ReadBufferSize"))
                                                                                                                                          {
                                                                                                                                            if (strcmp((const char *)v6, "vendor:power:limit:table"))
                                                                                                                                            {
                                                                                                                                              if (strcmp((const char *)v6, "vendor:power:limit:table:active:id"))
                                                                                                                                              {
                                                                                                                                                if (strcmp((const char *)v6, "vendor:fem:enabled"))
                                                                                                                                                {
                                                                                                                                                  if (strcmp((const char *)v6, "NCP:PcapEnabled"))
                                                                                                                                                  {
                                                                                                                                                    if (strcmp((const char *)v6, "Daemon:PromiscuousPcap"))
                                                                                                                                                    {
                                                                                                                                                      if (strcmp((const char *)v6, "vendor:ifs:ackdata"))
                                                                                                                                                      {
                                                                                                                                                        if (strcmp((const char *)v6, "ca:reporting:enabled"))
                                                                                                                                                        {
                                                                                                                                                          if (strcmp((const char *)v6, "streamRawRespTimeHist"))
                                                                                                                                                          {
                                                                                                                                                            if (strcmp((const char *)v6, "coex:rcp2:coex:counters:asvalmap"))
                                                                                                                                                            {
                                                                                                                                                              if (strcmp((const char *)v6, "coex:rcp2:btwifi:load"))
                                                                                                                                                              {
                                                                                                                                                                if (strcmp((const char *)v6, "Thread:Health:Metrics"))
                                                                                                                                                                {
                                                                                                                                                                  if (strcmp((const char *)v6, "ThreadStartMetrics"))
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t v67 = (const char *)v6;
                                                                                                                                                                    if (!strcmp((const char *)v6, "NetdataFull:NoUnicastService")) {
                                                                                                                                                                      goto LABEL_118;
                                                                                                                                                                    }
                                                                                                                                                                    goto LABEL_240;
                                                                                                                                                                  }
                                                                                                                                                                  goto LABEL_1284;
                                                                                                                                                                }
                                                                                                                                                                goto LABEL_1278;
                                                                                                                                                              }
                                                                                                                                                              goto LABEL_1272;
                                                                                                                                                            }
                                                                                                                                                            goto LABEL_1266;
                                                                                                                                                          }
                                                                                                                                                          goto LABEL_1260;
                                                                                                                                                        }
                                                                                                                                                        goto LABEL_1254;
                                                                                                                                                      }
LABEL_1248:
                                                                                                                                                      v499 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                      if (v499)
                                                                                                                                                      {
                                                                                                                                                        std::string::value_type v500 = v499;
                                                                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v500, OS_LOG_TYPE_INFO))
                                                                                                                                                        {
                                                                                                                                                          std::string::size_type v507 = v6;
                                                                                                                                                          if (*(char *)(v6 + 23) < 0) {
                                                                                                                                                            std::string::size_type v507 = *(void *)v6;
                                                                                                                                                          }
                                                                                                                                                          LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                          *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v507;
                                                                                                                                                          _os_log_impl((void *)&_mh_execute_header, v500, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                      {
                                                                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                                                                      }
                                                                                                                                                      v599.__r_.__value_.__s.__data_[0] = 0;
                                                                                                                                                      if (!otPlatVendorGetIfsAckDataPerNeighbor((uint64_t)v572, (uint64_t)&v599, v501, v502, v503, v504, v505, v506))
                                                                                                                                                      {
                                                                                                                                                        HostInterpreter::GetIfsAckDataPerNeighborAsString((uint64_t)v572, v599.__r_.__value_.__s.__data_[0], (std::string *)v594);
                                                                                                                                                        boost::any::any<std::string &>();
                                                                                                                                                      }
                                                                                                                                                      goto LABEL_316;
                                                                                                                                                    }
                                                                                                                                                    goto LABEL_1247;
                                                                                                                                                  }
                                                                                                                                                  goto LABEL_1243;
                                                                                                                                                }
LABEL_1239:
                                                                                                                                                v594[0] = 0;
                                                                                                                                                v482 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                                if (v482)
                                                                                                                                                {
                                                                                                                                                  v483 = v482;
                                                                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v483, OS_LOG_TYPE_INFO))
                                                                                                                                                  {
                                                                                                                                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vendor:fem:enabled";
                                                                                                                                                    _os_log_impl((void *)&_mh_execute_header, v483, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                                {
                                                                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                                                                }
                                                                                                                                                if (!otPlatVendorGetFemEnabled(*(void *)(v7 + 224), (uint64_t)v594, v484, v485, v486, v487, v488, v489)) {
                                                                                                                                                  operator new();
                                                                                                                                                }
                                                                                                                                                goto LABEL_316;
                                                                                                                                              }
LABEL_1235:
                                                                                                                                              v594[0] = 0;
                                                                                                                                              v474 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                              if (v474)
                                                                                                                                              {
                                                                                                                                                std::string::value_type v475 = v474;
                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v475, OS_LOG_TYPE_INFO))
                                                                                                                                                {
                                                                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vendor:power:limit:table:active:id";
                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v475, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                              {
                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                              }
                                                                                                                                              if (!otPlatVendorGetPowerLimitTableActiveId(*(void *)(v7 + 224), (uint64_t)v594, v476, v477, v478, v479, v480, v481)) {
                                                                                                                                                operator new();
                                                                                                                                              }
                                                                                                                                              goto LABEL_316;
                                                                                                                                            }
LABEL_1230:
                                                                                                                                            if (!otPlatVendorGetPowerLimitTable(*(void *)(v7 + 224), (uint64_t)v572, v61, v62, v63, v64, v65, v66))
                                                                                                                                            {
                                                                                                                                              v473 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                              if (v473)
                                                                                                                                              {
                                                                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v473, OS_LOG_TYPE_INFO))
                                                                                                                                                {
                                                                                                                                                  *(_DWORD *)v594 = 136315138;
                                                                                                                                                  *(void *)&v594[4] = "vendor:power:limit:table";
                                                                                                                                                  _os_log_impl((void *)&_mh_execute_header, v473, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", v594, 0xCu);
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                              {
                                                                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                                                                              }
                                                                                                                                              HostInterpreter::GetPowerLimitTableAsString((uint64_t)v572, (std::string *)v594);
                                                                                                                                              boost::any::any<std::string &>();
                                                                                                                                            }
                                                                                                                                            goto LABEL_316;
                                                                                                                                          }
                                                                                                                                          goto LABEL_1224;
                                                                                                                                        }
LABEL_1218:
                                                                                                                                        v461 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                        if (v461)
                                                                                                                                        {
                                                                                                                                          v462 = v461;
                                                                                                                                          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v462, OS_LOG_TYPE_INFO))
                                                                                                                                          {
                                                                                                                                            std::string::size_type v469 = v6;
                                                                                                                                            if (*(char *)(v6 + 23) < 0) {
                                                                                                                                              std::string::size_type v469 = *(void *)v6;
                                                                                                                                            }
                                                                                                                                            LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                                            *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v469;
                                                                                                                                            _os_log_impl((void *)&_mh_execute_header, v462, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                        {
                                                                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                                                                        }
                                                                                                                                        if (!HostInterpreter::CoexCounterUpdate(v7, coexCounters, v463, v464, v465, v466, v467, v468)) {
                                                                                                                                          operator new();
                                                                                                                                        }
                                                                                                                                        goto LABEL_316;
                                                                                                                                      }
                                                                                                                                      goto LABEL_1214;
                                                                                                                                    }
                                                                                                                                    goto LABEL_1213;
                                                                                                                                  }
LABEL_1208:
                                                                                                                                  *(_WORD *)v594 = 1300;
                                                                                                                                  __chkstk_darwin(v59, v60);
                                                                                                                                  if (!otPlatVendorGetPTB(*(void *)(v7 + 224), (uint64_t)&v558, (uint64_t)v594, v452, v453, v454, v455, v456))
                                                                                                                                  {
                                                                                                                                    std::string::value_type v457 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                    if (v457)
                                                                                                                                    {
                                                                                                                                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v457, OS_LOG_TYPE_INFO))
                                                                                                                                      {
                                                                                                                                        LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109120;
                                                                                                                                        HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = *(unsigned __int16 *)v594;
                                                                                                                                        _os_log_impl((void *)&_mh_execute_header, v457, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: Get RCP2 PTB file: PTB Read data response Size = %d", (uint8_t *)v572, 8u);
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                    {
                                                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                                                    }
                                                                                                                                    operator new();
                                                                                                                                  }
                                                                                                                                  goto LABEL_316;
                                                                                                                                }
LABEL_1203:
                                                                                                                                v594[0] = 0;
                                                                                                                                if (!otPlatVendorGetPower(*(void *)(v7 + 224), (uint64_t)v594, v53, v54, v55, v56, v57, v58))
                                                                                                                                {
                                                                                                                                  v451 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                                  if (v451)
                                                                                                                                  {
                                                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v451, OS_LOG_TYPE_INFO))
                                                                                                                                    {
                                                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 134217984;
                                                                                                                                      *(double *)((char *)v572[0].__r_.__value_.__r.__words + 4) = (double)v594[0] * 0.25;
                                                                                                                                      _os_log_impl((void *)&_mh_execute_header, v451, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGetVendorPower = %f dBm", (uint8_t *)v572, 0xCu);
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                                  {
                                                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                                                  }
                                                                                                                                  operator new();
                                                                                                                                }
                                                                                                                                goto LABEL_316;
                                                                                                                              }
                                                                                                                              goto LABEL_1199;
                                                                                                                            }
                                                                                                                            goto LABEL_1184;
                                                                                                                          }
                                                                                                                          goto LABEL_1171;
                                                                                                                        }
                                                                                                                        goto LABEL_1167;
                                                                                                                      }
                                                                                                                      goto LABEL_1161;
                                                                                                                    }
LABEL_1138:
                                                                                                                    uint64_t MeshLocalEid = otThreadGetMeshLocalEid(*(void *)(v7 + 224));
                                                                                                                    if (MeshLocalEid)
                                                                                                                    {
                                                                                                                      otIp6AddressToString(MeshLocalEid, (char *)v572, 40);
                                                                                                                      v416 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                      if (v416)
                                                                                                                      {
                                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v416, OS_LOG_TYPE_INFO))
                                                                                                                        {
                                                                                                                          std::string::size_type v417 = v6;
                                                                                                                          if (*(char *)(v6 + 23) < 0) {
                                                                                                                            std::string::size_type v417 = *(void *)v6;
                                                                                                                          }
                                                                                                                          std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                                                                          if (v594[23] >= 0) {
                                                                                                                            std::string::value_type v418 = v594;
                                                                                                                          }
                                                                                                                          else {
                                                                                                                            std::string::value_type v418 = *(unsigned char **)v594;
                                                                                                                          }
                                                                                                                          *(_DWORD *)std::string::size_type v588 = 136315394;
                                                                                                                          *(void *)&v588[4] = v417;
                                                                                                                          *(_WORD *)&v588[12] = 2080;
                                                                                                                          *(void *)&v588[14] = v418;
                                                                                                                          _os_log_impl((void *)&_mh_execute_header, v416, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s mle_addr:%s", v588, 0x16u);
                                                                                                                          if ((v594[23] & 0x80000000) != 0) {
                                                                                                                            operator delete(*(void **)v594);
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                      {
                                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                                      }
                                                                                                                      std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                                                                      operator new();
                                                                                                                    }
                                                                                                                    v419 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                    if (v419)
                                                                                                                    {
                                                                                                                      v420 = v419;
                                                                                                                      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v420, OS_LOG_TYPE_ERROR)) {
                                                                                                                        HostInterpreter::ProcessPropertyGet();
                                                                                                                      }
                                                                                                                    }
                                                                                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                    {
                                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                                    }
                                                                                                                    goto LABEL_316;
                                                                                                                  }
                                                                                                                  goto LABEL_1129;
                                                                                                                }
LABEL_1116:
                                                                                                                v408 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                                if (v408)
                                                                                                                {
                                                                                                                  v409 = v408;
                                                                                                                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v409, OS_LOG_TYPE_INFO))
                                                                                                                  {
                                                                                                                    std::string::size_type v410 = v6;
                                                                                                                    if (*(char *)(v6 + 23) < 0) {
                                                                                                                      std::string::size_type v410 = *(void *)v6;
                                                                                                                    }
                                                                                                                    LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                                    *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v410;
                                                                                                                    _os_log_impl((void *)&_mh_execute_header, v409, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                                  }
                                                                                                                }
                                                                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                                {
                                                                                                                  -[PowerEventHandler_Rcp init:]();
                                                                                                                }
                                                                                                                if (!otPlatVendorGetOpenThreadRadioCounters(*(void *)(v7 + 224), (uint64_t)v572)) {
                                                                                                                  HostInterpreter::GetVendorOpenThreadRadioCountersAsValMap((uint64_t)v594);
                                                                                                                }
                                                                                                                goto LABEL_316;
                                                                                                              }
                                                                                                              goto LABEL_1107;
                                                                                                            }
                                                                                                            goto LABEL_1098;
                                                                                                          }
                                                                                                          goto LABEL_1089;
                                                                                                        }
                                                                                                        goto LABEL_1052;
                                                                                                      }
                                                                                                      goto LABEL_1008;
                                                                                                    }
                                                                                                    goto LABEL_1014;
                                                                                                  }
LABEL_998:
                                                                                                  v354 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                  if (v354)
                                                                                                  {
                                                                                                    std::string::value_type v355 = v354;
                                                                                                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v355, OS_LOG_TYPE_INFO))
                                                                                                    {
                                                                                                      std::string::size_type v362 = v6;
                                                                                                      if (*(char *)(v6 + 23) < 0) {
                                                                                                        std::string::size_type v362 = *(void *)v6;
                                                                                                      }
                                                                                                      LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                      *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v362;
                                                                                                      _os_log_impl((void *)&_mh_execute_header, v355, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                    }
                                                                                                  }
                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                  {
                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                  }
                                                                                                  v594[0] = 0;
                                                                                                  if (!otPlatVendorGetDeepSleepLogLevel(*(void *)(v7 + 224), (uint64_t)v594, v356, v357, v358, v359, v360, v361)) {
                                                                                                    operator new();
                                                                                                  }
                                                                                                  goto LABEL_316;
                                                                                                }
                                                                                                goto LABEL_988;
                                                                                              }
LABEL_971:
                                                                                              std::string::size_type v336 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                              if (v336)
                                                                                              {
                                                                                                v337 = v336;
                                                                                                if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v337, OS_LOG_TYPE_INFO))
                                                                                                {
                                                                                                  std::string::size_type v344 = v6;
                                                                                                  if (*(char *)(v6 + 23) < 0) {
                                                                                                    std::string::size_type v344 = *(void *)v6;
                                                                                                  }
                                                                                                  LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                  *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v344;
                                                                                                  _os_log_impl((void *)&_mh_execute_header, v337, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                                }
                                                                                              }
                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                              {
                                                                                                -[PowerEventHandler_Rcp init:]();
                                                                                              }
                                                                                              *(_DWORD *)v594 = 0;
                                                                                              if (!otPlatVendorGetHostWakeReason(*(void *)(v7 + 224), (uint64_t)v594, v338, v339, v340, v341, v342, v343)) {
                                                                                                operator new();
                                                                                              }
                                                                                              goto LABEL_316;
                                                                                            }
LABEL_957:
                                                                                            v326 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                            if (v326)
                                                                                            {
                                                                                              std::string::value_type v327 = v326;
                                                                                              if (syslog_is_the_mask_enabled(6)
                                                                                                && os_log_type_enabled(v327, OS_LOG_TYPE_INFO))
                                                                                              {
                                                                                                std::string::size_type v333 = v6;
                                                                                                if (*(char *)(v6 + 23) < 0) {
                                                                                                  std::string::size_type v333 = *(void *)v6;
                                                                                                }
                                                                                                LODWORD(v572[0].__r_.__value_.__l.__data_) = 136315138;
                                                                                                *(std::string::size_type *)((char *)v572[0].__r_.__value_.__r.__words + 4) = v333;
                                                                                                _os_log_impl((void *)&_mh_execute_header, v327, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(0)]: %s", (uint8_t *)v572, 0xCu);
                                                                                              }
                                                                                            }
                                                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                            {
                                                                                              -[PowerEventHandler_Rcp init:]();
                                                                                            }
                                                                                            if (!otPlatVendorGetVersion(*(void *)(v7 + 224), (uint64_t)v572, 500, v328, v329, v330, v331, v332))
                                                                                            {
                                                                                              std::string::basic_string[abi:ne180100]<0>(v594, (char *)v572);
                                                                                              boost::any::any<std::string &>();
                                                                                            }
                                                                                            goto LABEL_316;
                                                                                          }
                                                                                          goto LABEL_951;
                                                                                        }
                                                                                        goto LABEL_945;
                                                                                      }
                                                                                      goto LABEL_926;
                                                                                    }
                                                                                    goto LABEL_913;
                                                                                  }
                                                                                  goto LABEL_919;
                                                                                }
                                                                                goto LABEL_908;
                                                                              }
                                                                              goto LABEL_904;
                                                                            }
                                                                            goto LABEL_890;
                                                                          }
                                                                          goto LABEL_881;
                                                                        }
                                                                        goto LABEL_874;
                                                                      }
                                                                      goto LABEL_875;
                                                                    }
                                                                    goto LABEL_870;
                                                                  }
                                                                  goto LABEL_861;
                                                                }
                                                                goto LABEL_843;
                                                              }
                                                              goto LABEL_828;
                                                            }
                                                            goto LABEL_834;
                                                          }
                                                          goto LABEL_823;
                                                        }
                                                        goto LABEL_814;
                                                      }
                                                      goto LABEL_806;
                                                    }
                                                    goto LABEL_799;
                                                  }
                                                  goto LABEL_787;
                                                }
                                                goto LABEL_773;
                                              }
                                              goto LABEL_764;
                                            }
                                            goto LABEL_755;
                                          }
                                          goto LABEL_748;
                                        }
                                        goto LABEL_741;
                                      }
                                      goto LABEL_734;
                                    }
                                    goto LABEL_727;
                                  }
                                  goto LABEL_718;
                                }
                                goto LABEL_666;
                              }
                              goto LABEL_659;
                            }
                            goto LABEL_642;
                          }
                          goto LABEL_590;
                        }
                        goto LABEL_586;
                      }
                      goto LABEL_582;
                    }
                    goto LABEL_579;
                  }
                  goto LABEL_570;
                }
                goto LABEL_569;
              }
              goto LABEL_568;
            }
            goto LABEL_567;
          }
          goto LABEL_557;
        }
        goto LABEL_547;
      }
      goto LABEL_525;
    }
    goto LABEL_488;
  }
LABEL_466:
  v150 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v150)
  {
    std::string::value_type v151 = v150;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
    {
      int v152 = *(unsigned __int8 *)(v6 + 56);
      LODWORD(v572[0].__r_.__value_.__l.__data_) = 67109378;
      HIDWORD(v572[0].__r_.__value_.__r.__words[0]) = v152;
      LOWORD(v572[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v572[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IPv6:Routes";
      _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyGet[E(%d)]: %s", (uint8_t *)v572, 0x12u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  v572[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
  v572[0].__r_.__value_.__l.__size_ = (std::string::size_type)v572;
  v572[0].__r_.__value_.__r.__words[2] = 0;
  if (!*(unsigned char *)(v6 + 56))
  {
    uint64_t v171 = *(void *)(v7 + 104);
    if (v171 != v7 + 112)
    {
      *(void *)&v594[8] = 0;
      *(void *)&v594[16] = 0;
      *(void *)v594 = &v594[8];
      IPv6Prefix::to_string((const in6_addr *)(v171 + 28), v588);
      std::string::basic_string[abi:ne180100]<0>(&v599, "Address");
      v598.__r_.__value_.__r.__words[0] = (std::string::size_type)&v599;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v594, (const void **)&v599.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v598);
      boost::any::operator=<std::string>();
    }
    boost::any::any<std::list<std::map<std::string,boost::any>> &>();
  }
  HostInterpreter::update_on_mesh_prefixes((HostInterpreter *)v7);
  HostInterpreter::update_off_mesh_routes((HostInterpreter *)v7);
  HostInterpreter::refresh_routes_on_interface((HostInterpreter *)v7);
  std::list<std::map<std::string,boost::any>>::~list((uint64_t *)v572);
  return 0;
}

void sub_10012B110(_Unwind_Exception *exception_object)
{
  if (*(void *)(v1 + 288)) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessPropertySet(HostInterpreter *this, unsigned __int8 a2, char **a3, const char *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v7 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a4;
      if (a4[23] < 0) {
        uint64_t v8 = *(const char **)a4;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet: %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if ((a4[23] & 0x80000000) == 0)
  {
    if (strcmp(a4, "OpenThread:LogTimestampBase"))
    {
      if (strcmp(a4, "Network:PSKc"))
      {
        if (strcmp(a4, "Network:NodeType"))
        {
          if (strcmp(a4, "vendor:coex:radioload"))
          {
            if (strcmp(a4, "vendor:coex:rcp2:state:collection"))
            {
              if (strcmp(a4, "vendor:coex:rcp2:state:table:reset"))
              {
                if (strcmp(a4, "vendor:power"))
                {
                  if (strcmp(a4, "Thread:Pairing:Status"))
                  {
                    if (strcmp(a4, "Thread:FWUpdate"))
                    {
                      if (strcmp(a4, "Thread:EmacId"))
                      {
                        if (strcmp(a4, "StartCurrentNetworkDiscoveryScan"))
                        {
                          if (strcmp(a4, "NCP:TXPower"))
                          {
                            if (strcmp(a4, "Thread:ActiveDataset:Bytes"))
                            {
                              if (strcmp(a4, "Interface:Up"))
                              {
                                if (strcmp(a4, "vendor:power:limit:table:active:id"))
                                {
                                  if (strcmp(a4, "vendor:assert"))
                                  {
                                    if (strcmp(a4, "vendor:hard:reset:test"))
                                    {
                                      if (strcmp(a4, "vendor:mle:adv:tx:num"))
                                      {
                                        if (strcmp(a4, "Daemon:VirtualInterface:ReadBufferSize"))
                                        {
                                          if (strcmp(a4, "vendor:min:mac:interframedelay"))
                                          {
                                            if (strcmp(a4, "vendor:csl:tx:schedframe:reqahead:timeinus"))
                                            {
                                              if (strcmp(a4, "vendor:neighbor:count:histogram"))
                                              {
                                                if (strcmp(a4, "vendor:bbr:counters"))
                                                {
                                                  if (strcmp(a4, "vendor:linkloss:counters"))
                                                  {
                                                    if (strcmp(a4, "NCP:Counter:Thread:Mle"))
                                                    {
                                                      if (strcmp(a4, "NCP:Counter:AllIPv6"))
                                                      {
                                                        if (strcmp(a4, "ca:reporting:enabled"))
                                                        {
                                                          if (strcmp(a4, "streamRawRespTimeHistReset"))
                                                          {
                                                            if (strcmp(a4, "NCP:Counter:AllMac"))
                                                            {
                                                              if (strcmp(a4, "vendor:radio:stats"))
                                                              {
                                                                if (strcmp(a4, "vendor:radio:counters"))
                                                                {
                                                                  if (strcmp(a4, "vendor:joiner:RSSIHistogram"))
                                                                  {
                                                                    if (strcmp(a4, "vendor:deepsleep:filter:list"))
                                                                    {
                                                                      if (strcmp(a4, "vendor:deepsleep:loglevel"))
                                                                      {
                                                                        if (strcmp(a4, "vendor:deepsleep:region:loglevels"))
                                                                        {
                                                                          if (strcmp(a4, "vendor:last:host:wake:reason"))
                                                                          {
                                                                            if (strcmp(a4, "vendor:MAC:packet:SizeHistogram"))
                                                                            {
                                                                              if (strcmp(a4, "vendor:MAC:packet:LQIHistogram"))
                                                                              {
                                                                                if (strcmp(a4, "vendor:MAC:packet:RSSIHistogram"))
                                                                                {
                                                                                  if (strcmp(a4, "NCP:MacRetryHistogram"))
                                                                                  {
                                                                                    if (strcmp(a4, "vendor:openthread:radio:counters"))
                                                                                    {
                                                                                      if (strcmp(a4, "vendor:cntr:stats:reset"))
                                                                                      {
                                                                                        if (strcmp(a4, "NCP:HostPowerState"))
                                                                                        {
                                                                                          if (strcmp(a4, "NCP:PcapEnabled"))
                                                                                          {
                                                                                            if (strcmp(a4, "Daemon:PromiscuousPcap"))
                                                                                            {
                                                                                              if (strcmp(a4, "UpdateLeaderInfo"))
                                                                                              {
                                                                                                if (strcmp(a4, "NCP:Counter:Thread:Neighbor:TriggerBased"))
                                                                                                {
                                                                                                  if (strcmp(a4, "Thread:Health:Metrics"))
                                                                                                  {
                                                                                                    if (strcmp(a4, "Leader:Reelect:Counters"))
                                                                                                    {
                                                                                                      uint64_t v60 = a4;
                                                                                                      if (strcmp(a4, "bt_state_change"))
                                                                                                      {
LABEL_60:
                                                                                                        BOOL v61 = strcmp(v60, "ap_state") == 0;
                                                                                                        uint64_t v62 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                        uint64_t v63 = v62;
                                                                                                        if (v61)
                                                                                                        {
                                                                                                          if (v62)
                                                                                                          {
                                                                                                            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                                                                                                            {
                                                                                                              v245 = a4;
                                                                                                              if (a4[23] < 0) {
                                                                                                                v245 = *(const char **)a4;
                                                                                                              }
                                                                                                              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                                                                                                              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v245;
                                                                                                              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet[E(0)]: %s", (uint8_t *)&buf, 0xCu);
                                                                                                            }
                                                                                                          }
                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                          {
                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                          }
                                                                                                          any_to_BOOL((const boost::any *)(a4 + 24));
                                                                                                          std::string::basic_string[abi:ne180100]<0>(&buf, "ap_state");
                                                                                                          operator new();
                                                                                                        }
                                                                                                        if (v62)
                                                                                                        {
                                                                                                          if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
                                                                                                            HostInterpreter::ProcessPropertySet();
                                                                                                          }
                                                                                                        }
                                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                        {
                                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                                        }
                                                                                                        goto LABEL_617;
                                                                                                      }
LABEL_115:
                                                                                                      uint64_t v64 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                      if (v64)
                                                                                                      {
                                                                                                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
                                                                                                        {
                                                                                                          uint64_t v65 = a4;
                                                                                                          if (a4[23] < 0) {
                                                                                                            uint64_t v65 = *(const char **)a4;
                                                                                                          }
                                                                                                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                                                                                                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
                                                                                                          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet[E(0)]: %s", (uint8_t *)&buf, 0xCu);
                                                                                                        }
                                                                                                      }
                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                      {
                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                      }
                                                                                                      any_to_BOOL((const boost::any *)(a4 + 24));
                                                                                                      std::string::basic_string[abi:ne180100]<0>(&buf, "bt_state_change");
                                                                                                      operator new();
                                                                                                    }
                                                                                                    goto LABEL_592;
                                                                                                  }
LABEL_581:
                                                                                                  v240 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                  if (v240)
                                                                                                  {
                                                                                                    uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(6);
                                                                                                    if (is_the_mask_enabled)
                                                                                                    {
                                                                                                      uint64_t is_the_mask_enabled = os_log_type_enabled(v240, OS_LOG_TYPE_INFO);
                                                                                                      if (is_the_mask_enabled)
                                                                                                      {
                                                                                                        v242 = a4;
                                                                                                        if (a4[23] < 0) {
                                                                                                          v242 = *(const char **)a4;
                                                                                                        }
                                                                                                        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                                                                                                        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v242;
                                                                                                        _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet[E(0)]: %s", (uint8_t *)&buf, 0xCu);
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
                                                                                                    if (is_the_mask_enabled) {
                                                                                                      -[PowerEventHandler_Rcp init:]();
                                                                                                    }
                                                                                                  }
                                                                                                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
                                                                                                  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
                                                                                                  buf.__r_.__value_.__r.__words[2] = 0;
                                                                                                  HostInterpreter::ClearThreadHealthMetrics((HostInterpreter *)is_the_mask_enabled);
                                                                                                  boost::function1<void,int>::operator()((void *)a4 + 4);
                                                                                                  std::list<std::string>::~list((char *)&buf);
                                                                                                  return 0;
                                                                                                }
                                                                                                goto LABEL_571;
                                                                                              }
LABEL_562:
                                                                                              HostInterpreter::ProcessUpdateLeaderInfo(this);
                                                                                              boost::function1<void,int>::operator()((void *)a4 + 4);
                                                                                              return 0;
                                                                                            }
                                                                                            goto LABEL_546;
                                                                                          }
                                                                                          goto LABEL_541;
                                                                                        }
LABEL_537:
                                                                                        unsigned __int8 v222 = any_to_int((const boost::any *)(a4 + 24));
                                                                                        std::string::value_type v223 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                        if (v223)
                                                                                        {
                                                                                          if (syslog_is_the_mask_enabled(6)
                                                                                            && os_log_type_enabled(v223, OS_LOG_TYPE_INFO))
                                                                                          {
                                                                                            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                                                                            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v222;
                                                                                            _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_INFO, "Set power state to %u", (uint8_t *)&buf, 8u);
                                                                                          }
                                                                                        }
                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                        {
                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                        }
                                                                                        uint64_t BufferSize = otPlatRadioSetHostPowerState(*((void *)this + 28), v222, v224, v225, v226, v227, v228, v229);
                                                                                        if (!BufferSize) {
                                                                                          goto LABEL_617;
                                                                                        }
                                                                                        goto LABEL_278;
                                                                                      }
LABEL_529:
                                                                                      uint64_t BufferSize = otPlatVendorCntrStatsReset(*((void *)this + 28), v53, v54, v55, v56, v57, v58, v59);
                                                                                      if (!BufferSize)
                                                                                      {
                                                                                        v221 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                        if (v221)
                                                                                        {
                                                                                          if (syslog_is_the_mask_enabled(6)
                                                                                            && os_log_type_enabled(v221, OS_LOG_TYPE_INFO))
                                                                                          {
                                                                                            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                                                            _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_INFO, "Reset all stats, counters and histograms", (uint8_t *)&buf, 2u);
                                                                                          }
                                                                                        }
                                                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                        {
                                                                                          -[PowerEventHandler_Rcp init:]();
                                                                                        }
                                                                                        goto LABEL_617;
                                                                                      }
                                                                                      goto LABEL_278;
                                                                                    }
LABEL_521:
                                                                                    uint64_t BufferSize = otPlatVendorResetOpenThreadRadioCounters(*((void *)this + 28), v46, v47, v48, v49, v50, v51, v52);
                                                                                    if (!BufferSize)
                                                                                    {
                                                                                      uint64_t v220 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                      if (v220)
                                                                                      {
                                                                                        if (syslog_is_the_mask_enabled(6)
                                                                                          && os_log_type_enabled(v220, OS_LOG_TYPE_INFO))
                                                                                        {
                                                                                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                                                          _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_INFO, "Reset Radio counters", (uint8_t *)&buf, 2u);
                                                                                        }
                                                                                      }
                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                      {
                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                      }
                                                                                      goto LABEL_617;
                                                                                    }
                                                                                    goto LABEL_278;
                                                                                  }
                                                                                  goto LABEL_514;
                                                                                }
                                                                                goto LABEL_507;
                                                                              }
                                                                              goto LABEL_503;
                                                                            }
                                                                            goto LABEL_499;
                                                                          }
                                                                          goto LABEL_496;
                                                                        }
LABEL_490:
                                                                        LOBYTE(v256.__vftable) = -12;
                                                                        uint64_t BufferSize = otPlatVendorSetDeepSleepRegionLogLevels(*((void *)this + 28), (uint64_t)&buf, (uint64_t)&v256, v34, v35, v36, v37, v38);
                                                                        if (BufferSize)
                                                                        {
LABEL_277:
                                                                          if (!BufferSize) {
                                                                            return BufferSize;
                                                                          }
                                                                          goto LABEL_278;
                                                                        }
LABEL_479:
                                                                        boost::function1<void,int>::operator()((void *)a4 + 4);
                                                                        goto LABEL_277;
                                                                      }
                                                                      goto LABEL_481;
                                                                    }
LABEL_478:
                                                                    LOBYTE(v256.__vftable) = 0;
                                                                    uint64_t BufferSize = otPlatVendorSetDeepSleepFilterList(*((void *)this + 28), (uint64_t)&buf, (uint64_t)&v256, v29, v30, v31, v32, v33);
                                                                    if (BufferSize) {
                                                                      goto LABEL_277;
                                                                    }
                                                                    goto LABEL_479;
                                                                  }
LABEL_474:
                                                                  otLinkResetJoinerRssiHistogram(*((void *)this + 28));
                                                                  unsigned __int8 v206 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                  if (v206)
                                                                  {
                                                                    if (syslog_is_the_mask_enabled(6)
                                                                      && os_log_type_enabled(v206, OS_LOG_TYPE_INFO))
                                                                    {
                                                                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                                      _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_INFO, "Reset joiner rssi histograms", (uint8_t *)&buf, 2u);
                                                                    }
                                                                  }
                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                  {
                                                                    -[PowerEventHandler_Rcp init:]();
                                                                  }
                                                                  goto LABEL_617;
                                                                }
LABEL_466:
                                                                uint64_t BufferSize = otPlatVendorResetRadioCounters(*((void *)this + 28), v22, v23, v24, v25, v26, v27, v28);
                                                                if (!BufferSize)
                                                                {
                                                                  unsigned __int8 v205 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                  if (v205)
                                                                  {
                                                                    if (syslog_is_the_mask_enabled(6)
                                                                      && os_log_type_enabled(v205, OS_LOG_TYPE_INFO))
                                                                    {
                                                                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                                      _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_INFO, "Reset All vendor radio counters", (uint8_t *)&buf, 2u);
                                                                    }
                                                                  }
                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                  {
                                                                    -[PowerEventHandler_Rcp init:]();
                                                                  }
                                                                  goto LABEL_617;
                                                                }
                                                                goto LABEL_278;
                                                              }
LABEL_457:
                                                              uint64_t BufferSize = otPlatVendorResetRadioStats(*((void *)this + 28), v15, v16, v17, v18, v19, v20, v21);
                                                              if (!BufferSize)
                                                              {
                                                                unsigned __int8 v204 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                if (v204)
                                                                {
                                                                  if (syslog_is_the_mask_enabled(6)
                                                                    && os_log_type_enabled(v204, OS_LOG_TYPE_INFO))
                                                                  {
                                                                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                                    _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_INFO, "Reset All vendor radio stats", (uint8_t *)&buf, 2u);
                                                                  }
                                                                }
                                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                {
                                                                  -[PowerEventHandler_Rcp init:]();
                                                                }
                                                                goto LABEL_617;
                                                              }
                                                              goto LABEL_278;
                                                            }
LABEL_438:
                                                            otLinkResetCounters(*((void *)this + 28));
                                                            int v199 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                            if (v199)
                                                            {
                                                              if (syslog_is_the_mask_enabled(6)
                                                                && os_log_type_enabled(v199, OS_LOG_TYPE_INFO))
                                                              {
                                                                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                                _os_log_impl((void *)&_mh_execute_header, v199, OS_LOG_TYPE_INFO, "Reset All Mac counters", (uint8_t *)&buf, 2u);
                                                              }
                                                            }
                                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                            {
                                                              -[PowerEventHandler_Rcp init:]();
                                                            }
                                                            *(unsigned char *)(RcpHostContext::sRcpHostContext
                                                                     + 960
                                                                     + 200
                                                                     * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3)
                                                                     + 19) = 1;
                                                            boost::function1<void,int>::operator()((void *)a4 + 4);
                                                            return 0;
                                                          }
LABEL_431:
                                                          otResetStreamRawResponseHistogram();
                                                          long long v198 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                          if (v198)
                                                          {
                                                            if (syslog_is_the_mask_enabled(6)
                                                              && os_log_type_enabled(v198, OS_LOG_TYPE_INFO))
                                                            {
                                                              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                              _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_INFO, "Reset Streamrawhistogram", (uint8_t *)&buf, 2u);
                                                            }
                                                          }
                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                          {
                                                            -[PowerEventHandler_Rcp init:]();
                                                          }
                                                          goto LABEL_617;
                                                        }
LABEL_426:
                                                        int v196 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                                        if (v196)
                                                        {
                                                          *(unsigned char *)(RcpHostContext::sRcpHostContext + 796) = 1;
                                                          std::string::basic_string[abi:ne180100]<0>(&buf, "ca:reporting:enabled");
                                                          v256.__vftable = (std::runtime_error_vtbl *)&buf;
                                                          v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v256);
                                                          std::string::assign((std::string *)(v197 + 7), "1");
                                                        }
                                                        else
                                                        {
                                                          *(unsigned char *)(RcpHostContext::sRcpHostContext + 796) = 0;
                                                          std::string::basic_string[abi:ne180100]<0>(&buf, "ca:reporting:enabled");
                                                          v256.__vftable = (std::runtime_error_vtbl *)&buf;
                                                          v200 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v256);
                                                          std::string::assign((std::string *)(v200 + 7), "0");
                                                        }
                                                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                                                          operator delete(buf.__r_.__value_.__l.__data_);
                                                        }
                                                        std::string::basic_string[abi:ne180100]<0>(&buf, "ca:reporting:enabled");
                                                        v256.__vftable = (std::runtime_error_vtbl *)&buf;
                                                        v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v256);
                                                        uint64_t v202 = (const char *)(v201 + 7);
                                                        if (*((char *)v201 + 79) < 0) {
                                                          uint64_t v202 = *(const char **)v202;
                                                        }
                                                        saveStringValue("ca:reporting:enabled", v202);
                                                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                                                          operator delete(buf.__r_.__value_.__l.__data_);
                                                        }
                                                        unsigned __int16 v203 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                        if (v203)
                                                        {
                                                          if (syslog_is_the_mask_enabled(6)
                                                            && os_log_type_enabled(v203, OS_LOG_TYPE_INFO))
                                                          {
                                                            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                                            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v196;
                                                            _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_INFO, "mEnableCaReporting = %d", (uint8_t *)&buf, 8u);
                                                          }
                                                        }
                                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                        {
                                                          -[PowerEventHandler_Rcp init:]();
                                                        }
                                                        goto LABEL_617;
                                                      }
LABEL_419:
                                                      otThreadResetIp6Counters(*((void *)this + 28));
                                                      uint64_t v195 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                      if (v195)
                                                      {
                                                        if (syslog_is_the_mask_enabled(6)
                                                          && os_log_type_enabled(v195, OS_LOG_TYPE_INFO))
                                                        {
                                                          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                          _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_INFO, "Reset All IPv6 counters", (uint8_t *)&buf, 2u);
                                                        }
                                                      }
                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                      {
                                                        -[PowerEventHandler_Rcp init:]();
                                                      }
                                                      *(unsigned char *)(RcpHostContext::sRcpHostContext
                                                               + 960
                                                               + 200
                                                               * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3)
                                                               + 18) = 1;
                                                      boost::function1<void,int>::operator()((void *)a4 + 4);
                                                      return 0;
                                                    }
LABEL_412:
                                                    otThreadResetMleCounters(*((void *)this + 28));
                                                    std::string::value_type v194 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                    if (v194)
                                                    {
                                                      if (syslog_is_the_mask_enabled(6)
                                                        && os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
                                                      {
                                                        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                        _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_INFO, "Reset Mle counters", (uint8_t *)&buf, 2u);
                                                      }
                                                    }
                                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                    {
                                                      -[PowerEventHandler_Rcp init:]();
                                                    }
                                                    goto LABEL_617;
                                                  }
LABEL_405:
                                                  otThreadResetMleLinkLossCounters(*((void *)this + 28));
                                                  v193 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                  if (v193)
                                                  {
                                                    if (syslog_is_the_mask_enabled(6)
                                                      && os_log_type_enabled(v193, OS_LOG_TYPE_INFO))
                                                    {
                                                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                      _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_INFO, "Reset Link loss counters", (uint8_t *)&buf, 2u);
                                                    }
                                                  }
                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                  {
                                                    -[PowerEventHandler_Rcp init:]();
                                                  }
                                                  goto LABEL_617;
                                                }
LABEL_397:
                                                otThreadResetBbrCounters(*((void *)this + 28));
                                                v192 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                if (v192)
                                                {
                                                  if (syslog_is_the_mask_enabled(6)
                                                    && os_log_type_enabled(v192, OS_LOG_TYPE_INFO))
                                                  {
                                                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                    _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_INFO, "Reset BBR counters", (uint8_t *)&buf, 2u);
                                                  }
                                                }
                                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                {
                                                  -[PowerEventHandler_Rcp init:]();
                                                }
                                                goto LABEL_617;
                                              }
LABEL_389:
                                              otThreadResetConnectedChildNodesHistogram(*((void *)this + 28));
                                              otThreadResetConnectedRouterNodesHistogram(*((void *)this + 28));
                                              uint64_t v191 = log_get_logging_obg("com.apple.threadradiod", "default");
                                              if (v191)
                                              {
                                                if (syslog_is_the_mask_enabled(6)
                                                  && os_log_type_enabled(v191, OS_LOG_TYPE_INFO))
                                                {
                                                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                                  _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_INFO, "Reset Connected neighbor histograms", (uint8_t *)&buf, 2u);
                                                }
                                              }
                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                              {
                                                -[PowerEventHandler_Rcp init:]();
                                              }
                                              goto LABEL_617;
                                            }
LABEL_375:
                                            int v188 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                            v189 = log_get_logging_obg("com.apple.threadradiod", "default");
                                            if (v189)
                                            {
                                              if (syslog_is_the_mask_enabled(6)
                                                && os_log_type_enabled(v189, OS_LOG_TYPE_INFO))
                                              {
                                                LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                                HIDWORD(buf.__r_.__value_.__r.__words[0]) = v188;
                                                _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_INFO, "csl:tx:schedframe:reqahead:timeinus %d", (uint8_t *)&buf, 8u);
                                              }
                                            }
                                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                            {
                                              -[PowerEventHandler_Rcp init:]();
                                            }
                                            uint64_t BufferSize = otLinkSetCslRequestAhead(*((void *)this + 28), v188);
                                            if (!BufferSize) {
                                              persist_csl_request_ahead();
                                            }
                                            goto LABEL_278;
                                          }
LABEL_367:
                                          unsigned int v180 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                          v181 = log_get_logging_obg("com.apple.threadradiod", "default");
                                          if (v181)
                                          {
                                            if (syslog_is_the_mask_enabled(6)
                                              && os_log_type_enabled(v181, OS_LOG_TYPE_INFO))
                                            {
                                              LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v180;
                                              _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_INFO, "vendor:min:mac:interframedelay %d", (uint8_t *)&buf, 8u);
                                            }
                                          }
                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                          {
                                            -[PowerEventHandler_Rcp init:]();
                                          }
                                          uint64_t BufferSize = otPlatRadioSetMinInterframeDelay(*((void *)this + 28), v180, v182, v183, v184, v185, v186, v187);
                                          if (!BufferSize)
                                          {
                                            boost::function1<void,int>::operator()((void *)a4 + 4);
                                            persist_interframe_delay();
                                          }
                                          goto LABEL_278;
                                        }
LABEL_340:
                                        int v176 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                        std::string::value_type v177 = log_get_logging_obg("com.apple.threadradiod", "default");
                                        if (v177)
                                        {
                                          if (syslog_is_the_mask_enabled(6)
                                            && os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
                                          {
                                            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v176;
                                            _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_INFO, "Daemon:VirtualInterface:ReadBufferSize %d", (uint8_t *)&buf, 8u);
                                          }
                                        }
                                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          -[PowerEventHandler_Rcp init:]();
                                        }
                                        uint64_t BufferSize = otSysSetThreadirtualInterfaceReadBufferSize(v176);
                                        if (!BufferSize) {
                                          persist_virtual_interface_readbuffersize();
                                        }
                                        goto LABEL_278;
                                      }
LABEL_332:
                                      unsigned __int8 v174 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                      v175 = log_get_logging_obg("com.apple.threadradiod", "default");
                                      if (v175)
                                      {
                                        if (syslog_is_the_mask_enabled(6)
                                          && os_log_type_enabled(v175, OS_LOG_TYPE_INFO))
                                        {
                                          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v174;
                                          _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_INFO, "mle:adv:tx:num %d", (uint8_t *)&buf, 8u);
                                        }
                                      }
                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        -[PowerEventHandler_Rcp init:]();
                                      }
                                      uint64_t BufferSize = otLinkSetMleAdvTxNum(*((void *)this + 28), v174);
                                      if (!BufferSize) {
                                        persist_num_mle_adv();
                                      }
                                      goto LABEL_278;
                                    }
LABEL_324:
                                    unsigned __int8 v166 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                    v167 = log_get_logging_obg("com.apple.threadradiod", "default");
                                    if (v167)
                                    {
                                      if (syslog_is_the_mask_enabled(6)
                                        && os_log_type_enabled(v167, OS_LOG_TYPE_INFO))
                                      {
                                        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v166;
                                        _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_INFO, "Set hardResetTestMode to %u", (uint8_t *)&buf, 8u);
                                      }
                                    }
                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                    {
                                      -[PowerEventHandler_Rcp init:]();
                                    }
                                    uint64_t BufferSize = otPlatVendorSetHardResetTest(*((void *)this + 28), v166, v168, v169, v170, v171, v172, v173);
                                    if (!BufferSize) {
                                      goto LABEL_617;
                                    }
                                    goto LABEL_278;
                                  }
LABEL_307:
                                  unsigned int v156 = any_to_uint64((const boost::any *)(a4 + 24), 0);
                                  int v157 = log_get_logging_obg("com.apple.threadradiod", "default");
                                  if (v157)
                                  {
                                    if (syslog_is_the_mask_enabled(6)
                                      && os_log_type_enabled(v157, OS_LOG_TYPE_INFO))
                                    {
                                      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v156;
                                      _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_INFO, "vendor:assert %d", (uint8_t *)&buf, 8u);
                                    }
                                  }
                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                  {
                                    -[PowerEventHandler_Rcp init:]();
                                  }
                                  uint64_t BufferSize = otPlatVendorScheduleAssert(*((void *)this + 28), v156, v158, v159, v160, v161, v162, v163);
                                  if (!BufferSize) {
                                    goto LABEL_617;
                                  }
                                  goto LABEL_278;
                                }
LABEL_290:
                                unsigned __int8 v146 = any_to_int((const boost::any *)(a4 + 24));
                                std::string::value_type v147 = log_get_logging_obg("com.apple.threadradiod", "default");
                                if (v147)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
                                  {
                                    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v146;
                                    _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_INFO, "vendor:power:limit:table:active:id == activeId[%d]", (uint8_t *)&buf, 8u);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                uint64_t BufferSize = otPlatVendorSetPowerLimitTableActiveId(*((void *)this + 28), (char)v146, v148, v149, v150, v151, v152, v153);
                                if (!BufferSize) {
                                  goto LABEL_617;
                                }
                                goto LABEL_278;
                              }
LABEL_281:
                              BOOL v142 = any_to_BOOL((const boost::any *)(a4 + 24));
                              RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)&buf);
                              std::string::value_type v143 = log_get_logging_obg("com.apple.threadradiod", "default");
                              if (v143)
                              {
                                uint64_t v144 = syslog_is_the_mask_enabled(6);
                                if (v144)
                                {
                                  uint64_t v144 = os_log_type_enabled(v143, OS_LOG_TYPE_INFO);
                                  if (v144)
                                  {
                                    p_std::string buf = (std::runtime_error_vtbl *)&buf;
                                    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                      p_std::string buf = (std::runtime_error_vtbl *)buf.__r_.__value_.__r.__words[0];
                                    }
                                    LODWORD(v256.__vftable) = 136315138;
                                    *(std::runtime_error_vtbl **)((char *)&v256.__vftable + 4) = p_buf;
                                    _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_INFO, "Current RCP state = %s", (uint8_t *)&v256, 0xCu);
                                  }
                                }
                              }
                              else
                              {
                                uint64_t v144 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
                                if (v144) {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                              }
                              if (v142)
                              {
                                RcpHostContext::init_threadstart_radio_start((RcpHostContext *)RcpHostContext::sRcpHostContext);
                                otIp6SetSlaacEnabled(*((void *)this + 28), 1);
                                uint64_t BufferSize = otIp6SetEnabled(*((void *)this + 28), 1);
                                if (BufferSize) {
                                  goto LABEL_274;
                                }
                                v164 = log_get_logging_obg("com.apple.threadradiod", "default");
                                if (v164)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
                                  {
                                    v256.__vftable = (std::runtime_error_vtbl *)0x104000100;
                                    _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_INFO, "Set property with interfaceUp = %d", (uint8_t *)&v256, 8u);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                uint64_t BufferSize = otThreadSetEnabled(*((void *)this + 28), 1);
                                if (BufferSize) {
                                  goto LABEL_274;
                                }
                                if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) == 6) {
                                  otThreadBecomeLeader(*((void *)this + 28), 0);
                                }
                                v178 = log_get_logging_obg("com.apple.threadradiod", "default");
                                if (v178)
                                {
                                  if (syslog_is_the_mask_enabled(6)
                                    && os_log_type_enabled(v178, OS_LOG_TYPE_INFO))
                                  {
                                    LODWORD(v256.__vftable) = 136315138;
                                    *(std::runtime_error_vtbl **)((char *)&v256.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessPropertySet";
                                    _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_INFO, "%s Thread start, Done", (uint8_t *)&v256, 0xCu);
                                  }
                                }
                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  -[PowerEventHandler_Rcp init:]();
                                }
                                HostInterpreter::saveExtendedMACAddressIfNotAvailableinDB(this);
                                HostInterpreter::transactionEnabled(v190, 1);
                                goto LABEL_273;
                              }
                              HostInterpreter::transactionEnabled((HostInterpreter *)v144, 0);
                              otIp6SetSlaacEnabled(*((void *)this + 28), 0);
                              uint64_t BufferSize = otThreadSetEnabled(*((void *)this + 28), 0);
                              if (BufferSize) {
                                goto LABEL_274;
                              }
                              std::string::value_type v165 = log_get_logging_obg("com.apple.threadradiod", "default");
                              if (v165)
                              {
                                if (syslog_is_the_mask_enabled(6)
                                  && os_log_type_enabled(v165, OS_LOG_TYPE_INFO))
                                {
                                  LODWORD(v256.__vftable) = 136315138;
                                  *(std::runtime_error_vtbl **)((char *)&v256.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessPropertySet";
                                  _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_INFO, "%s Thread stop, Done", (uint8_t *)&v256, 0xCu);
                                }
                              }
                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                -[PowerEventHandler_Rcp init:]();
                              }
                              uint64_t BufferSize = otIp6SetEnabled(*((void *)this + 28), 0);
                              if (BufferSize) {
                                goto LABEL_274;
                              }
                              v179 = log_get_logging_obg("com.apple.threadradiod", "default");
                              if (v179)
                              {
                                if (syslog_is_the_mask_enabled(6)
                                  && os_log_type_enabled(v179, OS_LOG_TYPE_INFO))
                                {
                                  v256.__vftable = (std::runtime_error_vtbl *)67109120;
                                  _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_INFO, "Set property with interfaceUp = %d", (uint8_t *)&v256, 8u);
                                }
                                goto LABEL_273;
                              }
                              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                goto LABEL_272;
                              }
LABEL_273:
                              boost::function1<void,int>::operator()((void *)a4 + 4);
                              uint64_t BufferSize = 0;
                              goto LABEL_274;
                            }
                            goto LABEL_265;
                          }
LABEL_248:
                          LOBYTE(v256.__vftable) = 0;
                          any_to_string((const boost::any *)(a4 + 24), (uint64_t)&buf);
                          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            BOOL v134 = (ot::Utils::CmdLineParser *)&buf;
                          }
                          else {
                            BOOL v134 = (ot::Utils::CmdLineParser *)buf.__r_.__value_.__r.__words[0];
                          }
                          uint64_t BufferSize = ot::Utils::CmdLineParser::ParseAsInt8(v134, (char *)&v256, v133);
                          if (!BufferSize)
                          {
                            uint64_t BufferSize = otPlatRadioSetTransmitPower(*((void *)this + 28), (char)v256.__vftable);
                            if (!BufferSize) {
                              persist_tx_power();
                            }
                          }
                          goto LABEL_274;
                        }
LABEL_239:
                        uint64_t BufferSize = HostInterpreter::ProcessDiscoverScanForCurrentNetwork(this);
                        if (BufferSize) {
                          goto LABEL_278;
                        }
LABEL_617:
                        boost::function1<void,int>::operator()((void *)a4 + 4);
                        return 0;
                      }
LABEL_230:
                      any_to_string((const boost::any *)(a4 + 24), (uint64_t)&buf);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        if (buf.__r_.__value_.__l.__size_)
                        {
                          std::string::size_type v132 = (ot::Utils::CmdLineParser *)buf.__r_.__value_.__r.__words[0];
LABEL_256:
                          uint64_t BufferSize = ot::Utils::CmdLineParser::ParseAsHexString(v132, v255, (unsigned __int8 *)8);
                          if (!BufferSize)
                          {
                            otLinkSetPairingDeviceExtAddr(*((void *)this + 28), (uint64_t)v255);
                            uint64_t v135 = log_get_logging_obg("com.apple.threadradiod", "default");
                            if (v135)
                            {
                              if (syslog_is_the_mask_enabled(6)
                                && os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
                              {
                                std::string::size_type v136 = (std::runtime_error_vtbl *)&buf;
                                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  std::string::size_type v136 = (std::runtime_error_vtbl *)buf.__r_.__value_.__r.__words[0];
                                }
                                LODWORD(v256.__vftable) = 136315138;
                                *(std::runtime_error_vtbl **)((char *)&v256.__vftable + 4) = v136;
                                _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertyThreadEmacId: %s", (uint8_t *)&v256, 0xCu);
                              }
                              goto LABEL_273;
                            }
                            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                              goto LABEL_273;
                            }
LABEL_272:
                            -[PowerEventHandler_Rcp init:]();
                            goto LABEL_273;
                          }
LABEL_274:
                          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_277;
                          }
                          std::string v84 = (std::runtime_error_vtbl *)buf.__r_.__value_.__r.__words[0];
                          goto LABEL_276;
                        }
                      }
                      else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
                      {
                        std::string::size_type v132 = (ot::Utils::CmdLineParser *)&buf;
                        goto LABEL_256;
                      }
                      otLinkSetPairingDeviceExtAddr(*((void *)this + 28), 0);
                      goto LABEL_273;
                    }
LABEL_215:
                    *((unsigned char *)this + 171) = any_to_BOOL((const boost::any *)(a4 + 24));
                    v129 = log_get_logging_obg("com.apple.threadradiod", "default");
                    if (v129)
                    {
                      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                      {
                        int v130 = *((unsigned __int8 *)this + 171);
                        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v130;
                        _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_INFO, "HostInterpreter::kWPANTUNDProperty_ThreadFWUpdate fwUpdate=[%d]", (uint8_t *)&buf, 8u);
                      }
                    }
                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      -[PowerEventHandler_Rcp init:]();
                    }
                    uint64_t BufferSize = otThreadSetFirmwareUpdate(*((void *)this + 28), *((unsigned char *)this + 171));
                    if (!BufferSize) {
                      goto LABEL_617;
                    }
                    goto LABEL_278;
                  }
LABEL_202:
                  *((unsigned char *)this + 170) = any_to_BOOL((const boost::any *)(a4 + 24));
                  v125 = log_get_logging_obg("com.apple.threadradiod", "default");
                  if (v125)
                  {
                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
                    {
                      int v126 = *((unsigned __int8 *)this + 170);
                      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v126;
                      _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_INFO, "HostInterpreter::kWPANTUNDProperty_ThreadPairingStatus pairingStatus=[%d]", (uint8_t *)&buf, 8u);
                    }
                  }
                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    -[PowerEventHandler_Rcp init:]();
                  }
                  goto LABEL_617;
                }
LABEL_177:
                v255[0] = 0;
                any_to_string((const boost::any *)(a4 + 24), (uint64_t)&buf);
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v111 = (ot::Utils::CmdLineParser *)&buf;
                }
                else {
                  v111 = (ot::Utils::CmdLineParser *)buf.__r_.__value_.__r.__words[0];
                }
                uint64_t BufferSize = ot::Utils::CmdLineParser::ParseAsInt8(v111, v255, v110);
                if (BufferSize) {
                  goto LABEL_274;
                }
                uint64_t BufferSize = otPlatVendorSetPower(*((void *)this + 28), (uint64_t)v255, v112, v113, v114, v115, v116, v117);
                if (BufferSize) {
                  goto LABEL_274;
                }
                v118 = log_get_logging_obg("com.apple.threadradiod", "default");
                if (v118)
                {
                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
                  {
                    LODWORD(v256.__vftable) = 134217984;
                    *(double *)((char *)&v256.__vftable + 4) = (double)v255[0] * 0.25;
                    _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySetVendorPower = %f dBm", (uint8_t *)&v256, 0xCu);
                  }
                  goto LABEL_273;
                }
                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_273;
                }
                goto LABEL_272;
              }
LABEL_161:
              uint64_t BufferSize = otPlatVendorResetOrStopCoexCollection(*((void *)this + 28), 1, v9, v10, v11, v12, v13, v14);
              if (!BufferSize)
              {
                xpc_object_t v99 = log_get_logging_obg("com.apple.threadradiod", "default");
                if (v99)
                {
                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "Clear coex counters but continue the data collection", (uint8_t *)&buf, 2u);
                  }
                }
                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  -[PowerEventHandler_Rcp init:]();
                }
                goto LABEL_617;
              }
              goto LABEL_278;
            }
            goto LABEL_149;
          }
LABEL_145:
          std::string::size_type v85 = any_to_uint64((const boost::any *)(a4 + 24), 0);
          long long v86 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v86)
          {
            uint64_t v87 = syslog_is_the_mask_enabled(6);
            if (v87)
            {
              uint64_t v87 = os_log_type_enabled(v86, OS_LOG_TYPE_INFO);
              if (v87)
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v85;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_INFO, "BT Load: Vendor:coex:RadioLoad is 0x%llx", (uint8_t *)&buf, 0xCu);
              }
            }
          }
          else
          {
            uint64_t v87 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
            if (v87) {
              -[PowerEventHandler_Rcp init:]();
            }
          }
          *((void *)this + 22) = v85;
          HostInterpreter::generateBTWIFIAudioLoadCAEventToTNM((HostInterpreter *)v87, v85);
          BOOL isAudioNoThreadFeatureEnabled = RcpHostContext::isAudioNoThreadFeatureEnabled((RcpHostContext *)RcpHostContext::sRcpHostContext);
          if (isAudioNoThreadFeatureEnabled)
          {
            *((unsigned char *)this + 184) = HostInterpreter::isAudioEscoLeaScoAos((HostInterpreter *)isAudioNoThreadFeatureEnabled, v85);
            xpc_object_t v101 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (v101)
            {
              uint64_t v102 = syslog_is_the_mask_enabled(6);
              if (v102)
              {
                uint64_t v102 = os_log_type_enabled(v101, OS_LOG_TYPE_INFO);
                if (v102)
                {
                  int v103 = *((unsigned __int8 *)this + 184);
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v103;
                  _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "%s, BT Load, Audio detection: BTAudioCallStatus is %d", (uint8_t *)&buf, 0x12u);
                }
              }
            }
            else
            {
              uint64_t v102 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
              if (v102) {
                -[PowerEventHandler_Rcp init:]();
              }
            }
            if (!*((unsigned char *)this + 170))
            {
              BOOL v122 = *((unsigned char *)this + 184) == 0;
              BOOL isThreadSessionEnabled = HostInterpreter::isThreadSessionEnabled((HostInterpreter *)v102);
              if (v122)
              {
                if (!isThreadSessionEnabled
                  && !HostInterpreter::isThreadSessionJoinEnabled((HostInterpreter *)isThreadSessionEnabled))
                {
                  std::string::value_type v131 = log_get_logging_obg("com.apple.threadradiod", "default");
                  if (v131)
                  {
                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
                    {
                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_INFO, "%s, BT Load, Audio detection: eSCO is done, notify HK", (uint8_t *)&buf, 0xCu);
                    }
                  }
                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    -[PowerEventHandler_Rcp init:]();
                  }
                  std::string::basic_string[abi:ne180100]<0>(&buf, "bt_airpod_esco");
                  operator new();
                }
              }
              else if (isThreadSessionEnabled {
                     || HostInterpreter::isThreadSessionJoinEnabled((HostInterpreter *)isThreadSessionEnabled))
              }
              {
                std::string::size_type v124 = log_get_logging_obg("com.apple.threadradiod", "default");
                if (v124)
                {
                  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                    _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_INFO, "%s, BT Load, Audio detection: Thread is ON and eSCO is happening, stop thread and notify HK", (uint8_t *)&buf, 0xCu);
                  }
                }
                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  -[PowerEventHandler_Rcp init:]();
                }
                std::string::basic_string[abi:ne180100]<0>(&buf, "bt_airpod_esco");
                operator new();
              }
            }
          }
          otLinkSetCoexLoadMap(*((void *)this + 28), v85);
          BOOL v120 = HostInterpreter::isThreadSessionEnabled(v119);
          if (!v120 && !HostInterpreter::isThreadSessionJoinEnabled((HostInterpreter *)v120))
          {
            v121 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (v121)
            {
              if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_INFO, "BT Load: ThreadSession/ThreadSessionJoin Both are OFF, Notify WRM", (uint8_t *)&buf, 2u);
              }
            }
            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              -[PowerEventHandler_Rcp init:]();
            }
          }
          uint64_t v128 = *((void *)a4 + 4);
          if (!v128)
          {
            std::runtime_error::runtime_error((std::runtime_error *)&buf, "call to empty boost::function");
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495450;
            boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)&buf);
          }
          goto LABEL_222;
        }
LABEL_137:
        any_to_string((const boost::any *)(a4 + 24), (uint64_t)&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = buf;
        }
        uint64_t v97 = HostInterpreter::DeviceModeConfig((uint64_t)this, (const std::string::value_type *)&__p);
        uint64_t BufferSize = v97;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (BufferSize) {
            goto LABEL_274;
          }
        }
        else if (v97)
        {
          goto LABEL_274;
        }
        uint64_t v98 = *((void *)a4 + 4);
        if (!v98)
        {
          std::string::value_type v214 = std::runtime_error::runtime_error(&v256, "call to empty boost::function");
          v256.__vftable = (std::runtime_error_vtbl *)off_100495450;
          boost::throw_exception<boost::bad_function_call>(v214);
        }
        (*(void (**)(char *, void))((v98 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 40, 0);
        goto LABEL_274;
      }
LABEL_130:
      any_to_string((const boost::any *)(a4 + 24), (uint64_t)&buf);
      *(_WORD *)uint64_t v247 = 16;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v79 = (ot::Utils::CmdLineParser *)&buf;
      }
      else {
        int v79 = (ot::Utils::CmdLineParser *)buf.__r_.__value_.__r.__words[0];
      }
      uint64_t BufferSize = ot::Utils::CmdLineParser::ParseAsHexString(v79, (char *)v247, (unsigned __int16 *)v255, v78);
      if (!BufferSize)
      {
        uint64_t BufferSize = otThreadSetPskc(*((void *)this + 28), (uint64_t)v255);
        if (!BufferSize)
        {
          uint64_t v81 = *((void *)a4 + 4);
          if (!v81)
          {
            v215 = std::runtime_error::runtime_error(&v256, "call to empty boost::function");
            v256.__vftable = (std::runtime_error_vtbl *)off_100495450;
            boost::throw_exception<boost::bad_function_call>(v215);
          }
          (*(void (**)(char *, void))((v81 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 40, 0);
          uint64_t BufferSize = 0;
        }
      }
      goto LABEL_274;
    }
LABEL_121:
    *(void *)v255 = 0;
    any_to_string((const boost::any *)(a4 + 24), (uint64_t)&v256);
    if (v257 >= 0) {
      uint64_t v67 = (ot::Utils::CmdLineParser *)&v256;
    }
    else {
      uint64_t v67 = (ot::Utils::CmdLineParser *)v256.__vftable;
    }
    int v68 = ot::Utils::CmdLineParser::ParseAsUint64(v67, v255, v66);
    xpc_object_t v69 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v69)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        std::string v77 = (std::runtime_error_vtbl *)&v256;
        if (v257 < 0) {
          std::string v77 = v256.__vftable;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(void *)v255;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        int v249 = v68;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "LogTimestampBase: %s, [%llu] error[%d]", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v82 = otPlatVendorSetLogTimestampBase(*(uint64_t *)v255, v70, v71, v72, v73, v74, v75, v76);
    uint64_t v83 = *((void *)a4 + 4);
    if (!v83)
    {
      std::runtime_error::runtime_error((std::runtime_error *)&buf, "call to empty boost::function");
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)&buf);
    }
    uint64_t BufferSize = v82;
    (*(void (**)(char *, void))((v83 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 40, 0);
    goto LABEL_143;
  }
  uint64_t v60 = *(const char **)a4;
  if (!strcmp(*(const char **)a4, "OpenThread:LogTimestampBase")) {
    goto LABEL_121;
  }
  if (!strcmp(v60, "Network:PSKc")) {
    goto LABEL_130;
  }
  if (!strcmp(v60, "Network:NodeType")) {
    goto LABEL_137;
  }
  if (!strcmp(v60, "vendor:coex:radioload")) {
    goto LABEL_145;
  }
  if (!strcmp(v60, "vendor:coex:rcp2:state:collection"))
  {
LABEL_149:
    BOOL v88 = any_to_BOOL((const boost::any *)(a4 + 24));
    char v89 = log_get_logging_obg("com.apple.threadradiod", "default");
    int v90 = v89;
    if (v88)
    {
      if (v89)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertySet";
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "%s Clear the counters and start coex counter collection.", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      uint64_t v127 = otPlatVendorResetOrStopCoexCollection(*((void *)this + 28), 1, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      if (v89)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ProcessPropertySet";
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "%s Stop coex counter collection.", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      uint64_t v127 = otPlatVendorResetOrStopCoexCollection(*((void *)this + 28), 0, v104, v105, v106, v107, v108, v109);
    }
    uint64_t BufferSize = v127;
    if (v127) {
      goto LABEL_278;
    }
    uint64_t v128 = *((void *)a4 + 4);
    if (!v128)
    {
      std::runtime_error::runtime_error((std::runtime_error *)&buf, "call to empty boost::function");
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)&buf);
    }
LABEL_222:
    (*(void (**)(char *, void))((v128 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 40, 0);
    return 0;
  }
  if (!strcmp(v60, "vendor:coex:rcp2:state:table:reset")) {
    goto LABEL_161;
  }
  if (!strcmp(v60, "vendor:power")) {
    goto LABEL_177;
  }
  if (!strcmp(v60, "Thread:Pairing:Status")) {
    goto LABEL_202;
  }
  if (!strcmp(v60, "Thread:FWUpdate")) {
    goto LABEL_215;
  }
  if (!strcmp(v60, "Thread:EmacId")) {
    goto LABEL_230;
  }
  if (!strcmp(v60, "StartCurrentNetworkDiscoveryScan")) {
    goto LABEL_239;
  }
  if (!strcmp(v60, "NCP:TXPower")) {
    goto LABEL_248;
  }
  if (!strcmp(v60, "Thread:ActiveDataset:Bytes"))
  {
LABEL_265:
    any_to_string((const boost::any *)(a4 + 24), (uint64_t)&v256);
    BOOL v137 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v137)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
      {
        std::string::value_type v139 = (std::runtime_error_vtbl *)&v256;
        if (v257 < 0) {
          std::string::value_type v139 = v256.__vftable;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v139;
        _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *(_WORD *)v255 = 254;
    if (v257 >= 0) {
      int v154 = (ot::Utils::CmdLineParser *)&v256;
    }
    else {
      int v154 = (ot::Utils::CmdLineParser *)v256.__vftable;
    }
    uint64_t BufferSize = ot::Utils::CmdLineParser::ParseAsHexString(v154, v255, (unsigned __int16 *)&buf, v138);
    if (!BufferSize)
    {
      char v254 = v255[0];
      uint64_t BufferSize = otDatasetSetActiveTlvs(*((void *)this + 28), (unsigned __int8 *)&buf);
      if (!BufferSize)
      {
        std::string::value_type v155 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v155)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v247 = 0;
            _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_INFO, "Dataset commit active TLVs, Done", v247, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        HostInterpreter::setExtendedMACAddressInDataSetIfAvailableinDB(this);
        boost::function1<void,int>::operator()((void *)a4 + 4);
        uint64_t BufferSize = 0;
      }
    }
LABEL_143:
    if ((v257 & 0x80000000) == 0) {
      goto LABEL_277;
    }
    std::string v84 = v256.__vftable;
LABEL_276:
    operator delete(v84);
    goto LABEL_277;
  }
  if (!strcmp(v60, "Interface:Up")) {
    goto LABEL_281;
  }
  if (!strcmp(v60, "vendor:power:limit:table:active:id")) {
    goto LABEL_290;
  }
  if (!strcmp(v60, "vendor:assert")) {
    goto LABEL_307;
  }
  if (!strcmp(v60, "vendor:hard:reset:test")) {
    goto LABEL_324;
  }
  if (!strcmp(v60, "vendor:mle:adv:tx:num")) {
    goto LABEL_332;
  }
  if (!strcmp(v60, "Daemon:VirtualInterface:ReadBufferSize")) {
    goto LABEL_340;
  }
  if (!strcmp(v60, "vendor:min:mac:interframedelay")) {
    goto LABEL_367;
  }
  if (!strcmp(v60, "vendor:csl:tx:schedframe:reqahead:timeinus")) {
    goto LABEL_375;
  }
  if (!strcmp(v60, "vendor:neighbor:count:histogram")) {
    goto LABEL_389;
  }
  if (!strcmp(v60, "vendor:bbr:counters")) {
    goto LABEL_397;
  }
  if (!strcmp(v60, "vendor:linkloss:counters")) {
    goto LABEL_405;
  }
  if (!strcmp(v60, "NCP:Counter:Thread:Mle")) {
    goto LABEL_412;
  }
  if (!strcmp(v60, "NCP:Counter:AllIPv6")) {
    goto LABEL_419;
  }
  if (!strcmp(v60, "ca:reporting:enabled")) {
    goto LABEL_426;
  }
  if (!strcmp(v60, "streamRawRespTimeHistReset")) {
    goto LABEL_431;
  }
  if (!strcmp(v60, "NCP:Counter:AllMac")) {
    goto LABEL_438;
  }
  if (!strcmp(v60, "vendor:radio:stats")) {
    goto LABEL_457;
  }
  if (!strcmp(v60, "vendor:radio:counters")) {
    goto LABEL_466;
  }
  if (!strcmp(v60, "vendor:joiner:RSSIHistogram")) {
    goto LABEL_474;
  }
  if (!strcmp(v60, "vendor:deepsleep:filter:list")) {
    goto LABEL_478;
  }
  if (!strcmp(v60, "vendor:deepsleep:loglevel"))
  {
LABEL_481:
    unsigned __int8 v207 = any_to_uint64((const boost::any *)(a4 + 24), 0);
    uint64_t BufferSize = otPlatVendorSetDeepSleepLogLevel(*((void *)this + 28), v207, v208, v209, v210, v211, v212, v213);
    if (BufferSize) {
      goto LABEL_278;
    }
    goto LABEL_617;
  }
  if (!strcmp(v60, "vendor:deepsleep:region:loglevels")) {
    goto LABEL_490;
  }
  if (strcmp(v60, "vendor:last:host:wake:reason"))
  {
    if (strcmp(v60, "vendor:MAC:packet:SizeHistogram"))
    {
      if (strcmp(v60, "vendor:MAC:packet:LQIHistogram"))
      {
        if (strcmp(v60, "vendor:MAC:packet:RSSIHistogram"))
        {
          if (strcmp(v60, "NCP:MacRetryHistogram"))
          {
            if (strcmp(v60, "vendor:openthread:radio:counters"))
            {
              if (strcmp(v60, "vendor:cntr:stats:reset"))
              {
                if (strcmp(v60, "NCP:HostPowerState"))
                {
                  if (strcmp(v60, "NCP:PcapEnabled"))
                  {
                    if (strcmp(v60, "Daemon:PromiscuousPcap"))
                    {
                      if (strcmp(v60, "UpdateLeaderInfo"))
                      {
                        if (strcmp(v60, "NCP:Counter:Thread:Neighbor:TriggerBased"))
                        {
                          if (strcmp(v60, "Thread:Health:Metrics"))
                          {
                            if (strcmp(v60, "Leader:Reelect:Counters"))
                            {
                              if (strcmp(v60, "bt_state_change")) {
                                goto LABEL_60;
                              }
                              goto LABEL_115;
                            }
LABEL_592:
                            v243 = log_get_logging_obg("com.apple.threadradiod", "default");
                            if (v243)
                            {
                              if (syslog_is_the_mask_enabled(6)
                                && os_log_type_enabled(v243, OS_LOG_TYPE_INFO))
                              {
                                std::string::value_type v244 = a4;
                                if (a4[23] < 0) {
                                  std::string::value_type v244 = *(const char **)a4;
                                }
                                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v244;
                                _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessPropertySet[E(0)]: %s", (uint8_t *)&buf, 0xCu);
                              }
                            }
                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
                              -[PowerEventHandler_Rcp init:]();
                            }
                            RcpHostContext::clear_leader_reelect_counters((RcpHostContext *)RcpHostContext::sRcpHostContext);
                            boost::function1<void,int>::operator()((void *)a4 + 4);
                            return 0;
                          }
                          goto LABEL_581;
                        }
LABEL_571:
                        uint64_t v238 = log_get_logging_obg("com.apple.threadradiod", "default");
                        if (v238)
                        {
                          if (syslog_is_the_mask_enabled(6)
                            && os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
                          {
                            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                            _os_log_impl((void *)&_mh_execute_header, v238, OS_LOG_TYPE_INFO, "Reset trigger based Neigbor metrics", (uint8_t *)&buf, 2u);
                          }
                        }
                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          -[PowerEventHandler_Rcp init:]();
                        }
                        for (LOWORD(v256.__vftable) = 0;
                              !otThreadGetNextNeighborInfo(*((void *)this + 28), (__int16 *)&v256, (uint64_t)&buf);
                              long long v251 = 0u)
                        {
                          long long v252 = 0u;
                          long long v253 = 0u;
                          long long v250 = 0u;
                        }
                        goto LABEL_617;
                      }
                      goto LABEL_562;
                    }
LABEL_546:
                    BOOL v234 = any_to_BOOL((const boost::any *)(a4 + 24));
                    uint64_t v235 = log_get_logging_obg("com.apple.threadradiod", "default");
                    v236 = v235;
                    if (v234)
                    {
                      if (v235)
                      {
                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
                        {
                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 7373;
                          v237 = "%s:%d: Starting promiscuous pcap capture";
LABEL_570:
                          _os_log_impl((void *)&_mh_execute_header, v236, OS_LOG_TYPE_INFO, v237, (uint8_t *)&buf, 0x12u);
                          goto LABEL_591;
                        }
                        goto LABEL_591;
                      }
                      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_591;
                      }
                    }
                    else
                    {
                      if (v235)
                      {
                        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
                        {
                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 7375;
                          v237 = "%s:%d: Stoping promiscuous pcap capture";
                          goto LABEL_570;
                        }
LABEL_591:
                        persist_promiscuous_pcap_enabled();
                      }
                      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_591;
                      }
                    }
                    -[PowerEventHandler_Rcp init:]();
                    goto LABEL_591;
                  }
LABEL_541:
                  BOOL v230 = any_to_BOOL((const boost::any *)(a4 + 24));
                  unsigned __int8 v231 = log_get_logging_obg("com.apple.threadradiod", "default");
                  std::string::value_type v232 = v231;
                  if (v230)
                  {
                    if (v231)
                    {
                      uint64_t v233 = syslog_is_the_mask_enabled(6);
                      if (v233)
                      {
                        uint64_t v233 = os_log_type_enabled(v232, OS_LOG_TYPE_INFO);
                        if (v233)
                        {
                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 7322;
                          _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_INFO, "%s:%d: Starting pcap capture", (uint8_t *)&buf, 0x12u);
                        }
                      }
                    }
                    else
                    {
                      uint64_t v233 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
                      if (v233) {
                        -[PowerEventHandler_Rcp init:]();
                      }
                    }
                    PcapManageruint64_t Instance = (PcapManager *)PcapManager::getPcapManagerInstance((PcapManager *)v233);
                    PcapManager::start_pcap_capture(PcapManagerInstance);
                    std::string::basic_string[abi:ne180100]<0>(&buf, "Daemon:PromiscuousPcap");
                    v256.__vftable = (std::runtime_error_vtbl *)&buf;
                    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v256);
                    boost::any::any<std::string &>();
                  }
                  if (v231)
                  {
                    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v232, OS_LOG_TYPE_INFO))
                    {
                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"otError HostInterpreter::ProcessPropertySet(uint8_t, char **, void *)";
                      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 7335;
                      _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_INFO, "%s:%d: Stoping pcap capture", (uint8_t *)&buf, 0x12u);
                    }
                  }
                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    -[PowerEventHandler_Rcp init:]();
                  }
                  std::string::basic_string[abi:ne180100]<0>(&buf, "Daemon:PromiscuousPcap");
                  v256.__vftable = (std::runtime_error_vtbl *)&buf;
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v256);
                  boost::any::any<std::string &>();
                }
                goto LABEL_537;
              }
              goto LABEL_529;
            }
            goto LABEL_521;
          }
LABEL_514:
          otLinkResetTxRetrySuccessHistogram(*((void *)this + 28));
          uint64_t v219 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v219)
          {
            if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v219, OS_LOG_TYPE_INFO, "Reset MAC Tx retry success histograms", (uint8_t *)&buf, 2u);
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            -[PowerEventHandler_Rcp init:]();
          }
          goto LABEL_617;
        }
LABEL_507:
        otLinkResetNeighborRssiHistogram(*((void *)this + 28));
        v218 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v218)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v218, OS_LOG_TYPE_INFO))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v218, OS_LOG_TYPE_INFO, "Reset Neighbor RSSI histograms", (uint8_t *)&buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        goto LABEL_617;
      }
LABEL_503:
      otLinkResetLqiHistogram(*((void *)this + 28));
      std::string::value_type v217 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v217)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v217, OS_LOG_TYPE_INFO, "Reset MAC pkt LQI histograms", (uint8_t *)&buf, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      goto LABEL_617;
    }
LABEL_499:
    otLinkResetPacketSizeHistogram(*((void *)this + 28));
    v216 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v216)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v216, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_INFO, "Reset MAC pkt size histograms", (uint8_t *)&buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    goto LABEL_617;
  }
LABEL_496:
  uint64_t BufferSize = otPlatVendorSetHostWakeReason(*((void *)this + 28), v39, v40, v41, v42, v43, v44, v45);
  if (!BufferSize) {
    goto LABEL_617;
  }
LABEL_278:
  uint64_t v140 = *((void *)a4 + 4);
  if (!v140)
  {
    std::runtime_error::runtime_error((std::runtime_error *)&buf, "call to empty boost::function");
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)&buf);
  }
  (*(void (**)(char *, uint64_t))((v140 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 40, 1);
  return BufferSize;
}

void sub_10013056C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(void *)(v23 - 96)) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::ProcessRcpInit(HostInterpreter *this, unsigned __int8 a2, char **a3, void *a4)
{
  buf[23] = 11;
  strcpy((char *)buf, "NCP:TXPower");
  *(void *)uint64_t v4 = buf;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)v4);
  operator new();
}

void sub_100131C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (!a25) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a25 + 8))(a25);
  _Unwind_Resume(exception_object);
}

void HostInterpreter::ProcessRcpReportCrashInfo(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned char *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    std::string::size_type v6 = logging_obg;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HostInterpreter::ProcessRcpReportCrashInfo();
      if (!*a4)
      {
LABEL_15:
        DWORD1(xmmword_1004B5FE8) = 0;
        *((void *)&xmmword_1004B5FE8 + 1) = *((void *)&xmmword_1004B5FD8 + 1);
        uint64_t v18 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v18)
        {
          uint64_t v19 = v18;
          if (syslog_is_the_mask_enabled(7))
          {
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
              HostInterpreter::ProcessRcpReportCrashInfo();
            }
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        v22[0] = xmmword_1004B5FE8;
        v22[1] = xmmword_1004B5FF8;
        AWDMetricsClient_update_StabilityData(v22);
        HostInterpreter::persist_awd_stability_counters(v20);
      }
LABEL_8:
      uint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(7);
        if (is_the_mask_enabled)
        {
          uint64_t is_the_mask_enabled = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
          if (is_the_mask_enabled)
          {
            HostInterpreter::ProcessRcpReportCrashInfo(v8, v10, v11, v12, v13, v14, v15, v16);
            HostInterpreter::clearHealthInfoMetrics(v17);
          }
        }
      }
      else
      {
        uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
        if (is_the_mask_enabled)
        {
          -[PowerEventHandler_Rcp init:]();
          HostInterpreter::clearHealthInfoMetrics(v21);
        }
      }
      HostInterpreter::clearHealthInfoMetrics((HostInterpreter *)is_the_mask_enabled);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    if (!*a4) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  if (!*a4) {
    goto LABEL_15;
  }
  goto LABEL_8;
}

uint64_t HostInterpreter::ProcessReconnectThread(HostInterpreter *this, unsigned __int8 a2, char **a3, void *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    std::string::size_type v5 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      uint64_t v8 = "ProcessReconnectThread";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Invoked", (uint8_t *)&v7, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return 0;
}

uint64_t HostInterpreter::ProcessReset(HostInterpreter *this, unsigned __int8 a2, char **a3, char *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v7 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessReset (Soft)", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v8 = otThreadSetEnabled(*((void *)this + 28), 0);
  if (!v8)
  {
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v23 = "ProcessReset";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Soft Reset: Thread STOP, Done", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v8 = otIp6SetEnabled(*((void *)this + 28), 0);
    if (!v8)
    {
      uint64_t v17 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v17)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Soft Reset: Ifconfig DOWN, Done", buf, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      HostInterpreter::remove_all_address_prefix_route_entries(this, 1);
      if (dskeychainRcp::FindAndGetDataSet(0, (ot::MeshCoP::Dataset::Info *)buf))
      {
        uint64_t v8 = otDatasetSetActive(*((void *)this + 28), (uint64_t)buf);
        if (v8) {
          goto LABEL_15;
        }
        if (dskeychainRcp::FindAndGetDataSet(1u, (ot::MeshCoP::Dataset::Info *)v21))
        {
          uint64_t v8 = otDatasetSetPending(*((void *)this + 28), (uint64_t)v21);
          if (v8) {
            goto LABEL_15;
          }
        }
        uint64_t v8 = otIp6SetEnabled(*((void *)this + 28), 1);
        if (v8) {
          goto LABEL_15;
        }
        uint64_t v18 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v18)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            LOWORD(v24.__vftable) = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Ifconfig UP, Done", (uint8_t *)&v24, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        uint64_t v8 = otThreadSetEnabled(*((void *)this + 28), 1);
        if (v8) {
          goto LABEL_15;
        }
        if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) == 6) {
          otThreadBecomeLeader(*((void *)this + 28), 0);
        }
        uint64_t v20 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v20)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            LODWORD(v24.__vftable) = 136315138;
            *(std::runtime_error_vtbl **)((char *)&v24.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessReset";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Thread START, Done", (uint8_t *)&v24, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
      }
      else
      {
        uint64_t v19 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v19)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v21 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Active Dataset not present", v21, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
      }
      uint64_t v8 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)a4;
      if (*(void *)a4) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
LABEL_15:
  HIDWORD(v11) = v8 - 1;
  LODWORD(v11) = v8 - 1;
  unsigned int v10 = v11 >> 1;
  if (v10 <= 6 && ((0x4Du >> v10) & 1) != 0)
  {
    uint64_t v15 = 4 * (int)v10;
    uint64_t v8 = *(unsigned int *)((char *)&unk_1003F6A00 + v15);
    uint64_t v12 = *(unsigned int *)((char *)&unk_1003F6A1C + v15);
    uint64_t v13 = *(void *)a4;
    if (*(void *)a4) {
      goto LABEL_18;
    }
LABEL_20:
    uint64_t v16 = std::runtime_error::runtime_error(&v24, "call to empty boost::function");
    v24.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(v16);
  }
  uint64_t v12 = 1;
  uint64_t v13 = *(void *)a4;
  if (!*(void *)a4) {
    goto LABEL_20;
  }
LABEL_18:
  (*(void (**)(char *, uint64_t))((v13 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, v12);
  return v8;
}

void sub_100132A98(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessRouteAdd(HostInterpreter *this, unsigned __int8 a2, char **a3, in6_addr *a4)
{
  v39[1] = 0;
  uint64_t v40 = 0;
  v39[0] = 0;
  __uint32_t v6 = a4[1].__u6_addr32[1];
  if (v6 == -1) {
    char v7 = 3;
  }
  else {
    char v7 = 0;
  }
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = v7;
  }
  BYTE4(v40) = v8 | (8 * a4[1].__u6_addr8[8]) | (4 * a4[1].__u6_addr8[9]) | 0x10;
  IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v37, a4, a4[1].__u6_addr8[0]);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      IPv6Prefix::to_string(&v37, &__p);
      unsigned int v10 = v36 >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Off Mesh Prefix:: [%s]", buf, 0xCu);
      if (v36 < 0) {
        operator delete(__p.__vftable);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  __uint32_t v11 = a4[1].__u6_addr32[1];
  __uint8_t v12 = a4[1].__u6_addr8[8];
  __uint8_t v13 = a4[1].__u6_addr8[9];
  *(_DWORD *)std::string buf = 2;
  *(_DWORD *)&uint8_t buf[4] = v11;
  uint8_t buf[8] = v12;
  *(_WORD *)&buf[10] = 0;
  unsigned char buf[12] = v13;
  buf[13] = (v40 & 0x1000000000) != 0;
  IPv6Prefix::to_string(&v37, &__p);
  if (v36 >= 0) {
    p_p = (ot *)&__p;
  }
  else {
    p_p = (ot *)__p.__vftable;
  }
  uint64_t v15 = ot::Utils::CmdLineParser::ParseAsIp6Prefix(p_p, (uint64_t)v39);
  uint64_t v16 = v15;
  if (v36 < 0)
  {
    operator delete(__p.__vftable);
    if (v16) {
      goto LABEL_22;
    }
  }
  else if (v15)
  {
LABEL_22:
    uint64_t v17 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v17)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessRouteAdd();
      }
      goto LABEL_34;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
LABEL_33:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_34;
  }
  route_entry = (uint64_t **)HostInterpreter::find_route_entry((uint64_t)this, (uint64_t)&v37, (uint64_t)buf);
  if ((uint64_t **)((char *)this + 88) == route_entry)
  {
    uint64_t v26 = (char *)operator new(0x40uLL);
    *((_DWORD *)v26 + 11) = v38;
    *(in6_addr *)(v26 + 28) = v37;
    *((_OWORD *)v26 + 3) = *(_OWORD *)buf;
    uint64_t v27 = *route_entry;
    uint64_t v28 = route_entry;
    uint64_t v29 = route_entry;
    if (*route_entry)
    {
      do
      {
        while (1)
        {
          uint64_t v28 = (uint64_t **)v27;
          if (!IPv6Prefix::operator<((uint64_t)(v26 + 28), (uint64_t)v27 + 28)) {
            break;
          }
          uint64_t v27 = *v28;
          uint64_t v29 = v28;
          if (!*v28) {
            goto LABEL_51;
          }
        }
        uint64_t v27 = v28[1];
      }
      while (v27);
      uint64_t v29 = v28 + 1;
    }
LABEL_51:
    *(void *)uint64_t v26 = 0;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = v28;
    *uint64_t v29 = (uint64_t *)v26;
    uint64_t v30 = **((void **)this + 10);
    if (v30)
    {
      *((void *)this + 10) = v30;
      uint64_t v26 = (char *)*v29;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*route_entry, (uint64_t *)v26);
    ++*((void *)this + 12);
    uint64_t v31 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v31)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        OffMeshRouteEntry::get_description((OffMeshRouteEntry *)buf, &v37, 0, &__p);
        uint64_t v32 = v36 >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
        *(_DWORD *)uint64_t v41 = 136315138;
        uint64_t v42 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "OffMeshRoutes: Adding %s", v41, 0xCu);
        if (v36 < 0) {
          operator delete(__p.__vftable);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v16 = otBorderRouterAddRoute(*((void *)this + 28), (uint64_t)v39);
    if (v16)
    {
      uint64_t v33 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v33)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessRouteAdd();
      }
    }
    else
    {
      uint64_t v16 = otBorderRouterRegister(*((void *)this + 28));
      if (!v16)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)a4[2].__u6_addr8;
        if (v23) {
          goto LABEL_37;
        }
        goto LABEL_49;
      }
      uint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v34)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessRouteAdd();
      }
    }
LABEL_34:
    HIDWORD(v21) = v16 - 1;
    LODWORD(v21) = v16 - 1;
    unsigned int v20 = v21 >> 1;
    if (v20 <= 6 && ((0x4Du >> v20) & 1) != 0)
    {
      uint64_t v25 = 4 * (int)v20;
      uint64_t v16 = *(unsigned int *)((char *)&unk_1003F6A00 + v25);
      uint64_t v22 = *(unsigned int *)((char *)&unk_1003F6A1C + v25);
      uint64_t v23 = *(void *)a4[2].__u6_addr8;
      if (v23) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v22 = 1;
      uint64_t v23 = *(void *)a4[2].__u6_addr8;
      if (v23) {
        goto LABEL_37;
      }
    }
LABEL_49:
    std::runtime_error::runtime_error(&__p, "call to empty boost::function");
    __p.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&__p);
  }
  uint64_t v19 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v19)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::ProcessRouteAdd();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v16 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = *(void *)a4[2].__u6_addr8;
  if (!v23) {
    goto LABEL_49;
  }
LABEL_37:
  (*(void (**)(__uint32_t *, uint64_t))((v23 & 0xFFFFFFFFFFFFFFFELL) + 8))(&a4[2].__u6_addr32[2], v22);
  return v16;
}

void sub_100133074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

void sub_100133088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessRouteRemove(HostInterpreter *this, unsigned __int8 a2, char **a3, in6_addr *a4)
{
  memset(v31, 0, sizeof(v31));
  IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v30, a4, a4[1].__u6_addr8[0]);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      IPv6Prefix::to_string(&v30, &__p);
      char v7 = v29 >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Off Mesh Prefix:: [%s]", buf, 0xCu);
      if (v29 < 0) {
        operator delete(__p.__vftable);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *(void *)std::string buf = 2;
  uint8_t buf[8] = 1;
  *(_DWORD *)&buf[10] = 0;
  route_entry = HostInterpreter::find_route_entry((uint64_t)this, (uint64_t)&v30, (uint64_t)buf);
  if ((uint64_t *)((char *)this + 88) == route_entry)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)&a4[1].__u6_addr32[2];
    if (!v13) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        OffMeshRouteEntry::get_description((OffMeshRouteEntry *)buf, &v30, 0, &__p);
        unsigned int v10 = v29 >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
        *(_DWORD *)uint64_t v32 = 136315138;
        uint64_t v33 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "OffMeshPrefixes: Removing %s", v32, 0xCu);
        if (v29 < 0) {
          operator delete(__p.__vftable);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v14 = (uint64_t *)route_entry[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v16 = route_entry;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v17 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }
      while (!v17);
    }
    if (*((uint64_t **)this + 10) == route_entry) {
      *((void *)this + 10) = v15;
    }
    uint64_t v18 = (uint64_t *)*((void *)this + 11);
    --*((void *)this + 12);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v18, route_entry);
    operator delete(route_entry);
    IPv6Prefix::to_string(&v30, &__p);
    if (v29 >= 0) {
      p_p = (ot *)&__p;
    }
    else {
      p_p = (ot *)__p.__vftable;
    }
    uint64_t v20 = ot::Utils::CmdLineParser::ParseAsIp6Prefix(p_p, (uint64_t)v31);
    uint64_t v11 = v20;
    if (v29 < 0)
    {
      operator delete(__p.__vftable);
      if (v11) {
        goto LABEL_37;
      }
    }
    else if (v20)
    {
LABEL_37:
      unint64_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessRouteRemove();
        }
        goto LABEL_60;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
LABEL_59:
      -[PowerEventHandler_Rcp init:]();
      goto LABEL_60;
    }
    uint64_t v11 = otBorderRouterRemoveRoute(*((void *)this + 28), (uint64_t)v31);
    if (v11)
    {
      uint64_t v22 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v22)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessPrefixRemove();
      }
LABEL_60:
      HIDWORD(v25) = v11 - 1;
      LODWORD(v25) = v11 - 1;
      unsigned int v24 = v25 >> 1;
      if (v24 <= 6 && ((0x4Du >> v24) & 1) != 0)
      {
        uint64_t v27 = 4 * (int)v24;
        uint64_t v11 = *(unsigned int *)((char *)&unk_1003F6A00 + v27);
        uint64_t v12 = *(unsigned int *)((char *)&unk_1003F6A1C + v27);
        uint64_t v13 = *(void *)&a4[1].__u6_addr32[2];
        if (v13) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v12 = 1;
        uint64_t v13 = *(void *)&a4[1].__u6_addr32[2];
        if (v13) {
          goto LABEL_63;
        }
      }
LABEL_21:
      std::runtime_error::runtime_error(&__p, "call to empty boost::function");
      __p.__vftable = (std::runtime_error_vtbl *)off_100495450;
      boost::throw_exception<boost::bad_function_call>(&__p);
    }
    uint64_t v11 = otBorderRouterRegister(*((void *)this + 28));
    if (v11)
    {
      uint64_t v23 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v23)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessRouteRemove();
      }
      goto LABEL_60;
    }
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)&a4[1].__u6_addr32[2];
    if (!v13) {
      goto LABEL_21;
    }
  }
LABEL_63:
  (*(void (**)(in6_addr *, uint64_t))((v13 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 2, v12);
  return v11;
}

void sub_1001335A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

void sub_1001335B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessServiceAdd(HostInterpreter *this, unsigned __int8 a2, char **a3, char *a4)
{
  RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)&__p);
  if ((v58 & 0x80000000) == 0)
  {
    if (v58 == 10)
    {
      if (__p != (void *)0x746169636F737361 || (unsigned __int16)v57 != 25701) {
        goto LABEL_16;
      }
      goto LABEL_34;
    }
    if (v58 == 11)
    {
      p_p = (uint64_t *)&__p;
      goto LABEL_12;
    }
LABEL_16:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = (std::runtime_error_vtbl *)&__p;
        if (v58 < 0) {
          uint64_t v12 = (std::runtime_error_vtbl *)__p;
        }
        LODWORD(buf.__vftable) = 136315138;
        *(std::runtime_error_vtbl **)((char *)&buf.__vftable + 4) = v12;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Services: Invalid state %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v13 = *((void *)a4 + 64);
    if (!v13)
    {
      std::runtime_error::runtime_error(&buf, "call to empty boost::function");
      buf.__vftable = (std::runtime_error_vtbl *)off_100495450;
      boost::throw_exception<boost::bad_function_call>(&buf);
    }
    (*(void (**)(char *, uint64_t))((v13 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 520, 4);
    uint64_t v14 = 13;
    goto LABEL_26;
  }
  if (v57 == 10 && *(void *)__p == 0x746169636F737361 && *((_WORD *)__p + 4) == 25701) {
    goto LABEL_34;
  }
  if (v57 != 11) {
    goto LABEL_16;
  }
  p_p = (uint64_t *)__p;
LABEL_12:
  uint64_t v8 = *p_p;
  uint64_t v9 = *(uint64_t *)((char *)p_p + 3);
  if (v8 != 0x746169636F737361 || v9 != 0x676E69746169636FLL) {
    goto LABEL_16;
  }
LABEL_34:
  BOOL v17 = a4 + 253;
  size_t v18 = a4[505];
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  if (v18)
  {
    uint64_t v19 = (char *)operator new(v18);
    uint64_t v20 = &v19[v18];
    uint64_t v53 = v19;
    uint64_t v55 = &v19[v18];
    memcpy(v19, a4 + 253, v18);
    uint64_t v54 = v20;
  }
  size_t v21 = a4[252];
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  if (v21)
  {
    uint64_t v22 = (char *)operator new(v21);
    uint64_t v23 = &v22[v21];
    uint64_t v50 = v22;
    uint64_t v52 = &v22[v21];
    memcpy(v22, a4 + 4, v21);
    uint64_t v51 = v23;
  }
  ServiceEntry::ServiceEntry((uint64_t)&buf, 2, *(_DWORD *)a4, (uint64_t)&v53, a4[506], (uint64_t)&v50);
  __int16 Rloc16 = otThreadGetRloc16(*((void *)this + 28));
  char v66 = -1;
  uint64_t v25 = *((void *)this + 1);
  uint64_t v24 = *((void *)this + 2);
  uint64_t v26 = v25;
  if (v25 == v24)
  {
    uint64_t v27 = (ServiceEntry *)*((void *)this + 1);
  }
  else
  {
    while (!ServiceEntryBase::operator==(v26, (uint64_t)&buf))
    {
      v26 += 80;
      if (v26 == v24)
      {
        uint64_t v26 = v24;
        break;
      }
    }
    uint64_t v27 = (ServiceEntry *)*((void *)this + 2);
    if ((ServiceEntry *)v26 != v27)
    {
      uint64_t v28 = v25 + 16 * ((v26 - v25) >> 4);
      char v29 = *(const void **)(v28 + 48);
      uint64_t v30 = *(void *)(v28 + 56);
      uint64_t v31 = (void **)(v28 + 48);
      if (v30 - (void)v29 != v51 - (unsigned char *)v50 || memcmp(v29, v50, v30 - (void)v29))
      {
        uint64_t v32 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v32)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v32, OS_LOG_TYPE_INFO)) {
            ServiceEntry::get_description((ServiceEntry *)&buf);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        if (v31 != &v50) {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v31, (char *)v50, v51, v51 - (unsigned char *)v50);
        }
        goto LABEL_69;
      }
      uint64_t v35 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v35)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v35, OS_LOG_TYPE_INFO)) {
          ServiceEntry::get_description((ServiceEntry *)&buf);
        }
        goto LABEL_69;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_69;
      }
LABEL_68:
      -[PowerEventHandler_Rcp init:]();
      goto LABEL_69;
    }
  }
  if ((unint64_t)v27 >= *((void *)this + 3))
  {
    uint64_t v33 = std::vector<ServiceEntry>::__push_back_slow_path<ServiceEntry const&>((void *)this + 1, (const ServiceEntry *)&buf);
  }
  else
  {
    ServiceEntry::ServiceEntry(v27, (const ServiceEntry *)&buf);
    uint64_t v33 = (char *)v27 + 80;
    *((void *)this + 2) = (char *)v27 + 80;
  }
  *((void *)this + 2) = v33;
  uint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v34)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v34, OS_LOG_TYPE_INFO)) {
    ServiceEntry::get_description((ServiceEntry *)&buf);
  }
LABEL_69:
  if (*v17 == 93)
  {
    char v36 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v36)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        int v37 = *v17;
        LODWORD(v59.__vftable) = 67109120;
        HIDWORD(v59.__vftable) = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Starting RCP SRP service ABC timer, service data[%02X]", (uint8_t *)&v59, 8u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    HostInterpreter::setRcpSrpServiceABCTimer(this);
  }
  int v68 = *(_DWORD *)a4;
  int v38 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v38)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      int v39 = a4[505];
      int v40 = a4[252];
      LODWORD(v59.__vftable) = 67109376;
      HIDWORD(v59.__vftable) = v39;
      LOWORD(v59.__imp_.__imp_) = 1024;
      *(_DWORD *)((char *)&v59.__imp_.__imp_ + 2) = v40;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, " Service Data Leuint64_t n = %d, Server Data Leuint64_t n = %d", (uint8_t *)&v59, 0xEu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  unsigned __int8 v41 = a4[505];
  memcpy(v70, a4 + 253, v41);
  unsigned __int8 v69 = v41;
  unsigned __int8 v42 = a4[252];
  memcpy(&v73, a4 + 4, v42);
  unsigned __int8 v72 = v42;
  char v71 = v71 & 0xFE | a4[506];
  uint64_t v14 = otServerAddService(*((void *)this + 28), (uint64_t)v67);
  if (v14)
  {
    uint64_t v43 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v43)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessServiceAdd();
      }
      goto LABEL_99;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  uint64_t v14 = otBorderRouterRegister(*((void *)this + 28));
  if (v14)
  {
    uint64_t v44 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v44)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessServiceAdd();
      }
LABEL_99:
      HIDWORD(v48) = v14 - 1;
      LODWORD(v48) = v14 - 1;
      unsigned int v47 = v48 >> 1;
      if (v47 <= 6 && ((0x4Du >> v47) & 1) != 0)
      {
        uint64_t v49 = 4 * (int)v47;
        uint64_t v14 = *(unsigned int *)((char *)&unk_1003F6A00 + v49);
        uint64_t v45 = *(unsigned int *)((char *)&unk_1003F6A1C + v49);
        uint64_t v46 = *((void *)a4 + 64);
        if (v46) {
          goto LABEL_102;
        }
      }
      else
      {
        uint64_t v45 = 1;
        uint64_t v46 = *((void *)a4 + 64);
        if (v46) {
          goto LABEL_102;
        }
      }
LABEL_111:
      std::runtime_error::runtime_error(&v59, "call to empty boost::function");
      v59.__vftable = (std::runtime_error_vtbl *)off_100495450;
      boost::throw_exception<boost::bad_function_call>(&v59);
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
LABEL_98:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_99;
  }
  uint64_t v45 = 0;
  uint64_t v46 = *((void *)a4 + 64);
  if (!v46) {
    goto LABEL_111;
  }
LABEL_102:
  (*(void (**)(char *, uint64_t))((v46 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 520, v45);
  buf.__vftable = (std::runtime_error_vtbl *)off_100498F38;
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  buf.__vftable = (std::runtime_error_vtbl *)off_100498ED8;
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  if (v50)
  {
    uint64_t v51 = (char *)v50;
    operator delete(v50);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
LABEL_26:
  if (v58 < 0) {
    operator delete(__p);
  }
  return v14;
}

void sub_100133F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  ServiceEntry::~ServiceEntry((ServiceEntry *)&a27);
  if (a10)
  {
    operator delete(a10);
    uint64_t v28 = a13;
    if (!a13)
    {
LABEL_3:
      if (a21 < 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v28 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v28);
  if (a21 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ProcessServiceRemove(HostInterpreter *this, unsigned __int8 a2, char **a3, unsigned char *a4)
{
  size_t v6 = a4[256];
  char v7 = a4 + 4;
  if (a4[256])
  {
    uint64_t v8 = (char *)operator new(a4[256]);
    uint64_t v9 = &v8[v6];
    memcpy(v8, v7, v6);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = *(_DWORD *)a4;
  int v57 = 2;
  int v58 = v10;
  uint64_t v56 = off_100498ED8;
  uint64_t v60 = 0;
  BOOL v61 = 0;
  std::runtime_error v59 = 0;
  size_t v11 = v9 - v8;
  if (v9 != v8)
  {
    if ((v11 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v8);
    uint64_t v13 = &v12[v11];
    std::runtime_error v59 = v12;
    BOOL v61 = &v12[v11];
    memcpy(v12, v8, v9 - v8);
    uint64_t v60 = v13;
  }
  uint64_t v15 = *((void *)this + 1);
  uint64_t v14 = *((void *)this + 2);
  if (v15 == v14) {
    goto LABEL_25;
  }
  while (!ServiceEntryBase::operator==(v15, (uint64_t)&v56))
  {
    v15 += 80;
    if (v15 == v14)
    {
      uint64_t v15 = v14;
      break;
    }
  }
  uint64_t v16 = v15;
  uint64_t v17 = *((void *)this + 2);
  if (v16 == v17)
  {
LABEL_25:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
        ServiceEntryBase::get_description((ServiceEntryBase *)&v56);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v26 = 0;
    int v23 = 0;
    uint64_t v27 = 0;
    goto LABEL_94;
  }
  if (*v7 == 93)
  {
    int v18 = *(_DWORD *)a4;
    LODWORD(v63.__imp_.__imp_) = 0;
    HIDWORD(v63.__imp_.__imp_) = v18;
    v63.__vftable = (std::runtime_error_vtbl *)off_100498ED8;
    uint64_t v65 = 0;
    char v66 = 0;
    uint64_t v64 = 0;
    if (v9 != v8)
    {
      if ((v11 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = (char *)operator new(v9 - v8);
      uint64_t v20 = &v19[v11];
      uint64_t v64 = v19;
      char v66 = &v19[v11];
      memcpy(v19, v8, v11);
      uint64_t v65 = v20;
    }
    uint64_t v21 = *((void *)this + 1);
    if (v21 == v17)
    {
      int v23 = 1;
    }
    else
    {
      while (!ServiceEntryBase::operator==(v21, (uint64_t)&v63))
      {
        v21 += 80;
        if (v21 == v17)
        {
          uint64_t v21 = v17;
          break;
        }
      }
      BOOL v22 = v21 == *((void *)this + 2);
      int v23 = v22;
      if (!v22)
      {
        uint64_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v24)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
            ServiceEntryBase::get_description((ServiceEntryBase *)&v63);
          }
          goto LABEL_42;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_41;
        }
        goto LABEL_42;
      }
    }
    uint64_t v28 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v28)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Services: NCP Entry not Found, inform SRP  Daemon", __p, 2u);
      }
      goto LABEL_42;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_41:
    }
      -[PowerEventHandler_Rcp init:]();
LABEL_42:
    v63.__vftable = (std::runtime_error_vtbl *)off_100498ED8;
    if (v64)
    {
      uint64_t v65 = v64;
      operator delete(v64);
    }
    goto LABEL_44;
  }
  int v23 = 0;
LABEL_44:
  char v29 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v29)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(std::runtime_error *__return_ptr, uint64_t))(*(void *)v16 + 16))(&v63, v16);
      uint64_t v30 = SHIBYTE(v64) >= 0 ? &v63 : (std::runtime_error *)v63.__vftable;
      *(_DWORD *)std::runtime_error __p = 136315138;
      *(void *)&__p[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Services: Removing %s", __p, 0xCu);
      if (SHIBYTE(v64) < 0) {
        operator delete(v63.__vftable);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v31 = v16 + 80;
  uint64_t v32 = *((void *)this + 2);
  if (v16 + 80 != v32)
  {
    do
    {
      *(void *)(v16 + 8) = *(void *)(v16 + 88);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v16 + 16), *(char **)(v16 + 96), *(char **)(v16 + 104), *(void *)(v16 + 104) - *(void *)(v16 + 96));
      *(unsigned char *)(v16 + 40) = *(unsigned char *)(v16 + 120);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v16 + 48), *(char **)(v16 + 128), *(char **)(v16 + 136), *(void *)(v16 + 136) - *(void *)(v16 + 128));
      *(_WORD *)(v16 + 72) = *(_WORD *)(v16 + 152);
      *(unsigned char *)(v16 + 74) = *(unsigned char *)(v16 + 154);
      uint64_t v33 = v16 + 80;
      uint64_t v34 = v16 + 160;
      v16 += 80;
    }
    while (v34 != v32);
    uint64_t v31 = *((void *)this + 2);
    uint64_t v16 = v33;
  }
  if (v31 != v16)
  {
    uint64_t v35 = v31 - 80;
    char v36 = (void (***)(void))(v31 - 80);
    int v37 = (void (***)(void))(v31 - 80);
    do
    {
      int v38 = *v37;
      v37 -= 10;
      (*v38)(v36);
      v35 -= 80;
      BOOL v22 = v36 == (void (***)(void))v16;
      char v36 = v37;
    }
    while (!v22);
  }
  *((void *)this + 2) = v16;
  if (*v7 == 93) {
    HostInterpreter::clearRcpSrpServiceABCTimer((dispatch_source_t *)this);
  }
  int v67 = *(_DWORD *)a4;
  if (v6)
  {
    int v39 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v39)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        int v40 = a4[256];
        LODWORD(v63.__vftable) = 67109376;
        HIDWORD(v63.__vftable) = v40;
        LOWORD(v63.__imp_.__imp_) = 1024;
        *(_DWORD *)((char *)&v63.__imp_.__imp_ + 2) = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, " Service Data Leuint64_t n = %d, Server Data Leuint64_t n = %d", (uint8_t *)&v63, 0xEu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    unsigned __int8 v49 = a4[256];
    memcpy(v69, v7, v49);
    unsigned __int8 v68 = v49;
    uint64_t v50 = otServerRemoveService(*((void *)this + 28), v67, (uint64_t)v69, v49);
    if (v50)
    {
      uint64_t v51 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v51)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessServiceRemove();
        }
        goto LABEL_91;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_90;
      }
    }
    else
    {
      uint64_t v50 = otBorderRouterRegister(*((void *)this + 28));
      if (!v50)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_94;
      }
      uint64_t v52 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v52)
      {
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessServiceRemove();
        }
        goto LABEL_91;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_90:
      }
        -[PowerEventHandler_Rcp init:]();
    }
LABEL_91:
    HIDWORD(v53) = v50 - 1;
    LODWORD(v53) = v50 - 1;
    uint64_t v26 = 1;
    uint64_t v27 = 1;
    switch((v53 >> 1))
    {
      case 0u:
        goto LABEL_94;
      case 2u:
        uint64_t v27 = 9;
        uint64_t v26 = 5;
        break;
      case 3u:
        goto LABEL_93;
      case 6u:
        uint64_t v27 = 4;
        uint64_t v26 = 13;
        break;
      default:
        uint64_t v27 = 1;
        uint64_t v26 = v50;
        break;
    }
    goto LABEL_94;
  }
  unsigned __int8 v41 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v41)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::ProcessServiceRemove(v41, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
LABEL_93:
  uint64_t v27 = 2;
  uint64_t v26 = 7;
LABEL_94:
  uint64_t v54 = *((void *)a4 + 33);
  if (!v54)
  {
    std::runtime_error::runtime_error(&v63, "call to empty boost::function");
    v63.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v63);
  }
  (*(void (**)(unsigned char *, uint64_t))((v54 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 272, v27);
  if (v23) {
    HostInterpreter::signal_service_list(this);
  }
  uint64_t v56 = off_100498ED8;
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v8) {
    operator delete(v8);
  }
  return v26;
}

void sub_100134948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::runtime_error a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (!v23) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessStatus(HostInterpreter *this, unsigned __int8 a2, char **a3, char *a4)
{
  *(_DWORD *)(RcpHostContext::sRcpHostContext + 552) = otLinkGetChannel(*((void *)this + 28));
  otThreadGetNetworkName(*((void *)this + 28));
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 592), v6);
  *(_DWORD *)(RcpHostContext::sRcpHostContext + 556) = otThreadGetPartitionId(*((void *)this + 28));
  *(_WORD *)(RcpHostContext::sRcpHostContext + 584) = otLinkGetPanId(*((void *)this + 28));
  otThreadGetExtendedPanId(*((void *)this + 28));
  uint64_t v8 = v7;
  uint64_t v9 = operator new(8uLL);
  *uint64_t v9 = *v8;
  int v10 = v9 + 1;
  size_t v11 = (void *)RcpHostContext::sRcpHostContext;
  uint64_t v12 = *(void **)(RcpHostContext::sRcpHostContext + 560);
  if (v12)
  {
    *(void *)(RcpHostContext::sRcpHostContext + 568) = v12;
    operator delete(v12);
    v11[70] = 0;
    v11[71] = 0;
    v11[72] = 0;
  }
  v11[70] = v9;
  v11[71] = v10;
  v11[72] = v10;
  otThreadGetMeshLocalPrefix(*((void *)this + 28));
  snprintf(__str, 0xC8uLL, "%x:%x:%x:%x::/64", __rev16(*v13), __rev16(v13[1]), __rev16(v13[2]), __rev16(v13[3]));
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 688), __str);
  uint64_t LinkLocalIp6Address = otThreadGetLinkLocalIp6Address(*((void *)this + 28));
  otIp6AddressToString(LinkLocalIp6Address, __s, 40);
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 616), __s);
  uint64_t MeshLocalEid = otThreadGetMeshLocalEid(*((void *)this + 28));
  otIp6AddressToString(MeshLocalEid, __s, 40);
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 640), __s);
  uint64_t Rloc = otThreadGetRloc(*((void *)this + 28));
  otIp6AddressToString(Rloc, __s, 40);
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 664), __s);
  ExtendedAddress = (unsigned __int8 *)otLinkGetExtendedAddress(*((void *)this + 28));
  snprintf(v50, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", *ExtendedAddress, ExtendedAddress[1], ExtendedAddress[2], ExtendedAddress[3], ExtendedAddress[4], ExtendedAddress[5], ExtendedAddress[6], ExtendedAddress[7]);
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 712), v50);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = (void *)(RcpHostContext::sRcpHostContext + 712);
      if (*(char *)(RcpHostContext::sRcpHostContext + 735) < 0) {
        uint64_t v26 = (void *)*v26;
      }
      *(_DWORD *)std::runtime_error buf = 136315138;
      uint64_t v47 = v26;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "mac Extended Address := %s", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v28 = *((void *)this + 28);
  uint64_t v27 = (uint64_t *)((char *)this + 224);
  *(unsigned char *)(RcpHostContext::sRcpHostContext + 586) = otPowerControlGetMode(v28, v19, v20, v21, v22, v23, v24, v25);
  otThreadGetNetworkKey(*v27, (uint64_t)v49);
  char v29 = (char *)&buf[snprintf((char *)buf, 3uLL, "%.2x", v49[0])];
  uint64_t v30 = &v29[snprintf(v29, 5uLL, "%.2x", v49[1])];
  uint64_t v31 = &v30[snprintf(v30, 7uLL, "%.2x", v49[2])];
  uint64_t v32 = &v31[snprintf(v31, 9uLL, "%.2x", v49[3])];
  uint64_t v33 = &v32[snprintf(v32, 0xBuLL, "%.2x", v49[4])];
  uint64_t v34 = &v33[snprintf(v33, 0xDuLL, "%.2x", v49[5])];
  uint64_t v35 = &v34[snprintf(v34, 0xFuLL, "%.2x", v49[6])];
  char v36 = &v35[snprintf(v35, 0x11uLL, "%.2x", v49[7])];
  int v37 = &v36[snprintf(v36, 0x13uLL, "%.2x", v49[8])];
  int v38 = &v37[snprintf(v37, 0x15uLL, "%.2x", v49[9])];
  int v39 = &v38[snprintf(v38, 0x17uLL, "%.2x", v49[10])];
  int v40 = &v39[snprintf(v39, 0x19uLL, "%.2x", v49[11])];
  unsigned __int8 v41 = &v40[snprintf(v40, 0x1BuLL, "%.2x", v49[12])];
  uint64_t v42 = &v41[snprintf(v41, 0x1DuLL, "%.2x", v49[13])];
  int v43 = snprintf(v42, 0x1FuLL, "%.2x", v49[14]);
  snprintf(&v42[v43], 0x21uLL, "%.2x", v49[15]);
  char v48 = 0;
  std::string::assign((std::string *)(RcpHostContext::sRcpHostContext + 736), (const std::string::value_type *)buf);
  *(_DWORD *)(RcpHostContext::sRcpHostContext + 760) = otThreadGetKeySequenceCounter(*v27);
  if (!*(void *)a4)
  {
    std::runtime_error::runtime_error(&v45, "call to empty boost::function");
    v45.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v45);
  }
  (*(void (**)(char *, void))((*(void *)a4 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, 0);
  return 0;
}

void sub_100134F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::runtime_error a17)
{
}

uint64_t HostInterpreter::ProcessThreadStart(HostInterpreter *this, int a2, char **a3, char *a4)
{
  if (!a2)
  {
    uint64_t v6 = 7;
LABEL_18:
    uint64_t v9 = *(void *)a4;
    if (!*(void *)a4)
    {
      std::runtime_error::runtime_error((std::runtime_error *)v14, "call to empty boost::function");
      *(void *)uint64_t v14 = off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)v14);
    }
    int v10 = "Error!\n";
    goto LABEL_20;
  }
  uint64_t v6 = otDatasetSetActive(*((void *)this + 28), (uint64_t)v18);
  if (v6) {
    goto LABEL_18;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "dataset commit active, Done", v14, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v6 = otIp6SetEnabled(*((void *)this + 28), 1);
  if (v6) {
    goto LABEL_18;
  }
  uint64_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v8)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ifconfig up, Done", v14, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v6 = otThreadSetEnabled(*((void *)this + 28), 1);
  if (v6) {
    goto LABEL_18;
  }
  if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) == 6) {
    otThreadBecomeLeader(*((void *)this + 28), 0);
  }
  otInstanceGetUptimeAsString(*((void *)this + 28), v17, 24);
  uint64_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v12)
  {
    uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(6);
    if (is_the_mask_enabled)
    {
      uint64_t is_the_mask_enabled = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (is_the_mask_enabled)
      {
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)&v14[4] = v17;
        __int16 v15 = 2080;
        uint64_t v16 = "ProcessThreadStart";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s %s Thread start, Done", v14, 0x16u);
      }
    }
  }
  else
  {
    uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (is_the_mask_enabled) {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  HostInterpreter::transactionEnabled((HostInterpreter *)is_the_mask_enabled, 1);
  uint64_t v9 = *(void *)a4;
  if (!*(void *)a4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)v14, "call to empty boost::function");
    *(void *)uint64_t v14 = off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)v14);
  }
  uint64_t v6 = 0;
  int v10 = "Done\n";
LABEL_20:
  (*(void (**)(char *, const char *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, v10);
  return v6;
}

void sub_100135284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void sub_100135298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t HostInterpreter::ProcessThreadStop(HostInterpreter *this, unsigned __int8 a2, char **a3, char *a4)
{
  HostInterpreter::transactionEnabled(this, 0);
  HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer((dispatch_source_t *)this);
  if (HostInterpreter::isThreadSessionJoinEnabled(v6))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v8 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LODWORD(v34.__vftable) = 136315138;
        *(std::runtime_error_vtbl **)((char *)&v34.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessThreadStop";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Thread Session Join THREAD_SESSION_OFF", (uint8_t *)&v34, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    saveStringValue("threadSessionJoin", "OFF");
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::ProcessThreadStop(v9, v10, v11, v12, v13, v14, v15, v16);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v17 = HostInterpreter::detachIfWedConnectionInProgress(this);
    if (v17) {
      goto LABEL_29;
    }
  }
  HostInterpreter::clearRcpSrpAnycastServiceCovergenceTimer((dispatch_source_t *)this);
  HostInterpreter::clearSrpAdvertisedWithoutPrefixTimer((dispatch_source_t *)this);
  HostInterpreter::clearRcpSrpUnicastServiceCovergenceTimer((dispatch_source_t *)this);
  HostInterpreter::clearSrpPrefixCovergenceTimer((dispatch_source_t *)this);
  HostInterpreter::clearChildRoleDetectionTimer((dispatch_source_t *)this);
  HostInterpreter::clearRcpSrpServiceABCTimer((dispatch_source_t *)this);
  otIp6SetSlaacEnabled(*((void *)this + 28), 0);
  int v18 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v18)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      LODWORD(v34.__vftable) = 136315138;
      *(std::runtime_error_vtbl **)((char *)&v34.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessThreadStop";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s: SLAAC Disabled, Done", (uint8_t *)&v34, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v17 = otThreadSetEnabled(*((void *)this + 28), 0);
  if (v17) {
    goto LABEL_29;
  }
  uint64_t v19 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v19)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LODWORD(v34.__vftable) = 136315138;
      *(std::runtime_error_vtbl **)((char *)&v34.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessThreadStop";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s: Thread stop, Done", (uint8_t *)&v34, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v17 = otIp6SetEnabled(*((void *)this + 28), 0);
  if (v17)
  {
LABEL_29:
    HostInterpreter::remove_all_address_prefix_route_entries(this, 1);
    if (!*(void *)a4)
    {
      std::runtime_error::runtime_error(&v34, "call to empty boost::function");
      v34.__vftable = (std::runtime_error_vtbl *)off_100495450;
      boost::throw_exception<boost::bad_function_call>(&v34);
    }
    (*(void (**)(char *, const char *))((*(void *)a4 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, "Error!\n");
    return v17;
  }
  uint64_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v21)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      LODWORD(v34.__vftable) = 136315138;
      *(std::runtime_error_vtbl **)((char *)&v34.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessThreadStop";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s: ifconfig down, Done", (uint8_t *)&v34, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  otNetDataReset(*((void *)this + 28));
  uint64_t v22 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v22)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      LODWORD(v34.__vftable) = 136315138;
      *(std::runtime_error_vtbl **)((char *)&v34.__vftable + 4) = (std::runtime_error_vtbl *)"ProcessThreadStop";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s: Closing settings fd", (uint8_t *)&v34, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  otPlatSettingsDeinit();
  usleep(0x186A0u);
  BOOL v30 = otPlatVendorResetRCP(*((void *)this + 28), v23, v24, v25, v26, v27, v28, v29) == 0;
  uint64_t v31 = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v32 = v31;
  if (!v30)
  {
    if (v31)
    {
      if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v32, OS_LOG_TYPE_INFO)) {
        goto LABEL_58;
      }
      LOWORD(v34.__vftable) = 0;
      uint64_t v33 = "Failed to Reset RCP2 to sleep state";
      goto LABEL_53;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_58;
    }
LABEL_57:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_58;
  }
  if (!v31)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v32, OS_LOG_TYPE_INFO)) {
    goto LABEL_58;
  }
  LOWORD(v34.__vftable) = 0;
  uint64_t v33 = "Reset RCP2 to sleep state";
LABEL_53:
  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, v33, (uint8_t *)&v34, 2u);
LABEL_58:
  if (!*(void *)a4)
  {
    std::runtime_error::runtime_error(&v34, "call to empty boost::function");
    v34.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v34);
  }
  (*(void (**)(char *, const char *))((*(void *)a4 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, "Done\n");
  HostInterpreter::remove_all_address_prefix_route_entries(this, 1);
  return 0;
}

void sub_1001358D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void sub_1001358E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t HostInterpreter::ProcessUpdatePrimaryResident(HostInterpreter *this, int a2, char **a3, unsigned char *a4)
{
  if (a2)
  {
    if (a4[32])
    {
      uint8_t __p[23] = 19;
      strcpy(__p, "is_primary_resident");
      v32[0] = __p;
      uint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
      std::string::assign((std::string *)(v6 + 7), "1");
    }
    else
    {
      uint8_t __p[23] = 19;
      strcpy(__p, "is_primary_resident");
      v32[0] = __p;
      uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
      std::string::assign((std::string *)(v8 + 7), "0");
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint8_t __p[23] = 19;
    strcpy(__p, "is_primary_resident");
    v32[0] = __p;
    uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
    uint64_t v10 = (const char *)(v9 + 7);
    if (*((char *)v9 + 79) < 0) {
      uint64_t v10 = *(const char **)v10;
    }
    saveStringValue("is_primary_resident", v10);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (a4[33]) {
        goto LABEL_13;
      }
    }
    else if (a4[33])
    {
LABEL_13:
      *(void *)std::runtime_error __p = operator new(0x28uLL);
      *(_OWORD *)&__p[8] = xmmword_1003F2EF0;
      strcpy(*(char **)__p, "is_primary_resident_thread_capable");
      v32[0] = __p;
      uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
      std::string::assign((std::string *)(v11 + 7), "1");
      goto LABEL_16;
    }
    *(void *)std::runtime_error __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_1003F2EF0;
    strcpy(*(char **)__p, "is_primary_resident_thread_capable");
    v32[0] = __p;
    uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
    std::string::assign((std::string *)(v12 + 7), "0");
LABEL_16:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)std::runtime_error __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_1003F2EF0;
    strcpy(*(char **)__p, "is_primary_resident_thread_capable");
    v32[0] = __p;
    uint64_t v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
    uint64_t v14 = (const char *)(v13 + 7);
    if (*((char *)v13 + 79) < 0) {
      uint64_t v14 = *(const char **)v14;
    }
    saveStringValue("is_primary_resident_thread_capable", v14);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      uint64_t v15 = (const std::string::value_type *)*((void *)a4 + 5);
      if (v15) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v15 = (const std::string::value_type *)*((void *)a4 + 5);
      if (v15)
      {
LABEL_22:
        uint8_t __p[23] = 21;
        strcpy(__p, "primary_resident_info");
        v32[0] = __p;
        uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
        std::string::assign((std::string *)(v16 + 7), v15);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint8_t __p[23] = 21;
        strcpy(__p, "primary_resident_info");
        v32[0] = __p;
        uint64_t v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
        int v18 = (const char *)(v17 + 7);
        if (*((char *)v17 + 79) < 0) {
          int v18 = *(const char **)v18;
        }
        goto LABEL_32;
      }
    }
    uint8_t __p[23] = 21;
    strcpy(__p, "primary_resident_info");
    v32[0] = __p;
    uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
    std::string::assign((std::string *)(v19 + 7), "");
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint8_t __p[23] = 21;
    strcpy(__p, "primary_resident_info");
    v32[0] = __p;
    uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v32);
    int v18 = (const char *)(v20 + 7);
    if (*((char *)v20 + 79) < 0) {
      int v18 = *(const char **)v18;
    }
LABEL_32:
    saveStringValue("primary_resident_info", v18);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    otInstanceGetUptimeAsString(*((void *)this + 28), v39, 24);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!logging_obg)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        -[PowerEventHandler_Rcp init:]();
      }
      goto LABEL_49;
    }
    if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "is_primary_resident");
    v30[0] = v32;
    uint64_t v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)v32, (uint64_t)&std::piecewise_construct, (_OWORD **)v30);
    uint64_t v23 = v22 + 7;
    if (*((char *)v22 + 79) < 0) {
      uint64_t v23 = (void *)*v23;
    }
    std::string::basic_string[abi:ne180100]<0>(v30, "is_primary_resident_thread_capable");
    v28[0] = v30;
    uint64_t v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)v30, (uint64_t)&std::piecewise_construct, (_OWORD **)v28);
    uint64_t v25 = v24 + 7;
    if (*((char *)v24 + 79) < 0) {
      uint64_t v25 = (void *)*v25;
    }
    std::string::basic_string[abi:ne180100]<0>(v28, "primary_resident_info");
    std::runtime_error v34 = v28;
    uint64_t v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)v28, (uint64_t)&std::piecewise_construct, (_OWORD **)&v34);
    uint64_t v27 = v26 + 7;
    if (*((char *)v26 + 79) < 0) {
      uint64_t v27 = (void *)*v27;
    }
    *(_DWORD *)std::runtime_error __p = 136315906;
    *(void *)&__p[4] = v39;
    *(_WORD *)&__p[12] = 2080;
    *(void *)&__p[14] = v23;
    *(_WORD *)&char __p[22] = 2080;
    char v36 = v25;
    __int16 v37 = 2080;
    int v38 = v27;
    _os_log_debug_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_DEBUG, "%s HostInterpreter::ProcessUpdatePrimaryResident is_primary_resident=%s, is_primary_resident_thread_capable=%s primary_resident_info=%s", __p, 0x2Au);
    if (v29 < 0)
    {
      operator delete(v28[0]);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_45:
        if (v33 < 0) {
          goto LABEL_53;
        }
        goto LABEL_49;
      }
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v30[0]);
    if (v33 < 0) {
LABEL_53:
    }
      operator delete(v32[0]);
LABEL_49:
    if (!*(void *)a4)
    {
      std::runtime_error::runtime_error((std::runtime_error *)__p, "call to empty boost::function");
      *(void *)std::runtime_error __p = off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)__p);
    }
    (*(void (**)(unsigned char *, void))((*(void *)a4 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, 0);
    return 0;
  }
  if (!*(void *)a4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)__p, "call to empty boost::function");
    *(void *)std::runtime_error __p = off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)__p);
  }
  (*(void (**)(unsigned char *, uint64_t, char **))((*(void *)a4 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, 1, a3);
  return 7;
}

void sub_100136070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,std::runtime_error a32,int a33,__int16 a34,char a35,char a36)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a29 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a29 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t HostInterpreter::ProcessWedStart(HostInterpreter *this, unsigned __int8 a2, char **a3, const char **a4)
{
  unsigned __int8 v6 = otThreadWedWakeUpPattern(*((void *)this + 28));
  RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)&__p);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::ProcessWedStart();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) != 6)
  {
    uint64_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v12)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::ProcessWedStart(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      goto LABEL_23;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_22:
    }
      -[PowerEventHandler_Rcp init:]();
LABEL_23:
    uint64_t v20 = 1;
    uint64_t v21 = 1;
    goto LABEL_27;
  }
  if (otThreadIsEnhCslPeerLinked(*((void *)this + 28)))
  {
    CslPeripheralAddr = (const char *)otThreadGetCslPeripheralAddr(*((void *)this + 28));
    if (CslPeripheralAddr)
    {
      if (!strcasecmp(*a4, CslPeripheralAddr))
      {
        uint64_t v25 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v25)
        {
          if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
            HostInterpreter::ProcessWedStart();
          }
          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
  }
  if ((otThreadIsEnhCslPeerUnlinking(*((void *)this + 28)) & 1) != 0
    || otThreadIsEnhCslPeerLinking(*((void *)this + 28)))
  {
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        char IsEnhCslPeerUnlinking = otThreadIsEnhCslPeerUnlinking(*((void *)this + 28));
        char IsEnhCslPeerLinking = otThreadIsEnhCslPeerLinking(*((void *)this + 28));
        HostInterpreter::ProcessWedStart(IsEnhCslPeerUnlinking, IsEnhCslPeerLinking, buf, v9);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v21 = 9;
    uint64_t v20 = 5;
  }
  else
  {
    uint64_t v20 = HostInterpreter::detachIfWedConnectionInProgress(this);
    if (v20) {
      goto LABEL_46;
    }
    uint64_t v20 = ot::Utils::CmdLineParser::ParseAsHexString((ot::Utils::CmdLineParser *)*a4, v33, (unsigned __int8 *)8);
    if (v20) {
      goto LABEL_46;
    }
    uint64_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v24)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::ProcessWedStart((unsigned __int8 *)v33, v24);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v20 = otThreadAttachCslPeripheral(*((void *)this + 28), (uint64_t)v33, 0x49Cu, v6);
    if (v20)
    {
LABEL_46:
      HIDWORD(v27) = v20 - 1;
      LODWORD(v27) = v20 - 1;
      unsigned int v26 = v27 >> 1;
      if (v26 <= 6 && ((0x4Du >> v26) & 1) != 0)
      {
        uint64_t v28 = 4 * (int)v26;
        uint64_t v20 = *(unsigned int *)((char *)&unk_1003F6A00 + v28);
        uint64_t v21 = *(unsigned int *)((char *)&unk_1003F6A1C + v28);
      }
      else
      {
        uint64_t v21 = 1;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
  }
LABEL_27:
  unint64_t v22 = (unint64_t)a4[1];
  if (!v22)
  {
    std::runtime_error::runtime_error(&v31, "call to empty boost::function");
    v31.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v31);
  }
  (*(void (**)(char *, uint64_t))((v22 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 16, v21);
  if (v30 < 0) {
    operator delete(__p);
  }
  return v20;
}

void sub_100136550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::runtime_error a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessWedStop(HostInterpreter *this, unsigned __int8 a2, char **a3, char *a4)
{
  if ((otThreadGetLinkMode(*((void *)this + 28)) & 7) != 6)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v9 = logging_obg;
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::ProcessWedStop(v9, v10, v11, v12, v13, v14, v15, v16);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
LABEL_14:
    uint64_t v17 = 1;
    goto LABEL_15;
  }
  if ((otThreadIsEnhCslPeerUnlinking(*((void *)this + 28)) & 1) != 0
    || otThreadIsEnhCslPeerLinking(*((void *)this + 28)))
  {
    unsigned __int8 v6 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v6)
    {
      char v7 = v6;
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::ProcessWedStop((uint64_t *)this + 28, v7);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
LABEL_18:
    uint64_t v18 = 9;
    uint64_t v17 = 5;
    goto LABEL_19;
  }
  uint64_t v20 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v20)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      uint64_t v29 = HostInterpreter::detachIfWedConnectionInProgress(this);
      uint64_t v17 = v29;
      if (v29 > 0xD) {
        goto LABEL_15;
      }
      goto LABEL_28;
    }
LABEL_27:
    uint64_t v29 = HostInterpreter::detachIfWedConnectionInProgress(this);
    uint64_t v17 = v29;
    goto LABEL_28;
  }
  uint64_t v21 = v20;
  if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_27;
  }
  HostInterpreter::ProcessWedStop(v21, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v29 = HostInterpreter::detachIfWedConnectionInProgress(this);
  uint64_t v17 = v29;
  if (v29 > 0xD)
  {
LABEL_15:
    uint64_t v18 = 1;
    goto LABEL_19;
  }
LABEL_28:
  uint64_t v18 = v17;
  switch((int)v29)
  {
    case 0:
      break;
    case 1:
      goto LABEL_14;
    case 5:
      goto LABEL_18;
    case 7:
      uint64_t v18 = 2;
      break;
    case 13:
      uint64_t v18 = 4;
      break;
    default:
      goto LABEL_15;
  }
LABEL_19:
  if (!*(void *)a4)
  {
    std::runtime_error::runtime_error(&v30, "call to empty boost::function");
    v30.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v30);
  }
  (*(void (**)(char *, uint64_t))((*(void *)a4 & 0xFFFFFFFFFFFFFFFELL) + 8))(a4 + 8, v18);
  return v17;
}

void sub_100136800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void HostInterpreter::HostInterpreter(HostInterpreter *this, ot::Instance *a2)
{
  *(void *)this = off_100498238;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 12) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 17) = 0;
  *((void *)this + 16) = (char *)this + 136;
  *((void *)this + 15) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 22) = -1;
  *((unsigned char *)this + 184) = 0;
  ot::Spinel::Decoder::Decoder((HostInterpreter *)((char *)this + 192));
  *((void *)this + 28) = a2;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 38) = 0;
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *((void *)this + 30) = dispatch_queue_create("threadradiod.Host.Intepreter.Process.Queue", v4);
  std::string::size_type v5 = dispatch_queue_attr_make_with_qos_class((dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent, QOS_CLASS_USER_INITIATED, 0);
  *((void *)this + 33) = dispatch_queue_create("threadradiod.srp.convergence.Queue", v5);
  *((_WORD *)this + 76) = -1;
  *((_DWORD *)this + 58) = 0;
  *((void *)this + 39) = 0;
  *((unsigned char *)this + 184) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = -1;
  *(_DWORD *)((char *)this + 162) = 0;
  *((_WORD *)this + 83) = 0;
  unsigned __int8 v6 = CFDateFormatterCreate(kCFAllocatorDefault, 0, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
  *((void *)this + 40) = v6;
  CFDateFormatterSetFormat(v6, @"yyyy-MM-dd HH:mm:ss");
}

void sub_1001369D0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v6, *(void **)(v2 + 136));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v5, *(void **)(v2 + 112));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v4, *(void **)(v2 + 88));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3, *(void **)(v2 + 64));
  std::vector<ServiceEntry>::~vector[abi:ne180100]((void **)(v2 + 32));
  std::vector<ServiceEntry>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

dispatch_queue_t HostInterpreter::create_process_queue(HostInterpreter *this)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("threadradiod.Host.Intepreter.Process.Queue", v2);
  *((void *)this + 30) = result;
  return result;
}

dispatch_queue_t HostInterpreter::create_srp_convergence_queue(HostInterpreter *this)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class((dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("threadradiod.srp.convergence.Queue", v2);
  *((void *)this + 33) = result;
  return result;
}

void **std::vector<ServiceEntry>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 80;
      uint64_t v6 = v3 - 80;
      char v7 = v3 - 80;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 80;
        (*v8)(v6);
        v5 -= 80;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void HostInterpreter::~HostInterpreter(CFTypeRef *this)
{
  *this = off_100498238;
  CFRelease(this[40]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)(this + 16), this[17]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)(this + 13), this[14]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)(this + 10), this[11]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)(this + 7), this[8]);
  uint64_t v2 = (char *)this[4];
  if (v2)
  {
    uint64_t v3 = (char *)this[5];
    uint64_t v4 = (void *)this[4];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 80;
      uint64_t v6 = v3 - 80;
      char v7 = v3 - 80;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 80;
        (*v8)(v6);
        v5 -= 80;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = (void *)this[4];
    }
    this[5] = v2;
    operator delete(v4);
  }
  uint64_t v10 = (char *)this[1];
  if (v10)
  {
    uint64_t v11 = (char *)this[2];
    uint64_t v12 = (void *)this[1];
    if (v11 != v10)
    {
      uint64_t v13 = v11 - 80;
      uint64_t v14 = v11 - 80;
      uint64_t v15 = v11 - 80;
      do
      {
        uint64_t v16 = *(void (***)(char *))v15;
        v15 -= 80;
        (*v16)(v14);
        v13 -= 80;
        BOOL v9 = v14 == v10;
        uint64_t v14 = v15;
      }
      while (!v9);
      uint64_t v12 = (void *)this[1];
    }
    this[2] = v10;
    operator delete(v12);
  }
}

{
  uint64_t vars8;

  HostInterpreter::~HostInterpreter(this);

  operator delete();
}

void HostInterpreter::setRcpSrpSignalMeshLocalAddressTimer(HostInterpreter *this)
{
  uint64_t v2 = *((void *)this + 32);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v4 = logging_obg;
  if (v2)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(7))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
          HostInterpreter::setRcpSrpSignalMeshLocalAddressTimer(v4, v5, v6, v7, v8, v9, v10, v11);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::setRcpSrpSignalMeshLocalAddressTimer(v4, v12, v13, v14, v15, v16, v17, v18);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *((void *)this + 32) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 30));
    dispatch_time_t v19 = dispatch_time(0, 350000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 32), v19, 0x14DC9380uLL, 0);
    uint64_t v20 = *((void *)this + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter36setRcpSrpSignalMeshLocalAddressTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = this;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_activate(*((dispatch_object_t *)this + 32));
  }
}

void ___ZN15HostInterpreter36setRcpSrpSignalMeshLocalAddressTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::signalMeshLocalAddressNotFound(dispatch_source_t *this)
{
  HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer(this);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)&uint8_t buf[4] = "signalMeshLocalAddressNotFound";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = "ThreadNeighborMeshLocalAddress";
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s: Signal SRP MLE-ID Fetch has failed: %s", buf, 0x16u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *(void *)std::runtime_error buf = buf;
  *(_OWORD *)&uint8_t buf[8] = (unint64_t)buf;
  uint64_t v3 = operator new(0x28uLL);
  _DWORD v3[2] = 1701736302;
  *((unsigned char *)v3 + 39) = 4;
  *uint64_t v3 = buf;
  v3[1] = buf;
  *(void *)std::runtime_error buf = v3;
  *(void *)&uint8_t buf[8] = v3;
  *(void *)&uint8_t buf[16] = 1;
  long long v4 = xmmword_1003F2F00;
  strcpy((char *)operator new(0x20uLL), "ThreadNeighborMeshLocalAddress");
  operator new();
}

void sub_1001370FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a9) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a15 < 0)
  {
    operator delete(__p);
    std::list<std::string>::~list(&a16);
    _Unwind_Resume(a1);
  }
  std::list<std::string>::~list(&a16);
  _Unwind_Resume(a1);
}

void HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer(dispatch_source_t *this)
{
  if (this[32])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(7))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
          HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer(v3, v4, v5, v6, v7, v8, v9, v10);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[32]);
    dispatch_release(this[32]);
    this[32] = 0;
  }
}

void std::list<std::string>::push_back(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  uint64_t v5 = (std::string *)(v4 + 2);
  void *v4 = 0;
  v4[1] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    void v4[4] = *(void *)(a2 + 16);
  }
  uint64_t v6 = *a1;
  void *v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
}

void sub_1001372A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void boost::any::any<std::list<std::string> &>()
{
}

void sub_100137328()
{
}

void HostInterpreter::setRcpSrpServiceABCTimer(HostInterpreter *this)
{
  if (!*((void *)this + 31))
  {
    *((void *)this + 31) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 30));
    dispatch_time_t v2 = dispatch_time(0, 900000000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 31), v2, 0xD18C2E2800uLL, 0);
    uint64_t v3 = *((void *)this + 31);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter24setRcpSrpServiceABCTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_40;
    handler[4] = this;
    dispatch_source_set_event_handler(v3, handler);
    dispatch_activate(*((dispatch_object_t *)this + 31));
  }
}

void ___ZN15HostInterpreter24setRcpSrpServiceABCTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::checkRcpSrpServiceFound(dispatch_source_t *this)
{
  int v39 = 0;
  int v40 = 0;
  uint64_t v41 = 0;
  HostInterpreter::clearRcpSrpServiceABCTimer(this);
  dispatch_time_t v2 = this[1];
  if (v2 == this[2]) {
    goto LABEL_60;
  }
  uint64_t v3 = v2 + 6;
  while (1)
  {
    *(void *)char v48 = 0;
    unsigned __int8 v49 = 0;
    uint64_t v50 = 0;
    isa = v3[-4].isa;
    uint64_t v5 = v3[-3].isa;
    size_t v7 = v5 - isa;
    if (v5 == isa)
    {
      uint64_t v8 = 0;
      if (MEMORY[0] != 93) {
        goto LABEL_4;
      }
    }
    else
    {
      if ((v7 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = operator new(v5 - isa);
      memcpy(v8, isa, v7);
      if (*v8 != 93) {
        goto LABEL_4;
      }
    }
    if (LODWORD(v3[-5].isa) == 2) {
      break;
    }
LABEL_4:
    operator delete(v8);
    uint64_t v4 = v3 + 4;
    v3 += 10;
    if (v4 == this[2]) {
      goto LABEL_60;
    }
  }
  int isa_low = LOWORD(v3[3].isa);
  if (v3 != &v39) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v39, (char *)v3->isa, (char *)v3[1].isa, v3[1].isa - v3->isa);
  }
  operator delete(v8);
  uint64_t v10 = this[1];
  if (v10 == this[2])
  {
LABEL_51:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)char v48 = 67109120;
          *(_DWORD *)&v48[4] = 93;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "RCP SRP service not found, service data[%02X]", v48, 8u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v29 = RcpHostContext::sRcpHostContext;
    char v35 = 11;
    strcpy(v34, "\nPerformance");
    strcpy((char *)v33, "Data Stall");
    std::runtime_error v31 = operator new(0x28uLL);
    long long v32 = xmmword_1003F3050;
    strcpy((char *)v31, "No service found in the network data");
    RcpHostContext::captureABC(v29, (uint64_t)&v34[1], (uint64_t)v33, (uint64_t)&v31, 0, 1);
    if (SHIBYTE(v32) < 0)
    {
      operator delete(v31);
      if ((v34[0] & 0x80000000) == 0)
      {
LABEL_59:
        if ((v35 & 0x80000000) == 0) {
          goto LABEL_60;
        }
        goto LABEL_65;
      }
    }
    else if ((v34[0] & 0x80000000) == 0)
    {
      goto LABEL_59;
    }
    operator delete(v33[0]);
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_60;
    }
LABEL_65:
    operator delete(*(void **)&v34[1]);
    std::runtime_error v30 = v39;
    if (v39) {
      goto LABEL_61;
    }
    return;
  }
  char v11 = 0;
  uint64_t v12 = this[1];
  do
  {
    *(void *)char v48 = 0;
    unsigned __int8 v49 = 0;
    uint64_t v50 = 0;
    Class v14 = v12[2].isa;
    Class v13 = v12[3].isa;
    size_t v15 = v13 - v14;
    if (v13 == v14)
    {
      uint64_t v16 = 0;
      char v36 = 0;
      __int16 v37 = 0;
      int v38 = 0;
      Class v18 = v12[6].isa;
      Class v22 = v12[7].isa;
      size_t v19 = v22 - v18;
      if (v22 == v18) {
        goto LABEL_22;
      }
    }
    else
    {
      if ((v15 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = operator new(v13 - v14);
      *(void *)char v48 = v16;
      uint64_t v50 = &v16[v15];
      memcpy(v16, v14, v15);
      unsigned __int8 v49 = &v16[v15];
      char v36 = 0;
      __int16 v37 = 0;
      int v38 = 0;
      Class v18 = v12[6].isa;
      Class v17 = v12[7].isa;
      size_t v19 = v17 - v18;
      if (v17 == v18)
      {
LABEL_22:
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        if (*v16 != 93) {
          goto LABEL_33;
        }
        goto LABEL_23;
      }
    }
    if ((v19 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = (char *)operator new(v19);
    char v36 = v20;
    __int16 v37 = v20;
    uint64_t v21 = &v20[v19];
    int v38 = &v20[v19];
    memcpy(v20, v18, v19);
    if (*v16 != 93)
    {
LABEL_33:
      char v25 = 1;
      goto LABEL_34;
    }
LABEL_23:
    if (LODWORD(v12[1].isa) || isa_low != LOWORD(v12[9].isa) || v40 - (unsigned char *)v39 != v21 - v20) {
      goto LABEL_33;
    }
    uint64_t v23 = v39 == v40 ? 0 : v39;
    uint64_t v24 = v20 == v21 ? 0 : v20;
    if (memcmp(v23, v24, v40 - (unsigned char *)v39)) {
      goto LABEL_33;
    }
    uint64_t v26 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v26)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error __p = 136315394;
        *(void *)&__p[4] = "com.apple.wpantund.ncp";
        __int16 v43 = 2080;
        uint64_t v44 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __p, 0x16u);
      }
LABEL_49:
      char v25 = 0;
      char v11 = 1;
      goto LABEL_34;
    }
    if (!syslog_is_the_mask_enabled(6)) {
      goto LABEL_49;
    }
    char v11 = 1;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      (*((void (**)(unsigned char *__return_ptr, NSObject *))v12->isa + 2))(__p, v12);
      uint64_t v27 = __p;
      if (v45 < 0) {
        uint64_t v27 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::runtime_error buf = 136315138;
      uint64_t v47 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "RCP SRP service found, [%s]", buf, 0xCu);
      if (v45 < 0) {
        operator delete(*(void **)__p);
      }
    }
    char v25 = 0;
LABEL_34:
    if (v20) {
      operator delete(v20);
    }
    operator delete(v16);
    if ((v25 & 1) == 0) {
      break;
    }
    v12 += 10;
    v10 += 10;
  }
  while (v12 != this[2]);
  if ((v11 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_60:
  std::runtime_error v30 = v39;
  if (v39)
  {
LABEL_61:
    int v40 = v30;
    operator delete(v30);
  }
}

void sub_1001379C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (v37) {
    operator delete(v37);
  }
  operator delete(v36);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void HostInterpreter::clearRcpSrpServiceABCTimer(dispatch_source_t *this)
{
  if (this[31])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(7))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
          HostInterpreter::clearRcpSrpServiceABCTimer(v3, v4, v5, v6, v7, v8, v9, v10);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[31]);
    dispatch_release(this[31]);
    this[31] = 0;
  }
}

void HostInterpreter::setRcpSrpAnycastServiceCovergenceTimer(HostInterpreter *this)
{
  uint64_t v2 = *((void *)this + 34);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v4 = logging_obg;
  if (v2)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Already started: rcpSrpAnycastServiceCovergenceTimer", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting rcpSrpAnycastServiceCovergenceTimer", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *((void *)this + 34) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 33));
    dispatch_time_t v5 = dispatch_time(0, 3600000000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 34), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    uint64_t v6 = *((void *)this + 34);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter38setRcpSrpAnycastServiceCovergenceTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_44;
    handler[4] = this;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(*((dispatch_object_t *)this + 34));
  }
}

void ___ZN15HostInterpreter38setRcpSrpAnycastServiceCovergenceTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::checkAnycastSrpServiceConvergence(dispatch_source_t *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(4))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::checkAnycastSrpServiceConvergence();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::clearRcpSrpAnycastServiceCovergenceTimer(this);
  char v9 = 9;
  uint64_t v4 = RcpHostContext::sRcpHostContext;
  strcpy((char *)v8, "Stability");
  HIBYTE(v7[2]) = 19;
  strcpy((char *)v7, "Network Data Health");
  std::runtime_error __p = operator new(0x30uLL);
  long long v6 = xmmword_1003F2E60;
  strcpy((char *)__p, "Non Converging Anycast Service Sequence id");
  RcpHostContext::captureABC(v4, (uint64_t)v8, (uint64_t)v7, (uint64_t)&__p, 0, 1);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v9 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v8[0]);
      return;
    }
  }
  else if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
  if (v9 < 0) {
    goto LABEL_13;
  }
}

void sub_100137ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void HostInterpreter::clearRcpSrpAnycastServiceCovergenceTimer(dispatch_source_t *this)
{
  if (this[34])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopping rcpSrpAnycastServiceCovergenceTimer", v4, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[34]);
    dispatch_release(this[34]);
    this[34] = 0;
  }
}

void HostInterpreter::setSrpAdvertisedWithoutPrefixTimer(HostInterpreter *this)
{
  uint64_t v2 = *((void *)this + 35);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v4 = logging_obg;
  if (v2)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Already started: rcpSrpAnycastServiceCovergenceTimer", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting rcpSrpAdvertisedWithoutPrefixTimer", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *((void *)this + 35) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 33));
    dispatch_time_t v5 = dispatch_time(0, 3600000000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 35), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    long long v6 = *((void *)this + 35);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter34setSrpAdvertisedWithoutPrefixTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_48;
    handler[4] = this;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(*((dispatch_object_t *)this + 35));
  }
}

void ___ZN15HostInterpreter34setSrpAdvertisedWithoutPrefixTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::checkSrpAdvertisedWithoutPrefix(dispatch_source_t *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(4))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::checkSrpAdvertisedWithoutPrefix();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::clearSrpAdvertisedWithoutPrefixTimer(this);
  char v9 = 9;
  uint64_t v4 = RcpHostContext::sRcpHostContext;
  strcpy((char *)v8, "Stability");
  HIBYTE(v7[2]) = 19;
  strcpy((char *)v7, "Network Data Health");
  std::runtime_error __p = operator new(0x20uLL);
  long long v6 = xmmword_1003F3030;
  strcpy((char *)__p, "Srp advertised without prefix");
  RcpHostContext::captureABC(v4, (uint64_t)v8, (uint64_t)v7, (uint64_t)&__p, 0, 1);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v9 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v8[0]);
      return;
    }
  }
  else if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
  if (v9 < 0) {
    goto LABEL_13;
  }
}

void sub_100138364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void HostInterpreter::clearSrpAdvertisedWithoutPrefixTimer(dispatch_source_t *this)
{
  if (this[35])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopping rcpSrpAdvertisedWithoutPrefixTimer", v4, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[35]);
    dispatch_release(this[35]);
    this[35] = 0;
  }
}

void HostInterpreter::setChildRoleDetectionTimer(HostInterpreter *this)
{
  uint64_t v2 = *((void *)this + 38);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v4 = logging_obg;
  if (v2)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Already started: childRoleDetectionTimer", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting childRoleDetectionTimer", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *((void *)this + 38) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 30));
    dispatch_time_t v5 = dispatch_time(0, 3600000000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 38), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    long long v6 = *((void *)this + 38);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter26setChildRoleDetectionTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_50_0;
    handler[4] = this;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(*((dispatch_object_t *)this + 38));
  }
}

void ___ZN15HostInterpreter26setChildRoleDetectionTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::checkChildRoleDetection(dispatch_source_t *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(4))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::checkChildRoleDetection();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::clearChildRoleDetectionTimer(this);
  char v9 = 9;
  uint64_t v4 = RcpHostContext::sRcpHostContext;
  strcpy((char *)v8, "Stability");
  HIBYTE(v7[2]) = 19;
  strcpy((char *)v7, "Network Data Health");
  std::runtime_error __p = operator new(0x48uLL);
  long long v6 = xmmword_1003F6180;
  strcpy((char *)__p, "Device takes child role when it should have upgraded to a router role");
  RcpHostContext::captureABC(v4, (uint64_t)v8, (uint64_t)v7, (uint64_t)&__p, 0, 1);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v9 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v8[0]);
      return;
    }
  }
  else if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
  if (v9 < 0) {
    goto LABEL_13;
  }
}

void sub_100138800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void HostInterpreter::clearChildRoleDetectionTimer(dispatch_source_t *this)
{
  if (this[38])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopping childRoleDetectionTimer", v4, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[38]);
    dispatch_release(this[38]);
    this[38] = 0;
  }
}

void HostInterpreter::setRcpSrpUnicastServiceCovergenceTimer(HostInterpreter *this)
{
  uint64_t v2 = *((void *)this + 36);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v4 = logging_obg;
  if (v2)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Already started: rcpSrpUnicastServiceCovergenceTimer", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting rcpSrpUnicastServiceCovergenceTimer", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *((void *)this + 36) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 33));
    dispatch_time_t v5 = dispatch_time(0, 1800000000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 36), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    long long v6 = *((void *)this + 36);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter38setRcpSrpUnicastServiceCovergenceTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_52_0;
    handler[4] = this;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(*((dispatch_object_t *)this + 36));
  }
}

void ___ZN15HostInterpreter38setRcpSrpUnicastServiceCovergenceTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::checkUnicastSrpServiceConvergence(dispatch_source_t *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(4))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::checkUnicastSrpServiceConvergence();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::clearRcpSrpUnicastServiceCovergenceTimer(this);
  update_nonConvergingUnicastSrpServices_metric(1);
  char v9 = 9;
  uint64_t v4 = RcpHostContext::sRcpHostContext;
  strcpy((char *)v8, "Stability");
  HIBYTE(v7[2]) = 19;
  strcpy((char *)v7, "Network Data Health");
  std::runtime_error __p = operator new(0x20uLL);
  long long v6 = xmmword_1003F2F00;
  strcpy((char *)__p, "Non Converging Unicast Service");
  RcpHostContext::captureABC(v4, (uint64_t)v8, (uint64_t)v7, (uint64_t)&__p, 0, 1);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v9 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v8[0]);
      return;
    }
  }
  else if ((SHIBYTE(v7[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
  if (v9 < 0) {
    goto LABEL_13;
  }
}

void sub_100138C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void HostInterpreter::clearRcpSrpUnicastServiceCovergenceTimer(dispatch_source_t *this)
{
  if (this[36])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopping rcpSrpUnicastServiceCovergenceTimer", v4, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[36]);
    dispatch_release(this[36]);
    this[36] = 0;
  }
}

void HostInterpreter::setSrpPrefixCovergenceTimer(HostInterpreter *this)
{
  uint64_t v2 = *((void *)this + 37);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v4 = logging_obg;
  if (v2)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Already started: srpPrefixCovergenceTimer", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting srpPrefixCovergenceTimer", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *((void *)this + 37) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)this + 33));
    dispatch_time_t v5 = dispatch_time(0, 1800000000000);
    dispatch_source_set_timer(*((dispatch_source_t *)this + 37), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    long long v6 = *((void *)this + 37);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = ___ZN15HostInterpreter27setSrpPrefixCovergenceTimerEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_54;
    handler[4] = this;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(*((dispatch_object_t *)this + 37));
  }
}

void ___ZN15HostInterpreter27setSrpPrefixCovergenceTimerEv_block_invoke(uint64_t a1)
{
}

void HostInterpreter::checkSrpPrefixCovergence(dispatch_source_t *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v3 = logging_obg;
    if (syslog_is_the_mask_enabled(4))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::checkSrpPrefixCovergence();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::clearSrpPrefixCovergenceTimer(this);
  update_nonConvergingPrefixes_metric(1);
  char v8 = 9;
  strcpy((char *)v7, "Stability");
  HIBYTE(v6[2]) = 19;
  strcpy((char *)v6, "Network Data Health");
  char v5 = 21;
  strcpy(__p, "Non Converging Prefix");
  RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)v7, (uint64_t)v6, (uint64_t)__p, 0, 1);
  if (v5 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v6[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v8 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v7[0]);
      return;
    }
  }
  else if ((SHIBYTE(v6[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if (v8 < 0) {
    goto LABEL_13;
  }
}

void sub_100139124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void HostInterpreter::clearSrpPrefixCovergenceTimer(dispatch_source_t *this)
{
  if (this[37])
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v3 = logging_obg;
      if (syslog_is_the_mask_enabled(5))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopping srpPrefixCovergenceTimer", v4, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    dispatch_source_cancel(this[37]);
    dispatch_release(this[37]);
    this[37] = 0;
  }
}

uint64_t HostInterpreter::force_leader_reelection(HostInterpreter *this)
{
  HIBYTE(v18) = 19;
  strcpy(__p, "is_primary_resident");
  uint64_t v16 = __p;
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, &v16);
  uint64_t v3 = (unsigned __int8 **)(v2 + 7);
  int v4 = *((char *)v2 + 79);
  if (v4 < 0)
  {
    if (v2[8] == (uint64_t *)1)
    {
      BOOL v5 = **v3 != 49;
      if ((SHIBYTE(v18) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_4;
    }
LABEL_12:
    BOOL v5 = 1;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_4:
    operator delete(*(void **)__p);
    if (!v5) {
      goto LABEL_5;
    }
LABEL_14:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t result = syslog_is_the_mask_enabled(6);
      if (!result) {
        return result;
      }
      uint64_t result = os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_WORD *)std::runtime_error __p = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Leader re-election Failed: force_leader_reelection (Not Primary)", __p, 2u);
    }
    else
    {
      uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      -[PowerEventHandler_Rcp init:]();
    }
    return 0;
  }
  if (v4 != 1) {
    goto LABEL_12;
  }
  BOOL v5 = *(unsigned __int8 *)v3 != 49;
  if (SHIBYTE(v18) < 0) {
    goto LABEL_4;
  }
LABEL_13:
  if (v5) {
    goto LABEL_14;
  }
LABEL_5:
  gettimeofday(&v15, &v14);
  long long v6 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v6)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *((void *)this + 39);
      *(_DWORD *)std::runtime_error __p = 134218496;
      *(void *)&__p[4] = v15.tv_sec;
      *(_WORD *)&unsigned char __p[12] = 2048;
      *(void *)&__p[14] = v7;
      __int16 v18 = 1024;
      int v19 = 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Leader re-election attempt(Netdata) CurrTimeSec[%ld] LastTriggerTime[%ld] Primary[%d]", __p, 0x1Cu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v10 = *((void *)this + 39);
  if (v10 && v15.tv_sec - v10 < 7201)
  {
    uint64_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v12)
    {
      uint64_t result = syslog_is_the_mask_enabled(4);
      if (!result) {
        return result;
      }
      uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      HostInterpreter::force_leader_reelection();
    }
    else
    {
      uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      -[PowerEventHandler_Rcp init:]();
    }
    return 0;
  }
  ++*(_DWORD *)(RcpHostContext::sRcpHostContext + 944);
  if (otThreadBecomeLeader(*((void *)this + 28), 1))
  {
    char v11 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v11)
    {
      if (syslog_is_the_mask_enabled(4))
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::ProcessPropertyGet();
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    *((void *)this + 39) = v15.tv_sec;
    Class v13 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v13)
    {
      if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessPropertyGet();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    ++*(_DWORD *)(RcpHostContext::sRcpHostContext + 948);
  }
  return 1;
}

void sub_100139614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessUpdateAccessoryAddr(HostInterpreter *this, unsigned __int8 a2, char **a3, void *a4)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v7 = logging_obg;
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::ProcessUpdateAccessoryAddr();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (!a4 || *((char *)a4 + 23) < 0 && !*a4) {
    goto LABEL_62;
  }
  char v8 = (const char **)(a4 + 3);
  char v9 = (const char *)(a4 + 3);
  if (*((char *)a4 + 47) < 0)
  {
    char v9 = *v8;
    if (!*v8) {
      goto LABEL_62;
    }
  }
  uint64_t v10 = otIp6AddressFromString(v9, (uint64_t)v32);
  if (v10)
  {
    char v11 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v11)
    {
      if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessUpdateAccessoryAddr();
      }
      goto LABEL_37;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v12 = (const char *)a4;
  if (*((char *)a4 + 23) < 0) {
    uint64_t v12 = (const char *)*a4;
  }
  uint64_t v10 = otIp6AddressFromString(v12, (uint64_t)&v33);
  if (v10)
  {
    Class v13 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v13)
    {
      if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::ProcessUpdateAccessoryAddr();
      }
LABEL_37:
      __int16 v18 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v18)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          -[PowerEventHandler_Rcp init:]();
        }
        goto LABEL_47;
      }
      if (!syslog_is_the_mask_enabled(4) || !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
LABEL_47:
        HIDWORD(v22) = v10 - 1;
        LODWORD(v22) = v10 - 1;
        unsigned int v21 = v22 >> 1;
        if (v21 <= 6 && ((0x4Du >> v21) & 1) != 0)
        {
          uint64_t v24 = 4 * (int)v21;
          uint64_t v10 = *(unsigned int *)((char *)&unk_1003F6A00 + v24);
          uint64_t v23 = *(unsigned int *)((char *)&unk_1003F6A1C + v24);
        }
        else
        {
          uint64_t v23 = 1;
        }
        goto LABEL_63;
      }
      int v19 = a4;
      if (*((char *)a4 + 23) < 0)
      {
        int v19 = (void *)*a4;
        if ((*((char *)a4 + 47) & 0x80000000) == 0) {
          goto LABEL_42;
        }
      }
      else if ((*((char *)a4 + 47) & 0x80000000) == 0)
      {
LABEL_42:
        uint64_t v20 = a4 + 6;
        if ((*((char *)a4 + 71) & 0x80000000) == 0)
        {
LABEL_44:
          *(_DWORD *)std::runtime_error buf = 136316418;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v35 = 2080;
          char v36 = v8;
          __int16 v37 = 2080;
          int v38 = v20;
          __int16 v39 = 1024;
          int v40 = 65534;
          __int16 v41 = 1024;
          int v42 = 65534;
          __int16 v43 = 1024;
          int v44 = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "UpdateAccessoryAddr:Mark Add[%s] Lookup[%s] Info[%s] rloc16[%x] mle_rloc16[%x] error[%d]", buf, 0x32u);
          goto LABEL_47;
        }
LABEL_43:
        uint64_t v20 = (void *)*v20;
        goto LABEL_44;
      }
      char v8 = (const char **)*v8;
      uint64_t v20 = a4 + 6;
      if ((*((char *)a4 + 71) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
LABEL_36:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_37;
  }
  int v14 = ot::AddressResolver::LookUp((ot::AddressResolver::CacheEntry **)(*((void *)this + 28) + 126224), (const ot::Ip6::Address *)v32);
  if (v14 != 65534)
  {
    uint64_t v25 = *((void *)this + 28);
    int v26 = *(unsigned __int16 *)(v25 + 91000);
    ot::AddressResolver::UpdateSnoopedCacheEntry((ot::AddressResolver *)(v25 + 126224), &v33, v14, *(_WORD *)(v25 + 91000));
    uint64_t v27 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v27)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
      goto LABEL_62;
    }
    uint64_t v28 = a4;
    if (*((char *)a4 + 23) < 0)
    {
      uint64_t v28 = (void *)*a4;
      if ((*((char *)a4 + 47) & 0x80000000) == 0)
      {
LABEL_56:
        uint64_t v29 = a4 + 6;
        if ((*((char *)a4 + 71) & 0x80000000) == 0)
        {
LABEL_57:
          *(_DWORD *)std::runtime_error buf = 136316162;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v35 = 2080;
          char v36 = v8;
          __int16 v37 = 2080;
          int v38 = v29;
          __int16 v39 = 1024;
          int v40 = v14;
          __int16 v41 = 1024;
          int v42 = v26;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "UpdateAccessoryAddr:Mark Add[%s] Lookup[%s] Info[%s] rloc16[%x] mle_rloc16[%x]", buf, 0x2Cu);
          goto LABEL_62;
        }
LABEL_70:
        uint64_t v29 = (void *)*v29;
        goto LABEL_57;
      }
    }
    else if ((*((char *)a4 + 47) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    char v8 = (const char **)*v8;
    uint64_t v29 = a4 + 6;
    if ((*((char *)a4 + 71) & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_70;
  }
  timeval v15 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v15)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_62;
    }
LABEL_61:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_62;
  }
  if (!syslog_is_the_mask_enabled(4) || !os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    goto LABEL_62;
  }
  uint64_t v16 = a4;
  if (*((char *)a4 + 23) < 0)
  {
    uint64_t v16 = (void *)*a4;
    if ((*((char *)a4 + 47) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_72:
    char v8 = (const char **)*v8;
    Class v17 = a4 + 6;
    if ((*((char *)a4 + 71) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (*((char *)a4 + 47) < 0) {
    goto LABEL_72;
  }
LABEL_32:
  Class v17 = a4 + 6;
  if (*((char *)a4 + 71) < 0) {
LABEL_33:
  }
    Class v17 = (void *)*v17;
LABEL_34:
  *(_DWORD *)std::runtime_error buf = 136316162;
  *(void *)&uint8_t buf[4] = v16;
  __int16 v35 = 2080;
  char v36 = v8;
  __int16 v37 = 2080;
  int v38 = v17;
  __int16 v39 = 1024;
  int v40 = 65534;
  __int16 v41 = 1024;
  int v42 = 65534;
  _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "UpdateAccessoryAddr:Mark Add[%s] Lookup[%s] Info[%s] rloc16[%x] mle_rloc16[%x] LookupFound[0]", buf, 0x2Cu);
LABEL_62:
  uint64_t v10 = 0;
  uint64_t v23 = 0;
LABEL_63:
  uint64_t v30 = a4[9];
  if (!v30)
  {
    std::runtime_error::runtime_error((std::runtime_error *)buf, "call to empty boost::function");
    *(void *)std::runtime_error buf = off_100495450;
    boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)buf);
  }
  (*(void (**)(char *, uint64_t))((v30 & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)a4 + 80, v23);
  return v10;
}

void sub_100139C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t HostInterpreter::get_wpantund_status_from_oterror(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  switch((int)a2)
  {
    case 0:
      return result;
    case 5:
      uint64_t result = 9;
      break;
    case 7:
      uint64_t result = 2;
      break;
    case 13:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t boost::function1<void,int>::operator()(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v4, "call to empty boost::function");
    v4.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v4);
  }
  uint64_t v1 = *(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  uint64_t v2 = a1 + 1;

  return v1(v2);
}

void sub_100139D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t HostInterpreter::DeviceModeConfig(uint64_t a1, const std::string::value_type *a2)
{
  memset(&v41, 0, sizeof(v41));
  StringCFStringRef Value = getStringValue("Thread:DeviceMode");
  if (StringValue) {
    std::string::assign(&v41, (const std::string::value_type *)StringValue);
  }
  HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer((dispatch_source_t *)a1);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
    if (!v41.__r_.__value_.__l.__size_) {
      goto LABEL_27;
    }
    if (v41.__r_.__value_.__l.__size_ != 13) {
      goto LABEL_21;
    }
    BOOL v5 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  else
  {
    BOOL v5 = &v41;
    if (HIBYTE(v41.__r_.__value_.__r.__words[2]) == 6) {
      goto LABEL_23;
    }
    if (HIBYTE(v41.__r_.__value_.__r.__words[2]) != 13) {
      goto LABEL_27;
    }
  }
  std::string::size_type v7 = v5->__r_.__value_.__r.__words[0];
  uint64_t v8 = *(std::string::size_type *)((char *)v5->__r_.__value_.__r.__words + 5);
  if (v7 != 0x722D797065656C73 || v8 != 0x726574756F722D79) {
    goto LABEL_14;
  }
  int v10 = a2[23];
  if (v10 < 0)
  {
    if (*((void *)a2 + 1) != 6) {
      goto LABEL_14;
    }
    char v11 = *(const std::string::value_type **)a2;
  }
  else
  {
    char v11 = a2;
    if (v10 != 6) {
      goto LABEL_14;
    }
  }
  int v34 = *(_DWORD *)v11;
  int v35 = *((unsigned __int16 *)v11 + 2);
  if (v34 == 1953853298 && v35 == 29285) {
    goto LABEL_98;
  }
LABEL_14:
  if ((*((unsigned char *)&v41.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
LABEL_21:
    if (size != 6) {
      goto LABEL_27;
    }
    BOOL v5 = (std::string *)v41.__r_.__value_.__r.__words[0];
    goto LABEL_23;
  }
  if (HIBYTE(v41.__r_.__value_.__r.__words[2]) != 6) {
    goto LABEL_27;
  }
  BOOL v5 = &v41;
LABEL_23:
  int data = (int)v5->__r_.__value_.__l.__data_;
  int v13 = WORD2(v5->__r_.__value_.__r.__words[0]);
  if (data != 1953853298 || v13 != 29285) {
    goto LABEL_27;
  }
  int v27 = a2[23];
  if (v27 < 0)
  {
    if (*((void *)a2 + 1) == 13)
    {
      uint64_t v28 = *(const std::string::value_type **)a2;
      goto LABEL_85;
    }
LABEL_27:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = &v41;
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v16 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        Class v17 = a2;
        if (a2[23] < 0) {
          Class v17 = *(const std::string::value_type **)a2;
        }
        *(_DWORD *)std::runtime_error buf = 136315906;
        __int16 v43 = "otError HostInterpreter::DeviceModeConfig(std::string)";
        __int16 v44 = 1024;
        int v45 = 9810;
        __int16 v46 = 2080;
        uint64_t v47 = v16;
        __int16 v48 = 2080;
        unsigned __int8 v49 = v17;
        _os_log_debug_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_DEBUG, "ThreadConnection: %s:%d: Clearing ABC timer , Remove all address prefix route entries Transition from %s to %s", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    HostInterpreter::clearRcpSrpServiceABCTimer((dispatch_source_t *)a1);
    HostInterpreter::remove_all_address_prefix_route_entries((HostInterpreter *)a1, 1);
    goto LABEL_38;
  }
  uint64_t v28 = a2;
  if (v27 != 13) {
    goto LABEL_27;
  }
LABEL_85:
  uint64_t v31 = *(void *)v28;
  uint64_t v32 = *(void *)(v28 + 5);
  if (v31 != 0x722D797065656C73 || v32 != 0x726574756F722D79) {
    goto LABEL_27;
  }
LABEL_98:
  __int16 v37 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v37)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      int v38 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v38 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      __int16 v39 = a2;
      if (a2[23] < 0) {
        __int16 v39 = *(const std::string::value_type **)a2;
      }
      *(_DWORD *)std::runtime_error buf = 136315906;
      __int16 v43 = "otError HostInterpreter::DeviceModeConfig(std::string)";
      __int16 v44 = 1024;
      int v45 = 9808;
      __int16 v46 = 2080;
      uint64_t v47 = v38;
      __int16 v48 = 2080;
      unsigned __int8 v49 = v39;
      _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "ThreadConnection: %s:%d: Transition from %s to %s", buf, 0x26u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
LABEL_38:
  if (a2[23] < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  persist_thread_device_mode(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __int16 v18 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v18)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::DeviceModeConfig();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if ((a2[23] & 0x80000000) == 0)
  {
    if (strcmp(a2, "router"))
    {
      if (strcmp(a2, "sleepy-router"))
      {
        int v19 = strcmp(a2, "sleepy-end-device");
        uint64_t v20 = a2;
        if (!v19) {
          goto LABEL_70;
        }
        int v21 = strcmp(a2, "synchronized-sleepy-end-device");
        uint64_t v20 = a2;
        if (!v21) {
          goto LABEL_70;
        }
        goto LABEL_59;
      }
LABEL_63:
      uint64_t v26 = otThreadSetLinkMode(*(void *)(a1 + 224), 6);
      if (v26) {
        goto LABEL_80;
      }
      if ((otThreadGetLinkMode(*(void *)(a1 + 224)) & 7) == 6)
      {
        otThreadBecomeLeader(*(void *)(a1 + 224), 0);
        uint64_t v26 = 0;
        goto LABEL_80;
      }
      uint64_t v26 = 0;
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v26;
      }
LABEL_62:
      operator delete(v41.__r_.__value_.__l.__data_);
      return v26;
    }
LABEL_60:
    uint64_t v25 = otThreadSetLinkMode(*(void *)(a1 + 224), 7);
    goto LABEL_61;
  }
  unint64_t v22 = *(const char **)a2;
  if (!strcmp(*(const char **)a2, "router")) {
    goto LABEL_60;
  }
  if (!strcmp(v22, "sleepy-router")) {
    goto LABEL_63;
  }
  if (!strcmp(v22, "sleepy-end-device") || !strcmp(v22, "synchronized-sleepy-end-device"))
  {
    uint64_t v20 = *(const char **)a2;
LABEL_70:
    saveStringValue("Thread:DeviceMode", v20);
    uint64_t v26 = otThreadSetLinkMode(*(void *)(a1 + 224), 4);
    if (v26) {
      goto LABEL_80;
    }
    if (a2[23] < 0) {
      a2 = *(const std::string::value_type **)a2;
    }
    int v29 = strcmp(a2, "synchronized-sleepy-end-device");
    if (v29) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = 151;
    }
    if (v29) {
      unsigned __int16 v24 = 0;
    }
    else {
      unsigned __int16 v24 = 375;
    }
    goto LABEL_79;
  }
LABEL_59:
  unsigned int v23 = 0;
  unsigned __int16 v24 = 0;
LABEL_79:
  uint64_t v26 = otLinkCslSetPeriod(*(void *)(a1 + 224), v24);
  if (v26)
  {
LABEL_80:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v26;
    }
    goto LABEL_62;
  }
  uint64_t v25 = otLinkCslSetTimeout(*(void *)(a1 + 224), v23);
LABEL_61:
  uint64_t v26 = v25;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
  return v26;
}

void sub_10013A33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::any_cast<std::string>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::runtime_error v4 = *(void **)a1;
  if (v4) {
    BOOL v5 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
  }
  else {
  long long v6 = (const char *)(v5[1] & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (v6 != (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
    && strcmp(v6, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v11.__vftable = 0;
    std::bad_cast::bad_cast(&v11);
    v11.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  std::string::size_type v7 = *(void **)a1;
  if (*(char *)(*(void *)a1 + 31) < 0)
  {
    char v9 = (const std::string::value_type *)v7[1];
    std::string::size_type v10 = v7[2];
    std::string::__init_copy_ctor_external(a2, v9, v10);
  }
  else
  {
    long long v8 = *(_OWORD *)(v7 + 1);
    a2->__r_.__value_.__r.__words[2] = v7[3];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_10013A48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

BOOL HostInterpreter::isSleepyRouter(HostInterpreter *this)
{
  return (otThreadGetLinkMode(*((void *)this + 28)) & 7) == 6;
}

uint64_t HostInterpreter::transactionEnabled(HostInterpreter *this, int a2)
{
  if (!a2)
  {
    if (transaction)
    {
      os_release((void *)transaction);
      transactiouint64_t n = 0;
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!logging_obg)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        goto LABEL_29;
      }
      uint64_t v3 = logging_obg;
      if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        return 0;
      }
      __int16 v11 = 0;
      std::runtime_error v4 = "transaction Disabled";
      BOOL v5 = (uint8_t *)&v11;
    }
    else
    {
      long long v8 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v8)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        goto LABEL_29;
      }
      uint64_t v3 = v8;
      if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        return 0;
      }
      __int16 v10 = 0;
      std::runtime_error v4 = "transaction already Disabled";
      BOOL v5 = (uint8_t *)&v10;
    }
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, v5, 2u);
    return 0;
  }
  if (!transaction)
  {
    transactiouint64_t n = os_transaction_create();
    std::string::size_type v7 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v7)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      goto LABEL_29;
    }
    uint64_t v3 = v7;
    if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    __int16 v13 = 0;
    std::runtime_error v4 = "transaction Enabled";
    BOOL v5 = (uint8_t *)&v13;
    goto LABEL_20;
  }
  uint64_t v2 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    __int16 v12 = 0;
    std::runtime_error v4 = "transaction already Enabled";
    BOOL v5 = (uint8_t *)&v12;
    goto LABEL_20;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    return 0;
  }
LABEL_29:
  -[PowerEventHandler_Rcp init:]();
  return 0;
}

void boost::any::any<std::string &>()
{
}

{
  operator new();
}

void sub_10013A7CC()
{
}

uint64_t FillmoreControllerGetTmac(unsigned __int8 *a1)
{
  CFDataRef v2 = (const __CFData *)MGCopyAnswer();
  char IsInternalBuild = TelephonyUtilIsInternalBuild();
  CFIndex Length = CFDataGetLength(v2);
  BytePtr = CFDataGetBytePtr(v2);
  if (!Length)
  {
LABEL_5:
    BOOL v8 = v2 == 0;
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!logging_obg) {
      goto LABEL_17;
    }
    goto LABEL_6;
  }
  long long v6 = (unsigned __int8 *)BytePtr;
  uint64_t v7 = 0;
  while (!BytePtr[v7])
  {
    if (Length == ++v7) {
      goto LABEL_5;
    }
  }
  if (!v2)
  {
    BOOL v8 = 1;
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!logging_obg)
    {
LABEL_17:
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
      -[PowerEventHandler_Rcp init:]();
      if (v8) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_6:
    __int16 v10 = logging_obg;
    if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_18:
      if (v8) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    *(_WORD *)std::runtime_error buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "tmac:MG read for TMAC returned is Zero or NULL\n", buf, 2u);
    if (v8)
    {
LABEL_20:
      if ((IsInternalBuild & 1) == 0)
      {
        int v14 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v14)
        {
          timeval v15 = v14;
          uint64_t result = syslog_is_the_mask_enabled(6);
          if (!result) {
            return result;
          }
          uint64_t result = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
          if (!result) {
            return result;
          }
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "tmac:Thread missing in Customer Build", buf, 2u);
        }
        else
        {
          uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          -[PowerEventHandler_Rcp init:]();
        }
      }
      return 0;
    }
LABEL_19:
    CFRelease(v2);
    goto LABEL_20;
  }
  if (Length != 8)
  {
    uint64_t v16 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16)
    {
      Class v17 = v16;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::runtime_error buf = 67109120;
        int v21 = Length;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "tmac:MAC in syscfg has an incorrect size: %d, fail\n", buf, 8u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    CFRelease(v2);
    return 0;
  }
  CFRelease(v2);
  snprintf((char *)buf, 0x11uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", *v6, v6[1], v6[2], v6[3], v6[4], v6[5], v6[6], v6[7]);
  __int16 v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v11)
  {
    __int16 v12 = v11;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int16 v18 = 136315138;
      int v19 = buf;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "tmac:Syscfg Mac:%s", v18, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *a1 = *v6;
  a1[1] = v6[1];
  a1[2] = v6[2];
  a1[3] = v6[3];
  a1[4] = v6[4];
  a1[5] = v6[5];
  a1[6] = v6[6];
  a1[7] = v6[7];
  return 1;
}

void ___ZN15HostInterpreter17ProcessInitializeEhPPcPv_block_invoke(id a1)
{
}

void HostInterpreter::restore_health_metrics_from_persisted_db(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    CFDataRef v2 = logging_obg;
    if (syslog_is_the_mask_enabled(7))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::restore_health_metrics_from_persisted_db();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  char v4 = 19;
  strcpy(__p, "is_radio_tx_timeout");
  BOOL v5 = __p;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v5);
  operator new();
}

void sub_10013B27C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void HostInterpreter::restore_awd_stability_counters_from_persisted_db(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    CFDataRef v2 = logging_obg;
    if (syslog_is_the_mask_enabled(7))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::restore_awd_stability_counters_from_persisted_db();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  char v4 = 16;
  strcpy(__p, "fault_num_resets");
  BOOL v5 = __p;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v5);
  operator new();
}

void sub_10013BC04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
}

BOOL HostInterpreter::anyThreadSessionEnabled(HostInterpreter *this)
{
  BOOL isThreadSessionEnabled = HostInterpreter::isThreadSessionEnabled(this);
  if (isThreadSessionEnabled) {
    return 1;
  }

  return HostInterpreter::isThreadSessionJoinEnabled((HostInterpreter *)isThreadSessionEnabled);
}

void HostInterpreter::setExtendedMACAddressInDataSetIfAvailableinDB(HostInterpreter *this)
{
  if (!HostInterpreter::getNameAndXPANIDFromDataset(this, cStr)) {
    return;
  }
  unint64_t LLIntValueForBundleID = getLLIntValueForBundleID(cStr, "com.apple.threadradiodeMACDB");
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      if (LLIntValueForBundleID) {
        goto LABEL_9;
      }
LABEL_25:
      uint64_t v30 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v30)
      {
        uint64_t v31 = v30;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          int v41 = 136315138;
          int v42 = "setExtendedMACAddressInDataSetIfAvailableinDB";
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s, Failed to Set xMAC Addres to OT, as its not available in DB", (uint8_t *)&v41, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      otLinkRegenerateExAddr(*((void *)this + 28));
      goto LABEL_32;
    }
LABEL_8:
    if (LLIntValueForBundleID) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  char v4 = logging_obg;
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
    goto LABEL_8;
  }
  int v41 = 136315650;
  int v42 = "setExtendedMACAddressInDataSetIfAvailableinDB";
  __int16 v43 = 1024;
  BOOL v44 = LLIntValueForBundleID != 0;
  __int16 v45 = 2048;
  unint64_t v46 = LLIntValueForBundleID;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s, xMAC present in DB: %d, xMAC value in DB: 0x%llx", (uint8_t *)&v41, 0x1Cu);
  if (!LLIntValueForBundleID) {
    goto LABEL_25;
  }
LABEL_9:
  unint64_t v47 = bswap64(LLIntValueForBundleID);
  if (otLinkSetExtendedAddress(*((void *)this + 28), (uint64_t)&v47)) {
    return;
  }
  BOOL v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v5)
  {
    long long v6 = v5;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v41 = 136315138;
      int v42 = "setExtendedMACAddressInDataSetIfAvailableinDB";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s, Successfully Set xMAC Addres to OT", (uint8_t *)&v41, 0xCu);
      if (otPlatIsSettingsFileExists(*((void *)this + 28), v14, v15, v16, v17, v18, v19, v20)) {
        goto LABEL_32;
      }
      goto LABEL_17;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    if (otPlatIsSettingsFileExists(*((void *)this + 28), v34, v35, v36, v37, v38, v39, v40)) {
      goto LABEL_32;
    }
    goto LABEL_17;
  }
  if (otPlatIsSettingsFileExists(*((void *)this + 28), v7, v8, v9, v10, v11, v12, v13))
  {
LABEL_32:
    uint64_t v32 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v32)
    {
      __n128 v33 = v32;
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          LOWORD(v41) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "ReInit Settings File", (uint8_t *)&v41, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    ot::Instance::InitSettings(*((ot::Instance **)this + 28));
    return;
  }
LABEL_17:
  int v21 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v21)
  {
    unint64_t v22 = v21;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::setExtendedMACAddressInDataSetIfAvailableinDB(v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  otLinkRegenerateExAddr(*((void *)this + 28));
  saveLLIntValueNULLForBundleID(cStr, "com.apple.threadradiodeMACDB");
}

void HostInterpreter::saveExtendedMACAddressIfNotAvailableinDB(HostInterpreter *this)
{
  if (HostInterpreter::getNameAndXPANIDFromDataset(this, cStr))
  {
    uint64_t LLIntValueForBundleID = getLLIntValueForBundleID(cStr, "com.apple.threadradiodeMACDB");
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      char v4 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315650;
        uint64_t v16 = "saveExtendedMACAddressIfNotAvailableinDB";
        __int16 v17 = 1024;
        LODWORD(v18[0]) = LLIntValueForBundleID != 0;
        WORD2(v18[0]) = 2048;
        *(void *)((char *)v18 + 6) = LLIntValueForBundleID;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s, Before reading from OT, xMAC present in DB: %d, xMAC value in DB: 0x%llx", (uint8_t *)&v15, 0x1Cu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    ExtendedAddress = (unsigned __int8 *)otLinkGetExtendedAddress(*((void *)this + 28));
    unint64_t v6 = ExtendedAddress[7] | ((((unint64_t)ExtendedAddress[5] << 8) | ((((unint64_t)((ExtendedAddress[1] << 8) | (*ExtendedAddress << 16) | ExtendedAddress[2]) << 16) | ((unint64_t)ExtendedAddress[3] << 8) | ExtendedAddress[4]) << 16) | ExtendedAddress[6]) << 8);
    saveLLIntValueForBundleID("last_used_emac_address", v6, "com.apple.threadradiodeMACDB");
    if (!LLIntValueForBundleID)
    {
      saveLLIntValueForBundleID(cStr, v6, "com.apple.threadradiodeMACDB");
      uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v10)
      {
        uint64_t v11 = v10;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          int v15 = 136315394;
          uint64_t v16 = "saveExtendedMACAddressIfNotAvailableinDB";
          __int16 v17 = 2048;
          v18[0] = v6;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s, Read xMAC from OT and wrote it to DB = 0x%llx to OT", (uint8_t *)&v15, 0x16u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
    }
    uint64_t v7 = getLLIntValueForBundleID(cStr, "com.apple.threadradiodeMACDB");
    uint64_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      uint64_t v9 = v8;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315394;
        uint64_t v16 = "saveExtendedMACAddressIfNotAvailableinDB";
        __int16 v17 = 2048;
        v18[0] = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s, Checking Value in DB, xMAC value in DB: 0x%llx", (uint8_t *)&v15, 0x16u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    uint64_t v13 = v12;
    if (v7 && v7 == v6)
    {
      if (v12)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v15 = 136315138;
          uint64_t v16 = "saveExtendedMACAddressIfNotAvailableinDB";
          uint64_t v14 = "%s, Values in DB and OT match";
LABEL_29:
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
    }
    else if (v12)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315138;
        uint64_t v16 = "saveExtendedMACAddressIfNotAvailableinDB";
        uint64_t v14 = "%s, Values in DB and OT DO NOT match";
        goto LABEL_29;
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
}

BOOL HostInterpreter::isThreadAlwaysOnFeatureEnabled(HostInterpreter *this)
{
  return RcpHostContext::isThreadAlwaysOnFeatureEnabled((RcpHostContext *)RcpHostContext::sRcpHostContext);
}

BOOL HostInterpreter::getNameAndXPANIDFromDataset(HostInterpreter *this, char *a2)
{
  int Active = otDatasetGetActive(*((void *)this + 28), (uint64_t)v21);
  if (!Active)
  {
    BOOL v5 = &a2[snprintf(a2, 0x31uLL, "%s", v22)];
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v7 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        uint64_t v18 = "getNameAndXPANIDFromDataset";
        __int16 v19 = 2080;
        uint64_t v20 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s, Network Name: %s", buf, 0x16u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v8 = &v5[snprintf(v5, 0x11uLL, "%.2x", v22[24])];
    uint64_t v9 = &v8[snprintf(v8, 0xFuLL, "%.2x", v22[23])];
    uint64_t v10 = &v9[snprintf(v9, 0xDuLL, "%.2x", v22[22])];
    uint64_t v11 = &v10[snprintf(v10, 0xBuLL, "%.2x", v22[21])];
    uint64_t v12 = &v11[snprintf(v11, 9uLL, "%.2x", v22[20])];
    uint64_t v13 = &v12[snprintf(v12, 7uLL, "%.2x", v22[19])];
    int v14 = snprintf(v13, 5uLL, "%.2x", v22[18]);
    snprintf(&v13[v14], 3uLL, "%.2x", v22[17]);
    a2[48] = 0;
    int v15 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v15)
    {
      uint64_t v16 = v15;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        uint64_t v18 = "getNameAndXPANIDFromDataset";
        __int16 v19 = 2080;
        uint64_t v20 = a2;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s, Network Name & XPANID: %s", buf, 0x16u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  return Active == 0;
}

BOOL HostInterpreter::isThreadSessionJoinEnabled(HostInterpreter *this)
{
  *(_DWORD *)char v4 = 0;
  getStringValueLocal("threadSessionJoin", v4, 4);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    CFDataRef v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::runtime_error buf = 136315138;
      unint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Thread Join Session Status = %s", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return (*(unsigned __int16 *)v4 ^ 0x4E4F | v4[2]) == 0;
}

void HostInterpreter::persistThreadSessionJoin(HostInterpreter *this, int a2)
{
  if (a2) {
    uint64_t v3 = "ON";
  }
  else {
    uint64_t v3 = "OFF";
  }
  saveStringValue("threadSessionJoin", v3);
  if (a2)
  {
    wcm_notify(1);
    HostInterpreter::clearHealthInfoMetrics(v4);
  }
}

void HostInterpreter::HandleDiagnosticGetResponseFromLeader(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void HostInterpreter::HandleDiagnosticGetResponseFromLeader(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int16 v16 = 0;
  if (a2) {
    return;
  }
  otMessageGetLength(a3);
  otMessageGetOffset(a3);
  unsigned __int16 v5 = 0;
  if (otThreadGetNextDiagnosticTlv(a3, &v16, (uint64_t)v20)) {
    goto LABEL_22;
  }
  char v6 = 0;
  do
  {
    switch(v20[0])
    {
      case 0x64:
        char v6 = 1;
        continue;
      case 1:
        unsigned __int16 v5 = v21;
        continue;
      case 0:
        unint64_t v7 = v21;
        int v8 = BYTE1(v21);
        *(void *)(a1 + 154) = v21;
        snprintf(__str, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", v7, v8, BYTE2(v7), BYTE3(v7), BYTE4(v7), BYTE5(v7), BYTE6(v7), HIBYTE(v7));
        continue;
    }
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!logging_obg)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        continue;
      }
      int buf = 136315394;
      *(void *)buf_4 = "com.apple.wpantund.ncp";
      *(_WORD *)&buf_4[8] = 2080;
      *(void *)&buf_4[10] = "default";
      uint64_t v10 = &_os_log_default;
      uint64_t v11 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
      uint32_t v12 = 22;
      goto LABEL_19;
    }
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      int buf = 67109120;
      *(_DWORD *)buf_4 = v20[0];
      uint64_t v10 = logging_obg;
      uint64_t v11 = "Mle::HandleDiagnosticGetResponseFromLeader Unhandled TLV type=%d";
      uint32_t v12 = 8;
LABEL_19:
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, v12);
    }
  }
  while (!otThreadGetNextDiagnosticTlv(a3, &v16, (uint64_t)v20));
  if (v6) {
    operator new();
  }
LABEL_22:
  BOOL v13 = (otThreadGetLeaderRouterId(*(void *)(a1 + 224)) & 0x3F) << 10 == v5;
  int v14 = log_get_logging_obg("com.apple.threadradiod", "default");
  int v15 = v14;
  if (v13)
  {
    if (v14)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int buf = 67109378;
        *(_DWORD *)buf_4 = v5;
        *(_WORD *)&buf_4[4] = 2080;
        *(void *)&buf_4[6] = __str;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "HostInterpreter::HandleDiagnosticGetResponseFromLeader: Received DIAG.RSP from leader: leaderRloc16:0x%x, leaderExtAddr:%s", (uint8_t *)&buf, 0x12u);
        *(_WORD *)(a1 + 152) = v5;
        return;
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    *(_WORD *)(a1 + 152) = v5;
  }
  else if (v14)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::HandleDiagnosticGetResponseFromLeader((uint64_t *)(a1 + 224), v5, v15);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void sub_10013CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::HandleDiagGetSingleHopPeerResponseIPAddr(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void HostInterpreter::HandleDiagGetSingleHopPeerResponseIPAddr(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v44 = 0;
  memset(v55, 0, sizeof(v55));
  *(_OWORD *)std::string __str = 0u;
  memset(v54, 0, sizeof(v54));
  *(_OWORD *)__s2 = 0u;
  memset(v52, 0, sizeof(v52));
  memset(v43, 0, 7);
  uint64_t v40 = &v40;
  int v41 = &v40;
  uint64_t v42 = 0;
  otThreadGetMeshLocalPrefix(*(void *)(a1 + 224));
  uint64_t v9 = v8;
  snprintf(__str, 0x2DuLL, "%x:%x:%x:%x", __rev16(*v8), __rev16(v8[1]), __rev16(v8[2]), __rev16(v8[3]));
  snprintf(__s2, 0x2DuLL, "%x:%x:%x:%x:0:", __rev16(*v9), __rev16(v9[1]), __rev16(v9[2]), __rev16(v9[3]));
  if (a4)
  {
    otIp6AddressToString(a4 + 16, (char *)v55, 48);
    if (a3)
    {
      if (a2)
      {
        logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = otThreadErrorToString(a2);
            buf[0] = 136315650;
            *(void *)&buf[1] = "HandleDiagGetSingleHopPeerResponseIPAddr";
            __int16 v47 = 2080;
            *(void *)__int16 v48 = v11;
            *(_WORD *)&uint8_t v48[8] = 2080;
            *(void *)&v48[10] = v55;
            _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: TDM DIAG_GET.rsp/ans error:%s peerAddr:%s", (uint8_t *)buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
LABEL_70:
        HostInterpreter::clearRcpSrpSignalMeshLocalAddressTimer((dispatch_source_t *)a1);
        goto LABEL_71;
      }
      unint64_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          unint64_t v22 = otThreadErrorToString(0);
          buf[0] = 136315650;
          *(void *)&buf[1] = "HandleDiagGetSingleHopPeerResponseIPAddr";
          __int16 v47 = 2080;
          *(void *)__int16 v48 = v55;
          *(_WORD *)&uint8_t v48[8] = 2080;
          *(void *)&v48[10] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s: TDM DIAG_GET.rsp/ans from %s error:%s", (uint8_t *)buf, 0x20u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      char v23 = 0;
      do
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
LABEL_29:
              if (otThreadGetNextDiagnosticTlv(a3, &v44, (uint64_t)v49))
              {
                if (v23) {
                  operator new();
                }
                goto LABEL_70;
              }
              if (v49[0] == 8) {
                break;
              }
              if (v49[0] == 1) {
                snprintf(v43, 7uLL, "%04x", v50);
              }
            }
            uint64_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (!v24) {
              break;
            }
            if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_39;
            }
            buf[0] = 136315650;
            *(void *)&buf[1] = "HandleDiagGetSingleHopPeerResponseIPAddr";
            __int16 v47 = 1024;
            *(_DWORD *)__int16 v48 = v50;
            *(_WORD *)&v48[4] = 2080;
            *(void *)&v48[6] = v43;
            _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s: IP6 Address List: size_t count = %d, mAddr16 = %s", (uint8_t *)buf, 0x1Cu);
            if ((_BYTE)v50) {
              goto LABEL_40;
            }
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            break;
          }
LABEL_39:
          if ((_BYTE)v50) {
            goto LABEL_40;
          }
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "com.apple.wpantund.ncp";
        __int16 v47 = 2080;
        *(void *)__int16 v48 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", (uint8_t *)buf, 0x16u);
      }
      while (!(_BYTE)v50);
LABEL_40:
      unint64_t v25 = 0;
      uint64_t v26 = (char *)&v50 + 1;
      while (1)
      {
        uint64_t v27 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v27)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "- ", (uint8_t *)buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "com.apple.wpantund.ncp";
          __int16 v47 = 2080;
          *(void *)__int16 v48 = "default";
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", (uint8_t *)buf, 0x16u);
        }
        otIp6AddressToString((uint64_t)v26, (char *)buf, 40);
        if (!strstr((char *)buf, __str) || strstr((char *)buf, __s2) || strstr((char *)buf, v43)) {
          goto LABEL_62;
        }
        size_t v28 = strlen((const char *)buf);
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v29 = v28;
        if (v28 >= 0x17)
        {
          uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v31 = v28 | 7;
          }
          uint64_t v32 = v31 + 1;
          uint64_t v30 = operator new(v31 + 1);
          *(void *)&__dst[8] = v29;
          *(void *)&char __dst[16] = v32 | 0x8000000000000000;
          *(void *)long long __dst = v30;
        }
        else
        {
          __dst[23] = v28;
          uint64_t v30 = __dst;
          if (!v28) {
            goto LABEL_61;
          }
        }
        memcpy(v30, buf, v29);
LABEL_61:
        v30[v29] = 0;
        __n128 v33 = operator new(0x28uLL);
        v33[1] = *(_OWORD *)__dst;
        *((void *)v33 + 4) = *(void *)&__dst[16];
        uint64_t v34 = v40;
        *(void *)__n128 v33 = v40;
        *((void *)v33 + 1) = &v40;
        *((void *)v34 + 1) = v33;
        uint64_t v40 = v33;
        ++v42;
        char v23 = 1;
LABEL_62:
        uint64_t v35 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v35)
        {
          if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long __dst = 67109378;
            *(_DWORD *)&__dst[4] = v25 + 1;
            *(_WORD *)&__dst[8] = 2080;
            *(void *)&__dst[10] = buf;
            _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%d] %s", __dst, 0x12u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long __dst = 136315394;
          *(void *)&__dst[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&__dst[12] = 2080;
          *(void *)&__dst[14] = "default";
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __dst, 0x16u);
        }
        ++v25;
        v26 += 16;
        if (v25 >= v50) {
          goto LABEL_29;
        }
      }
    }
    uint64_t v20 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v20)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::HandleDiagGetSingleHopPeerResponseIPAddr();
      }
      goto LABEL_71;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_71;
    }
LABEL_21:
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_71;
  }
  uint32_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v12)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_71;
    }
    goto LABEL_21;
  }
  if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    HostInterpreter::HandleDiagGetSingleHopPeerResponseIPAddr(v12, v13, v14, v15, v16, v17, v18, v19);
  }
LABEL_71:
  if (v42)
  {
    uint64_t v36 = v40;
    uint64_t v37 = v41;
    uint64_t v38 = *v41;
    *(void *)(v38 + 8) = *((void *)v40 + 1);
    **((void **)v36 + 1) = v38;
    uint64_t v42 = 0;
    if (v37 != &v40)
    {
      do
      {
        uint64_t v39 = (void *)v37[1];
        if (*((char *)v37 + 39) < 0) {
          operator delete((void *)v37[2]);
        }
        operator delete(v37);
        uint64_t v37 = v39;
      }
      while (v39 != &v40);
    }
  }
}

void sub_10013D840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  std::list<std::string>::~list(&a24);
  _Unwind_Resume(a1);
}

void HostInterpreter::HandleDiagnosticGetResponse(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v25 = 0;
  if (a3)
  {
    otIp6AddressToString(a3 + 16, v30, 48);
    if (a2)
    {
      std::string __p = 0;
      long long __dst = 0;
      uint64_t v24 = 0;
      __src[0] = 0;
      __src[1] = 0;
      int Offset = otMessageGetOffset(a2);
      __int16 Length = otMessageGetLength(a2);
      if (!a1)
      {
        __int16 v17 = Length;
        logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = v30;
            __int16 v27 = 2080;
            size_t v28 = otThreadErrorToString(0);
            _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM DIAG_GET.rsp/ans from %s error:%s", (uint8_t *)buf, 0x16u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        char v19 = 0;
        unsigned __int16 v20 = v17 - Offset;
        while (!otThreadGetNextDiagnosticTlv(a2, &v25, (uint64_t)v31))
        {
          if (v31[0] == 100) {
            char v19 = 1;
          }
        }
        if (v19) {
          operator new();
        }
        if (v17 != (_WORD)Offset)
        {
          do
          {
            if ((v20 & 0xFFF0) != 0) {
              int64_t v21 = 16;
            }
            else {
              int64_t v21 = v20;
            }
            otMessageRead(a2, Offset, (char *)__src, v21);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)&__p, (char *)__dst, (char *)__src, (char *)__src + v21, v21);
            Offset += v21;
            v20 -= v21;
          }
          while (v20);
        }
        operator new();
      }
      unint64_t v7 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v7)
      {
        if (syslog_is_the_mask_enabled(6))
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = otThreadErrorToString(a1);
            __int16 v27 = 2080;
            size_t v28 = v30;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TDM DIAG_GET.rsp/ans error:%s peerAddr:%s", (uint8_t *)buf, 0x16u);
          }
        }
        return;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return;
      }
LABEL_23:
      -[PowerEventHandler_Rcp init:]();
      return;
    }
    uint64_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v10)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_23;
    }
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::HandleDiagnosticGetResponse((uint64_t)v30, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    int v8 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v8)
    {
      uint64_t v9 = v8;
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        HostInterpreter::HandleDiagnosticGetResponse();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
}

void sub_10013DDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::detachIfWedConnectionInProgress(HostInterpreter *this)
{
  if (!otThreadIsEnhCslPeerLinking(*((void *)this + 28)) && !otThreadIsEnhCslPeerLinked(*((void *)this + 28)))
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v9 = logging_obg;
      uint64_t result = syslog_is_the_mask_enabled(6);
      if (!result) {
        return result;
      }
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v10 = 136315138;
      uint64_t v11 = "detachIfWedConnectionInProgress";
      char v6 = "Wed Detach not required, as Wed is not Connected in %s";
      unint64_t v7 = v9;
      goto LABEL_16;
    }
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
LABEL_23:
    -[PowerEventHandler_Rcp init:]();
    return 0;
  }
  uint64_t CslPeripheralAddr = otThreadGetCslPeripheralAddr(*((void *)this + 28));
  uint64_t v3 = log_get_logging_obg("com.apple.threadradiod", "default");
  char v4 = v3;
  if (!CslPeripheralAddr)
  {
    if (v3)
    {
      uint64_t result = syslog_is_the_mask_enabled(6);
      if (!result) {
        return result;
      }
      uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v10 = 136315138;
      uint64_t v11 = "detachIfWedConnectionInProgress";
      char v6 = "Wed Emac is empty %s, there is no valid Wed connection ";
      unint64_t v7 = v4;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v10, 0xCu);
      return 0;
    }
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_23;
  }
  if (v3)
  {
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        uint64_t v11 = "detachIfWedConnectionInProgress";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Wed Detach in progress %s, peer address set", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return otThreadDetachEnhCslPeer(*((void *)this + 28));
}

void HostInterpreter::remove_all_address_prefix_route_entries(HostInterpreter *this, int a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3 != *((void *)this + 2))
  {
    while (1)
    {
      int v68 = *(_DWORD *)(v3 + 12);
      memset(__p, 0, sizeof(__p));
      unsigned __int16 v5 = *(unsigned char **)(v3 + 16);
      char v4 = *(unsigned char **)(v3 + 24);
      size_t v6 = v4 - v5;
      if (v4 == v5)
      {
        int v8 = 0;
        unint64_t v7 = 0;
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v7 = (char *)operator new(v4 - v5);
        int v8 = &v7[v6];
        __p[0] = v7;
        __p[2] = &v7[v6];
        memcpy(v7, v5, v6);
        __p[1] = &v7[v6];
      }
      uint64_t v9 = v8 == v7 ? 0 : v7;
      memcpy(v70, v9, v8 - v7);
      unsigned __int8 v69 = (_BYTE)v8 - (_BYTE)v7;
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!logging_obg) {
        break;
      }
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
      {
        int v11 = *(_DWORD *)(v3 + 8);
        *(_DWORD *)int buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v69;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v70[0];
        *(_WORD *)&unsigned char buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v68;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = v11;
        uint64_t v12 = logging_obg;
        uint64_t v13 = "HostInterpreter::remove_all_address_prefix_route_entries: mServiceDataLength [%d] data[%d] entpNo[%d] origin[%d]";
        uint32_t v14 = 26;
LABEL_32:
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v13, buf, v14);
      }
LABEL_16:
      int v15 = otServerRemoveService(*((void *)this + 28), v68, (uint64_t)v70, v69);
      if (v15)
      {
        uint64_t v16 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v16)
        {
          if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v15;
            __int16 v17 = v16;
            uint64_t v18 = "HostInterpreter::remove_all_address_prefix_route_entries: otServerRemoveService error[%d]";
            uint32_t v19 = 8;
            goto LABEL_34;
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_33;
        }
      }
      else
      {
        unsigned __int16 v20 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v20)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "HostInterpreter::remove_all_address_prefix_route_entries: otServerRemoveService Success", buf, 2u);
            if (!v7) {
              goto LABEL_3;
            }
            goto LABEL_30;
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
LABEL_33:
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = "default";
          __int16 v17 = &_os_log_default;
          uint64_t v18 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
          uint32_t v19 = 22;
LABEL_34:
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v18, buf, v19);
          if (!v7) {
            goto LABEL_3;
          }
LABEL_30:
          operator delete(v7);
          goto LABEL_3;
        }
      }
      if (v7) {
        goto LABEL_30;
      }
LABEL_3:
      v3 += 80;
      if (v3 == *((void *)this + 2)) {
        goto LABEL_36;
      }
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = "default";
    uint64_t v12 = &_os_log_default;
    uint64_t v13 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
    uint32_t v14 = 22;
    goto LABEL_32;
  }
LABEL_36:
  int64_t v21 = (void *)*((void *)this + 7);
  unint64_t v22 = (char *)this + 64;
  if (v21 != (void *)((char *)this + 64))
  {
    do
    {
      if (*((_DWORD *)v21 + 12) == 2) {
        goto LABEL_40;
      }
      memset(buf, 0, 24);
      IPv6Prefix::to_string((const in6_addr *)((char *)v21 + 28), __p);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v26 = __p;
      }
      else {
        uint64_t v26 = (void **)__p[0];
      }
      int v27 = ot::Utils::CmdLineParser::ParseAsIp6Prefix((ot *)v26, (uint64_t)buf);
      int v28 = v27;
      if (SHIBYTE(__p[2]) < 0)
      {
        operator delete(__p[0]);
        if (v28)
        {
LABEL_51:
          size_t v29 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v29)
          {
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v28;
              uint64_t v30 = v29;
              uint64_t v31 = "HostInterpreter::remove_all_address_prefix_route_entries: ParseAsIp6Prefix error[%d]";
              uint32_t v32 = 8;
LABEL_71:
              _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)__p, v32);
              goto LABEL_40;
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_70;
          }
          goto LABEL_40;
        }
      }
      else if (v27)
      {
        goto LABEL_51;
      }
      int v33 = otBorderRouterRemoveOnMeshPrefix(*((void *)this + 28), (uint64_t)buf);
      uint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
      uint64_t v35 = v34;
      if (v33)
      {
        if (v34)
        {
          if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v33;
            uint64_t v30 = v35;
            uint64_t v31 = "HostInterpreter::remove_all_address_prefix_route_entries: otBorderRouterRemoveOnMeshPrefix error[%d]";
            uint32_t v32 = 8;
            goto LABEL_71;
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_70;
        }
      }
      else
      {
        if (v34)
        {
          if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            HostInterpreter::remove_all_address_prefix_route_entries(&v60, v61, v35);
          }
          goto LABEL_40;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
LABEL_70:
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "com.apple.wpantund.ncp";
          WORD2(__p[1]) = 2080;
          *(void **)((char *)&__p[1] + 6) = "default";
          uint64_t v30 = &_os_log_default;
          uint64_t v31 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
          uint32_t v32 = 22;
          goto LABEL_71;
        }
      }
LABEL_40:
      char v23 = (char *)v21[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          char v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (char *)v21[2];
          BOOL v25 = *(void *)v24 == (void)v21;
          int64_t v21 = v24;
        }
        while (!v25);
      }
      int64_t v21 = v24;
    }
    while (v24 != v22);
  }
  uint64_t v36 = (void *)*((void *)this + 10);
  uint64_t v37 = (char *)this + 88;
  if (v36 != (void *)((char *)this + 88))
  {
    do
    {
      if (*((_DWORD *)v36 + 12) == 2) {
        goto LABEL_76;
      }
      memset(__p, 0, sizeof(__p));
      IPv6Prefix::to_string((const in6_addr *)((char *)v36 + 28), v62);
      if (v65 >= 0) {
        uint64_t v40 = (ot *)v62;
      }
      else {
        uint64_t v40 = *(ot **)v62;
      }
      int v41 = ot::Utils::CmdLineParser::ParseAsIp6Prefix(v40, (uint64_t)__p);
      int v42 = v41;
      if (v65 < 0)
      {
        operator delete(*(void **)v62);
        if (v42)
        {
LABEL_87:
          __int16 v43 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v43)
          {
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v62 = 67109120;
              *(_DWORD *)&std::bad_cast v62[4] = v42;
              unsigned __int16 v44 = v43;
              __int16 v45 = "HostInterpreter::remove_all_address_prefix_route_entries: ParseAsIp6Prefix(offmeshroute) error[%d]";
              uint32_t v46 = 8;
LABEL_107:
              _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, v45, v62, v46);
              goto LABEL_76;
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_106;
          }
          goto LABEL_76;
        }
      }
      else if (v41)
      {
        goto LABEL_87;
      }
      int v47 = otBorderRouterRemoveRoute(*((void *)this + 28), (uint64_t)__p);
      __int16 v48 = log_get_logging_obg("com.apple.threadradiod", "default");
      unsigned __int8 v49 = v48;
      if (v47)
      {
        if (v48)
        {
          if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v62 = 67109120;
            *(_DWORD *)&std::bad_cast v62[4] = v47;
            unsigned __int16 v44 = v49;
            __int16 v45 = "HostInterpreter::remove_all_address_prefix_route_entries: otBorderRouterRemoveRoute error[%d]";
            uint32_t v46 = 8;
            goto LABEL_107;
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_106;
        }
      }
      else
      {
        if (v48)
        {
          if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            HostInterpreter::remove_all_address_prefix_route_entries(&v58, v59, v49);
          }
          goto LABEL_76;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
LABEL_106:
          *(_DWORD *)uint64_t v62 = 136315394;
          *(void *)&std::bad_cast v62[4] = "com.apple.wpantund.ncp";
          __int16 v63 = 2080;
          uint64_t v64 = "default";
          unsigned __int16 v44 = &_os_log_default;
          __int16 v45 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
          uint32_t v46 = 22;
          goto LABEL_107;
        }
      }
LABEL_76:
      uint64_t v38 = (char *)v36[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          uint64_t v38 = *(char **)v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (char *)v36[2];
          BOOL v25 = *(void *)v39 == (void)v36;
          uint64_t v36 = v39;
        }
        while (!v25);
      }
      uint64_t v36 = v39;
    }
    while (v39 != v37);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = v22;
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  unsigned __int16 v50 = (void *)*((void *)this + 14);
  *((void *)this + 10) = v37;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)this + 104, v50);
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v52 = (void (***)(void))*((void *)this + 1);
  uint64_t v51 = (void (***)(void))*((void *)this + 2);
  if (v51 != v52)
  {
    unint64_t v53 = v51 - 10;
    uint64_t v54 = v51 - 10;
    uint64_t v55 = v51 - 10;
    do
    {
      uint64_t v56 = *v55;
      v55 -= 10;
      (*v56)(v54);
      v53 -= 10;
      BOOL v25 = v54 == v52;
      uint64_t v54 = v55;
    }
    while (!v25);
  }
  *((void *)this + 2) = v52;
  if (a2)
  {
    HostInterpreter::signal_ipv6route_list_change(this);
    HostInterpreter::signal_service_list_change(this);
  }
}

void sub_10013EAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

nl::Data *nl::Data::Data(nl::Data *this, const unsigned __int8 *a2, size_t __sz)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v6 = (char *)operator new(__sz);
    *(void *)this = v6;
    *((void *)this + 1) = v6;
    unint64_t v7 = &v6[__sz];
    *((void *)this + 2) = &v6[__sz];
    memcpy(v6, a2, __sz);
    *((void *)this + 1) = v7;
  }
  return this;
}

void sub_10013EBF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::signal_ipv6route_list_change(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    CFDataRef v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *((void *)this + 15);
      uint64_t v4 = *((void *)this + 18);
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "signal_router_list_change Router:Size[%lu] Backup[%lu]", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v5 = *((void *)this + 15);
  if (v5 != *((void *)this + 18)) {
    goto LABEL_30;
  }
  if (v5)
  {
    size_t v6 = (HostInterpreter *)*((void *)this + 13);
    if (v6 != (HostInterpreter *)((char *)this + 112))
    {
      if (*((HostInterpreter **)this + 16) == (HostInterpreter *)((char *)this + 136)) {
        goto LABEL_30;
      }
      do
      {
        unint64_t v7 = (HostInterpreter *)*((void *)this + 16);
        while (1)
        {
          BOOL v8 = *(void *)((char *)v7 + 28) == *(void *)((char *)v6 + 28)
            && *(void *)((char *)v7 + 36) == *(void *)((char *)v6 + 36);
          if (v8) {
            break;
          }
          uint64_t v9 = (HostInterpreter *)*((void *)v7 + 1);
          if (v9)
          {
            do
            {
              int v10 = v9;
              uint64_t v9 = *(HostInterpreter **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              int v10 = (HostInterpreter *)*((void *)v7 + 2);
              BOOL v8 = *(void *)v10 == (void)v7;
              unint64_t v7 = v10;
            }
            while (!v8);
          }
          unint64_t v7 = v10;
          if (v10 == (HostInterpreter *)((char *)this + 136)) {
            goto LABEL_30;
          }
        }
        int v11 = (HostInterpreter *)*((void *)v6 + 1);
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            int v11 = *(HostInterpreter **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (HostInterpreter *)*((void *)v6 + 2);
            BOOL v8 = *(void *)v12 == (void)v6;
            size_t v6 = v12;
          }
          while (!v8);
        }
        size_t v6 = v12;
      }
      while (v12 != (HostInterpreter *)((char *)this + 112));
    }
  }
  uint64_t result = RcpHostContext::canReportNetworkDataIPV6RouteInfo((RcpHostContext *)RcpHostContext::sRcpHostContext);
  if (result)
  {
LABEL_30:
    uint32_t v14 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v14)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = "signal_ipv6route_list_change";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s SRP reporting", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    RcpHostContext::resetReportNetworkDataIPV6RouteInfo(RcpHostContext::sRcpHostContext);
    std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__tree_node<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,void *> *,long>>((uint64_t **)this + 16, *((void **)this + 13), (void *)this + 14);
    *(void *)int buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v15 = *((void *)this + 13);
    if ((HostInterpreter *)v15 != (HostInterpreter *)((char *)this + 112))
    {
      v17[1] = 0;
      uint64_t v18 = 0;
      v17[0] = (uint64_t *)&v17[1];
      IPv6Prefix::to_string((const in6_addr *)(v15 + 28), __p);
      char v21 = 7;
      strcpy((char *)v20, "Address");
      *(void *)uint32_t v19 = v20;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17, (const void **)v20, (uint64_t)&std::piecewise_construct, (_OWORD **)v19);
      operator new();
    }
    HIBYTE(v18) = 11;
    strcpy((char *)v17, "IPv6:Routes");
    boost::any::any<std::list<std::map<std::string,boost::any>> &>();
  }
  return result;
}

void sub_10013F684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a32) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a20 < 0)
  {
    operator delete(__p);
    std::list<std::map<std::string,boost::any>>::~list((uint64_t *)(v37 - 128));
    _Unwind_Resume(a1);
  }
  std::list<std::map<std::string,boost::any>>::~list((uint64_t *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::signal_service_list_change(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    CFDataRef v2 = logging_obg;
    uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(6);
    if (is_the_mask_enabled)
    {
      uint64_t is_the_mask_enabled = os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
      if (is_the_mask_enabled)
      {
        unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4);
        unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4);
        *(_DWORD *)int buf = 134218240;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v5;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "signal_service_list_change service:Size[%lu] backup[%lu]", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (is_the_mask_enabled) {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  size_t v6 = (uint64_t *)((char *)this + 32);
  uint64_t v8 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (v7 - v8 != *((void *)this + 5) - *((void *)this + 4)) {
    goto LABEL_12;
  }
  if (v7 != v8)
  {
    while (1)
    {
      uint64_t is_the_mask_enabled = HostInterpreter::find_service_entry(is_the_mask_enabled, *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12), (const void **)(v8 + 16), (const void **)(v8 + 48), *(unsigned __int16 *)(v8 + 72), v6);
      if ((is_the_mask_enabled & 1) == 0) {
        break;
      }
      v8 += 80;
      if (v8 == *((void *)this + 2)) {
        goto LABEL_11;
      }
    }
LABEL_12:
    int v10 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v10)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = "signal_service_list_change";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s SRP reporting", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    RcpHostContext::resetReportNetworkDataServiceInfo(RcpHostContext::sRcpHostContext);
    std::vector<ServiceEntry>::__assign_with_size[abi:ne180100]<ServiceEntry*,ServiceEntry*>((void **)v6, *((char **)this + 1), *((char **)this + 2), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4));
    *(void *)int buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    if (*((void *)this + 1) != *((void *)this + 2))
    {
      v12[1] = 0;
      uint64_t v13 = 0;
      v12[0] = (uint64_t *)&v12[1];
      char v16 = 16;
      strcpy(__p, "EnterpriseNumber");
      *(void *)uint32_t v14 = __p;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14);
      operator new();
    }
    HIBYTE(v13) = 15;
    strcpy((char *)v12, "Thread:Services");
    boost::any::any<std::list<std::map<std::string,boost::any>> &>();
  }
LABEL_11:
  uint64_t result = RcpHostContext::canReportNetworkDataServiceInfo((RcpHostContext *)RcpHostContext::sRcpHostContext);
  if (result) {
    goto LABEL_12;
  }
  return result;
}

void sub_1001404B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a33) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a23 < 0)
  {
    operator delete(__p);
    std::list<std::map<std::string,boost::any>>::~list((uint64_t *)(v38 - 128));
    _Unwind_Resume(a1);
  }
  std::list<std::map<std::string,boost::any>>::~list((uint64_t *)(v38 - 128));
  _Unwind_Resume(a1);
}

void HostInterpreter::HandleEnergyScanResult(unsigned __int8 *a1)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v3 = logging_obg;
  if (a1)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          int v4 = *a1;
          int v5 = (char)a1[1];
          LODWORD(buf.__vftable) = 67109376;
          HIDWORD(buf.__vftable) = v4;
          LOWORD(buf.__imp_.__imp_) = 1024;
          *(_DWORD *)((char *)&buf.__imp_.__imp_ + 2) = v5;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Energy scan results: Channel: %2d dBm: %4d ", (uint8_t *)&buf, 0xEu);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    __int16 v7 = *(_WORD *)a1;
    boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(RcpHostContext::sRcpHostContext + 232), (uint64_t)&v7);
  }
  else
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__vftable) = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Energy scan done, return", (uint8_t *)&buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    if (mEnergyScanCmdApiData)
    {
      uint64_t v6 = *(void *)(mEnergyScanCmdApiData + 24);
      if (!v6)
      {
        std::runtime_error::runtime_error(&buf, "call to empty boost::function");
        buf.__vftable = (std::runtime_error_vtbl *)off_100495450;
        boost::throw_exception<boost::bad_function_call>(&buf);
      }
      (*(void (**)(uint64_t, void))((v6 & 0xFFFFFFFFFFFFFFFELL) + 8))(mEnergyScanCmdApiData + 32, 0);
      TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
      mEnergyScanCmdApiData = 0;
    }
  }
}

void sub_100140798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void HostInterpreter::HandleActiveScanResultFromBeacon(uint64_t a1)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v3 = logging_obg;
  if (a1)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::runtime_error buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Net Scan results:", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    int v4 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v4)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = (*(unsigned __int8 *)(a1 + 57) >> 6) & 1;
        int v6 = *(unsigned __int16 *)(a1 + 50);
        int v7 = *(unsigned __int8 *)(a1 + 54);
        int v8 = *(char *)(a1 + 55);
        int v9 = *(unsigned __int8 *)(a1 + 56);
        *(_DWORD *)std::runtime_error buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v5;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v6;
        *(_WORD *)&unsigned char buf[14] = 1024;
        LODWORD(v24) = v7;
        WORD2(v24) = 1024;
        *(_DWORD *)((char *)&v24 + 6) = v8;
        WORD5(v24) = 1024;
        HIDWORD(v24) = v9;
        __int16 v25 = 2080;
        v26[0] = a1 + 8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Joinable: %d PAN: 0x%04x Channel: %2d dBm: %3d LQI: %3d Network Name: %-16s", buf, 0x2Au);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v10 = *(void *)(a1 + 25);
    size_t v11 = strlen((const char *)(a1 + 8));
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v18 = v11 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (long long *)operator new(v18 + 1);
      *((void *)&__dst + 1) = v12;
      unint64_t v22 = v19 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v22) = v11;
      p_dst = &__dst;
      if (!v11)
      {
        LOBYTE(__dst) = 0;
        __int16 v14 = *(_WORD *)(a1 + 50);
        char v15 = *(unsigned char *)(a1 + 54);
        char v16 = *(unsigned char *)(a1 + 57);
        int v17 = SHIBYTE(v22);
        if ((SHIBYTE(v22) & 0x80000000) == 0)
        {
LABEL_22:
          *(_OWORD *)std::runtime_error buf = __dst;
          *(void *)&long long v24 = v22;
LABEL_28:
          *((void *)&v24 + 1) = v10;
          __int16 v25 = v14;
          LOBYTE(v26[0]) = v15;
          BYTE1(v26[0]) = (v16 & 0x40) != 0;
          BYTE2(v26[0]) = 0x80;
          BYTE4(v26[0]) = 0;
          *(void *)((char *)v26 + 5) = 0;
          char v27 = 0;
          int v28 = 0;
          if (v17 < 0) {
            operator delete((void *)__dst);
          }
          WORD1(v26[0]) = *(_WORD *)(a1 + 55);
          *(void *)((char *)v26 + 5) = *(void *)a1;
          boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(RcpHostContext::sRcpHostContext + 208), (uint64_t)buf);
          if (SBYTE7(v24) < 0) {
            operator delete(*(void **)buf);
          }
          return;
        }
LABEL_27:
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
        goto LABEL_28;
      }
    }
    memcpy(p_dst, (const void *)(a1 + 8), v12);
    *((unsigned char *)p_dst + v12) = 0;
    __int16 v14 = *(_WORD *)(a1 + 50);
    char v15 = *(unsigned char *)(a1 + 54);
    char v16 = *(unsigned char *)(a1 + 57);
    int v17 = SHIBYTE(v22);
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::runtime_error buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Active scan done, return", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (mNetScanCmdApiData)
  {
    uint64_t v20 = *(void *)(mNetScanCmdApiData + 24);
    if (!v20)
    {
      std::runtime_error::runtime_error((std::runtime_error *)buf, "call to empty boost::function");
      *(void *)std::runtime_error buf = off_100495450;
      boost::throw_exception<boost::bad_function_call>((const std::runtime_error *)buf);
    }
    (*(void (**)(uint64_t, void))((v20 & 0xFFFFFFFFFFFFFFFELL) + 8))(mNetScanCmdApiData + 32, 0);
    TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
    mNetScanCmdApiData = 0;
  }
}

void sub_100140B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

void sub_100140BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100140BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessDiscoverScanForCurrentNetwork(HostInterpreter *this)
{
  int Channel = otLinkGetChannel(*((void *)this + 28));
  int PanId = otLinkGetPanId(*((void *)this + 28));
  routerFoundOnCurrentNetworuint64_t k = 0;
  otThreadGetExtendedPanId(*((void *)this + 28));
  current_nw_xpanid = 0;
  uint64_t v5 = *v4;
  current_nw_xpanid = v5 << 8;
  unint64_t v6 = v4[1] | ((unint64_t)v5 << 8);
  current_nw_xpanid = v6 << 8;
  unint64_t v7 = v4[2] | ((unint64_t)(unsigned __int16)v6 << 8);
  current_nw_xpanid = v7 << 8;
  current_nw_xpanid = (v4[3] | ((v7 & 0xFFFFFF) << 8)) << 8;
  current_nw_xpanid = (v4[4] | (unint64_t)current_nw_xpanid) << 8;
  current_nw_xpanid = (v4[5] | (unint64_t)current_nw_xpanid) << 8;
  current_nw_xpanid = (v4[6] | (unint64_t)current_nw_xpanid) << 8;
  current_nw_xpanid = v4[7] | (unint64_t)current_nw_xpanid;
  otThreadGetNetworkName(*((void *)this + 28));
  current_network_name = v8;
  uint64_t v9 = otThreadDiscover(*((void *)this + 28), 1 << Channel, PanId, 0, 0, (uint64_t)HostInterpreter::HandleResultOfDiscoverScanForCurrentNetwork, (uint64_t)this);
  if (v9)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      size_t v11 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315394;
        char v16 = "ProcessDiscoverScanForCurrentNetwork";
        __int16 v17 = 1024;
        int v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Fail to start the dsicover scan, error = %d", (uint8_t *)&v15, 0x12u);
        size_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (!v12) {
          goto LABEL_15;
        }
        goto LABEL_11;
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      size_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (!v12) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    size_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  otLinkSetDiscoverScanDutyCycle(*((void *)this + 28), 1);
  size_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v12)
  {
LABEL_15:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      -[PowerEventHandler_Rcp init:]();
    }
    return v9;
  }
LABEL_11:
  uint64_t v13 = v12;
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v15 = 136315906;
    char v16 = "ProcessDiscoverScanForCurrentNetwork";
    __int16 v17 = 1024;
    int v18 = PanId;
    __int16 v19 = 1024;
    int v20 = Channel;
    __int16 v21 = 1024;
    int v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s for panid = 0x%x, channel = %d, error = %d", (uint8_t *)&v15, 0x1Eu);
  }
  return v9;
}

void HostInterpreter::HandleResultOfDiscoverScanForCurrentNetwork(const char *a1, uint64_t a2)
{
}

void HostInterpreter::HandleResultOfDiscoverScanForCurrentNetwork(uint64_t a1, const char *a2)
{
  if (a2)
  {
    int v3 = *(unsigned __int8 *)a2;
    int v4 = *((unsigned __int8 *)a2 + 1);
    unsigned int v5 = *((unsigned __int8 *)a2 + 2);
    uint64_t v6 = *((unsigned __int8 *)a2 + 3);
    uint64_t v7 = *((unsigned __int8 *)a2 + 4);
    uint64_t v8 = *((unsigned __int8 *)a2 + 5);
    uint64_t v9 = *((unsigned __int8 *)a2 + 6);
    uint64_t v23 = *((unsigned __int8 *)a2 + 7);
    unint64_t v10 = *((unsigned __int8 *)a2 + 32) | ((((unint64_t)*((unsigned __int8 *)a2 + 30) << 8) | ((((unint64_t)((*((unsigned __int8 *)a2 + 26) << 8) | (*((unsigned __int8 *)a2 + 25) << 16) | *((unsigned __int8 *)a2 + 27)) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 28) << 8) | *((unsigned __int8 *)a2 + 29)) << 16) | *((unsigned __int8 *)a2 + 31)) << 8);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      size_t v12 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        unsigned int v13 = *((unsigned __int8 *)a2 + 57);
        int v14 = *((unsigned __int16 *)a2 + 25);
        int v15 = *((unsigned __int8 *)a2 + 54);
        int v16 = a2[55];
        int v17 = *((unsigned __int8 *)a2 + 56);
        *(_DWORD *)std::runtime_error buf = 136317698;
        *(void *)&uint8_t buf[4] = "HandleResultOfDiscoverScanForCurrentNetwork";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = (v13 >> 6) & 1;
        __int16 v27 = 1024;
        BOOL v28 = v14;
        __int16 v29 = 1024;
        int v30 = v15;
        __int16 v31 = 1024;
        int v32 = v16;
        __int16 v33 = 1024;
        int v34 = v17;
        __int16 v35 = 2080;
        uint64_t v36 = (unsigned __int8 *)(a2 + 8);
        __int16 v37 = 2048;
        unint64_t v38 = v10;
        __int16 v39 = 2048;
        unint64_t v40 = v23 | (((v8 << 8) | ((((unint64_t)((v4 << 8) | (v3 << 16) | v5) << 16) | (v6 << 8) | v7) << 16) | v9) << 8);
        __int16 v41 = 2048;
        uint64_t v42 = current_nw_xpanid;
        __int16 v43 = 2080;
        uint64_t v44 = current_network_name;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Joinable: %d PAN: 0x%04x Channel: %2d RSSI dBm: %3d LQI: %3d Network Name: %-16s, ExtPAN: 0x%llx eMAC: 0x%llx, Current NW ExtPAN: 0x%llx, Current NW Name: %-16s", buf, 0x5Cu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    if (v10 == current_nw_xpanid && !strcmp(a2 + 8, (const char *)current_network_name)) {
      routerFoundOnCurrentNetworuint64_t k = 1;
    }
  }
  else
  {
    __int16 v19 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v19)
    {
      int v20 = v19;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        int v21 = routerFoundOnCurrentNetwork;
        char LinkMode = otThreadGetLinkMode(*(void *)(HostInterpreter::sHostInterpreter + 224));
        *(_DWORD *)std::runtime_error buf = 136315650;
        *(void *)&uint8_t buf[4] = "HandleResultOfDiscoverScanForCurrentNetwork";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v21;
        __int16 v27 = 1024;
        BOOL v28 = (LinkMode & 7) == 6;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s scan done, return, routerFoundOnCurrentNetworuint64_t k = %d, isSleepyRouter = %d", buf, 0x18u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    if (routerFoundOnCurrentNetwork == 1
      && (otThreadGetLinkMode(*(void *)(HostInterpreter::sHostInterpreter + 224)) & 7) == 6)
    {
      RcpHostContext::get_rcp_state((RcpHostContext *)RcpHostContext::sRcpHostContext, (uint64_t)buf);
      char v25 = 11;
      strcpy((char *)__p, "ReceivedAdv");
      operator new();
    }
    otLinkSetDiscoverScanDutyCycle(*(void *)(a1 + 224), 0);
  }
}

void sub_100141370(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t HostInterpreter::ProcessUpdateLeaderInfo(HostInterpreter *this)
{
  unsigned __int16 v2 = (unsigned __int16)otThreadGetLeaderRouterId(*((void *)this + 28)) << 10;
  int DeviceRole = otThreadGetDeviceRole(*((void *)this + 28));
  int v4 = v2 & 0xFC00;
  if (*((unsigned __int16 *)this + 76) == v4)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v6 = logging_obg;
      uint64_t result = syslog_is_the_mask_enabled(7);
      if (result)
      {
        uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          HostInterpreter::ProcessUpdateLeaderInfo();
          return 0;
        }
      }
      return result;
    }
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
  if (DeviceRole == 4)
  {
    ExtendedAddress = (void *)otLinkGetExtendedAddress(*((void *)this + 28));
    if (ExtendedAddress) {
      *(void *)((char *)this + 154) = *ExtendedAddress;
    }
    *((_WORD *)this + 76) = otThreadGetRloc16(*((void *)this + 28));
    uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t result = syslog_is_the_mask_enabled(7);
      if (result)
      {
        uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          HostInterpreter::ProcessUpdateLeaderInfo();
          return 0;
        }
      }
      return result;
    }
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
LABEL_21:
    -[PowerEventHandler_Rcp init:]();
    return 0;
  }
  __int16 v17 = 0;
  do
  {
    if (otThreadGetNextNeighborInfo(*((void *)this + 28), &v17, (uint64_t)&v22))
    {
      unsigned int v13 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v13)
      {
        int v14 = v13;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v15 = *((unsigned __int16 *)this + 76);
          *(_DWORD *)std::runtime_error buf = 67109376;
          int v19 = v4;
          __int16 v20 = 1024;
          int v21 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessUpdateLeaderInfo Leader rloc16:0x%04x not found in neighbor table, last known leader rloc16:0x%04x, send DIAG.req ", buf, 0xEu);
          __int16 v16 = 256;
          if (otThreadGetLeaderRloc(*((void *)this + 28), (uint64_t)buf)) {
            return 0;
          }
          goto LABEL_35;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
        __int16 v16 = 256;
        if (otThreadGetLeaderRloc(*((void *)this + 28), (uint64_t)buf)) {
          return 0;
        }
LABEL_35:
        uint64_t result = otThreadSendDiagnosticGet(*((void *)this + 28), (uint64_t)buf, &v16, 2u, (uint64_t)HostInterpreter::HandleDiagnosticGetResponseFromLeader, (uint64_t)this);
        if (!result) {
          return 0;
        }
        return result;
      }
      __int16 v16 = 256;
      if (otThreadGetLeaderRloc(*((void *)this + 28), (uint64_t)buf)) {
        return 0;
      }
      goto LABEL_35;
    }
  }
  while (v23 != v2);
  *(void *)((char *)this + 154) = v22;
  *((_WORD *)this + 76) = v2;
  size_t v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v11)
  {
    size_t v12 = v11;
    uint64_t result = syslog_is_the_mask_enabled(6);
    if (result)
    {
      uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (result)
      {
        *(_DWORD *)std::runtime_error buf = 67109120;
        int v19 = v23;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "HostInterpreter::ProcessUpdateLeaderInfo Leader rloc16:0x%04x found in neighbor table", buf, 8u);
        return 0;
      }
    }
    return result;
  }
  uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  -[PowerEventHandler_Rcp init:]();
  return 0;
}

std::string *HostInterpreter::GetLinkLocalAddr@<X0>(unint64_t a1@<X1>, std::string *a2@<X8>)
{
  int v4 = BYTE3(a1);
  unint64_t v5 = HIBYTE(a1);
  *(_OWORD *)std::string __str = *(_OWORD *)"fe80:0:0:0";
  *(_OWORD *)&__str[15] = unk_1003F61DF;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  snprintf(__str, 0x1FuLL, "%s:%02x%02x", __str, a1 ^ 2, BYTE1(a1));
  snprintf(__str, 0x1FuLL, "%s:%02x%02x", __str, BYTE2(a1), v4);
  snprintf(__str, 0x1FuLL, "%s:%02x%02x", __str, BYTE4(a1), BYTE5(a1));
  snprintf(__str, 0x1FuLL, "%s:%02x%02x", __str, BYTE6(a1), v5);
  return std::string::assign(a2, __str);
}

void sub_100141844(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostInterpreter::ProcessDiagGetSingleHopPeerMeshLocalIPAddr(HostInterpreter *this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  __int16 v25 = 2049;
  __int16 v24 = 0;
  int LeaderRouterId = otThreadGetLeaderRouterId(*((void *)this + 28));
  int Rloc16 = otThreadGetRloc16(*((void *)this + 28));
  unsigned int DeviceRole = otThreadGetDeviceRole(*((void *)this + 28));
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::runtime_error buf = 136315906;
      *(void *)&uint8_t buf[4] = "ProcessDiagGetSingleHopPeerMeshLocalIPAddr";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = (LeaderRouterId << 10) & 0xFC00;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = otThreadDeviceRoleToString(DeviceRole);
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)__int16 v31 = Rloc16;
      _os_log_debug_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_DEBUG, "%s: parentint Rloc16 = 0x%x, dutRole = %s, dutint Rloc16 = 0x%x", buf, 0x22u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  uint64_t v6 = *((void *)this + 28);
  if ((*(unsigned char *)(v6 + 90560) & 2) != 0 || otThreadGetParentInfo(v6, (uint64_t)&v44))
  {
    char v7 = 0;
    while (!otThreadGetNextNeighborInfo(*((void *)this + 28), &v24, (uint64_t)&v46))
    {
      uint64_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v8)
      {
        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          if ((v48 & 8) != 0) {
            int v9 = 67;
          }
          else {
            int v9 = 82;
          }
          *(_DWORD *)std::runtime_error buf = 136317698;
          *(void *)&uint8_t buf[4] = "ProcessDiagGetSingleHopPeerMeshLocalIPAddr";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v9;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v47;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = v46;
          *(_WORD *)__int16 v31 = 1024;
          *(_DWORD *)&v31[2] = BYTE1(v46);
          __int16 v32 = 1024;
          int v33 = BYTE2(v46);
          __int16 v34 = 1024;
          int v35 = BYTE3(v46);
          __int16 v36 = 1024;
          int v37 = BYTE4(v46);
          __int16 v38 = 1024;
          int v39 = BYTE5(v46);
          __int16 v40 = 1024;
          int v41 = BYTE6(v46);
          __int16 v42 = 1024;
          int v43 = HIBYTE(v46);
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s: %3c  | 0x%04x | %02X%02X%02X%02X%02X%02X%02X%02X", buf, 0x48u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      }
      HostInterpreter::GetLinkLocalAddr(v46, (std::string *)buf);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v27 = *(void *)&buf[16];
      if (buf[23] >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = *(void ***)buf;
      }
      uint64_t v11 = otIp6AddressFromString((const char *)v10, (uint64_t)v23);
      if (v11)
      {
        int v15 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (!v15)
        {
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_90;
          }
          goto LABEL_54;
        }
        if (!syslog_is_the_mask_enabled(4) || !os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_90;
        }
        __int16 v16 = __p;
        if (v27 < 0) {
          __int16 v16 = (void **)__p[0];
        }
        goto LABEL_68;
      }
      size_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v12)
      {
        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          HostInterpreter::ProcessDiagGetSingleHopPeerMeshLocalIPAddr(v28, &v29, v12);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      }
      HostInterpreter::setRcpSrpSignalMeshLocalAddressTimer(this);
      unsigned int v13 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v13)
      {
        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          if (v27 >= 0) {
            int v14 = __p;
          }
          else {
            int v14 = (void **)__p[0];
          }
          *(_DWORD *)std::runtime_error buf = 136315650;
          *(void *)&uint8_t buf[4] = "ProcessDiagGetSingleHopPeerMeshLocalIPAddr";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v14;
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = v47;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: get IPAddress List from linklocalAdrr = %s, uint64_t Rloc = 0x%04x", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      }
      uint64_t v11 = otThreadSendDiagnosticGet(*((void *)this + 28), (uint64_t)v23, &v25, 2u, (uint64_t)HostInterpreter::HandleDiagGetSingleHopPeerResponseIPAddr, (uint64_t)this);
      ++v7;
      if (v11) {
        goto LABEL_90;
      }
    }
    goto LABEL_81;
  }
  __int16 v17 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v17)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::ProcessDiagGetSingleHopPeerMeshLocalIPAddr((unsigned __int8 *)&v44, v17);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  HostInterpreter::GetLinkLocalAddr(v44, (std::string *)buf);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)buf;
  uint64_t v27 = *(void *)&buf[16];
  if (buf[23] >= 0) {
    int v18 = __p;
  }
  else {
    int v18 = *(void ***)buf;
  }
  uint64_t v11 = otIp6AddressFromString((const char *)v18, (uint64_t)v23);
  if (v11)
  {
    int v15 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v15)
    {
      if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        __int16 v16 = __p;
        if (v27 < 0) {
          __int16 v16 = (void **)__p[0];
        }
LABEL_68:
        *(_DWORD *)std::runtime_error buf = 136315650;
        *(void *)&uint8_t buf[4] = "ProcessDiagGetSingleHopPeerMeshLocalIPAddr";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v16;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s: address conversion failure linklocalAdrr[%s] error[%d]", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
LABEL_54:
      -[PowerEventHandler_Rcp init:]();
    }
  }
  else
  {
    HostInterpreter::setRcpSrpSignalMeshLocalAddressTimer(this);
    int v19 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v19)
    {
      if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        __int16 v20 = __p;
        if (v27 < 0) {
          __int16 v20 = (void **)__p[0];
        }
        *(_DWORD *)std::runtime_error buf = 136315650;
        *(void *)&uint8_t buf[4] = "ProcessDiagGetSingleHopPeerMeshLocalIPAddr";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v45;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s: get IPAddress List from linklocalAdrr = %s, uint64_t Rloc = 0x%04x", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    uint64_t v11 = otThreadSendDiagnosticGet(*((void *)this + 28), (uint64_t)v23, &v25, 2u, (uint64_t)HostInterpreter::HandleDiagGetSingleHopPeerResponseIPAddr, (uint64_t)this);
    if (!v11)
    {
      char v7 = 1;
LABEL_81:
      int v21 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21)
      {
        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          HostInterpreter::ProcessDiagGetSingleHopPeerMeshLocalIPAddr();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      if (v7) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = 23;
      }
    }
  }
LABEL_90:
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_100142140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t HostInterpreter::external_route_pref_to_string@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 + 1) > 2) {
    int v3 = "unknown";
  }
  else {
    int v3 = off_100498E08[a1 + 1];
  }
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memcpy(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t boost::function2<void,int,boost::any const&>::operator()(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v4, "call to empty boost::function");
    v4.__vftable = (std::runtime_error_vtbl *)off_100495450;
    boost::throw_exception<boost::bad_function_call>(&v4);
  }
  uint64_t v1 = *(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  unsigned __int16 v2 = a1 + 1;

  return v1(v2);
}

void sub_1001422F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t HostInterpreter::get_num_routers(HostInterpreter *this)
{
  __int16 v4 = 0;
  uint64_t v2 = 0;
  if (!otThreadGetNextNeighborInfo(*((void *)this + 28), &v4, (uint64_t)v5))
  {
    LODWORD(v2) = 0;
    do
    {
      if ((v5[54] & 8) != 0) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = (v2 + 1);
      }
    }
    while (!otThreadGetNextNeighborInfo(*((void *)this + 28), &v4, (uint64_t)v5));
  }
  return v2;
}

void boost::any::operator=<std::string>()
{
}

void boost::any::any<std::map<std::string,boost::any> &>()
{
}

{
  operator new();
}

void sub_100142530()
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v0 + 16));
  operator delete();
}

void HostInterpreter::update_on_mesh_prefixes(HostInterpreter *this)
{
  unsigned int v42 = 0;
  __int16 v36 = 0;
  uint64_t v37 = 0;
  int v35 = &v36;
  uint64_t v2 = (void **)((char *)this + 64);
  std::multimap<IPv6Prefix,OnMeshPrefixEntry>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::__tree_node<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,void *> *,long>>>((uint64_t *)&v35, *((void **)this + 7), (void *)this + 8);
  unsigned __int8 v3 = 0;
  while (!otNetDataGetNextOnMeshPrefix(*((void *)this + 28), &v42, (uint64_t)&v38))
  {
    IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v33, &v38, v39);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    ++v3;
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        IPv6Prefix::to_string(&v33, __p);
        size_t v5 = __p;
        if (v48 < 0) {
          size_t v5 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::runtime_error buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v3;
        LOWORD(v50[0]) = 2080;
        *(void *)((char *)v50 + 2) = v5;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "count[%d] On Mesh Prefix:: [%s]", buf, 0x12u);
        if (v48 < 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "com.apple.wpantund.ncp";
      __int16 v46 = 2080;
      unsigned __int16 v47 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __p, 0x16u);
    }
    int v6 = (v40 & 3) << 14;
    if (v6 == 49152) {
      char v7 = -64;
    }
    else {
      char v7 = 0;
    }
    if (v6 == 0x4000) {
      char v8 = 64;
    }
    else {
      char v8 = v7;
    }
    *(_DWORD *)std::runtime_error buf = 0;
    *(_WORD *)&uint8_t buf[4] = (v40 >> 5) & 2 | ((v40 & 0x80) != 0) | (v40 >> 3) & 4 | (v40 >> 1) & 8 | (16 * ((v40 & 8) != 0)) & 0xDF | (32 * ((v40 & 4) != 0)) | v8;
    buf[6] = HIBYTE(v40) & 1;
    LOWORD(v50[0]) = v41;
    int v9 = v36;
    if (v36)
    {
      unint64_t v10 = (uint64_t *)&v36;
      do
      {
        int v11 = IPv6Prefix::operator<((uint64_t)v9 + 28, (uint64_t)&v33);
        size_t v12 = v9 + 1;
        if (!v11)
        {
          size_t v12 = v9;
          unint64_t v10 = v9;
        }
        int v9 = (uint64_t *)*v12;
      }
      while (*v12);
      if (v10 != (uint64_t *)&v36)
      {
        unsigned int v13 = v36;
        int v14 = &v36;
        if (v36)
        {
          int v14 = &v36;
          do
          {
            int v15 = IPv6Prefix::operator<((uint64_t)&v33, (uint64_t)v13 + 28);
            __int16 v16 = v13 + 1;
            if (v15)
            {
              __int16 v16 = v13;
              int v14 = (uint64_t **)v13;
            }
            unsigned int v13 = (uint64_t *)*v16;
          }
          while (*v16);
        }
        if (v10 != (uint64_t *)v14)
        {
          while (1)
          {
            BOOL v17 = OnMeshPrefixEntry::operator==((uint64_t)(v10 + 6), (uint64_t)buf);
            int v18 = (uint64_t *)v10[1];
            if (v17) {
              break;
            }
            if (v18)
            {
              do
              {
                int v19 = v18;
                int v18 = (uint64_t *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                int v19 = (uint64_t *)v10[2];
                BOOL v20 = *v19 == (void)v10;
                unint64_t v10 = v19;
              }
              while (!v20);
            }
            unint64_t v10 = v19;
            if (v19 == (uint64_t *)v14) {
              goto LABEL_49;
            }
          }
          int v21 = v10;
          if (v18)
          {
            do
            {
              uint64_t v22 = (uint64_t **)v18;
              int v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v22 = (uint64_t **)v21[2];
              BOOL v20 = *v22 == v21;
              int v21 = (uint64_t *)v22;
            }
            while (!v20);
          }
          if (v35 == (uint64_t **)v10) {
            int v35 = v22;
          }
          --v37;
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v36, v10);
          operator delete(v10);
        }
      }
    }
LABEL_49:
    if (v2 == HostInterpreter::find_prefix_entry((uint64_t)this, (uint64_t)&v33, (uint64_t)buf))
    {
      unsigned __int16 v23 = (char *)operator new(0x40uLL);
      *(in6_addr *)(v23 + 28) = v33;
      *((_DWORD *)v23 + 11) = v34;
      *((void *)v23 + 6) = *(void *)buf;
      *((_DWORD *)v23 + 14) = v50[0];
      __int16 v24 = (void **)*v2;
      __int16 v25 = v2;
      uint64_t v26 = v2;
      if (*v2)
      {
        do
        {
          while (1)
          {
            __int16 v25 = v24;
            if (!IPv6Prefix::operator<((uint64_t)(v23 + 28), (uint64_t)v24 + 28)) {
              break;
            }
            __int16 v24 = (void **)*v25;
            uint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_55;
            }
          }
          __int16 v24 = (void **)v25[1];
        }
        while (v24);
        uint64_t v26 = v25 + 1;
        *(void *)unsigned __int16 v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = v25;
        v25[1] = v23;
        uint64_t v27 = **((void **)this + 7);
        if (v27)
        {
LABEL_56:
          *((void *)this + 7) = v27;
          unsigned __int16 v23 = (char *)*v26;
        }
      }
      else
      {
LABEL_55:
        *(void *)unsigned __int16 v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = v25;
        *uint64_t v26 = v23;
        uint64_t v27 = **((void **)this + 7);
        if (v27) {
          goto LABEL_56;
        }
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 8), (uint64_t *)v23);
      ++*((void *)this + 9);
      BOOL v28 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v28)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          OnMeshPrefixEntry::get_description((OnMeshPrefixEntry *)buf, &v33, 0, __p);
          uint64_t v29 = __p;
          if (v48 < 0) {
            uint64_t v29 = *(unsigned char **)__p;
          }
          *(_DWORD *)int v43 = 136315138;
          unint64_t v44 = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Adding %s", v43, 0xCu);
          if (v48 < 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "com.apple.wpantund.ncp";
        __int16 v46 = 2080;
        unsigned __int16 v47 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __p, 0x16u);
      }
    }
  }
  uint64_t v30 = (uint64_t)v35;
  if (v35 != &v36)
  {
    do
    {
      if (!*(_DWORD *)(v30 + 48)) {
        HostInterpreter::on_mesh_prefix_was_removed(this, 0, (in6_addr *)(v30 + 28), *(unsigned __int8 *)(v30 + 44), *(unsigned __int8 *)(v30 + 52), *(unsigned char *)(v30 + 54), *(_WORD *)(v30 + 56));
      }
      __int16 v31 = *(uint64_t **)(v30 + 8);
      if (v31)
      {
        do
        {
          __int16 v32 = (uint64_t **)v31;
          __int16 v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          __int16 v32 = *(uint64_t ***)(v30 + 16);
          BOOL v20 = *v32 == (uint64_t *)v30;
          uint64_t v30 = (uint64_t)v32;
        }
        while (!v20);
      }
      uint64_t v30 = (uint64_t)v32;
    }
    while (v32 != &v36);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v35, v36);
}

void sub_100142B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
  operator delete(v19);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_100142C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_100142C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void HostInterpreter::update_off_mesh_routes(HostInterpreter *this)
{
  unsigned int v41 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  int v34 = &v35;
  uint64_t v2 = (void **)((char *)this + 88);
  std::multimap<IPv6Prefix,OffMeshRouteEntry>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<IPv6Prefix,OffMeshRouteEntry>,std::__tree_node<std::__value_type<IPv6Prefix,OffMeshRouteEntry>,void *> *,long>>>((uint64_t *)&v34, *((void **)this + 10), (void *)this + 11);
  while (!otNetDataGetNextRoute(*((void *)this + 28), &v41, (uint64_t)&v37))
  {
    IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v32, &v37, v38);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        IPv6Prefix::to_string(&v32, v45);
        __int16 v4 = v45;
        if (v48 < 0) {
          __int16 v4 = *(unsigned char **)v45;
        }
        *(_DWORD *)std::runtime_error buf = 136315138;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Off Mesh Prefix:: [%s]", buf, 0xCu);
        if (v48 < 0) {
          operator delete(*(void **)v45);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned __int16 v45 = 136315394;
      *(void *)&v45[4] = "com.apple.wpantund.ncp";
      __int16 v46 = 2080;
      unsigned __int16 v47 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v45, 0x16u);
    }
    int v5 = (v40 & 3) << 6;
    if (v5 == 192) {
      int v6 = -1;
    }
    else {
      int v6 = 0;
    }
    if (v5 == 64) {
      int v7 = 1;
    }
    else {
      int v7 = v6;
    }
    *(_DWORD *)std::runtime_error buf = 0;
    *(_DWORD *)&uint8_t buf[4] = v7;
    uint8_t buf[8] = (v40 & 8) != 0;
    *(_WORD *)&buf[10] = v39;
    unsigned char buf[12] = (v40 & 4) != 0;
    buf[13] = (v40 & 0x10) != 0;
    char v8 = v35;
    if (v35)
    {
      int v9 = (uint64_t *)&v35;
      do
      {
        int v10 = IPv6Prefix::operator<((uint64_t)v8 + 28, (uint64_t)&v32);
        int v11 = v8 + 1;
        if (!v10)
        {
          int v11 = v8;
          int v9 = v8;
        }
        char v8 = (uint64_t *)*v11;
      }
      while (*v11);
      if (v9 != (uint64_t *)&v35)
      {
        size_t v12 = v35;
        unsigned int v13 = &v35;
        if (v35)
        {
          unsigned int v13 = &v35;
          do
          {
            int v14 = IPv6Prefix::operator<((uint64_t)&v32, (uint64_t)v12 + 28);
            int v15 = v12 + 1;
            if (v14)
            {
              int v15 = v12;
              unsigned int v13 = (uint64_t **)v12;
            }
            size_t v12 = (uint64_t *)*v15;
          }
          while (*v15);
        }
        if (v9 != (uint64_t *)v13)
        {
          while (1)
          {
            BOOL v16 = OffMeshRouteEntry::operator==((uint64_t)(v9 + 6), (uint64_t)buf);
            BOOL v17 = (uint64_t *)v9[1];
            if (v16) {
              break;
            }
            if (v17)
            {
              do
              {
                int v18 = v17;
                BOOL v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                int v18 = (uint64_t *)v9[2];
                BOOL v19 = *v18 == (void)v9;
                int v9 = v18;
              }
              while (!v19);
            }
            int v9 = v18;
            if (v18 == (uint64_t *)v13) {
              goto LABEL_49;
            }
          }
          BOOL v20 = v9;
          if (v17)
          {
            do
            {
              int v21 = (uint64_t **)v17;
              BOOL v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              int v21 = (uint64_t **)v20[2];
              BOOL v19 = *v21 == v20;
              BOOL v20 = (uint64_t *)v21;
            }
            while (!v19);
          }
          if (v34 == (uint64_t **)v9) {
            int v34 = v21;
          }
          --v36;
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v35, v9);
          operator delete(v9);
        }
      }
    }
LABEL_49:
    if (v2 == HostInterpreter::find_route_entry((uint64_t)this, (uint64_t)&v32, (uint64_t)buf))
    {
      uint64_t v22 = (char *)operator new(0x40uLL);
      *(in6_addr *)(v22 + 28) = v32;
      *((_DWORD *)v22 + 11) = v33;
      *((_OWORD *)v22 + 3) = *(_OWORD *)buf;
      unsigned __int16 v23 = (void **)*v2;
      __int16 v24 = v2;
      __int16 v25 = v2;
      if (*v2)
      {
        do
        {
          while (1)
          {
            __int16 v24 = v23;
            if (!IPv6Prefix::operator<((uint64_t)(v22 + 28), (uint64_t)v23 + 28)) {
              break;
            }
            unsigned __int16 v23 = (void **)*v24;
            __int16 v25 = v24;
            if (!*v24) {
              goto LABEL_55;
            }
          }
          unsigned __int16 v23 = (void **)v24[1];
        }
        while (v23);
        __int16 v25 = v24 + 1;
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = v24;
        v24[1] = v22;
        uint64_t v26 = **((void **)this + 10);
        if (v26)
        {
LABEL_56:
          *((void *)this + 10) = v26;
          uint64_t v22 = (char *)*v25;
        }
      }
      else
      {
LABEL_55:
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = v24;
        NSObject *v25 = v22;
        uint64_t v26 = **((void **)this + 10);
        if (v26) {
          goto LABEL_56;
        }
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 11), (uint64_t *)v22);
      ++*((void *)this + 12);
      uint64_t v27 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v27)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          OffMeshRouteEntry::get_description((OffMeshRouteEntry *)buf, &v32, 0, v45);
          BOOL v28 = v45;
          if (v48 < 0) {
            BOOL v28 = *(unsigned char **)v45;
          }
          *(_DWORD *)unsigned int v42 = 136315138;
          int v43 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "OffMeshRoutes: Adding %s", v42, 0xCu);
          if (v48 < 0) {
            operator delete(*(void **)v45);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned __int16 v45 = 136315394;
        *(void *)&v45[4] = "com.apple.wpantund.ncp";
        __int16 v46 = 2080;
        unsigned __int16 v47 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v45, 0x16u);
      }
    }
  }
  uint64_t v29 = (uint64_t)v34;
  if (v34 != &v35)
  {
    do
    {
      if (!*(_DWORD *)(v29 + 48)) {
        HostInterpreter::route_was_removed(this, 0, (in6_addr *)(v29 + 28), *(unsigned __int8 *)(v29 + 44), *(_DWORD *)(v29 + 52), *(unsigned char *)(v29 + 56), *(_WORD *)(v29 + 58), *(unsigned char *)(v29 + 60));
      }
      uint64_t v30 = *(uint64_t **)(v29 + 8);
      if (v30)
      {
        do
        {
          __int16 v31 = (uint64_t **)v30;
          uint64_t v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          __int16 v31 = *(uint64_t ***)(v29 + 16);
          BOOL v19 = *v31 == (uint64_t *)v29;
          uint64_t v29 = (uint64_t)v31;
        }
        while (!v19);
      }
      uint64_t v29 = (uint64_t)v31;
    }
    while (v31 != &v35);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v34, v35);
}

void sub_100143218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_1001432A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_1001432C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_1001432D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_1001432F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  operator delete(v17);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_100143340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_100143358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

uint64_t HostInterpreter::refresh_routes_on_interface(HostInterpreter *this)
{
  int v34 = 256;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    unsigned __int8 v3 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::runtime_error buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Refreshing routes", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  __int16 v4 = (void *)((char *)this + 104);
  int v5 = (void *)*((void *)this + 13);
  int v6 = (void **)((char *)this + 112);
  if (v5 != (void *)((char *)this + 112))
  {
    while (1)
    {
      while (HostInterpreter::should_add_route_on_interface(this, (uint64_t)v5 + 28, &v34)
           && v34 == *((_DWORD *)v5 + 12))
      {
        char v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            int v9 = v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            int v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            int v5 = v9;
          }
          while (!v10);
        }
        int v5 = v9;
        if (v9 == v6) {
          goto LABEL_36;
        }
      }
      int v11 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v11) {
        break;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_DWORD *)std::runtime_error buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
      __int16 v36 = 2080;
      in6_addr v37 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      unsigned int v13 = (void *)v5[1];
      int v14 = v5;
      if (v13)
      {
        do
        {
LABEL_29:
          int v15 = v13;
          unsigned int v13 = (void *)*v13;
        }
        while (v13);
        goto LABEL_34;
      }
      do
      {
LABEL_32:
        int v15 = (void *)v14[2];
        BOOL v10 = *v15 == (void)v14;
        int v14 = v15;
      }
      while (!v10);
LABEL_34:
      if ((void *)*v4 == v5) {
        void *v4 = v15;
      }
      int v7 = (uint64_t *)*((void *)this + 14);
      --*((void *)this + 15);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, v5);
      operator delete(v5);
      int v5 = (void *)*((void *)this + 13);
      if (v5 == v6) {
        goto LABEL_36;
      }
    }
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      InterfaceRouteEntry::get_description((InterfaceRouteEntry *)(v5 + 6), (const in6_addr *)((char *)v5 + 28), 0, buf);
      size_t v12 = buf;
      if (v38 < 0) {
        size_t v12 = *(unsigned char **)buf;
      }
      *(_DWORD *)__int16 v39 = 136315138;
      char v40 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "InterfaceRoutes: Removing %s", v39, 0xCu);
      if (v38 < 0)
      {
        operator delete(*(void **)buf);
        unsigned int v13 = (void *)v5[1];
        int v14 = v5;
        if (v13) {
          goto LABEL_29;
        }
        goto LABEL_32;
      }
    }
LABEL_28:
    unsigned int v13 = (void *)v5[1];
    int v14 = v5;
    if (v13) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
LABEL_36:
  BOOL v16 = (char *)*((void *)this + 10);
  BOOL v17 = (char *)this + 88;
  while (v16 != v17)
  {
    int v18 = v16;
    BOOL v19 = (const in6_addr *)(v16 + 28);
    BOOL v20 = *(void **)v17;
    BOOL v16 = (char *)this + 88;
    if (*(void *)v17)
    {
      BOOL v16 = (char *)this + 88;
      do
      {
        int v21 = IPv6Prefix::operator<((uint64_t)v19, (uint64_t)v20 + 28);
        uint64_t v22 = v20 + 1;
        if (v21)
        {
          uint64_t v22 = v20;
          BOOL v16 = (char *)v20;
        }
        BOOL v20 = (void *)*v22;
      }
      while (*v22);
    }
    if (HostInterpreter::should_add_route_on_interface(this, (uint64_t)v19, &v34))
    {
      for (uint64_t i = *v6; i; uint64_t i = (void *)*i)
      {
        if ((IPv6Prefix::operator<((uint64_t)v19, (uint64_t)i + 28) & 1) == 0)
        {
          if (!IPv6Prefix::operator<((uint64_t)i + 28, (uint64_t)v19)) {
            goto LABEL_41;
          }
          ++i;
        }
      }
      __int16 v24 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v24)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          OffMeshRouteEntry::get_description((OffMeshRouteEntry *)(v18 + 48), v19, 0, buf);
          __int16 v25 = buf;
          if (v38 < 0) {
            __int16 v25 = *(unsigned char **)buf;
          }
          *(_DWORD *)__int16 v39 = 136315138;
          char v40 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "InterfaceRoutes: Adding route for prefix %s", v39, 0xCu);
          if (v38 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        __int16 v36 = 2080;
        in6_addr v37 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      }
      *(void *)std::runtime_error buf = v19;
      *((_DWORD *)std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::__emplace_unique_key_args<IPv6Prefix,std::piecewise_construct_t const&,std::tuple<IPv6Prefix const&>,std::tuple<>>((uint64_t **)this + 13, (uint64_t)v19, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 12) = 256;
    }
LABEL_41:
    ;
  }
  uint64_t v26 = (HostInterpreter *)*((void *)this + 7);
  if (v26 != (HostInterpreter *)((char *)this + 64))
  {
    do
    {
      if (HostInterpreter::should_add_route_on_interface(this, (uint64_t)v26 + 28, &v34))
      {
        for (uint64_t j = *v6; j; uint64_t j = (void *)*j)
        {
          if ((IPv6Prefix::operator<((uint64_t)v26 + 28, (uint64_t)j + 28) & 1) == 0)
          {
            if (!IPv6Prefix::operator<((uint64_t)j + 28, (uint64_t)v26 + 28)) {
              goto LABEL_80;
            }
            ++j;
          }
        }
        BOOL v28 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v28)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            OnMeshPrefixEntry::get_description((HostInterpreter *)((char *)v26 + 48), (const in6_addr *)((char *)v26 + 28), 0, buf);
            uint64_t v29 = buf;
            if (v38 < 0) {
              uint64_t v29 = *(unsigned char **)buf;
            }
            *(_DWORD *)__int16 v39 = 136315138;
            char v40 = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "InterfaceRoutes: Adding route for prefix %s", v39, 0xCu);
            if (v38 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::runtime_error buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          __int16 v36 = 2080;
          in6_addr v37 = "default";
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
        }
        int v30 = v34;
        *(void *)std::runtime_error buf = (char *)v26 + 28;
        *((_DWORD *)std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::__emplace_unique_key_args<IPv6Prefix,std::piecewise_construct_t const&,std::tuple<IPv6Prefix const&>,std::tuple<>>((uint64_t **)this + 13, (uint64_t)v26 + 28, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 12) = v30;
      }
LABEL_80:
      __int16 v31 = (HostInterpreter *)*((void *)v26 + 1);
      if (v31)
      {
        do
        {
          in6_addr v32 = v31;
          __int16 v31 = *(HostInterpreter **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          in6_addr v32 = (HostInterpreter *)*((void *)v26 + 2);
          BOOL v10 = *(void *)v32 == (void)v26;
          uint64_t v26 = v32;
        }
        while (!v10);
      }
      uint64_t v26 = v32;
    }
    while (v32 != (HostInterpreter *)((char *)this + 64));
  }
  return HostInterpreter::signal_ipv6route_list_change(this);
}

uint64_t HostInterpreter::get_num_unique_on_mesh_prefixes(HostInterpreter *this)
{
  unsigned int v12 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v7 = &v8;
  while (!otNetDataGetNextOnMeshPrefix(*((void *)this + 28), &v12, (uint64_t)&v10))
  {
    IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v6, &v10, v11);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        IPv6Prefix::to_string(&v6, __p);
        if (v16 >= 0) {
          unsigned __int8 v3 = __p;
        }
        else {
          unsigned __int8 v3 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::runtime_error buf = 136315138;
        int v18 = v3;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "OnMeshPrefix:[%s]", buf, 0xCu);
        if (v16 < 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "com.apple.wpantund.ncp";
      __int16 v14 = 2080;
      int v15 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __p, 0x16u);
    }
    IPv6Prefix::to_string(&v6, __p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v7, (const void **)__p, (uint64_t)__p);
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v4 = v9;
  std::__tree<std::string>::destroy((uint64_t)&v7, v8);
  return v4;
}

void sub_100143C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t HostInterpreter::get_num_unique_off_mesh_routes(HostInterpreter *this)
{
  unsigned int v12 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v7 = &v8;
  while (!otNetDataGetNextRoute(*((void *)this + 28), &v12, (uint64_t)&v10))
  {
    IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v6, &v10, v11);
    IPv6Prefix::to_string(&v6, __p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v7, (const void **)__p, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v2 = v9;
  std::__tree<std::string>::destroy((uint64_t)&v7, v8);
  return v2;
}

void sub_100143D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::__tree<std::string>::destroy((uint64_t)&a19, a20);
    _Unwind_Resume(a1);
  }
  std::__tree<std::string>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void boost::any::operator=<unsigned char>()
{
}

void boost::any::operator=<unsigned short>()
{
}

void boost::any::operator=<nl::Data const&>()
{
}

void boost::any::operator=<signed char>()
{
}

void HostInterpreter::find_and_erase_service_entry(uint64_t a1, int a2, int a3, const void **a4, const void **a5, int a6, uint64_t *a7)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    unsigned int v13 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::runtime_error buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "find_and_erase_service_entry:", buf, 2u);
      uint64_t v15 = *a7;
      uint64_t v14 = a7[1];
      if (*a7 == v14) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    uint64_t v15 = *a7;
    uint64_t v14 = a7[1];
    if (*a7 == v14) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *a7;
  uint64_t v14 = a7[1];
  if (*a7 == v14) {
    return;
  }
LABEL_8:
  uint64_t v16 = 0;
  int v18 = a4;
  BOOL v17 = *a4;
  size_t v19 = (unsigned char *)v18[1] - v17;
  int v21 = a5;
  BOOL v20 = *a5;
  size_t v22 = (unsigned char *)v21[1] - v20;
  while (1)
  {
    if (*(_DWORD *)(v15 + v16 + 8) == a2 && *(_DWORD *)(v15 + v16 + 12) == a3)
    {
      unsigned __int16 v23 = *(const void **)(v15 + v16 + 16);
      if (*(void *)(v15 + v16 + 24) - (void)v23 == v19 && !memcmp(v23, v17, v19))
      {
        uint64_t v24 = v15 + v16;
        if (*(unsigned __int16 *)(v15 + v16 + 72) == a6)
        {
          __int16 v25 = *(const void **)(v24 + 48);
          if (*(void *)(v24 + 56) - (void)v25 == v22 && !memcmp(v25, v20, v22)) {
            break;
          }
        }
      }
    }
    v16 += 80;
    if (v15 + v16 == v14) {
      return;
    }
  }
  uint64_t v26 = v15 + v16;
  if (v15 + v16 + 80 != v14)
  {
    do
    {
      uint64_t v27 = v26;
      *(void *)(v26 + 8) = *(void *)(v26 + 88);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v26 + 16), *(char **)(v26 + 96), *(char **)(v26 + 104), *(void *)(v26 + 104) - *(void *)(v26 + 96));
      *(unsigned char *)(v26 + 40) = *(unsigned char *)(v26 + 120);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v26 + 48), *(char **)(v26 + 128), *(char **)(v26 + 136), *(void *)(v26 + 136) - *(void *)(v26 + 128));
      *(_WORD *)(v26 + 72) = *(_WORD *)(v26 + 152);
      *(unsigned char *)(v26 + 74) = *(unsigned char *)(v26 + 154);
      v26 += 80;
    }
    while (v27 + 160 != v14);
    uint64_t v14 = a7[1];
  }
  if (v14 != v26)
  {
    uint64_t v28 = v14 - 80;
    uint64_t v29 = (void (***)(void))(v14 - 80);
    int v30 = (void (***)(void))(v14 - 80);
    do
    {
      __int16 v31 = *v30;
      v30 -= 10;
      (*v31)(v29);
      v28 -= 80;
      BOOL v32 = v29 == (void (***)(void))v26;
      uint64_t v29 = v30;
    }
    while (!v32);
  }
  a7[1] = v26;
}

uint64_t HostInterpreter::find_service_entry(uint64_t a1, int a2, int a3, const void **a4, const void **a5, int a6, uint64_t *a7)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
      uint64_t v15 = *a7;
      uint64_t v16 = a7[1];
      if (*a7 != v16) {
        goto LABEL_8;
      }
      return 0;
    }
LABEL_7:
    uint64_t v15 = *a7;
    uint64_t v16 = a7[1];
    if (*a7 != v16) {
      goto LABEL_8;
    }
    return 0;
  }
  uint64_t v14 = logging_obg;
  if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
    goto LABEL_7;
  }
  v26[0] = 0;
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "find_service_entry:", (uint8_t *)v26, 2u);
  uint64_t v15 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 == v16) {
    return 0;
  }
LABEL_8:
  int v18 = a4;
  BOOL v17 = *a4;
  size_t v19 = (unsigned char *)v18[1] - v17;
  int v21 = a5;
  BOOL v20 = *a5;
  size_t v22 = (unsigned char *)v21[1] - v20;
  while (1)
  {
    if (*(_DWORD *)(v15 + 8) == a2 && *(_DWORD *)(v15 + 12) == a3)
    {
      unsigned __int16 v23 = *(const void **)(v15 + 16);
      if (*(void *)(v15 + 24) - (void)v23 == v19 && !memcmp(v23, v17, v19) && *(unsigned __int16 *)(v15 + 72) == a6)
      {
        uint64_t v24 = *(const void **)(v15 + 48);
        if (v22 == *(void *)(v15 + 56) - (void)v24 && !memcmp(v20, v24, v22)) {
          break;
        }
      }
    }
    v15 += 80;
    if (v15 == v16) {
      return 0;
    }
  }
  return 1;
}

char *std::vector<ServiceEntry>::push_back[abi:ne180100](void *a1, const ServiceEntry *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    size_t result = std::vector<ServiceEntry>::__push_back_slow_path<ServiceEntry const&>(a1, a2);
    a1[1] = result;
  }
  else
  {
    ServiceEntry::ServiceEntry((ServiceEntry *)a1[1], a2);
    size_t result = (char *)(v3 + 80);
    a1[1] = v3 + 80;
    a1[1] = v3 + 80;
  }
  return result;
}

void sub_10014441C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void ServiceEntry::~ServiceEntry(ServiceEntry *this)
{
  *(void *)this = off_100498F38;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = off_100498ED8;
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = off_100498F38;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = off_100498ED8;
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }

  operator delete();
}

void HostInterpreter::GetLeaderReelectCountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_1003F2BE0;
  strcpy((char *)__p, "election_netdata_trigger");
  p_p = &__p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  operator new();
}

void sub_10014486C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100144884(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10014489C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001448B4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001448CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v17, *(char **)(v17 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetNeighborsCountAsValMap(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (a1)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    int v7 = std::string::insert(&v26, 0, "ConnectedChildCount");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v25;
    }
    else {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v11 = std::string::append(&v27, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    unsigned int v13 = std::string::append(&v28, __s, 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v13->__r_.__value_.__r.__words[2];
    long long v29 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_13:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_17:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (a2)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    uint64_t v15 = std::string::insert(&v26, 0, "ConnectedRouterCount");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v25;
    }
    else {
      uint64_t v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
    }
    size_t v19 = std::string::append(&v27, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    int v21 = std::string::append(&v28, __s, 1uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
    long long v29 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_36:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_31:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_35:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
}

void sub_100144D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetMleOtCountersAsValMap(uint64_t **a1@<X8>)
{
  uint64_t v1 = a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  size_t v2 = strlen("disabled_role_count");
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v3 = (const void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (const void **)operator new(v5 + 1);
    __dst[1] = v3;
    v9[0] = v6 | 0x8000000000000000;
    __dst[0] = v4;
    uint64_t v1 = a1;
  }
  else
  {
    HIBYTE(v9[0]) = v2;
    long long v4 = __dst;
    if (!v2)
    {
LABEL_9:
      *((unsigned char *)v3 + (void)v4) = 0;
      in6_addr v10 = __dst;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, __dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
      operator new();
    }
  }
  memmove(v4, "disabled_role_count", (size_t)v3);
  goto LABEL_9;
}

void sub_100145410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a9, *(char **)(a9 + 8));
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::GetNeighborTriggerBasedCounters(uint64_t a1)
{
  __int16 v7 = 0;
  otThreadGetLeaderRouterId(*(void *)(a1 + 224));
  uint64_t result = otThreadGetNextNeighborInfo(*(void *)(a1 + 224), &v7, (uint64_t)&v9);
  if (!result)
  {
    v6[0] = 0;
    v6[1] = 0;
    uint64_t v5 = v6;
    v4[7] = 6;
    strcpy((char *)__p, "RLOC16");
    long long v8 = __p;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v8);
    operator new();
  }
  return result;
}

void sub_100146B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char *a18)
{
}

void sub_100146BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,char *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void HostInterpreter::GetOtIpCountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  size_t v2 = strlen("tx_success");
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v3 = (const void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (const void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v8 = v6 | 0x8000000000000000;
    __dst[0] = v4;
  }
  else
  {
    HIBYTE(v8) = v2;
    long long v4 = __dst;
    if (!v2)
    {
LABEL_9:
      *((unsigned char *)v3 + (void)v4) = 0;
      uint64_t v9 = __dst;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, __dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
      operator new();
    }
  }
  memmove(v4, "tx_success", (size_t)v3);
  goto LABEL_9;
}

void sub_100146DEC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100146E04(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100146E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetMacCountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  size_t v2 = strlen("tx_total");
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v3 = (const void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (const void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v8 = v6 | 0x8000000000000000;
    __dst[0] = v4;
  }
  else
  {
    HIBYTE(v8) = v2;
    long long v4 = __dst;
    if (!v2)
    {
LABEL_9:
      *((unsigned char *)v3 + (void)v4) = 0;
      uint64_t v9 = __dst;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, __dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
      operator new();
    }
  }
  memmove(v4, "tx_total", (size_t)v3);
  goto LABEL_9;
}

void sub_100147144(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10014715C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100147174(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10014718C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001471A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetVendorRadioStatsAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  size_t v2 = strlen("listening_time");
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = operator new(v5 + 1);
    v8.__r_.__value_.__l.__size_ = v3;
    v8.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  }
  else
  {
    *((unsigned char *)&v8.__r_.__value_.__s + 23) = v2;
    long long v4 = &v8;
    if (!v2)
    {
LABEL_9:
      v4[v3] = 0;
      long long __dst = &v8;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)&v8.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__dst);
      operator new();
    }
  }
  memmove(v4, "listening_time", v3);
  goto LABEL_9;
}

void sub_1001479E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1001479FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_100147A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a12, *(char **)(a12 + 8));
  _Unwind_Resume(a1);
}

void sub_100147A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  operator delete(v32);
  if (a32 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v33, *(char **)(v33 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetVendorRadioCountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  char v3 = 19;
  *(_DWORD *)&__p[15] = 1937010797;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)"cca_failed_attempts";
  char v2 = 0;
  long long v4 = __p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v4);
  operator new();
}

void sub_100147E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetJoinerRssiHistogramAsValMap(int a1@<W2>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (a1)
  {
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 1;
    LOWORD(v16.__r_.__value_.__l.__data_) = 91;
    uint64_t v5 = std::string::insert(&v16, 0, "EndDeviceJoinCount");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v7 = &v15;
    }
    else {
      __int16 v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::string::append(&v17, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    char v14 = 1;
    strcpy(__s, "]");
    unsigned __int8 v11 = std::string::append(&v18, __s, 1uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v11->__r_.__value_.__r.__words[2];
    long long v19 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v14 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v16.__r_.__value_.__l.__data_);
LABEL_13:
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v19, (uint64_t)&std::piecewise_construct, (long long **)&v18);
      operator new();
    }
LABEL_17:
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
}

void sub_1001480F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a35);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a27 & 0x80000000) == 0)
    {
LABEL_12:
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a22);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void HostInterpreter::GetMacPacketSizeHistogramAsValMap(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (a1)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    __int16 v7 = std::string::insert(&v26, 0, "TxPacketCount");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v25;
    }
    else {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v11 = std::string::append(&v27, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    unsigned int v13 = std::string::append(&v28, __s, 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v13->__r_.__value_.__r.__words[2];
    long long v29 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_13:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_17:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (a2)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    std::string v15 = std::string::insert(&v26, 0, "RxPacketCount");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v17 = &v25;
    }
    else {
      std::string v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v27, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    int v21 = std::string::append(&v28, __s, 1uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
    long long v29 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_36:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_31:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_35:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
}

void sub_100148618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetMacPacketErrHistogramAsValMap(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (a1)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    __int16 v7 = std::string::insert(&v26, 0, "DirectNoAckError");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v25;
    }
    else {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v11 = std::string::append(&v27, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    unsigned int v13 = std::string::append(&v28, __s, 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v13->__r_.__value_.__r.__words[2];
    long long v29 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_13:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_17:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (a2)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    std::string v15 = std::string::insert(&v26, 0, "DirectCcaError");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v17 = &v25;
    }
    else {
      std::string v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v27, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    int v21 = std::string::append(&v28, __s, 1uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
    long long v29 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_36:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_31:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_35:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
}

void sub_100148B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetMacPacketLQIHistogramAsValMap(int a1@<W2>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (a1)
  {
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 1;
    LOWORD(v16.__r_.__value_.__l.__data_) = 91;
    uint64_t v5 = std::string::insert(&v16, 0, "RxPacketCount");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v7 = &v15;
    }
    else {
      __int16 v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::string::append(&v17, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    char v14 = 1;
    strcpy(__s, "]");
    unsigned __int8 v11 = std::string::append(&v18, __s, 1uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v11->__r_.__value_.__r.__words[2];
    long long v19 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v14 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v16.__r_.__value_.__l.__data_);
LABEL_13:
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v19, (uint64_t)&std::piecewise_construct, (long long **)&v18);
      operator new();
    }
LABEL_17:
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
}

void sub_100148ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a35);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a27 & 0x80000000) == 0)
    {
LABEL_12:
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a22);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void HostInterpreter::GetNeighRSSIHistogramAsValMap(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (a2)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    __int16 v7 = std::string::insert(&v26, 0, "EndDevicePacketCount");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v25;
    }
    else {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v11 = std::string::append(&v27, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    unsigned int v13 = std::string::append(&v28, __s, 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v13->__r_.__value_.__r.__words[2];
    long long v29 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_13:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_17:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (a1)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    std::string v15 = std::string::insert(&v26, 0, "RouterPacketCount");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v17 = &v25;
    }
    else {
      std::string v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v27, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    int v21 = std::string::append(&v28, __s, 1uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
    long long v29 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_36:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_31:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_35:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
}

void sub_1001493F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetMacRetryHistogramAsValMap(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (a1)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    __int16 v7 = std::string::insert(&v26, 0, "DirectRetry");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v25;
    }
    else {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v11 = std::string::append(&v27, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    unsigned int v13 = std::string::append(&v28, __s, 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v13->__r_.__value_.__r.__words[2];
    long long v29 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_13:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_17:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (a2)
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
    LOWORD(v26.__r_.__value_.__l.__data_) = 91;
    std::string v15 = std::string::insert(&v26, 0, "InDirectRetry");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v17 = &v25;
    }
    else {
      std::string v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v27, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    char v24 = 1;
    strcpy(__s, "]");
    int v21 = std::string::append(&v28, __s, 1uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
    long long v29 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v24 < 0)
    {
      operator delete(*(void **)__s);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_36:
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_31:
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v29, (uint64_t)&std::piecewise_construct, (long long **)&v28);
      operator new();
    }
LABEL_35:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
}

void sub_100149950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v40, *(char **)(v40 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetVendorOpenThreadRadioCountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  size_t v2 = strlen("transmitted_frames");
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v3 = (const void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v4 = (const void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v8 = v6 | 0x8000000000000000;
    __dst[0] = v4;
  }
  else
  {
    HIBYTE(v8) = v2;
    long long v4 = __dst;
    if (!v2)
    {
LABEL_9:
      *((unsigned char *)v3 + (void)v4) = 0;
      uint64_t v9 = __dst;
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, __dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
      operator new();
    }
  }
  memmove(v4, "transmitted_frames", (size_t)v3);
  goto LABEL_9;
}

void sub_100149C08(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100149C20(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100149C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetRcpStateInfo(uint64_t a1, uint64_t *a2)
{
  __int16 v292 = 0;
  unsigned __int8 v291 = -1;
  v290[16] = -1;
  unsigned int DeviceRole = otThreadGetDeviceRole(*(void *)(a1 + 224));
  uint64_t v5 = otThreadDeviceRoleToString(DeviceRole);
  snprintf(__str, 0x3E8uLL, "%-20s = %s", "Current Role", v5);
  size_t v6 = strlen(__str);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v8 = operator new(v9 + 1);
    *(void *)&__dst[8] = v7;
    *(void *)&char __dst[16] = v10 | 0x8000000000000000;
    *(void *)long long __dst = v8;
  }
  else
  {
    __dst[23] = v6;
    unint64_t v8 = __dst;
    if (!v6)
    {
LABEL_9:
      v8[v7] = 0;
      unsigned __int8 v11 = operator new(0x28uLL);
      uint64_t v284 = a1;
      v11[1] = *(_OWORD *)__dst;
      *((void *)v11 + 4) = *(void *)&__dst[16];
      uint64_t v12 = *a2;
      *(void *)unsigned __int8 v11 = *a2;
      *((void *)v11 + 1) = a2;
      *(void *)(v12 + 8) = v11;
      *a2 = (uint64_t)v11;
      ++a2[2];
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        long long v14 = logging_obg;
        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          HostInterpreter::GetRcpStateInfo();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        -[PowerEventHandler_Rcp init:]();
      }
      ThreadNetifName = otSysGetThreadNetifName();
      snprintf(__str, 0x3E8uLL, "%-20s = %s", "TUNIF:", ThreadNetifName);
      size_t v15 = strlen(__str);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v19 = v15 | 7;
        }
        uint64_t v20 = v19 + 1;
        std::string v17 = operator new(v19 + 1);
        *(void *)&__dst[8] = v16;
        *(void *)&char __dst[16] = v20 | 0x8000000000000000;
        *(void *)long long __dst = v17;
        uint64_t v18 = a1;
      }
      else
      {
        __dst[23] = v15;
        std::string v17 = __dst;
        uint64_t v18 = a1;
        if (!v15)
        {
LABEL_23:
          v17[v16] = 0;
          int v21 = operator new(0x28uLL);
          v21[1] = *(_OWORD *)__dst;
          *((void *)v21 + 4) = *(void *)&__dst[16];
          uint64_t v22 = *a2;
          *(void *)int v21 = *a2;
          *((void *)v21 + 1) = a2;
          *(void *)(v22 + 8) = v21;
          *a2 = (uint64_t)v21;
          ++a2[2];
          ExtendedAddress = (unsigned __int8 *)otLinkGetExtendedAddress(*(void *)(v18 + 224));
          char v24 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v24)
          {
            if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
              HostInterpreter::GetRcpStateInfo();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            -[PowerEventHandler_Rcp init:]();
          }
          snprintf(__str, 0x3E8uLL, "%-20s = %u", "ExtendedAddress", *ExtendedAddress);
          size_t v25 = strlen(__str);
          if (v25 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v26 = v25;
          if (v25 >= 0x17)
          {
            uint64_t v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v25 | 7) != 0x17) {
              uint64_t v29 = v25 | 7;
            }
            uint64_t v30 = v29 + 1;
            std::string v27 = operator new(v29 + 1);
            *(void *)&__dst[8] = v26;
            *(void *)&char __dst[16] = v30 | 0x8000000000000000;
            *(void *)long long __dst = v27;
            uint64_t v28 = a1;
          }
          else
          {
            __dst[23] = v25;
            std::string v27 = __dst;
            uint64_t v28 = a1;
            if (!v25)
            {
LABEL_37:
              v27[v26] = 0;
              __int16 v31 = operator new(0x28uLL);
              v31[1] = *(_OWORD *)__dst;
              *((void *)v31 + 4) = *(void *)&__dst[16];
              uint64_t v32 = *a2;
              *(void *)__int16 v31 = *a2;
              *((void *)v31 + 1) = a2;
              *(void *)(v32 + 8) = v31;
              *a2 = (uint64_t)v31;
              ++a2[2];
              int PartitionId = otThreadGetPartitionId(*(void *)(v28 + 224));
              int v34 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v34)
              {
                if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                  HostInterpreter::GetRcpStateInfo();
                }
              }
              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                -[PowerEventHandler_Rcp init:]();
              }
              snprintf(__str, 0x3E8uLL, "%-20s = %u", "partition_id", PartitionId);
              size_t v35 = strlen(__str);
              if (v35 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v36 = v35;
              if (v35 >= 0x17)
              {
                uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17) {
                  uint64_t v39 = v35 | 7;
                }
                uint64_t v40 = v39 + 1;
                in6_addr v37 = operator new(v39 + 1);
                *(void *)&__dst[8] = v36;
                *(void *)&char __dst[16] = v40 | 0x8000000000000000;
                *(void *)long long __dst = v37;
                uint64_t v38 = a1;
              }
              else
              {
                __dst[23] = v35;
                in6_addr v37 = __dst;
                uint64_t v38 = a1;
                if (!v35)
                {
LABEL_51:
                  v37[v36] = 0;
                  unsigned int v41 = operator new(0x28uLL);
                  v41[1] = *(_OWORD *)__dst;
                  *((void *)v41 + 4) = *(void *)&__dst[16];
                  uint64_t v42 = *a2;
                  *(void *)unsigned int v41 = *a2;
                  *((void *)v41 + 1) = a2;
                  *(void *)(v42 + 8) = v41;
                  *a2 = (uint64_t)v41;
                  ++a2[2];
                  int Rloc16 = otThreadGetRloc16(*(void *)(v38 + 224));
                  snprintf(__str, 0x3E8uLL, "%-20s = %x", "RLOC16", Rloc16);
                  size_t v43 = strlen(__str);
                  if (v43 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  size_t v44 = v43;
                  if (v43 >= 0x17)
                  {
                    uint64_t v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v43 | 7) != 0x17) {
                      uint64_t v47 = v43 | 7;
                    }
                    uint64_t v48 = v47 + 1;
                    unsigned __int16 v45 = operator new(v47 + 1);
                    *(void *)&__dst[8] = v44;
                    *(void *)&char __dst[16] = v48 | 0x8000000000000000;
                    *(void *)long long __dst = v45;
                    uint64_t v46 = a1;
                  }
                  else
                  {
                    __dst[23] = v43;
                    unsigned __int16 v45 = __dst;
                    uint64_t v46 = a1;
                    if (!v43)
                    {
LABEL_59:
                      v45[v44] = 0;
                      unsigned __int8 v49 = operator new(0x28uLL);
                      v49[1] = *(_OWORD *)__dst;
                      *((void *)v49 + 4) = *(void *)&__dst[16];
                      uint64_t v50 = *a2;
                      *(void *)unsigned __int8 v49 = *a2;
                      *((void *)v49 + 1) = a2;
                      *(void *)(v50 + 8) = v49;
                      *a2 = (uint64_t)v49;
                      ++a2[2];
                      uint64_t v51 = *(void *)(v46 + 224);
                      v328[0] = 0;
                      if (otThreadGetLeaderRloc(v51, (uint64_t)v290)) {
                        goto LABEL_69;
                      }
                      otIp6AddressToString((uint64_t)v290, v328, 40);
                      snprintf(__str, 0x3E8uLL, "%-20s = %s", "LEADER_RLOC_ADDR", v328);
                      size_t v52 = strlen(__str);
                      if (v52 > 0x7FFFFFFFFFFFFFF7) {
                        std::string::__throw_length_error[abi:ne180100]();
                      }
                      size_t v53 = v52;
                      if (v52 >= 0x17)
                      {
                        uint64_t v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v52 | 7) != 0x17) {
                          uint64_t v55 = v52 | 7;
                        }
                        uint64_t v56 = v55 + 1;
                        uint64_t v54 = operator new(v55 + 1);
                        *(void *)&__dst[8] = v53;
                        *(void *)&char __dst[16] = v56 | 0x8000000000000000;
                        *(void *)long long __dst = v54;
                      }
                      else
                      {
                        __dst[23] = v52;
                        uint64_t v54 = __dst;
                        if (!v52) {
                          goto LABEL_68;
                        }
                      }
                      memcpy(v54, __str, v53);
LABEL_68:
                      v54[v53] = 0;
                      int v57 = operator new(0x28uLL);
                      v57[1] = *(_OWORD *)__dst;
                      *((void *)v57 + 4) = *(void *)&__dst[16];
                      uint64_t v58 = *a2;
                      *(void *)int v57 = *a2;
                      *((void *)v57 + 1) = a2;
                      *(void *)(v58 + 8) = v57;
                      *a2 = (uint64_t)v57;
                      ++a2[2];
LABEL_69:
                      int LeaderWeight = otThreadGetLeaderWeight(*(void *)(a1 + 224));
                      snprintf(__str, 0x3E8uLL, "%-20s = %u", "Leader Weight", LeaderWeight);
                      size_t v59 = strlen(__str);
                      if (v59 > 0x7FFFFFFFFFFFFFF7) {
                        std::string::__throw_length_error[abi:ne180100]();
                      }
                      size_t v60 = v59;
                      if (v59 >= 0x17)
                      {
                        uint64_t v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v59 | 7) != 0x17) {
                          uint64_t v63 = v59 | 7;
                        }
                        uint64_t v64 = v63 + 1;
                        BOOL v61 = operator new(v63 + 1);
                        *(void *)&__dst[8] = v60;
                        *(void *)&char __dst[16] = v64 | 0x8000000000000000;
                        *(void *)long long __dst = v61;
                        uint64_t v62 = a1;
                      }
                      else
                      {
                        __dst[23] = v59;
                        BOOL v61 = __dst;
                        uint64_t v62 = a1;
                        if (!v59)
                        {
LABEL_77:
                          v61[v60] = 0;
                          char v65 = operator new(0x28uLL);
                          v65[1] = *(_OWORD *)__dst;
                          *((void *)v65 + 4) = *(void *)&__dst[16];
                          uint64_t v66 = *a2;
                          *(void *)char v65 = *a2;
                          *((void *)v65 + 1) = a2;
                          *(void *)(v66 + 8) = v65;
                          *a2 = (uint64_t)v65;
                          ++a2[2];
                          int State = otJoinerGetState(*(void *)(v62 + 224));
                          snprintf(__str, 0x3E8uLL, "%-20s = %u", "Joiner State", State);
                          size_t v68 = strlen(__str);
                          if (v68 > 0x7FFFFFFFFFFFFFF7) {
                            std::string::__throw_length_error[abi:ne180100]();
                          }
                          size_t v69 = v68;
                          if (v68 >= 0x17)
                          {
                            uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v68 | 7) != 0x17) {
                              uint64_t v71 = v68 | 7;
                            }
                            uint64_t v72 = v71 + 1;
                            uint64_t v70 = operator new(v71 + 1);
                            *(void *)&__dst[8] = v69;
                            *(void *)&char __dst[16] = v72 | 0x8000000000000000;
                            *(void *)long long __dst = v70;
                          }
                          else
                          {
                            __dst[23] = v68;
                            uint64_t v70 = __dst;
                            if (!v68)
                            {
LABEL_85:
                              v70[v69] = 0;
                              int v73 = operator new(0x28uLL);
                              v73[1] = *(_OWORD *)__dst;
                              *((void *)v73 + 4) = *(void *)&__dst[16];
                              uint64_t v74 = *a2;
                              *(void *)int v73 = *a2;
                              *((void *)v73 + 1) = a2;
                              *(void *)(v74 + 8) = v73;
                              *a2 = (uint64_t)v73;
                              ++a2[2];
                              int v75 = otCommissionerGetState(*(void *)(a1 + 224));
                              snprintf(__str, 0x3E8uLL, "%-20s = %u", "Commissioner State", v75);
                              size_t v76 = strlen(__str);
                              if (v76 > 0x7FFFFFFFFFFFFFF7) {
                                std::string::__throw_length_error[abi:ne180100]();
                              }
                              size_t v77 = v76;
                              if (v76 >= 0x17)
                              {
                                uint64_t v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v76 | 7) != 0x17) {
                                  uint64_t v79 = v76 | 7;
                                }
                                uint64_t v80 = v79 + 1;
                                std::string v78 = operator new(v79 + 1);
                                *(void *)&__dst[8] = v77;
                                *(void *)&char __dst[16] = v80 | 0x8000000000000000;
                                *(void *)long long __dst = v78;
                              }
                              else
                              {
                                __dst[23] = v76;
                                std::string v78 = __dst;
                                if (!v76)
                                {
LABEL_93:
                                  v78[v77] = 0;
                                  uint64_t v81 = operator new(0x28uLL);
                                  v81[1] = *(_OWORD *)__dst;
                                  *((void *)v81 + 4) = *(void *)&__dst[16];
                                  uint64_t v82 = *a2;
                                  *(void *)uint64_t v81 = *a2;
                                  *((void *)v81 + 1) = a2;
                                  *(void *)(v82 + 8) = v81;
                                  *a2 = (uint64_t)v81;
                                  ++a2[2];
                                  int v83 = otBorderAgentGetState(*(void *)(v284 + 224));
                                  snprintf(__str, 0x3E8uLL, "%-20s = %u", "Border Agent State", v83);
                                  size_t v84 = strlen(__str);
                                  if (v84 > 0x7FFFFFFFFFFFFFF7) {
                                    std::string::__throw_length_error[abi:ne180100]();
                                  }
                                  size_t v85 = v84;
                                  if (v84 >= 0x17)
                                  {
                                    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v84 | 7) != 0x17) {
                                      uint64_t v87 = v84 | 7;
                                    }
                                    uint64_t v88 = v87 + 1;
                                    long long v86 = operator new(v87 + 1);
                                    *(void *)&__dst[8] = v85;
                                    *(void *)&char __dst[16] = v88 | 0x8000000000000000;
                                    *(void *)long long __dst = v86;
                                  }
                                  else
                                  {
                                    __dst[23] = v84;
                                    long long v86 = __dst;
                                    if (!v84)
                                    {
LABEL_101:
                                      v86[v85] = 0;
                                      char v89 = operator new(0x28uLL);
                                      v89[1] = *(_OWORD *)__dst;
                                      *((void *)v89 + 4) = *(void *)&__dst[16];
                                      uint64_t v90 = *a2;
                                      *(void *)char v89 = *a2;
                                      *((void *)v89 + 1) = a2;
                                      *(void *)(v90 + 8) = v89;
                                      *a2 = (uint64_t)v89;
                                      ++a2[2];
                                      uint64_t v91 = log_get_logging_obg("com.apple.threadradiod", "default");
                                      if (v91)
                                      {
                                        if (syslog_is_the_mask_enabled(7)
                                          && os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
                                        {
                                          *(_DWORD *)long long __dst = 67109632;
                                          *(_DWORD *)&__dst[4] = State;
                                          *(_WORD *)&__dst[8] = 1024;
                                          *(_DWORD *)&__dst[10] = v75;
                                          *(_WORD *)&__dst[14] = 1024;
                                          *(_DWORD *)&char __dst[16] = v83;
                                          _os_log_debug_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "States:[Joiner=%d, Commissioner=%d, BorderAgent=%d]", __dst, 0x14u);
                                        }
                                      }
                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        -[PowerEventHandler_Rcp init:]();
                                      }
                                      uint64_t v92 = log_get_logging_obg("com.apple.threadradiod", "default");
                                      if (v92)
                                      {
                                        if (syslog_is_the_mask_enabled(7)
                                          && os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
                                        {
                                          HostInterpreter::GetRcpStateInfo();
                                        }
                                      }
                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        -[PowerEventHandler_Rcp init:]();
                                      }
                                      strcpy(__str, "IP Addresses:");
                                      size_t v93 = strlen(__str);
                                      if (v93 > 0x7FFFFFFFFFFFFFF7) {
                                        std::string::__throw_length_error[abi:ne180100]();
                                      }
                                      size_t v94 = v93;
                                      if (v93 >= 0x17)
                                      {
                                        uint64_t v97 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
                                        if ((v93 | 7) != 0x17) {
                                          uint64_t v97 = v93 | 7;
                                        }
                                        uint64_t v98 = v97 + 1;
                                        uint64_t v95 = operator new(v97 + 1);
                                        *(void *)&__dst[8] = v94;
                                        *(void *)&char __dst[16] = v98 | 0x8000000000000000;
                                        *(void *)long long __dst = v95;
                                        uint64_t v96 = v284;
                                      }
                                      else
                                      {
                                        __dst[23] = v93;
                                        uint64_t v95 = __dst;
                                        uint64_t v96 = v284;
                                        if (!v93)
                                        {
LABEL_121:
                                          v95[v94] = 0;
                                          xpc_object_t v99 = operator new(0x28uLL);
                                          v99[1] = *(_OWORD *)__dst;
                                          *((void *)v99 + 4) = *(void *)&__dst[16];
                                          uint64_t v100 = *a2;
                                          *(void *)xpc_object_t v99 = *a2;
                                          *((void *)v99 + 1) = a2;
                                          *(void *)(v100 + 8) = v99;
                                          *a2 = (uint64_t)v99;
                                          ++a2[2];
                                          uint64_t UnicastAddresses = otIp6GetUnicastAddresses(*(void *)(v96 + 224));
                                          if (UnicastAddresses)
                                          {
                                            int v102 = 0;
                                            do
                                            {
                                              otIp6AddressToString(UnicastAddresses, v327, 40);
                                              snprintf(__str, 0x3E8uLL, "[%u] Addr = %s prefix leuint64_t n =  %u Valid Lifetime = 0x%x Preferred Lifetime = 0x%x", v102, v327, *(unsigned __int8 *)(UnicastAddresses + 16), (*(unsigned __int8 *)(UnicastAddresses + 18) >> 1) & 1, *(unsigned char *)(UnicastAddresses + 18) & 1);
                                              size_t v103 = strlen(__str);
                                              if (v103 > 0x7FFFFFFFFFFFFFF7) {
                                                std::string::__throw_length_error[abi:ne180100]();
                                              }
                                              size_t v104 = v103;
                                              if (v103 >= 0x17)
                                              {
                                                uint64_t v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                if ((v103 | 7) != 0x17) {
                                                  uint64_t v106 = v103 | 7;
                                                }
                                                uint64_t v107 = v106 + 1;
                                                uint64_t v105 = operator new(v106 + 1);
                                                *(void *)&__dst[8] = v104;
                                                *(void *)&char __dst[16] = v107 | 0x8000000000000000;
                                                *(void *)long long __dst = v105;
                                              }
                                              else
                                              {
                                                __dst[23] = v103;
                                                uint64_t v105 = __dst;
                                                if (!v103) {
                                                  goto LABEL_134;
                                                }
                                              }
                                              memcpy(v105, __str, v104);
LABEL_134:
                                              v105[v104] = 0;
                                              uint64_t v108 = operator new(0x28uLL);
                                              v108[1] = *(_OWORD *)__dst;
                                              *((void *)v108 + 4) = *(void *)&__dst[16];
                                              uint64_t v109 = *a2;
                                              *(void *)uint64_t v108 = *a2;
                                              *((void *)v108 + 1) = a2;
                                              *(void *)(v109 + 8) = v108;
                                              *a2 = (uint64_t)v108;
                                              ++a2[2];
                                              int v110 = log_get_logging_obg("com.apple.threadradiod", "default");
                                              if (v110)
                                              {
                                                if (syslog_is_the_mask_enabled(7)
                                                  && os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
                                                {
                                                  int v111 = *(unsigned __int8 *)(UnicastAddresses + 16);
                                                  unsigned int v112 = *(unsigned __int8 *)(UnicastAddresses + 18);
                                                  *(_DWORD *)long long __dst = 136315906;
                                                  *(void *)&__dst[4] = v327;
                                                  *(_WORD *)&__dst[12] = 1024;
                                                  *(_DWORD *)&__dst[14] = v111;
                                                  *(_WORD *)&__dst[18] = 1024;
                                                  *(_DWORD *)&__dst[20] = v112 & 1;
                                                  *(_WORD *)&unsigned char __dst[24] = 1024;
                                                  *(_DWORD *)std::string::value_type v294 = (v112 >> 1) & 1;
                                                  _os_log_debug_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "%s Prefix __int16 Length = %d Preferred = 0x%x Valid = 0x%x", __dst, 0x1Eu);
                                                }
                                              }
                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                              {
                                                *(_DWORD *)long long __dst = 136315394;
                                                *(void *)&__dst[4] = "com.apple.wpantund.ncp";
                                                *(_WORD *)&__dst[12] = 2080;
                                                *(void *)&__dst[14] = "default";
                                                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __dst, 0x16u);
                                              }
                                              uint64_t UnicastAddresses = *(void *)(UnicastAddresses + 24);
                                              ++v102;
                                            }
                                            while (UnicastAddresses);
                                          }
                                          uint64_t v113 = log_get_logging_obg("com.apple.threadradiod", "default");
                                          if (v113)
                                          {
                                            if (syslog_is_the_mask_enabled(7)
                                              && os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
                                            {
                                              HostInterpreter::GetRcpStateInfo();
                                            }
                                          }
                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                          {
                                            -[PowerEventHandler_Rcp init:]();
                                          }
                                          strcpy(__str, "Message Buffers:");
                                          size_t v114 = strlen(__str);
                                          if (v114 > 0x7FFFFFFFFFFFFFF7) {
                                            std::string::__throw_length_error[abi:ne180100]();
                                          }
                                          size_t v115 = v114;
                                          if (v114 >= 0x17)
                                          {
                                            uint64_t v118 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
                                            if ((v114 | 7) != 0x17) {
                                              uint64_t v118 = v114 | 7;
                                            }
                                            uint64_t v119 = v118 + 1;
                                            uint64_t v116 = operator new(v118 + 1);
                                            *(void *)&__dst[8] = v115;
                                            *(void *)&char __dst[16] = v119 | 0x8000000000000000;
                                            *(void *)long long __dst = v116;
                                            uint64_t v117 = v284;
                                          }
                                          else
                                          {
                                            __dst[23] = v114;
                                            uint64_t v116 = __dst;
                                            uint64_t v117 = v284;
                                            if (!v114)
                                            {
LABEL_152:
                                              v116[v115] = 0;
                                              BOOL v120 = operator new(0x28uLL);
                                              v120[1] = *(_OWORD *)__dst;
                                              *((void *)v120 + 4) = *(void *)&__dst[16];
                                              uint64_t v121 = *a2;
                                              *(void *)BOOL v120 = *a2;
                                              *((void *)v120 + 1) = a2;
                                              *(void *)(v121 + 8) = v120;
                                              *a2 = (uint64_t)v120;
                                              ++a2[2];
                                              otMessageGetBufferInfo(*(void *)(v117 + 224), (uint64_t)v289);
                                              BOOL v122 = log_get_logging_obg("com.apple.threadradiod", "default");
                                              if (v122)
                                              {
                                                if (syslog_is_the_mask_enabled(7)
                                                  && os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
                                                {
                                                  HostInterpreter::GetRcpStateInfo();
                                                }
                                              }
                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                              {
                                                -[PowerEventHandler_Rcp init:]();
                                              }
                                              snprintf(__str, 0x3E8uLL, "%-20s = %u", "TotalBuffers", v289[0]);
                                              size_t v123 = strlen(__str);
                                              if (v123 > 0x7FFFFFFFFFFFFFF7) {
                                                std::string::__throw_length_error[abi:ne180100]();
                                              }
                                              size_t v124 = v123;
                                              if (v123 >= 0x17)
                                              {
                                                uint64_t v126 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                if ((v123 | 7) != 0x17) {
                                                  uint64_t v126 = v123 | 7;
                                                }
                                                uint64_t v127 = v126 + 1;
                                                v125 = operator new(v126 + 1);
                                                *(void *)&__dst[8] = v124;
                                                *(void *)&char __dst[16] = v127 | 0x8000000000000000;
                                                *(void *)long long __dst = v125;
                                              }
                                              else
                                              {
                                                __dst[23] = v123;
                                                v125 = __dst;
                                                if (!v123)
                                                {
LABEL_166:
                                                  v125[v124] = 0;
                                                  uint64_t v128 = operator new(0x28uLL);
                                                  v128[1] = *(_OWORD *)__dst;
                                                  *((void *)v128 + 4) = *(void *)&__dst[16];
                                                  uint64_t v129 = *a2;
                                                  *(void *)uint64_t v128 = *a2;
                                                  *((void *)v128 + 1) = a2;
                                                  *(void *)(v129 + 8) = v128;
                                                  *a2 = (uint64_t)v128;
                                                  ++a2[2];
                                                  int v130 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                  if (v130)
                                                  {
                                                    if (syslog_is_the_mask_enabled(7)
                                                      && os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
                                                    {
                                                      HostInterpreter::GetRcpStateInfo();
                                                    }
                                                  }
                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                  {
                                                    -[PowerEventHandler_Rcp init:]();
                                                  }
                                                  snprintf(__str, 0x3E8uLL, "%-20s = %u", "FreeBuffers", v289[1]);
                                                  size_t v131 = strlen(__str);
                                                  if (v131 > 0x7FFFFFFFFFFFFFF7) {
                                                    std::string::__throw_length_error[abi:ne180100]();
                                                  }
                                                  size_t v132 = v131;
                                                  if (v131 >= 0x17)
                                                  {
                                                    uint64_t v134 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                    if ((v131 | 7) != 0x17) {
                                                      uint64_t v134 = v131 | 7;
                                                    }
                                                    uint64_t v135 = v134 + 1;
                                                    v133 = operator new(v134 + 1);
                                                    *(void *)&__dst[8] = v132;
                                                    *(void *)&char __dst[16] = v135 | 0x8000000000000000;
                                                    *(void *)long long __dst = v133;
                                                  }
                                                  else
                                                  {
                                                    __dst[23] = v131;
                                                    v133 = __dst;
                                                    if (!v131)
                                                    {
LABEL_180:
                                                      v133[v132] = 0;
                                                      std::string::size_type v136 = operator new(0x28uLL);
                                                      v136[1] = *(_OWORD *)__dst;
                                                      *((void *)v136 + 4) = *(void *)&__dst[16];
                                                      uint64_t v137 = *a2;
                                                      *(void *)std::string::size_type v136 = *a2;
                                                      *((void *)v136 + 1) = a2;
                                                      *(void *)(v137 + 8) = v136;
                                                      *a2 = (uint64_t)v136;
                                                      ++a2[2];
                                                      v138 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                      if (v138)
                                                      {
                                                        if (syslog_is_the_mask_enabled(7)
                                                          && os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
                                                        {
                                                          HostInterpreter::GetRcpStateInfo();
                                                        }
                                                      }
                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                      {
                                                        -[PowerEventHandler_Rcp init:]();
                                                      }
                                                      snprintf(__str, 0x3E8uLL, "%-20s = %u", "6loSendQueue.mNumMessages", v289[4]);
                                                      size_t v139 = strlen(__str);
                                                      if (v139 > 0x7FFFFFFFFFFFFFF7) {
                                                        std::string::__throw_length_error[abi:ne180100]();
                                                      }
                                                      size_t v140 = v139;
                                                      if (v139 >= 0x17)
                                                      {
                                                        uint64_t v142 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                        if ((v139 | 7) != 0x17) {
                                                          uint64_t v142 = v139 | 7;
                                                        }
                                                        uint64_t v143 = v142 + 1;
                                                        int v141 = operator new(v142 + 1);
                                                        *(void *)&__dst[8] = v140;
                                                        *(void *)&char __dst[16] = v143 | 0x8000000000000000;
                                                        *(void *)long long __dst = v141;
                                                      }
                                                      else
                                                      {
                                                        __dst[23] = v139;
                                                        int v141 = __dst;
                                                        if (!v139)
                                                        {
LABEL_194:
                                                          v141[v140] = 0;
                                                          uint64_t v144 = operator new(0x28uLL);
                                                          v144[1] = *(_OWORD *)__dst;
                                                          *((void *)v144 + 4) = *(void *)&__dst[16];
                                                          uint64_t v145 = *a2;
                                                          *(void *)uint64_t v144 = *a2;
                                                          *((void *)v144 + 1) = a2;
                                                          *(void *)(v145 + 8) = v144;
                                                          *a2 = (uint64_t)v144;
                                                          ++a2[2];
                                                          unsigned __int8 v146 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                          if (v146)
                                                          {
                                                            if (syslog_is_the_mask_enabled(7)
                                                              && os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG))
                                                            {
                                                              HostInterpreter::GetRcpStateInfo();
                                                            }
                                                          }
                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                          {
                                                            -[PowerEventHandler_Rcp init:]();
                                                          }
                                                          snprintf(__str, 0x3E8uLL, "%-20s = %u", "6loSendQueue.mNumBuffers", v289[5]);
                                                          size_t v147 = strlen(__str);
                                                          if (v147 > 0x7FFFFFFFFFFFFFF7) {
                                                            std::string::__throw_length_error[abi:ne180100]();
                                                          }
                                                          size_t v148 = v147;
                                                          if (v147 >= 0x17)
                                                          {
                                                            uint64_t v150 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                            if ((v147 | 7) != 0x17) {
                                                              uint64_t v150 = v147 | 7;
                                                            }
                                                            uint64_t v151 = v150 + 1;
                                                            uint64_t v149 = operator new(v150 + 1);
                                                            *(void *)&__dst[8] = v148;
                                                            *(void *)&char __dst[16] = v151 | 0x8000000000000000;
                                                            *(void *)long long __dst = v149;
                                                          }
                                                          else
                                                          {
                                                            __dst[23] = v147;
                                                            uint64_t v149 = __dst;
                                                            if (!v147)
                                                            {
LABEL_208:
                                                              v149[v148] = 0;
                                                              uint64_t v152 = operator new(0x28uLL);
                                                              v152[1] = *(_OWORD *)__dst;
                                                              *((void *)v152 + 4) = *(void *)&__dst[16];
                                                              uint64_t v153 = *a2;
                                                              *(void *)uint64_t v152 = *a2;
                                                              *((void *)v152 + 1) = a2;
                                                              *(void *)(v153 + 8) = v152;
                                                              *a2 = (uint64_t)v152;
                                                              ++a2[2];
                                                              int v154 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                              if (v154)
                                                              {
                                                                if (syslog_is_the_mask_enabled(7)
                                                                  && os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
                                                                {
                                                                  HostInterpreter::GetRcpStateInfo();
                                                                }
                                                              }
                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                              {
                                                                -[PowerEventHandler_Rcp init:]();
                                                              }
                                                              snprintf(__str, 0x3E8uLL, "%-20s = %u", "6loReassemblyQueue.mNumMessages", v289[8]);
                                                              size_t v155 = strlen(__str);
                                                              if (v155 > 0x7FFFFFFFFFFFFFF7) {
                                                                std::string::__throw_length_error[abi:ne180100]();
                                                              }
                                                              size_t v156 = v155;
                                                              if (v155 >= 0x17)
                                                              {
                                                                uint64_t v158 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                if ((v155 | 7) != 0x17) {
                                                                  uint64_t v158 = v155 | 7;
                                                                }
                                                                uint64_t v159 = v158 + 1;
                                                                int v157 = operator new(v158 + 1);
                                                                *(void *)&__dst[8] = v156;
                                                                *(void *)&char __dst[16] = v159 | 0x8000000000000000;
                                                                *(void *)long long __dst = v157;
                                                              }
                                                              else
                                                              {
                                                                __dst[23] = v155;
                                                                int v157 = __dst;
                                                                if (!v155)
                                                                {
LABEL_222:
                                                                  v157[v156] = 0;
                                                                  uint64_t v160 = operator new(0x28uLL);
                                                                  v160[1] = *(_OWORD *)__dst;
                                                                  *((void *)v160 + 4) = *(void *)&__dst[16];
                                                                  uint64_t v161 = *a2;
                                                                  *(void *)uint64_t v160 = *a2;
                                                                  *((void *)v160 + 1) = a2;
                                                                  *(void *)(v161 + 8) = v160;
                                                                  *a2 = (uint64_t)v160;
                                                                  ++a2[2];
                                                                  uint64_t v162 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                  if (v162)
                                                                  {
                                                                    if (syslog_is_the_mask_enabled(7)
                                                                      && os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
                                                                    {
                                                                      HostInterpreter::GetRcpStateInfo();
                                                                    }
                                                                  }
                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                  {
                                                                    -[PowerEventHandler_Rcp init:]();
                                                                  }
                                                                  snprintf(__str, 0x3E8uLL, "%-20s = %u", "6loReassemblyQueue.mNumBuffers", v289[9]);
                                                                  size_t v163 = strlen(__str);
                                                                  if (v163 > 0x7FFFFFFFFFFFFFF7) {
                                                                    std::string::__throw_length_error[abi:ne180100]();
                                                                  }
                                                                  size_t v164 = v163;
                                                                  if (v163 >= 0x17)
                                                                  {
                                                                    uint64_t v166 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                    if ((v163 | 7) != 0x17) {
                                                                      uint64_t v166 = v163 | 7;
                                                                    }
                                                                    uint64_t v167 = v166 + 1;
                                                                    std::string::value_type v165 = operator new(v166 + 1);
                                                                    *(void *)&__dst[8] = v164;
                                                                    *(void *)&char __dst[16] = v167 | 0x8000000000000000;
                                                                    *(void *)long long __dst = v165;
                                                                  }
                                                                  else
                                                                  {
                                                                    __dst[23] = v163;
                                                                    std::string::value_type v165 = __dst;
                                                                    if (!v163)
                                                                    {
LABEL_236:
                                                                      v165[v164] = 0;
                                                                      uint64_t v168 = operator new(0x28uLL);
                                                                      v168[1] = *(_OWORD *)__dst;
                                                                      *((void *)v168 + 4) = *(void *)&__dst[16];
                                                                      uint64_t v169 = *a2;
                                                                      *(void *)uint64_t v168 = *a2;
                                                                      *((void *)v168 + 1) = a2;
                                                                      *(void *)(v169 + 8) = v168;
                                                                      *a2 = (uint64_t)v168;
                                                                      ++a2[2];
                                                                      uint64_t v170 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                      if (v170)
                                                                      {
                                                                        if (syslog_is_the_mask_enabled(7)
                                                                          && os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
                                                                        {
                                                                          HostInterpreter::GetRcpStateInfo();
                                                                        }
                                                                      }
                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                      {
                                                                        -[PowerEventHandler_Rcp init:]();
                                                                      }
                                                                      snprintf(__str, 0x3E8uLL, "%-20s = %u", "Ip6Queue.mNumMessages", v289[12]);
                                                                      size_t v171 = strlen(__str);
                                                                      if (v171 > 0x7FFFFFFFFFFFFFF7) {
                                                                        std::string::__throw_length_error[abi:ne180100]();
                                                                      }
                                                                      size_t v172 = v171;
                                                                      if (v171 >= 0x17)
                                                                      {
                                                                        uint64_t v174 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                        if ((v171 | 7) != 0x17) {
                                                                          uint64_t v174 = v171 | 7;
                                                                        }
                                                                        uint64_t v175 = v174 + 1;
                                                                        uint64_t v173 = operator new(v174 + 1);
                                                                        *(void *)&__dst[8] = v172;
                                                                        *(void *)&char __dst[16] = v175 | 0x8000000000000000;
                                                                        *(void *)long long __dst = v173;
                                                                      }
                                                                      else
                                                                      {
                                                                        __dst[23] = v171;
                                                                        uint64_t v173 = __dst;
                                                                        if (!v171)
                                                                        {
LABEL_250:
                                                                          v173[v172] = 0;
                                                                          int v176 = operator new(0x28uLL);
                                                                          v176[1] = *(_OWORD *)__dst;
                                                                          *((void *)v176 + 4) = *(void *)&__dst[16];
                                                                          uint64_t v177 = *a2;
                                                                          *(void *)int v176 = *a2;
                                                                          *((void *)v176 + 1) = a2;
                                                                          *(void *)(v177 + 8) = v176;
                                                                          *a2 = (uint64_t)v176;
                                                                          ++a2[2];
                                                                          v178 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                          if (v178)
                                                                          {
                                                                            if (syslog_is_the_mask_enabled(7)
                                                                              && os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                                                                            {
                                                                              HostInterpreter::GetRcpStateInfo();
                                                                            }
                                                                          }
                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                          {
                                                                            -[PowerEventHandler_Rcp init:]();
                                                                          }
                                                                          snprintf(__str, 0x3E8uLL, "%-20s = %u", "Ip6Queue.mNumBuffers", v289[13]);
                                                                          size_t v179 = strlen(__str);
                                                                          if (v179 > 0x7FFFFFFFFFFFFFF7) {
                                                                            std::string::__throw_length_error[abi:ne180100]();
                                                                          }
                                                                          size_t v180 = v179;
                                                                          if (v179 >= 0x17)
                                                                          {
                                                                            uint64_t v182 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                            if ((v179 | 7) != 0x17) {
                                                                              uint64_t v182 = v179 | 7;
                                                                            }
                                                                            uint64_t v183 = v182 + 1;
                                                                            v181 = operator new(v182 + 1);
                                                                            *(void *)&__dst[8] = v180;
                                                                            *(void *)&char __dst[16] = v183 | 0x8000000000000000;
                                                                            *(void *)long long __dst = v181;
                                                                          }
                                                                          else
                                                                          {
                                                                            __dst[23] = v179;
                                                                            v181 = __dst;
                                                                            if (!v179)
                                                                            {
LABEL_264:
                                                                              v181[v180] = 0;
                                                                              uint64_t v184 = operator new(0x28uLL);
                                                                              v184[1] = *(_OWORD *)__dst;
                                                                              *((void *)v184 + 4) = *(void *)&__dst[16];
                                                                              uint64_t v185 = *a2;
                                                                              *(void *)uint64_t v184 = *a2;
                                                                              *((void *)v184 + 1) = a2;
                                                                              *(void *)(v185 + 8) = v184;
                                                                              *a2 = (uint64_t)v184;
                                                                              ++a2[2];
                                                                              uint64_t v186 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                              if (v186)
                                                                              {
                                                                                if (syslog_is_the_mask_enabled(7)
                                                                                  && os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
                                                                                {
                                                                                  HostInterpreter::GetRcpStateInfo();
                                                                                }
                                                                              }
                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                              {
                                                                                -[PowerEventHandler_Rcp init:]();
                                                                              }
                                                                              snprintf(__str, 0x3E8uLL, "%-20s = %u", "MplQueue.mNumMessages", v289[16]);
                                                                              size_t v187 = strlen(__str);
                                                                              if (v187 > 0x7FFFFFFFFFFFFFF7) {
                                                                                std::string::__throw_length_error[abi:ne180100]();
                                                                              }
                                                                              size_t v188 = v187;
                                                                              if (v187 >= 0x17)
                                                                              {
                                                                                uint64_t v190 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                if ((v187 | 7) != 0x17) {
                                                                                  uint64_t v190 = v187 | 7;
                                                                                }
                                                                                uint64_t v191 = v190 + 1;
                                                                                v189 = operator new(v190 + 1);
                                                                                *(void *)&__dst[8] = v188;
                                                                                *(void *)&char __dst[16] = v191 | 0x8000000000000000;
                                                                                *(void *)long long __dst = v189;
                                                                              }
                                                                              else
                                                                              {
                                                                                __dst[23] = v187;
                                                                                v189 = __dst;
                                                                                if (!v187)
                                                                                {
LABEL_278:
                                                                                  v189[v188] = 0;
                                                                                  v192 = operator new(0x28uLL);
                                                                                  v192[1] = *(_OWORD *)__dst;
                                                                                  *((void *)v192 + 4) = *(void *)&__dst[16];
                                                                                  uint64_t v193 = *a2;
                                                                                  *(void *)v192 = *a2;
                                                                                  *((void *)v192 + 1) = a2;
                                                                                  *(void *)(v193 + 8) = v192;
                                                                                  *a2 = (uint64_t)v192;
                                                                                  ++a2[2];
                                                                                  std::string::value_type v194 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                  if (v194)
                                                                                  {
                                                                                    if (syslog_is_the_mask_enabled(7)
                                                                                      && os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
                                                                                    {
                                                                                      HostInterpreter::GetRcpStateInfo();
                                                                                    }
                                                                                  }
                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                  {
                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                  }
                                                                                  snprintf(__str, 0x3E8uLL, "%-20s = %u", "MplQueue.mNumBuffers", v289[17]);
                                                                                  size_t v195 = strlen(__str);
                                                                                  if (v195 > 0x7FFFFFFFFFFFFFF7) {
                                                                                    std::string::__throw_length_error[abi:ne180100]();
                                                                                  }
                                                                                  size_t v196 = v195;
                                                                                  if (v195 >= 0x17)
                                                                                  {
                                                                                    uint64_t v198 = (v195 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 8;
                                                                                    if ((v195 | 7) != 0x17) {
                                                                                      uint64_t v198 = v195 | 7;
                                                                                    }
                                                                                    uint64_t v199 = v198 + 1;
                                                                                    v197 = operator new(v198 + 1);
                                                                                    *(void *)&__dst[8] = v196;
                                                                                    *(void *)&char __dst[16] = v199 | 0x8000000000000000;
                                                                                    *(void *)long long __dst = v197;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    __dst[23] = v195;
                                                                                    v197 = __dst;
                                                                                    if (!v195)
                                                                                    {
LABEL_292:
                                                                                      v197[v196] = 0;
                                                                                      v200 = operator new(0x28uLL);
                                                                                      v200[1] = *(_OWORD *)__dst;
                                                                                      *((void *)v200 + 4) = *(void *)&__dst[16];
                                                                                      uint64_t v201 = *a2;
                                                                                      *(void *)v200 = *a2;
                                                                                      *((void *)v200 + 1) = a2;
                                                                                      *(void *)(v201 + 8) = v200;
                                                                                      *a2 = (uint64_t)v200;
                                                                                      ++a2[2];
                                                                                      uint64_t v202 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                      if (v202)
                                                                                      {
                                                                                        if (syslog_is_the_mask_enabled(7)
                                                                                          && os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
                                                                                        {
                                                                                          HostInterpreter::GetRcpStateInfo();
                                                                                        }
                                                                                      }
                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                      {
                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                      }
                                                                                      snprintf(__str, 0x3E8uLL, "%-20s = %u", "MleQueue.mNumMessages", v289[20]);
                                                                                      size_t v203 = strlen(__str);
                                                                                      if (v203 > 0x7FFFFFFFFFFFFFF7) {
                                                                                        std::string::__throw_length_error[abi:ne180100]();
                                                                                      }
                                                                                      size_t v204 = v203;
                                                                                      if (v203 >= 0x17)
                                                                                      {
                                                                                        uint64_t v206 = (v203 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 8;
                                                                                        if ((v203 | 7) != 0x17) {
                                                                                          uint64_t v206 = v203 | 7;
                                                                                        }
                                                                                        uint64_t v207 = v206 + 1;
                                                                                        unsigned __int8 v205 = operator new(v206 + 1);
                                                                                        *(void *)&__dst[8] = v204;
                                                                                        *(void *)&char __dst[16] = v207 | 0x8000000000000000;
                                                                                        *(void *)long long __dst = v205;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        __dst[23] = v203;
                                                                                        unsigned __int8 v205 = __dst;
                                                                                        if (!v203)
                                                                                        {
LABEL_306:
                                                                                          v205[v204] = 0;
                                                                                          uint64_t v208 = operator new(0x28uLL);
                                                                                          v208[1] = *(_OWORD *)__dst;
                                                                                          *((void *)v208 + 4) = *(void *)&__dst[16];
                                                                                          uint64_t v209 = *a2;
                                                                                          *(void *)uint64_t v208 = *a2;
                                                                                          *((void *)v208 + 1) = a2;
                                                                                          *(void *)(v209 + 8) = v208;
                                                                                          *a2 = (uint64_t)v208;
                                                                                          ++a2[2];
                                                                                          uint64_t v210 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                          if (v210)
                                                                                          {
                                                                                            if (syslog_is_the_mask_enabled(7)
                                                                                              && os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
                                                                                            {
                                                                                              HostInterpreter::GetRcpStateInfo();
                                                                                            }
                                                                                          }
                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                          {
                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                          }
                                                                                          snprintf(__str, 0x3E8uLL, "%-20s = %u", "MleQueue.mNumBuffers", v289[21]);
                                                                                          size_t v211 = strlen(__str);
                                                                                          if (v211 > 0x7FFFFFFFFFFFFFF7) {
                                                                                            std::string::__throw_length_error[abi:ne180100]();
                                                                                          }
                                                                                          size_t v212 = v211;
                                                                                          if (v211 >= 0x17)
                                                                                          {
                                                                                            uint64_t v214 = (v211 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 8;
                                                                                            if ((v211 | 7) != 0x17) {
                                                                                              uint64_t v214 = v211 | 7;
                                                                                            }
                                                                                            uint64_t v215 = v214 + 1;
                                                                                            uint64_t v213 = operator new(v214 + 1);
                                                                                            *(void *)&__dst[8] = v212;
                                                                                            *(void *)&char __dst[16] = v215 | 0x8000000000000000;
                                                                                            *(void *)long long __dst = v213;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            __dst[23] = v211;
                                                                                            uint64_t v213 = __dst;
                                                                                            if (!v211)
                                                                                            {
LABEL_320:
                                                                                              v213[v212] = 0;
                                                                                              v216 = operator new(0x28uLL);
                                                                                              v216[1] = *(_OWORD *)__dst;
                                                                                              *((void *)v216 + 4) = *(void *)&__dst[16];
                                                                                              uint64_t v217 = *a2;
                                                                                              *(void *)v216 = *a2;
                                                                                              *((void *)v216 + 1) = a2;
                                                                                              *(void *)(v217 + 8) = v216;
                                                                                              *a2 = (uint64_t)v216;
                                                                                              ++a2[2];
                                                                                              size_t v218 = strlen(__str);
                                                                                              if (v218 > 0x7FFFFFFFFFFFFFF7) {
                                                                                                std::string::__throw_length_error[abi:ne180100]();
                                                                                              }
                                                                                              size_t v219 = v218;
                                                                                              if (v218 >= 0x17)
                                                                                              {
                                                                                                uint64_t v221 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                                if ((v218 | 7) != 0x17) {
                                                                                                  uint64_t v221 = v218 | 7;
                                                                                                }
                                                                                                uint64_t v222 = v221 + 1;
                                                                                                uint64_t v220 = operator new(v221 + 1);
                                                                                                *(void *)&__dst[8] = v219;
                                                                                                *(void *)&char __dst[16] = v222 | 0x8000000000000000;
                                                                                                *(void *)long long __dst = v220;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                __dst[23] = v218;
                                                                                                uint64_t v220 = __dst;
                                                                                                if (!v218)
                                                                                                {
LABEL_328:
                                                                                                  v220[v219] = 0;
                                                                                                  std::string::value_type v223 = operator new(0x28uLL);
                                                                                                  v223[1] = *(_OWORD *)__dst;
                                                                                                  *((void *)v223 + 4) = *(void *)&__dst[16];
                                                                                                  uint64_t v224 = *a2;
                                                                                                  *(void *)std::string::value_type v223 = *a2;
                                                                                                  *((void *)v223 + 1) = a2;
                                                                                                  *(void *)(v224 + 8) = v223;
                                                                                                  *a2 = (uint64_t)v223;
                                                                                                  ++a2[2];
                                                                                                  uint64_t v225 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                  if (v225)
                                                                                                  {
                                                                                                    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG)) {
                                                                                                      HostInterpreter::GetRcpStateInfo();
                                                                                                    }
                                                                                                  }
                                                                                                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                  {
                                                                                                    -[PowerEventHandler_Rcp init:]();
                                                                                                  }
                                                                                                  snprintf(__str, 0x3E8uLL, "%-20s = %u", "CoapQueue.mNumMessages", v289[24]);
                                                                                                  size_t v226 = strlen(__str);
                                                                                                  if (v226 > 0x7FFFFFFFFFFFFFF7) {
                                                                                                    std::string::__throw_length_error[abi:ne180100]();
                                                                                                  }
                                                                                                  size_t v227 = v226;
                                                                                                  if (v226 >= 0x17)
                                                                                                  {
                                                                                                    uint64_t v229 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                                    if ((v226 | 7) != 0x17) {
                                                                                                      uint64_t v229 = v226 | 7;
                                                                                                    }
                                                                                                    uint64_t v230 = v229 + 1;
                                                                                                    uint64_t v228 = operator new(v229 + 1);
                                                                                                    *(void *)&__dst[8] = v227;
                                                                                                    *(void *)&char __dst[16] = v230 | 0x8000000000000000;
                                                                                                    *(void *)long long __dst = v228;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    __dst[23] = v226;
                                                                                                    uint64_t v228 = __dst;
                                                                                                    if (!v226)
                                                                                                    {
LABEL_342:
                                                                                                      v228[v227] = 0;
                                                                                                      unsigned __int8 v231 = operator new(0x28uLL);
                                                                                                      v231[1] = *(_OWORD *)__dst;
                                                                                                      *((void *)v231 + 4) = *(void *)&__dst[16];
                                                                                                      uint64_t v232 = *a2;
                                                                                                      *(void *)unsigned __int8 v231 = *a2;
                                                                                                      *((void *)v231 + 1) = a2;
                                                                                                      *(void *)(v232 + 8) = v231;
                                                                                                      *a2 = (uint64_t)v231;
                                                                                                      ++a2[2];
                                                                                                      uint64_t v233 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                      if (v233)
                                                                                                      {
                                                                                                        if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG)) {
                                                                                                          HostInterpreter::GetRcpStateInfo();
                                                                                                        }
                                                                                                      }
                                                                                                      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                      {
                                                                                                        -[PowerEventHandler_Rcp init:]();
                                                                                                      }
                                                                                                      snprintf(__str, 0x3E8uLL, "%-20s = %u", "CoapQueue.mNumBuffers", v289[25]);
                                                                                                      size_t v234 = strlen(__str);
                                                                                                      if (v234 > 0x7FFFFFFFFFFFFFF7) {
                                                                                                        std::string::__throw_length_error[abi:ne180100]();
                                                                                                      }
                                                                                                      size_t v235 = v234;
                                                                                                      if (v234 >= 0x17)
                                                                                                      {
                                                                                                        uint64_t v237 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                                        if ((v234 | 7) != 0x17) {
                                                                                                          uint64_t v237 = v234 | 7;
                                                                                                        }
                                                                                                        uint64_t v238 = v237 + 1;
                                                                                                        v236 = operator new(v237 + 1);
                                                                                                        *(void *)&__dst[8] = v235;
                                                                                                        *(void *)&char __dst[16] = v238 | 0x8000000000000000;
                                                                                                        *(void *)long long __dst = v236;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        __dst[23] = v234;
                                                                                                        v236 = __dst;
                                                                                                        if (!v234)
                                                                                                        {
LABEL_356:
                                                                                                          v236[v235] = 0;
                                                                                                          uint64_t v239 = operator new(0x28uLL);
                                                                                                          v239[1] = *(_OWORD *)__dst;
                                                                                                          *((void *)v239 + 4) = *(void *)&__dst[16];
                                                                                                          uint64_t v240 = *a2;
                                                                                                          *(void *)uint64_t v239 = *a2;
                                                                                                          *((void *)v239 + 1) = a2;
                                                                                                          *(void *)(v240 + 8) = v239;
                                                                                                          *a2 = (uint64_t)v239;
                                                                                                          ++a2[2];
                                                                                                          std::string::value_type v241 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                          if (v241)
                                                                                                          {
                                                                                                            if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v241, OS_LOG_TYPE_DEBUG)) {
                                                                                                              HostInterpreter::GetRcpStateInfo();
                                                                                                            }
                                                                                                          }
                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                          {
                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                          }
                                                                                                          strcpy(__str, "Neighbours and Children:");
                                                                                                          size_t v242 = strlen(__str);
                                                                                                          if (v242 > 0x7FFFFFFFFFFFFFF7) {
                                                                                                            std::string::__throw_length_error[abi:ne180100]();
                                                                                                          }
                                                                                                          size_t v243 = v242;
                                                                                                          if (v242 >= 0x17)
                                                                                                          {
                                                                                                            uint64_t v245 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                                            if ((v242 | 7) != 0x17) {
                                                                                                              uint64_t v245 = v242 | 7;
                                                                                                            }
                                                                                                            uint64_t v246 = v245 + 1;
                                                                                                            std::string::value_type v244 = operator new(v245 + 1);
                                                                                                            *(void *)&__dst[8] = v243;
                                                                                                            *(void *)&char __dst[16] = v246 | 0x8000000000000000;
                                                                                                            *(void *)long long __dst = v244;
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            __dst[23] = v242;
                                                                                                            std::string::value_type v244 = __dst;
                                                                                                            if (!v242) {
                                                                                                              goto LABEL_370;
                                                                                                            }
                                                                                                          }
                                                                                                          memcpy(v244, __str, v243);
LABEL_370:
                                                                                                          v244[v243] = 0;
                                                                                                          uint64_t v247 = operator new(0x28uLL);
                                                                                                          v247[1] = *(_OWORD *)__dst;
                                                                                                          *((void *)v247 + 4) = *(void *)&__dst[16];
                                                                                                          uint64_t v248 = *a2;
                                                                                                          *(void *)uint64_t v247 = *a2;
                                                                                                          *((void *)v247 + 1) = a2;
                                                                                                          *(void *)(v248 + 8) = v247;
                                                                                                          *a2 = (uint64_t)v247;
                                                                                                          ++a2[2];
                                                                                                          int v249 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                          if (v249)
                                                                                                          {
                                                                                                            if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG)) {
                                                                                                              HostInterpreter::GetRcpStateInfo();
                                                                                                            }
                                                                                                          }
                                                                                                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                          {
                                                                                                            -[PowerEventHandler_Rcp init:]();
                                                                                                          }
                                                                                                          if (otThreadGetNextNeighborInfo(*(void *)(v284 + 224), &v292, (uint64_t)&v330))
                                                                                                          {
LABEL_377:
                                                                                                            v288[0] = 0;
                                                                                                            v288[1] = 0;
                                                                                                            if (otThreadGetNextCacheEntry(*(void *)(v284 + 224), (uint64_t)v286, (uint64_t)v288))
                                                                                                            {
                                                                                                              int v250 = 0;
                                                                                                              uint64_t v251 = v284;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              int v264 = 0;
                                                                                                              int v265 = 0;
                                                                                                              int v266 = 0;
                                                                                                              int v250 = 0;
                                                                                                              uint64_t v251 = v284;
                                                                                                              do
                                                                                                              {
                                                                                                                if (v287 == 2) {
                                                                                                                  int v267 = v266 + 1;
                                                                                                                }
                                                                                                                else {
                                                                                                                  int v267 = v266;
                                                                                                                }
                                                                                                                if (v287 == 3)
                                                                                                                {
                                                                                                                  int v267 = v266;
                                                                                                                  int v268 = v265 + 1;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  int v268 = v265;
                                                                                                                }
                                                                                                                if (v287 == 1)
                                                                                                                {
                                                                                                                  ++v264;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  int v266 = v267;
                                                                                                                  int v265 = v268;
                                                                                                                }
                                                                                                                int NextCacheEntry = otThreadGetNextCacheEntry(*(void *)(v251 + 224), (uint64_t)v286, (uint64_t)v288);
                                                                                                                ++v250;
                                                                                                                uint64_t v251 = v284;
                                                                                                              }
                                                                                                              while (!NextCacheEntry);
                                                                                                            }
                                                                                                            snprintf(__str, 0x3E8uLL, "%s %d %s %d", "Total entries in address cache :", v250, "Max address cache size:", 512);
                                                                                                            size_t v270 = strlen(__str);
                                                                                                            if (v270 > 0x7FFFFFFFFFFFFFF7) {
                                                                                                              std::string::__throw_length_error[abi:ne180100]();
                                                                                                            }
                                                                                                            size_t v271 = v270;
                                                                                                            if (v270 >= 0x17)
                                                                                                            {
                                                                                                              uint64_t v273 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                                              if ((v270 | 7) != 0x17) {
                                                                                                                uint64_t v273 = v270 | 7;
                                                                                                              }
                                                                                                              uint64_t v274 = v273 + 1;
                                                                                                              std::string::value_type v272 = operator new(v273 + 1);
                                                                                                              *(void *)&__dst[8] = v271;
                                                                                                              *(void *)&char __dst[16] = v274 | 0x8000000000000000;
                                                                                                              *(void *)long long __dst = v272;
                                                                                                              uint64_t v251 = v284;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              __dst[23] = v270;
                                                                                                              std::string::value_type v272 = __dst;
                                                                                                              if (!v270)
                                                                                                              {
LABEL_433:
                                                                                                                v272[v271] = 0;
                                                                                                                v275 = operator new(0x28uLL);
                                                                                                                v275[1] = *(_OWORD *)__dst;
                                                                                                                *((void *)v275 + 4) = *(void *)&__dst[16];
                                                                                                                uint64_t v276 = *a2;
                                                                                                                *(void *)v275 = *a2;
                                                                                                                *((void *)v275 + 1) = a2;
                                                                                                                *(void *)(v276 + 8) = v275;
                                                                                                                *a2 = (uint64_t)v275;
                                                                                                                ++a2[2];
                                                                                                                otNetDataGet(*(void *)(v251 + 224), 0, (unsigned __int8 *)__src, (char *)&v291);
                                                                                                                memset(v285, 0, sizeof(v285));
                                                                                                                std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v285, 0, __src, &__src[v291], v291);
                                                                                                                operator new();
                                                                                                              }
                                                                                                            }
                                                                                                            memcpy(v272, __str, v271);
                                                                                                            goto LABEL_433;
                                                                                                          }
                                                                                                          int v280 = 0;
                                                                                                          uint64_t v281 = 0;
                                                                                                          int v282 = 0;
                                                                                                          uint64_t v283 = 0;
                                                                                                          while (1)
                                                                                                          {
                                                                                                            BOOL v252 = (v348 & 8) == 0;
                                                                                                            long long v253 = log_get_logging_obg("com.apple.threadradiod", "default");
                                                                                                            char v254 = v253;
                                                                                                            if (v252)
                                                                                                            {
                                                                                                              if (v253)
                                                                                                              {
                                                                                                                if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
                                                                                                                {
                                                                                                                  if ((v348 & 8) != 0) {
                                                                                                                    int v255 = 67;
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    int v255 = 82;
                                                                                                                  }
                                                                                                                  *(_DWORD *)long long __dst = 67114240;
                                                                                                                  *(_DWORD *)&__dst[4] = v255;
                                                                                                                  *(_WORD *)&__dst[8] = 1024;
                                                                                                                  *(_DWORD *)&__dst[10] = v339;
                                                                                                                  *(_WORD *)&__dst[14] = 1024;
                                                                                                                  *(_DWORD *)&char __dst[16] = v330;
                                                                                                                  *(_WORD *)&__dst[20] = 1024;
                                                                                                                  *(_DWORD *)&__dst[22] = v331;
                                                                                                                  *(_WORD *)std::string::value_type v294 = 1024;
                                                                                                                  *(_DWORD *)&v294[2] = v332;
                                                                                                                  __int16 v295 = 1024;
                                                                                                                  int v296 = v333;
                                                                                                                  __int16 v297 = 1024;
                                                                                                                  int v298 = v334;
                                                                                                                  __int16 v299 = 1024;
                                                                                                                  int v300 = v335;
                                                                                                                  __int16 v301 = 1024;
                                                                                                                  int v302 = v336;
                                                                                                                  __int16 v303 = 1024;
                                                                                                                  int v304 = v337;
                                                                                                                  __int16 v305 = 1024;
                                                                                                                  int v306 = v346;
                                                                                                                  __int16 v307 = 1024;
                                                                                                                  int v308 = v347;
                                                                                                                  __int16 v309 = 1024;
                                                                                                                  int v310 = v338;
                                                                                                                  __int16 v311 = 1024;
                                                                                                                  int v312 = v340;
                                                                                                                  __int16 v313 = 1024;
                                                                                                                  unsigned int v314 = v341;
                                                                                                                  __int16 v315 = 1024;
                                                                                                                  unsigned int v316 = v342;
                                                                                                                  __int16 v317 = 1024;
                                                                                                                  unsigned int v318 = v343;
                                                                                                                  __int16 v319 = 1024;
                                                                                                                  unsigned int v320 = v345 / 0x64;
                                                                                                                  __int16 v321 = 1024;
                                                                                                                  unsigned int v322 = v345 % 0x64;
                                                                                                                  __int16 v323 = 1024;
                                                                                                                  unsigned int v324 = v344 / 0x64;
                                                                                                                  __int16 v325 = 1024;
                                                                                                                  unsigned int v326 = v344 % 0x64;
                                                                                                                  _os_log_debug_impl((void *)&_mh_execute_header, v254, OS_LOG_TYPE_DEBUG, "| %3c  | 0x%04x | %02X%02X%02X%02X%02X%02X%02X%02X | %8d | %9d | %3u | %13d|    %7d |     %7d |     %7d | %d.%02d%%| %d.%02d%%", __dst, 0x80u);
                                                                                                                }
                                                                                                              }
                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                              {
                                                                                                                *(_DWORD *)long long __dst = 136315394;
                                                                                                                *(void *)&__dst[4] = "com.apple.wpantund.ncp";
                                                                                                                *(_WORD *)&__dst[12] = 2080;
                                                                                                                *(void *)&__dst[14] = "default";
                                                                                                                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __dst, 0x16u);
                                                                                                              }
                                                                                                              snprintf(__str, 0x3E8uLL, "[%u] Neighbor/Child (0/1) = %u,  RLOC16 = 0x%x, ExtendedAddress = %02X%02X%02X%02X%02X%02X%02X%02X, Avg. Rssuint64_t i = %d, Last Rssuint64_t i = %d, Age = %d, ThreadVersion = %d, Router IdSeq = %d, Leader fDataV = %d, Leader sDataV = %d, MMER = %d.%02d%%, HMER = %d.%02d%%", v283, (v348 >> 3) & 1, v339, v330, v331, v332, v333, v334, v335);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (v253)
                                                                                                              {
                                                                                                                if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
                                                                                                                {
                                                                                                                  if ((v348 & 8) != 0) {
                                                                                                                    int v256 = 67;
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    int v256 = 82;
                                                                                                                  }
                                                                                                                  *(_DWORD *)long long __dst = 67113472;
                                                                                                                  *(_DWORD *)&__dst[4] = v256;
                                                                                                                  *(_WORD *)&__dst[8] = 1024;
                                                                                                                  *(_DWORD *)&__dst[10] = v339;
                                                                                                                  *(_WORD *)&__dst[14] = 1024;
                                                                                                                  *(_DWORD *)&char __dst[16] = v330;
                                                                                                                  *(_WORD *)&__dst[20] = 1024;
                                                                                                                  *(_DWORD *)&__dst[22] = v331;
                                                                                                                  *(_WORD *)std::string::value_type v294 = 1024;
                                                                                                                  *(_DWORD *)&v294[2] = v332;
                                                                                                                  __int16 v295 = 1024;
                                                                                                                  int v296 = v333;
                                                                                                                  __int16 v297 = 1024;
                                                                                                                  int v298 = v334;
                                                                                                                  __int16 v299 = 1024;
                                                                                                                  int v300 = v335;
                                                                                                                  __int16 v301 = 1024;
                                                                                                                  int v302 = v336;
                                                                                                                  __int16 v303 = 1024;
                                                                                                                  int v304 = v337;
                                                                                                                  __int16 v305 = 1024;
                                                                                                                  int v306 = v346;
                                                                                                                  __int16 v307 = 1024;
                                                                                                                  int v308 = v347;
                                                                                                                  __int16 v309 = 1024;
                                                                                                                  int v310 = v338;
                                                                                                                  __int16 v311 = 1024;
                                                                                                                  int v312 = v340;
                                                                                                                  __int16 v313 = 1024;
                                                                                                                  unsigned int v314 = v345 / 0x64;
                                                                                                                  __int16 v315 = 1024;
                                                                                                                  unsigned int v316 = v345 % 0x64;
                                                                                                                  __int16 v317 = 1024;
                                                                                                                  unsigned int v318 = v344 / 0x64;
                                                                                                                  __int16 v319 = 1024;
                                                                                                                  unsigned int v320 = v344 % 0x64;
                                                                                                                  _os_log_debug_impl((void *)&_mh_execute_header, v254, OS_LOG_TYPE_DEBUG, "| %3c  | 0x%04x | %02X%02X%02X%02X%02X%02X%02X%02X | %8d | %9d | %3u | %13d|         NA |          NA |          NA | %d.%02d%%| %d.%02d%%", __dst, 0x6Eu);
                                                                                                                }
                                                                                                              }
                                                                                                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                                                                                              {
                                                                                                                *(_DWORD *)long long __dst = 136315394;
                                                                                                                *(void *)&__dst[4] = "com.apple.wpantund.ncp";
                                                                                                                *(_WORD *)&__dst[12] = 2080;
                                                                                                                *(void *)&__dst[14] = "default";
                                                                                                                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", __dst, 0x16u);
                                                                                                              }
                                                                                                              snprintf(__str, 0x3E8uLL, "[%u] Neighbor/Child (0/1) = %u,  RLOC16 = 0x%x, ExtendedAddress = %02X%02X%02X%02X%02X%02X%02X%02X, Avg. Rssuint64_t i = %d, Last Rssuint64_t i = %d, Age = %d, ThreadVersion = %d, Router IdSeq = NA, Leader fDataV = NA, Leader sDataV = NA, MMER = %d.%02d%%, HMER = %d.%02d%%", v283, (v348 >> 3) & 1, v339, v330, v331, v332, v333);
                                                                                                            }
                                                                                                            size_t v257 = strlen(__str);
                                                                                                            if (v257 > 0x7FFFFFFFFFFFFFF7) {
                                                                                                              std::string::__throw_length_error[abi:ne180100]();
                                                                                                            }
                                                                                                            size_t v258 = v257;
                                                                                                            if (v257 >= 0x17)
                                                                                                            {
                                                                                                              uint64_t v260 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                                                                              if ((v257 | 7) != 0x17) {
                                                                                                                uint64_t v260 = v257 | 7;
                                                                                                              }
                                                                                                              uint64_t v261 = v260 + 1;
                                                                                                              std::string::value_type v259 = operator new(v260 + 1);
                                                                                                              *(void *)&__dst[8] = v258;
                                                                                                              *(void *)&char __dst[16] = v261 | 0x8000000000000000;
                                                                                                              *(void *)long long __dst = v259;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              __dst[23] = v257;
                                                                                                              std::string::value_type v259 = __dst;
                                                                                                              if (!v257) {
                                                                                                                goto LABEL_409;
                                                                                                              }
                                                                                                            }
                                                                                                            memcpy(v259, __str, v258);
LABEL_409:
                                                                                                            v259[v258] = 0;
                                                                                                            int v262 = operator new(0x28uLL);
                                                                                                            v262[1] = *(_OWORD *)__dst;
                                                                                                            *((void *)v262 + 4) = *(void *)&__dst[16];
                                                                                                            uint64_t v263 = *a2;
                                                                                                            *(void *)int v262 = *a2;
                                                                                                            *((void *)v262 + 1) = a2;
                                                                                                            *(void *)(v263 + 8) = v262;
                                                                                                            *a2 = (uint64_t)v262;
                                                                                                            ++a2[2];
                                                                                                            if ((v348 & 8) != 0)
                                                                                                            {
                                                                                                              ++v282;
                                                                                                              HIDWORD(v281) += (v348 & 1) == 0;
                                                                                                              LODWORD(v281) = ((v348 >> 1) & 1) + v281;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              ++v280;
                                                                                                            }
                                                                                                            uint64_t v283 = (v283 + 1);
                                                                                                            if (otThreadGetNextNeighborInfo(*(void *)(v284 + 224), &v292, (uint64_t)&v330)) {
                                                                                                              goto LABEL_377;
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      memcpy(v236, __str, v235);
                                                                                                      goto LABEL_356;
                                                                                                    }
                                                                                                  }
                                                                                                  memcpy(v228, __str, v227);
                                                                                                  goto LABEL_342;
                                                                                                }
                                                                                              }
                                                                                              memcpy(v220, __str, v219);
                                                                                              goto LABEL_328;
                                                                                            }
                                                                                          }
                                                                                          memcpy(v213, __str, v212);
                                                                                          goto LABEL_320;
                                                                                        }
                                                                                      }
                                                                                      memcpy(v205, __str, v204);
                                                                                      goto LABEL_306;
                                                                                    }
                                                                                  }
                                                                                  memcpy(v197, __str, v196);
                                                                                  goto LABEL_292;
                                                                                }
                                                                              }
                                                                              memcpy(v189, __str, v188);
                                                                              goto LABEL_278;
                                                                            }
                                                                          }
                                                                          memcpy(v181, __str, v180);
                                                                          goto LABEL_264;
                                                                        }
                                                                      }
                                                                      memcpy(v173, __str, v172);
                                                                      goto LABEL_250;
                                                                    }
                                                                  }
                                                                  memcpy(v165, __str, v164);
                                                                  goto LABEL_236;
                                                                }
                                                              }
                                                              memcpy(v157, __str, v156);
                                                              goto LABEL_222;
                                                            }
                                                          }
                                                          memcpy(v149, __str, v148);
                                                          goto LABEL_208;
                                                        }
                                                      }
                                                      memcpy(v141, __str, v140);
                                                      goto LABEL_194;
                                                    }
                                                  }
                                                  memcpy(v133, __str, v132);
                                                  goto LABEL_180;
                                                }
                                              }
                                              memcpy(v125, __str, v124);
                                              goto LABEL_166;
                                            }
                                          }
                                          memcpy(v116, __str, v115);
                                          goto LABEL_152;
                                        }
                                      }
                                      memcpy(v95, __str, v94);
                                      goto LABEL_121;
                                    }
                                  }
                                  memcpy(v86, __str, v85);
                                  goto LABEL_101;
                                }
                              }
                              memcpy(v78, __str, v77);
                              goto LABEL_93;
                            }
                          }
                          memcpy(v70, __str, v69);
                          goto LABEL_85;
                        }
                      }
                      memcpy(v61, __str, v60);
                      goto LABEL_77;
                    }
                  }
                  memcpy(v45, __str, v44);
                  goto LABEL_59;
                }
              }
              memcpy(v37, __str, v36);
              goto LABEL_51;
            }
          }
          memcpy(v27, __str, v26);
          goto LABEL_37;
        }
      }
      memcpy(v17, __str, v16);
      goto LABEL_23;
    }
  }
  memcpy(v8, __str, v7);
  goto LABEL_9;
}

void sub_10014E2E0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x267]) < 0)
  {
    operator delete((void *)STACK[0x250]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10014E8C8(_Unwind_Exception *a1)
{
}

void sub_10014E8E8(_Unwind_Exception *a1)
{
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10014E9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_10014EA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

BOOL HostInterpreter::isThreadSessionEnabled(HostInterpreter *this)
{
  *(_DWORD *)std::locale v4 = 0;
  getStringValueLocal("threadSession", v4, 4);
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::runtime_error buf = 136315138;
      int v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Thread Start Session Status = %s", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return (*(unsigned __int16 *)v4 ^ 0x4E4F | v4[2]) == 0;
}

uint64_t HostInterpreter::CoexCounterUpdate(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t CoexCounter = otPlatVendorGetCoexCounter(*(void *)(a1 + 224), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (!CoexCounter)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      uint64_t v12 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v13 = *a2;
        int v14 = *(unsigned __int16 *)(a2 + 1);
        int v15 = *(unsigned __int16 *)(a2 + 3);
        int v16 = *(unsigned __int16 *)(a2 + 5);
        int v17 = *(unsigned __int16 *)(a2 + 7);
        int v18 = *(unsigned __int16 *)(a2 + 9);
        int v19 = *(unsigned __int16 *)(a2 + 11);
        int v20 = *(unsigned __int16 *)(a2 + 13);
        int v21 = *(unsigned __int16 *)(a2 + 15);
        int v22 = *(unsigned __int16 *)(a2 + 17);
        int v23 = *(unsigned __int16 *)(a2 + 19);
        int v24 = *(unsigned __int16 *)(a2 + 21);
        int v25 = *(unsigned __int16 *)(a2 + 23);
        int v26 = *(unsigned __int16 *)(a2 + 25);
        int v27 = 136318722;
        uint64_t v28 = "CoexCounterUpdate";
        __int16 v29 = 1024;
        int v30 = v13;
        __int16 v31 = 1024;
        int v32 = v14;
        __int16 v33 = 1024;
        int v34 = v15;
        __int16 v35 = 1024;
        int v36 = v16;
        __int16 v37 = 1024;
        int v38 = v17;
        __int16 v39 = 1024;
        int v40 = v18;
        __int16 v41 = 1024;
        int v42 = v19;
        __int16 v43 = 1024;
        int v44 = v20;
        __int16 v45 = 1024;
        int v46 = v21;
        __int16 v47 = 1024;
        int v48 = v22;
        __int16 v49 = 1024;
        int v50 = v23;
        __int16 v51 = 1024;
        int v52 = v24;
        __int16 v53 = 1024;
        int v54 = v25;
        __int16 v55 = 1024;
        int v56 = v26;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "In %s Stop coex state monitoring and update coex State table as:\n\t\trssi_average:%d \n\t\tnum_of_tx_req:%d \n\t\tnum_of_rtx:%d \n\t\tnum_of_tx_granted:%d \n\t\tnum_of_tx_cca_failed:%d \n\t\tnum_of_tx_acked_packets:%d \n\t\taverage_backoff_time:%d \n\t\taverage_tx_power:%d \n\t\tnum_of_rx_granted:%d \n\t\tnum_of_rx_granted_ack:%d \n\t\tnum_of_good_rx:%d \n\t\tnum_of_rx_sync_TO:%d \n\t\tnum_of_rx_granted_WIFI:%d \n\t\tnum_of_rx_granted_ack_WIFI:%d \n", (uint8_t *)&v27,
          0x60u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  return CoexCounter;
}

std::string *HostInterpreter::GetPowerLimitTableAsString@<X0>(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::push_back(a2, 10);
  std::string::append(a2, " Power Table Version : ");
  std::string::append(a2, (const std::string::value_type *)a1);
  std::string::push_back(a2, 10);
  std::string::append(a2, " Power Table Size : ");
  std::to_string(&v11, *(unsigned __int8 *)(a1 + 30));
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::locale v4 = &v11;
  }
  else {
    std::locale v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v4, size);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = 0;
  uint64_t v7 = (char *)(a1 + 46);
  do
  {
    std::string::push_back(a2, 10);
    std::string::append(a2, " Table Entry : ");
    std::to_string(&v11, v6);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::locale v8 = &v11;
    }
    else {
      std::locale v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = v11.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    std::string::append(a2, " :");
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 15));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 14));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 13));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 12));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 11));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 10));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 9));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 8));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 7));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 6));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 5));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 4));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 3));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 2));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *(v7 - 1));
    std::string::append(a2, (const std::string::value_type *)&v11);
    snprintf((char *)&v11, 0x14uLL, " %6d", *v7);
    uint64_t result = std::string::append(a2, (const std::string::value_type *)&v11);
    ++v6;
    v7 += 16;
  }
  while (v6 != 7);
  return result;
}

void sub_10014F248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v16 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v16 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void HostInterpreter::GetIfsAckDataPerNeighborAsString(uint64_t a1@<X1>, unsigned int a2@<W2>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::push_back(a3, 10);
  std::string::append(a3, " Table Size : ");
  std::to_string(&__b, a2);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_b = &__b;
  }
  else {
    p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __b.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)p_b, size);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__b.__r_.__value_.__l.__data_);
    if (!a2) {
      return;
    }
    goto LABEL_11;
  }
  if (a2)
  {
LABEL_11:
    unsigned int v8 = 0;
    for (uint64_t i = 0; 114 * a2 != i; i += 114)
    {
      std::string::push_back(a3, 10);
      std::to_string(&v18, v8);
      uint64_t v10 = std::string::insert(&v18, 0, "[");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = std::string::append(&v19, "]");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      __b.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = &__b;
      }
      else {
        int v14 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = __b.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__b.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_20:
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_25;
          }
          goto LABEL_21;
        }
      }
      else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(v19.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
LABEL_25:
      }
        operator delete(v18.__r_.__value_.__l.__data_);
LABEL_21:
      std::string::append(a3, " :");
      __b.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v16 = (unsigned __int16 *)(a1 + i);
      encode_data_into_string((unsigned __int8 *)(a1 + i + 12), *(unsigned __int16 *)(a1 + i + 112), (char *)&__b, 0x401uLL, 0);
      snprintf((char *)&v18, 0xC8uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", *((unsigned __int8 *)v16 + 9), *((unsigned __int8 *)v16 + 8), *((unsigned __int8 *)v16 + 7), *((unsigned __int8 *)v16 + 6), *((unsigned __int8 *)v16 + 5), *((unsigned __int8 *)v16 + 4), *((unsigned __int8 *)v16 + 3), *((unsigned __int8 *)v16 + 2));
      snprintf((char *)&v19, 0x400uLL, " Neighbor Short Address = %04x | Extended Address = %s | Bit field = %04x | IE int data = %s", *v16, (const char *)&v18, v16[5], (const char *)&__b);
      std::string::append(a3, (const std::string::value_type *)&v19);
      ++v8;
    }
  }
}

void sub_10014F540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(a1);
}

void HostInterpreter::GetCoExRCP2CountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  strcpy(__p, "coex_rcp2_rssi_average");
  char v2 = 22;
  uint64_t v3 = __p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v3);
  operator new();
}

void sub_10015022C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100150244(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10015025C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100150274(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10015028C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001502A4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001502BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001502D4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001502EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100150304(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10015031C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100150334(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10015034C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100150364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(v20, *(char **)(v20 + 8));
  _Unwind_Resume(a1);
}

void HostInterpreter::GetCoExRCP2BTWifiLoadAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  memset(&v3, 0, sizeof(v3));
  char v2 = 7;
  strcpy((char *)__p, "bt_load");
  std::locale v4 = __p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4);
  operator new();
}

void sub_100150ABC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t std::map<std::string,boost::any>::operator=[abi:ne180100](uint64_t a1, void *a2)
{
  std::locale v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
  return a1;
}

double HostInterpreter::GetThreadHealthMetrics(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = RcpHostContext::sRcpHostContext;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::GetThreadHealthMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_radio_tx_timeout", *(_DWORD *)(v3 + 784));
  size_t v6 = strlen(__str);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v55 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v55) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_14:
  }
    memcpy(p_dst, __str, v7);
  *((unsigned char *)p_dst + v7) = 0;
  long long v11 = operator new(0x28uLL);
  v11[1] = __dst;
  *((void *)v11 + 4) = v55;
  uint64_t v12 = *a2;
  *(void *)long long v11 = *a2;
  *((void *)v11 + 1) = a2;
  *(void *)(v12 + 8) = v11;
  *a2 = (uint64_t)v11;
  ++a2[2];
  long long v13 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v13)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::GetThreadHealthMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_buffer_limit_exceeded", *(unsigned __int8 *)(v3 + 788));
  size_t v14 = strlen(__str);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v55 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = v16;
    goto LABEL_28;
  }
  HIBYTE(v55) = v14;
  uint64_t v16 = &__dst;
  if (v14) {
LABEL_28:
  }
    memcpy(v16, __str, v15);
  *((unsigned char *)v16 + v15) = 0;
  std::string v19 = operator new(0x28uLL);
  v19[1] = __dst;
  *((void *)v19 + 4) = v55;
  uint64_t v20 = *a2;
  *(void *)std::string v19 = *a2;
  *((void *)v19 + 1) = a2;
  *(void *)(v20 + 8) = v19;
  *a2 = (uint64_t)v19;
  ++a2[2];
  int v21 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v21)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::GetThreadHealthMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_non_converging_prefix", *(unsigned __int8 *)(v3 + 789));
  size_t v22 = strlen(__str);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    int v24 = (long long *)operator new(v25 + 1);
    *((void *)&__dst + 1) = v23;
    unint64_t v55 = v26 | 0x8000000000000000;
    *(void *)&long long __dst = v24;
    goto LABEL_42;
  }
  HIBYTE(v55) = v22;
  int v24 = &__dst;
  if (v22) {
LABEL_42:
  }
    memcpy(v24, __str, v23);
  *((unsigned char *)v24 + v23) = 0;
  int v27 = operator new(0x28uLL);
  v27[1] = __dst;
  *((void *)v27 + 4) = v55;
  uint64_t v28 = *a2;
  *(void *)int v27 = *a2;
  *((void *)v27 + 1) = a2;
  *(void *)(v28 + 8) = v27;
  *a2 = (uint64_t)v27;
  ++a2[2];
  __int16 v29 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v29)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::GetThreadHealthMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_non_converging_unicast_srp_service", *(unsigned __int8 *)(v3 + 790));
  size_t v30 = strlen(__str);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    int v32 = (long long *)operator new(v33 + 1);
    *((void *)&__dst + 1) = v31;
    unint64_t v55 = v34 | 0x8000000000000000;
    *(void *)&long long __dst = v32;
    goto LABEL_56;
  }
  HIBYTE(v55) = v30;
  int v32 = &__dst;
  if (v30) {
LABEL_56:
  }
    memcpy(v32, __str, v31);
  *((unsigned char *)v32 + v31) = 0;
  __int16 v35 = operator new(0x28uLL);
  v35[1] = __dst;
  *((void *)v35 + 4) = v55;
  uint64_t v36 = *a2;
  *(void *)__int16 v35 = *a2;
  *((void *)v35 + 1) = a2;
  *(void *)(v36 + 8) = v35;
  *a2 = (uint64_t)v35;
  ++a2[2];
  __int16 v37 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v37)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::GetThreadHealthMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "is_network_data_full", *(unsigned __int8 *)(v3 + 791));
  size_t v38 = strlen(__str);
  if (v38 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v39 = v38;
  if (v38 >= 0x17)
  {
    uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v41 = v38 | 7;
    }
    uint64_t v42 = v41 + 1;
    int v40 = (long long *)operator new(v41 + 1);
    *((void *)&__dst + 1) = v39;
    unint64_t v55 = v42 | 0x8000000000000000;
    *(void *)&long long __dst = v40;
    goto LABEL_70;
  }
  HIBYTE(v55) = v38;
  int v40 = &__dst;
  if (v38) {
LABEL_70:
  }
    memcpy(v40, __str, v39);
  *((unsigned char *)v40 + v39) = 0;
  __int16 v43 = operator new(0x28uLL);
  v43[1] = __dst;
  *((void *)v43 + 4) = v55;
  uint64_t v44 = *a2;
  *(void *)__int16 v43 = *a2;
  *((void *)v43 + 1) = a2;
  *(void *)(v44 + 8) = v43;
  *a2 = (uint64_t)v43;
  ++a2[2];
  __int16 v45 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v45)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      HostInterpreter::GetThreadHealthMetrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  snprintf(__str, 0xC8uLL, "%-35s = %d", "network_data_max_len", *(unsigned __int8 *)(v3 + 792));
  size_t v46 = strlen(__str);
  if (v46 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v47 = v46;
  if (v46 >= 0x17)
  {
    uint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v49 = v46 | 7;
    }
    uint64_t v50 = v49 + 1;
    int v48 = (long long *)operator new(v49 + 1);
    *((void *)&__dst + 1) = v47;
    unint64_t v55 = v50 | 0x8000000000000000;
    *(void *)&long long __dst = v48;
  }
  else
  {
    HIBYTE(v55) = v46;
    int v48 = &__dst;
    if (!v46) {
      goto LABEL_85;
    }
  }
  memcpy(v48, __str, v47);
LABEL_85:
  *((unsigned char *)v48 + v47) = 0;
  __int16 v51 = operator new(0x28uLL);
  double result = *(double *)&__dst;
  v51[1] = __dst;
  *((void *)v51 + 4) = v55;
  uint64_t v53 = *a2;
  *(void *)__int16 v51 = *a2;
  *((void *)v51 + 1) = a2;
  *(void *)(v53 + 8) = v51;
  *a2 = (uint64_t)v51;
  ++a2[2];
  return result;
}

void sub_1001513B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::get_srp_service_advertised_info(HostInterpreter *this, BOOL *a2, BOOL *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v39 = 0;
  int Rloc16 = otThreadGetRloc16(*((void *)this + 28));
  __int16 v37 = 0;
  uint64_t v38 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &v37;
  uint64_t v33 = &v34;
  uint64_t v34 = 0;
  while (!otNetDataGetNextService(*((void *)this + 28), &v39, (uint64_t)v50))
  {
    if (v52 == 92)
    {
      unsigned int v10 = v55;
      if (v55 == Rloc16)
      {
        *a3 = 1;
        long long v11 = v34;
        uint64_t v12 = &v34;
        long long v13 = &v34;
        if (!v34) {
          goto LABEL_20;
        }
        while (1)
        {
LABEL_16:
          while (1)
          {
            long long v13 = (uint64_t **)v11;
            unsigned int v14 = *((unsigned __int16 *)v11 + 13);
            if (v10 >= v14) {
              break;
            }
            long long v11 = *v13;
            uint64_t v12 = v13;
            if (!*v13) {
              goto LABEL_20;
            }
          }
          if (v14 >= v10) {
            break;
          }
          long long v11 = v13[1];
          if (!v11)
          {
            uint64_t v12 = v13 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
        long long v11 = v34;
        uint64_t v12 = &v34;
        long long v13 = &v34;
        if (v34) {
          goto LABEL_16;
        }
LABEL_20:
        size_t v15 = operator new(0x20uLL);
        v15[13] = v10;
        *(void *)size_t v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = v13;
        *uint64_t v12 = (uint64_t *)v15;
        if (*v33)
        {
          uint64_t v33 = (uint64_t **)*v33;
          size_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v34, (uint64_t *)v15);
        ++v35;
      }
    }
    else if (v52 == 93)
    {
      snprintf(__str, 0x32uLL, "%x%x", v54[v54[0] - 1], v54[v54[0]]);
      size_t v7 = strlen(__str);
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v8 = v7;
      if (v7 >= 0x17)
      {
        uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v16 = v7 | 7;
        }
        uint64_t v17 = v16 + 1;
        uint64_t v9 = (std::string *)operator new(v16 + 1);
        __dst[0].__r_.__value_.__l.__size_ = v8;
        __dst[0].__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_25:
        memcpy(v9, __str, v8);
        goto LABEL_26;
      }
      *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v7;
      uint64_t v9 = __dst;
      if (v7) {
        goto LABEL_25;
      }
LABEL_26:
      v9->__r_.__value_.__s.__data_[v8] = 0;
      int v18 = std::stoul(__dst, 0, 16);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
        if (v54[0] >= 3u)
        {
LABEL_30:
          uint64_t v19 = 0;
          uint64_t v20 = __dst;
          do
          {
            sprintf((char *)v20, "%02x", v54[++v19]);
            uint64_t v20 = (std::string *)((char *)v20 + 2);
          }
          while (v19 < v54[0] - 2);
        }
      }
      else if (v54[0] >= 3u)
      {
        goto LABEL_30;
      }
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (!syslog_is_the_mask_enabled(6) || !os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
LABEL_38:
          unsigned int v22 = v55;
          if (v55 == Rloc16) {
            goto LABEL_42;
          }
          goto LABEL_39;
        }
        *(_DWORD *)std::runtime_error buf = 67110402;
        *(_DWORD *)uint64_t v41 = v50[0];
        *(_WORD *)&uint8_t v41[4] = 1024;
        *(_DWORD *)&v41[6] = v51;
        LOWORD(v42) = 1024;
        *(_DWORD *)((char *)&v42 + 2) = v53 & 1;
        HIWORD(v42) = 1024;
        int v43 = v55;
        __int16 v44 = 1024;
        int v45 = v18;
        __int16 v46 = 2080;
        size_t v47 = __dst;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Unicast SRP => ServiceID:%u, EnterpriseNumber:%u, Stable:%d, Rloc16=0x%4x, Port=%d, IPAddress=%s", buf, 0x2Au);
        unsigned int v22 = v55;
        if (v55 != Rloc16) {
          goto LABEL_39;
        }
LABEL_42:
        *a2 = 1;
        size_t v23 = v37;
        int v24 = &v37;
        uint64_t v25 = &v37;
        if (!v37) {
          goto LABEL_49;
        }
        while (1)
        {
LABEL_45:
          while (1)
          {
            uint64_t v25 = (uint64_t **)v23;
            unsigned int v26 = *((unsigned __int16 *)v23 + 13);
            if (v22 >= v26) {
              break;
            }
            size_t v23 = *v25;
            int v24 = v25;
            if (!*v25) {
              goto LABEL_49;
            }
          }
          if (v26 >= v22) {
            break;
          }
          size_t v23 = v25[1];
          if (!v23)
          {
            int v24 = v25 + 1;
            goto LABEL_49;
          }
        }
      }
      else
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_38;
        }
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)uint64_t v41 = "com.apple.wpantund.ncp";
        *(_WORD *)&v41[8] = 2080;
        uint64_t v42 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
        unsigned int v22 = v55;
        if (v55 == Rloc16) {
          goto LABEL_42;
        }
LABEL_39:
        size_t v23 = v37;
        int v24 = &v37;
        uint64_t v25 = &v37;
        if (v37) {
          goto LABEL_45;
        }
LABEL_49:
        int v27 = operator new(0x20uLL);
        v27[13] = v22;
        *(void *)int v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = v25;
        long long *v24 = (uint64_t *)v27;
        if (*v36)
        {
          uint64_t v36 = (uint64_t **)*v36;
          int v27 = *v24;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v37, (uint64_t *)v27);
        ++v38;
      }
    }
  }
  *a4 = v38;
  uint64_t v28 = v34;
  *a5 = v35;
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v33, v28);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v36, v37);
}

void sub_1001518D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void HostInterpreter::GetTriggerBasedCountersAsValMap(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  memset(&v4, 0, sizeof(v4));
  unsigned int v3 = 0;
  gettimeofday(&v5, 0);
  HIBYTE(v7) = 14;
  strcpy((char *)__p, "statsTimestamp");
  v2.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v2);
  operator new();
}

void sub_1001532B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
}

uint64_t HostInterpreter::is_border_router_advertised(HostInterpreter *this, unsigned int *a2)
{
  unsigned int v22 = 0;
  int Rloc16 = otThreadGetRloc16(*((void *)this + 28));
  char v5 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = &v17;
  while (!otNetDataGetNextOnMeshPrefix(*((void *)this + 28), &v22, (uint64_t)&v19))
  {
    IPv6Prefix::IPv6Prefix((IPv6Prefix *)v15, &v19, v20);
    unsigned __int16 v6 = v21;
    BOOL v7 = v21 == Rloc16;
    std::string::size_type v8 = v17;
    uint64_t v9 = &v17;
    unsigned int v10 = &v17;
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v10 = (uint64_t **)v8;
          unsigned int v11 = *((unsigned __int16 *)v8 + 13);
          if (v21 >= v11) {
            break;
          }
          std::string::size_type v8 = *v10;
          uint64_t v9 = v10;
          if (!*v10) {
            goto LABEL_12;
          }
        }
        if (v11 >= v21) {
          break;
        }
        std::string::size_type v8 = v10[1];
        if (!v8)
        {
          uint64_t v9 = v10 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      uint64_t v12 = operator new(0x20uLL);
      v12[13] = v6;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v10;
      *uint64_t v9 = (uint64_t *)v12;
      if (*v16)
      {
        uint64_t v16 = (uint64_t **)*v16;
        uint64_t v12 = *v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v17, (uint64_t *)v12);
      ++v18;
    }
    v5 |= v7;
  }
  long long v13 = v17;
  *a2 = v18;
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)&v16, v13);
  return v5 & 1;
}

void sub_100153768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void sub_100153780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

std::string *HostInterpreter::btAudioTaskIDToString(int a1, unsigned int a2, std::string *this)
{
  if (a2 > 0xA) {
    unsigned int v3 = "unknown";
  }
  else {
    unsigned int v3 = off_100498E48[(char)a2];
  }
  return std::string::assign(this, v3);
}

std::string *HostInterpreter::wifiAssociatedTypeEnumToString(int a1, unsigned int a2, std::string *this)
{
  if (a2 > 4) {
    unsigned int v3 = "unknown";
  }
  else {
    unsigned int v3 = off_100498EA0[(char)a2];
  }
  return std::string::assign(this, v3);
}

uint64_t HostInterpreter::get_flags_from_br_config(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 17);
  int v3 = (v2 & 3) << 14;
  if (v3 == 49152) {
    char v4 = -64;
  }
  else {
    char v4 = 0;
  }
  if (v3 == 0x4000) {
    char v5 = 64;
  }
  else {
    char v5 = v4;
  }
  return (v2 >> 5) & 2 | ((v2 & 0x80) != 0) | (v2 >> 3) & 4 | (v2 >> 1) & 8 | (16 * ((v2 & 8) != 0)) & 0xDF | (32 * ((v2 & 4) != 0)) | v5;
}

void *HostInterpreter::find_prefix_entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = (void *)(a1 + 64);
  char v4 = *(void **)(a1 + 64);
  if (v4)
  {
    BOOL v7 = (void *)(a1 + 64);
    do
    {
      int v8 = IPv6Prefix::operator<((uint64_t)v4 + 28, a2);
      uint64_t v9 = v4 + 1;
      if (!v8)
      {
        uint64_t v9 = v4;
        BOOL v7 = v4;
      }
      char v4 = (void *)*v9;
    }
    while (*v9);
    if (v7 != v3)
    {
      unsigned int v10 = (void *)*v3;
      if (*v3)
      {
        unsigned int v11 = v3;
        do
        {
          int v12 = IPv6Prefix::operator<(a2, (uint64_t)v10 + 28);
          long long v13 = v10 + 1;
          if (v12)
          {
            long long v13 = v10;
            unsigned int v11 = v10;
          }
          unsigned int v10 = (void *)*v13;
        }
        while (*v13);
        if (v7 != v11)
        {
LABEL_17:
          while (!OnMeshPrefixEntry::operator==((uint64_t)(v7 + 6), a3))
          {
            unsigned int v14 = (void *)v7[1];
            if (v14)
            {
              do
              {
                size_t v15 = v14;
                unsigned int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                size_t v15 = (void *)v7[2];
                BOOL v16 = *v15 == (void)v7;
                BOOL v7 = v15;
              }
              while (!v16);
            }
            BOOL v7 = v15;
            if (v15 == v11)
            {
              BOOL v7 = v11;
              break;
            }
          }
        }
      }
      else
      {
        unsigned int v11 = v3;
        if (v7 != v3) {
          goto LABEL_17;
        }
      }
      if (v7 != v11) {
        return v7;
      }
    }
  }
  return v3;
}

void HostInterpreter::on_mesh_prefix_was_removed(void *a1, int a2, in6_addr *a3, unsigned int a4, __int16 a5, char a6, __int16 a7)
{
  IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v26, a3, a4);
  int v22 = a2;
  __int16 v23 = a5;
  char v24 = a6;
  __int16 v25 = a7;
  prefix_entry = HostInterpreter::find_prefix_entry((uint64_t)a1, (uint64_t)&v26, (uint64_t)&v22);
  if (a1 + 8 != prefix_entry)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        OnMeshPrefixEntry::get_description((OnMeshPrefixEntry *)&v22, &v26, 0, __p);
        unsigned int v14 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::runtime_error buf = 136315138;
        uint64_t v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Removing %s", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    size_t v15 = (uint64_t *)prefix_entry[1];
    if (v15)
    {
      do
      {
        BOOL v16 = v15;
        size_t v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      uint64_t v17 = prefix_entry;
      do
      {
        BOOL v16 = (uint64_t *)v17[2];
        BOOL v18 = *v16 == (void)v17;
        uint64_t v17 = v16;
      }
      while (!v18);
    }
    if ((uint64_t *)a1[7] == prefix_entry) {
      a1[7] = v16;
    }
    in6_addr v19 = (uint64_t *)a1[8];
    --a1[9];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v19, prefix_entry);
    operator delete(prefix_entry);
  }
}

void *HostInterpreter::find_route_entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = (void *)(a1 + 88);
  char v4 = *(void **)(a1 + 88);
  if (v4)
  {
    BOOL v7 = (void *)(a1 + 88);
    do
    {
      int v8 = IPv6Prefix::operator<((uint64_t)v4 + 28, a2);
      uint64_t v9 = v4 + 1;
      if (!v8)
      {
        uint64_t v9 = v4;
        BOOL v7 = v4;
      }
      char v4 = (void *)*v9;
    }
    while (*v9);
    if (v7 != v3)
    {
      unsigned int v10 = (void *)*v3;
      if (*v3)
      {
        unsigned int v11 = v3;
        do
        {
          int v12 = IPv6Prefix::operator<(a2, (uint64_t)v10 + 28);
          long long v13 = v10 + 1;
          if (v12)
          {
            long long v13 = v10;
            unsigned int v11 = v10;
          }
          unsigned int v10 = (void *)*v13;
        }
        while (*v13);
        if (v7 != v11)
        {
LABEL_17:
          while (!OffMeshRouteEntry::operator==((uint64_t)(v7 + 6), a3))
          {
            unsigned int v14 = (void *)v7[1];
            if (v14)
            {
              do
              {
                size_t v15 = v14;
                unsigned int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                size_t v15 = (void *)v7[2];
                BOOL v16 = *v15 == (void)v7;
                BOOL v7 = v15;
              }
              while (!v16);
            }
            BOOL v7 = v15;
            if (v15 == v11)
            {
              BOOL v7 = v11;
              break;
            }
          }
        }
      }
      else
      {
        unsigned int v11 = v3;
        if (v7 != v3) {
          goto LABEL_17;
        }
      }
      if (v7 != v11) {
        return v7;
      }
    }
  }
  return v3;
}

void HostInterpreter::route_was_removed(void *a1, int a2, in6_addr *a3, unsigned int a4, int a5, char a6, __int16 a7, char a8)
{
  v20[0] = a2;
  v20[1] = a5;
  char v21 = a6;
  __int16 v22 = a7;
  char v23 = a8;
  char v24 = 0;
  IPv6Prefix::IPv6Prefix((IPv6Prefix *)&v19, a3, a4);
  route_entry = HostInterpreter::find_route_entry((uint64_t)a1, (uint64_t)&v19, (uint64_t)v20);
  if (a1 + 11 != route_entry)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        OffMeshRouteEntry::get_description((OffMeshRouteEntry *)(route_entry + 6), &v19, 0, __p);
        unsigned int v11 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::runtime_error buf = 136315138;
        in6_addr v26 = v11;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "OffMeshRoutes: Removing %s", buf, 0xCu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    int v12 = (uint64_t *)route_entry[1];
    if (v12)
    {
      do
      {
        long long v13 = v12;
        int v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      unsigned int v14 = route_entry;
      do
      {
        long long v13 = (uint64_t *)v14[2];
        BOOL v15 = *v13 == (void)v14;
        unsigned int v14 = v13;
      }
      while (!v15);
    }
    if ((uint64_t *)a1[10] == route_entry) {
      a1[10] = v13;
    }
    BOOL v16 = (uint64_t *)a1[11];
    --a1[12];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v16, route_entry);
    operator delete(route_entry);
  }
}

uint64_t HostInterpreter::should_add_route_on_interface(void *a1, uint64_t a2, int *a3)
{
  char v4 = (void *)a1[10];
  char v5 = a1 + 11;
  if (v4 != a1 + 11)
  {
    char v6 = 0;
    char v7 = 0;
    int v8 = -1;
    int v9 = -1;
    while (1)
    {
      unsigned int v10 = v4;
      uint64_t v11 = (uint64_t)v4 + 28;
      int v12 = (void *)*v5;
      char v4 = v5;
      if (*v5)
      {
        char v4 = v5;
        do
        {
          int v13 = IPv6Prefix::operator<(v11, (uint64_t)v12 + 28);
          unsigned int v14 = v12 + 1;
          if (v13)
          {
            unsigned int v14 = v12;
            char v4 = v12;
          }
          int v12 = (void *)*v14;
        }
        while (*v14);
      }
      if (IPv6Prefix::operator==(v11, a2) && v10 != v4) {
        break;
      }
LABEL_3:
      if (v4 == v5) {
        goto LABEL_27;
      }
    }
    while (1)
    {
      if (*((_DWORD *)v10 + 12) || *((unsigned char *)v10 + 61))
      {
        if (v8 <= *((_DWORD *)v10 + 13)) {
          int v8 = *((_DWORD *)v10 + 13);
        }
        char v6 = 1;
        BOOL v15 = (void *)v10[1];
        if (!v15) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v9 <= *((_DWORD *)v10 + 13)) {
          int v9 = *((_DWORD *)v10 + 13);
        }
        char v7 = 1;
        BOOL v15 = (void *)v10[1];
        if (!v15)
        {
          do
          {
LABEL_23:
            BOOL v16 = (void *)v10[2];
            BOOL v17 = *v16 == (void)v10;
            unsigned int v10 = v16;
          }
          while (!v17);
          goto LABEL_12;
        }
      }
      do
      {
        BOOL v16 = v15;
        BOOL v15 = (void *)*v15;
      }
      while (v15);
LABEL_12:
      unsigned int v10 = v16;
      if (v16 == v4) {
        goto LABEL_3;
      }
    }
  }
  char v7 = 0;
  char v6 = 0;
  int v9 = -1;
  int v8 = -1;
LABEL_27:
  if (v6 & 1) != 0 || (v7)
  {
    if (v8 <= v9) {
      int v22 = v9;
    }
    else {
      int v22 = v8;
    }
    if ((v7 & 1) == 0) {
      int v22 = v8;
    }
    if ((v6 & 1) == 0) {
      int v22 = v9;
    }
    unsigned int v23 = v22 + 1;
    if (v23 >= 3) {
      return 1;
    }
    int v24 = dword_1003F6A38[v23];
  }
  else
  {
    char v18 = (void *)a1[7];
    if (v18 == a1 + 8) {
      return 0;
    }
    while (!IPv6Prefix::operator==((uint64_t)v18 + 28, a2) || *((_DWORD *)v18 + 12) || (*((_WORD *)v18 + 26) & 1) == 0)
    {
      unsigned __int8 v20 = (void *)v18[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          unsigned __int8 v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          char v21 = (void *)v18[2];
          BOOL v17 = *v21 == (void)v18;
          char v18 = v21;
        }
        while (!v17);
      }
      char v18 = v21;
      if (v21 == a1 + 8) {
        return 0;
      }
    }
    int v24 = 256;
  }
  *a3 = v24;
  return 1;
}

uint64_t HostInterpreter::service_list_changed(HostInterpreter *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 32);
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v2 - v3 != *((void *)this + 5) - *((void *)this + 4)) {
    return 1;
  }
  if (v2 == v3) {
    return 0;
  }
  char v4 = this;
  do
  {
    this = (HostInterpreter *)HostInterpreter::find_service_entry((uint64_t)this, *(_DWORD *)(v3 + 8), *(_DWORD *)(v3 + 12), (const void **)(v3 + 16), (const void **)(v3 + 48), *(unsigned __int16 *)(v3 + 72), v1);
    if ((this & 1) == 0) {
      break;
    }
    v3 += 80;
  }
  while (v3 != *((void *)v4 + 2));
  return this ^ 1;
}

void HostInterpreter::signal_service_list(HostInterpreter *this)
{
  v5[0] = v5;
  v5[1] = v5;
  _OWORD v5[2] = 0;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::runtime_error buf = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "signal_service_list", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  if (*((void *)this + 1) != *((void *)this + 2))
  {
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v4 = 0;
    *(void *)std::runtime_error buf = &buf[8];
    HIBYTE(v7[2]) = 16;
    strcpy((char *)v7, "EnterpriseNumber");
    *(void *)char v6 = v7;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, v7, (uint64_t)&std::piecewise_construct, (_OWORD **)v6);
    operator new();
  }
  HIBYTE(v4) = 15;
  strcpy((char *)buf, "Thread:Services");
  boost::any::any<std::list<std::map<std::string,boost::any>> &>();
}

void sub_100154CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(void *)(v31 - 128)) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a20 < 0)
  {
    operator delete(__p);
    std::list<std::map<std::string,boost::any>>::~list(&a21);
    _Unwind_Resume(a1);
  }
  std::list<std::map<std::string,boost::any>>::~list(&a21);
  _Unwind_Resume(a1);
}

uint64_t HostInterpreter::ipv6route_list_changed(HostInterpreter *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (v1 != *((void *)this + 18)) {
    return 1;
  }
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)*((void *)this + 13);
  uint64_t v3 = (char *)this + 112;
  if (v2 == (void *)((char *)this + 112)) {
    return 0;
  }
  uint64_t v4 = (HostInterpreter *)*((void *)this + 16);
  char v5 = (HostInterpreter **)((char *)this + 136);
  if (v4 == (HostInterpreter *)((char *)this + 136)) {
    return 1;
  }
  do
  {
    char v6 = v4;
    while (1)
    {
      BOOL v7 = *(void *)((char *)v6 + 28) == *(void *)((char *)v2 + 28)
        && *(void *)((char *)v6 + 36) == *(void *)((char *)v2 + 36);
      if (v7) {
        break;
      }
      int v8 = (HostInterpreter *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          int v9 = (HostInterpreter **)v8;
          int v8 = *(HostInterpreter **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (HostInterpreter **)*((void *)v6 + 2);
          BOOL v7 = *v9 == v6;
          char v6 = (HostInterpreter *)v9;
        }
        while (!v7);
      }
      char v6 = (HostInterpreter *)v9;
      if (v9 == v5) {
        return 1;
      }
    }
    unsigned int v10 = (char *)v2[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        unsigned int v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (char *)v2[2];
        BOOL v7 = *(void *)v11 == (void)v2;
        uint64_t v2 = v11;
      }
      while (!v7);
    }
    uint64_t result = 0;
    uint64_t v2 = v11;
  }
  while (v11 != v3);
  return result;
}

uint64_t HostInterpreter::generateBTWIFIAudioLoadCAEventToTNM(HostInterpreter *this, unint64_t a2)
{
  uint64_t result = byte_1004B610F;
  if (HIBYTE(mcoexLoadBTWifiPrev) != ((a2 >> 8) & 0xF)
    || byte_1004B610D != ((a2 >> 20) & 3)
    || byte_1004B610E != ((a2 >> 22) & 3)
    || byte_1004B610F != (BYTE3(a2) & 3)
    || byte_1004B6110 != (BYTE4(a2) & 7)
    || byte_1004B6111 != ((a2 >> 35) & 3))
  {
    mcoexLoadBTWifiPrev = a2 & 0xFFF;
    byte_1004B610D = (a2 >> 20) & 3;
    byte_1004B610E = (a2 >> 22) & 3;
    byte_1004B610F = BYTE3(a2) & 3;
    byte_1004B6110 = BYTE4(a2) & 7;
    byte_1004B6111 = (a2 >> 35) & 3;
    v10[0] = 0;
    v10[1] = 0;
    int v9 = v10;
    HostInterpreter::GetCoExRCP2BTWifiLoadAsValMap((uint64_t)__p);
  }
  return result;
}

void sub_1001550D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char *a18)
{
  if (a10) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

BOOL HostInterpreter::isAudioNoThreadFeatureEnabled(HostInterpreter *this)
{
  return RcpHostContext::isAudioNoThreadFeatureEnabled((RcpHostContext *)RcpHostContext::sRcpHostContext);
}

BOOL HostInterpreter::isAudioEscoLeaScoAos(HostInterpreter *this, unsigned int a2)
{
  char v2 = BYTE1(a2);
  int v3 = (a2 >> 8) & 0xF;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v5 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8[0] = 67109120;
      v8[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BT Load, Audio detection: btAudioTaskID is %d", (uint8_t *)v8, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  return (v2 & 7u) - 1 < 2 || (v3 - 5) < 3;
}

uint64_t HostInterpreter::pairingInProgress(HostInterpreter *this)
{
  return *((unsigned __int8 *)this + 170);
}

void HostInterpreter::ClearThreadHealthMetrics(HostInterpreter *this)
{
  uint64_t v1 = RcpHostContext::sRcpHostContext;
  *(void *)(RcpHostContext::sRcpHostContext + 784) = 0;
  *(unsigned char *)(v1 + 792) = 0;
  v23[71] = 19;
  strcpy(&v23[32], "is_radio_tx_timeis_radio_tx_timeout");
  int v24 = &v23[48];
  char v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  std::string::assign((std::string *)(v2 + 7), "0");
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  v23[71] = 19;
  strcpy(&v23[63], "eout");
  *(_OWORD *)&v23[48] = *(_OWORD *)&v23[32];
  int v24 = &v23[48];
  int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  uint64_t v4 = (const char *)(v3 + 7);
  if (*((char *)v3 + 79) < 0) {
    uint64_t v4 = *(const char **)v4;
  }
  saveStringValue("is_radio_tx_timeout", v4);
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  *(void *)&v23[48] = operator new(0x20uLL);
  *(_OWORD *)&v23[32] = xmmword_1003F2BE0;
  *(_OWORD *)&v23[56] = xmmword_1003F2BE0;
  *(_OWORD *)&unsigned char v23[16] = *(_OWORD *)"is_buffer_limit_exceeded";
  strcpy(*(char **)&v23[48], "is_buffer_limit_exceeded");
  int v24 = &v23[48];
  char v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  std::string::assign((std::string *)(v5 + 7), "0");
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  char v6 = (char *)operator new(0x20uLL);
  *(void *)&v23[48] = v6;
  *(_OWORD *)&v23[56] = *(_OWORD *)&v23[32];
  *(_OWORD *)char v6 = *(_OWORD *)&v23[16];
  strcpy(v6 + 16, "exceeded");
  int v24 = &v23[48];
  BOOL v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  int v8 = (const char *)(v7 + 7);
  if (*((char *)v7 + 79) < 0) {
    int v8 = *(const char **)v8;
  }
  saveStringValue("is_buffer_limit_exceeded", v8);
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  *(void *)&v23[48] = operator new(0x20uLL);
  *(_OWORD *)&v23[56] = *(_OWORD *)&v23[32];
  *(_OWORD *)&unsigned char v23[16] = *(_OWORD *)"is_non_converging_prefix";
  strcpy(*(char **)&v23[48], "is_non_converging_prefix");
  int v24 = &v23[48];
  int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  std::string::assign((std::string *)(v9 + 7), "0");
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  unsigned int v10 = (char *)operator new(0x20uLL);
  *(void *)&v23[48] = v10;
  *(_OWORD *)&v23[56] = *(_OWORD *)&v23[32];
  *(_OWORD *)unsigned int v10 = *(_OWORD *)&v23[16];
  strcpy(v10 + 16, "g_prefix");
  int v24 = &v23[48];
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  int v12 = (const char *)(v11 + 7);
  if (*((char *)v11 + 79) < 0) {
    int v12 = *(const char **)v12;
  }
  saveStringValue("is_non_converging_prefix", v12);
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  *(void *)&v23[48] = operator new(0x28uLL);
  *(_WORD *)&v23[34] = 0;
  *(_DWORD *)&v23[36] = 0;
  *(void *)&v23[40] = 0x8000000000000028;
  *(_OWORD *)&v23[56] = xmmword_1003F6190;
  strcpy(v23, "g_unicast_srp_seis_non_convergin%");
  strcpy(*(char **)&v23[48], "is_non_converging_unicast_srp_service");
  int v24 = &v23[48];
  int v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  std::string::assign((std::string *)(v13 + 7), "0");
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  unsigned int v14 = operator new(0x28uLL);
  *(void *)&v23[48] = v14;
  *(_OWORD *)&v23[56] = *(_OWORD *)&v23[32];
  *(_OWORD *)unsigned int v14 = *(_OWORD *)&v23[16];
  *((_OWORD *)v14 + 1) = *(_OWORD *)v23;
  strcpy((char *)v14 + 29, "_service");
  int v24 = &v23[48];
  BOOL v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  BOOL v16 = (const char *)(v15 + 7);
  if (*((char *)v15 + 79) < 0) {
    BOOL v16 = *(const char **)v16;
  }
  saveStringValue("is_non_converging_unicast_srp_service", v16);
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  v23[71] = 20;
  strcpy(&v23[32], "is_network_data_is_network_data_full");
  int v24 = &v23[48];
  BOOL v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  std::string::assign((std::string *)(v17 + 7), "0");
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  v23[71] = 20;
  strcpy(&v23[64], "full");
  *(_OWORD *)&v23[48] = *(_OWORD *)&v23[32];
  int v24 = &v23[48];
  char v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  in6_addr v19 = (const char *)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    in6_addr v19 = *(const char **)v19;
  }
  saveStringValue("is_network_data_full", v19);
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  v23[71] = 20;
  strcpy(&v23[32], "network_data_maxnetwork_data_max_len");
  int v24 = &v23[48];
  unsigned __int8 v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  std::string::assign((std::string *)(v20 + 7), "0");
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
  v23[71] = 20;
  strcpy(&v23[64], "_len");
  *(_OWORD *)&v23[48] = *(_OWORD *)&v23[32];
  int v24 = &v23[48];
  char v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v23[48], (uint64_t)&std::piecewise_construct, &v24);
  int v22 = (const char *)(v21 + 7);
  if (*((char *)v21 + 79) < 0) {
    int v22 = *(const char **)v22;
  }
  saveStringValue("network_data_max_len", v22);
  if ((v23[71] & 0x80000000) != 0) {
    operator delete(*(void **)&v23[48]);
  }
}

void sub_100155850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL HostInterpreter::prefix_config_match(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((*(unsigned __int16 *)(a3 + 17) ^ *(unsigned __int16 *)(a2 + 17)) & 0x7FF) == 0;
}

void HostInterpreter::get_brconfig_from_flags(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  int v4 = *(_WORD *)(a3 + 17) & 0xF900;
  if ((~a2 & 0xC0) != 0)
  {
    if ((a2 & 0x40) != 0)
    {
      v4 |= 1u;
      *(_WORD *)(a3 + 17) = v4;
    }
  }
  else
  {
    v4 |= 3u;
  }
  int8x8_t v5 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(a2), (uint16x4_t)0x1000300050007), (int8x8_t)0x10002000400080);
  int v6 = v5.i32[0] | v5.i32[1] | (a2 >> 1) & 8 | ((*(void *)&v5 | HIDWORD(*(void *)&v5)) >> 16) | (a2 >> 3) & 4 | v4;
  if ((a2 & 0x8000u) != 0) {
    LOWORD(v6) = v6 | 0x200;
  }
  if (a4) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  *(_WORD *)(a3 + 17) = (a2 >> 4) & 0x400 | v7 | v6 & 0xFEFF;
}

void HostInterpreter::update_stabilitymetrics_firmware_for_periodic_ca_metrics(HostInterpreter *this)
{
  StringCFStringRef Value = getStringValue("num_firmware_resets");
  if (StringValue)
  {
    int v2 = atoi((const char *)StringValue);
    snprintf(__str, 0x14uLL, "%d", v2 + 1);
    char v13 = 19;
    strcpy(__p, "num_firmware_resets");
    uint64_t v11 = __p;
    int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
    std::string::assign((std::string *)(v3 + 7), __str);
    if (v13 < 0) {
      operator delete(*(void **)__p);
    }
    char v13 = 19;
    strcpy(__p, "num_firmware_resets");
    uint64_t v11 = __p;
    int v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
    int8x8_t v5 = (const char *)(v4 + 7);
    if (*((char *)v4 + 79) < 0) {
      int8x8_t v5 = *(const char **)v5;
    }
    saveStringValue("num_firmware_resets", v5);
  }
  else
  {
    char v13 = 19;
    strcpy(__p, "num_firmware_resets");
    *(void *)std::string __str = __p;
    int v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    std::string::assign((std::string *)(v6 + 7), "1");
    if (v13 < 0) {
      operator delete(*(void **)__p);
    }
    char v13 = 19;
    strcpy(__p, "num_firmware_resets");
    *(void *)std::string __str = __p;
    __int16 v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    int v8 = (const char *)(v7 + 7);
    if (*((char *)v7 + 79) < 0) {
      int v8 = *(const char **)v8;
    }
    saveStringValue("num_firmware_resets", v8);
  }
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  int v9 = getStringValue("num_firmware_resets");
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "update_stabilitymetrics_firmware_for_periodic_ca_metrics: fw_resets:%s\n", (uint8_t *)__p, 0xCu);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void sub_100155C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::reset_stabilitymetrics_for_periodic_ca_metrics(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)&v14[64] = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "reset_stabilitymetrics_for_periodic_ca_metrics: reset stability counters\n", &v14[64], 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  v14[87] = 19;
  strcpy(&v14[48], "num_firmware_resnum_firmware_resets");
  BOOL v15 = &v14[64];
  int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v14[64], (uint64_t)&std::piecewise_construct, &v15);
  std::string::assign((std::string *)(v3 + 7), "0");
  if ((v14[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v14[64]);
  }
  v14[87] = 19;
  strcpy(&v14[79], "sets");
  *(_OWORD *)&v14[64] = *(_OWORD *)&v14[48];
  BOOL v15 = &v14[64];
  int v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v14[64], (uint64_t)&std::piecewise_construct, &v15);
  int8x8_t v5 = (const char *)(v4 + 7);
  if (*((char *)v4 + 79) < 0) {
    int8x8_t v5 = *(const char **)v5;
  }
  saveStringValue("num_firmware_resets", v5);
  if ((v14[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v14[64]);
  }
  *(void *)&v14[64] = operator new(0x28uLL);
  *(_WORD *)&v14[50] = 0;
  *(_DWORD *)&v14[52] = 0;
  *(void *)&v14[56] = 0x8000000000000028;
  *(_OWORD *)&v14[72] = xmmword_1003F3060;
  strcpy(&v14[16], "rt_due_to_rebootnum_daemon_resta!");
  strcpy(*(char **)&v14[64], "num_daemon_restart_due_to_reboots");
  BOOL v15 = &v14[64];
  int v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v14[64], (uint64_t)&std::piecewise_construct, &v15);
  std::string::assign((std::string *)(v6 + 7), "0");
  if ((v14[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v14[64]);
  }
  __int16 v7 = operator new(0x28uLL);
  *(void *)&v14[64] = v7;
  *(_OWORD *)&v14[72] = *(_OWORD *)&v14[48];
  uint8_t v7[16] = 115;
  *(_OWORD *)__int16 v7 = *(_OWORD *)&v14[32];
  *((_OWORD *)v7 + 1) = *(_OWORD *)&v14[16];
  BOOL v15 = &v14[64];
  int v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v14[64], (uint64_t)&std::piecewise_construct, &v15);
  int v9 = (const char *)(v8 + 7);
  if (*((char *)v8 + 79) < 0) {
    int v9 = *(const char **)v9;
  }
  saveStringValue("num_daemon_restart_due_to_reboots", v9);
  if ((v14[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v14[64]);
  }
  *(void *)&v14[64] = operator new(0x30uLL);
  *(_WORD *)&v14[50] = 0;
  *(_DWORD *)&v14[52] = 0;
  *(void *)&v14[56] = 0x8000000000000030;
  *(_OWORD *)&v14[72] = xmmword_1003F3020;
  strcpy(*(char **)&v14[64], "num_daemon_restart_due_to_crashes_or_jetsams");
  strcpy(v14, "ashes_or_jetsamsrt_due_to_crashenum_daemon_resta,");
  BOOL v15 = &v14[64];
  unsigned int v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v14[64], (uint64_t)&std::piecewise_construct, &v15);
  std::string::assign((std::string *)(v10 + 7), "0");
  if ((v14[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v14[64]);
  }
  uint64_t v11 = operator new(0x30uLL);
  *(void *)&v14[64] = v11;
  *(_OWORD *)&v14[72] = *(_OWORD *)&v14[48];
  *uint64_t v11 = *(_OWORD *)&v14[32];
  v11[1] = *(_OWORD *)&v14[16];
  *(_OWORD *)((char *)v11 + 28) = *(_OWORD *)v14;
  *((unsigned char *)v11 + 44) = 0;
  BOOL v15 = &v14[64];
  int v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v14[64], (uint64_t)&std::piecewise_construct, &v15);
  char v13 = (const char *)(v12 + 7);
  if (*((char *)v12 + 79) < 0) {
    char v13 = *(const char **)v13;
  }
  saveStringValue("num_daemon_restart_due_to_crashes_or_jetsams", v13);
  if ((v14[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v14[64]);
  }
}

void sub_100155FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::update_stabilitymetrics_firmware_for_triggerbased_ca_metrics(HostInterpreter *this)
{
  StringCFStringRef Value = getStringValue("ca_trigger_based_counters_num_firmware_resets");
  if (StringValue)
  {
    int v2 = atoi((const char *)StringValue);
    snprintf(__str, 0x14uLL, "%d", v2 + 1);
    *(void *)std::runtime_error buf = operator new(0x30uLL);
    *(_WORD *)&v13[50] = 0;
    *(_DWORD *)&v13[52] = 0;
    *(void *)&v13[56] = 0x8000000000000030;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1003F61C0;
    strcpy(*(char **)buf, "ca_trigger_based_counters_num_firmware_resets");
    strcpy(v13, "_firmware_resets_counters_num_fica_trigger_based-");
    unsigned int v14 = buf;
    int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, &v14);
    std::string::assign((std::string *)(v3 + 7), __str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v4 = operator new(0x30uLL);
    *(void *)std::runtime_error buf = v4;
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&v13[48];
    _OWORD *v4 = *(_OWORD *)&v13[32];
    v4[1] = *(_OWORD *)&v13[16];
    *(_OWORD *)((char *)v4 + 29) = *(_OWORD *)v13;
    *((unsigned char *)v4 + 45) = 0;
    unsigned int v14 = buf;
    int8x8_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, &v14);
    int v6 = (const char *)(v5 + 7);
    if (*((char *)v5 + 79) < 0) {
      int v6 = *(const char **)v6;
    }
    saveStringValue("ca_trigger_based_counters_num_firmware_resets", v6);
  }
  else
  {
    *(void *)std::runtime_error buf = operator new(0x30uLL);
    *(_WORD *)&v13[50] = 0;
    *(_DWORD *)&v13[52] = 0;
    *(void *)&v13[56] = 0x8000000000000030;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1003F61C0;
    strcpy(*(char **)buf, "ca_trigger_based_counters_num_firmware_resets");
    strcpy(v13, "_firmware_resets_counters_num_fica_trigger_based-");
    *(void *)std::string __str = buf;
    __int16 v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    std::string::assign((std::string *)(v7 + 7), "1");
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v8 = operator new(0x30uLL);
    *(void *)std::runtime_error buf = v8;
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&v13[48];
    _OWORD *v8 = *(_OWORD *)&v13[32];
    v8[1] = *(_OWORD *)&v13[16];
    *(_OWORD *)((char *)v8 + 29) = *(_OWORD *)v13;
    *((unsigned char *)v8 + 45) = 0;
    *(void *)std::string __str = buf;
    int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    unsigned int v10 = (const char *)(v9 + 7);
    if (*((char *)v9 + 79) < 0) {
      unsigned int v10 = *(const char **)v10;
    }
    saveStringValue("ca_trigger_based_counters_num_firmware_resets", v10);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v11 = getStringValue("ca_trigger_based_counters_num_firmware_resets");
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::runtime_error buf = 136315138;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "update_stabilitymetrics_firmware_for_trigger_based_ca_metrics: fw_resets:%s\n", buf, 0xCu);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void sub_100156320(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0)
  {
    operator delete(*(void **)(v1 - 80));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::reset_stabilitymetrics_for_triggerbased_ca_metrics(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::runtime_error buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "reset_stabilitymetrics_for_trigger_based_ca_metrics: reset stability counters\n", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  *(void *)std::runtime_error buf = operator new(0x30uLL);
  *(_WORD *)&v15[66] = 0;
  *(_DWORD *)&v15[68] = 0;
  *(void *)&v15[72] = 0x8000000000000030;
  long long v17 = xmmword_1003F61C0;
  strcpy(*(char **)buf, "ca_trigger_based_counters_num_firmware_resets");
  strcpy(&v15[16], "_firmware_resets_counters_num_fica_trigger_based-");
  char v18 = buf;
  int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  std::string::assign((std::string *)(v3 + 7), "0");
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  int v4 = operator new(0x30uLL);
  *(void *)std::runtime_error buf = v4;
  long long v17 = *(_OWORD *)&v15[64];
  _OWORD *v4 = *(_OWORD *)&v15[48];
  v4[1] = *(_OWORD *)&v15[32];
  *(_OWORD *)((char *)v4 + 29) = *(_OWORD *)&v15[16];
  *((unsigned char *)v4 + 45) = 0;
  char v18 = buf;
  int8x8_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  int v6 = (const char *)(v5 + 7);
  if (*((char *)v5 + 79) < 0) {
    int v6 = *(const char **)v6;
  }
  saveStringValue("ca_trigger_based_counters_num_firmware_resets", v6);
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)std::runtime_error buf = operator new(0x40uLL);
  *(_WORD *)&v15[66] = 0;
  *(_DWORD *)&v15[68] = 0;
  *(void *)&v15[72] = 0x8000000000000040;
  long long v17 = xmmword_1003F61A0;
  strcpy(*(char **)buf, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
  strcpy(v15, "t_due_to_rebootsemon_restart_due_counters_num_daca_trigger_based;");
  char v18 = buf;
  __int16 v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  std::string::assign((std::string *)(v7 + 7), "0");
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  int v8 = operator new(0x40uLL);
  *(void *)std::runtime_error buf = v8;
  long long v17 = *(_OWORD *)&v15[64];
  _OWORD *v8 = *(_OWORD *)&v15[48];
  v8[1] = *(_OWORD *)&v15[32];
  _DWORD v8[2] = *(_OWORD *)&v15[16];
  *(_OWORD *)((char *)v8 + 43) = *(_OWORD *)v15;
  *((unsigned char *)v8 + 59) = 0;
  char v18 = buf;
  int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  unsigned int v10 = (const char *)(v9 + 7);
  if (*((char *)v9 + 79) < 0) {
    unsigned int v10 = *(const char **)v10;
  }
  saveStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_reboots", v10);
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)std::runtime_error buf = operator new(0x48uLL);
  *(_WORD *)&v15[66] = 0;
  *(_DWORD *)&v15[68] = 0;
  *(void *)&v15[72] = 0x8000000000000048;
  long long v17 = xmmword_1003F61B0;
  strcpy(v15, "ca_trigger_based_counters_num_da_to_crashes_or_jemon_restart_dueF");
  strcpy(*(char **)buf, "ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
  char v18 = buf;
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  std::string::assign((std::string *)(v11 + 7), "0");
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  int v12 = operator new(0x48uLL);
  *(void *)std::runtime_error buf = v12;
  long long v17 = *(_OWORD *)&v15[64];
  *((_OWORD *)v12 + 2) = *(_OWORD *)&v15[48];
  *((_OWORD *)v12 + 3) = *(_OWORD *)&v15[32];
  strcpy((char *)v12 + 62, "_jetsams");
  *(_OWORD *)int v12 = *(_OWORD *)v15;
  *((_OWORD *)v12 + 1) = *(_OWORD *)&v15[16];
  char v18 = buf;
  char v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  unsigned int v14 = (const char *)(v13 + 7);
  if (*((char *)v13 + 79) < 0) {
    unsigned int v14 = *(const char **)v14;
  }
  saveStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams", v14);
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100156734(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void HostInterpreter::persist_awd_stability_counters(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    int v2 = logging_obg;
    if (syslog_is_the_mask_enabled(7))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
        HostInterpreter::persist_awd_stability_counters();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  operator new();
}

void sub_100157124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v28 = a21;
      if (!a21) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  uint64_t v28 = a21;
  if (!a21) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void HostInterpreter::save_awd_stability_counters(CFDateFormatterRef *this)
{
  unint64_t v1 = *((void *)&xmmword_1004B5FE8 + 1);
  if (*((void *)&xmmword_1004B5FE8 + 1) < 0xE3C7A73401uLL)
  {
    CFDateRef v3 = 0;
    CFStringRef StringWithDate = 0;
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg) {
      goto LABEL_3;
    }
  }
  else
  {
    CFDateRef v3 = CFDateCreate(kCFAllocatorDefault, (double)((*((void *)&xmmword_1004B5FE8 + 1) - 978307200000) / 0x3E8uLL));
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(kCFAllocatorDefault, this[40], v3);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
LABEL_3:
      int v6 = logging_obg;
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        HostInterpreter::save_awd_stability_counters(StringWithDate, v1 % 0x3E8, v6);
        if (xmmword_1004B5FE8 != -559038737) {
          goto LABEL_11;
        }
LABEL_10:
        *(int32x2_t *)&xmmword_1004B5FF8 = vdup_n_s32(0xDEADBEEF);
        goto LABEL_11;
      }
LABEL_9:
      if (xmmword_1004B5FE8 != -559038737) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_9;
  }
  -[PowerEventHandler_Rcp init:]();
  if (xmmword_1004B5FE8 == -559038737) {
    goto LABEL_10;
  }
LABEL_11:
  if (v3) {
    CFRelease(v3);
  }
  if (StringWithDate) {
    CFRelease(StringWithDate);
  }
}

uint64_t HostInterpreter::SaveCrashLogs(uint64_t a1, uint64_t a2)
{
  __int16 v48 = 0;
  char v47 = 8;
  strcpy((char *)__p, "NRF52833");
  VersionString = (const char *)otPlatRadioGetVersionString();
  size_t v4 = strlen(VersionString);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v13 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v13 = v4 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    size_t v44 = v9;
    unint64_t v45 = v14 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v45) = v4;
    p_dst = (void **)&__dst;
    if (!v4)
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v11) = HIBYTE(v45);
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  memmove(p_dst, VersionString, v9);
  *((unsigned char *)p_dst + v9) = 0;
  LOBYTE(v11) = HIBYTE(v45);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_5:
    int64_t v11 = v11;
    if ((_BYTE)v11)
    {
      int v12 = (void **)&__dst;
      goto LABEL_13;
    }
    goto LABEL_72;
  }
LABEL_11:
  int64_t v11 = v44;
  if (v44)
  {
    int v12 = __dst;
LABEL_13:
    int v42 = 483328;
    if (v47 >= 0) {
      BOOL v15 = __p;
    }
    else {
      BOOL v15 = (void **)__p[0];
    }
    if (v47 >= 0) {
      int64_t v16 = v47;
    }
    else {
      int64_t v16 = (int64_t)__p[1];
    }
    if (v16)
    {
      if (v11 < v16) {
        goto LABEL_21;
      }
      uint64_t v35 = (char *)v12 + v11;
      int v36 = *(char *)v15;
      __int16 v37 = v12;
      while (1)
      {
        int64_t v38 = v11 - v16;
        if (v38 == -1) {
          goto LABEL_21;
        }
        unsigned int v39 = (char *)memchr(v37, v36, v38 + 1);
        if (!v39) {
          goto LABEL_21;
        }
        int v40 = v39;
        if (!memcmp(v39, v15, v16)) {
          break;
        }
        __int16 v37 = (void **)(v40 + 1);
        int64_t v11 = v35 - (v40 + 1);
        if (v11 < v16) {
          goto LABEL_21;
        }
      }
      if (v40 == v35 || v40 - (char *)v12 == -1) {
LABEL_21:
      }
        int v42 = 229376;
    }
    int v17 = 0;
    while (1)
    {
      uint64_t v18 = otPlatPeek((uint64_t)v52, (uint64_t)&v48, v42 + v17, 0x400u, v5, v6, v7, v8);
      in6_addr v19 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0) {
        in6_addr v19 = *(const char **)a2;
      }
      int appended = append_data_to_file(v19, v52, 0xFFu);
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg) {
        break;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      *(_DWORD *)std::runtime_error buf = 136315394;
      *(void *)uint64_t v50 = "com.apple.wpantund.ncp";
      *(_WORD *)&v50[8] = 2080;
      int v51 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      int v22 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0) {
        goto LABEL_35;
      }
LABEL_36:
      int v23 = append_data_to_file(v22, v53, 0xFFu);
      int v24 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v24)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::runtime_error buf = 67109376;
          *(_DWORD *)uint64_t v50 = v23;
          *(_WORD *)&unsigned char v50[4] = 1024;
          *(_DWORD *)&v50[6] = 1;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Chars written: %u, writeCount[%u]", buf, 0xEu);
          __int16 v25 = (const char *)a2;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
            goto LABEL_44;
          }
        }
        else
        {
LABEL_42:
          __int16 v25 = (const char *)a2;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
            goto LABEL_44;
          }
        }
LABEL_43:
        __int16 v25 = *(const char **)a2;
        goto LABEL_44;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_42;
      }
      *(_DWORD *)std::runtime_error buf = 136315394;
      *(void *)uint64_t v50 = "com.apple.wpantund.ncp";
      *(_WORD *)&v50[8] = 2080;
      int v51 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      __int16 v25 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0) {
        goto LABEL_43;
      }
LABEL_44:
      int v26 = append_data_to_file(v25, v54, 0xFFu);
      int v27 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v27)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::runtime_error buf = 67109376;
          *(_DWORD *)uint64_t v50 = v26;
          *(_WORD *)&unsigned char v50[4] = 1024;
          *(_DWORD *)&v50[6] = 2;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Chars written: %u, writeCount[%u]", buf, 0xEu);
          uint64_t v28 = (const char *)a2;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
            goto LABEL_52;
          }
        }
        else
        {
LABEL_50:
          uint64_t v28 = (const char *)a2;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
            goto LABEL_52;
          }
        }
LABEL_51:
        uint64_t v28 = *(const char **)a2;
        goto LABEL_52;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)std::runtime_error buf = 136315394;
      *(void *)uint64_t v50 = "com.apple.wpantund.ncp";
      *(_WORD *)&v50[8] = 2080;
      int v51 = "default";
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      uint64_t v28 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0) {
        goto LABEL_51;
      }
LABEL_52:
      int v29 = append_data_to_file(v28, v55, 0xFFu);
      size_t v30 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v30)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::runtime_error buf = 67109376;
          *(_DWORD *)uint64_t v50 = v29;
          *(_WORD *)&unsigned char v50[4] = 1024;
          *(_DWORD *)&v50[6] = 3;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Chars written: %u, writeCount[%u]", buf, 0xEu);
          uint64_t v31 = (const char *)a2;
          if (*(char *)(a2 + 23) < 0) {
            goto LABEL_59;
          }
          goto LABEL_60;
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)uint64_t v50 = "com.apple.wpantund.ncp";
        *(_WORD *)&v50[8] = 2080;
        int v51 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
        uint64_t v31 = (const char *)a2;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_60;
        }
LABEL_59:
        uint64_t v31 = *(const char **)a2;
        goto LABEL_60;
      }
      uint64_t v31 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0) {
        goto LABEL_59;
      }
LABEL_60:
      int v32 = append_data_to_file(v31, v56, 4u);
      uint64_t v33 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v33)
      {
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::runtime_error buf = 67109376;
          *(_DWORD *)uint64_t v50 = v32;
          *(_WORD *)&unsigned char v50[4] = 1024;
          *(_DWORD *)&v50[6] = 4;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Chars written: %u, write_count[%u]", buf, 0xEu);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::runtime_error buf = 136315394;
        *(void *)uint64_t v50 = "com.apple.wpantund.ncp";
        *(_WORD *)&v50[8] = 2080;
        int v51 = "default";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", buf, 0x16u);
      }
      v17 += 1024;
      if (v17 == 12288) {
        goto LABEL_88;
      }
    }
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::runtime_error buf = 67109376;
      *(_DWORD *)uint64_t v50 = appended;
      *(_WORD *)&unsigned char v50[4] = 1024;
      *(_DWORD *)&v50[6] = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Chars written: %u, writeCount[%u]", buf, 0xEu);
      int v22 = (const char *)a2;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }
    else
    {
LABEL_34:
      int v22 = (const char *)a2;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }
LABEL_35:
    int v22 = *(const char **)a2;
    goto LABEL_36;
  }
LABEL_72:
  uint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v34)
  {
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      HostInterpreter::SaveCrashLogs();
    }
LABEL_84:
    uint64_t v18 = 1;
    if (SHIBYTE(v45) < 0) {
      goto LABEL_85;
    }
LABEL_89:
    if ((v47 & 0x80000000) == 0) {
      return v18;
    }
    goto LABEL_86;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
    goto LABEL_84;
  }
  uint64_t v18 = 1;
LABEL_88:
  if ((SHIBYTE(v45) & 0x80000000) == 0) {
    goto LABEL_89;
  }
LABEL_85:
  operator delete(__dst);
  if (v47 < 0) {
LABEL_86:
  }
    operator delete(__p[0]);
  return v18;
}

void sub_100157C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *___ZN15HostInterpreter22ProcessGetRcpCrashDumpEhPPcPv_block_invoke(uint64_t a1)
{
  xpc_object_t empty = xpc_dictionary_create_empty();
  CFDateRef v3 = empty;
  size_t v4 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    size_t v4 = *(const char **)v4;
  }
  xpc_dictionary_set_string(empty, "ncp_crash_reason", v4);
  uint64_t v5 = (const char *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  xpc_dictionary_set_string(v3, "ncp_reset_type", v5);
  uint64_t v6 = (const char *)(RcpHostContext::sRcpHostContext + 528);
  if (*(char *)(RcpHostContext::sRcpHostContext + 551) < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  xpc_dictionary_set_string(v3, "header_vendor_version", v6);
  uint64_t v7 = (const char *)(RcpHostContext::sRcpHostContext + 480);
  if (*(char *)(RcpHostContext::sRcpHostContext + 503) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  xpc_dictionary_set_string(v3, "header_daemon_version", v7);
  xpc_dictionary_set_BOOL(v3, "is_mtbf_qualified", *(unsigned char *)(a1 + 80));
  return v3;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
    uint64_t v5 = (std::string *)(a1 + 56);
    if ((*(char *)(a2 + 79) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
    uint64_t v5 = (std::string *)(a1 + 56);
    if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 56);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
}

void sub_100157DBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 32);

  operator delete(v2);
}

void HostInterpreter::clearHealthInfoMetrics(HostInterpreter *this)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v2 = logging_obg;
    if (syslog_is_the_mask_enabled(6))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315138;
        uint64_t v7 = "clearHealthInfoMetrics";
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Clear Health Info Metrics: %s", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
  AWDMetricsHandlers_handle_reset_daemon();
  AWDMetricsHandlers_handle_reset_stabilityData();
  HostInterpreter::reset_stabilitymetrics_for_periodic_ca_metrics(v3);
  HostInterpreter::reset_stabilitymetrics_for_triggerbased_ca_metrics(v4);
  HostInterpreter::persist_awd_stability_counters(v5);
}

void HostInterpreter::LogResult(uint64_t a1, int a2)
{
  if (a2 == 36) {
    return;
  }
  if (!a2)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      long long v4 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10[0]) = 0;
        uint64_t v5 = "Done";
        int v6 = v4;
        uint32_t v7 = 2;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)v10, v7);
        return;
      }
      return;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_15:
    -[PowerEventHandler_Rcp init:]();
    return;
  }
  uint64_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v8)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_15;
  }
  size_t v9 = v8;
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109378;
    v10[1] = a2;
    __int16 v11 = 2080;
    int v12 = otThreadErrorToString(a2);
    uint64_t v5 = "Error %d: %s";
    int v6 = v9;
    uint32_t v7 = 18;
    goto LABEL_11;
  }
}

void HostInterpreter::Initialize()
{
}

void sub_100158134()
{
}

void HostInterpreter::processCommand(uint64_t a1, void **a2)
{
  uint64_t v84 = 0;
  switch(*((_DWORD *)*a2 + 3))
  {
    case 0:
    case 1:
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        uint64_t v5 = logging_obg;
        if (syslog_is_the_mask_enabled(3))
        {
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            HostInterpreter::processCommand();
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_147;
      }
      return;
    case 2:
      int v6 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v6)
      {
        uint32_t v7 = v6;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_THREAD_START]", v83, 2u);
          size_t v9 = "ThreadStart";
          goto LABEL_219;
        }
        goto LABEL_149;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_149:
        size_t v9 = "ThreadStart";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "ThreadStart";
      goto LABEL_219;
    case 3:
      unsigned int v10 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v10)
      {
        __int16 v11 = v10;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_THREAD_STOP]", v83, 2u);
          size_t v9 = "ThreadStop";
          goto LABEL_219;
        }
        goto LABEL_151;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_151:
        size_t v9 = "ThreadStop";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "ThreadStop";
      goto LABEL_219;
    case 4:
      int v12 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v12)
      {
        uint64_t v13 = v12;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_PROPERTY_GET]", v83, 2u);
          size_t v9 = "PropertyGet";
          goto LABEL_219;
        }
        goto LABEL_153;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_153:
        size_t v9 = "PropertyGet";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "PropertyGet";
      goto LABEL_219;
    case 5:
      uint64_t v14 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v14)
      {
        BOOL v15 = v14;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_PROPERTY_SET]", v83, 2u);
          size_t v9 = "PropertySet";
          goto LABEL_219;
        }
        goto LABEL_155;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_155:
        size_t v9 = "PropertySet";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "PropertySet";
      goto LABEL_219;
    case 6:
      int64_t v16 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v16)
      {
        int v17 = v16;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_SERVICE_ADD]", v83, 2u);
          size_t v9 = "ServiceAdd";
          goto LABEL_219;
        }
        goto LABEL_157;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_157:
        size_t v9 = "ServiceAdd";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "ServiceAdd";
      goto LABEL_219;
    case 7:
      uint64_t v18 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v18)
      {
        in6_addr v19 = v18;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_SERVICE_REMOVE]", v83, 2u);
          size_t v9 = "ServiceRemove";
          goto LABEL_219;
        }
        goto LABEL_159;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_159:
        size_t v9 = "ServiceRemove";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "ServiceRemove";
      goto LABEL_219;
    case 8:
      unsigned __int8 v20 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v20)
      {
        char v21 = v20;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_ROUTE_ADD]", v83, 2u);
          size_t v9 = "RouteAdd";
          goto LABEL_219;
        }
        goto LABEL_161;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_161:
        size_t v9 = "RouteAdd";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "RouteAdd";
      goto LABEL_219;
    case 9:
      int v22 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v22)
      {
        int v23 = v22;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_ROUTE_REMOVE]", v83, 2u);
          size_t v9 = "RouteRemove";
          goto LABEL_219;
        }
        goto LABEL_163;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_163:
        size_t v9 = "RouteRemove";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "RouteRemove";
      goto LABEL_219;
    case 0xA:
      int v24 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v24)
      {
        __int16 v25 = v24;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_PREFIX_ADD]", v83, 2u);
          size_t v9 = "PrefixAdd";
          goto LABEL_219;
        }
        goto LABEL_165;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_165:
        size_t v9 = "PrefixAdd";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "PrefixAdd";
      goto LABEL_219;
    case 0xB:
      int v26 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v26)
      {
        int v27 = v26;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_PREFIX_REMOVE]", v83, 2u);
          size_t v9 = "PrefixRemove";
          goto LABEL_219;
        }
        goto LABEL_167;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_167:
        size_t v9 = "PrefixRemove";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "PrefixRemove";
      goto LABEL_219;
    case 0xC:
      uint64_t v28 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v28)
      {
        int v29 = v28;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_FORM_THREAD_NETWORK]", v83, 2u);
          size_t v9 = "Form";
          goto LABEL_219;
        }
        goto LABEL_169;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_169:
        size_t v9 = "Form";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Form";
      goto LABEL_219;
    case 0xD:
      size_t v30 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v30)
      {
        uint64_t v31 = v30;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_JOIN_THREAD_NETWORK]", v83, 2u);
          size_t v9 = "Join";
          goto LABEL_219;
        }
        goto LABEL_171;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_171:
        size_t v9 = "Join";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Join";
      goto LABEL_219;
    case 0xE:
      int v32 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v32)
      {
        uint64_t v33 = v32;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_LEAVE_THREAD_NETWORK]", v83, 2u);
          size_t v9 = "Leave";
          goto LABEL_219;
        }
        goto LABEL_173;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_173:
        size_t v9 = "Leave";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Leave";
      goto LABEL_219;
    case 0xF:
      uint64_t v34 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v34)
      {
        uint64_t v35 = v34;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_RECONNECT_THREAD]", v83, 2u);
          size_t v9 = "ReconnectThread";
          goto LABEL_219;
        }
        goto LABEL_175;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_175:
        size_t v9 = "ReconnectThread";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "ReconnectThread";
      goto LABEL_219;
    case 0x10:
      int v36 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v36)
      {
        __int16 v37 = v36;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_INITIALIZE]", v83, 2u);
          size_t v9 = "Initialize";
          goto LABEL_219;
        }
        goto LABEL_177;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_177:
        size_t v9 = "Initialize";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Initialize";
      goto LABEL_219;
    case 0x11:
      int64_t v38 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v38)
      {
        unsigned int v39 = v38;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_RESET]", v83, 2u);
          size_t v9 = "Reset";
          goto LABEL_219;
        }
        goto LABEL_179;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_179:
        size_t v9 = "Reset";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Reset";
      goto LABEL_219;
    case 0x12:
      int v40 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v40)
      {
        uint64_t v41 = v40;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_HARD_RESET]", v83, 2u);
          size_t v9 = "HardReset";
          goto LABEL_219;
        }
        goto LABEL_181;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_181:
        size_t v9 = "HardReset";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "HardReset";
      goto LABEL_219;
    case 0x13:
      int v42 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v42)
      {
        int v43 = v42;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_DATASET_UPDATE]", v83, 2u);
          size_t v9 = "DatasetUpdate";
          goto LABEL_219;
        }
        goto LABEL_183;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_183:
        size_t v9 = "DatasetUpdate";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "DatasetUpdate";
      goto LABEL_219;
    case 0x14:
      size_t v44 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v44)
      {
        unint64_t v45 = v44;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_STATUS]", v83, 2u);
          size_t v9 = "Status";
          goto LABEL_219;
        }
        goto LABEL_185;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_185:
        size_t v9 = "Status";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Status";
      goto LABEL_219;
    case 0x15:
      __int16 v46 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v46)
      {
        char v47 = v46;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_NET_SCAN]", v83, 2u);
          size_t v9 = "NetScan";
          goto LABEL_219;
        }
        goto LABEL_187;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_187:
        size_t v9 = "NetScan";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "NetScan";
      goto LABEL_219;
    case 0x16:
      __int16 v48 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v48)
      {
        uint64_t v49 = v48;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_DISCOVER_SCAN]", v83, 2u);
          size_t v9 = "DiscoverScan";
          goto LABEL_219;
        }
        goto LABEL_189;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_189:
        size_t v9 = "DiscoverScan";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "DiscoverScan";
      goto LABEL_219;
    case 0x17:
      uint64_t v50 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v50)
      {
        int v51 = v50;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_ENERGY_SCAN]", v83, 2u);
          size_t v9 = "EnergyScan";
          goto LABEL_219;
        }
        goto LABEL_191;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_191:
        size_t v9 = "EnergyScan";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "EnergyScan";
      goto LABEL_219;
    case 0x18:
      char v52 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v52)
      {
        char v53 = v52;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_GEN_PSKC]", v83, 2u);
          size_t v9 = "GeneratePSKc";
          goto LABEL_219;
        }
        goto LABEL_193;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_193:
        size_t v9 = "GeneratePSKc";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "GeneratePSKc";
      goto LABEL_219;
    case 0x19:
      int v54 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v54)
      {
        unsigned __int16 v55 = v54;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_GET_RCP_CRASH_DUMP]", v83, 2u);
          size_t v9 = "GetRcpCrashDump";
          goto LABEL_219;
        }
        goto LABEL_195;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_195:
        size_t v9 = "GetRcpCrashDump";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "GetRcpCrashDump";
      goto LABEL_219;
    case 0x1A:
      int v56 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v56)
      {
        int v57 = v56;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_PEEK]", v83, 2u);
          size_t v9 = "Peek";
          goto LABEL_219;
        }
        goto LABEL_197;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_197:
        size_t v9 = "Peek";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "Peek";
      goto LABEL_219;
    case 0x1B:
      uint64_t v58 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v58)
      {
        size_t v59 = v58;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_RCP_INIT]", v83, 2u);
          size_t v9 = "RcpInit";
          goto LABEL_219;
        }
        goto LABEL_199;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_199:
        size_t v9 = "RcpInit";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "RcpInit";
      goto LABEL_219;
    case 0x1C:
      size_t v60 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v60)
      {
        BOOL v61 = v60;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_CFG_TDM]", v83, 2u);
          size_t v9 = "CfgTdm";
          goto LABEL_219;
        }
        goto LABEL_201;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_201:
        size_t v9 = "CfgTdm";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "CfgTdm";
      goto LABEL_219;
    case 0x1D:
      uint64_t v62 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v62)
      {
        uint64_t v63 = v62;
        if (syslog_is_the_mask_enabled(3))
        {
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            HostInterpreter::processCommand();
            size_t v9 = "ConfigDeepSleep";
            goto LABEL_219;
          }
          goto LABEL_203;
        }
        size_t v9 = "ConfigDeepSleep";
      }
      else
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
LABEL_203:
          size_t v9 = "ConfigDeepSleep";
          goto LABEL_219;
        }
        -[PowerEventHandler_Rcp init:]();
        size_t v9 = "ConfigDeepSleep";
      }
      goto LABEL_219;
    case 0x1E:
      uint64_t v64 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v64)
      {
        char v65 = v64;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_REPORT_CRASH_INFO]", v83, 2u);
          size_t v9 = "RcpReportCrashInfo";
          goto LABEL_219;
        }
        goto LABEL_205;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_205:
        size_t v9 = "RcpReportCrashInfo";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "RcpReportCrashInfo";
      goto LABEL_219;
    case 0x1F:
      uint64_t v66 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v66)
      {
        int v67 = v66;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_UPDATE_PRIMARY_RESIDENT]", v83, 2u);
          size_t v9 = "UpdatePrimaryResident";
          goto LABEL_219;
        }
        goto LABEL_207;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_207:
        size_t v9 = "UpdatePrimaryResident";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "UpdatePrimaryResident";
      goto LABEL_219;
    case 0x23:
      uint64_t v70 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v70)
      {
        uint64_t v71 = v70;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          HostInterpreter::processCommand();
          size_t v9 = "DiagGetDeviceData";
          goto LABEL_219;
        }
        goto LABEL_211;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_211:
        size_t v9 = "DiagGetDeviceData";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "DiagGetDeviceData";
      goto LABEL_219;
    case 0x25:
      uint64_t v72 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v72)
      {
        int v73 = v72;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_WED_START]", v83, 2u);
          size_t v9 = "WedStart";
          goto LABEL_219;
        }
        goto LABEL_213;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_213:
        size_t v9 = "WedStart";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "WedStart";
      goto LABEL_219;
    case 0x26:
      uint64_t v74 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v74)
      {
        int v75 = v74;
        if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_WED_STOP]", v83, 2u);
          size_t v9 = "WedStop";
          goto LABEL_219;
        }
        goto LABEL_215;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_215:
        size_t v9 = "WedStop";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "WedStop";
      goto LABEL_219;
    case 0x28:
      size_t v76 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v76)
      {
        size_t v77 = v76;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          HostInterpreter::processCommand();
          size_t v9 = "UpdateAccessoryAddr";
          goto LABEL_219;
        }
        goto LABEL_217;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_217:
        size_t v9 = "UpdateAccessoryAddr";
        goto LABEL_219;
      }
      -[PowerEventHandler_Rcp init:]();
      size_t v9 = "UpdateAccessoryAddr";
LABEL_219:
      std::string v78 = ot::Utils::LookupTable::Find((ot::Utils::LookupTable *)v9, (const char *)&HostInterpreter::sCommands, (const void *)0x1E, 0x18u, (uint64_t (*)(const char *))ot::Utils::LookupTable::GetName<HostInterpreter::Command>, v8);
      if (v78)
      {
        uint64_t v79 = (uint64_t (*)(void *, uint64_t, uint64_t *, void))*((void *)v78 + 1);
        uint64_t v80 = *((void *)v78 + 2);
        uint64_t v81 = (void *)(a1 + (v80 >> 1));
        if (v80) {
          uint64_t v79 = *(uint64_t (**)(void *, uint64_t, uint64_t *, void))(*v81 + v79);
        }
        uint64_t v82 = v79(v81, 1, &v84, **a2);
        HostInterpreter::LogResult(v82, v82);
      }
      return;
    default:
      size_t v68 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v68)
      {
        size_t v69 = v68;
        if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
          HostInterpreter::processCommand();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_147:
        -[PowerEventHandler_Rcp init:]();
      }
      return;
  }
}

uint64_t HostInterpreter::rcp_ot_dataset_update(unsigned __int16 *a1, unsigned int a2, const void *a3, size_t a4, ot::MeshCoP::Dataset::Info *a5)
{
  if (a3 && a4)
  {
    if (a2 < 2)
    {
      ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v19);
      memcpy(v19, a3, a4);
      v19[130] = a4;
      if (ot::MeshCoP::Dataset::IsValid((ot::MeshCoP::Dataset *)v19))
      {
        ot::MeshCoP::Dataset::ConvertTo((ot::MeshCoP::Dataset *)v19, a5);
      }
      else
      {
        logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg)
        {
          BOOL v15 = logging_obg;
          if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            HostInterpreter::rcp_ot_dataset_update();
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        ot::Spinel::Decoder::Init((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 *)a3, a4);
        int v16 = HostInterpreter::DecodeOperationalDataset(a1, (uint64_t)a5, 0, 0, 0, 0);
        int v17 = log_get_logging_obg("com.apple.threadradiod", "default");
        uint64_t v18 = v17;
        if (v16)
        {
          if (v17)
          {
            uint64_t result = syslog_is_the_mask_enabled(3);
            if (result)
            {
              uint64_t result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
              if (result)
              {
                HostInterpreter::rcp_ot_dataset_update();
                return 0;
              }
            }
          }
          else
          {
            uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
            if (result)
            {
              -[PowerEventHandler_Rcp init:]();
              return 0;
            }
          }
          return result;
        }
        if (v17)
        {
          if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            HostInterpreter::rcp_ot_dataset_update();
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
      }
      return 1;
    }
    int v6 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v6)
    {
      uint32_t v7 = v6;
      uint64_t result = syslog_is_the_mask_enabled(3);
      if (result)
      {
        uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
        if (result)
        {
          HostInterpreter::rcp_ot_dataset_update();
          return 0;
        }
      }
      return result;
    }
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
LABEL_16:
    -[PowerEventHandler_Rcp init:]();
    return 0;
  }
  size_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v9)
  {
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  unsigned int v10 = v9;
  uint64_t result = syslog_is_the_mask_enabled(3);
  if (result)
  {
    uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HostInterpreter::rcp_ot_dataset_update();
      return 0;
    }
  }
  return result;
}

uint64_t HostInterpreter::DecodeOperationalDataset(unsigned __int16 *a1, uint64_t a2, char **a3, unsigned __int8 *a4, char **a5, int a6)
{
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a1[101] == a1[102]) {
    return 0;
  }
  uint64_t v13 = (unsigned __int16 *)(a2 + 110);
  uint64_t v14 = (_OWORD *)(a2 + 94);
  int v24 = (unsigned int *)(a2 + 84);
  __int16 v25 = (unsigned __int16 *)(a2 + 88);
  char v21 = (_OWORD *)(a2 + 32);
  long long __dst = (void *)(a2 + 48);
  int v23 = (unint64_t *)(a2 + 16);
  while (2)
  {
    unsigned int v28 = 0;
    uint64_t result = ot::Spinel::Decoder::OpenStruct((ot::Spinel::Decoder *)(a1 + 96));
    if (!result)
    {
      uint64_t result = ot::Spinel::Decoder::ReadUintPacked((ot::Spinel::Decoder *)(a1 + 96), &v28);
      if (!result)
      {
        switch(v28)
        {
          case '!':
            if (a6 && a1[101] == a1[102]) {
              goto LABEL_18;
            }
            LOBYTE(__s) = 0;
            uint64_t result = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)(a1 + 96), (unsigned __int8 *)&__s);
            if (result) {
              return result;
            }
            *(_WORD *)(a2 + 90) = __s;
LABEL_18:
            __int16 v15 = *(_WORD *)(a2 + 120) | 0x100;
            goto LABEL_102;
          case '""':
            int v16 = a1[101];
            int v17 = a1[102];
            if (a6 && v16 == v17) {
              goto LABEL_31;
            }
            LOBYTE(__s) = 0;
            *(_DWORD *)(a2 + 116) = 0;
            if (v16 == v17) {
              goto LABEL_31;
            }
            while (1)
            {
              uint64_t result = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)(a1 + 96), (unsigned __int8 *)&__s);
              if (result) {
                return result;
              }
              if (__s > 0x1FuLL) {
                return 7;
              }
              *(_DWORD *)(a2 + 116) |= 1 << (char)__s;
              if (a1[101] == a1[102])
              {
LABEL_31:
                __int16 v15 = *(_WORD *)(a2 + 120) | 0x800;
                goto LABEL_102;
              }
            }
          case '#':
          case '$':
          case '%':
          case '&':
          case '\'':
          case '(':
          case ')':
          case '*':
          case '+':
          case ',':
          case '-':
          case '.':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'a':
            goto LABEL_103;
          case '6':
            if (!a6 || a1[101] != a1[102])
            {
              uint64_t result = ot::Spinel::Decoder::ReadUint16((ot::Spinel::Decoder *)(a1 + 96), v25);
              if (result) {
                return result;
              }
            }
            __int16 v15 = *(_WORD *)(a2 + 120) | 0x80;
            goto LABEL_102;
          case 'D':
            if (a6 && a1[101] == a1[102]) {
              goto LABEL_41;
            }
            __s = 0;
            uint64_t result = ot::Spinel::Decoder::ReadUtf8((ot::Spinel::Decoder *)(a1 + 96), (const char **)&__s);
            if (result) {
              return result;
            }
            size_t v18 = strlen(__s);
            if (v18 >= 0x11) {
              return 7;
            }
            memcpy(__dst, __s, v18 + 1);
LABEL_41:
            __int16 v15 = *(_WORD *)(a2 + 120) | 8;
            goto LABEL_102;
          case 'E':
            if (a6 && a1[101] == a1[102]) {
              goto LABEL_47;
            }
            __s = 0;
            *(_WORD *)int v26 = 0;
            uint64_t result = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 **)&__s, (unsigned __int16 *)v26);
            if (result) {
              return result;
            }
            if (*(unsigned __int16 *)v26 != 8) {
              return 7;
            }
            *(void *)(a2 + 65) = *(void *)__s;
LABEL_47:
            __int16 v15 = *(_WORD *)(a2 + 120) | 0x10;
            goto LABEL_102;
          case 'F':
            if (a6 && a1[101] == a1[102]) {
              goto LABEL_53;
            }
            __s = 0;
            *(_WORD *)int v26 = 0;
            uint64_t result = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 **)&__s, (unsigned __int16 *)v26);
            if (result) {
              return result;
            }
            if (*(unsigned __int16 *)v26 != 16) {
              return 7;
            }
            _OWORD *v21 = *(_OWORD *)__s;
LABEL_53:
            __int16 v15 = *(_WORD *)(a2 + 120) | 4;
            goto LABEL_102;
          case 'K':
            if (a6 && a1[101] == a1[102]) {
              goto LABEL_59;
            }
            __s = 0;
            *(_WORD *)int v26 = 0;
            uint64_t result = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 **)&__s, (unsigned __int16 *)v26);
            if (result) {
              return result;
            }
            if (*(unsigned __int16 *)v26 != 16) {
              return 7;
            }
            *uint64_t v14 = *(_OWORD *)__s;
LABEL_59:
            __int16 v15 = *(_WORD *)(a2 + 120) | 0x200;
            goto LABEL_102;
          case 'b':
            if (a6 && a1[101] == a1[102]) {
              goto LABEL_66;
            }
            __s = 0;
            v26[0] = 0;
            uint64_t result = ot::Spinel::Decoder::ReadItem((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 **)&__s, 0x10u);
            if (result) {
              return result;
            }
            uint64_t result = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)(a1 + 96), v26);
            if (result) {
              return result;
            }
            if (v26[0] != 64) {
              return 7;
            }
            *(void *)(a2 + 73) = *(void *)__s;
LABEL_66:
            __int16 v15 = *(_WORD *)(a2 + 120) | 0x20;
            goto LABEL_102;
          default:
            switch(v28)
            {
              case 0x151Cu:
                if (a6 && a1[101] == a1[102]) {
                  goto LABEL_24;
                }
                uint64_t result = ot::Spinel::Decoder::ReadUint64((ot::Spinel::Decoder *)(a1 + 96), (unint64_t *)a2);
                if (result) {
                  return result;
                }
                *(_WORD *)(a2 + 8) = 0;
                *(unsigned char *)(a2 + 10) = 0;
LABEL_24:
                __int16 v15 = *(_WORD *)(a2 + 120) | 1;
                goto LABEL_102;
              case 0x151Du:
                if (a6 && a1[101] == a1[102]) {
                  goto LABEL_71;
                }
                uint64_t result = ot::Spinel::Decoder::ReadUint64((ot::Spinel::Decoder *)(a1 + 96), v23);
                if (result) {
                  return result;
                }
                *(_WORD *)(a2 + 24) = 0;
                *(unsigned char *)(a2 + 26) = 0;
LABEL_71:
                __int16 v15 = *(_WORD *)(a2 + 120) | 2;
                goto LABEL_102;
              case 0x151Eu:
                if (!a6 || a1[101] != a1[102])
                {
                  uint64_t result = ot::Spinel::Decoder::ReadUint32((ot::Spinel::Decoder *)(a1 + 96), v24);
                  if (result) {
                    return result;
                  }
                }
                __int16 v15 = *(_WORD *)(a2 + 120) | 0x40;
                goto LABEL_102;
              case 0x151Fu:
                if (a6 && a1[101] == a1[102]) {
                  goto LABEL_101;
                }
                uint64_t result = ot::Spinel::Decoder::ReadUint16((ot::Spinel::Decoder *)(a1 + 96), v13);
                if (result) {
                  return result;
                }
                uint64_t result = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)(a1 + 96), (unsigned __int8 *)&__s);
                if (result) {
                  return result;
                }
                if (otThreadGetVersion() < 3 || a1[102] == a1[101])
                {
                  unsigned __int8 v19 = 1;
                }
                else
                {
                  uint64_t result = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)(a1 + 96), (unsigned __int8 *)&__s + 1);
                  if (result) {
                    return result;
                  }
                  unsigned __int8 v19 = 2;
                }
                ot::SecurityPolicy::SetFlags((ot::SecurityPolicy *)v13, (char *)&__s, v19);
LABEL_101:
                __int16 v15 = *(_WORD *)(a2 + 120) | 0x400;
LABEL_102:
                *(_WORD *)(a2 + 120) = v15;
LABEL_103:
                uint64_t result = ot::Spinel::Decoder::CloseStruct((ot::Spinel::Decoder *)(a1 + 96));
                if (result) {
                  return result;
                }
                if (a1[101] == a1[102]) {
                  return 0;
                }
                continue;
              case 0x1520u:
                if (a6 && a1[101] == a1[102]) {
                  goto LABEL_103;
                }
                __s = 0;
                *(_WORD *)int v26 = 0;
                uint64_t result = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 **)&__s, (unsigned __int16 *)v26);
                if (result) {
                  return result;
                }
                unsigned __int8 v20 = v26[0];
                if (*(unsigned __int16 *)v26 > 0xFFu) {
                  return 7;
                }
                if (a3) {
                  *a3 = __s;
                }
                if (a4) {
                  *a4 = v20;
                }
                goto LABEL_103;
              case 0x1527u:
                if (a6 && a1[101] == a1[102]) {
                  goto LABEL_103;
                }
                __s = 0;
                uint64_t result = ot::Spinel::Decoder::ReadItem((ot::Spinel::Decoder *)(a1 + 96), (const unsigned __int8 **)&__s, 0x10u);
                if (!a5 || result)
                {
                  if (result) {
                    return result;
                  }
                }
                else
                {
                  *a5 = __s;
                }
                goto LABEL_103;
              default:
                goto LABEL_103;
            }
        }
      }
    }
    return result;
  }
}