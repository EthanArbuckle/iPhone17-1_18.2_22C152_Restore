uint64_t ssl_double_retransmit_timeout(void *a1)
{
  unsigned int v2;

  if (*(_DWORD *)(a1[11] + 932) < *(_DWORD *)(*a1 + 20))
  {
    if (*(_DWORD *)(a1[11] + 932) != *(_DWORD *)(*a1 + 16)) {
      *(_WORD *)(a1[11] + 984) = 508;
    }
    v2 = 2 * *(_DWORD *)(a1[11] + 932);
    if (v2 < *(_DWORD *)(a1[11] + 932) || v2 > *(_DWORD *)(*a1 + 20)) {
      v2 = *(_DWORD *)(*a1 + 20);
    }
    *(_DWORD *)(a1[11] + 932) = v2;
    return 0;
  }
  else
  {
    return -1;
  }
}

uint64_t mbedtls_ssl_resend(uint64_t a1)
{
  return mbedtls_ssl_flight_transmit(a1);
}

uint64_t mbedtls_ssl_flush_output(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a1 + 352))
    {
      while (*(void *)(a1 + 352))
      {
        int v2 = (*(uint64_t (**)(void, void, void))(a1 + 24))(*(void *)(a1 + 48), *(void *)(a1 + 304) - *(void *)(a1 + 352), *(void *)(a1 + 352));
        if (v2 <= 0) {
          return v2;
        }
        if ((unint64_t)v2 > *(void *)(a1 + 352)) {
          return -27648;
        }
        *(void *)(a1 + 352) -= v2;
      }
      if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
        *(void *)(a1 + 304) = *(void *)(a1 + 288);
      }
      else {
        *(void *)(a1 + 304) = *(void *)(a1 + 288) + 8;
      }
      mbedtls_ssl_update_out_pointers(a1, *(void *)(a1 + 104));
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_update_out_pointers(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(*(void *)result + 5) == 1)
  {
    *(void *)(result + 296) = *(void *)(result + 304) + 3;
    *(void *)(result + 312) = *(void *)(result + 296) + 8;
    *(void *)(result + 320) = *(void *)(result + 312) + 2;
  }
  else
  {
    *(void *)(result + 296) = *(void *)(result + 304) - 8;
    *(void *)(result + 312) = *(void *)(result + 304) + 3;
    *(void *)(result + 320) = *(void *)(result + 304) + 5;
  }
  *(void *)(result + 328) = *(void *)(result + 320);
  if (a2)
  {
    result = ssl_transform_get_explicit_iv_len(a2);
    *(void *)(v2 + 328) += result;
  }
  return result;
}

void mbedtls_ssl_flight_free(uint64_t a1)
{
  while (a1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    mbedtls_free();
    mbedtls_free();
    a1 = v1;
  }
}

uint64_t mbedtls_ssl_flight_transmit(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 88) + 4) == 1)
  {
    while (1)
    {
      while (1)
      {
LABEL_5:
        if (!*(void *)(*(void *)(a1 + 88) + 944))
        {
          unsigned int v15 = mbedtls_ssl_flush_output(a1);
          if (v15)
          {
            return v15;
          }
          else
          {
            if (*(_DWORD *)(a1 + 8) == 16)
            {
              *(unsigned char *)(*(void *)(a1 + 88) + 4) = 3;
            }
            else
            {
              *(unsigned char *)(*(void *)(a1 + 88) + 4) = 2;
              mbedtls_ssl_set_timer(a1, *(_DWORD *)(*(void *)(a1 + 88) + 932));
            }
            return 0;
          }
        }
        uint64_t v7 = *(void *)(*(void *)(a1 + 88) + 944);
        BOOL v3 = 0;
        if (*(unsigned char *)(v7 + 16) == 22) {
          BOOL v3 = **(unsigned char **)v7 == 20;
        }
        BOOL v6 = *(unsigned char *)(a1 + 280) == 1;
        if (v3 && *(void *)(*(void *)(a1 + 88) + 952) == *(void *)v7 + 12)
        {
          unsigned int v9 = ssl_swap_epochs(a1);
          if (v9) {
            return v9;
          }
        }
        int remaining_payload_in_datagram = ssl_get_remaining_payload_in_datagram(a1);
        if (remaining_payload_in_datagram < 0) {
          return remaining_payload_in_datagram;
        }
        if (*(unsigned char *)(v7 + 16) == 20) {
          break;
        }
        uint64_t v5 = *(void *)(v7 + 8) - 12;
        uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 952) - (*(void *)v7 + 12);
        if ((unint64_t)remaining_payload_in_datagram >= 0xC
          && (remaining_payload_in_datagram != 12 || *(void *)(v7 + 8) == 12))
        {
          if (v5 - v4 <= (unint64_t)(remaining_payload_in_datagram - 12)) {
            uint64_t v2 = v5 - v4;
          }
          else {
            uint64_t v2 = remaining_payload_in_datagram - 12;
          }
          __memcpy_chk();
          *(unsigned char *)(*(void *)(a1 + 328) + 6) = BYTE2(v4);
          *(unsigned char *)(*(void *)(a1 + 328) + 7) = BYTE1(v4);
          *(unsigned char *)(*(void *)(a1 + 328) + 8) = v4;
          *(unsigned char *)(*(void *)(a1 + 328) + 9) = BYTE2(v2);
          *(unsigned char *)(*(void *)(a1 + 328) + 10) = BYTE1(v2);
          *(unsigned char *)(*(void *)(a1 + 328) + 11) = v2;
          __memcpy_chk();
          *(void *)(a1 + 344) = v2 + 12;
          *(_DWORD *)(a1 + 336) = *(unsigned __int8 *)(v7 + 16);
          *(void *)(*(void *)(a1 + 88) + 952) += v2;
LABEL_33:
          if (*(void *)(*(void *)(a1 + 88) + 952) >= *(void *)v7 + *(void *)(v7 + 8))
          {
            if (*(void *)(v7 + 24))
            {
              *(void *)(*(void *)(a1 + 88) + 944) = *(void *)(v7 + 24);
              *(void *)(*(void *)(a1 + 88) + 952) = **(void **)(v7 + 24) + 12;
            }
            else
            {
              *(void *)(*(void *)(a1 + 88) + 944) = 0;
              *(void *)(*(void *)(a1 + 88) + 952) = 0;
            }
          }
          unsigned int v14 = mbedtls_ssl_write_record(a1, v6);
          if (v14) {
            return v14;
          }
        }
        else
        {
          if (v3)
          {
            unsigned int v12 = ssl_swap_epochs(a1);
            if (v12) {
              return v12;
            }
          }
          unsigned int v13 = mbedtls_ssl_flush_output(a1);
          if (v13) {
            return v13;
          }
        }
      }
      if (remaining_payload_in_datagram)
      {
        __memcpy_chk();
        *(void *)(a1 + 344) = *(void *)(v7 + 8);
        *(_DWORD *)(a1 + 336) = *(unsigned __int8 *)(v7 + 16);
        *(void *)(*(void *)(a1 + 88) + 952) += *(void *)(v7 + 8);
        goto LABEL_33;
      }
      unsigned int v11 = mbedtls_ssl_flush_output(a1);
      if (v11) {
        return v11;
      }
    }
  }
  *(void *)(*(void *)(a1 + 88) + 944) = *(void *)(*(void *)(a1 + 88) + 936);
  *(void *)(*(void *)(a1 + 88) + 952) = **(void **)(*(void *)(a1 + 88) + 936) + 12;
  unsigned int v8 = ssl_swap_epochs(a1);
  if (!v8)
  {
    *(unsigned char *)(*(void *)(a1 + 88) + 4) = 1;
    goto LABEL_5;
  }
  return v8;
}

uint64_t ssl_swap_epochs(uint64_t a1)
{
  if (*(void *)(a1 + 104) != *(void *)(*(void *)(a1 + 88) + 968))
  {
    uint64_t v2 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = *(void *)(*(void *)(a1 + 88) + 968);
    *(void *)(*(void *)(a1 + 88) + 968) = v2;
    __memcpy_chk();
    __memcpy_chk();
    mbedtls_ssl_update_out_pointers(a1, *(void *)(a1 + 104));
  }
  return 0;
}

uint64_t ssl_get_remaining_payload_in_datagram(uint64_t a1)
{
  unint64_t v3 = 768;
  unint64_t output_max_frag_len = mbedtls_ssl_get_output_max_frag_len((unsigned __int8 **)a1);
  if (output_max_frag_len < 0x300) {
    unint64_t v3 = output_max_frag_len;
  }
  if (v3 > *(void *)(a1 + 352))
  {
    unint64_t v4 = v3 - *(void *)(a1 + 352);
    int remaining_space_in_datagram = ssl_get_remaining_space_in_datagram(a1);
    if (remaining_space_in_datagram >= 0)
    {
      unint64_t v5 = remaining_space_in_datagram;
      int record_expansion = mbedtls_ssl_get_record_expansion(a1);
      if (record_expansion >= 0)
      {
        if (v5 > record_expansion)
        {
          unint64_t v6 = v5 - record_expansion;
          if (v6 >= v4) {
            LODWORD(v6) = v4;
          }
          return v6;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return record_expansion;
      }
    }
    else
    {
      return remaining_space_in_datagram;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_write_record(uint64_t a1, BOOL a2)
{
  uint64_t v8 = *(void *)(a1 + 344);
  mbedtls_ssl_write_version(*(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(*(void *)a1 + 5), (unsigned char *)(*(void *)(a1 + 304) + 1));
  __memcpy_chk();
  **(unsigned char **)(a1 + 312) = BYTE1(v8);
  *(unsigned char *)(*(void *)(a1 + 312) + 1) = v8;
  if (*(void *)(a1 + 104))
  {
    memset(__b, 0, sizeof(__b));
    __b[2] = *(void *)(a1 + 320);
    __b[3] = 813 - (*(void *)(a1 + 320) - *(void *)(a1 + 288));
    __b[5] = *(void *)(a1 + 344);
    __b[4] = *(void *)(a1 + 328) - __b[2];
    __b[0] = **(void **)(a1 + 296);
    mbedtls_ssl_write_version(*(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(*(void *)a1 + 5), (unsigned char *)&__b[1] + 1);
    LOBYTE(__b[1]) = *(_DWORD *)(a1 + 336);
    unsigned int v9 = mbedtls_ssl_encrypt_buf(a1, *(void *)(a1 + 104), __b, *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));
    if (v9) {
      return v9;
    }
    if (__b[4]) {
      return -27648;
    }
    *(_DWORD *)(a1 + 336) = LOBYTE(__b[1]);
    uint64_t v8 = __b[5];
    *(void *)(a1 + 344) = __b[5];
    **(unsigned char **)(a1 + 312) = BYTE1(__b[5]);
    *(unsigned char *)(*(void *)(a1 + 312) + 1) = __b[5];
  }
  unint64_t v5 = v8 + mbedtls_ssl_out_hdr_len(a1);
  if (*(unsigned char *)(*(void *)a1 + 5) == 1)
  {
    int remaining_space_in_datagram = ssl_get_remaining_space_in_datagram(a1);
    if (remaining_space_in_datagram < 0) {
      return remaining_space_in_datagram;
    }
    if (v5 > remaining_space_in_datagram) {
      return -27648;
    }
  }
  **(unsigned char **)(a1 + 304) = *(_DWORD *)(a1 + 336);
  *(void *)(a1 + 352) += v5;
  *(void *)(a1 + 304) += v5;
  mbedtls_ssl_update_out_pointers(a1, *(void *)(a1 + 104));
  for (unsigned int i = 8; i > (unint64_t)mbedtls_ssl_ep_len(a1); --i)
  {
    uint64_t v2 = (unsigned char *)(a1 + 360 + i - 1);
    char v3 = *v2 + 1;
    *uint64_t v2 = v3;
    if (v3) {
      break;
    }
  }
  if (i == mbedtls_ssl_ep_len(a1))
  {
    return -27520;
  }
  else
  {
    if (*(unsigned char *)(*(void *)a1 + 5) == 1 && !a2)
    {
      int remaining_payload_in_datagram = ssl_get_remaining_payload_in_datagram(a1);
      if (remaining_payload_in_datagram < 0) {
        return remaining_payload_in_datagram;
      }
      a2 = remaining_payload_in_datagram == 0;
    }
    if (a2 && (unsigned int v12 = mbedtls_ssl_flush_output(a1)) != 0) {
      return v12;
    }
    else {
      return 0;
    }
  }
}

uint64_t mbedtls_ssl_recv_flight_completed(uint64_t a1)
{
  mbedtls_ssl_flight_free(*(void *)(*(void *)(a1 + 88) + 936));
  *(void *)(*(void *)(a1 + 88) + 936) = 0;
  *(void *)(*(void *)(a1 + 88) + 944) = 0;
  *(_DWORD *)(*(void *)(a1 + 88) + 960) = *(_DWORD *)(*(void *)(a1 + 88) + 916);
  *(unsigned char *)(*(void *)(a1 + 88) + 784) = 0;
  mbedtls_ssl_buffering_free(a1);
  uint64_t result = mbedtls_ssl_set_timer(a1, 0);
  if (*(_DWORD *)(a1 + 208) == 22 && **(unsigned char **)(a1 + 192) == 20) {
    *(unsigned char *)(*(void *)(a1 + 88) + 4) = 3;
  }
  else {
    *(unsigned char *)(*(void *)(a1 + 88) + 4) = 0;
  }
  return result;
}

void mbedtls_ssl_buffering_free(uint64_t a1)
{
  if (*(void *)(a1 + 88))
  {
    ssl_free_buffered_record(a1);
    for (unsigned int i = 0; i < 4; ++i)
      ssl_buffering_free_slot(a1, i);
  }
}

uint64_t mbedtls_ssl_send_flight_completed(uint64_t a1)
{
  ssl_reset_retransmit_timeout((void *)a1);
  uint64_t result = mbedtls_ssl_set_timer(a1, *(_DWORD *)(*(void *)(a1 + 88) + 932));
  if (*(_DWORD *)(a1 + 208) == 22 && **(unsigned char **)(a1 + 192) == 20) {
    *(unsigned char *)(*(void *)(a1 + 88) + 4) = 3;
  }
  else {
    *(unsigned char *)(*(void *)(a1 + 88) + 4) = 2;
  }
  return result;
}

void *ssl_reset_retransmit_timeout(void *result)
{
  *(_DWORD *)(result[11] + 932) = *(_DWORD *)(*result + 16);
  return result;
}

uint64_t mbedtls_ssl_write_handshake_msg(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 344) - 4;
  char v2 = **(unsigned char **)(a1 + 328);
  if (*(_DWORD *)(a1 + 336) == 22 || *(_DWORD *)(a1 + 336) == 20)
  {
    if (*(_DWORD *)(a1 + 336) == 22 && !v2 || *(void *)(a1 + 88))
    {
      if (*(unsigned char *)(*(void *)a1 + 5) == 1 && *(void *)(a1 + 88) && *(unsigned char *)(*(void *)(a1 + 88) + 4) == 1)
      {
        return -27648;
      }
      else
      {
        if (*(void *)(a1 + 344) <= 0x300uLL)
        {
          if (*(_DWORD *)(a1 + 336) == 22)
          {
            *(unsigned char *)(*(void *)(a1 + 328) + 1) = BYTE2(v3);
            *(unsigned char *)(*(void *)(a1 + 328) + 2) = BYTE1(v3);
            *(unsigned char *)(*(void *)(a1 + 328) + 3) = v3;
            if (*(unsigned char *)(*(void *)a1 + 5) == 1)
            {
              if ((unint64_t)(768 - *(void *)(a1 + 344)) < 8) {
                return -28928;
              }
              __memmove_chk();
              *(void *)(a1 + 344) += 8;
              if (v2)
              {
                *(unsigned char *)(*(void *)(a1 + 328) + 4) = BYTE1(*(_DWORD *)(*(void *)(a1 + 88) + 912));
                *(unsigned char *)(*(void *)(a1 + 328) + 5) = *(unsigned char *)(*(void *)(a1 + 88) + 912);
                ++*(_DWORD *)(*(void *)(a1 + 88) + 912);
              }
              else
              {
                *(unsigned char *)(*(void *)(a1 + 328) + 4) = 0;
                *(unsigned char *)(*(void *)(a1 + 328) + 5) = 0;
              }
              __memset_chk();
              __memcpy_chk();
            }
            if (v2) {
              (*(void (**)(uint64_t, void, void))(*(void *)(a1 + 88) + 24))(a1, *(void *)(a1 + 328), *(void *)(a1 + 344));
            }
          }
          if (*(unsigned char *)(*(void *)a1 + 5) == 1 && (*(_DWORD *)(a1 + 336) != 22 || v2))
          {
            unsigned int v4 = ssl_flight_append(a1);
            if (v4) {
              return v4;
            }
          }
          else
          {
            unsigned int v5 = mbedtls_ssl_write_record(a1, 1);
            if (v5) {
              return v5;
            }
          }
          return 0;
        }
        return -27648;
      }
    }
    else
    {
      return -27648;
    }
  }
  else
  {
    return -27648;
  }
}

uint64_t ssl_flight_append(uint64_t a1)
{
  uint64_t v4 = mbedtls_calloc();
  if (v4)
  {
    uint64_t v1 = mbedtls_calloc();
    *(void *)uint64_t v4 = v1;
    if (v1)
    {
      __memcpy_chk();
      *(void *)(v4 + 8) = *(void *)(a1 + 344);
      *(unsigned char *)(v4 + 16) = *(_DWORD *)(a1 + 336);
      *(void *)(v4 + 24) = 0;
      if (*(void *)(*(void *)(a1 + 88) + 936))
      {
        for (uint64_t i = *(void *)(*(void *)(a1 + 88) + 936); *(void *)(i + 24); uint64_t i = *(void *)(i + 24))
          ;
        *(void *)(i + 24) = v4;
      }
      else
      {
        *(void *)(*(void *)(a1 + 88) + 936) = v4;
      }
      return 0;
    }
    else
    {
      mbedtls_free();
      return -32512;
    }
  }
  else
  {
    return -32512;
  }
}

uint64_t mbedtls_ssl_write_version(uint64_t result, int a2, int a3, unsigned char *a4)
{
  char v4 = a2;
  if (a3 == 1)
  {
    if (a2 == 2) {
      char v4 = 1;
    }
    *a4 = 1 - result;
    a4[1] = -v4;
  }
  else
  {
    *a4 = result;
    a4[1] = a2;
  }
  return result;
}

uint64_t mbedtls_ssl_out_hdr_len(uint64_t a1)
{
  return *(void *)(a1 + 320) - *(void *)(a1 + 304);
}

uint64_t ssl_get_remaining_space_in_datagram(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 352);
  unint64_t maximum_datagram_size = ssl_get_maximum_datagram_size(a1);
  if (v3 <= maximum_datagram_size) {
    return (maximum_datagram_size - v3);
  }
  else {
    return -27648;
  }
}

uint64_t mbedtls_ssl_ep_len(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ssl_prepare_handshake_record(void *a1)
{
  unint64_t v3 = a1[27];
  if (v3 < mbedtls_ssl_hs_hdr_len((uint64_t)a1)) {
    return -29184;
  }
  uint64_t v2 = mbedtls_ssl_hs_hdr_len((uint64_t)a1);
  a1[33] = v2 + ssl_get_hs_total_len((uint64_t)a1);
  if (*(unsigned char *)(*a1 + 5) != 1)
  {
    if (a1[27] < a1[33]) {
      return -28800;
    }
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1[24] + 5) | (*(unsigned __int8 *)(a1[24] + 4) << 8);
  if (ssl_check_hs_header((uint64_t)a1)) {
    return -29184;
  }
  if (!a1[11]
    || (*((_DWORD *)a1 + 2) == 16 || v4 == *(_DWORD *)(a1[11] + 916))
    && (*((_DWORD *)a1 + 2) != 16 || *(unsigned char *)a1[24] == 1))
  {
    if (ssl_hs_is_proper_fragment(a1)) {
      return -25728;
    }
    return 0;
  }
  if (v4 <= *(_DWORD *)(a1[11] + 916))
  {
    if (v4 == *(_DWORD *)(a1[11] + 960) - 1 && *(unsigned char *)a1[24] != 3 && (unsigned int v5 = mbedtls_ssl_resend((uint64_t)a1)) != 0) {
      return v5;
    }
    else {
      return -25984;
    }
  }
  else
  {
    return -25728;
  }
}

uint64_t ssl_get_hs_total_len(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 192) + 2) << 8) | (*(unsigned __int8 *)(*(void *)(a1 + 192) + 1) << 16) | *(unsigned __int8 *)(*(void *)(a1 + 192) + 3);
}

uint64_t ssl_check_hs_header(uint64_t a1)
{
  unsigned int hs_total_len = ssl_get_hs_total_len(a1);
  unsigned int hs_frag_off = ssl_get_hs_frag_off(a1);
  unsigned int hs_frag_len = ssl_get_hs_frag_len(a1);
  if (hs_frag_off <= hs_total_len)
  {
    if (hs_frag_len <= hs_total_len - hs_frag_off)
    {
      if ((unint64_t)(hs_frag_len + 12) <= *(void *)(a1 + 216)) {
        return 0;
      }
      else {
        return -1;
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    return -1;
  }
}

BOOL ssl_hs_is_proper_fragment(void *a1)
{
  return a1[27] < a1[33]
      || memcmp((const void *)(a1[24] + 6), &unk_1003F9374, 3uLL)
      || memcmp((const void *)(a1[24] + 9), (const void *)(a1[24] + 1), 3uLL);
}

uint64_t mbedtls_ssl_update_handshake_status(uint64_t result)
{
  unsigned int v4 = (void *)result;
  uint64_t v3 = *(void *)(result + 88);
  if (*(_DWORD *)(result + 8) != 16 && v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)(result + 88) + 24))(result, *(void *)(result + 192), *(void *)(result + 264));
  }
  if (*(unsigned char *)(*v4 + 5) == 1 && v4[11])
  {
    ++*(_DWORD *)(v3 + 916);
    ssl_buffering_free_slot((uint64_t)v4, 0);
    int v2 = 0;
    uint64_t v1 = v3 + 792;
    while ((v2 + 1) < 4)
    {
      *(_OWORD *)uint64_t v1 = *(_OWORD *)(v1 + 24);
      *(void *)(v1 + 16) = *(void *)(v1 + 40);
      ++v2;
      v1 += 24;
    }
    return __memset_chk();
  }
  return result;
}

uint64_t ssl_buffering_free_slot(uint64_t result, unsigned __int8 a2)
{
  uint64_t v3 = *(void *)(result + 88);
  uint64_t v2 = v3 + 792 + 24 * a2;
  if (a2 < 4u && (*(unsigned char *)v2 & 1) == 1)
  {
    *(void *)(v3 + 776) -= *(void *)(v2 + 16);
    mbedtls_platform_zeroize(*(void **)(v2 + 8), *(void *)(v2 + 16));
    mbedtls_free();
    return __memset_chk();
  }
  return result;
}

uint64_t mbedtls_ssl_dtls_replay_reset(uint64_t result)
{
  *(void *)(result + 248) = 0;
  *(void *)(result + 256) = 0;
  return result;
}

uint64_t mbedtls_ssl_dtls_replay_check(void *a1)
{
  unint64_t six_bytes = ssl_load_six_bytes((unsigned __int8 *)(a1[20] + 2));
  if (*(unsigned char *)(*a1 + 9))
  {
    if (six_bytes <= a1[31])
    {
      unint64_t v2 = a1[31] - six_bytes;
      if (v2 < 0x40)
      {
        if ((a1[32] & (1 << v2)) != 0) {
          return -1;
        }
        else {
          return 0;
        }
      }
      else
      {
        return -1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

unint64_t ssl_load_six_bytes(unsigned __int8 *a1)
{
  return ((unint64_t)a1[1] << 32) | ((unint64_t)*a1 << 40) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
}

unint64_t mbedtls_ssl_dtls_replay_update(void *a1)
{
  unint64_t result = ssl_load_six_bytes((unsigned __int8 *)(a1[20] + 2));
  if (*(unsigned char *)(*a1 + 9))
  {
    if (result <= a1[31])
    {
      unint64_t v2 = a1[31] - result;
      if (v2 < 0x40) {
        a1[32] |= 1 << v2;
      }
    }
    else
    {
      unint64_t v3 = result - a1[31];
      if (v3 < 0x40)
      {
        a1[32] <<= v3;
        a1[32] |= 1uLL;
      }
      else
      {
        a1[32] = 1;
      }
      a1[31] = result;
    }
  }
  return result;
}

uint64_t mbedtls_ssl_read_record(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 276))
  {
    *(_DWORD *)(a1 + 276) = 0;
    return 0;
  }
  do
  {
    unsigned int v5 = ssl_consume_current_message((void *)a1);
    if (v5) {
      return v5;
    }
    if (!ssl_record_is_in_progress(a1))
    {
      BOOL v4 = 0;
      if (*(unsigned char *)(*(void *)a1 + 5) == 1 && !ssl_next_record_is_in_datagram(a1)) {
        BOOL v4 = ssl_load_buffered_message(a1) == 0;
      }
      if (!v4)
      {
        unsigned int next_record = ssl_get_next_record(a1);
        if (next_record == -25984) {
          goto LABEL_16;
        }
        if (next_record) {
          return next_record;
        }
      }
    }
    unsigned int next_record = mbedtls_ssl_handle_message_type((void *)a1);
    if (next_record == -25728)
    {
      unsigned int v7 = ssl_buffer_message(a1);
      if (v7) {
        return v7;
      }
      unsigned int next_record = -25984;
    }
LABEL_16:
    BOOL v3 = 1;
    if (next_record != -26240) {
      BOOL v3 = next_record == -25984;
    }
  }
  while (v3);
  if (!next_record)
  {
    if (*(_DWORD *)(a1 + 208) == 22 && a2 == 1) {
      mbedtls_ssl_update_handshake_status(a1);
    }
    return 0;
  }
  return next_record;
}

uint64_t ssl_consume_current_message(void *a1)
{
  if (!a1[33])
  {
    if (a1[25]) {
      return 0;
    }
    a1[27] = 0;
    return 0;
  }
  if (!a1[25])
  {
    if (a1[33] >= a1[27])
    {
      a1[27] = 0;
    }
    else
    {
      a1[27] -= a1[33];
      __memmove_chk();
    }
    a1[33] = 0;
    return 0;
  }
  return -27648;
}

BOOL ssl_record_is_in_progress(uint64_t a1)
{
  return *(void *)(a1 + 216) != 0;
}

BOOL ssl_next_record_is_in_datagram(uint64_t a1)
{
  return *(void *)(a1 + 224) > *(void *)(a1 + 240);
}

uint64_t ssl_load_buffered_message(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 88);
  unsigned int v3 = 0;
  if (v4)
  {
    if (*(_DWORD *)(a1 + 8) == 10 || *(_DWORD *)(a1 + 8) == 12)
    {
      if (*(unsigned char *)(v4 + 784))
      {
        *(_DWORD *)(a1 + 208) = 20;
        *(void *)(a1 + 216) = 1;
        **(unsigned char **)(a1 + 192) = 1;
        *(void *)(a1 + 224) = 0;
        *(void *)(a1 + 240) = 0;
        *(unsigned char *)(v4 + 784) = 0;
      }
      else
      {
        return -1;
      }
    }
    else if ((*(unsigned char *)(v4 + 792) & 1) == 1 && (*(unsigned char *)(v4 + 792) & 4) != 0)
    {
      uint64_t v2 = (*(unsigned __int8 *)(*(void *)(v4 + 800) + 2) << 8) | (*(unsigned __int8 *)(*(void *)(v4 + 800) + 1) << 16) | *(unsigned __int8 *)(*(void *)(v4 + 800) + 3);
      if ((unint64_t)(v2 + 12) > 0x300) {
        return -27648;
      }
      *(_DWORD *)(a1 + 208) = 22;
      *(void *)(a1 + 264) = v2 + 12;
      *(void *)(a1 + 216) = v2 + 12;
      __memcpy_chk();
      return 0;
    }
    else
    {
      return -1;
    }
    return v3;
  }
  return -1;
}

uint64_t ssl_get_next_record(uint64_t a1)
{
  memset(__b, 0, sizeof(__b));
  unsigned int buffered_record = ssl_load_buffered_record(a1);
  if (buffered_record)
  {
    return buffered_record;
  }
  else
  {
    unint64_t v1 = mbedtls_ssl_in_hdr_len(a1);
    unsigned int input = mbedtls_ssl_fetch_input((void *)a1, v1);
    if (input)
    {
      return input;
    }
    else
    {
      unsigned int v5 = ssl_parse_record_header((void *)a1, *(unsigned __int8 **)(a1 + 168), *(void *)(a1 + 224), (unsigned __int8 *)__b);
      if (v5)
      {
        if (*(unsigned char *)(*(void *)a1 + 5) != 1) {
          return v5;
        }
        if (v5 == -25728)
        {
          unsigned int v6 = ssl_buffer_future_record(a1, (uint64_t)__b);
          if (v6) {
            return v6;
          }
          unsigned int v5 = -26368;
        }
        if (v5 == -26368)
        {
          *(void *)(a1 + 240) = __b[3];
        }
        else
        {
          *(void *)(a1 + 240) = 0;
          *(void *)(a1 + 224) = 0;
        }
        return -25984;
      }
      else
      {
        if (*(unsigned char *)(*(void *)a1 + 5) == 1)
        {
          *(void *)(a1 + 240) = __b[3];
        }
        else
        {
          unsigned int v7 = mbedtls_ssl_fetch_input((void *)a1, __b[3]);
          if (v7) {
            return v7;
          }
          *(void *)(a1 + 224) = 0;
        }
        unsigned int v8 = ssl_prepare_record_content((void *)a1, (uint64_t)__b);
        if (v8)
        {
          if (*(unsigned char *)(*(void *)a1 + 5) == 1)
          {
            if (v8 == -29056)
            {
              if (*(_DWORD *)(a1 + 8) == 11 || *(_DWORD *)(a1 + 8) == 13)
              {
                return -29056;
              }
              else
              {
                *(void *)(a1 + 240) = 0;
                *(void *)(a1 + 224) = 0;
                return -25984;
              }
            }
            else
            {
              return v8;
            }
          }
          else
          {
            return v8;
          }
        }
        else
        {
          mbedtls_ssl_update_in_pointers((void *)a1);
          *(void *)(a1 + 184) = *(void *)(a1 + 176) + 2;
          *(_DWORD *)(a1 + 208) = LOBYTE(__b[1]);
          **(unsigned char **)(a1 + 168) = __b[1];
          *(void *)(a1 + 192) = __b[2] + __b[4];
          *(void *)(a1 + 216) = __b[5];
          **(unsigned char **)(a1 + 176) = BYTE1(__b[5]);
          *(unsigned char *)(*(void *)(a1 + 176) + 1) = __b[5];
          return 0;
        }
      }
    }
  }
}

uint64_t mbedtls_ssl_handle_message_type(void *a1)
{
  if (*((_DWORD *)a1 + 52) == 22 && (unsigned int v2 = mbedtls_ssl_prepare_handshake_record(a1)) != 0)
  {
    return v2;
  }
  else
  {
    if (*((_DWORD *)a1 + 52) != 20) {
      goto LABEL_15;
    }
    if (a1[27] != 1) {
      return -29184;
    }
    if (*(unsigned char *)a1[24] != 1) {
      return -29184;
    }
    if (*(unsigned char *)(*a1 + 5) != 1 || *((_DWORD *)a1 + 2) == 10 || *((_DWORD *)a1 + 2) == 12)
    {
LABEL_15:
      if (*((_DWORD *)a1 + 52) != 21)
      {
        if (*(unsigned char *)(*a1 + 5) == 1)
        {
          if (*((_DWORD *)a1 + 52) == 23 && *((_DWORD *)a1 + 2) != 16) {
            return -26240;
          }
          if (a1[11] && *((_DWORD *)a1 + 2) == 16) {
            mbedtls_ssl_handshake_wrapup_free_hs_transform((uint64_t)a1);
          }
        }
        return 0;
      }
      if (a1[27] == 2)
      {
        if (*(unsigned char *)a1[24] == 2)
        {
          return -30592;
        }
        else if (*(unsigned char *)a1[24] != 1 || *(unsigned char *)(a1[24] + 1))
        {
          if (*(unsigned char *)a1[24] == 1 && *(unsigned char *)(a1[24] + 1) == 100) {
            return 0;
          }
          else {
            return -26240;
          }
        }
        else
        {
          return -30848;
        }
      }
      else
      {
        return -29184;
      }
    }
    else if (a1[11])
    {
      return -25728;
    }
    else
    {
      return -26368;
    }
  }
}

uint64_t ssl_buffer_message(uint64_t a1)
{
  unsigned int v12 = 0;
  uint64_t v11 = *(void *)(a1 + 88);
  if (v11)
  {
    int v2 = *(_DWORD *)(a1 + 208);
    if (v2 == 20)
    {
      *(unsigned char *)(v11 + 784) = 1;
    }
    else if (v2 == 22)
    {
      unsigned int v9 = *(unsigned __int8 *)(*(void *)(a1 + 192) + 5) | (*(unsigned __int8 *)(*(void *)(a1 + 192) + 4) << 8);
      unint64_t v7 = *(void *)(a1 + 264) - 12;
      if (v9 < *(_DWORD *)(*(void *)(a1 + 88) + 916)) {
        return -27648;
      }
      unsigned int v10 = v9 - *(_DWORD *)(*(void *)(a1 + 88) + 916);
      if (v10 < 4)
      {
        unsigned int v8 = (unsigned __int8 *)(v11 + 792 + 24 * v10);
        if (*v8)
        {
          if (memcmp(*((const void **)v8 + 1), *(const void **)(a1 + 192), 4uLL)) {
            return v12;
          }
          goto LABEL_22;
        }
        *unsigned int v8 = *v8 & 0xFD | (2 * ssl_hs_is_proper_fragment((void *)a1));
        if (v7 + 12 <= 0x300)
        {
          if (*(void *)(v11 + 776) > 0x8000uLL) {
            return -27648;
          }
          unint64_t reassembly_buffer_size = ssl_get_reassembly_buffer_size(v7, (*v8 >> 1) & 1);
          if (reassembly_buffer_size <= 0x8000 - *(void *)(v11 + 776))
          {
LABEL_18:
            *((void *)v8 + 1) = mbedtls_calloc();
            if (!*((void *)v8 + 1)) {
              return -32512;
            }
            *((void *)v8 + 2) = reassembly_buffer_size;
            __memcpy_chk();
            __memset_chk();
            __memcpy_chk();
            *unsigned int v8 = *v8 & 0xFE | 1;
            *(void *)(v11 + 776) += reassembly_buffer_size;
LABEL_22:
            if ((*v8 & 4) == 0)
            {
              uint64_t v3 = *((void *)v8 + 1) + 12;
              unint64_t hs_frag_off = ssl_get_hs_frag_off(a1);
              unint64_t hs_frag_len = ssl_get_hs_frag_len(a1);
              __memcpy_chk();
              if ((*v8 & 2) != 0)
              {
                ssl_bitmask_set(v3 + v7, hs_frag_off, hs_frag_len);
                *unsigned int v8 = *v8 & 0xFB | (4 * (ssl_bitmask_check(v3 + v7, v7) == 0));
              }
              else
              {
                *unsigned int v8 = *v8 & 0xFB | 4;
              }
            }
            return v12;
          }
          if (!v10)
          {
            if (ssl_buffer_make_space(a1, reassembly_buffer_size)) {
              return -27136;
            }
            goto LABEL_18;
          }
        }
      }
    }
    return v12;
  }
  return 0;
}

uint64_t mbedtls_ssl_send_fatal_handshake_failure(uint64_t a1)
{
  return mbedtls_ssl_send_alert_message(a1, 2, 40);
}

uint64_t mbedtls_ssl_send_alert_message(uint64_t a1, char a2, char a3)
{
  if (a1 && *(void *)a1)
  {
    *(_DWORD *)(a1 + 336) = 21;
    *(void *)(a1 + 344) = 2;
    **(unsigned char **)(a1 + 328) = a2;
    *(unsigned char *)(*(void *)(a1 + 328) + 1) = a3;
    unsigned int v4 = mbedtls_ssl_write_record(a1, 1);
    if (v4) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_write_change_cipher_spec(uint64_t a1)
{
  *(_DWORD *)(a1 + 336) = 20;
  *(void *)(a1 + 344) = 1;
  **(unsigned char **)(a1 + 328) = 1;
  ++*(_DWORD *)(a1 + 8);
  unsigned int v2 = mbedtls_ssl_write_handshake_msg(a1);
  if (v2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ssl_parse_change_cipher_spec(uint64_t a1)
{
  unsigned int record = mbedtls_ssl_read_record(a1, 1);
  if (record)
  {
    return record;
  }
  else
  {
    if (*(_DWORD *)(a1 + 208) == 20)
    {
      *(void *)(a1 + 96) = *(void *)(a1 + 120);
      *(void *)(a1 + 56) = *(void *)(a1 + 80);
      if (*(unsigned char *)(*(void *)a1 + 5) == 1)
      {
        mbedtls_ssl_dtls_replay_reset(a1);
        __int16 v1 = *(_WORD *)(a1 + 232) + 1;
        *(_WORD *)(a1 + 232) = v1;
        if (!v1) {
          return -27520;
        }
      }
      else
      {
        __memset_chk();
      }
      mbedtls_ssl_update_in_pointers((void *)a1);
      ++*(_DWORD *)(a1 + 8);
      return 0;
    }
    mbedtls_ssl_send_alert_message(a1, 2, 10);
    return -30464;
  }
}

void *mbedtls_ssl_update_in_pointers(void *result)
{
  if (*(unsigned char *)(*result + 5) == 1)
  {
    result[20] = result[21] + 3;
    result[22] = result[20] + 8;
    result[23] = result[22] + 2;
  }
  else
  {
    result[20] = result[21] - 8;
    result[22] = result[21] + 3;
    result[23] = result[21] + 5;
  }
  result[24] = result[23];
  return result;
}

uint64_t ssl_transform_get_explicit_iv_len(uint64_t a1)
{
  if (*(int *)(a1 + 232) >= 2) {
    return *(void *)(a1 + 8) - *(void *)(a1 + 16);
  }
  else {
    return 0;
  }
}

void *mbedtls_ssl_reset_in_out_pointers(void *a1)
{
  if (*(unsigned char *)(*a1 + 5) == 1)
  {
    a1[38] = a1[36];
    a1[21] = a1[19];
  }
  else
  {
    a1[38] = a1[36] + 8;
    a1[21] = a1[19] + 8;
  }
  mbedtls_ssl_update_out_pointers((uint64_t)a1, 0);
  return mbedtls_ssl_update_in_pointers(a1);
}

uint64_t mbedtls_ssl_get_bytes_avail(uint64_t a1)
{
  if (*(void *)(a1 + 200)) {
    return *(void *)(a1 + 216);
  }
  else {
    return 0;
  }
}

BOOL mbedtls_ssl_check_pending(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 276) == 1)
  {
    return 1;
  }
  else if (*(unsigned char *)(*(void *)a1 + 5) == 1 && *(void *)(a1 + 224) > *(void *)(a1 + 240))
  {
    return 1;
  }
  else
  {
    return *(void *)(a1 + 264) && *(void *)(a1 + 264) < *(void *)(a1 + 216) || *(void *)(a1 + 200) != 0;
  }
}

uint64_t mbedtls_ssl_get_record_expansion(uint64_t a1)
{
  unsigned int v5 = *(uint64_t **)(a1 + 104);
  unsigned int v3 = mbedtls_ssl_out_hdr_len(a1);
  if (v5)
  {
    int cipher_mode = mbedtls_cipher_get_cipher_mode((uint64_t)(v5 + 9));
    if (cipher_mode == 2)
    {
      unsigned int block_size = mbedtls_cipher_get_block_size((uint64_t)(v5 + 9));
      uint64_t v6 = v5[3] + block_size;
      if (*(int *)(a1 + 16) >= 2) {
        LODWORD(v6) = v6 + block_size;
      }
    }
    else
    {
      if ((cipher_mode - 6) > 2 && cipher_mode != 10) {
        return -27648;
      }
      uint64_t v6 = *v5;
    }
    return (v3 + v6);
  }
  return v3;
}

uint64_t mbedtls_ssl_read(uint64_t a1, uint64_t a2, size_t a3)
{
  if (a1 && *(void *)a1)
  {
    if (*(unsigned char *)(*(void *)a1 + 5) == 1)
    {
      unsigned int v6 = mbedtls_ssl_flush_output(a1);
      if (v6) {
        return v6;
      }
      if (*(void *)(a1 + 88))
      {
        if (*(unsigned char *)(*(void *)(a1 + 88) + 4) == 1)
        {
          unsigned int v7 = mbedtls_ssl_flight_transmit(a1);
          if (v7) {
            return v7;
          }
        }
      }
    }
    if (*(_DWORD *)(a1 + 8) == 16 || (unsigned int v8 = mbedtls_ssl_handshake(a1), v8 == -27392) || !v8)
    {
      while (!*(void *)(a1 + 200))
      {
        if (*(void *)(a1 + 144) && (*(unsigned int (**)(void))(a1 + 144))(*(void *)(a1 + 128)) == -1) {
          mbedtls_ssl_set_timer(a1, *(_DWORD *)(*(void *)a1 + 12));
        }
        unsigned int record = mbedtls_ssl_read_record(a1, 1);
        if (record)
        {
          if (record == -29312) {
            return 0;
          }
          else {
            return record;
          }
        }
        if (!*(void *)(a1 + 216) && *(_DWORD *)(a1 + 208) == 23)
        {
          unsigned int v10 = mbedtls_ssl_read_record(a1, 1);
          if (v10)
          {
            if (v10 == -29312) {
              return 0;
            }
            else {
              return v10;
            }
          }
        }
        switch(*(_DWORD *)(a1 + 208))
        {
          case 0x16:
            if (*(unsigned char *)(*(void *)a1 + 4)
              || !**(unsigned char **)(a1 + 192) && (uint64_t v5 = *(void *)(a1 + 264), v5 == mbedtls_ssl_hs_hdr_len(a1)))
            {
              if (*(unsigned char *)(*(void *)a1 + 4) != 1 || **(unsigned char **)(a1 + 192) == 1)
              {
                if (*(int *)(a1 + 16) < 1) {
                  return -27648;
                }
                unsigned int v11 = mbedtls_ssl_send_alert_message(a1, 1, 100);
                if (v11) {
                  return v11;
                }
              }
              else if (*(unsigned char *)(*(void *)a1 + 5) != 1)
              {
                return -30464;
              }
            }
            else if (*(unsigned char *)(*(void *)a1 + 5) != 1)
            {
              return -30464;
            }
            break;
          case 0x15:
            return -26880;
          case 0x17:
            *(void *)(a1 + 200) = *(void *)(a1 + 192);
            if (*(_DWORD *)(a1 + 8) == 16) {
              mbedtls_ssl_set_timer(a1, 0);
            }
            break;
          default:
            return -30464;
        }
      }
      if (a3 >= *(void *)(a1 + 216)) {
        size_t v4 = *(void *)(a1 + 216);
      }
      else {
        size_t v4 = a3;
      }
      __memcpy_chk();
      *(void *)(a1 + 216) -= v4;
      mbedtls_platform_zeroize(*(void **)(a1 + 200), v4);
      if (*(void *)(a1 + 216))
      {
        *(void *)(a1 + 200) += v4;
      }
      else
      {
        *(void *)(a1 + 200) = 0;
        *(_DWORD *)(a1 + 276) = 0;
      }
      return v4;
    }
    else
    {
      return v8;
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_write(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 && *(void *)a1)
  {
    if (*(_DWORD *)(a1 + 8) == 16 || (unsigned int v4 = mbedtls_ssl_handshake(a1)) == 0) {
      return ssl_write_real(a1, a2, a3);
    }
    else {
      return v4;
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t ssl_write_real(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int max_out_record_payload = mbedtls_ssl_get_max_out_record_payload((unsigned __int8 **)a1);
  if (max_out_record_payload >= 0)
  {
    if (a3 > max_out_record_payload)
    {
      if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
        return -28928;
      }
      a3 = max_out_record_payload;
    }
    if (*(void *)(a1 + 352))
    {
      unsigned int v5 = mbedtls_ssl_flush_output(a1);
      if (v5) {
        return v5;
      }
    }
    else
    {
      *(void *)(a1 + 344) = a3;
      *(_DWORD *)(a1 + 336) = 23;
      __memcpy_chk();
      unsigned int v6 = mbedtls_ssl_write_record(a1, 1);
      if (v6) {
        return v6;
      }
    }
    return a3;
  }
  return max_out_record_payload;
}

uint64_t mbedtls_ssl_close_notify(uint64_t a1)
{
  if (a1 && *(void *)a1)
  {
    if (*(void *)(a1 + 352))
    {
      return mbedtls_ssl_flush_output(a1);
    }
    else if (*(_DWORD *)(a1 + 8) == 16 && (unsigned int v2 = mbedtls_ssl_send_alert_message(a1, 1, 0)) != 0)
    {
      return v2;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return -28928;
  }
}

char *mbedtls_ssl_transform_free(char *result)
{
  __int16 v1 = result;
  if (result)
  {
    mbedtls_cipher_free(result + 72);
    mbedtls_cipher_free(v1 + 152);
    return (char *)mbedtls_platform_zeroize(v1, 0xF0uLL);
  }
  return result;
}

void ssl_free_buffered_record(uint64_t a1)
{
  __int16 v1 = *(void **)(a1 + 88);
  if (v1)
  {
    if (v1[111])
    {
      v1[97] -= v1[112];
      mbedtls_free();
      v1[111] = 0;
    }
  }
}

_DWORD *mbedtls_ssl_read_version(_DWORD *result, _DWORD *a2, int a3, unsigned __int8 *a4)
{
  if (a3 == 1)
  {
    *unint64_t result = 257 - *a4;
    *a2 = 256 - a4[1];
    if (*a2 == 1) {
      ++*a2;
    }
  }
  else
  {
    *unint64_t result = *a4;
    *a2 = a4[1];
  }
  return result;
}

uint64_t ssl_get_maximum_datagram_size(uint64_t a1)
{
  unint64_t current_mtu = mbedtls_ssl_get_current_mtu(a1);
  if (current_mtu && current_mtu < 0x32D) {
    return current_mtu;
  }
  else {
    return 813;
  }
}

uint64_t ssl_get_hs_frag_off(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 192) + 7) << 8) | (*(unsigned __int8 *)(*(void *)(a1 + 192) + 6) << 16) | *(unsigned __int8 *)(*(void *)(a1 + 192) + 8);
}

uint64_t ssl_get_hs_frag_len(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 192) + 10) << 8) | (*(unsigned __int8 *)(*(void *)(a1 + 192) + 9) << 16) | *(unsigned __int8 *)(*(void *)(a1 + 192) + 11);
}

uint64_t ssl_get_reassembly_buffer_size(unint64_t a1, int a2)
{
  uint64_t v3 = a1 + 12;
  if (a2) {
    v3 += a1 / 8 + (a1 % 8 != 0);
  }
  return v3;
}

uint64_t ssl_buffer_make_space(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  ssl_free_buffered_record(a1);
  if (a2 > 0x8000 - *(void *)(v3 + 776))
  {
    for (int i = 3; i >= 0; --i)
    {
      ssl_buffering_free_slot(a1, i);
      if (a2 <= 0x8000 - *(void *)(v3 + 776)) {
        return 0;
      }
    }
    return -1;
  }
  else
  {
    return 0;
  }
}

uint64_t ssl_bitmask_set(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v7 = a2;
  unint64_t v6 = a3;
  unsigned int v5 = 8 - a2 % 8;
  if (a2 % 8)
  {
    unint64_t v3 = a2 / 8;
    if (a3 <= v5)
    {
      while (v6)
        *(unsigned char *)(result + v3) |= 1 << (v5 - v6--);
      return result;
    }
    unint64_t v7 = a2 + v5;
    unint64_t v6 = a3 - v5;
    while (v5)
      *(unsigned char *)(result + v3) |= 1 << --v5;
  }
  unsigned int v4 = v6 % 8;
  if (v6 % 8)
  {
    while (v4)
      *(unsigned char *)(result + (v7 + v6) / 8) |= 1 << (8 - v4--);
  }
  return __memset_chk();
}

uint64_t ssl_bitmask_check(uint64_t a1, unint64_t a2)
{
  for (unint64_t i = 0; i < a2 / 8; ++i)
  {
    if (*(unsigned __int8 *)(a1 + i) != 255) {
      return -1;
    }
  }
  for (unint64_t j = 0; j < a2 % 8; ++j)
  {
    if ((*(unsigned __int8 *)(a1 + a2 / 8) & (1 << (7 - j))) == 0) {
      return -1;
    }
  }
  return 0;
}

uint64_t ssl_load_buffered_record(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (*(unsigned char *)(*(void *)a1 + 5) == 1)
  {
    if (v4)
    {
      unint64_t v3 = *(void *)(v4 + 896);
      int v2 = *(_DWORD *)(v4 + 904);
      if (*(void *)(v4 + 888))
      {
        if (!ssl_next_record_is_in_datagram(a1))
        {
          if (v2 == *(unsigned __int16 *)(a1 + 232))
          {
            if (v3 > 813 - (*(void *)(a1 + 168) - *(void *)(a1 + 152))) {
              return -27648;
            }
            __memcpy_chk();
            *(void *)(a1 + 224) = v3;
            *(void *)(a1 + 240) = 0;
            ssl_free_buffered_record(a1);
          }
          return 0;
        }
        return 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_in_hdr_len(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
    return 13;
  }
  else {
    return 5;
  }
}

uint64_t ssl_parse_record_header(void *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  unsigned int v12 = a1;
  unsigned int v11 = a2;
  unint64_t v10 = a3;
  unsigned int v9 = a4;
  int v8 = 0;
  int v7 = 0;
  if (*(unsigned char *)(*a1 + 5) == 1) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = 3;
  }
  if (v10 < v5 + 2) {
    return -29184;
  }
  v9[8] = *v11;
  if (ssl_check_record_type(v9[8])) {
    return -29184;
  }
  v9[9] = v11[1];
  v9[10] = v11[2];
  mbedtls_ssl_read_version(&v8, &v7, *(unsigned __int8 *)(*v12 + 5), v9 + 9);
  if (v8 != *((_DWORD *)v12 + 3)) {
    return -29184;
  }
  if (v7 > *(unsigned __int8 *)(*v12 + 1)) {
    return -29184;
  }
  __memcpy_chk();
  *((void *)v9 + 4) = v5 + 2;
  *((void *)v9 + 5) = v11[v5 + 1] | ((unint64_t)v11[v5] << 8);
  *((void *)v9 + 2) = v11;
  *((void *)v9 + 3) = *((void *)v9 + 4) + *((void *)v9 + 5);
  if (!*((void *)v9 + 5)) {
    return -29184;
  }
  if (*(unsigned char *)(*v12 + 5) != 1) {
    return 0;
  }
  int v6 = v9[1] | (*v9 << 8);
  if (v10 < *((void *)v9 + 4) + *((void *)v9 + 5)) {
    return -29184;
  }
  if (v6 == *((unsigned __int16 *)v12 + 116))
  {
    if (mbedtls_ssl_dtls_record_replay_check(v12, (uint64_t)v9)) {
      return -26368;
    }
    return 0;
  }
  if (v6 == *((unsigned __int16 *)v12 + 116) + 1) {
    return -25728;
  }
  else {
    return -26368;
  }
}

uint64_t ssl_buffer_future_record(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3)
  {
    if (*(unsigned char *)(a2 + 8) == 22
      && !*(void *)(v3 + 888)
      && *(void *)(a2 + 24) <= (unint64_t)(0x8000 - *(void *)(v3 + 776)))
    {
      *(_DWORD *)(v3 + 904) = *(unsigned __int16 *)(a1 + 232) + 1;
      *(void *)(v3 + 896) = *(void *)(a2 + 24);
      *(void *)(v3 + 888) = mbedtls_calloc();
      if (*(void *)(v3 + 888))
      {
        __memcpy_chk();
        *(void *)(v3 + 776) += *(void *)(a2 + 24);
      }
    }
  }
  return 0;
}

uint64_t ssl_prepare_record_content(void *a1, uint64_t a2)
{
  if (a1[12])
  {
    unsigned int v6 = mbedtls_ssl_decrypt_buf((uint64_t)a1, a1[12], (void *)a2);
    if (v6) {
      return v6;
    }
    if (*(void *)(a2 + 40))
    {
      *((_DWORD *)a1 + 68) = 0;
    }
    else
    {
      if (*((_DWORD *)a1 + 4) == 3 && *(unsigned char *)(a2 + 8) != 23) {
        return -29184;
      }
      if ((int)++*((_DWORD *)a1 + 68) > 3) {
        return -29056;
      }
    }
    if (*(unsigned char *)(*a1 + 5) != 1)
    {
      for (unsigned int i = 8; i > (unint64_t)mbedtls_ssl_ep_len((uint64_t)a1); --i)
      {
        int v2 = (unsigned char *)(a1[20] + i - 1);
        char v3 = *v2 + 1;
        *int v2 = v3;
        if (v3) {
          break;
        }
      }
      if (i == mbedtls_ssl_ep_len((uint64_t)a1)) {
        return -27520;
      }
    }
  }
  if (*(unsigned char *)(*a1 + 5) == 1) {
    mbedtls_ssl_dtls_replay_update(a1);
  }
  if (a1[27] <= 0x300uLL) {
    return 0;
  }
  else {
    return -29184;
  }
}

uint64_t ssl_check_record_type(char a1)
{
  if (a1 == 22 || a1 == 21 || a1 == 20 || a1 == 23) {
    return 0;
  }
  else {
    return -29184;
  }
}

uint64_t mbedtls_ssl_dtls_record_replay_check(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[20];
  a1[20] = a2;
  LODWORD(result) = mbedtls_ssl_dtls_replay_check(a1);
  a1[20] = v3;
  return result;
}

uint64_t mbedtls_ssl_set_client_transport_id(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*a1 + 4) == 1)
  {
    mbedtls_free();
    uint64_t v3 = mbedtls_calloc();
    a1[47] = v3;
    if (v3)
    {
      __memcpy_chk();
      a1[48] = a3;
      return 0;
    }
    else
    {
      return -32512;
    }
  }
  else
  {
    return -28928;
  }
}

void *mbedtls_ssl_conf_dtls_cookies(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[14] = a2;
  result[15] = a3;
  result[16] = a4;
  return result;
}

uint64_t mbedtls_ssl_handshake_server_step(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 16 && *(void *)(a1 + 88))
  {
    unsigned int v5 = mbedtls_ssl_flush_output(a1);
    if (v5)
    {
      return v5;
    }
    else if (*(unsigned char *)(*(void *)a1 + 5) == 1 {
           && *(unsigned char *)(*(void *)(a1 + 88) + 4) == 1
    }
           && (unsigned int v5 = mbedtls_ssl_flight_transmit(a1)) != 0)
    {
      return v5;
    }
    else
    {
      unsigned int v1 = *(_DWORD *)(a1 + 8);
      if (v1)
      {
        uint64_t v3 = v1;
        char v2 = 1;
      }
      else
      {
        uint64_t v3 = *(unsigned int *)(a1 + 8);
        char v2 = 0;
      }
      if ((v2 & 1) == 0)
      {
        switch(v3)
        {
          case 0:
            *(_DWORD *)(a1 + 8) = 1;
            return v5;
          case 1:
            return ssl_parse_client_hello((void *)a1);
          case 2:
            return ssl_write_server_hello((void *)a1);
          case 3:
            return mbedtls_ssl_write_certificate(a1);
          case 4:
            return ssl_write_server_key_exchange((void *)a1);
          case 5:
          case 9:
            return ssl_parse_certificate_request(a1);
          case 6:
            return ssl_write_server_hello_done(a1);
          case 7:
            return mbedtls_ssl_parse_certificate(a1);
          case 8:
            return ssl_parse_client_key_exchange(a1);
          case 10:
            return mbedtls_ssl_parse_change_cipher_spec(a1);
          case 11:
            return mbedtls_ssl_parse_finished(a1);
          case 12:
            return mbedtls_ssl_write_change_cipher_spec(a1);
          case 13:
            return mbedtls_ssl_write_finished(a1);
          case 14:
            *(_DWORD *)(a1 + 8) = 15;
            return v5;
          case 15:
            mbedtls_ssl_handshake_wrapup((void *)a1);
            return v5;
          case 16:
          case 17:
            break;
          case 18:
            return -27264;
          default:
            JUMPOUT(0);
        }
      }
      return -28928;
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t ssl_parse_client_hello(void *a1)
{
  v35 = a1;
  unsigned int input = 0;
  int v33 = 0;
  unint64_t v32 = 0;
  unint64_t v31 = 0;
  unint64_t v30 = 0;
  unint64_t v29 = 0;
  unint64_t v28 = 0;
  unint64_t v27 = 0;
  unint64_t v26 = 0;
  unint64_t v25 = 0;
  unint64_t v24 = 0;
  unint64_t v23 = 0;
  unint64_t v22 = 0;
  uint64_t v21 = 0;
  v20 = 0;
  unsigned int i = 0;
  v18 = 0;
  int v17 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  int v14 = 0;
  int v13 = 0;
  while (1)
  {
    unsigned int input = mbedtls_ssl_fetch_input(v35, 5uLL);
    if (input) {
      return input;
    }
    v20 = (unsigned __int8 *)v35[21];
    if (*v20 != 22) {
      return -30976;
    }
    mbedtls_ssl_read_version(&v14, &v13, *(unsigned __int8 *)(*v35 + 5), v20 + 1);
    if (v14 < 3) {
      return -30976;
    }
    if (*(unsigned char *)(*v35 + 5) != 1) {
      break;
    }
    if (*(unsigned char *)v35[20] || *(unsigned char *)(v35[20] + 1)) {
      return -30976;
    }
    __memcpy_chk();
    if (!mbedtls_ssl_dtls_replay_check(v35))
    {
      mbedtls_ssl_dtls_replay_update(v35);
      break;
    }
    v35[30] = 0;
    v35[28] = 0;
  }
  unint64_t v27 = *(unsigned __int8 *)(v35[22] + 1) | (*(unsigned __int8 *)v35[22] << 8);
  if (v27 > 0x300) {
    return -30976;
  }
  unsigned int v9 = v35;
  uint64_t v1 = mbedtls_ssl_in_hdr_len((uint64_t)v35);
  unsigned int input = mbedtls_ssl_fetch_input(v9, v1 + v27);
  if (input) {
    return input;
  }
  if (*(unsigned char *)(*v35 + 5) == 1)
  {
    unint64_t v8 = v27;
    v35[30] = v8 + mbedtls_ssl_in_hdr_len((uint64_t)v35);
  }
  else
  {
    v35[28] = 0;
  }
  v20 = (unsigned __int8 *)v35[24];
  (*(void (**)(void *, unsigned __int8 *, unint64_t))(v35[11] + 24))(v35, v20, v27);
  unint64_t v7 = v27;
  if (v7 < mbedtls_ssl_hs_hdr_len((uint64_t)v35)) {
    return -30976;
  }
  if (*v20 != 1) {
    return -30976;
  }
  if (v20[1]) {
    return -30976;
  }
  unint64_t v6 = v27;
  uint64_t v2 = mbedtls_ssl_hs_hdr_len((uint64_t)v35);
  if (v6 != v2 + (v20[3] | (v20[2] << 8))) {
    return -30976;
  }
  if (*(unsigned char *)(*v35 + 5) == 1)
  {
    int v12 = *(unsigned __int8 *)(v35[24] + 5) | (*(unsigned __int8 *)(v35[24] + 4) << 8);
    *(_DWORD *)(v35[11] + 912) = v12;
    *(_DWORD *)(v35[11] + 916) = v12 + 1;
    if (*(unsigned char *)(v35[24] + 6)
      || *(unsigned char *)(v35[24] + 7)
      || *(unsigned char *)(v35[24] + 8)
      || memcmp((const void *)(v35[24] + 1), (const void *)(v35[24] + 9), 3uLL))
    {
      return -28800;
    }
  }
  uint64_t v3 = mbedtls_ssl_hs_hdr_len((uint64_t)v35);
  v20 += v3;
  uint64_t v4 = mbedtls_ssl_hs_hdr_len((uint64_t)v35);
  v27 -= v4;
  if (v27 < 0x26) {
    return -30976;
  }
  mbedtls_ssl_read_version((_DWORD *)v35 + 3, (_DWORD *)v35 + 4, *(unsigned __int8 *)(*v35 + 5), v20);
  *(unsigned char *)v35[11] = *((_DWORD *)v35 + 3);
  *(unsigned char *)(v35[11] + 1) = *((_DWORD *)v35 + 4);
  if (*((_DWORD *)v35 + 3) < (int)*(unsigned __int8 *)(*v35 + 2)
    || *((_DWORD *)v35 + 4) < (int)*(unsigned __int8 *)(*v35 + 3))
  {
    mbedtls_ssl_send_alert_message((uint64_t)v35, 2, 70);
    return -28288;
  }
  if (*((_DWORD *)v35 + 3) <= (int)*(unsigned __int8 *)*v35)
  {
    if (*((_DWORD *)v35 + 4) > (int)*(unsigned __int8 *)(*v35 + 1)) {
      *((_DWORD *)v35 + 4) = *(unsigned __int8 *)(*v35 + 1);
    }
  }
  else
  {
    *((_DWORD *)v35 + 3) = *(unsigned __int8 *)*v35;
    *((_DWORD *)v35 + 4) = *(unsigned __int8 *)(*v35 + 1);
  }
  __memcpy_chk();
  unint64_t v25 = v20[34];
  if (v25 > 0x20 || v25 + 36 > v27) {
    goto LABEL_78;
  }
  *(void *)(v35[10] + 16) = v25;
  __memset_chk();
  __memcpy_chk();
  if (*(unsigned char *)(*v35 + 5) == 1)
  {
    unint64_t v22 = v25 + 35;
    uint64_t v21 = v20[v25 + 35];
    if (v25 + 36 + v21 + 2 > v27)
    {
      mbedtls_ssl_send_alert_message((uint64_t)v35, 2, 70);
      return -30976;
    }
    if (*(void *)(*v35 + 120))
    {
      *(unsigned char *)(v35[11] + 928) = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, void, void))(*v35 + 120))(*(void *)(*v35 + 128), &v20[v22 + 1], v21, v35[47], v35[48]);
    }
    else if (v21)
    {
      return -30976;
    }
    unint64_t v30 = v22 + 1 + v21;
  }
  else
  {
    unint64_t v30 = v25 + 35;
  }
  unint64_t v26 = v20[v30 + 1] | (v20[v30] << 8);
  if (v26 < 2
    || v26 + 2 + v30 + 1 > v27
    || v26 % 2
    || (v29 = v30 + 2 + v26, (unint64_t v24 = v20[v29]) == 0)
    || v24 > 0x10
    || v24 + v29 + 1 > v27)
  {
LABEL_78:
    mbedtls_ssl_send_alert_message((uint64_t)v35, 2, 50);
    return -30976;
  }
  *(_DWORD *)(v35[10] + 8) = 0;
  if (*(unsigned char *)(*v35 + 5) == 1) {
    *(_DWORD *)(v35[10] + 8) = 0;
  }
  unint64_t v28 = v29 + 1 + v24;
  if (v27 <= v28)
  {
    unint64_t v23 = 0;
  }
  else
  {
    if (v27 < v28 + 2) {
      goto LABEL_78;
    }
    unint64_t v23 = v20[v28 + 1] | (v20[v28] << 8);
    if (v27 != v28 + 2 + v23) {
      goto LABEL_78;
    }
  }
  v18 = &v20[v28 + 2];
  while (v23)
  {
    if (v23 < 4) {
      goto LABEL_78;
    }
    int v11 = v18[1] | (*v18 << 8);
    unsigned int v10 = v18[3] | (v18[2] << 8);
    if (v10 + 4 > v23) {
      goto LABEL_78;
    }
    switch(v11)
    {
      case 1:
        unsigned int input = ssl_parse_max_fragment_length_ext_0((uint64_t)v35, v18 + 4, v10);
        if (input) {
          return input;
        }
        break;
      case 10:
        unsigned int input = ssl_parse_supported_elliptic_curves((uint64_t)v35, v18 + 4, v10);
        if (input) {
          return input;
        }
        break;
      case 11:
        *(unsigned char *)(v35[11] + 3) |= 1u;
        unsigned int input = ssl_parse_supported_point_formats((uint64_t)v35, v18 + 4, v10);
        if (input) {
          return input;
        }
        break;
      case 256:
        unsigned int input = ssl_parse_ecjpake_kkpp_0((uint64_t)v35, (uint64_t)(v18 + 4), v10);
        if (input) {
          return input;
        }
        break;
      case 65281:
        unsigned int input = ssl_parse_renegotiation_info_0((uint64_t)v35, v18 + 4, v10);
        if (input) {
          return input;
        }
        break;
    }
    v23 -= v10 + 4;
    v18 += v10 + 4;
  }
  unint64_t v32 = 0;
  unsigned int i = &v20[v30 + 2];
  while (v32 < v26)
  {
    if (!*i && i[1] == 255)
    {
      *((_DWORD *)v35 + 98) = 1;
      break;
    }
    v32 += 2;
    i += 2;
  }
  if (*((_DWORD *)v35 + 98) != 1 && *(unsigned char *)(*v35 + 7) == 2) {
    int v17 = 1;
  }
  if (v17 == 1)
  {
    mbedtls_ssl_send_alert_message((uint64_t)v35, 2, 40);
    return -30976;
  }
  else
  {
    int v33 = 0;
    uint64_t v16 = *(void *)(*v35 + 24 + 8 * *((int *)v35 + 4));
    uint64_t v15 = 0;
    unint64_t v32 = 0;
LABEL_111:
    if (*(_DWORD *)(v16 + 4 * v32))
    {
      unint64_t v31 = 0;
      for (unsigned int i = &v20[v30 + 2]; ; i += 2)
      {
        if (v31 >= v26)
        {
          ++v32;
          goto LABEL_111;
        }
        if ((i[1] | (*i << 8)) == *(_DWORD *)(v16 + 4 * v32))
        {
          int v33 = 1;
          unsigned int input = ssl_ciphersuite_match((uint64_t)v35, *(_DWORD *)(v16 + 4 * v32), &v15);
          if (input) {
            return input;
          }
          if (v15) {
            break;
          }
        }
        v31 += 2;
      }
      *(_DWORD *)(v35[10] + 4) = *(_DWORD *)(v16 + 4 * v32);
      *(void *)(v35[11] + 16) = v15;
      ++*((_DWORD *)v35 + 2);
      if (*(unsigned char *)(*v35 + 5) == 1) {
        mbedtls_ssl_recv_flight_completed((uint64_t)v35);
      }
      return 0;
    }
    else if (v33)
    {
      mbedtls_ssl_send_alert_message((uint64_t)v35, 2, 40);
      return -27008;
    }
    else
    {
      mbedtls_ssl_send_alert_message((uint64_t)v35, 2, 40);
      return -29568;
    }
  }
}

uint64_t ssl_write_server_hello(void *a1)
{
  int v12 = a1;
  unsigned int v11 = -110;
  uint64_t v10 = 0;
  if (*(unsigned char *)(*a1 + 5) == 1 && *(unsigned char *)(v12[11] + 928))
  {
    return ssl_write_hello_verify_request((uint64_t)v12);
  }
  else if (*(void *)(*v12 + 72))
  {
    uint64_t v6 = v12[41];
    mbedtls_ssl_write_version(*((unsigned int *)v12 + 3), *((_DWORD *)v12 + 4), *(unsigned __int8 *)(*v12 + 5), (unsigned char *)(v6 + 4));
    unsigned int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*v12 + 72))(*(void *)(*v12 + 80), v6 + 6, 4);
    if (v11)
    {
      return v11;
    }
    else
    {
      unsigned int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*v12 + 72))(*(void *)(*v12 + 80), v6 + 10, 28);
      if (v11)
      {
        return v11;
      }
      else
      {
        __memcpy_chk();
        ssl_handle_id_based_session_resumption(v12);
        if (*(unsigned char *)(v12[11] + 2))
        {
          *((_DWORD *)v12 + 2) = 12;
          unsigned int v11 = mbedtls_ssl_derive_keys((uint64_t)v12);
          if (v11) {
            return v11;
          }
        }
        else
        {
          ++*((_DWORD *)v12 + 2);
          *(void *)(v12[10] + 16) = 32;
          unsigned int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*v12 + 72))(*(void *)(*v12 + 80), v12[10] + 24, 32);
          if (v11) {
            return v11;
          }
        }
        *(unsigned char *)(v6 + 38) = *(void *)(v12[10] + 16);
        __memcpy_chk();
        uint64_t v4 = (unsigned char *)(v6 + 39 + *(void *)(v12[10] + 16));
        *uint64_t v4 = BYTE1(*(_DWORD *)(v12[10] + 4));
        v4[1] = *(unsigned char *)(v12[10] + 4);
        uint64_t v1 = v4 + 2;
        unsigned int v5 = v4 + 3;
        *uint64_t v1 = *(unsigned char *)(v12[10] + 8);
        ssl_write_renegotiation_ext((uint64_t)v12, v5 + 2, &v10);
        uint64_t v7 = v10;
        ssl_write_max_fragment_length_ext_0((uint64_t)v12, &v5[v10 + 2], &v10);
        uint64_t v8 = v7 + v10;
        uint64_t v2 = mbedtls_ssl_ciphersuite_from_id(*(_DWORD *)(v12[10] + 4));
        if (mbedtls_ssl_ciphersuite_uses_ec((uint64_t)v2))
        {
          ssl_write_supported_point_formats_ext_0((uint64_t)v12, &v5[v8 + 2], &v10);
          v8 += v10;
        }
        ssl_write_ecjpake_kkpp_ext_0((uint64_t)v12, &v5[v8 + 2], &v10);
        uint64_t v9 = v8 + v10;
        if (v9)
        {
          *unsigned int v5 = BYTE1(v9);
          v5[1] = v9;
          v5 += v9 + 2;
        }
        v12[43] = &v5[-v6];
        *((_DWORD *)v12 + 84) = 22;
        *(unsigned char *)v12[41] = 2;
        return mbedtls_ssl_write_handshake_msg((uint64_t)v12);
      }
    }
  }
  else
  {
    return -29696;
  }
}

uint64_t ssl_write_server_key_exchange(void *a1)
{
  uint64_t v4 = a1;
  unsigned int v3 = -110;
  uint64_t v2 = 0;
  unsigned int v3 = ssl_prepare_server_key_exchange(a1, (uint64_t)&v2);
  if (v3)
  {
    if (v3 != -25856) {
      v4[43] = 0;
    }
    return v3;
  }
  else
  {
    *((_DWORD *)v4 + 84) = 22;
    *(unsigned char *)v4[41] = 12;
    ++*((_DWORD *)v4 + 2);
    unsigned int v3 = mbedtls_ssl_write_handshake_msg((uint64_t)v4);
    if (v3) {
      return v3;
    }
    else {
      return 0;
    }
  }
}

uint64_t ssl_write_server_hello_done(uint64_t a1)
{
  *(void *)(a1 + 344) = 4;
  *(_DWORD *)(a1 + 336) = 22;
  **(unsigned char **)(a1 + 328) = 14;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
    mbedtls_ssl_send_flight_completed(a1);
  }
  unsigned int v2 = mbedtls_ssl_write_handshake_msg(a1);
  if (v2)
  {
    return v2;
  }
  else if (*(unsigned char *)(*(void *)a1 + 5) == 1 && (unsigned int v3 = mbedtls_ssl_flight_transmit(a1)) != 0)
  {
    return v3;
  }
  else
  {
    return 0;
  }
}

uint64_t ssl_parse_client_key_exchange(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 16);
  unsigned int record = mbedtls_ssl_read_record(a1, 1);
  if (record)
  {
    return record;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 192);
    uint64_t v3 = v2 + mbedtls_ssl_hs_hdr_len(a1);
    if (*(_DWORD *)(a1 + 208) == 22)
    {
      if (**(unsigned char **)(a1 + 192) == 16)
      {
        if (*(_DWORD *)(v4 + 24) == 11)
        {
          if (mbedtls_ecjpake_read_round_two(*(void *)(a1 + 88) + 56, v3, *(void *)(a1 + 192) + *(void *)(a1 + 264) - v3))
          {
            return -31488;
          }
          else
          {
            unsigned int v6 = mbedtls_ecjpake_derive_secret(*(void *)(a1 + 88) + 56, (unsigned char *)(*(void *)(a1 + 88) + 1160), 0x20uLL, (unint64_t *)(*(void *)(a1 + 88) + 8), *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 72), *(void ***)(*(void *)a1 + 80));
            if (v6)
            {
              return v6;
            }
            else
            {
              unsigned int v7 = mbedtls_ssl_derive_keys(a1);
              if (v7)
              {
                return v7;
              }
              else
              {
                ++*(_DWORD *)(a1 + 8);
                return 0;
              }
            }
          }
        }
        else
        {
          return -27648;
        }
      }
      else
      {
        return -31744;
      }
    }
    else
    {
      return -31744;
    }
  }
}

uint64_t ssl_parse_renegotiation_info_0(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (a3 == 1 && !*a2)
  {
    *(_DWORD *)(a1 + 392) = 1;
    return 0;
  }
  else
  {
    mbedtls_ssl_send_alert_message(a1, 2, 40);
    return -30976;
  }
}

uint64_t ssl_parse_supported_elliptic_curves(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3 < 2 || (unint64_t v10 = a2[1] | (*a2 << 8), v10 + 2 != a3) || v10 % 2 || *(void *)(*(void *)(a1 + 88) + 768))
  {
    mbedtls_ssl_send_alert_message(a1, 2, 50);
    return -30976;
  }
  else
  {
    unint64_t v9 = v10 / 2 + 1;
    if (v9 > 0xC) {
      unint64_t v9 = 12;
    }
    uint64_t v6 = mbedtls_calloc();
    if (v6)
    {
      *(void *)(*(void *)(a1 + 88) + 768) = v6;
      for (unsigned int i = (unsigned __int16 *)(a2 + 2); ; ++i)
      {
        BOOL v5 = 0;
        if (v10) {
          BOOL v5 = v9 > 1;
        }
        if (!v5) {
          break;
        }
        unsigned int v7 = mbedtls_ecp_curve_info_from_tls_id(_byteswap_ushort(*i));
        if (v7)
        {
          uint64_t v3 = (void *)v6;
          v6 += 8;
          *uint64_t v3 = v7;
          --v9;
        }
        v10 -= 2;
      }
      return 0;
    }
    else
    {
      mbedtls_ssl_send_alert_message(a1, 2, 80);
      return -32512;
    }
  }
}

uint64_t ssl_parse_supported_point_formats(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a3 && *a2 + 1 == a3)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2 + 1;
    while (v5)
    {
      if (!*v4 || *v4 == 1)
      {
        *(_DWORD *)(*(void *)(a1 + 88) + 316) = *v4;
        return 0;
      }
      --v5;
      ++v4;
    }
    return 0;
  }
  else
  {
    mbedtls_ssl_send_alert_message(a1, 2, 50);
    return -30976;
  }
}

uint64_t ssl_parse_ecjpake_kkpp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (mbedtls_ecjpake_check(*(void *)(a1 + 88) + 56))
  {
    return 0;
  }
  else
  {
    unsigned int round_one = mbedtls_ecjpake_read_round_one(*(void *)(a1 + 88) + 56, a2, a3);
    if (round_one)
    {
      mbedtls_ssl_send_alert_message(a1, 2, 47);
      return round_one;
    }
    else
    {
      *(unsigned char *)(*(void *)(a1 + 88) + 3) |= 2u;
      return 0;
    }
  }
}

uint64_t ssl_parse_max_fragment_length_ext_0(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (a3 == 1 && *a2 < 5u)
  {
    **(unsigned char **)(a1 + 80) = *a2;
    return 0;
  }
  else
  {
    mbedtls_ssl_send_alert_message(a1, 2, 47);
    return -30976;
  }
}

uint64_t ssl_ciphersuite_match(uint64_t a1, int a2, void *a3)
{
  uint64_t v4 = mbedtls_ssl_ciphersuite_from_id(a2);
  if (v4)
  {
    if (v4[8] <= *(_DWORD *)(a1 + 16) && v4[10] >= *(_DWORD *)(a1 + 16))
    {
      if (*(unsigned char *)(*(void *)a1 + 5) == 1 && (v4[11] & 4) != 0)
      {
        return 0;
      }
      else if (v4[6] != 11 || (*(unsigned char *)(*(void *)(a1 + 88) + 3) & 2) != 0)
      {
        *a3 = v4;
        return 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return -27648;
  }
}

uint64_t ssl_write_hello_verify_request(uint64_t a1)
{
  uint64_t v6 = a1;
  unsigned int v5 = -110;
  uint64_t v4 = 0;
  uint64_t v4 = (unsigned char *)(*(void *)(a1 + 328) + 4);
  mbedtls_ssl_write_version(*(unsigned int *)(v6 + 12), *(_DWORD *)(v6 + 16), *(unsigned __int8 *)(*(void *)v6 + 5), v4);
  v4 += 2;
  if (*(void *)(*(void *)v6 + 112))
  {
    uint64_t v1 = v4++;
    uint64_t v3 = v1;
    unsigned int v5 = (*(uint64_t (**)(void, unsigned char **, uint64_t, void, void))(*(void *)v6 + 112))(*(void *)(*(void *)v6 + 128), &v4, *(void *)(v6 + 288) + 813, *(void *)(v6 + 376), *(void *)(v6 + 384));
    if (v5)
    {
      return v5;
    }
    else
    {
      *uint64_t v3 = (_BYTE)v4 - ((_BYTE)v3 + 1);
      *(void *)(v6 + 344) = &v4[-*(void *)(v6 + 328)];
      *(_DWORD *)(v6 + 336) = 22;
      **(unsigned char **)(v6 + 328) = 3;
      *(_DWORD *)(v6 + 8) = 18;
      unsigned int v5 = mbedtls_ssl_write_handshake_msg(v6);
      if (v5)
      {
        return v5;
      }
      else if (*(unsigned char *)(*(void *)v6 + 5) == 1 && (unsigned int v5 = mbedtls_ssl_flight_transmit(v6)) != 0)
      {
        return v5;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    return -27648;
  }
}

void *ssl_handle_id_based_session_resumption(void *a1)
{
  uint64_t result = memset(__b, 0, sizeof(__b));
  __dst = (void *)a1[10];
  if (*(unsigned char *)(a1[11] + 2) != 1 && __dst[2] && *(void *)(*a1 + 88))
  {
    mbedtls_ssl_session_init();
    __b[2] = __dst[2];
    __memcpy_chk();
    if (!(*(unsigned int (**)(void, void *))(*a1 + 88))(*(void *)(*a1 + 104), __b)
      && *((_DWORD *)__dst + 1) == HIDWORD(__b[0])
      && *((_DWORD *)__dst + 2) == LODWORD(__b[1]))
    {
      mbedtls_ssl_session_free(__dst);
      memcpy(__dst, __b, 0x70uLL);
      memset(__b, 0, sizeof(__b));
      *(unsigned char *)(a1[11] + 2) = 1;
    }
    return mbedtls_ssl_session_free(__b);
  }
  return result;
}

uint64_t ssl_write_renegotiation_ext(uint64_t result, unsigned char *a2, void *a3)
{
  if (*(_DWORD *)(result + 392) == 1)
  {
    *a2 = -1;
    a2[1] = 1;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    *a3 = 5;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t ssl_write_max_fragment_length_ext_0(uint64_t result, unsigned char *a2, void *a3)
{
  if (**(unsigned char **)(result + 80))
  {
    *a2 = 0;
    a2[1] = 1;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = **(unsigned char **)(result + 80);
    *a3 = 5;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t ssl_write_supported_point_formats_ext_0(uint64_t result, unsigned char *a2, void *a3)
{
  if (*(unsigned char *)(*(void *)(result + 88) + 3))
  {
    *a2 = 0;
    a2[1] = 11;
    a2[2] = 0;
    a2[3] = 2;
    a2[4] = 1;
    a2[5] = 0;
    *a3 = 6;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t ssl_write_ecjpake_kkpp_ext_0(uint64_t result, unsigned char *a2, void *a3)
{
  unint64_t v9 = (void *)result;
  uint64_t v8 = a2;
  unsigned int v7 = a3;
  int v6 = -110;
  unsigned int v5 = a2;
  uint64_t v4 = 0;
  uint64_t v4 = *(void *)(result + 328) + 768;
  uint64_t v3 = 0;
  *a3 = 0;
  if (*(_DWORD *)(*(void *)(v9[11] + 16) + 24) == 11 && v4 - (uint64_t)v5 >= 4)
  {
    *unsigned int v5 = 1;
    v5[1] = 0;
    v5 += 2;
    uint64_t result = mbedtls_ecjpake_write_round_one(v9[11] + 56, (unint64_t)(v5 + 2), v4 - (void)v5 - 2, &v3, *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*v9 + 72), *(void ***)(*v9 + 80));
    int v6 = result;
    if (!result)
    {
      *unsigned int v5 = BYTE1(v3);
      v5[1] = v3;
      *unsigned int v7 = v3 + 4;
    }
  }
  return result;
}

uint64_t ssl_prepare_server_key_exchange(void *a1, uint64_t a2)
{
  unsigned int v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = 0;
  uint64_t v5 = *(void *)(a1[11] + 16);
  a1[43] = 4;
  if (*(_DWORD *)(v5 + 24) != 11) {
    return 0;
  }
  unsigned int v4 = -110;
  uint64_t v3 = 0;
  unsigned int v4 = mbedtls_ecjpake_write_round_two(v7[11] + 56, (unsigned char *)(v7[41] + v7[43]), 768 - v7[43], &v3, *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*v7 + 72), *(void ***)(*v7 + 80));
  if (!v4)
  {
    v7[43] += v3;
    return 0;
  }
  return v4;
}

uint64_t mbedtls_ssl_session_copy(void *a1)
{
  return 0;
}

void *mbedtls_ssl_session_free(void *result)
{
  if (result) {
    return mbedtls_platform_zeroize(result, 0x70uLL);
  }
  return result;
}

uint64_t mbedtls_ssl_tls_prf(int a1, unsigned char *a2, unint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a1 == 4) {
    return tls_prf_sha256(a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    return -28800;
  }
}

uint64_t tls_prf_sha256(unsigned char *a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  return tls_prf_generic(6, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t mbedtls_ssl_derive_keys(uint64_t a1)
{
  unsigned int v2 = ssl_set_handshake_prfs(*(void **)(a1 + 88), *(_DWORD *)(a1 + 16));
  if (v2)
  {
    return v2;
  }
  else
  {
    unsigned int v3 = ssl_compute_master(*(void *)(a1 + 88), *(void *)(a1 + 80) + 56);
    if (v3)
    {
      return v3;
    }
    else
    {
      memcpy(__dst, (const void *)(*(void *)(a1 + 88) + 1096), sizeof(__dst));
      __memcpy_chk();
      __memcpy_chk();
      mbedtls_platform_zeroize(__dst, 0x40uLL);
      unsigned int v4 = ssl_populate_transform(*(void *)(a1 + 120), *(_DWORD *)(*(void *)(a1 + 80) + 4), (unsigned char *)(*(void *)(a1 + 80) + 56), *(uint64_t (**)(unsigned char *, unint64_t, const char *, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(a1 + 88) + 48), *(void *)(a1 + 88) + 1096, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(*(void *)a1 + 4), a1);
      if (v4)
      {
        return v4;
      }
      else
      {
        mbedtls_platform_zeroize((void *)(*(void *)(a1 + 88) + 1096), 0x40uLL);
        return 0;
      }
    }
  }
}

uint64_t ssl_set_handshake_prfs(void *a1, int a2)
{
  if (a2 == 3)
  {
    a1[6] = tls_prf_sha256;
    a1[4] = ssl_calc_verify_tls_sha256;
    a1[5] = ssl_calc_finished_tls_sha256;
    return 0;
  }
  else
  {
    return -27648;
  }
}

uint64_t ssl_compute_master(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2))
  {
    return 0;
  }
  else
  {
    unsigned int v3 = (*(uint64_t (**)(uint64_t, void, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a1 + 1160, *(void *)(a1 + 8), "master secret", a1 + 1096, 64, a2, 48);
    if (v3)
    {
      return v3;
    }
    else
    {
      mbedtls_platform_zeroize((void *)(a1 + 1160), 0x20uLL);
      return 0;
    }
  }
}

uint64_t ssl_populate_transform(uint64_t a1, int a2, unsigned char *a3, uint64_t (*a4)(unsigned char *a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7), uint64_t a5, int a6, int a7, uint64_t a8)
{
  *(_DWORD *)(a1 + 232) = a6;
  uint64_t v16 = mbedtls_ssl_ciphersuite_from_id(a2);
  if (v16)
  {
    uint64_t v15 = mbedtls_cipher_info_from_type(v16[4]);
    if (!v15) {
      return -28928;
    }
    if (!mbedtls_md_info_from_type(v16[5])) {
      return -28928;
    }
    unsigned int v21 = a4(a3, 48uLL, "key expansion", a5, 64, (uint64_t)v30, 256uLL);
    if (v21) {
      return v21;
    }
    unsigned int v17 = *(_DWORD *)(v15 + 8) / 8u;
    if (*(_DWORD *)(v15 + 4) != 6 && *(_DWORD *)(v15 + 4) != 8 && *(_DWORD *)(v15 + 4) != 10) {
      return -27648;
    }
    *(void *)(a1 + 24) = 0;
    if ((v16[11] & 2) != 0) {
      int v8 = 8;
    }
    else {
      int v8 = 16;
    }
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 8) = 12;
    if (*(_DWORD *)(v15 + 4) == 10) {
      *(void *)(a1 + 16) = 12;
    }
    else {
      *(void *)(a1 + 16) = 4;
    }
    *(void *)a1 = *(void *)(a1 + 8) - *(void *)(a1 + 16) + *(void *)(a1 + 32);
    if (a7)
    {
      if (a7 != 1)
      {
        unsigned int v22 = -27648;
LABEL_39:
        mbedtls_platform_zeroize(v30, 0x100uLL);
        return v22;
      }
      v20 = &v30[v17];
      v19 = v30;
      if (*(void *)(a1 + 16)) {
        uint64_t v13 = *(void *)(a1 + 16);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 8);
      }
      uint64_t v18 = v13;
      __memcpy_chk();
      __memcpy_chk();
    }
    else
    {
      v20 = v30;
      v19 = &v30[v17];
      if (*(void *)(a1 + 16)) {
        uint64_t v14 = *(void *)(a1 + 16);
      }
      else {
        uint64_t v14 = *(void *)(a1 + 8);
      }
      uint64_t v18 = v14;
      __memcpy_chk();
      __memcpy_chk();
    }
    if (*(void *)(*(void *)a8 + 136)) {
      (*(void (**)(void, unsigned char *, unsigned char *, void, void, uint64_t))(*(void *)a8 + 136))(*(void *)(*(void *)a8 + 152), a3, v30, 0, v17, v18);
    }
    if (*(void *)(*(void *)a8 + 144))
    {
      unsigned int v11 = *(void (**)(uint64_t, unsigned char *, unsigned char *, void, void, uint64_t, uint64_t, uint64_t, int))(*(void *)a8 + 144);
      uint64_t v12 = *(void *)(*(void *)a8 + 152);
      int type = tls_prf_get_type(a4);
      v11(v12, a3, v30, 0, v17, v18, a5 + 32, a5, type);
    }
    unsigned int v22 = mbedtls_cipher_setup((void *)(a1 + 72), v15);
    if (!v22)
    {
      unsigned int v22 = mbedtls_cipher_setup((void *)(a1 + 152), v15);
      if (!v22)
      {
        unsigned int v22 = mbedtls_cipher_setkey(a1 + 72, (uint64_t)v20, *(_DWORD *)(v15 + 8), 1);
        if (!v22) {
          unsigned int v22 = mbedtls_cipher_setkey(a1 + 152, (uint64_t)v19, *(_DWORD *)(v15 + 8), 0);
        }
      }
    }
    goto LABEL_39;
  }
  return -28928;
}

uint64_t mbedtls_ssl_write_certificate(uint64_t a1)
{
  if (mbedtls_ssl_ciphersuite_uses_srv_cert(*(void *)(*(void *)(a1 + 88) + 16)))
  {
    return -27648;
  }
  else
  {
    ++*(_DWORD *)(a1 + 8);
    return 0;
  }
}

BOOL mbedtls_ssl_ciphersuite_uses_srv_cert(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 24);
  BOOL v4 = 1;
  if ((v3 - 1) > 3 && v3 != 7 && v3 != 10 && v3 != 9) {
    return 0;
  }
  return v4;
}

uint64_t mbedtls_ssl_parse_certificate(uint64_t a1)
{
  if (mbedtls_ssl_ciphersuite_uses_srv_cert(*(void *)(*(void *)(a1 + 88) + 16)))
  {
    return -27648;
  }
  else
  {
    ++*(_DWORD *)(a1 + 8);
    return 0;
  }
}

uint64_t mbedtls_ssl_optimize_checksum(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 20) != 7) {
    *(void *)(*(void *)(result + 88) + 24) = ssl_update_checksum_sha256;
  }
  return result;
}

uint64_t ssl_update_checksum_sha256(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_sha256_update_ret((_DWORD *)(*(void *)(a1 + 88) + 988), a2, a3);
}

uint64_t mbedtls_ssl_reset_checksum(uint64_t a1)
{
  return mbedtls_sha256_starts_ret((_DWORD *)(*(void *)(a1 + 88) + 988), 0);
}

void mbedtls_ssl_handshake_wrapup_free_hs_transform(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  if (*(void *)(a1 + 112))
  {
    mbedtls_ssl_transform_free(*(char **)(a1 + 112));
    mbedtls_free();
  }
  *(void *)(a1 + 112) = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
}

void *mbedtls_ssl_handshake_free(void *result)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v1 = (void *)result[11];
  if (v1)
  {
    mbedtls_sha256_free((char *)v1 + 988);
    mbedtls_ecjpake_free(v1 + 7);
    mbedtls_free();
    v1[94] = 0;
    v1[95] = 0;
    mbedtls_free();
    mbedtls_free();
    mbedtls_ssl_flight_free(v1[117]);
    mbedtls_ssl_buffering_free(v2);
    return mbedtls_platform_zeroize(v1, 0x4A8uLL);
  }
  return result;
}

void mbedtls_ssl_handshake_wrapup(void *a1)
{
  int v1 = *(unsigned __int8 *)(a1[11] + 2);
  if (a1[9])
  {
    mbedtls_ssl_session_free((void *)a1[9]);
    mbedtls_free();
  }
  a1[9] = a1[10];
  a1[10] = 0;
  if (*(void *)(*a1 + 96) && *(void *)(a1[9] + 16) && !v1) {
    (*(void (**)(void, void))(*a1 + 96))(*(void *)(*a1 + 104), a1[9]);
  }
  if (*(unsigned char *)(*a1 + 5) == 1 && *(void *)(a1[11] + 936)) {
    mbedtls_ssl_set_timer((uint64_t)a1, 0);
  }
  else {
    mbedtls_ssl_handshake_wrapup_free_hs_transform((uint64_t)a1);
  }
  ++*((_DWORD *)a1 + 2);
}

uint64_t mbedtls_ssl_write_finished(uint64_t a1)
{
  mbedtls_ssl_update_out_pointers(a1, *(void *)(a1 + 120));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 88) + 40))(a1, *(void *)(a1 + 328) + 4, *(unsigned __int8 *)(*(void *)a1 + 4));
  if (*(_DWORD *)(a1 + 16)) {
    int v1 = 12;
  }
  else {
    int v1 = 36;
  }
  *(void *)(a1 + 344) = v1 + 4;
  *(_DWORD *)(a1 + 336) = 22;
  **(unsigned char **)(a1 + 328) = 20;
  if (*(unsigned char *)(*(void *)(a1 + 88) + 2))
  {
    if (!*(unsigned char *)(*(void *)a1 + 4)) {
      *(_DWORD *)(a1 + 8) = 15;
    }
    if (*(unsigned char *)(*(void *)a1 + 4) == 1) {
      *(_DWORD *)(a1 + 8) = 10;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 8);
  }
  if (*(unsigned char *)(*(void *)a1 + 5) == 1)
  {
    *(void *)(*(void *)(a1 + 88) + 968) = *(void *)(a1 + 104);
    __memcpy_chk();
    __memset_chk();
    for (unsigned __int8 i = 2; i; --i)
    {
      uint64_t v2 = (unsigned char *)(a1 + 360 + i - 1);
      char v3 = *v2 + 1;
      *uint64_t v2 = v3;
      if (v3) {
        break;
      }
    }
    if (!i) {
      return -27520;
    }
  }
  else
  {
    __memset_chk();
  }
  *(void *)(a1 + 104) = *(void *)(a1 + 120);
  *(void *)(a1 + 64) = *(void *)(a1 + 80);
  if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
    mbedtls_ssl_send_flight_completed(a1);
  }
  unsigned int v6 = mbedtls_ssl_write_handshake_msg(a1);
  if (v6)
  {
    return v6;
  }
  else if (*(unsigned char *)(*(void *)a1 + 5) == 1 && (unsigned int v7 = mbedtls_ssl_flight_transmit(a1)) != 0)
  {
    return v7;
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_parse_finished(uint64_t a1)
{
  (*(void (**)(uint64_t, unsigned char *, void))(*(void *)(a1 + 88) + 40))(a1, v7, *(unsigned __int8 *)(*(void *)a1 + 4) ^ 1u);
  unsigned int record = mbedtls_ssl_read_record(a1, 1);
  if (!record)
  {
    if (*(_DWORD *)(a1 + 208) == 22)
    {
      if (**(unsigned char **)(a1 + 192) == 20 && (uint64_t v4 = *(void *)(a1 + 264), v4 == mbedtls_ssl_hs_hdr_len(a1) + 12))
      {
        uint64_t v3 = *(void *)(a1 + 192);
        uint64_t v1 = mbedtls_ssl_hs_hdr_len(a1);
        if (mbedtls_ct_memcmp(v3 + v1, (uint64_t)v7, 0xCuLL))
        {
          mbedtls_ssl_send_alert_message(a1, 2, 51);
          unsigned int record = -32384;
        }
        else
        {
          if (*(unsigned char *)(*(void *)(a1 + 88) + 2))
          {
            if (!*(unsigned char *)(*(void *)a1 + 4)) {
              *(_DWORD *)(a1 + 8) = 10;
            }
            if (*(unsigned char *)(*(void *)a1 + 4) == 1) {
              *(_DWORD *)(a1 + 8) = 15;
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 8);
          }
          if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
            mbedtls_ssl_recv_flight_completed(a1);
          }
        }
      }
      else
      {
        mbedtls_ssl_send_alert_message(a1, 2, 50);
        unsigned int record = -32384;
      }
    }
    else
    {
      mbedtls_ssl_send_alert_message(a1, 2, 10);
      unsigned int record = -30464;
    }
  }
  mbedtls_platform_zeroize(v7, 0xCuLL);
  return record;
}

uint64_t mbedtls_ssl_transform_init()
{
  return mbedtls_cipher_init();
}

uint64_t mbedtls_ssl_session_init()
{
  return __memset_chk();
}

uint64_t mbedtls_ssl_init()
{
  return __memset_chk();
}

uint64_t mbedtls_ssl_setup(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[36] = 0;
  a1[19] = mbedtls_calloc();
  if (!a1[19])
  {
    unsigned int v3 = -32512;
LABEL_7:
    mbedtls_free();
    mbedtls_free();
    *a1 = 0;
    a1[19] = 0;
    a1[36] = 0;
    a1[21] = 0;
    a1[20] = 0;
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
    a1[38] = 0;
    a1[37] = 0;
    a1[39] = 0;
    a1[40] = 0;
    a1[41] = 0;
    return v3;
  }
  a1[36] = mbedtls_calloc();
  if (!a1[36])
  {
    unsigned int v3 = -32512;
    goto LABEL_7;
  }
  mbedtls_ssl_reset_in_out_pointers(a1);
  unsigned int v3 = ssl_handshake_init((uint64_t)a1);
  if (v3) {
    goto LABEL_7;
  }
  return 0;
}

uint64_t ssl_handshake_init(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    mbedtls_ssl_transform_free(*(char **)(a1 + 120));
  }
  if (*(void *)(a1 + 80)) {
    mbedtls_ssl_session_free(*(void **)(a1 + 80));
  }
  if (*(void *)(a1 + 88)) {
    mbedtls_ssl_handshake_free((void *)a1);
  }
  if (!*(void *)(a1 + 120)) {
    *(void *)(a1 + 120) = mbedtls_calloc();
  }
  if (!*(void *)(a1 + 80)) {
    *(void *)(a1 + 80) = mbedtls_calloc();
  }
  if (!*(void *)(a1 + 88)) {
    *(void *)(a1 + 88) = mbedtls_calloc();
  }
  if (*(void *)(a1 + 88) && *(void *)(a1 + 120) && *(void *)(a1 + 80))
  {
    mbedtls_ssl_session_init();
    mbedtls_ssl_transform_init();
    ssl_handshake_params_init(*(void *)(a1 + 88));
    if (*(unsigned char *)(*(void *)a1 + 5) == 1)
    {
      *(void *)(*(void *)(a1 + 88) + 968) = *(void *)(a1 + 104);
      if (*(unsigned char *)(*(void *)a1 + 4)) {
        *(unsigned char *)(*(void *)(a1 + 88) + 4) = 2;
      }
      else {
        *(unsigned char *)(*(void *)(a1 + 88) + 4) = 0;
      }
      mbedtls_ssl_set_timer(a1, 0);
    }
    return 0;
  }
  else
  {
    mbedtls_free();
    mbedtls_free();
    mbedtls_free();
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 80) = 0;
    return -32512;
  }
}

uint64_t mbedtls_ssl_session_reset_int(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  mbedtls_ssl_set_timer(a1, 0);
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 200) = 0;
  mbedtls_ssl_reset_in_out_pointers((void *)a1);
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 232) = 0;
  mbedtls_ssl_dtls_replay_reset(a1);
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  __memset_chk();
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __memset_chk();
  *(void *)(a1 + 224) = 0;
  __memset_chk();
  if (*(void *)(a1 + 112))
  {
    mbedtls_ssl_transform_free(*(char **)(a1 + 112));
    mbedtls_free();
    *(void *)(a1 + 112) = 0;
  }
  if (*(void *)(a1 + 72))
  {
    mbedtls_ssl_session_free(*(void **)(a1 + 72));
    mbedtls_free();
    *(void *)(a1 + 72) = 0;
  }
  mbedtls_free();
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  unsigned int v2 = ssl_handshake_init(a1);
  if (v2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ssl_session_reset(uint64_t a1)
{
  return mbedtls_ssl_session_reset_int(a1);
}

uint64_t mbedtls_ssl_conf_endpoint(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4) = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_transport(uint64_t result, char a2)
{
  *(unsigned char *)(result + 5) = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_dtls_anti_replay(uint64_t result, char a2)
{
  *(unsigned char *)(result + 9) = a2;
  return result;
}

uint64_t mbedtls_ssl_set_datagram_packing(uint64_t result, int a2)
{
  *(unsigned char *)(result + 280) = a2 == 0;
  return result;
}

uint64_t mbedtls_ssl_conf_handshake_timeout(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  return result;
}

uint64_t mbedtls_ssl_conf_authmode(uint64_t result, char a2)
{
  *(unsigned char *)(result + 6) = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_rng(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 72) = a2;
  *(void *)(result + 80) = a3;
  return result;
}

uint64_t mbedtls_ssl_conf_dbg(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 56) = a2;
  *(void *)(result + 64) = a3;
  return result;
}

void *mbedtls_ssl_set_bio(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[6] = a2;
  result[3] = a3;
  result[4] = a4;
  result[5] = a5;
  return result;
}

uint64_t mbedtls_ssl_set_mtu(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 368) = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_read_timeout(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t mbedtls_ssl_set_timer_cb(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[16] = a2;
  a1[17] = a3;
  a1[18] = a4;
  return mbedtls_ssl_set_timer((uint64_t)a1, 0);
}

void *mbedtls_ssl_conf_session_cache(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[13] = a2;
  result[11] = a3;
  result[12] = a4;
  return result;
}

uint64_t mbedtls_ssl_set_session(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(void *)(a1 + 80) && !*(unsigned char *)(*(void *)a1 + 4))
  {
    unsigned int v3 = mbedtls_ssl_session_copy(*(void **)(a1 + 80));
    if (v3)
    {
      return v3;
    }
    else
    {
      *(unsigned char *)(*(void *)(a1 + 88) + 2) = 1;
      return 0;
    }
  }
  else
  {
    return -28928;
  }
}

void *mbedtls_ssl_conf_ciphersuites(void *result, uint64_t a2)
{
  result[3] = a2;
  result[4] = a2;
  result[5] = a2;
  result[6] = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_ciphersuites_for_version(uint64_t result, uint64_t a2, int a3, unsigned int a4)
{
  if (a3 == 3 && a4 < 4) {
    *(void *)(result + 24 + 8 * (int)a4) = a2;
  }
  return result;
}

uint64_t mbedtls_ssl_set_hs_ecjpake_password(void *a1, uint64_t a2, unint64_t a3)
{
  if (a1[11] && *a1)
  {
    if (*(unsigned char *)(*a1 + 4) == 1) {
      return mbedtls_ecjpake_setup(a1[11] + 56, 1, 6, 3, a2, a3);
    }
    else {
      return mbedtls_ecjpake_setup(a1[11] + 56, 0, 6, 3, a2, a3);
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_conf_curves(uint64_t result, uint64_t a2)
{
  *(void *)(result + 160) = a2;
  return result;
}

unsigned char *mbedtls_ssl_conf_max_version(unsigned char *result, char a2, char a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t mbedtls_ssl_conf_min_version(uint64_t result, char a2, char a3)
{
  *(unsigned char *)(result + 2) = a2;
  *(unsigned char *)(result + 3) = a3;
  return result;
}

uint64_t mbedtls_ssl_conf_cert_req_ca_list(uint64_t result, char a2)
{
  *(unsigned char *)(result + 10) = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_max_frag_len(uint64_t a1, unsigned __int8 a2)
{
  if (a2 < 5u && ssl_mfl_code_to_length(a2) <= 0x300)
  {
    *(unsigned char *)(a1 + 8) = a2;
    return 0;
  }
  else
  {
    return -28928;
  }
}

uint64_t ssl_mfl_code_to_length(unsigned int a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if (v1)
  {
    return 768;
  }
  else
  {
    switch(v2)
    {
      case 0:
        unsigned int v4 = 768;
        break;
      case 1:
        unsigned int v4 = 512;
        break;
      case 2:
        unsigned int v4 = 1024;
        break;
      case 3:
        unsigned int v4 = 2048;
        break;
      case 4:
        unsigned int v4 = 4096;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

uint64_t mbedtls_ssl_conf_legacy_renegotiation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 7) = a2;
  return result;
}

uint64_t mbedtls_ssl_conf_export_keys_cb(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 136) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

uint64_t mbedtls_ssl_conf_export_keys_ext_cb(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 144) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

uint64_t mbedtls_ssl_get_verify_result(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    return *(unsigned int *)(*(void *)(a1 + 72) + 104);
  }
  else if (*(void *)(a1 + 80))
  {
    return *(unsigned int *)(*(void *)(a1 + 80) + 104);
  }
  else
  {
    return -1;
  }
}

const char *mbedtls_ssl_get_ciphersuite(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 72)) {
    return mbedtls_ssl_get_ciphersuite_name(*(_DWORD *)(*(void *)(a1 + 72) + 4));
  }
  else {
    return 0;
  }
}

const char *mbedtls_ssl_get_version(_DWORD *a1)
{
  if (*(unsigned char *)(*(void *)a1 + 5) == 1)
  {
    int v5 = a1[4];
    if (v5 == 2)
    {
      return "DTLSv1.0";
    }
    else if (v5 == 3)
    {
      return "DTLSv1.2";
    }
    else
    {
      return "unknown (DTLS)";
    }
  }
  else
  {
    unsigned int v1 = a1[4];
    if (v1)
    {
      uint64_t v3 = v1;
      char v2 = 1;
    }
    else
    {
      uint64_t v3 = a1[4];
      char v2 = 0;
    }
    if (v2)
    {
      return "unknown";
    }
    else
    {
      switch(v3)
      {
        case 0:
          unsigned int v6 = "SSLv3.0";
          break;
        case 1:
          unsigned int v6 = "TLSv1.0";
          break;
        case 2:
          unsigned int v6 = "TLSv1.1";
          break;
        case 3:
          unsigned int v6 = "TLSv1.2";
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  return v6;
}

unint64_t mbedtls_ssl_get_input_max_frag_len(uint64_t a1)
{
  unint64_t v4 = 768;
  if (!*(unsigned char *)(*(void *)a1 + 4) && *(int *)(a1 + 8) >= 6) {
    return ssl_mfl_code_to_length(*(unsigned __int8 *)(*(void *)a1 + 8));
  }
  if (*(void *)(a1 + 64))
  {
    unint64_t v2 = ssl_mfl_code_to_length(**(unsigned __int8 **)(a1 + 64));
    if (v2 < 0x300) {
      unint64_t v4 = v2;
    }
  }
  if (*(void *)(a1 + 80))
  {
    unint64_t v3 = ssl_mfl_code_to_length(**(unsigned __int8 **)(a1 + 80));
    if (v3 < v4) {
      return v3;
    }
  }
  return v4;
}

unint64_t mbedtls_ssl_get_output_max_frag_len(unsigned __int8 **a1)
{
  unint64_t v2 = ssl_mfl_code_to_length((*a1)[8]);
  if (a1[8] && ssl_mfl_code_to_length(*a1[8]) < v2) {
    unint64_t v2 = ssl_mfl_code_to_length(*a1[8]);
  }
  if (a1[10] && ssl_mfl_code_to_length(*a1[10]) < v2) {
    return ssl_mfl_code_to_length(*a1[10]);
  }
  return v2;
}

unint64_t mbedtls_ssl_get_max_frag_len(unsigned __int8 **a1)
{
  return mbedtls_ssl_get_output_max_frag_len(a1);
}

uint64_t mbedtls_ssl_get_current_mtu(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)a1 + 4) && (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 8) == 2)) {
    return 0;
  }
  if (!*(void *)(a1 + 88) || !*(_WORD *)(*(void *)(a1 + 88) + 984)) {
    return *(unsigned __int16 *)(a1 + 368);
  }
  if (!*(_WORD *)(a1 + 368)) {
    return *(unsigned __int16 *)(*(void *)(a1 + 88) + 984);
  }
  if (*(unsigned __int16 *)(a1 + 368) >= (int)*(unsigned __int16 *)(*(void *)(a1 + 88) + 984)) {
    return (int)*(unsigned __int16 *)(*(void *)(a1 + 88) + 984);
  }
  else {
    return (int)*(unsigned __int16 *)(a1 + 368);
  }
}

uint64_t mbedtls_ssl_get_max_out_record_payload(unsigned __int8 **a1)
{
  unint64_t v5 = 768;
  unint64_t output_max_frag_len = mbedtls_ssl_get_output_max_frag_len(a1);
  if (output_max_frag_len < 0x300) {
    unint64_t v5 = output_max_frag_len;
  }
  if (!mbedtls_ssl_get_current_mtu((uint64_t)a1)) {
    return v5;
  }
  unint64_t current_mtu = mbedtls_ssl_get_current_mtu((uint64_t)a1);
  int record_expansion = mbedtls_ssl_get_record_expansion((uint64_t)a1);
  if (record_expansion >= 0)
  {
    if (current_mtu <= record_expansion) {
      return -28800;
    }
    if (v5 > current_mtu - record_expansion) {
      LODWORD(v5) = current_mtu - record_expansion;
    }
    return v5;
  }
  return record_expansion;
}

uint64_t mbedtls_ssl_get_session(void *a1, void *a2)
{
  if (a1 && a2 && a1[9] && !*(unsigned char *)(*a1 + 4)) {
    return mbedtls_ssl_session_copy(a2);
  }
  else {
    return -28928;
  }
}

uint64_t mbedtls_ssl_get_session_pointer(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 72);
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ssl_session_save(uint64_t a1, unsigned char *a2, unint64_t a3, unint64_t *a4)
{
  return ssl_session_save(a1, 0, a2, a3, a4);
}

uint64_t ssl_session_save(uint64_t a1, char a2, unsigned char *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v6 = 0;
  if (!a2)
  {
    uint64_t v6 = 5;
    if (a4 >= 5)
    {
      __memcpy_chk();
      a3 += 5;
    }
  }
  unint64_t v7 = v6 + 88;
  if (v7 <= a4)
  {
    *a3 = BYTE1(*(_DWORD *)(a1 + 4));
    a3[1] = *(unsigned char *)(a1 + 4);
    a3[2] = *(unsigned char *)(a1 + 8);
    a3[3] = *(unsigned char *)(a1 + 16);
    __memcpy_chk();
    __memcpy_chk();
    unint64_t v10 = a3 + 84;
    *unint64_t v10 = HIBYTE(*(_DWORD *)(a1 + 104));
    v10[1] = BYTE2(*(_DWORD *)(a1 + 104));
    v10[2] = BYTE1(*(_DWORD *)(a1 + 104));
    v10[3] = *(unsigned char *)(a1 + 104);
    a3 = v10 + 4;
  }
  unint64_t v8 = v7 + 1;
  if (v8 <= a4) {
    *a3 = *(unsigned char *)a1;
  }
  *a5 = v8;
  if (v8 <= a4) {
    return 0;
  }
  else {
    return -27136;
  }
}

uint64_t mbedtls_ssl_session_load(void *a1, unsigned __int8 *a2, unint64_t a3)
{
  unsigned int v4 = ssl_session_load((uint64_t)a1, 0, a2, a3);
  if (v4) {
    mbedtls_ssl_session_free(a1);
  }
  return v4;
}

uint64_t ssl_session_load(uint64_t a1, char a2, unsigned __int8 *a3, unint64_t a4)
{
  __s1 = a3;
  unint64_t v5 = &a3[a4];
  if (!a2)
  {
    if (a4 < 5) {
      return -28928;
    }
    if (memcmp(a3, &ssl_serialized_session_header, 5uLL)) {
      return -24320;
    }
    __s1 += 5;
  }
  if ((unint64_t)(v5 - __s1) >= 0x58)
  {
    *(_DWORD *)(a1 + 4) = __s1[1] | (*__s1 << 8);
    *(_DWORD *)(a1 + 8) = __s1[2];
    *(void *)(a1 + 16) = __s1[3];
    __memcpy_chk();
    __memcpy_chk();
    __s1b = (unsigned int *)(__s1 + 84);
    *(_DWORD *)(a1 + 104) = _byteswap_ulong(*__s1b);
    __s1a = (unsigned __int8 *)(__s1b + 1);
    if (v5 == __s1a)
    {
      return -28928;
    }
    else
    {
      *(unsigned char *)a1 = *__s1a;
      if (__s1a + 1 == v5) {
        return 0;
      }
      else {
        return -28928;
      }
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_handshake_step(uint64_t a1)
{
  unsigned int v2 = -28800;
  if (a1 && *(void *)a1)
  {
    if (!*(unsigned char *)(*(void *)a1 + 4)) {
      unsigned int v2 = mbedtls_ssl_handshake_client_step(a1);
    }
    if (*(unsigned char *)(*(void *)a1 + 4) == 1) {
      return mbedtls_ssl_handshake_server_step(a1);
    }
    return v2;
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_handshake(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1 && *(void *)a1)
  {
    if (*(unsigned char *)(*(void *)a1 + 5) != 1 || *(void *)(a1 + 136) && *(void *)(a1 + 144))
    {
      do
      {
        if (*(_DWORD *)(a1 + 8) == 16) {
          break;
        }
        unsigned int v2 = mbedtls_ssl_handshake_step(a1);
      }
      while (!v2);
      return v2;
    }
    else
    {
      return -28928;
    }
  }
  else
  {
    return -28928;
  }
}

void **mbedtls_ssl_free(void **result)
{
  unsigned int v1 = result;
  if (result)
  {
    if (result[36])
    {
      mbedtls_platform_zeroize(result[36], 0x32DuLL);
      mbedtls_free();
      v1[36] = 0;
    }
    if (v1[19])
    {
      mbedtls_platform_zeroize(v1[19], 0x32DuLL);
      mbedtls_free();
      v1[19] = 0;
    }
    if (v1[14])
    {
      mbedtls_ssl_transform_free((char *)v1[14]);
      mbedtls_free();
    }
    if (v1[11])
    {
      mbedtls_ssl_handshake_free(v1);
      mbedtls_ssl_transform_free((char *)v1[15]);
      mbedtls_ssl_session_free(v1[10]);
      mbedtls_free();
      mbedtls_free();
      mbedtls_free();
    }
    if (v1[9])
    {
      mbedtls_ssl_session_free(v1[9]);
      mbedtls_free();
    }
    mbedtls_free();
    return (void **)mbedtls_platform_zeroize(v1, 0x190uLL);
  }
  return result;
}

uint64_t mbedtls_ssl_config_init()
{
  return __memset_chk();
}

uint64_t mbedtls_ssl_config_defaults(uint64_t a1, int a2, int a3, int a4)
{
  mbedtls_ssl_conf_endpoint(a1, a2);
  mbedtls_ssl_conf_transport(a1, a3);
  if (!a2) {
    *(unsigned char *)(a1 + 6) = 2;
  }
  *(void *)(a1 + 112) = ssl_cookie_write_dummy;
  *(void *)(a1 + 120) = ssl_cookie_check_dummy;
  *(unsigned char *)(a1 + 9) = 1;
  *(unsigned char *)(a1 + 10) = 1;
  *(_DWORD *)(a1 + 16) = 1000;
  *(_DWORD *)(a1 + 20) = 60000;
  if (a4 == 2)
  {
    *(unsigned char *)(a1 + 2) = 3;
    *(unsigned char *)(a1 + 3) = 3;
    *(unsigned char *)a1 = 3;
    *(unsigned char *)(a1 + 1) = 3;
    *(void *)(a1 + 48) = &ssl_preset_suiteb_ciphersuites;
    *(void *)(a1 + 40) = &ssl_preset_suiteb_ciphersuites;
    *(void *)(a1 + 32) = &ssl_preset_suiteb_ciphersuites;
    *(void *)(a1 + 24) = &ssl_preset_suiteb_ciphersuites;
    *(void *)(a1 + 160) = &ssl_preset_suiteb_curves;
  }
  else
  {
    *(unsigned char *)(a1 + 2) = 3;
    *(unsigned char *)(a1 + 3) = 3;
    *(unsigned char *)a1 = 3;
    *(unsigned char *)(a1 + 1) = 3;
    if (a3 == 1) {
      *(unsigned char *)(a1 + 3) = 2;
    }
    unsigned int v4 = mbedtls_ssl_list_ciphersuites();
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 160) = mbedtls_ecp_grp_id_list();
  }
  return 0;
}

uint64_t ssl_cookie_write_dummy()
{
  return 4294938496;
}

uint64_t ssl_cookie_check_dummy()
{
  return 4294938496;
}

void *mbedtls_ssl_config_free(void *a1)
{
  return mbedtls_platform_zeroize(a1, 0xA8uLL);
}

uint64_t mbedtls_ssl_md_alg_from_hash(char a1)
{
  if (a1 == 3)
  {
    return 5;
  }
  else if (a1 == 4)
  {
    return 6;
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_hash_from_md_alg(int a1)
{
  if (a1 == 5)
  {
    return 3;
  }
  else if (a1 == 6)
  {
    return 4;
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_check_curve(uint64_t a1, int a2)
{
  if (*(void *)(*(void *)a1 + 160))
  {
    for (unsigned __int8 i = *(_DWORD **)(*(void *)a1 + 160); *i; ++i)
    {
      if (*i == a2) {
        return 0;
      }
    }
    return -1;
  }
  else
  {
    return -1;
  }
}

uint64_t mbedtls_ssl_set_calc_verify_md(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) == 3)
  {
    if (a2 == 4)
    {
      *(void *)(*(void *)(a1 + 88) + 32) = ssl_calc_verify_tls_sha256;
      return 0;
    }
    else
    {
      return -26112;
    }
  }
  else
  {
    return -26112;
  }
}

void *ssl_calc_verify_tls_sha256(uint64_t a1, unsigned char *a2, void *a3)
{
  memset(__b, 0, sizeof(__b));
  mbedtls_sha256_init();
  mbedtls_sha256_clone(__b, (const void *)(*(void *)(a1 + 88) + 988));
  mbedtls_sha256_finish_ret((uint64_t)__b, a2);
  *a3 = 32;
  return mbedtls_sha256_free(__b);
}

uint64_t mbedtls_ssl_get_key_exchange_md_tls1_2(uint64_t a1, unsigned char *a2, void *a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  uint64_t v13 = a3;
  uint64_t v12 = a4;
  unint64_t v11 = a5;
  int v10 = a6;
  unsigned int v9 = 0;
  memset(v8, 0, sizeof(v8));
  unint64_t v7 = mbedtls_md_info_from_type(a6);
  *uint64_t v13 = mbedtls_md_get_size((uint64_t)v7);
  mbedtls_md_init();
  unsigned int v9 = mbedtls_md_setup((uint64_t)v8, (uint64_t)v7, 0);
  if (!v9)
  {
    unsigned int v9 = mbedtls_md_starts(v8);
    if (!v9)
    {
      unsigned int v9 = mbedtls_md_update(v8, *(void *)(v15 + 88) + 1096, 0x40uLL);
      if (!v9)
      {
        unsigned int v9 = mbedtls_md_update(v8, v12, v11);
        if (!v9) {
          unsigned int v9 = mbedtls_md_finish((uint64_t *)v8, v14);
        }
      }
    }
  }
  mbedtls_md_free((void **)v8);
  if (v9) {
    mbedtls_ssl_send_alert_message(v15, 2, 80);
  }
  return v9;
}

uint64_t tls_prf_generic(int a1, unsigned char *a2, unint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int v27 = a1;
  unint64_t v26 = a2;
  unint64_t v25 = a3;
  unint64_t v24 = a4;
  uint64_t v23 = a5;
  uint64_t v22 = a6;
  uint64_t v21 = a7;
  unint64_t v20 = a8;
  size_t v19 = 0;
  unint64_t i = 0;
  unint64_t j = 0;
  unint64_t v16 = 0;
  unint64_t size = 0;
  uint64_t v14 = 0;
  size_t v13 = 0;
  memset(v11, 0, sizeof(v11));
  mbedtls_md_init();
  uint64_t v12 = mbedtls_md_info_from_type(v27);
  if (v12)
  {
    unint64_t size = mbedtls_md_get_size((uint64_t)v12);
    size_t v13 = size + strlen(v24) + v22;
    uint64_t v14 = (unsigned char *)mbedtls_calloc();
    if (v14)
    {
      size_t v19 = strlen(v24);
      __memcpy_chk();
      __memcpy_chk();
      v19 += v22;
      unsigned int v10 = mbedtls_md_setup((uint64_t)v11, (uint64_t)v12, 1);
      if (!v10)
      {
        unsigned int v10 = mbedtls_md_hmac_starts((uint64_t)v11, v26, v25);
        if (!v10)
        {
          unsigned int v10 = mbedtls_md_hmac_update((uint64_t)v11, (uint64_t)&v14[size], v19);
          if (!v10)
          {
            unsigned int v10 = mbedtls_md_hmac_finish((uint64_t *)v11, v14);
            if (!v10)
            {
              for (unint64_t i = 0; i < v20; i += size)
              {
                unsigned int v10 = mbedtls_md_hmac_reset((uint64_t)v11);
                if (v10) {
                  break;
                }
                unsigned int v10 = mbedtls_md_hmac_update((uint64_t)v11, (uint64_t)v14, size + v19);
                if (v10) {
                  break;
                }
                unsigned int v10 = mbedtls_md_hmac_finish((uint64_t *)v11, v29);
                if (v10) {
                  break;
                }
                unsigned int v10 = mbedtls_md_hmac_reset((uint64_t)v11);
                if (v10) {
                  break;
                }
                unsigned int v10 = mbedtls_md_hmac_update((uint64_t)v11, (uint64_t)v14, size);
                if (v10) {
                  break;
                }
                unsigned int v10 = mbedtls_md_hmac_finish((uint64_t *)v11, v14);
                if (v10) {
                  break;
                }
                if (i + size <= v20) {
                  unint64_t v9 = size;
                }
                else {
                  unint64_t v9 = v20 % size;
                }
                unint64_t v16 = v9;
                for (unint64_t j = 0; j < v16; ++j)
                  *(unsigned char *)(v21 + i + j) = v29[j];
              }
            }
          }
        }
      }
    }
    else
    {
      unsigned int v10 = -32512;
    }
    mbedtls_md_free(v11);
    mbedtls_platform_zeroize(v14, v13);
    mbedtls_platform_zeroize(v29, 0x20uLL);
    mbedtls_free();
    return v10;
  }
  else
  {
    return -27648;
  }
}

void *ssl_calc_finished_tls_sha256(void *a1, uint64_t a2, int a3)
{
  memset(__b, 0, sizeof(__b));
  uint64_t v5 = a1[10];
  if (!v5) {
    uint64_t v5 = a1[9];
  }
  unint64_t v3 = "client finished";
  if (a3) {
    unint64_t v3 = "server finished";
  }
  uint64_t v6 = v3;
  mbedtls_sha256_init();
  mbedtls_sha256_clone(__b, (const void *)(a1[11] + 988));
  mbedtls_sha256_finish_ret((uint64_t)__b, v11);
  mbedtls_sha256_free(__b);
  (*(void (**)(uint64_t, uint64_t, const char *, unsigned char *, uint64_t, uint64_t, uint64_t))(a1[11] + 48))(v5 + 56, 48, v6, v11, 32, a2, 12);
  return mbedtls_platform_zeroize(v11, 0x20uLL);
}

uint64_t tls_prf_get_type(uint64_t (*a1)(unsigned char *a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7))
{
  if (a1 == tls_prf_sha256) {
    return 4;
  }
  else {
    return 0;
  }
}

uint64_t ssl_handshake_params_init(uint64_t a1)
{
  __memset_chk();
  mbedtls_sha256_init();
  mbedtls_sha256_starts_ret((_DWORD *)(a1 + 988), 0);
  *(void *)(a1 + 24) = ssl_update_checksum_start;
  uint64_t result = mbedtls_ecjpake_init(a1 + 56);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 760) = 0;
  return result;
}

uint64_t ssl_update_checksum_start(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_sha256_update_ret((_DWORD *)(*(void *)(a1 + 88) + 988), a2, a3);
}

__n128 *ot::Cli::Interpreter::Interpreter(__n128 *this, ot::Instance *a2, int (*a3)(void *, const char *, char *), void *a4)
{
  ot::Cli::OutputImplementer::OutputImplementer(this, a3, a4);
  ot::Cli::Output::Output((__n128 *)this[1].n128_u64, (uint64_t)a2, (uint64_t)this);
  this[3].n128_u8[8] = 0;
  ot::TimerMilliContext::TimerMilliContext((ot::TimerMilliContext *)&this[4], a2, (void (*)(ot::Timer *))ot::Cli::Interpreter::HandleTimer, this);
  ot::Cli::Dataset::Dataset((__n128 *)this[6].n128_u64, (uint64_t)a2, (uint64_t)this);
  ot::Cli::NetworkData::NetworkData((uint64_t)&this[7], (uint64_t)a2, (uint64_t)this);
  ot::Cli::UdpExample::UdpExample((uint64_t)&this[8].n128_i64[1], (uint64_t)a2, (uint64_t)this);
  ot::Cli::Coap::Coap((uint64_t)&this[14].n128_i64[1], (uint64_t)a2, (uint64_t)this);
  ot::Cli::Dataset::Dataset((__n128 *)this[22].n128_u64, (uint64_t)a2, (uint64_t)this);
  ot::Cli::Dataset::Dataset((__n128 *)this[23].n128_u64, (uint64_t)a2, (uint64_t)this);
  ot::Cli::Dataset::Dataset((__n128 *)this[24].n128_u64, (uint64_t)a2, (uint64_t)this);
  ot::Cli::Vendor::Vendor(this + 25, this + 1);
  this[27].n128_u8[14] = 0;
  this[27].n128_u8[15] &= ~2u;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)&this[1]);
  otThreadSetDiscoveryRequestCallback(InstancePtr, (uint64_t)ot::Cli::Interpreter::HandleDiscoveryRequest, (uint64_t)this);
  this[2].n128_u64[0] = 0;
  this[2].n128_u64[1] = 0;
  this[3].n128_u64[0] = 0;
  ot::Cli::Interpreter::ClearLinkMetricsEnhAckProbingIe((uint64_t)this);
  ot::Cli::Interpreter::OutputPrompt((ot::Cli::OutputImplementer **)this);
  return this;
}

{
  ot::Cli::Interpreter::Interpreter(this, a2, a3, a4);
  return this;
}

void *ot::Cli::Output::Output(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

void ot::Cli::Interpreter::HandleTimer(ot::Cli::Interpreter *this, ot::Timer *a2)
{
  Context = (ot::Cli::Interpreter *)ot::TimerMilliContext::GetContext(this);
  ot::Cli::Interpreter::HandleTimer(Context);
}

ot::TimerMilliContext *ot::TimerMilliContext::TimerMilliContext(ot::TimerMilliContext *this, ot::Instance *a2, void (*a3)(ot::Timer *), void *a4)
{
  return this;
}

{
  ot::TimerMilliContext *result;

  ot::TimerMilli::TimerMilli(this, a2, a3);
  uint64_t result = this;
  *((void *)this + 3) = a4;
  return result;
}

void *ot::Cli::Dataset::Dataset(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  ot::Cli::Output::Output(a1, a2, a3);
  return a1;
}

__n128 *ot::Cli::Vendor::Vendor(__n128 *this, __n128 *a2)
{
  return this;
}

void ot::Cli::Interpreter::HandleDiscoveryRequest()
{
}

uint64_t ot::Cli::Interpreter::ClearLinkMetricsEnhAckProbingIe(uint64_t this)
{
  *(_WORD *)(this + 444) = 0;
  *(void *)(this + 436) = 0;
  *(unsigned char *)(this + 424) &= ~1u;
  *(unsigned char *)(this + 424) &= ~2u;
  *(unsigned char *)(this + 424) &= ~4u;
  *(unsigned char *)(this + 424) &= ~8u;
  *(_DWORD *)(this + 428) = 0;
  *(unsigned char *)(this + 432) = 0;
  *(unsigned char *)(this + 433) = 0;
  *(unsigned char *)(this + 434) = 0;
  return this;
}

void ot::Cli::Interpreter::OutputPrompt(ot::Cli::OutputImplementer **this)
{
}

void ot::Cli::Interpreter::OutputResult(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(a1 + 56) & 1) == 0) {
    __assert_rtn("OutputResult", "cli.cpp", 190, "mCommandIsPending");
  }
  if (a2 != 36)
  {
    if (a2)
    {
      unsigned int v2 = otThreadErrorToString(a2);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Error %u: %s", a2, v2);
    }
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Done");
    *(unsigned char *)(a1 + 56) = 0;
    ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 64));
    ot::Cli::Interpreter::OutputPrompt((ot::Cli::OutputImplementer **)a1);
  }
}

unsigned char *ot::Cli::Interpreter::LinkModeToString(unsigned char *a1, unsigned char *a2)
{
  uint64_t v6 = a2;
  if (*a1)
  {
    uint64_t v6 = a2 + 1;
    *a2 = 114;
  }
  if ((*a1 & 2) != 0)
  {
    unsigned int v2 = v6++;
    *unsigned int v2 = 100;
  }
  if ((*a1 & 4) != 0)
  {
    unint64_t v3 = v6++;
    *unint64_t v3 = 110;
  }
  if (v6 == a2)
  {
    unsigned int v4 = v6++;
    *unsigned int v4 = 45;
  }
  *uint64_t v6 = 0;
  return a2;
}

uint64_t ot::Cli::Interpreter::Process<1714215925ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  memset(__b, 0, sizeof(__b));
  ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray(a2, (ot::Utils::CmdLineParser::Arg *)__b, v2);
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  unsigned __int8 ArgsLength = ot::Utils::CmdLineParser::Arg::GetArgsLength(a2, v3);
  unsigned int v8 = otDiagProcessCmd(InstancePtr, ArgsLength, __b, v10, 0x1F4uLL);
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%s", v10);
  return v8;
}

uint64_t ot::Cli::Interpreter::Process<30363746172521848ull>(uint64_t a1, const char **a2)
{
  unsigned int v5 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    VersionString = otGetVersionString();
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", VersionString);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "api"))
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%u", 338);
  }
  else
  {
    return 35;
  }
  return v5;
}

void ot::Cli::Interpreter::Process<492159295119ull>(uint64_t a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  otInstanceReset(InstancePtr);
}

uint64_t sub_10029E60C()
{
  return 0;
}

void ot::Cli::Interpreter::ProcessLine(ot::Cli::Interpreter *this, ot::Utils::CmdLineParser *a2)
{
  int v4 = 0;
  if (!a2) {
    __assert_rtn("ProcessLine", "cli.cpp", 295, "aBuf != nullptr");
  }
  if (*((unsigned char *)this + 56))
  {
    ot::Utils::CmdLineParser::Arg::Clear(v6);
  }
  else
  {
    *((unsigned char *)this + 56) = 1;
    if ((unsigned __int16)ot::StringLength(a2, (const char *)0x280) <= 0x27Fu)
    {
      int v4 = ot::Utils::CmdLineParser::ParseCmd(a2, v6, (ot::Utils::CmdLineParser::Arg *)0x20);
      if (!v4)
      {
        if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v6))
        {
          *((unsigned char *)this + 56) = 0;
        }
        else
        {
          ot::Cli::Output::LogInput((ot::Cli::Interpreter *)((char *)this + 16), (const ot::Utils::CmdLineParser::Arg *)v6);
          uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Interpreter *)((char *)this + 16));
          if ((otDiagIsEnabled(InstancePtr) & 1) != 0
            && ot::Utils::CmdLineParser::Arg::operator!=((const char **)v6, "diag")
            && ot::Utils::CmdLineParser::Arg::operator!=((const char **)v6, "factoryreset"))
          {
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this + 2, "under diagnostics mode, execute 'diag stop' before running any other commands.");
            int v4 = 13;
          }
          else
          {
            int v4 = ot::Cli::Interpreter::ProcessCommand((ot::Cli::OutputImplementer **)this, (const char **)v6);
          }
        }
      }
    }
    else
    {
      int v4 = 6;
    }
  }
  if (!v4 && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v6))
  {
    if ((*((unsigned char *)this + 56) & 1) == 0) {
      ot::Cli::Interpreter::OutputPrompt((ot::Cli::OutputImplementer **)this);
    }
  }
  else
  {
    ot::Cli::Interpreter::OutputResult((uint64_t)this, v4);
  }
}

void *ot::Utils::CmdLineParser::Arg::Clear(void *this)
{
  *this = 0;
  return this;
}

{
  return ot::Utils::CmdLineParser::Arg::Clear(this);
}

BOOL ot::Utils::CmdLineParser::Arg::operator!=(const char **a1, const char *a2)
{
  return !ot::Utils::CmdLineParser::Arg::operator==(a1, a2);
}

{
  return ot::Utils::CmdLineParser::Arg::operator!=(a1, a2);
}

uint64_t ot::Cli::Interpreter::ProcessCommand(ot::Cli::OutputImplementer **this, const char **a2)
{
  uint64_t v18 = this;
  unsigned int v17 = a2;
  unsigned int v16 = 0;
  uint64_t v15 = 0;
  uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)a2);
  uint64_t v15 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>,(unsigned short)116>((ot::BinarySearch *)&CString, (char *)&ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
  if (v15)
  {
    unint64_t v9 = (uint64_t (*)(void *, const char **))*((void *)v15 + 1);
    uint64_t v6 = *((void *)v15 + 2);
    unsigned int v10 = (ot::Cli::OutputImplementer **)((char *)this + (v6 >> 1));
    if (v6) {
      return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v17 + 1);
    }
    else {
      return v9(v10, v17 + 1);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v17, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::Interpreter,(unsigned short)116>((uint64_t)(this + 2), (const char **)&ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg *)::kCommands);
    for (unint64_t i = (unsigned __int8 *)(this + 4); i != (unsigned __int8 *)(this + 7); i += 24)
    {
      for (unsigned __int8 j = 0; j < (int)i[8]; ++j)
        ot::Cli::Output::OutputLine(this + 2, "%s", *(const char **)(*(void *)i + 16 * j));
    }
  }
  else
  {
    return ot::Cli::Interpreter::ProcessUserCommands((ot::Cli::Interpreter *)this, (ot::Utils::CmdLineParser::Arg *)v17);
  }
  return v16;
}

uint64_t ot::Cli::Interpreter::ProcessUserCommands(ot::Cli::Interpreter *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v11 = 35;
  unsigned int v10 = (char *)this + 32;
  unint64_t v9 = (char *)this + 56;
  while (v10 != v9)
  {
    for (unsigned __int8 i = 0; i < (int)v10[8]; ++i)
    {
      if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, *(const char **)(*(void *)v10 + 16 * i)))
      {
        memset(__b, 0, sizeof(__b));
        ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray(a2, (ot::Utils::CmdLineParser::Arg *)__b, v2);
        uint64_t v6 = *(uint64_t (**)(uint64_t, void, unsigned char *))(*(void *)v10 + 16 * i + 8);
        uint64_t v7 = *((void *)v10 + 2);
        char ArgsLength = ot::Utils::CmdLineParser::Arg::GetArgsLength(a2, v3);
        unsigned int v11 = v6(v7, (ArgsLength - 1), &__b[8]);
        break;
      }
    }
    v10 += 24;
  }
  return v11;
}

uint64_t ot::Cli::Interpreter::SetUserCommands(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unsigned int v6 = 1;
  for (uint64_t i = a1 + 32; i != a1 + 56; i += 24)
  {
    if (!*(void *)i)
    {
      *(void *)uint64_t i = a2;
      *(unsigned char *)(i + 8) = a3;
      *(void *)(i + 16) = a4;
      return 0;
    }
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::ParseEnableOrDisable(const char **this, const ot::Utils::CmdLineParser::Arg *a2, BOOL *a3)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(this, "enable"))
  {
    *(unsigned char *)a2 = 1;
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(this, "disable"))
  {
    *(unsigned char *)a2 = 0;
  }
  else
  {
    return 35;
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg *a1, char *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a1))
  {
    return 7;
  }
  else
  {
    uint64_t CString = (char *)ot::Utils::CmdLineParser::Arg::GetCString(a1);
    unsigned int v6 = strstr[abi:nn180100](CString, "/");
    if (v6)
    {
      unsigned int v7 = ot::Utils::CmdLineParser::ParseAsUint8((ot::Utils::CmdLineParser *)(v6 + 1), a2 + 8, v3);
      if (!v7)
      {
        if (a2[8] && a2[8] <= 0x40u)
        {
          *unsigned int v6 = 0;
          return ot::Utils::CmdLineParser::Arg::ParseAsUint64((ot::Utils::CmdLineParser **)a1, a2, v4);
        }
        else
        {
          return 7;
        }
      }
    }
    else
    {
      return 23;
    }
  }
  return v7;
}

uint64_t ot::Utils::CmdLineParser::Arg::GetCString(ot::Utils::CmdLineParser::Arg *this)
{
  return *(void *)this;
}

{
  return *(void *)this;
}

{
  return ot::Utils::CmdLineParser::Arg::GetCString(this);
}

{
  return ot::Utils::CmdLineParser::Arg::GetCString(this);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsUint64(ot::Utils::CmdLineParser **this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseAsUint64(*this, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint64(this, a2, a3);
}

uint64_t ot::Cli::Interpreter::ParsePingInterval(ot::Cli::Interpreter *this, const ot::Utils::CmdLineParser::Arg *a2, unsigned int *a3)
{
  unsigned int v6 = 0;
  uint64_t CString = (unsigned char *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
  unsigned int v4 = 1000;
  *a3 = 0;
  while (*CString)
  {
    if ((char)*CString < 48 || (char)*CString > 57)
    {
      if (*CString != 46) {
        return 7;
      }
      if (v4 != 1000) {
        return 7;
      }
      unsigned int v4 = 100;
    }
    else
    {
      if (v4 == 1000) {
        *a3 *= 10;
      }
      *a3 += ((char)*CString - 48) * v4;
      if (v4 != 1000) {
        v4 /= 0xAu;
      }
    }
    ++CString;
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::ParsePreference(const char **a1, _DWORD *a2)
{
  unsigned int v3 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a1, "high"))
  {
    *a2 = 1;
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a1, "med"))
  {
    *a2 = 0;
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a1, "low"))
  {
    *a2 = -1;
  }
  else
  {
    return 7;
  }
  return v3;
}

const char *ot::Cli::Interpreter::PreferenceToString(ot::Cli::Interpreter *this)
{
  uint64_t v2 = "";
  switch(this)
  {
    case 0xFFFFFFFF:
      return "low";
    case 0:
      return "med";
    case 1:
      return "high";
  }
  return v2;
}

uint64_t ot::Cli::Interpreter::ParseToIp6Address(uint64_t a1, const char **a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v10 = a1;
  unint64_t v9 = a2;
  uint64_t v8 = a3;
  unsigned int v7 = a4;
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v6 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v9, v8);
    *unsigned int v7 = 0;
    if (v6)
    {
      if (!ot::Utils::CmdLineParser::Arg::ParseAsIp4Address(v9, (uint64_t)v5))
      {
        unsigned int v6 = otNat64SynthesizeIp6Address(v10, (uint64_t)v5, v8);
        if (!v6) {
          *unsigned int v7 = 1;
        }
      }
    }
  }
  return v6;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(const char **a1, uint64_t a2)
{
  return ot::Utils::CmdLineParser::ParseAsIp6Address(*a1, a2);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(a1, a2);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsIp4Address(const char **a1, uint64_t a2)
{
  return ot::Utils::CmdLineParser::ParseAsIp4Address(*a1, a2);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsIp4Address(a1, a2);
}

uint64_t ot::Cli::Interpreter::Process<33391368136198004ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::History::Process((ot::Cli::History *)(a1 + 384), a2);
}

uint64_t ot::Cli::Interpreter::Process<24833ull>(uint64_t a1, const char **a2)
{
  unsigned int v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "port"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 UdpPort = otBorderAgentGetUdpPort(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%hu", UdpPort);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "state"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 State = otBorderAgentGetState(v4);
    unsigned int v6 = (const char *)ot::Cli::Output::Stringify<otBorderAgentState,(unsigned short)2>(State, (uint64_t)ot::Cli::Interpreter::Process<24833ull>(ot::Utils::CmdLineParser::Arg *)::kStateStrings, (uint64_t)"unknown");
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", v6);
  }
  else
  {
    return 35;
  }
  return v9;
}

uint64_t ot::Cli::Output::Stringify<otBorderAgentState,(unsigned short)2>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 2u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otBorderAgentState,(unsigned short)2>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<7437938ull>(ot::Cli::OutputImplementer **a1, const char **a2)
{
  uint64_t v12 = a1;
  unsigned int v11 = a2;
  int v10 = 35;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(v11, "mgmt"))
    {
      if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v11 + 1))) {
        return 35;
      }
      if (ot::Utils::CmdLineParser::Arg::operator==(v11 + 1, "mlr")) {
        return ot::Cli::Interpreter::ProcessBackboneRouterMgmtMlr(a1, v11 + 2);
      }
    }
    return ot::Cli::Interpreter::ProcessBackboneRouterLocal(a1, v11, v4);
  }
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 2));
  if (otBackboneRouterGetPrimary(InstancePtr, (uint64_t)v7))
  {
    ot::Cli::Output::OutputLine(a1 + 2, "BBR Primary: None");
  }
  else
  {
    ot::Cli::Output::OutputLine(a1 + 2, "BBR Primary:");
    ot::Cli::Output::OutputLine(a1 + 2, "server16: 0x%04X", v7[0]);
    ot::Cli::Output::OutputLine(a1 + 2, "seqno:    %u", v9);
    ot::Cli::Output::OutputLine(a1 + 2, "delay:    %u secs", v7[1]);
    uint64_t v3 = ot::ToUlong(v8);
    ot::Cli::Output::OutputLine(a1 + 2, "timeout:  %lu secs", v3);
  }
  return 0;
}

uint64_t ot::Cli::Interpreter::ProcessBackboneRouterMgmtMlr(ot::Cli::OutputImplementer **this, const char **a2)
{
  unsigned int v4 = 35;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "listener")
    && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
  {
    ot::Cli::Interpreter::PrintMulticastListenersTable(this);
    return 0;
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::ProcessBackboneRouterLocal(ot::Cli::OutputImplementer **this, const char **a2, BOOL *a3)
{
  unint64_t v25 = this;
  unint64_t v24 = a2;
  unsigned int v23 = 0;
  char v18 = 0;
  if (ot::Cli::Interpreter::ParseEnableOrDisable(a2, (const ot::Utils::CmdLineParser::Arg *)&v18, a3))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(v24, "jitter"))
    {
      return ot::Cli::Interpreter::ProcessGetSet<unsigned char>((uint64_t)this, (ot::Utils::CmdLineParser::Arg *)(v24 + 1), otBackboneRouterGetRegistrationJitter, (unsigned __int8 *)otBackboneRouterSetRegistrationJitter);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v24, "register"))
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      return otBackboneRouterRegister(InstancePtr);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v24, "state"))
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      unsigned __int16 State = otBackboneRouterGetState(v5);
      unsigned int v7 = (const char *)ot::Cli::Output::Stringify<otBackboneRouterState,(unsigned short)3>(State, (uint64_t)ot::Cli::Interpreter::ProcessBackboneRouterLocal(ot::Utils::CmdLineParser::Arg *)::kStateStrings, (uint64_t)"unknown");
      ot::Cli::Output::OutputLine(this + 2, "%s", v7);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v24, "config"))
    {
      uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      otBackboneRouterGetConfig(v8, (uint64_t)v19);
      if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v24 + 1)))
      {
        ot::Cli::Output::OutputLine(this + 2, "seqno:    %u", v22[0]);
        ot::Cli::Output::OutputLine(this + 2, "delay:    %u secs", v20);
        uint64_t v9 = ot::ToUlong(v21);
        ot::Cli::Output::OutputLine(this + 2, "timeout:  %lu secs", v9);
      }
      else
      {
        for (uint64_t i = v24 + 1;
              !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)i);
              uint64_t i = (const char **)(v17 + 1))
        {
          if (ot::Utils::CmdLineParser::Arg::operator==(i, "seqno"))
          {
            unsigned int v17 = (ot::Utils::CmdLineParser **)(i + 1);
            unsigned int v23 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v17, v22, v10);
            if (v23) {
              return v23;
            }
          }
          else if (ot::Utils::CmdLineParser::Arg::operator==(i, "delay"))
          {
            unsigned int v17 = (ot::Utils::CmdLineParser **)(i + 1);
            unsigned int v23 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v17, (char *)&v20, v11);
            if (v23) {
              return v23;
            }
          }
          else
          {
            if (!ot::Utils::CmdLineParser::Arg::operator==(i, "timeout")) {
              return 7;
            }
            unsigned int v17 = (ot::Utils::CmdLineParser **)(i + 1);
            unsigned int v23 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v17, (char *)&v21, v12);
            if (v23) {
              return v23;
            }
          }
        }
        uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
        return otBackboneRouterSetConfig(v13, (uint64_t)v19);
      }
    }
    else
    {
      return 35;
    }
  }
  else
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    otBackboneRouterSetEnabled(v3, v18 & 1);
  }
  return v23;
}

uint64_t ot::Cli::Interpreter::PrintMulticastListenersTable(ot::Cli::OutputImplementer **this)
{
  uint64_t v8 = this;
  unsigned __int16 v7 = 0;
  while (1)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    uint64_t result = otBackboneRouterMulticastListenerGetNext(InstancePtr, &v7, (uint64_t)v5);
    if (result) {
      break;
    }
    ot::Cli::Output::OutputIp6Address(this + 2, (uint64_t)v5);
    uint64_t v3 = ot::ToUlong(v6);
    ot::Cli::Output::OutputLine(this + 2, " %lu", v3);
  }
  return result;
}

uint64_t ot::Cli::Interpreter::ProcessGetSet<unsigned char>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t), unsigned __int8 *a4)
{
  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<unsigned char>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  unsigned int v6;

  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<unsigned char>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, a3, a4);
}

{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, a3, a4);
}

uint64_t ot::Cli::Output::Stringify<otBackboneRouterState,(unsigned short)3>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 3u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otBackboneRouterState,(unsigned short)3>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<1562345116032201233ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<char const*>(a1, a2, (uint64_t (*)(uint64_t))otThreadGetDomainName, (unsigned int (*)(uint64_t, uint64_t))otThreadSetDomainName);
}

uint64_t ot::Cli::Interpreter::ProcessGetSet<char const*>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t), unsigned int (*a4)(uint64_t, uint64_t))
{
  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<char const*>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<char const*>(a1, a2, a4);
  }
  return v6;
}

{
  return ot::Cli::Interpreter::ProcessGetSet<char const*>(a1, a2, a3, a4);
}

uint64_t ot::Cli::Interpreter::Process<6337360ull>(uint64_t a1, const char **a2)
{
  uint64_t v11 = a1;
  int v10 = a2;
  unsigned int v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "iid"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      FixedDuaInterfaceIdentifier = (const unsigned __int8 *)otThreadGetFixedDuaInterfaceIdentifier(InstancePtr);
      if (FixedDuaInterfaceIdentifier) {
        ot::Cli::Output::OutputBytesLine<(unsigned char)8>((ot::Cli::OutputImplementer **)(a1 + 16), FixedDuaInterfaceIdentifier);
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v10 + 1, "clear"))
    {
      uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otThreadSetFixedDuaInterfaceIdentifier(v3, 0);
    }
    else
    {
      unsigned int v9 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v10 + 1, v7);
      if (!v9)
      {
        uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        return otThreadSetFixedDuaInterfaceIdentifier(v4, (uint64_t)v7);
      }
    }
  }
  else
  {
    return 35;
  }
  return v9;
}

uint64_t ot::Cli::Output::OutputBytesLine<(unsigned char)8>(ot::Cli::OutputImplementer **a1, const unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputBytesLine(a1, a2, 8u);
}

{
  return ot::Cli::Output::OutputBytesLine<(unsigned char)8>(a1, a2);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>(ot::Utils::CmdLineParser **a1, char *a2)
{
  return ot::Utils::CmdLineParser::Arg::ParseAsHexString(a1, a2, 8u);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>(a1, a2);
}

uint64_t ot::Cli::Interpreter::Process<13711823289570935762ull>(uint64_t a1, const char **a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otMessageGetBufferInfo(InstancePtr, (uint64_t)v11);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "total: %u", v11[0]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "free: %u", v11[1]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "max-used: %u", v11[2]);
    for (uint64_t i = (char **)&ot::Cli::Interpreter::Process<13711823289570935762ull>(ot::Utils::CmdLineParser::Arg *)::kBufferInfoNames;
          i != ot::Cli::Interpreter::Process<424622705244ull>(ot::Utils::CmdLineParser::Arg *)::kChildTableTitles;
          i += 2)
    {
      unsigned int v6 = i[1];
      int v7 = *(unsigned __int16 *)((char *)v11 + (void)*i);
      int v8 = *(unsigned __int16 *)((char *)&v11[1] + (void)*i);
      uint64_t v3 = ot::ToUlong(*(unsigned int *)((char *)&v11[2] + (void)*i));
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s: %u %u %lu", v6, v7, v8, v3);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v13, "reset"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otMessageResetBufferInfo(v4);
  }
  else
  {
    return 7;
  }
  return v12;
}

uint64_t ot::Cli::Interpreter::Process<11512677311266953430ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v22 = a1;
  unsigned int v21 = a2;
  unsigned int CcaEnergyDetectThreshold = 0;
  signed __int8 v19 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int CcaEnergyDetectThreshold = otPlatRadioGetCcaEnergyDetectThreshold(InstancePtr, (uint64_t)&v19, v4, v5, v6, v7, v8, v9);
    if (!CcaEnergyDetectThreshold) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%d dBm", v19);
    }
  }
  else
  {
    unsigned int CcaEnergyDetectThreshold = ot::Utils::CmdLineParser::Arg::ParseAsInt8(v21, &v19, v2);
    if (!CcaEnergyDetectThreshold)
    {
      uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otPlatRadioSetCcaEnergyDetectThreshold(v10, v19, v11, v12, v13, v14, v15, v16);
    }
  }
  return CcaEnergyDetectThreshold;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsInt8(ot::Utils::CmdLineParser **this, signed __int8 *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseAsInt8(*this, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsInt8(this, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<29803101196888419ull>(uint64_t a1, const char **a2)
{
  uint64_t v49 = a1;
  v48 = a2;
  unsigned int v47 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "supported"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t SupportedChannelMask = otPlatRadioGetSupportedChannelMask(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
    uint64_t v11 = ot::ToUlong(SupportedChannelMask);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "0x%lx", v11);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v48, "preferred"))
  {
    uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t PreferredChannelMask = otPlatRadioGetPreferredChannelMask(v12, v13, v14, v15, v16, v17, v18, v19);
    uint64_t v21 = ot::ToUlong(PreferredChannelMask);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "0x%lx", v21);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v48, "manager"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v48 + 1)))
    {
      uint64_t v22 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned __int8 RequestedChannel = otChannelManagerGetRequestedChannel(v22);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "channel: %u", RequestedChannel);
      uint64_t v24 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      char AutoChannelSelectionEnabled = otChannelManagerGetAutoChannelSelectionEnabled(v24);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "auto: %d", AutoChannelSelectionEnabled & 1);
      uint64_t v26 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otChannelManagerGetAutoChannelSelectionEnabled(v26))
      {
        uint64_t v27 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        int SupportedChannels = otChannelManagerGetSupportedChannels(v27);
        ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v46, SupportedChannels);
        uint64_t v29 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        int FavoredChannels = otChannelManagerGetFavoredChannels(v29);
        ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v45, FavoredChannels);
        uint64_t v31 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        unsigned __int16 Delay = otChannelManagerGetDelay(v31);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "delay: %u", Delay);
        uint64_t v33 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        uint64_t AutoChannelSelectionInterval = otChannelManagerGetAutoChannelSelectionInterval(v33);
        uint64_t v35 = ot::ToUlong(AutoChannelSelectionInterval);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "interval: %lu", v35);
        uint64_t v36 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        unsigned __int16 CcaFailureRateThreshold = otChannelManagerGetCcaFailureRateThreshold(v36);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "cca threshold: 0x%04x", CcaFailureRateThreshold);
        ot::Mac::ChannelMask::ToString((ot::Mac::ChannelMask *)v46, (ot::StringWriter *)v51);
        v38 = (const char *)ot::String<(unsigned short)45>::AsCString((uint64_t)v51);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "supported: %s", v38);
        ot::Mac::ChannelMask::ToString((ot::Mac::ChannelMask *)v45, (ot::StringWriter *)v50);
        v39 = (const char *)ot::String<(unsigned short)45>::AsCString((uint64_t)v50);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "favored: %s", v39);
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "change"))
    {
      return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, (ot::Utils::CmdLineParser **)v48 + 2, (unsigned __int8 *)otChannelManagerRequestChannelChange);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "auto"))
    {
      BOOL v44 = 0;
      unsigned int v47 = ot::Utils::CmdLineParser::Arg::ParseAsBool((ot::Utils::CmdLineParser **)v48 + 2, &v44, v40);
      if (!v47)
      {
        uint64_t v41 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        otChannelManagerSetAutoChannelSelectionEnabled(v41);
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "delay"))
    {
      return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, (ot::Utils::CmdLineParser::Arg *)(v48 + 2), otChannelManagerGetDelay, (unsigned __int8 *)otChannelManagerSetDelay);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "interval"))
    {
      return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, (ot::Utils::CmdLineParser **)v48 + 2, (unsigned __int8 *)otChannelManagerSetAutoChannelSelectionInterval);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "supported"))
    {
      return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, (ot::Utils::CmdLineParser **)v48 + 2, (unsigned __int8 *)otChannelManagerSetSupportedChannels);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "favored"))
    {
      return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, (ot::Utils::CmdLineParser **)v48 + 2, (unsigned __int8 *)otChannelManagerSetFavoredChannels);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v48 + 1, "threshold"))
    {
      return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, (ot::Utils::CmdLineParser **)v48 + 2, (unsigned __int8 *)otChannelManagerSetCcaFailureRateThreshold);
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, (ot::Utils::CmdLineParser::Arg *)v48, otLinkGetChannel, (unsigned __int8 *)otLinkSetChannel);
  }
  return v47;
}

ot::Mac::ChannelMask *ot::Mac::ChannelMask::ChannelMask(ot::Mac::ChannelMask *this, int a2)
{
  return this;
}

uint64_t ot::String<(unsigned short)45>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)45>::AsCString(a1);
}

uint64_t ot::Cli::Interpreter::ProcessSet<unsigned char>(uint64_t a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned __int8 v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<unsigned char>(a2, (char *)&v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      ((void (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  uint64_t InstancePtr;
  unsigned __int8 *v5;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  ot::Utils::CmdLineParser **v10;
  uint64_t v11;

  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned __int8 v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<unsigned char>(a2, (char *)&v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return ((unsigned int (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, a2, a3);
}

{
  return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::ProcessGetSet<unsigned short>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t), unsigned __int8 *a4)
{
  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<unsigned short>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  unsigned int v6;

  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<unsigned short>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, a2, a3, a4);
}

{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, a2, a3, a4);
}

uint64_t ot::Cli::Interpreter::ProcessSet<unsigned int>(uint64_t a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<unsigned int>(a2, (char *)&v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return ((unsigned int (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  uint64_t InstancePtr;
  unsigned __int8 *v5;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  ot::Utils::CmdLineParser **v10;
  uint64_t v11;

  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<unsigned int>(a2, (char *)&v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      ((void (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, a2, a3);
}

{
  return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::ProcessSet<unsigned short>(uint64_t a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned __int16 v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<unsigned short>(a2, (char *)&v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      ((void (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  uint64_t InstancePtr;
  unsigned __int8 *v5;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  ot::Utils::CmdLineParser **v10;
  uint64_t v11;

  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned __int16 v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<unsigned short>(a2, (char *)&v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return ((unsigned int (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, a2, a3);
}

{
  return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<424622705244ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v21 = a1;
  unsigned __int16 v20 = a2;
  unsigned int ChildInfoById = 0;
  v18[2] = 0;
  BOOL v2 = ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "table");
  *(_WORD *)uint64_t v18 = v2;
  if (v2 || ot::Utils::CmdLineParser::Arg::operator==((const char **)v20, "list"))
  {
    if (v18[0]) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)14>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<424622705244ull>(ot::Utils::CmdLineParser::Arg *)::kChildTableTitles, ot::Cli::Interpreter::Process<424622705244ull>(ot::Utils::CmdLineParser::Arg *)::kChildTableColumnWidths);
    }
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 MaxAllowedChildren = otThreadGetMaxAllowedChildren(InstancePtr);
    for (unsigned __int16 i = 0; i < (int)MaxAllowedChildren; ++i)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (!otThreadGetChildInfoByIndex(v5, i, (uint64_t)v22) && (v37 & 8) == 0)
      {
        if (v18[0])
        {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %3u ", v26);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| 0x%04x ", v25);
          uint64_t v6 = ot::ToUlong(v23);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %10lu ", v6);
          uint64_t v7 = ot::ToUlong(v24);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %10lu ", v7);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %5u ", v28);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %4u ", v27);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%1d", v37 & 1);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%1d", (v37 & 2) != 0);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%1d", (v37 & 4) != 0);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%3u", v32);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %1d ", (v37 & 0x10) != 0);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %5u ", v30);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %5u ", v31);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| ");
          ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v22);
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), " |");
        }
        else
        {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%u ", v26);
        }
      }
    }
    ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  }
  else
  {
    unsigned int ChildInfoById = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v20, &v18[1], v3);
    if (!ChildInfoById)
    {
      uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int ChildInfoById = otThreadGetChildInfoById(v8, *(unsigned __int16 *)&v18[1], (uint64_t)v22);
      if (!ChildInfoById)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Child ID: %u", v26);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Rloc: %04x", v25);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Ext Addr: ");
        ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(a1 + 16), v22);
        char v17 = v17 & 0xFE | v37 & 1;
        char v17 = v17 & 0xFD | (2 * ((v37 & 2) != 0));
        char v17 = v17 & 0xFB | (4 * ((v37 & 2) != 0));
        uint64_t v9 = ot::Cli::Interpreter::LinkModeToString(&v17, v16);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Mode: %s", v9);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL Synchronized: %d ", (v37 & 0x10) != 0);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Net Data: %u", v27);
        uint64_t v10 = ot::ToUlong(v23);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Timeout: %lu", v10);
        uint64_t v11 = ot::ToUlong(v24);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Age: %lu", v11);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link Quality In: %u", v28);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "RSSI: %d", v29);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Supervision Interval: %d", v31);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL Channel:%d", v33);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL Timeout:%d", v34);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL Period:%d", v35);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL Phase:%d", v36);
      }
    }
  }
  return ChildInfoById;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)14>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 0xEu, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)14>(a1, a2, a3);
}

ot::Cli::OutputImplementer **ot::Cli::Output::OutputExtAddress(ot::Cli::OutputImplementer **a1, const unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputBytes<(unsigned char)8>(a1, a2);
}

{
  return ot::Cli::Output::OutputExtAddress(a1, a2);
}

uint64_t ot::Cli::Output::OutputExtAddressLine(ot::Cli::OutputImplementer **a1, const unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputBytesLine<(unsigned char)8>(a1, a2);
}

{
  return ot::Cli::Output::OutputExtAddressLine(a1, a2);
}

uint64_t ot::Cli::Interpreter::Process<30907139684939619ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  unsigned int v21 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 MaxAllowedChildren = otThreadGetMaxAllowedChildren(InstancePtr);
    for (unsigned __int16 i = 0; i < (int)MaxAllowedChildren; ++i)
    {
      __int16 v18 = 0;
      uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (!otThreadGetChildInfoByIndex(v3, i, (uint64_t)v26) && (v28 & 8) == 0)
      {
        __int16 v18 = 0;
        while (1)
        {
          uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
          if (otThreadGetChildNextIp6Address(v4, i, &v18, &v17)) {
            break;
          }
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%04x: ", v27);
          ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), (uint64_t)&v17);
        }
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v22, "max"))
  {
    return ot::Cli::Interpreter::ProcessGet<unsigned char>(a1, (ot::Utils::CmdLineParser::Arg *)((char *)v22 + 8), otThreadGetMaxChildIpAddresses);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v22, "extaddr"))
  {
    int v16 = 0;
    char v15 = 0;
    uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 v14 = otThreadGetMaxAllowedChildren(v5);
    unsigned int v21 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v22 + 1, v25);
    if (!v21)
    {
      for (unsigned __int16 j = 0; j < (int)v14; ++j)
      {
        __int16 v12 = 0;
        uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        if (!otThreadGetChildInfoByIndex(v6, j, (uint64_t)v24) && (v24[52] & 8) == 0)
        {
          int v16 = 0;
          for (int k = 0; k < 8; ++k)
          {
            if (v25[k] == v24[k]) {
              ++v16;
            }
          }
          if (v16 == 8)
          {
            char v15 = 1;
            __int16 v12 = 0;
            while (1)
            {
              uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
              if (otThreadGetChildNextIp6Address(v7, j, &v12, &v11)) {
                break;
              }
              ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), (uint64_t)&v11);
            }
          }
        }
      }
      if ((v15 & 1) == 0) {
        return 7;
      }
    }
  }
  else
  {
    return 35;
  }
  return v21;
}

uint64_t ot::Cli::Interpreter::ProcessGet<unsigned char>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t))
{
  unsigned int v8 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t v6 = (char *)ot::Cli::Interpreter::FormatStringFor<unsigned char>();
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 v4 = a3(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), v6, v4);
  }
  else
  {
    return 7;
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessGet<unsigned char>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<8440012427400342744ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, a2, otThreadGetMaxAllowedChildren, (unsigned __int8 *)otThreadSetMaxAllowedChildren);
}

uint64_t ot::Cli::Interpreter::Process<8059602322220575993ull>(uint64_t a1, const char **a2)
{
  unsigned int v7 = 7;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "checktimeout"))
  {
    return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), otChildSupervisionGetCheckTimeout, (unsigned __int8 *)otChildSupervisionSetCheckTimeout);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "interval"))
  {
    return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), otChildSupervisionGetInterval, (unsigned __int8 *)otChildSupervisionSetInterval);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "failcounter"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned __int16 v3 = otChildSupervisionGetCheckFailureCounter(InstancePtr);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%u", v3);
      return 0;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "reset"))
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otChildSupervisionResetCheckFailureCounter(v4);
      return 0;
    }
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::Process<303229889220393947ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, a2, otThreadGetChildTimeout, (unsigned __int8 *)otThreadSetChildTimeout);
}

uint64_t ot::Cli::Interpreter::ProcessGetSet<unsigned int>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t), unsigned __int8 *a4)
{
  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<unsigned int>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  unsigned int v6;

  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<unsigned int>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, a2, a3, a4);
}

{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, a2, a3, a4);
}

uint64_t ot::Cli::Interpreter::Process<1863449829ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::Coap::Process((ot::Cli::Coap *)(a1 + 232), a2);
}

uint64_t ot::Cli::Interpreter::Process<1996360929ull>(uint64_t a1, const char **a2)
{
  uint64_t v35 = a1;
  int v34 = a2;
  unsigned int CoexMetrics = 0;
  char v32 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    char IsCoexEnabled = otPlatRadioIsCoexEnabled(InstancePtr, v4, v5, v6, v7, v8, v9, v10);
    ot::Cli::Output::OutputEnabledDisabledStatus((ot::Cli::OutputImplementer **)(a1 + 16), IsCoexEnabled & 1);
  }
  else if (ot::Cli::Interpreter::ParseEnableOrDisable(v34, (const ot::Utils::CmdLineParser::Arg *)&v32, v2))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(v34, "metrics"))
    {
      uint64_t v19 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int CoexMetrics = otPlatRadioGetCoexMetrics(v19, (uint64_t)v30);
      if (!CoexMetrics)
      {
        unsigned __int16 v20 = "true";
        if ((v31 & 1) == 0) {
          unsigned __int16 v20 = "false";
        }
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Stopped: %s", v20);
        uint64_t v21 = ot::ToUlong(v30[0]);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Grant Glitch: %lu", v21);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Transmit metrics");
        for (unsigned __int16 i = (char *)&ot::Cli::Interpreter::Process<1996360929ull>(ot::Utils::CmdLineParser::Arg *)::kTxMetricNames;
              i != (char *)&ot::Cli::Interpreter::Process<1996360929ull>(ot::Utils::CmdLineParser::Arg *)::kRxMetricNames;
              i += 16)
        {
          unsigned __int16 v26 = (const char *)*((void *)i + 1);
          uint64_t v22 = ot::ToUlong(*(unsigned int *)((char *)v30 + *(void *)i));
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "%s: %lu", v26, v22);
        }
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Receive metrics");
        for (unsigned __int16 j = (char *)&ot::Cli::Interpreter::Process<1996360929ull>(ot::Utils::CmdLineParser::Arg *)::kRxMetricNames;
              j != (char *)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kTxCounterNames;
              j += 16)
        {
          unsigned __int16 v25 = (const char *)*((void *)j + 1);
          uint64_t v23 = ot::ToUlong(*(unsigned int *)((char *)v30 + *(void *)j));
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "%s: %lu", v25, v23);
        }
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otPlatRadioSetCoexEnabled(v12, v32 & 1, v13, v14, v15, v16, v17, v18);
  }
  return CoexMetrics;
}

uint64_t ot::Cli::Interpreter::Process<8846784157991210846ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, a2, otThreadGetContextIdReuseDelay, (unsigned __int8 *)otThreadSetContextIdReuseDelay);
}

uint64_t ot::Cli::Interpreter::Process<8094126837366616329ull>(uint64_t a1, const char **a2)
{
  unsigned int v33 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "ip");
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "mac");
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "mle");
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "mac"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      Counters = (unsigned int *)otLinkGetCounters(InstancePtr);
      uint64_t v3 = ot::ToUlong(*Counters);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "TxTotal: %lu", v3);
      for (unsigned __int16 i = (char *)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kTxCounterNames;
            i != (char *)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kRxCounterNames;
            i += 16)
      {
        uint64_t v21 = (const char *)*((void *)i + 1);
        uint64_t v4 = ot::ToUlong(*(unsigned int *)((char *)Counters + *(void *)i));
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "%s: %lu", v21, v4);
      }
      uint64_t v5 = ot::ToUlong(Counters[24]);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "RxTotal: %lu", v5);
      for (unsigned __int16 j = (char *)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kRxCounterNames;
            j != (char *)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kCounterNames;
            j += 16)
      {
        unsigned __int16 v20 = (const char *)*((void *)j + 1);
        uint64_t v6 = ot::ToUlong(*(unsigned int *)((char *)Counters + *(void *)j));
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "%s: %lu", v20, v6);
      }
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "RxMinCslError: %ld", (int)Counters[41]);
      if (Counters[43]) {
        uint64_t v19 = *((void *)Counters + 22) / (int)Counters[43];
      }
      else {
        uint64_t v19 = 0;
      }
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "RxAvgCslError: %ld", v19);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "RxMaxCslError: %ld", (int)Counters[42]);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "reset") {
           && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 2)))
    }
    {
      uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otLinkResetCounters(v7);
      uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadResetMleLinkLossCounters(v8);
    }
    else
    {
      return 7;
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "bbr"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
    {
      uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      BbrCounters = (unsigned __int16 *)otThreadGetBbrCounters(v9);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Primary state count: %d", *BbrCounters);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Secondary state count: %d", BbrCounters[2]);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Disabled state count: %d", BbrCounters[1]);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "reset") {
           && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 2)))
    }
    {
      uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadResetBbrCounters(v10);
    }
    else
    {
      return 7;
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "mle"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
    {
      uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      uint64_t MleCounters = otThreadGetMleCounters(v11);
      uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      MleLinkLossCounters = (unsigned __int16 *)otThreadGetMleLinkLossCounters(v12);
      for (int k = (const char **)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kCounterNames;
            k != (const char **)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kTimeCounterNames;
            k += 2)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s: %u", k[1], *(unsigned __int16 *)&(*k)[MleCounters]);
      }
      for (m = (const char **)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kTimeCounterNames;
            m != (const char **)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kCounterNames;
            m += 2)
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Time %s Milli: ", m[1]);
        ot::Cli::Output::OutputUint64Line((ot::Cli::OutputImplementer **)(a1 + 16), *(void *)&(*m)[MleCounters]);
      }
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Time Tracked Milli: ");
      ot::Cli::Output::OutputUint64Line((ot::Cli::OutputImplementer **)(a1 + 16), *(void *)(MleCounters + 56));
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Child Link Loss: %d", *MleLinkLossCounters);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Router Link Loss: %d", MleLinkLossCounters[1]);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "reset") {
           && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 2)))
    }
    {
      uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadResetMleCounters(v13);
    }
    else
    {
      return 7;
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "ip"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
    {
      uint64_t v14 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      uint64_t Ip6Counters = otThreadGetIp6Counters(v14);
      for (n = (char **)&ot::Cli::Interpreter::Process<8094126837366616329ull>(ot::Utils::CmdLineParser::Arg *)::kCounterNames;
            n != ot::Cli::Interpreter::Process<8020460690342608375ull>(ot::Utils::CmdLineParser::Arg *)::kScanTableTitles;
            n += 2)
      {
        uint64_t v18 = n[1];
        uint64_t v15 = ot::ToUlong(*(unsigned int *)&(*n)[Ip6Counters]);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s: %lu", v18, v15);
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "reset") {
           && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 2)))
    }
    {
      uint64_t v16 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadResetIp6Counters(v16);
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 7;
  }
  return v33;
}

uint64_t ot::Cli::Interpreter::Process<7052124ull>(uint64_t a1, uint64_t a2)
{
  unsigned int v34 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 Channel = otLinkCslGetChannel(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Channel: %u", Channel);
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 Period = otLinkCslGetPeriod(v4);
    uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 v6 = otLinkCslGetPeriod(v5);
    uint64_t v7 = ot::ToUlong(160 * v6 / 0x3E8);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Period: %u(in units of 10 symbols), %lums", Period, v7);
    uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t Timeout = otLinkCslGetTimeout(v8);
    uint64_t v10 = ot::ToUlong(Timeout);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Timeout: %lus", v10);
    uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    int CslRequestAhead = otLinkGetCslRequestAhead(v11);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "RequestAhead: %u", CslRequestAhead);
    uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 CslUncertainty = otPlatRadioGetCslUncertainty(v13, v14, v15, v16, v17, v18, v19, v20);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Uncertainity: %u", CslUncertainty);
    uint64_t v22 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 CslAccuracy = otPlatRadioGetCslAccuracy(v22, v23, v24, v25, v26, v27, v28, v29);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Accuracy: %u", CslAccuracy);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "channel"))
  {
    return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, (ot::Utils::CmdLineParser **)(a2 + 8), (unsigned __int8 *)otLinkCslSetChannel);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "period"))
  {
    return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, (ot::Utils::CmdLineParser **)(a2 + 8), (unsigned __int8 *)otLinkCslSetPeriod);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "timeout"))
  {
    return ot::Cli::Interpreter::ProcessSet<unsigned int>(a1, (ot::Utils::CmdLineParser **)(a2 + 8), (unsigned __int8 *)otLinkCslSetTimeout);
  }
  else if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "debug"))
  {
    return 7;
  }
  return v34;
}

uint64_t ot::Cli::Interpreter::Process<7441274ull>(uint64_t a1, const char **a2)
{
  uint64_t v18 = a1;
  uint64_t v17 = (ot::Utils::CmdLineParser **)a2;
  unsigned int v16 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "attach"))
  {
    unsigned __int16 v15 = 0;
    unsigned __int8 v14 = 0;
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v17 + 2)))
    {
      return 7;
    }
    else
    {
      unsigned int v16 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>(v17 + 1, v19);
      if (!v16)
      {
        unsigned int v16 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v17 + 2, (char *)&v15, v2);
        if (!v16)
        {
          if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v17 + 3)))
          {
            uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
            unsigned __int8 v14 = otThreadWedWakeUpPattern(InstancePtr);
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Set wakeupPattern as %d", v14);
          }
          else
          {
            unsigned int v16 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v17 + 3, (char *)&v14, v3);
            if (v16) {
              return v16;
            }
          }
          uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
          return otThreadAttachCslPeripheral(v5, (uint64_t)v19, v15, v14);
        }
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v17, "configure"))
  {
    unsigned __int8 v13 = 11;
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v17 + 1))
      || (unsigned int v16 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v17 + 1, (char *)&v13, v6)) == 0)
    {
      uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otThreadConfigureWOR(v7, 0x177u, v13);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v17, "detach"))
  {
    uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadDetachEnhCslPeer(v8);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v17, "state"))
  {
    uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    if (otThreadIsEnhCslPeerLinked(v9))
    {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "linked");
    }
    else
    {
      uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otThreadIsEnhCslPeerLinking(v10)) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "linking");
      }
      else {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "disabled");
      }
    }
  }
  else
  {
    return 7;
  }
  return v16;
}

uint64_t ot::Cli::Interpreter::Process<7419947443224800644ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 Channel = otLinkWorGetChannel(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%u", Channel);
  }
  else
  {
    return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, a2, (unsigned __int8 *)otLinkWorSetChannel);
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::Process<5345021259271145584ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  unsigned int v10 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int DelayTimerMinimal = otDatasetGetDelayTimerMinimal(InstancePtr);
    uint64_t v4 = ot::ToUlong(DelayTimerMinimal / 0x3E8);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%lu", v4);
  }
  else if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v11 + 1)))
  {
    unsigned int v9 = 0;
    unsigned int v10 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v11, (char *)&v9, v5);
    if (!v10)
    {
      uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otDatasetSetDelayTimerMinimal(v6, 1000 * v9);
    }
  }
  else
  {
    return 7;
  }
  return v10;
}

uint64_t ot::Cli::Interpreter::Process<112553419349005ull>(uint64_t a1, const char **a2)
{
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "async"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadDetachGracefully(InstancePtr, 0, 0);
  }
  else
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int v6 = otThreadDetachGracefully(v3, (void (*)(void *))ot::Cli::Interpreter::HandleDetachGracefullyResult, a1);
    if (!v6) {
      return 36;
    }
  }
  return v6;
}

void ot::Cli::Interpreter::HandleDetachGracefullyResult(ot::Cli::OutputImplementer **this, void *a2)
{
}

uint64_t ot::Cli::Interpreter::Process<8020460690342608375ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v15 = a1;
  unsigned __int8 v14 = a2;
  unsigned int v13 = 0;
  int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "reqcallback"))
  {
    char v11 = 0;
    unsigned int v10 = 0;
    uint64_t v9 = 0;
    unsigned int v13 = ot::Cli::Interpreter::ParseEnableOrDisable((const char **)v14 + 1, (const ot::Utils::CmdLineParser::Arg *)&v11, v2);
    if (!v13)
    {
      if (v11)
      {
        unsigned int v10 = ot::Cli::Interpreter::HandleDiscoveryRequest;
        uint64_t v9 = a1;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadSetDiscoveryRequestCallback(InstancePtr, (uint64_t)v10, v9);
    }
  }
  else
  {
    if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v14))
    {
      unsigned __int8 v8 = 0;
      unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v8, v4);
      if (v13) {
        return v13;
      }
      if (v8 >= 0x20uLL) {
        return 7;
      }
      int v12 = 1 << v8;
    }
    uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int v13 = otThreadDiscover(v5, v12, 0xFFFFu, 0, 0, (uint64_t)ot::Cli::Interpreter::HandleActiveScanResult, a1);
    if (!v13)
    {
      ot::Cli::Output::OutputTableHeader<(unsigned char)7>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<8020460690342608375ull>(ot::Utils::CmdLineParser::Arg *)::kScanTableTitles, ot::Cli::Interpreter::Process<8020460690342608375ull>(ot::Utils::CmdLineParser::Arg *)::kScanTableColumnWidths);
      return 36;
    }
  }
  return v13;
}

void ot::Cli::Interpreter::HandleActiveScanResult(uint64_t a1, uint64_t a2)
{
}

{
  if (a2)
  {
    if ((*(unsigned char *)(a2 + 57) & 0x20) != 0)
    {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %-16s ", (const char *)(a2 + 8));
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| ");
      ot::Cli::Output::OutputBytes<(unsigned char)8>((ot::Cli::OutputImplementer **)(a1 + 16), (const unsigned __int8 *)(a2 + 25));
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " ");
    }
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %04x | ", *(unsigned __int16 *)(a2 + 50));
    ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), (const unsigned __int8 *)a2);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " | %2u ", *(unsigned __int8 *)(a2 + 54));
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %3d ", *(char *)(a2 + 55));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "| %3u |", *(unsigned __int8 *)(a2 + 56));
  }
  else
  {
    ot::Cli::Interpreter::OutputResult(a1, 0);
  }
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)7>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 7u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)7>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<7506025ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return 7;
  }
  else {
    return 35;
  }
}

uint64_t ot::Cli::EidCacheStateToString(unsigned __int16 a1)
{
  return ot::Cli::Output::Stringify<otCacheEntryState,(unsigned short)4>(a1, (uint64_t)ot::Cli::EidCacheStateToString(otCacheEntryState)::kStateStrings, (uint64_t)"unknown");
}

uint64_t ot::Cli::Output::Stringify<otCacheEntryState,(unsigned short)4>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 4u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otCacheEntryState,(unsigned short)4>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::OutputEidCacheEntry(uint64_t a1, uint64_t a2)
{
  ot::Cli::Output::OutputIp6Address((ot::Cli::OutputImplementer **)(a1 + 16), a2);
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " %04x", *(unsigned __int16 *)(a2 + 16));
  BOOL v2 = (const char *)ot::Cli::EidCacheStateToString(*(_DWORD *)(a2 + 20));
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " %s", v2);
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " canEvict=%d", *(unsigned char *)(a2 + 24) & 1);
  if (*(_DWORD *)(a2 + 20))
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " timeout=%u", *(unsigned __int16 *)(a2 + 48));
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    uint64_t v3 = ot::ToUlong(*(unsigned int *)(a2 + 28));
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " transTime=%lu eid=", v3);
    ot::Cli::Output::OutputIp6Address((ot::Cli::OutputImplementer **)(a1 + 16), a2 + 32);
  }
  if (*(_DWORD *)(a2 + 20) == 3) {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " retryDelay=%u rampDown=%d", *(unsigned __int16 *)(a2 + 50), (*(unsigned char *)(a2 + 24) & 2) != 0);
  }
  return ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
}

uint64_t ot::Cli::Interpreter::Process<7109832251570096126ull>(uint64_t a1, const char **a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  v8[0] = 0;
  v8[1] = 0;
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otThreadGetNextCacheEntry(InstancePtr, (uint64_t)v7, (uint64_t)v8)) {
        break;
      }
      ot::Cli::Interpreter::OutputEidCacheEntry(a1, (uint64_t)v7);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v9, "clear"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otThreadClearEidCache(v3);
  }
  else
  {
    return 7;
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::Process<220771284311ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v5 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otLinkGetFactoryAssignedIeeeEui64(InstancePtr, (uint64_t)v6);
    ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(a1 + 16), v6);
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::Cli::Interpreter::Process<31451632477498226ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  unsigned int v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    ExtendedAddress = (const unsigned __int8 *)otLinkGetExtendedAddress(InstancePtr);
    ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(a1 + 16), ExtendedAddress);
  }
  else
  {
    unsigned int v7 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>(a2, v9);
    if (!v7)
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otLinkSetExtendedAddress(v4, (uint64_t)v9);
    }
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::Process<6725988ull>(uint64_t a1, const char **a2)
{
  uint64_t v17 = a1;
  unsigned int v16 = a2;
  unsigned int v15 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "level"))
  {
    BOOL IsEmpty = ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v16 + 1));
    if (IsEmpty)
    {
      int Level = otLoggingGetLevel((ot::Instance *)IsEmpty);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%d", Level);
    }
    else
    {
      unsigned __int8 v14 = 0;
      if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v16 + 2)))
      {
        unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v16 + 1, (char *)&v14, v4);
        if (!v15)
        {
          unsigned int v15 = otLoggingSetLevel(v14);
          if (!v15)
          {
            uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
            return otPlatSetRcpLogLevel(InstancePtr, v14, v6, v7, v8, v9, v10, v11);
          }
        }
      }
      else
      {
        return 7;
      }
    }
  }
  else
  {
    return 7;
  }
  return v15;
}

uint64_t ot::Cli::Interpreter::Process<7040008844819482601ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  unsigned int v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otThreadGetExtendedPanId(InstancePtr);
    ot::Cli::Output::OutputBytesLine<(unsigned char)8>((ot::Cli::OutputImplementer **)(a1 + 16), v3);
  }
  else
  {
    unsigned int v7 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>(a2, v9);
    if (!v7)
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otThreadSetExtendedPanId(v4, (uint64_t)v9);
    }
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::Process<13321296782721747327ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  unsigned int NeighborEnhAckSolicitationEnabled = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    return 7;
  }
  else
  {
    unsigned int NeighborEnhAckSolicitationEnabled = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v10, v12);
    if (!NeighborEnhAckSolicitationEnabled)
    {
      if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)v10 + 8)))
      {
        char v8 = 0;
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        unsigned int NeighborEnhAckSolicitationEnabled = otThreadGetNeighborEnhAckSolicitationEnabled(InstancePtr, (uint64_t)v12, &v8);
        if (!NeighborEnhAckSolicitationEnabled) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%d", v8 & 1);
        }
      }
      else
      {
        BOOL v7 = 0;
        unsigned int NeighborEnhAckSolicitationEnabled = ot::Utils::CmdLineParser::Arg::ParseAsBool((ot::Utils::CmdLineParser **)v10 + 1, &v7, v2);
        if (!NeighborEnhAckSolicitationEnabled)
        {
          uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
          return otThreadSetNeighborEnhAckSolicitationEnabled(v4, (uint64_t)v12, v7);
        }
      }
    }
  }
  return NeighborEnhAckSolicitationEnabled;
}

uint64_t ot::Cli::Interpreter::Process<7113582ull>(uint64_t a1, const char **a2)
{
  uint64_t v31 = a1;
  unsigned __int16 v30 = (ot::Utils::CmdLineParser **)a2;
  unsigned int FemLnaGain = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    char v28 = 0;
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int FemLnaGain = otPlatRadioGetFemLnaGain(InstancePtr, (uint64_t)&v28, v3, v4, v5, v6, v7, v8);
    if (!FemLnaGain) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "LNA gain %d dBm", v28);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v30, "lnagain"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v30 + 1)))
    {
      char v27 = 0;
      uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int FemLnaGain = otPlatRadioGetFemLnaGain(v10, (uint64_t)&v27, v11, v12, v13, v14, v15, v16);
      if (!FemLnaGain) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%d", v27);
      }
    }
    else
    {
      signed __int8 v26 = 0;
      unsigned int FemLnaGain = ot::Utils::CmdLineParser::Arg::ParseAsInt8(v30 + 1, &v26, v9);
      if (!FemLnaGain)
      {
        uint64_t v17 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        return otPlatRadioSetFemLnaGain(v17, v26, v18, v19, v20, v21, v22, v23);
      }
    }
  }
  else
  {
    return 7;
  }
  return FemLnaGain;
}

uint64_t ot::Cli::Interpreter::Process<7250330901759102465ull>(uint64_t a1, const char **a2)
{
  unsigned int v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    if (otIp6IsEnabled(InstancePtr)) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "up");
    }
    else {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "down");
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "up"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otIp6SetEnabled(v3, 1);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "down"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otIp6SetEnabled(v4, 0);
  }
  else
  {
    return 7;
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::AddressOriginToString(ot::Cli::Interpreter *this)
{
  return ot::Cli::Output::Stringify<unsigned char,(unsigned short)4>(this, (uint64_t)ot::Cli::Interpreter::AddressOriginToString(unsigned char)::kOriginStrings, (uint64_t)"unknown");
}

uint64_t ot::Cli::Output::Stringify<unsigned char,(unsigned short)4>(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 4u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<unsigned char,(unsigned short)4>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<123339735204840ull>(uint64_t a1, const char **a2)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unsigned int v20 = 0;
  char v19 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-v"))
  {
    ++v21;
    char v19 = 1;
  }
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v21))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t UnicastAddresses = otIp6GetUnicastAddresses(InstancePtr);
    for (uint64_t i = UnicastAddresses; i; uint64_t i = *(void *)(i + 24))
    {
      ot::Cli::Output::OutputIp6Address((ot::Cli::OutputImplementer **)(a1 + 16), i);
      if (v19)
      {
        uint64_t v3 = (const char *)ot::Cli::Interpreter::AddressOriginToString((ot::Cli::Interpreter *)*(unsigned __int8 *)(i + 17));
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " origin:%s", v3);
      }
      ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "add"))
  {
    unsigned int v20 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v21 + 1, (uint64_t)v15);
    if (!v20)
    {
      v15[16] = 64;
      char v16 = v16 & 0xFE | 1;
      char v16 = v16 & 0xFD | 2;
      v15[17] = 3;
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otIp6AddUnicastAddress(v4, (uint64_t)v15);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "del"))
  {
    unsigned int v20 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v21 + 1, (uint64_t)v14);
    if (!v20)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otIp6RemoveUnicastAddress(v5, (uint64_t)v14);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "linklocal"))
  {
    uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t LinkLocalIp6Address = otThreadGetLinkLocalIp6Address(v6);
    ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), LinkLocalIp6Address);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "rloc"))
  {
    uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t Rloc = otThreadGetRloc(v8);
    ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), Rloc);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "mleid"))
  {
    uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t MeshLocalEid = otThreadGetMeshLocalEid(v10);
    ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), MeshLocalEid);
  }
  else
  {
    return 35;
  }
  return v20;
}

uint64_t ot::Cli::Interpreter::Process<31451632477041015ull>(uint64_t a1, const char **a2)
{
  uint64_t v21 = a1;
  unsigned int v20 = a2;
  unsigned int v19 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    for (uint64_t i = otIp6GetMulticastAddresses(InstancePtr); i; uint64_t i = *(void *)(i + 16))
      ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), i);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "add"))
  {
    unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(++v20, (uint64_t)v17);
    if (!v19)
    {
      uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otIp6SubscribeMulticastAddress(v3, (uint64_t)v17);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "del"))
  {
    unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v20 + 1, (uint64_t)v16);
    if (!v19)
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otIp6UnsubscribeMulticastAddress(v4, (uint64_t)v16);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "promiscuous"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v20 + 1)))
    {
      uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      char IsMulticastPromiscuousEnabled = otIp6IsMulticastPromiscuousEnabled(v6);
      ot::Cli::Output::OutputEnabledDisabledStatus((ot::Cli::OutputImplementer **)(a1 + 16), IsMulticastPromiscuousEnabled & 1);
    }
    else
    {
      char v15 = 0;
      unsigned int v19 = ot::Cli::Interpreter::ParseEnableOrDisable(v20 + 1, (const ot::Utils::CmdLineParser::Arg *)&v15, v5);
      if (!v19)
      {
        uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        otIp6SetMulticastPromiscuousEnabled(v8, v15 & 1);
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "llatn"))
  {
    uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t LinkLocalAllThreadNodesMulticastAddress = otThreadGetLinkLocalAllThreadNodesMulticastAddress(v9);
    ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), LinkLocalAllThreadNodesMulticastAddress);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "rlatn"))
  {
    uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t RealmLocalAllThreadNodesMulticastAddress = otThreadGetRealmLocalAllThreadNodesMulticastAddress(v11);
    ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), RealmLocalAllThreadNodesMulticastAddress);
  }
  else
  {
    return 35;
  }
  return v19;
}

uint64_t ot::Cli::Interpreter::Process<14182804244553304960ull>(uint64_t a1, const char **a2)
{
  unsigned int v4 = 7;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "counter"))
  {
    return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), otThreadGetKeySequenceCounter, (unsigned __int8 *)otThreadSetKeySequenceCounter);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "guardtime"))
  {
    return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), otThreadGetKeySwitchGuardTime, (unsigned __int8 *)otThreadSetKeySwitchGuardTime);
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::Process<5743589040336375053ull>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  unsigned int LeaderData = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  unsigned int LeaderData = otThreadGetLeaderData(InstancePtr, &v6);
  if (!LeaderData)
  {
    uint64_t v3 = ot::ToUlong(v6);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Partition ID: %lu", v3);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Weighting: %u", BYTE4(v6));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Data Version: %u", BYTE5(v6));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Stable Data Version: %u", BYTE6(v6));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Leader Router ID: %u", HIBYTE(v6));
  }
  return LeaderData;
}

uint64_t ot::Cli::Interpreter::Process<1998604769390126437ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v7 = 35;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t PartitionId = otThreadGetPartitionId(InstancePtr);
    uint64_t v4 = ot::ToUlong(PartitionId);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%lu", v4);
    return 0;
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::Process<14765126478273032447ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, otThreadGetLocalLeaderWeight, (unsigned __int8 *)otThreadSetLocalLeaderWeight);
}

uint64_t ot::Cli::Interpreter::Process<1495474164342561146ull>(uint64_t a1, const char **a2)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unsigned int v20 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t DeviceProperties = otThreadGetDeviceProperties(InstancePtr);
    uint64_t v4 = (const char *)ot::Cli::Output::Stringify<otPowerSupply,(unsigned short)4>(*(_DWORD *)DeviceProperties, (uint64_t)ot::Cli::Interpreter::Process<1495474164342561146ull>(ot::Utils::CmdLineParser::Arg *)::kPowerSupplyStrings, (uint64_t)"unknown");
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "PowerSupply      : %s", v4);
    uint64_t v5 = "yes";
    if ((*(unsigned char *)(DeviceProperties + 4) & 1) == 0) {
      uint64_t v5 = "no";
    }
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "IsBorderRouter   : %s", v5);
    uint64_t v6 = "yes";
    if ((*(unsigned char *)(DeviceProperties + 4) & 2) == 0) {
      uint64_t v6 = "no";
    }
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "SupportsCcm      : %s", v6);
    unsigned int v7 = "yes";
    if ((*(unsigned char *)(DeviceProperties + 4) & 4) == 0) {
      unsigned int v7 = "no";
    }
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "IsUnstable       : %s", v7);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "WeightAdjustment : %d", *(char *)(DeviceProperties + 5));
  }
  else
  {
    BOOL v15 = 0;
    for (unsigned __int8 i = 0; i < 4uLL; ++i)
    {
      if (ot::Utils::CmdLineParser::Arg::operator==(v21, ot::Cli::Interpreter::Process<1495474164342561146ull>(ot::Utils::CmdLineParser::Arg *)::kPowerSupplyStrings[i]))
      {
        int v16 = i;
        break;
      }
    }
    if (i < 4uLL)
    {
      unsigned int v20 = ot::Utils::CmdLineParser::Arg::ParseAsBool((ot::Utils::CmdLineParser **)v21 + 1, &v15, v2);
      if (!v20)
      {
        char v17 = v17 & 0xFE | v15;
        unsigned int v20 = ot::Utils::CmdLineParser::Arg::ParseAsBool((ot::Utils::CmdLineParser **)v21 + 2, &v15, v8);
        if (!v20)
        {
          char v17 = v17 & 0xFD | (2 * v15);
          unsigned int v20 = ot::Utils::CmdLineParser::Arg::ParseAsBool((ot::Utils::CmdLineParser **)v21 + 3, &v15, v9);
          if (!v20)
          {
            char v17 = v17 & 0xFB | (4 * v15);
            unsigned int v20 = ot::Utils::CmdLineParser::Arg::ParseAsInt8((ot::Utils::CmdLineParser **)v21 + 4, v18, v10);
            if (!v20)
            {
              if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v21 + 5)))
              {
                uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
                otThreadSetDeviceProperties(v11, (uint64_t)&v16);
              }
              else
              {
                return 7;
              }
            }
          }
        }
      }
    }
    else
    {
      return 7;
    }
  }
  return v20;
}

uint64_t ot::Cli::Output::Stringify<otPowerSupply,(unsigned short)4>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 4u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otPowerSupply,(unsigned short)4>(a1, a2, a3);
}

void ot::Cli::Interpreter::HandleLinkMetricsReport(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
}

void ot::Cli::Interpreter::HandleLinkMetricsReport(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if ((*(unsigned char *)(a1 + 446) & 1) != 0 || (*(unsigned char *)(a1 + 447) & 2) != 0)
  {
    *(unsigned char *)(a1 + 446) = 0;
    *(unsigned char *)(a1 + 447) &= ~2u;
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Received Link Metrics Report from: ");
    ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), a2);
    if (a3)
    {
      ot::Cli::Interpreter::PrintLinkMetricsValue(a1, a3);
    }
    else
    {
      uint64_t v4 = ot::Cli::Interpreter::LinkMetricsStatusToStr((ot::Cli::Interpreter *)a1, a4);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link Metrics Report, status: %s", v4);
    }
    ot::Cli::Interpreter::OutputResult(a1, 0);
  }
}

uint64_t ot::Cli::Interpreter::PrintLinkMetricsValue(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)a2)
  {
    uint64_t v2 = ot::ToUlong(*(unsigned int *)(a2 + 4));
    uint64_t result = ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v3 + 16), " - PDU Counter: %lu (Count/Summation)", v2);
  }
  if ((*(unsigned char *)a2 & 2) != 0) {
    uint64_t result = ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v3 + 16), " - LQI: %u %s", *(unsigned __int8 *)(a2 + 8), "(Exponential Moving Average)");
  }
  if ((*(unsigned char *)a2 & 4) != 0) {
    uint64_t result = ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v3 + 16), " - Margin: %u (dB) %s", *(unsigned __int8 *)(a2 + 9), "(Exponential Moving Average)");
  }
  if ((*(unsigned char *)a2 & 8) != 0) {
    return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v3 + 16), " - RSSI: %d (dBm) %s", *(char *)(a2 + 10), "(Exponential Moving Average)");
  }
  return result;
}

const char *ot::Cli::Interpreter::LinkMetricsStatusToStr(ot::Cli::Interpreter *this, unsigned __int8 a2)
{
  uint64_t v3 = "Unknown error";
  if (a2 < 5uLL) {
    return ot::Cli::Interpreter::LinkMetricsStatusToStr(unsigned char)::kStatusStrings[a2];
  }
  if (a2 == 254) {
    return "Other error";
  }
  return v3;
}

void ot::Cli::Interpreter::HandleLinkMetricsMgmtResponse(uint64_t a1, unsigned __int8 a2, ot::Cli::OutputImplementer **a3)
{
}

void ot::Cli::Interpreter::HandleLinkMetricsMgmtResponse(ot::Cli::OutputImplementer **a1, uint64_t a2, unsigned __int8 a3)
{
  ot::Cli::Output::OutputFormat(a1 + 2, "Received Link Metrics Management Response from: ");
  ot::Cli::Output::OutputIp6AddressLine(a1 + 2, a2);
  uint64_t v3 = ot::Cli::Interpreter::LinkMetricsStatusToStr((ot::Cli::Interpreter *)a1, a3);
  ot::Cli::Output::OutputLine(a1 + 2, "Status: %s", v3);
  ot::Cli::Interpreter::OutputResult((uint64_t)a1, 0);
}

uint64_t ot::Cli::Interpreter::HandleLinkMetricsEnhAckProbingIe(__int16 a1, void *a2, uint64_t a3, uint64_t a4)
{
  return ot::Cli::Interpreter::HandleLinkMetricsEnhAckProbingIe(a4, a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::HandleLinkMetricsEnhAckProbingIe(uint64_t a1, __int16 a2, void *a3, uint64_t a4)
{
  uint64_t result = ot::Cli::Interpreter::ClearLinkMetricsEnhAckProbingIe(a1);
  *(_WORD *)(a1 + 444) = a2;
  if (a3) {
    *(void *)(a1 + 436) = *a3;
  }
  if (a4)
  {
    *(void *)(a1 + 424) = *(void *)a4;
    *(_DWORD *)(a1 + 432) = *(_DWORD *)(a4 + 8);
  }
  if ((*(unsigned char *)(a1 + 447) & 2) != 0) {
    *(unsigned char *)(a1 + 447) &= ~2u;
  }
  return result;
}

uint64_t ot::Cli::Interpreter::Process<8384529159082159753ull>(uint64_t a1, const char **a2)
{
  uint64_t v21 = a1;
  unsigned int v20 = a2;
  unsigned int v19 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "query"))
  {
    char v17 = 0;
    BOOL v16 = 0;
    unsigned __int8 v15 = 0;
    unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v20 + 1, (uint64_t)v18);
    if (v19) {
      return v19;
    }
    if (ot::Utils::CmdLineParser::Arg::operator==(v20 + 2, "single"))
    {
      char v17 = 1;
      unsigned int v19 = ot::Cli::Interpreter::ParseLinkMetricsFlags(a1, &v14, (ot::Utils::CmdLineParser::Arg *)(v20 + 3));
      if (v19) {
        return v19;
      }
      *(unsigned char *)(a1 + 446) = 1;
      goto LABEL_10;
    }
    if (!ot::Utils::CmdLineParser::Arg::operator==(v20 + 2, "forward")) {
      return 7;
    }
    char v17 = 0;
    unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v20 + 3, (char *)&v15, v2);
    if (!v19)
    {
LABEL_10:
      BOOL v16 = ot::Utils::CmdLineParser::Arg::operator==(v20 + 4, "block");
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (v17) {
        char v8 = 0;
      }
      else {
        char v8 = v15;
      }
      if (v17) {
        unsigned int v3 = otLinkMetricsQuery(InstancePtr, (uint64_t)v18, v8, (uint64_t)&v14, (uint64_t)ot::Cli::Interpreter::HandleLinkMetricsReport, a1);
      }
      else {
        unsigned int v3 = otLinkMetricsQuery(InstancePtr, (uint64_t)v18, v8, 0, (uint64_t)ot::Cli::Interpreter::HandleLinkMetricsReport, a1);
      }
      unsigned int v19 = v3;
      if (!v3)
      {
        if (v16) {
          *(unsigned char *)(a1 + 447) = *(unsigned char *)(a1 + 447) & 0xFD | 2;
        }
        if (!v19)
        {
          ot::Cli::Interpreter::SetCommandTimeout((ot::Cli::Interpreter *)a1, 0x2710u);
          return 36;
        }
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "mgmt"))
  {
    return ot::Cli::Interpreter::ProcessLinkMetricsMgmt((ot::Cli::Interpreter *)a1, v20 + 1);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "probe"))
  {
    unsigned __int8 v12 = 0;
    unsigned __int8 v11 = 0;
    unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v20 + 1, (uint64_t)v13);
    if (!v19)
    {
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v20 + 2, (char *)&v12, v4);
      if (!v19)
      {
        unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v20 + 3, (char *)&v11, v5);
        if (!v19)
        {
          uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
          return otLinkMetricsSendLinkProbe(v6, (uint64_t)v13, v12, v11);
        }
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "lastprobeie"))
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Received Link Metrics data in Enh Ack from neighbor, short address:0x%02x , extended address:", *(unsigned __int16 *)(a1 + 444));
    ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(a1 + 16), (const unsigned __int8 *)(a1 + 436));
    ot::Cli::Interpreter::PrintLinkMetricsValue(a1, a1 + 424);
  }
  else
  {
    return 35;
  }
  return v19;
}

uint64_t ot::Cli::Interpreter::ParseLinkMetricsFlags(uint64_t a1, unsigned char *a2, ot::Utils::CmdLineParser::Arg *a3)
{
  unsigned int v10 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a3))
  {
    return 7;
  }
  else
  {
    *a2 = 0;
    uint64_t CString = (unsigned char *)ot::Utils::CmdLineParser::Arg::GetCString(a3);
    while (*CString)
    {
      unsigned int v3 = (char)*CString;
      BOOL v4 = v3 > 0x6D;
      uint64_t v5 = v3 - 109;
      if (v4)
      {
        uint64_t v7 = v5;
        char v6 = 1;
      }
      else
      {
        uint64_t v7 = v5;
        char v6 = 0;
      }
      if (v6) {
        return 7;
      }
      switch(v7)
      {
        case 0:
          *a2 = *a2 & 0xFB | 4;
          goto LABEL_15;
        case 1:
        case 2:
          return 7;
        case 3:
          *a2 = *a2 & 0xFE | 1;
          goto LABEL_15;
        case 4:
          *a2 = *a2 & 0xFD | 2;
          goto LABEL_15;
        case 5:
          *a2 = *a2 & 0xF7 | 8;
LABEL_15:
          ++CString;
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  return v10;
}

uint64_t ot::Cli::Interpreter::SetCommandTimeout(ot::Cli::Interpreter *this, unsigned int a2)
{
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    __assert_rtn("SetCommandTimeout", "cli.cpp", 9465, "mCommandIsPending");
  }
  return ot::TimerMilli::Start((ot::Cli::Interpreter *)((char *)this + 64), a2);
}

uint64_t ot::Cli::Interpreter::ProcessLinkMetricsMgmt(ot::Cli::Interpreter *this, const char **a2)
{
  uint64_t v25 = this;
  uint64_t v24 = a2;
  unsigned int v23 = 0;
  char v20 = 0;
  unsigned int v23 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(a2, (uint64_t)v22);
  if (v23) {
    return v23;
  }
  char v21 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(v24 + 1, "forward"))
  {
    unsigned __int8 v19 = 0;
    char v18 = 0;
    unsigned int v23 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v24 + 2, (char *)&v19, v2);
    if (v23) {
      return v23;
    }
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v24 + 3))) {
      return 7;
    }
    uint64_t CString = (char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v24 + 3));
    while (*CString)
    {
      unsigned int v3 = *CString;
      BOOL v4 = v3 > 0x58;
      uint64_t v5 = v3 - 88;
      if (v4)
      {
        uint64_t v7 = v5;
        char v6 = 1;
      }
      else
      {
        uint64_t v7 = v5;
        char v6 = 0;
      }
      if (v6) {
        return 7;
      }
      switch(v7)
      {
        case 0:
          if (CString != (char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v24 + 3))
            || CString[1]
            || !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v24 + 4)))
          {
            return 7;
          }
          char v20 = 1;
LABEL_23:
          ++CString;
          break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 10:
        case 11:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
          return 7;
        case 9:
          char v21 = v21 & 0xF7 | 8;
          goto LABEL_23;
        case 12:
          char v21 = v21 & 0xFD | 2;
          goto LABEL_23;
        case 20:
          char v21 = v21 & 0xFE | 1;
          goto LABEL_23;
        case 26:
          char v21 = v21 & 0xFB | 4;
          goto LABEL_23;
        default:
          JUMPOUT(0);
      }
    }
    if ((v20 & 1) == 0)
    {
      unsigned int v23 = ot::Cli::Interpreter::ParseLinkMetricsFlags((uint64_t)this, &v18, (ot::Utils::CmdLineParser::Arg *)(v24 + 4));
      if (v23) {
        return v23;
      }
      if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v24 + 5))) {
        return 7;
      }
    }
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Interpreter *)((char *)this + 16));
    char v16 = v21;
    if (v20) {
      unsigned int v8 = otLinkMetricsConfigForwardTrackingSeries(InstancePtr, (uint64_t)v22, v19, v16, 0, (uint64_t)ot::Cli::Interpreter::HandleLinkMetricsMgmtResponse, (uint64_t)this);
    }
    else {
      unsigned int v8 = otLinkMetricsConfigForwardTrackingSeries(InstancePtr, (uint64_t)v22, v19, v16, (uint64_t)&v18, (uint64_t)ot::Cli::Interpreter::HandleLinkMetricsMgmtResponse, (uint64_t)this);
    }
    unsigned int v23 = v8;
    goto LABEL_41;
  }
  if (!ot::Utils::CmdLineParser::Arg::operator==(v24 + 1, "enhanced-ack"))
  {
    unsigned int v23 = 7;
LABEL_41:
    if (!v23)
    {
      ot::Cli::Interpreter::SetCommandTimeout(this, 0x2710u);
      return 36;
    }
    return v23;
  }
  unsigned int v15 = 0;
  uint64_t v13 = &v14;
  if (ot::Utils::CmdLineParser::Arg::operator==(v24 + 2, "clear"))
  {
    unsigned int v15 = 0;
    uint64_t v13 = 0;
LABEL_39:
    uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Interpreter *)((char *)this + 16));
    unsigned int v23 = otLinkMetricsConfigEnhAckProbing(v9, (uint64_t)v22, v15, (uint64_t)v13, (uint64_t)ot::Cli::Interpreter::HandleLinkMetricsMgmtResponse, (uint64_t)this, (uint64_t)ot::Cli::Interpreter::HandleLinkMetricsEnhAckProbingIe, (uint64_t)this);
    goto LABEL_41;
  }
  if (!ot::Utils::CmdLineParser::Arg::operator==(v24 + 2, "register")) {
    return 7;
  }
  unsigned int v15 = 1;
  unsigned int v23 = ot::Cli::Interpreter::ParseLinkMetricsFlags((uint64_t)this, &v14, (ot::Utils::CmdLineParser::Arg *)(v24 + 3));
  if (!v23) {
    goto LABEL_39;
  }
  return v23;
}

uint64_t ot::Cli::Interpreter::Process<9463712713382948648ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v24 = a1;
  unsigned int v23 = a2;
  unsigned int v22 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    int Mode = otPowerControlGetMode(InstancePtr, v4, v5, v6, v7, v8, v9, v10);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Mode: %u", Mode);
  }
  else
  {
    unsigned __int8 v21 = 0;
    unsigned int v22 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v23, (char *)&v21, v2);
    if (!v22)
    {
      uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otPowerControlSetMode(v12, v21, v13, v14, v15, v16, v17, v18);
    }
  }
  return v22;
}

uint64_t ot::Cli::Interpreter::Process<1648543237ull>(uint64_t a1, uint64_t a2)
{
  unsigned int Pskc = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otThreadGetPskc(InstancePtr, (uint64_t)v14);
    ot::Cli::Output::OutputBytesLine<(unsigned char)16>((ot::Cli::OutputImplementer **)(a1 + 16), (const unsigned __int8 *)v14);
    return Pskc;
  }
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 8)))
  {
    unsigned int Pskc = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>((ot::Utils::CmdLineParser **)a2, v14);
    if (Pskc) {
      return Pskc;
    }
LABEL_10:
    uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadSetPskc(v7, (uint64_t)v14);
  }
  if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "-p")) {
    return 7;
  }
  uint64_t CString = (long long *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(a2 + 8));
  uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  otThreadGetNetworkName(v3);
  uint64_t v9 = v4;
  uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  otThreadGetExtendedPanId(v5);
  unsigned int Pskc = otDatasetGeneratePskc(CString, v9, v6, (uint64_t)v14);
  if (!Pskc) {
    goto LABEL_10;
  }
  return Pskc;
}

uint64_t ot::Cli::Output::OutputBytesLine<(unsigned char)16>(ot::Cli::OutputImplementer **a1, const unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputBytesLine(a1, a2, 0x10u);
}

{
  return ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, a2);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>(ot::Utils::CmdLineParser **a1, char *a2)
{
  return ot::Utils::CmdLineParser::Arg::ParseAsHexString(a1, a2, 0x10u);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>(a1, a2);
}

uint64_t ot::Cli::Interpreter::Process<7440499ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v12 = a1;
  unsigned __int8 v11 = a2;
  unsigned int v10 = 35;
  if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "reg"))
  {
    unsigned int v9 = 0;
    char v8 = 0;
    unsigned __int8 v7 = 0;
    unsigned __int8 v11 = (ot::Utils::CmdLineParser::Arg *)((char *)v11 + 8);
    do
    {
      if (ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)v11, (uint64_t)&v13[16 * v7])) {
        break;
      }
      unsigned __int8 v11 = (ot::Utils::CmdLineParser::Arg *)((char *)v11 + 8);
      ++v7;
    }
    while (v7 != 15);
    if (!ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)v11, (char *)&v9, v2))
    {
      unsigned __int8 v11 = (ot::Utils::CmdLineParser::Arg *)((char *)v11 + 8);
      char v8 = 1;
    }
    if (ot::Utils::CmdLineParser::Arg::IsEmpty(v11) && v7)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (v8) {
        unsigned int v3 = otIp6RegisterMulticastListeners(InstancePtr, v13, v7, &v9, (uint64_t)ot::Cli::Interpreter::HandleMlrRegResult, a1);
      }
      else {
        unsigned int v3 = otIp6RegisterMulticastListeners(InstancePtr, v13, v7, 0, (uint64_t)ot::Cli::Interpreter::HandleMlrRegResult, a1);
      }
      unsigned int v10 = v3;
      if (!v3) {
        return 36;
      }
    }
    else
    {
      return 7;
    }
  }
  return v10;
}

void ot::Cli::Interpreter::HandleMlrRegResult(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, unsigned __int8 a5)
{
}

{
  unsigned __int8 i;

  if (!a2)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "status %d, %d failed", a3, a5);
    for (unsigned __int8 i = 0; i < (int)a5; ++i)
      ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), a4 + 16 * i);
  }
  ot::Cli::Interpreter::OutputResult(a1, a2);
}

uint64_t ot::Cli::Interpreter::Process<1681249789ull>(uint64_t a1, const char **a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  unsigned int v12 = 0;
  char v11 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    Linkint Mode = otThreadGetLinkMode(InstancePtr);
    unsigned int v3 = ot::Cli::Interpreter::LinkModeToString(&LinkMode, v10);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", v3);
  }
  else
  {
    if (ot::Utils::CmdLineParser::Arg::operator!=(v13, "-"))
    {
      for (unsigned __int8 i = (unsigned char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v13); *i; ++i)
      {
        int v6 = (char)*i;
        switch(v6)
        {
          case 'd':
            char v11 = v11 & 0xFD | 2;
            break;
          case 'n':
            char v11 = v11 & 0xFB | 4;
            break;
          case 'r':
            char v11 = v11 & 0xFE | 1;
            break;
          default:
            return 7;
        }
      }
    }
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadSetLinkMode(v4, v11);
  }
  return v12;
}

uint64_t ot::Cli::Interpreter::Process<11302599500980265950ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "[");
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "15.4");
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "]");
  }
  else
  {
    return 35;
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::Process<8023188516701246990ull>(uint64_t a1, const char **a2)
{
  uint64_t v22 = a1;
  unsigned __int8 v21 = a2;
  v20[4] = 0;
  __int16 v19 = 0;
  BOOL v2 = ot::Utils::CmdLineParser::Arg::operator==(a2, "table");
  *(_DWORD *)char v20 = v2;
  if (v2 || ot::Utils::CmdLineParser::Arg::operator==(v21, "list"))
  {
    if (v20[0])
    {
      ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
      ot::Cli::Output::OutputTableHeader<(unsigned char)16>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kNeighborTableTitles, ot::Cli::Interpreter::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kNeighborTableColumnWidths);
    }
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otThreadGetNextNeighborInfo(InstancePtr, &v19, (uint64_t)v24)) {
        break;
      }
      if (v20[0])
      {
        if ((v37 & 8) != 0) {
          char v4 = 67;
        }
        else {
          char v4 = 82;
        }
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %3c  ", v4);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| 0x%04x ", v27);
        uint64_t v5 = ot::ToUlong(v25);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %3lu ", v5);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %8d ", v32);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %9d ", v33);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%1d", v37 & 1);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%1d", (v37 & 2) != 0);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%1d", (v37 & 4) != 0);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|%3d", v28);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| ");
        ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v24);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " |%3d|", v36);
        int v6 = (ot::Cli::OutputImplementer **)(a1 + 16);
        if ((v37 & 8) != 0) {
          ot::Cli::Output::OutputFormat(v6, "         NA |");
        }
        else {
          ot::Cli::Output::OutputFormat(v6, "    %7d |");
        }
        unsigned __int8 v7 = (ot::Cli::OutputImplementer **)(a1 + 16);
        if ((v37 & 8) != 0) {
          ot::Cli::Output::OutputFormat(v7, "          NA |");
        }
        else {
          ot::Cli::Output::OutputFormat(v7, "     %7d |");
        }
        char v8 = (ot::Cli::OutputImplementer **)(a1 + 16);
        if ((v37 & 8) != 0) {
          ot::Cli::Output::OutputFormat(v8, "          NA |", v29);
        }
        else {
          ot::Cli::Output::OutputFormat(v8, "     %7d |", v29);
        }
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " %d.%02d%%", v31 / 0x64, v31 % 0x64);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "| %d.%02d%%", v30 / 0x64, v30 % 0x64);
      }
      else
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "0x%04x ", v27);
      }
    }
    ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "linkquality"))
  {
    ot::Cli::Output::OutputTableHeader<(unsigned char)7>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kLinkQualityTableTitles, ot::Cli::Interpreter::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kLinkQualityTableColumnWidths);
    while (1)
    {
      uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otThreadGetNextNeighborInfo(v9, &v19, (uint64_t)v24)) {
        break;
      }
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| 0x%04x | ", v27);
      ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v24);
      unsigned int v10 = ot::Cli::Output::PercentageToString(v34, v18);
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " | %9s %% ", v10);
      char v11 = ot::Cli::Output::PercentageToString(v35, v18);
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %7s %% ", v11);
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %7d ", v32);
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %8d ", v33);
      uint64_t v12 = ot::ToUlong(v25);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "| %5lu |", v12);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v21, "conntime"))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(v21 + 1, "list"))
    {
      v20[0] = 0;
    }
    else
    {
      v20[0] = 1;
      ot::Cli::Output::OutputTableHeader<(unsigned char)4>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kConnTimeTableTitles, ot::Cli::Interpreter::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kConnTimeTableColumnWidths);
    }
    while (1)
    {
      uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otThreadGetNextNeighborInfo(v13, &v19, (uint64_t)v24)) {
        break;
      }
      if (v20[0])
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| 0x%04x | ", v27);
        ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v24);
        otConvertDurationInSecondsToString(v25, v23, 21);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " | %16s", v23);
        otConvertDurationInSecondsToString(v26, v23, 21);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), " | %16s |", v23);
      }
      else
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "0x%04x ", v27);
        ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v24);
        uint64_t v16 = ot::ToUlong(v25);
        uint64_t v14 = ot::ToUlong(v26);
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), " age:%lu conn-time:%lu", v16, v14);
      }
    }
  }
  else
  {
    *(_DWORD *)&v20[1] = 7;
  }
  return *(unsigned int *)&v20[1];
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)16>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 0x10u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)16>(a1, a2, a3);
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)4>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 4u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)4>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<31998349810021265ull>(uint64_t a1)
{
  ot::Cli::Output::OutputTableHeader<(unsigned char)2>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<31998349810021265ull>(ot::Utils::CmdLineParser::Arg *)::kNetstatTableTitles, ot::Cli::Interpreter::Process<31998349810021265ull>(ot::Utils::CmdLineParser::Arg *)::kNetstatTableColumnWidths);
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  for (uint64_t i = otUdpGetSockets(InstancePtr); i; uint64_t i = *(void *)(i + 64))
  {
    otIp6SockAddrToString(i, v5, 48);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %-47s ", v5);
    otIp6SockAddrToString(i + 18, v5, 48);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "| %-47s |", v5);
  }
  return 0;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)2>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 2u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)2>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<27876329803337845ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  unsigned int v12 = 35;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    unsigned int v11 = 0;
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otServerGetNextService(InstancePtr, &v11, (uint64_t)v15)) {
        break;
      }
      ot::Cli::NetworkData::OutputService((ot::Cli::OutputImplementer **)(a1 + 112), v15);
    }
    return 0;
  }
  else
  {
    unsigned __int16 v10 = 0;
    unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)v13 + 1, (char *)&v17, v2);
    if (!v12)
    {
      unsigned __int16 v10 = 252;
      unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v13 + 2, (char *)&v10, v19, v4);
      if (!v12)
      {
        if (v10)
        {
          char v18 = v10;
          if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v13, "add"))
          {
            unsigned __int16 v10 = 248;
            unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v13 + 3, (char *)&v10, v22, v5);
            if (!v12)
            {
              if (v10)
              {
                char v21 = v10;
                char v20 = v20 & 0xFE | 1;
                uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
                return otServerAddService(v6, (uint64_t)v16);
              }
              else
              {
                return 7;
              }
            }
          }
          else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v13, "remove"))
          {
            uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
            return otServerRemoveService(v7, v17, (uint64_t)v19, v18);
          }
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return v12;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsHexString(ot::Utils::CmdLineParser **this, char *a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  return ot::Utils::CmdLineParser::ParseAsHexString(*this, a2, a3, a4);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsHexString(this, a2, a3, a4);
}

uint64_t ot::Cli::Interpreter::Process<26794857157895015ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::NetworkData::Process((ot::Cli::NetworkData *)(a1 + 112), a2);
}

uint64_t ot::Cli::Interpreter::Process<5126223071761830632ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, otThreadGetNetworkIdTimeout, (unsigned __int8 *)otThreadSetNetworkIdTimeout);
}

uint64_t ot::Cli::Interpreter::Process<2882870027264844783ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otThreadGetNetworkKey(InstancePtr, (uint64_t)v9);
    ot::Cli::Output::OutputBytesLine<(unsigned char)16>((ot::Cli::OutputImplementer **)(a1 + 16), v9);
  }
  else
  {
    unsigned int v6 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>(a2, v8);
    if (!v6)
    {
      uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otThreadSetNetworkKey(v3, (uint64_t)v8);
    }
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::Process<11015563977516890969ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<char const*>(a1, a2, (uint64_t (*)(uint64_t))otThreadGetNetworkName, (unsigned int (*)(uint64_t, uint64_t))otThreadSetNetworkName);
}

uint64_t ot::Cli::Interpreter::Process<30913625955023990ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  char v14 = 10;
  __int16 v13 = -2;
  unsigned int v12 = 0;
  unsigned __int16 v11 = 0;
  unsigned __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    ot::Cli::Output::OutputTableHeader<(unsigned char)3>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<30913625955023990ull>(ot::Utils::CmdLineParser::Arg *)::kNextHopTableTitles, ot::Cli::Interpreter::Process<30913625955023990ull>(ot::Utils::CmdLineParser::Arg *)::kNextHopTableColumnWidths);
    for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otThreadIsRouterIdAllocated(InstancePtr, i))
      {
        unsigned __int16 v11 = i << 10;
        uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        otThreadGetNextHopAndPathCost(v4, v11, &v10, &v9);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %4u | ", i);
        if (v10 == 65534) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%4s | %4s |", "-", "-");
        }
        else {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%4u | %4u |", (int)v10 >> 10, v9);
        }
      }
    }
  }
  else
  {
    unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v15, (char *)&v11, v2);
    if (!v12)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadGetNextHopAndPathCost(v5, v11, &v10, &v9);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "0x%04x cost:%u", v10, v9);
    }
  }
  return v12;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)3>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 3u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)3>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<7248134557998169864ull>(uint64_t a1, const char **a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "topology"))
  {
    v5 &= 0xFCu;
    for (++v7; !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v7); ++v7)
    {
      if (ot::Utils::CmdLineParser::Arg::operator==(v7, "ip6-addrs"))
      {
        char v5 = v5 & 0xFE | 1;
      }
      else
      {
        if (!ot::Utils::CmdLineParser::Arg::operator==(v7, "children")) {
          return 7;
        }
        char v5 = v5 & 0xFD | 2;
      }
    }
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int v6 = otMeshDiagDiscoverTopology(InstancePtr, &v5, (uint64_t)ot::Cli::Interpreter::HandleMeshDiagDiscoverDone, a1);
    if (!v6) {
      return 36;
    }
  }
  else
  {
    return 35;
  }
  return v6;
}

void ot::Cli::Interpreter::HandleMeshDiagDiscoverDone(int a1, const unsigned __int8 *a2, uint64_t a3)
{
}

void ot::Cli::Interpreter::HandleMeshDiagDiscoverDone(uint64_t a1, int a2, const unsigned __int8 *a3)
{
  uint64_t v22 = a1;
  int v21 = a2;
  char v20 = a3;
  if (a3)
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "id:%02u rloc16:0x%04x ext-addr:", v20[10], *((unsigned __int16 *)v20 + 4));
    ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v20);
    if (*((unsigned __int16 *)v20 + 6) != 0xFFFF) {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " ver:%u", *((unsigned __int16 *)v20 + 6));
    }
    if (v20[14]) {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " - me");
    }
    if ((v20[14] & 2) != 0) {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " - parent");
    }
    if ((v20[14] & 4) != 0) {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " - leader");
    }
    if ((v20[14] & 8) != 0) {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " - br");
    }
    ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
    for (unsigned __int8 i = 3; i; --i)
    {
      char v18 = 0;
      int v17 = v20 + 15;
      uint64_t v16 = v20 + 15;
      uint64_t v15 = v20 + 78;
      while (v16 != v15)
      {
        unsigned __int8 v14 = 0;
        unsigned __int8 v14 = *v16;
        if (v14 == i)
        {
          char v18 = 1;
          break;
        }
        ++v16;
      }
      if (v18)
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "%u-links:{ ", i);
        for (unsigned __int8 j = 0; j < 0x3FuLL; ++j)
        {
          if (v20[j + 15] == i) {
            ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%02u ", j);
          }
        }
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "}");
      }
    }
    if (*((void *)v20 + 10))
    {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "ip6-addrs:");
      while (!otMeshDiagGetNextIp6Address(*((void *)v20 + 10), (uint64_t)v12))
      {
        ot::Cli::Output::OutputSpaces((ot::Cli::OutputImplementer **)(a1 + 16), 8u);
        ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(a1 + 16), (uint64_t)v12);
      }
    }
    if (*((void *)v20 + 11))
    {
      char v7 = 1;
      while (!otMeshDiagGetNextChildInfo(*((void *)v20 + 11), (uint64_t)&v9))
      {
        if (v7)
        {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "children:");
          char v7 = 0;
        }
        int v4 = v9;
        int v5 = v10[1];
        uint64_t v3 = ot::Cli::Interpreter::LinkModeToString(v10, v8);
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), 8u, "rloc16:0x%04x lq:%u, mode:%s", v4, v5, v3);
        if (v11) {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " - me");
        }
        if ((v11 & 2) != 0) {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " - br");
        }
        ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
      }
      if (v7) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), 4u, "children: none");
      }
    }
  }
  ot::Cli::Interpreter::OutputResult(a1, v21);
}

uint64_t ot::Cli::Interpreter::Process<424573284472ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 PanId = otLinkGetPanId(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "0x%04x", PanId);
  }
  else
  {
    return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, a2, (unsigned __int8 *)otLinkSetPanId);
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::Process<125538443212822ull>(uint64_t a1, const char **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int ParentInfo = otThreadGetParentInfo(InstancePtr, (uint64_t)v9);
    if (!ParentInfo)
    {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Ext Addr: ");
      ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(a1 + 16), v9);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Rloc: %x", v10);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link Quality In: %u", v11);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link Quality Out: %u", v12);
      uint64_t v3 = ot::ToUlong(v13);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Age: %lu", v3);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Version: %u", v14);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL clock accuracy: %u", v15);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "CSL uncertainty: %u", v16);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "search"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadSearchForBetterParent(v4);
  }
  else
  {
    return 7;
  }
  return ParentInfo;
}

uint64_t ot::Cli::Interpreter::Process<16244709273642014994ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<signed char>(a1, a2, otThreadGetParentPriority, (unsigned __int8 *)otThreadSetParentPriority);
}

uint64_t ot::Cli::Interpreter::ProcessGetSet<signed char>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t), unsigned __int8 *a4)
{
  unsigned int v6 = ot::Cli::Interpreter::ProcessGet<signed char>(a1, a2, a3);
  if (v6) {
    return ot::Cli::Interpreter::ProcessSet<signed char>(a1, (ot::Utils::CmdLineParser **)a2, a4);
  }
  return v6;
}

{
  return ot::Cli::Interpreter::ProcessGetSet<signed char>(a1, a2, a3, a4);
}

uint64_t ot::Cli::Interpreter::HandlePingReply(uint64_t a1, uint64_t a2)
{
  return ot::Cli::Interpreter::HandlePingReply(a2, a1);
}

{
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%u bytes from ", (unsigned __int16)(*(_WORD *)(a2 + 18) + 8));
  ot::Cli::Output::OutputIp6Address((ot::Cli::OutputImplementer **)(a1 + 16), a2);
  return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), ": icmp_seq=%u hlim=%u time=%ums", *(unsigned __int16 *)(a2 + 20), *(unsigned __int8 *)(a2 + 22), *(unsigned __int16 *)(a2 + 16));
}

void ot::Cli::Interpreter::HandlePingStatistics(unsigned __int16 *a1, uint64_t a2)
{
}

void ot::Cli::Interpreter::HandlePingStatistics(uint64_t a1, unsigned __int16 *a2)
{
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%u packets transmitted, %u packets received.", *a2, a2[1]);
  if (*a2 && (a2[6] & 1) == 0 && a2[1] <= (int)*a2)
  {
    unsigned int v4 = 1000 * (*a2 - a2[1]) / *a2;
    uint64_t v2 = ot::ToUlong(v4 / 0xA);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " Packet loss = %lu.%u%%.", v2, v4 % 0xA);
  }
  if (a2[1]) {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " Round-trip min/avg/max = %u/%u.%u/%u ms.", a2[4], (unsigned __int16)(1000 * *((_DWORD *)a2 + 1) / a2[1] / 0x3E8), 1000 * *((_DWORD *)a2 + 1) / a2[1] % 0x3E8, a2[5]);
  }
  ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  if ((*(unsigned char *)(a1 + 447) & 1) == 0) {
    ot::Cli::Interpreter::OutputResult(a1, 0);
  }
}

uint64_t ot::Cli::Interpreter::Process<1715061262ull>(ot::Cli::OutputImplementer **a1, const char **a2)
{
  char v20 = a1;
  __int16 v19 = a2;
  unsigned int v18 = 0;
  char v16 = 0;
  char v15 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "stop"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 2));
    otPingSenderStop(InstancePtr);
  }
  else
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(v19, "async"))
    {
      char v16 = 1;
      ++v19;
    }
    memset(__b, 0, sizeof(__b));
    if (ot::Utils::CmdLineParser::Arg::operator==(v19, "-I"))
    {
      unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v19 + 1, (uint64_t)__b);
      if (v18) {
        return v18;
      }
      char v14 = 0;
      uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 2));
      uint64_t UnicastAddresses = otIp6GetUnicastAddresses(v3);
      for (uint64_t i = UnicastAddresses; i; uint64_t i = *(void *)(i + 24))
      {
        if (otIp6IsAddressEqual(i, (uint64_t)__b))
        {
          char v14 = 1;
          break;
        }
      }
      if ((v14 & 1) == 0) {
        return 7;
      }
      v19 += 2;
    }
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 2));
    unsigned int v18 = ot::Cli::Interpreter::ParseToIp6Address(v4, v19, (uint64_t)&__b[2], &v15);
    if (!v18)
    {
      if (v15)
      {
        ot::Cli::Output::OutputFormat(a1 + 2, "Pinging synthesized IPv6 address: ");
        ot::Cli::Output::OutputIp6AddressLine(a1 + 2, (uint64_t)&__b[2]);
      }
      if ((ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v19 + 1))
         || (unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v19 + 1, (char *)&__b[7], v5)) == 0)&& (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v19 + 2))|| (unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v19 + 2, (char *)&__b[7] + 2, v6)) == 0)&& (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v19 + 3))|| (unsigned int v18 = ot::Cli::Interpreter::ParsePingInterval((ot::Cli::Interpreter *)a1, (const ot::Utils::CmdLineParser::Arg *)(v19 + 3), (unsigned int *)&__b[7] + 1)) == 0))
      {
        if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v19 + 4)))
        {
          unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v19 + 4, (char *)&__b[8] + 2, v7);
          if (v18) {
            return v18;
          }
          BYTE3(__b[8]) = BYTE2(__b[8]) == 0;
        }
        if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v19 + 5)))
        {
          unsigned int v11 = 0;
          unsigned int v18 = ot::Cli::Interpreter::ParsePingInterval((ot::Cli::Interpreter *)a1, (const ot::Utils::CmdLineParser::Arg *)(v19 + 5), &v11);
          if (v18) {
            return v18;
          }
          if (v11 >= 0x10000) {
            return 7;
          }
          LOWORD(__b[8]) = v11;
        }
        if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v19 + 6)))
        {
          __b[4] = ot::Cli::Interpreter::HandlePingReply;
          __b[5] = ot::Cli::Interpreter::HandlePingStatistics;
          void __b[6] = a1;
          uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 2));
          unsigned int v18 = otPingSenderPing(v8, (uint64_t)__b);
          if (!v18)
          {
            *((unsigned char *)a1 + 447) = *((unsigned char *)a1 + 447) & 0xFE | v16 & 1;
            if ((v16 & 1) == 0) {
              return 36;
            }
          }
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return v18;
}

uint64_t ot::Cli::Interpreter::Process<7673476305065732077ull>(uint64_t a1)
{
  return 0;
}

uint64_t ot::Cli::Interpreter::Process<16863212019509908256ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned int>(a1, a2, otLinkGetPollPeriod, (unsigned __int8 *)otLinkSetPollPeriod);
}

uint64_t ot::Cli::Interpreter::Process<14555083096433720913ull>(uint64_t a1, const char **a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = a2;
  unsigned int v11 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    char Promiscuous = 0;
    if (otLinkIsPromiscuous(InstancePtr))
    {
      ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      char Promiscuous = otPlatRadioGetPromiscuous();
    }
    ot::Cli::Output::OutputEnabledDisabledStatus((ot::Cli::OutputImplementer **)(a1 + 16), Promiscuous & 1);
  }
  else
  {
    char v10 = 0;
    unsigned int v11 = ot::Cli::Interpreter::ParseEnableOrDisable(v12, (const ot::Utils::CmdLineParser::Arg *)&v10, v2);
    if (!v11)
    {
      if ((v10 & 1) == 0)
      {
        uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        otLinkSetPcapCallback(v4, 0, 0);
      }
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int v11 = otLinkSetPromiscuous(v5, v10 & 1);
      if (!v11 && (v10 & 1) != 0)
      {
        uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
        otLinkSetPcapCallback(v6, (uint64_t)ot::Cli::Interpreter::HandleLinkPcapReceive, a1);
      }
    }
  }
  return v11;
}

uint64_t ot::Cli::Interpreter::HandleLinkPcapReceive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::Cli::Interpreter::HandleLinkPcapReceive(a3, a1);
}

uint64_t ot::Cli::Interpreter::HandleLinkPcapReceive(uint64_t a1, uint64_t a2)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v13, (uint64_t)"void ot::Cli::Interpreter::HandleLinkPcapReceive(const otRadioFrame *, BOOL)", 7133);
      _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "%s:%d: #PARISDBG", v13, 0x12u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v12, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging Module is not defined for SubSystem: %s, Category: %s", v12, 0x16u);
  }
  ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  for (unint64_t i = 0; i < 0x2C; ++i)
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "=");
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "[leunint64_t n = %3u]", *(unsigned __int16 *)(a2 + 8));
  for (unint64_t j = 0; j < 0x1C; ++j)
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "=");
  ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  for (unint64_t k = 0; k < *(unsigned __int16 *)(a2 + 8); k += 16)
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|");
    for (unint64_t m = 0; m < 0x10; ++m)
    {
      if (k + m >= *(unsigned __int16 *)(a2 + 8)) {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " ..");
      }
      else {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " %02X", *(unsigned __int8 *)(*(void *)a2 + k + m));
      }
    }
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "|");
    for (unint64_t n = 0; n < 0x10; ++n)
    {
      if (k + n >= *(unsigned __int16 *)(a2 + 8))
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " .");
      }
      else if (*(unsigned __int8 *)(*(void *)a2 + k + n) <= 0x1Fu {
             || *(unsigned __int8 *)(*(void *)a2 + k + n) >= 0x7Fu)
      }
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " ?");
      }
      else
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " %c", *(unsigned __int8 *)(*(void *)a2 + k + n));
      }
    }
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "|");
  }
  for (iunint64_t i = 0; ii < 0x53; ++ii)
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "-");
  return ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
}

uint64_t ot::Cli::Interpreter::ParsePrefix(ot **a1, void *a2)
{
  unsigned __int8 v12 = a1;
  unsigned int v11 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v10 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(v12, (uint64_t)v11);
  if (!v10)
  {
    for (++v12; !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v12); ++v12)
    {
      int v9 = 0;
      if (ot::Cli::Interpreter::ParsePreference((const char **)v12, &v9))
      {
        uint64_t CString = (unsigned char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v12);
        while (*CString)
        {
          unsigned int v2 = (char)*CString;
          BOOL v3 = v2 > 0x2D;
          uint64_t v4 = v2 - 45;
          if (v3)
          {
            uint64_t v6 = v4;
            char v5 = 1;
          }
          else
          {
            uint64_t v6 = v4;
            char v5 = 0;
          }
          if (v5) {
            return 7;
          }
          switch(v6)
          {
            case 0:
              goto LABEL_23;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 68:
              return 7;
            case 23:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFBFF | 0x400;
              goto LABEL_23;
            case 52:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFFF7 | 8;
              goto LABEL_23;
            case 54:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFFDF | 0x20;
              goto LABEL_23;
            case 55:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFFEF | 0x10;
              goto LABEL_23;
            case 65:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFDFF | 0x200;
              goto LABEL_23;
            case 66:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFF7F | 0x80;
              goto LABEL_23;
            case 67:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFFFB | 4;
              goto LABEL_23;
            case 69:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFFBF | 0x40;
              goto LABEL_23;
            case 70:
              *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFEFF | 0x100;
LABEL_23:
              ++CString;
              break;
            default:
              JUMPOUT(0);
          }
        }
      }
      else
      {
        *(_WORD *)((char *)v11 + 17) = *(_WORD *)((unsigned char *)v11 + 17) & 0xFFFC | v9 & 3;
      }
    }
  }
  return v10;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(ot **a1, uint64_t a2)
{
  return ot::Utils::CmdLineParser::ParseAsIp6Prefix(*a1, a2);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(a1, a2);
}

uint64_t ot::Cli::Interpreter::Process<129830133337582ull>(uint64_t a1, const char **a2)
{
  uint64_t v19 = a1;
  unsigned int v18 = (ot **)a2;
  unsigned int v17 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v16 = 0;
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otBorderRouterGetNextOnMeshPrefix(InstancePtr, &v16, (uint64_t)v15)) {
        break;
      }
      ot::Cli::NetworkData::OutputPrefix((ot::Cli::OutputImplementer **)(a1 + 112), (uint64_t)v15);
    }
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    if (!otBackboneRouterGetState(v3))
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (!otBackboneRouterGetDomainPrefix(v4, (uint64_t)v15))
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "- ");
        ot::Cli::NetworkData::OutputPrefix((ot::Cli::OutputImplementer **)(a1 + 112), (uint64_t)v15);
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v18, "add"))
  {
    unsigned int v17 = ot::Cli::Interpreter::ParsePrefix(v18 + 1, v14);
    if (!v17)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otBorderRouterAddOnMeshPrefix(v5, (uint64_t)v14);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v18, "remove"))
  {
    unsigned int v17 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(v18 + 1, (uint64_t)v13);
    if (!v17)
    {
      uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otBorderRouterRemoveOnMeshPrefix(v6, (uint64_t)v13);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v18, "meshlocal"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v18 + 1)))
    {
      uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadGetMeshLocalPrefix(v7);
      ot::Cli::Output::OutputIp6PrefixLine((ot::Cli::OutputImplementer **)(a1 + 16), v8);
    }
    else
    {
      unsigned int v17 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(v18 + 1, (uint64_t)v12);
      if (!v17)
      {
        if (v12[16] == 64)
        {
          uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
          return otThreadSetMeshLocalPrefix(v9, (uint64_t)v12);
        }
        else
        {
          return 7;
        }
      }
    }
  }
  else
  {
    return 35;
  }
  return v17;
}

uint64_t ot::Cli::Interpreter::Process<8228328825147909356ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, a2, (unsigned __int8 *)otThreadSetPreferredRouterId);
}

uint64_t ot::Cli::Interpreter::Process<15435009332132253075ull>(uint64_t a1, const char **a2)
{
  uint64_t v11 = a1;
  unsigned int v10 = a2;
  unsigned int v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    char IsRadioFilterEnabled = otLinkIsRadioFilterEnabled(InstancePtr);
    ot::Cli::Output::OutputEnabledDisabledStatus((ot::Cli::OutputImplementer **)(a1 + 16), IsRadioFilterEnabled & 1);
  }
  else
  {
    char v8 = 0;
    unsigned int v9 = ot::Cli::Interpreter::ParseEnableOrDisable(v10, (const ot::Utils::CmdLineParser::Arg *)&v8, v2);
    if (!v9)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otLinkSetRadioFilterEnabled(v5, v8 & 1);
    }
  }
  return v9;
}

uint64_t ot::Cli::Interpreter::Process<7308159ull>(uint64_t a1, const char **a2)
{
  unsigned int v5 = 0;
  ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  VersionString = (const char *)otPlatRadioGetVersionString();
  if (VersionString == otGetVersionString())
  {
    return 12;
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "version"))
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", VersionString);
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::Cli::Interpreter::Process<119073513618444ull>(uint64_t a1, const char **a2)
{
  uint64_t v10 = a1;
  unsigned int v9 = a2;
  Regiounint64_t n = 0;
  unsigned __int16 v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    Regiounint64_t n = otPlatRadioGetRegion(InstancePtr, &v7);
    if (!Region) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%c%c", (int)v7 >> 8, v7);
    }
  }
  else if ((unsigned __int16)ot::Utils::CmdLineParser::Arg::GetLength(v9) == 2)
  {
    __int16 v5 = *(char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v9) << 8;
    unsigned __int16 v7 = *(char *)(ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v9) + 1) + v5;
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otPlatRadioSetRegion(v3, v7);
  }
  else
  {
    return 7;
  }
  return Region;
}

uint64_t ot::Cli::Interpreter::Process<13738210911291060331ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  return ot::Cli::Interpreter::ProcessSet<unsigned char>(a1, a2, (unsigned __int8 *)otThreadReleaseRouterId);
}

uint64_t ot::Cli::Interpreter::Process<58431844188429ull>(uint64_t a1)
{
  uint64_t v4 = (ot::Cli::OutputImplementer **)(a1 + 16);
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  unsigned __int16 Rloc16 = otThreadGetRloc16(InstancePtr);
  ot::Cli::Output::OutputLine(v4, "%04x", Rloc16);
  return 0;
}

uint64_t ot::Cli::Interpreter::ParseRoute(ot **a1, void *a2)
{
  char v8 = a1;
  unsigned __int16 v7 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v6 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(v8, (uint64_t)v7);
  if (!v6)
  {
    for (++v8; !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v8); ++v8)
    {
      int v5 = 0;
      if (ot::Cli::Interpreter::ParsePreference((const char **)v8, &v5))
      {
        for (unint64_t i = (unsigned char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v8); *i; ++i)
        {
          int v3 = (char)*i;
          if (v3 != 45)
          {
            if (v3 == 110)
            {
              *((unsigned char *)v7 + 20) = *((unsigned char *)v7 + 20) & 0xFB | 4;
            }
            else
            {
              if (v3 != 115) {
                return 7;
              }
              *((unsigned char *)v7 + 20) = *((unsigned char *)v7 + 20) & 0xF7 | 8;
            }
          }
        }
      }
      else
      {
        *((unsigned char *)v7 + 20) = *((unsigned char *)v7 + 20) & 0xFC | v5 & 3;
      }
    }
  }
  return v6;
}

uint64_t ot::Cli::Interpreter::Process<428984388969ull>(uint64_t a1, const char **a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = (ot **)a2;
  unsigned int v11 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v10 = 0;
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (otBorderRouterGetNextRoute(InstancePtr, &v10, (uint64_t)v9)) {
        break;
      }
      ot::Cli::NetworkData::OutputRoute((ot::Cli::OutputImplementer **)(a1 + 112), (uint64_t)v9);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v12, "add"))
  {
    unsigned int v11 = ot::Cli::Interpreter::ParseRoute(v12 + 1, v8);
    if (!v11)
    {
      uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otBorderRouterAddRoute(v3, (uint64_t)v8);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v12, "remove"))
  {
    unsigned int v11 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Prefix(v12 + 1, (uint64_t)v7);
    if (!v11)
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otBorderRouterRemoveRoute(v4, (uint64_t)v7);
    }
  }
  else
  {
    return 35;
  }
  return v11;
}

uint64_t ot::Cli::Interpreter::Process<123344230057719ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = a2;
  unsigned int RouterInfo = 0;
  unsigned char v10[2] = 0;
  BOOL v2 = ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "table");
  *(_WORD *)unsigned int v10 = v2;
  if (v2 || ot::Utils::CmdLineParser::Arg::operator==((const char **)v12, "list"))
  {
    if (v10[0]) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)9>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<123344230057719ull>(ot::Utils::CmdLineParser::Arg *)::kRouterTableTitles, ot::Cli::Interpreter::Process<123344230057719ull>(ot::Utils::CmdLineParser::Arg *)::kRouterTableColumnWidths);
    }
    ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 MaxRouterId = otThreadGetMaxRouterId();
    for (unsigned __int8 i = 0; i <= (int)MaxRouterId; ++i)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      if (!otThreadGetRouterInfo(InstancePtr, i, (uint64_t)v14))
      {
        if (v10[0])
        {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %2u ", v16);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| 0x%04x ", v15);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %8u ", v17);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %9u ", v18);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %5u ", v19);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %6u ", v20);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| %3u ", v21);
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "| ");
          ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), v14);
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), " | %4d |", (v22 & 2) != 0);
        }
        else
        {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%u ", i);
        }
      }
    }
    ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  }
  else
  {
    unsigned int RouterInfo = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v12, &v10[1], v3);
    if (!RouterInfo)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int RouterInfo = otThreadGetRouterInfo(v5, *(unsigned __int16 *)&v10[1], (uint64_t)v14);
      if (!RouterInfo)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Alloc: %d", v22 & 1);
        if (v22)
        {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Router ID: %u", v16);
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Rloc: %04x", v15);
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Next Hop: %04x", v17 << 10);
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link: %d", (v22 & 2) != 0);
          if ((v22 & 2) != 0)
          {
            ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "Ext Addr: ");
            ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(a1 + 16), v14);
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Cost: %u", v18);
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link Quality In: %u", v19);
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Link Quality Out: %u", v20);
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Age: %u", v21);
          }
        }
      }
    }
  }
  return RouterInfo;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)9>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 9u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)9>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<5021455550522604481ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, otThreadGetRouterDowngradeThreshold, (unsigned __int8 *)otThreadSetRouterDowngradeThreshold);
}

uint64_t ot::Cli::Interpreter::Process<1030263388783878400ull>(uint64_t a1, const char **a2)
{
  uint64_t v11 = a1;
  unsigned int v10 = a2;
  unsigned int v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    char IsRouterEligible = otThreadIsRouterEligible(InstancePtr);
    ot::Cli::Output::OutputEnabledDisabledStatus((ot::Cli::OutputImplementer **)(a1 + 16), IsRouterEligible & 1);
  }
  else
  {
    char v8 = 0;
    unsigned int v9 = ot::Cli::Interpreter::ParseEnableOrDisable(v10, (const ot::Utils::CmdLineParser::Arg *)&v8, v2);
    if (!v9)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return otThreadSetRouterEligible(v5, v8 & 1);
    }
  }
  return v9;
}

uint64_t ot::Cli::Interpreter::Process<10320315516056133487ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, otThreadGetRouterSelectionJitter, (unsigned __int8 *)otThreadSetRouterSelectionJitter);
}

uint64_t ot::Cli::Interpreter::Process<15712178869698907848ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, otThreadGetRouterUpgradeThreshold, (unsigned __int8 *)otThreadSetRouterUpgradeThreshold);
}

uint64_t ot::Cli::Interpreter::Process<15073379119283750636ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, a2, otThreadGetChildRouterLinks, (unsigned __int8 *)otThreadSetChildRouterLinks);
}

uint64_t ot::Cli::Interpreter::Process<9036270695828403958ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v22 = a1;
  unsigned __int8 v21 = a2;
  unsigned int RssiOffset = 0;
  signed __int8 v19 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int RssiOffset = otPlatRadioGetRssiOffset(InstancePtr, (uint64_t)&v19, v4, v5, v6, v7, v8, v9);
    if (!RssiOffset) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%d", v19);
    }
  }
  else
  {
    unsigned int RssiOffset = ot::Utils::CmdLineParser::Arg::ParseAsInt8(v21, &v19, v2);
    if (!RssiOffset)
    {
      uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int RssiOffset = otPlatRadioSetRssiOffset(v10, v19, v11, v12, v13, v14, v15, v16);
      if (!RssiOffset) {
        persist_rssi_offset();
      }
    }
  }
  return RssiOffset;
}

uint64_t ot::Cli::Interpreter::Process<1830284035ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  unsigned int active = 0;
  unsigned int v11 = 0;
  unsigned __int16 v10 = 0;
  char v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "energy"))
  {
    char v9 = 1;
    if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)++v13))
    {
      unsigned int active = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v13, (char *)&v10, v2);
      if (active) {
        return active;
      }
      ++v13;
    }
  }
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v13)) {
    goto LABEL_10;
  }
  unsigned __int8 v8 = 0;
  unsigned int active = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v13, (char *)&v8, v3);
  if (!active)
  {
    if (v8 >= 0x20uLL) {
      return 7;
    }
    unsigned int v11 = 1 << v8;
LABEL_10:
    if (v9)
    {
      ot::Cli::Output::OutputTableHeader<(unsigned char)2>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<1830284035ull>(ot::Utils::CmdLineParser::Arg *)::kEnergyScanTableTitles, ot::Cli::Interpreter::Process<1830284035ull>(ot::Utils::CmdLineParser::Arg *)::kEnergyScanTableColumnWidths);
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int active = otLinkEnergyScan(InstancePtr, v11, v10, (uint64_t)ot::Cli::Interpreter::HandleEnergyScanResult, a1);
      if (active) {
        return active;
      }
    }
    else
    {
      ot::Cli::Output::OutputTableHeader<(unsigned char)5>((ot::Cli::OutputImplementer **)(a1 + 16), (const char *const *)ot::Cli::Interpreter::Process<1830284035ull>(ot::Utils::CmdLineParser::Arg *)::kScanTableTitles, ot::Cli::Interpreter::Process<1830284035ull>(ot::Utils::CmdLineParser::Arg *)::kScanTableColumnWidths);
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int active = otLinkActiveScan(v5, v11, v10, (uint64_t)ot::Cli::Interpreter::HandleActiveScanResult, a1);
      if (active) {
        return active;
      }
    }
    return 36;
  }
  return active;
}

void ot::Cli::Interpreter::HandleEnergyScanResult(unsigned __int8 *a1, uint64_t a2)
{
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)5>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 5u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)5>(a1, a2, a3);
}

ot::Cli::OutputImplementer **ot::Cli::Output::OutputBytes<(unsigned char)8>(ot::Cli::OutputImplementer **a1, const unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputBytes(a1, a2, 8u);
}

{
  return ot::Cli::Output::OutputBytes<(unsigned char)8>(a1, a2);
}

void ot::Cli::Interpreter::HandleEnergyScanResult(uint64_t a1, unsigned __int8 *a2)
{
  if (a2) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "| %2u | %4d |", *a2, (char)a2[1]);
  }
  else {
    ot::Cli::Interpreter::OutputResult(a1, 0);
  }
}

uint64_t ot::Cli::Interpreter::Process<603988223085374603ull>(uint64_t a1)
{
  uint64_t v3 = (ot::Cli::OutputImplementer **)(a1 + 16);
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  if (otThreadIsSingleton(InstancePtr)) {
    ot::Cli::Output::OutputLine(v3, "true", v3);
  }
  else {
    ot::Cli::Output::OutputLine(v3, "false", v3);
  }
  return 0;
}

uint64_t ot::Cli::Interpreter::Process<428983089745ull>(uint64_t a1, const char **a2)
{
  unsigned int v11 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int DeviceRole = otThreadGetDeviceRole(InstancePtr);
    uint64_t v4 = otThreadDeviceRoleToString(DeviceRole);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", v4);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "detached"))
  {
    uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadBecomeDetached(v5);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "child"))
  {
    uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadBecomeChild(v6);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "router"))
  {
    uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadBecomeRouter(v7);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "leader"))
  {
    uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadBecomeLeader(v8, 1);
  }
  else
  {
    return 7;
  }
  return v11;
}

uint64_t ot::Cli::Interpreter::Process<108232213406486ull>(uint64_t a1, const char **a2)
{
  unsigned int v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "start"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadSetEnabled(InstancePtr, 1);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "stop"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    return otThreadSetEnabled(v3, 0);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "version"))
  {
    Versiounint64_t n = otThreadGetVersion();
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%u", Version);
  }
  else
  {
    return 35;
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::Process<32002658098942360ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::Dataset::Process((ot::Cli::OutputImplementer **)(a1 + 96), a2);
}

uint64_t ot::Cli::Interpreter::Process<7741096949622271262ull>(uint64_t a1, const char **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)) {
    return 7;
  }
  else {
    return ot::Cli::Dataset::PrintKeychain((ot::Cli::OutputImplementer **)(a1 + 96), a2);
  }
}

uint64_t ot::Cli::Interpreter::Process<31452791250048641ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  unsigned int TransmitPower = 0;
  signed __int8 v13 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned int TransmitPower = otPlatRadioGetTransmitPower(InstancePtr, (uint64_t)&v13, v4, v5, v6, v7, v8, v9);
    if (!TransmitPower) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%d dBm", v13);
    }
  }
  else
  {
    unsigned int TransmitPower = ot::Utils::CmdLineParser::Arg::ParseAsInt8(v15, &v13, v2);
    if (!TransmitPower)
    {
      uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int TransmitPower = otPlatRadioSetTransmitPower(v10, v13);
      if (TransmitPower) {
        persist_tx_power();
      }
    }
  }
  return TransmitPower;
}

uint64_t ot::Cli::Interpreter::Process<7308417ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::UdpExample::Process((ot::Cli::UdpExample *)(a1 + 136), a2);
}

uint64_t ot::Cli::Interpreter::Process<807264858141456911ull>(uint64_t a1, const char **a2)
{
  uint64_t v11 = a1;
  uint64_t v10 = (ot::Utils::CmdLineParser **)a2;
  unsigned int v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "add"))
  {
    return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, v10 + 1, (unsigned __int8 *)otIp6AddUnsecurePort);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v10, "remove"))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v10 + 1, "all"))
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otIp6RemoveAllUnsecurePorts(InstancePtr);
    }
    else
    {
      return ot::Cli::Interpreter::ProcessSet<unsigned short>(a1, v10 + 1, (unsigned __int8 *)otIp6RemoveUnsecurePort);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v10, "get"))
  {
    uint64_t UnsecurePorts = 0;
    unsigned __int8 v7 = 0;
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t UnsecurePorts = otIp6GetUnsecurePorts(v3, &v7);
    if (UnsecurePorts)
    {
      for (unsigned __int8 i = 0; i < (int)v7; ++i)
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), "%u ", *(unsigned __int16 *)(UnsecurePorts + 2 * i));
    }
    ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
  }
  else
  {
    return 35;
  }
  return v9;
}

uint64_t ot::Cli::Interpreter::Process<109361222780952ull>(uint64_t a1, const char **a2)
{
  unsigned int v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otInstanceGetUptimeAsString(InstancePtr, v9, 24);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", v9);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "ms"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unint64_t Uptime = otInstanceGetUptime(v3);
    ot::Cli::Output::OutputUint64Line((ot::Cli::OutputImplementer **)(a1 + 16), Uptime);
  }
  else
  {
    return 7;
  }
  return v7;
}

uint64_t ot::Cli::Interpreter::Process<8091887532367674856ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::Commissioner::Process((ot::Cli::Commissioner *)(a1 + 352), a2);
}

uint64_t ot::Cli::Interpreter::Process<123344129789161ull>(uint64_t a1, const char **a2)
{
  return ot::Cli::Joiner::Process((ot::Cli::Joiner *)(a1 + 368), a2);
}

uint64_t ot::Cli::Interpreter::Process<1366262738558941672ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Interpreter::ProcessGetSet<unsigned short>(a1, a2, otThreadGetJoinerUdpPort, (unsigned __int8 *)otThreadSetJoinerUdpPort);
}

uint64_t ot::Cli::Interpreter::Process<16075074835862503559ull>(ot::Cli::OutputImplementer **a1, const char **a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    ot::Cli::Interpreter::PrintMacFilter(a1);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "addr"))
  {
    return ot::Cli::Interpreter::ProcessMacFilterAddress(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1));
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "rss"))
  {
    return ot::Cli::Interpreter::ProcessMacFilterRss(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1));
  }
  else
  {
    return 35;
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::PrintMacFilter(ot::Cli::OutputImplementer **this)
{
  signed __int8 v13 = this;
  char v12 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
  Addressint Mode = otLinkFilterGetAddressMode(InstancePtr);
  uint64_t v3 = (const char *)ot::Cli::Interpreter::MacFilterAddressModeToString(AddressMode);
  ot::Cli::Output::OutputLine(this + 2, "Address Mode: %s", v3);
  while (1)
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    if (otLinkFilterGetNextAddress(v4, &v12, (uint64_t)v14)) {
      break;
    }
    ot::Cli::Interpreter::OutputMacFilterEntry((uint64_t)this, (uint64_t)v14);
  }
  char v12 = 0;
  ot::Cli::Output::OutputLine(this + 2, "RssIn List:");
  while (1)
  {
    uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    uint64_t result = otLinkFilterGetNextRssIn(v5, &v12, (uint64_t)v14);
    if (result) {
      break;
    }
    for (unsigned __int8 i = 0; i < 8u && v14[i] == 255; ++i)
      ;
    if (i == 8)
    {
      int v9 = v15;
      uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      unsigned __int8 v8 = otLinkConvertRssToLinkQuality(v7, v15);
      ot::Cli::Output::OutputLine(this + 2, "Default rss : %d (lqi %u)", v9, v8);
    }
    else
    {
      ot::Cli::Interpreter::OutputMacFilterEntry((uint64_t)this, (uint64_t)v14);
    }
  }
  return result;
}

uint64_t ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned __int8 v20 = this;
  signed __int8 v19 = a2;
  unsigned int v18 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    char v17 = 0;
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    Addressint Mode = otLinkFilterGetAddressMode(InstancePtr);
    uint64_t v4 = (const char *)ot::Cli::Interpreter::MacFilterAddressModeToString(AddressMode);
    ot::Cli::Output::OutputLine(this + 2, "%s", v4);
    while (1)
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      if (otLinkFilterGetNextAddress(v5, &v17, (uint64_t)v21)) {
        break;
      }
      ot::Cli::Interpreter::OutputMacFilterEntry((uint64_t)this, (uint64_t)v21);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v19, "disable"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)v19 + 8)))
    {
      uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      otLinkFilterSetAddressMode(v6, 0);
    }
    else
    {
      return 7;
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v19, "allowlist"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)v19 + 8)))
    {
      uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      otLinkFilterSetAddressMode(v7, 1u);
    }
    else
    {
      return 7;
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v19, "denylist"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)v19 + 8)))
    {
      uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      otLinkFilterSetAddressMode(v8, 2u);
    }
    else
    {
      return 7;
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v19, "add"))
  {
    unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v19 + 1, v22);
    if (!v18)
    {
      uint64_t v9 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      unsigned int v18 = otLinkFilterAddAddress(v9, (uint64_t)v22);
      if ((!v18 || v18 == 24)
        && !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)v19 + 16)))
      {
        signed __int8 v16 = 0;
        unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsInt8((ot::Utils::CmdLineParser **)v19 + 2, &v16, v10);
        if (!v18)
        {
          uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
          return otLinkFilterAddRssIn(v11, (uint64_t)v22, v16);
        }
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v19, "remove"))
  {
    unsigned int v18 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v19 + 1, v22);
    if (!v18)
    {
      uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      otLinkFilterRemoveAddress(v12, (uint64_t)v22);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v19, "clear"))
  {
    uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    otLinkFilterClearAddresses(v13);
  }
  else
  {
    return 35;
  }
  return v18;
}

uint64_t ot::Cli::Interpreter::ProcessMacFilterRss(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v24 = this;
  unsigned int v23 = a2;
  unsigned int v22 = 0;
  char v21 = 0;
  signed __int8 v20 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      if (otLinkFilterGetNextRssIn(InstancePtr, &v21, (uint64_t)v26)) {
        break;
      }
      for (unsigned __int8 i = 0; i < 8u && v26[i] == 255; ++i)
        ;
      if (i == 8)
      {
        int v16 = v27;
        uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
        unsigned __int8 v4 = otLinkConvertRssToLinkQuality(v3, v27);
        ot::Cli::Output::OutputLine(this + 2, "Default rss: %d (lqi %u)", v16, v4);
      }
      else
      {
        ot::Cli::Interpreter::OutputMacFilterEntry((uint64_t)this, (uint64_t)v26);
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23, "add-lqi"))
  {
    unsigned __int8 v18 = 0;
    unsigned int v22 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v23 + 2, (char *)&v18, v5);
    if (!v22)
    {
      if (v18 <= 3u)
      {
        uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
        signed __int8 v20 = otLinkConvertLinkQualityToRss(v6, v18);
        if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23 + 1, "*"))
        {
          uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
          otLinkFilterSetDefaultRssIn(v7, v20);
        }
        else
        {
          unsigned int v22 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v23 + 1, v25);
          if (!v22)
          {
            uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
            return otLinkFilterAddRssIn(v8, (uint64_t)v25, v20);
          }
        }
      }
      else
      {
        return 7;
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23, "add"))
  {
    unsigned int v22 = ot::Utils::CmdLineParser::Arg::ParseAsInt8((ot::Utils::CmdLineParser **)v23 + 2, &v20, v9);
    if (!v22)
    {
      if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23 + 1, "*"))
      {
        uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
        otLinkFilterSetDefaultRssIn(v10, v20);
      }
      else
      {
        unsigned int v22 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v23 + 1, v25);
        if (!v22)
        {
          uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
          return otLinkFilterAddRssIn(v11, (uint64_t)v25, v20);
        }
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23, "remove"))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23 + 1, "*"))
    {
      uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
      otLinkFilterClearDefaultRssIn(v12);
    }
    else
    {
      unsigned int v22 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v23 + 1, v25);
      if (!v22)
      {
        uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
        otLinkFilterRemoveRssIn(v13, (uint64_t)v25);
      }
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v23, "clear"))
  {
    uint64_t v14 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(this + 2));
    otLinkFilterClearAllRssIn(v14);
  }
  else
  {
    return 35;
  }
  return v22;
}

uint64_t ot::Cli::Interpreter::MacFilterAddressModeToString(unsigned __int16 a1)
{
  return ot::Cli::Output::Stringify<otMacFilterAddressMode,(unsigned short)3>(a1, (uint64_t)ot::Cli::Interpreter::MacFilterAddressModeToString(otMacFilterAddressMode)::kModeStrings, (uint64_t)"unknown");
}

uint64_t ot::Cli::Interpreter::OutputMacFilterEntry(uint64_t a1, uint64_t a2)
{
  ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)(a1 + 16), (const unsigned __int8 *)a2);
  if (*(unsigned char *)(a2 + 8) != 127)
  {
    int v5 = *(char *)(a2 + 8);
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int8 v3 = otLinkConvertRssToLinkQuality(InstancePtr, *(unsigned char *)(a2 + 8));
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), " : rss %d (lqi %d)", v5, v3);
  }
  return ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(a1 + 16));
}

uint64_t ot::Cli::Output::Stringify<otMacFilterAddressMode,(unsigned short)3>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 3u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otMacFilterAddressMode,(unsigned short)3>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<6462319ull>(uint64_t a1, const char **a2)
{
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "retries"))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "direct"))
    {
      return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 2), otLinkGetMaxFrameRetriesDirect, (unsigned __int8 *)otLinkSetMaxFrameRetriesDirect);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2 + 1, "indirect"))
    {
      return ot::Cli::Interpreter::ProcessGetSet<unsigned char>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 2), otLinkGetMaxFrameRetriesIndirect, (unsigned __int8 *)otLinkSetMaxFrameRetriesIndirect);
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 35;
  }
}

uint64_t ot::Cli::Interpreter::Process<1433029466759137599ull>(uint64_t a1, const char **a2)
{
  uint64_t v38 = a1;
  char v37 = a2;
  int v36 = 0;
  uint64_t BufferStats = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  uint64_t BufferStats = otMessageGetBufferStats(InstancePtr);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v33);
  if (ot::Utils::CmdLineParser::Arg::operator==(v37, "enable"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otMessageSetIsBufferStatsEnabled(v3, 1);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "BufferStats is enabled");
    goto LABEL_32;
  }
  if (ot::Utils::CmdLineParser::Arg::operator==(v37, "disable"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otMessageSetIsBufferStatsEnabled(v4, 0);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "BufferStats is disabled");
    goto LABEL_32;
  }
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v37))
  {
    if (!ot::Utils::CmdLineParser::Arg::operator==(v37, "reset"))
    {
      int v36 = 7;
      goto LABEL_32;
    }
    uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    if (otMessageGetIsBufferStatsEnabled(v10))
    {
      uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otMessageResetBufferStats(v11);
      goto LABEL_32;
    }
    goto LABEL_26;
  }
  uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
  if ((otMessageGetIsBufferStatsEnabled(v5) & 1) == 0)
  {
LABEL_26:
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "BufferStats is disabled");
    goto LABEL_32;
  }
  for (unsigned __int16 i = 0; i < 0x100u; ++i)
  {
    unint64_t BufferAt = 0;
    uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unint64_t BufferAt = otMessageGetBufferAt(v6, i);
    std::string::basic_string[abi:nn180100]<0>(&v30, "");
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:nn180100]();
    std::string::~string(&v30);
    unsigned __int8 v18 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, "Buf");
    int v29 = std::setw[abi:nn180100](3);
    std::operator<<[abi:nn180100]<char,std::char_traits<char>>(v18, &v29);
    char v28 = std::setfill[abi:nn180100]<char>(48);
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v18, &v28);
    std::ostream::operator<<();
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, ":");
    std::ostream::operator<<();
    if ((*(unsigned char *)(BufferStats + 76 * i + 8) & 1) == 1) {
      std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, " (A), ");
    }
    else {
      std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, " (D), ");
    }
    int v16 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, "#A:");
    int v27 = std::setw[abi:nn180100](10);
    std::operator<<[abi:nn180100]<char,std::char_traits<char>>(v16, &v27);
    char v26 = std::setfill[abi:nn180100]<char>(48);
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v16, &v26);
    std::ostream::operator<<();
    char v17 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, ", #D:");
    int v25 = std::setw[abi:nn180100](10);
    std::operator<<[abi:nn180100]<char,std::char_traits<char>>(v17, &v25);
    char v24 = std::setfill[abi:nn180100]<char>(48);
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v17, &v24);
    std::ostream::operator<<();
    if (*(unsigned char *)(BufferStats + 76 * i + 9))
    {
      uint64_t v7 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, ", LastAllocTimestamp: ");
      std::operator<<[abi:nn180100]<std::char_traits<char>>(v7, (const char *)(BufferStats + 76 * i + 9));
    }
    if (*(unsigned char *)(BufferStats + 76 * i + 41))
    {
      uint64_t v8 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v34, ", LastDeallocTimestamp: ");
      std::operator<<[abi:nn180100]<std::char_traits<char>>(v8, (const char *)(BufferStats + 76 * i + 41));
    }
    os_log_t logging_obg = 0;
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.wpantund", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t oslog = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        log = oslog;
        os_log_type_t v15 = type;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:nn180100]();
        std::string::c_str[abi:nn180100]();
        __os_log_helper_16_2_1_8_32((uint64_t)v40, v9);
        _os_log_impl((void *)&_mh_execute_header, log, v15, "%s", v40, 0xCu);
        std::string::~string(&v20);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v39, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging Module is not defined for SubSystem: %s, Category: %s", v39, 0x16u);
    }
  }
LABEL_32:
  unsigned int v13 = v36;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v33);
  return v13;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:nn180100]()
{
  return std::stringbuf::str();
}

{
  return std::stringbuf::str();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, char *a2)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::operator<<[abi:nn180100]<char,std::char_traits<char>>(void *a1, int *a2)
{
}

void *std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, const char *a2)
{
  size_t v2 = std::char_traits<char>::length[abi:nn180100](a2);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)a2, v2);
}

uint64_t std::setw[abi:nn180100](int a1)
{
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v2, a1);
  return v2;
}

uint64_t std::setfill[abi:nn180100]<char>(char a1)
{
  std::__iom_t4<char>::__iom_t4[abi:nn180100](&v2, a1);
  return v2;
}

uint64_t ot::Cli::Interpreter::Process<17671613907470187241ull>(uint64_t a1, const char **a2)
{
  unsigned int v10 = 0;
  bzero(v12, 0xC00uLL);
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "tx") || ot::Utils::CmdLineParser::Arg::operator==(a2, "rx"))
  {
    if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
    {
      unsigned __int16 Length = ot::Utils::CmdLineParser::Arg::GetLength(a2 + 1);
      uint64_t CString = (char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(a2 + 1));
      BOOL v2 = ot::Utils::CmdLineParser::Arg::operator==(a2, "tx");
      unsigned int v10 = otPlatDecodeSpinel(CString, Length / 2, (uint64_t)v12, (uint64_t)&v13, v2, v3, v4, v5);
      if (!v10) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "%s", v12);
      }
    }
  }
  else
  {
    return 35;
  }
  return v10;
}

uint64_t ot::Cli::Interpreter::Process<7568758ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Vendor::ProcessGet((ot::Cli::OutputImplementer **)(a1 + 400), a2);
}

uint64_t ot::Cli::Interpreter::Process<7568770ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Vendor::ProcessSet((ot::Cli::OutputImplementer **)(a1 + 400), a2);
}

uint64_t ot::Cli::Interpreter::Process<4003642666868174351ull>(uint64_t a1, ot::Utils::CmdLineParser **a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  unsigned int v8 = 0;
  unsigned __int8 v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    otLinkGetFragmentSize(InstancePtr, &v7);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Fragment Size =  %d\n", v7);
  }
  else
  {
    unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v9, (char *)&v7, v2);
    if (!v8)
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otLinkSetFragmentSize(v4, v7);
    }
  }
  return v8;
}

uint64_t ot::Cli::Interpreter::Process<26788442918280547ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetVendorAntenna((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetVendorAntenna((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<123344279411948ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetVendorPower((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetVendorPower((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2);
  }
}

uint64_t ot::Cli::Interpreter::Process<25344ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetVendorCC((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetVendorCC((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<1682160129ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetVendorCore((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), "Core cannot be set");
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::Process<1863446782ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetVendorPCAP((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetVendorPCAP((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<8515342280977991932ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetPriority((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetPriority((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2);
  }
}

uint64_t ot::Cli::Interpreter::Process<1847388913ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetGPIO((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetGPIO((ot::Cli::Vendor *)(a1 + 400), a2);
  }
}

uint64_t ot::Cli::Interpreter::Process<6661984ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Vendor::ProcessGetMSFState((ot::Cli::Vendor *)(a1 + 400), a2);
}

uint64_t ot::Cli::Interpreter::Process<6402142ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  return ot::Cli::Vendor::ProcessGetVendorPTB((ot::Cli::OutputImplementer **)(a1 + 400), a2);
}

uint64_t ot::Cli::Interpreter::Process<28154531598088808ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetBackOff((ot::Cli::OutputImplementer **)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetBackOff((ot::Cli::OutputImplementer **)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<123386246804248ull>(uint64_t a1, const char **a2)
{
  unsigned int v4 = 7;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "name"))
  {
    return ot::Cli::Interpreter::ProcessGet<char const*>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), (uint64_t (*)(uint64_t))otThreadGetVendorName);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "model"))
  {
    return ot::Cli::Interpreter::ProcessGet<char const*>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), (uint64_t (*)(uint64_t))otThreadGetVendorModel);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "swversion"))
  {
    return ot::Cli::Interpreter::ProcessGet<char const*>(a1, (ot::Utils::CmdLineParser::Arg *)(a2 + 1), (uint64_t (*)(uint64_t))otThreadGetVendorSwVersion);
  }
  return v4;
}

uint64_t ot::Cli::Interpreter::ProcessGet<char const*>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t))
{
  unsigned int v8 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t v6 = (char *)ot::Cli::Interpreter::FormatStringFor<char const*>();
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t v4 = a3(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), v6, v4);
  }
  else
  {
    return 7;
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessGet<char const*>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::Process<5255620471931187573ull>(uint64_t a1, const char **a2)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  unsigned int v11 = 0;
  unsigned __int8 v9 = 0;
  unsigned int v11 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(a2 + 1, (uint64_t)v10);
  if (!v11)
  {
    for (unsigned __int16 i = (ot::Utils::CmdLineParser **)(v12 + 2);
          !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)i);
          ++i)
    {
      if (v9 >= 0x13uLL) {
        return 7;
      }
      uint64_t v3 = v9++;
      unsigned int v11 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(i, (char *)&v14[v3], v2);
      if (v11) {
        return v11;
      }
    }
    if (ot::Utils::CmdLineParser::Arg::operator==(v12, "get"))
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      unsigned int v11 = otThreadSendDiagnosticGet(InstancePtr, (uint64_t)v10, v14, v9, (uint64_t)ot::Cli::Interpreter::HandleDiagnosticGetResponse, a1);
      if (!v11)
      {
        ot::Cli::Interpreter::SetCommandTimeout((ot::Cli::Interpreter *)a1, 0x1388u);
        return 36;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(v12, "reset"))
    {
      uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      otThreadSendDiagnosticReset(v5, (uint64_t)v10, v14, v9);
      IgnoreError();
    }
    else
    {
      return 35;
    }
  }
  return v11;
}

uint64_t ot::Cli::Interpreter::HandleDiagnosticGetResponse(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ot::Cli::Interpreter::HandleDiagnosticGetResponse(a4, a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::HandleDiagnosticGetResponse(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = result;
  int v19 = a2;
  uint64_t v18 = a3;
  uint64_t v17 = a4;
  uint64_t v10 = result;
  unsigned __int16 v16 = 0;
  __int16 v15 = 0;
  unsigned __int16 v14 = 0;
  unsigned __int16 v13 = 0;
  if (!a2)
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(result + 16), "DIAG_GET.rsp/ans from ");
    ot::Cli::Output::OutputIp6Address((ot::Cli::OutputImplementer **)(v10 + 16), v17 + 16);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(v10 + 16), ": ");
    __int16 Length = otMessageGetLength(v18);
    unsigned __int16 v14 = Length - otMessageGetOffset(v18);
    while (v14)
    {
      unsigned __int16 v16 = ot::Min<unsigned short>(v14, 0x10u);
      __int16 Offset = otMessageGetOffset(v18);
      otMessageRead(v18, v15 + Offset, v23, v16);
      ot::Cli::Output::OutputBytes((ot::Cli::OutputImplementer **)(v10 + 16), (const unsigned __int8 *)v23, v16);
      v14 -= v16;
      v15 += v16;
    }
    ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(v10 + 16));
    while (1)
    {
      uint64_t result = otThreadGetNextDiagnosticTlv(v18, &v13, (uint64_t)v21);
      if (result) {
        break;
      }
      if (v21[0])
      {
        uint64_t v6 = v21[0];
        char v5 = 1;
      }
      else
      {
        uint64_t v6 = v21[0];
        char v5 = 0;
      }
      if ((v5 & 1) == 0)
      {
        switch(v6)
        {
          case 0:
            ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(v10 + 16), "Ext Address: '");
            ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)(v10 + 16), (const unsigned __int8 *)v22);
            break;
          case 1:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Rloc16: 0x%04x", LOWORD(v22[0]));
            break;
          case 2:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Mode:");
            ot::Cli::Interpreter::OutputMode(v10, 4u, v22);
            break;
          case 3:
            uint64_t v7 = ot::ToUlong(LODWORD(v22[0]));
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Timeout: %lu", v7);
            break;
          case 4:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Connectivity:");
            ot::Cli::Interpreter::OutputConnectivity(v10, 4u, (char *)v22);
            break;
          case 5:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Route:");
            ot::Cli::Interpreter::OutputRoute(v10, 4u, (unsigned __int8 *)v22);
            break;
          case 6:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Leader Data:");
            ot::Cli::Interpreter::OutputLeaderData(v10, 4u, (unsigned __int8 *)v22);
            break;
          case 7:
            ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(v10 + 16), "Network Data: '");
            ot::Cli::Output::OutputBytesLine((ot::Cli::OutputImplementer **)(v10 + 16), (const unsigned __int8 *)v22 + 1, LOBYTE(v22[0]));
            break;
          case 8:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "IP6 Address List:");
            for (unsigned __int16 i = 0; i < (int)LOBYTE(v22[0]); ++i)
            {
              ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(v10 + 16), 4u, "- ");
              ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)(v10 + 16), (uint64_t)&v22[2 * i] + 1);
            }
            break;
          case 9:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "MAC Counters:");
            ot::Cli::Interpreter::OutputNetworkDiagMacCounters(v10, 4u, (unsigned int *)v22);
            break;
          case 10:
          case 11:
          case 12:
          case 13:
          case 18:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
            continue;
          case 14:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Battery Level: %u%%", LOBYTE(v22[0]));
            break;
          case 15:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Supply Voltage: %umV", LOWORD(v22[0]));
            break;
          case 16:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Child Table:");
            for (unsigned __int16 j = 0; j < (int)LOBYTE(v22[0]); ++j)
            {
              ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(v10 + 16), 4u, "- ");
              ot::Cli::Interpreter::OutputChildTableEntry(v10, 6u, (unsigned __int16 *)v22 + 2 * j + 1);
            }
            break;
          case 17:
            ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(v10 + 16), "Channel Pages: '");
            ot::Cli::Output::OutputBytes((ot::Cli::OutputImplementer **)(v10 + 16), (const unsigned __int8 *)v22 + 1, LOBYTE(v22[0]));
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "'");
            break;
          case 19:
            uint64_t v8 = ot::ToUlong(LODWORD(v22[0]));
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Max Child Timeout: %lu", v8);
            break;
          case 25:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Vendor Name: %s", (const char *)v22);
            break;
          case 26:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Vendor Model: %s", (const char *)v22);
            break;
          case 27:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Vendor SW Version: %s", (const char *)v22);
            break;
          case 28:
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(v10 + 16), "Thread Stack Version: %s", (const char *)v22);
            break;
          default:
            JUMPOUT(0);
        }
      }
    }
  }
  return result;
}

uint64_t ot::Min<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  if (a1 >= (int)a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return ot::Min<unsigned short>(a1, a2);
}

uint64_t ot::Cli::Interpreter::OutputMode(uint64_t a1, unsigned __int8 a2, unsigned char *a3)
{
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "DeviceType: %d", (*a3 & 2) != 0);
  return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "NetworkData: %d", (*a3 & 4) != 0);
}

uint64_t ot::Cli::Interpreter::OutputConnectivity(uint64_t a1, unsigned __int8 a2, char *a3)
{
  return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "SedDatagramCount: %u", a3[10]);
}

uint64_t ot::Cli::Interpreter::OutputRoute(uint64_t a1, unsigned __int8 a2, unsigned __int8 *a3)
{
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IdSequence: %u", *a3);
  uint64_t result = ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "RouteData:");
  unsigned __int8 v8 = a2 + 4;
  for (unsigned __int16 i = 0; i < (int)a3[1]; ++i)
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)(a1 + 16), v8, "- ");
    uint64_t result = ot::Cli::Interpreter::OutputRouteData(a1, v8 + 2, &a3[2 * i + 2]);
  }
  return result;
}

uint64_t ot::Cli::Interpreter::OutputLeaderData(uint64_t a1, unsigned __int8 a2, unsigned __int8 *a3)
{
  uint64_t v3 = ot::ToUlong(*(unsigned int *)a3);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "PartitionId: 0x%08lx", v3);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "Weighting: %u", a3[4]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "DataVersion: %u", a3[5]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "StableDataVersion: %u", a3[6]);
  return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "LeaderRouterId: 0x%02x", a3[7]);
}

uint64_t ot::Cli::Interpreter::OutputNetworkDiagMacCounters(uint64_t a1, unsigned __int8 a2, unsigned int *a3)
{
  uint64_t v3 = ot::ToUlong(*a3);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfInUnknownProtos: %lu", v3);
  uint64_t v4 = ot::ToUlong(a3[1]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfInErrors: %lu", v4);
  uint64_t v5 = ot::ToUlong(a3[2]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfOutErrors: %lu", v5);
  uint64_t v6 = ot::ToUlong(a3[3]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfInUcastPkts: %lu", v6);
  uint64_t v7 = ot::ToUlong(a3[4]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfInBroadcastPkts: %lu", v7);
  uint64_t v8 = ot::ToUlong(a3[5]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfInDiscards: %lu", v8);
  uint64_t v9 = ot::ToUlong(a3[6]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfOutUcastPkts: %lu", v9);
  uint64_t v10 = ot::ToUlong(a3[7]);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfOutBroadcastPkts: %lu", v10);
  uint64_t v11 = ot::ToUlong(a3[8]);
  return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "IfOutDiscards: %lu", v11);
}

uint64_t ot::Cli::Interpreter::OutputChildTableEntry(uint64_t a1, unsigned __int8 a2, unsigned __int16 *a3)
{
  return ot::Cli::Interpreter::OutputMode(a1, a2 + 4, (unsigned char *)a3 + 2);
}

uint64_t ot::Cli::Interpreter::OutputRouteData(uint64_t a1, unsigned __int8 a2, unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), a2, "RouteCost: %u", a3[1] >> 4);
}

void ot::Cli::Interpreter::HandleDetachGracefullyResult(ot::Cli::OutputImplementer **this)
{
}

__n128 *ot::Cli::Interpreter::Initialize(ot::Instance *a1, int (*a2)(void *, const char *, char *), void *a3)
{
  uint64_t result = ot::Cli::Interpreter::Interpreter(ot::Cli::sInterpreterRaw, a1, a2, a3);
  ot::Cli::Interpreter::sInterpreter = (uint64_t)ot::Cli::sInterpreterRaw;
  return result;
}

uint64_t ot::TimerMilliContext::GetContext(ot::TimerMilliContext *this)
{
  return *((void *)this + 3);
}

{
  return ot::TimerMilliContext::GetContext(this);
}

void ot::Cli::Interpreter::HandleTimer(ot::Cli::Interpreter *this)
{
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>,(unsigned short)116>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)0x74, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>,(unsigned short)116>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::Interpreter,(unsigned short)116>(uint64_t result, const char **a2)
{
  BOOL v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 348;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::Interpreter,(unsigned short)116>(result, a2);
}

__n128 *otCliInit(ot::Instance *a1, int (*a2)(void *, const char *, char *), void *a3)
{
  return ot::Cli::Interpreter::Initialize(a1, a2, a3);
}

void otCliInputLine(ot::Cli::Interpreter *a1)
{
  Interpreter = (ot::Cli::Interpreter *)ot::Cli::Interpreter::GetInterpreter(a1);
  ot::Cli::Interpreter::ProcessLine(Interpreter, a1);
}

uint64_t ot::Cli::Interpreter::GetInterpreter(ot::Cli::Interpreter *this)
{
  if (!ot::Cli::Interpreter::sInterpreter) {
    __assert_rtn("GetInterpreter", "cli.hpp", 153, "sInterpreter != nullptr");
  }
  return ot::Cli::Interpreter::sInterpreter;
}

{
  return ot::Cli::Interpreter::GetInterpreter(this);
}

uint64_t otCliSetUserCommands(ot::Cli::Interpreter *a1, char a2, uint64_t a3)
{
  uint64_t Interpreter = ot::Cli::Interpreter::GetInterpreter(a1);
  return ot::Cli::Interpreter::SetUserCommands(Interpreter, (uint64_t)a1, a2, a3);
}

ot::Cli::OutputImplementer **otCliOutputBytes(ot::Cli::Interpreter *a1, unsigned __int8 a2)
{
  uint64_t Interpreter = ot::Cli::Interpreter::GetInterpreter(a1);
  return ot::Cli::Output::OutputBytes((ot::Cli::OutputImplementer **)(Interpreter + 16), (const unsigned __int8 *)a1, a2);
}

uint64_t otCliOutputFormat(ot::Cli::Interpreter *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t Interpreter = ot::Cli::Interpreter::GetInterpreter(a1);
  return ot::Cli::Output::OutputFormatV((ot::Cli::OutputImplementer **)(Interpreter + 16), (const char *)a1, &a9);
}

void otCliAppendResult(ot::Cli::Interpreter *a1)
{
  int v2 = (int)a1;
  uint64_t Interpreter = ot::Cli::Interpreter::GetInterpreter(a1);
  ot::Cli::Interpreter::OutputResult(Interpreter, v2);
}

void otCliPlatLogv(ot::Cli::Interpreter *a1, uint64_t a2, const char *a3, char *a4)
{
  BOOL IsInitialized = ot::Cli::Interpreter::IsInitialized(a1);
  if (IsInitialized)
  {
    uint64_t Interpreter = (ot::Cli::OutputImplementer *)ot::Cli::Interpreter::GetInterpreter((ot::Cli::Interpreter *)IsInitialized);
    ot::Cli::OutputImplementer::SetEmittingCommandOutput(Interpreter);
    uint64_t v7 = ot::Cli::Interpreter::GetInterpreter(v6);
    uint64_t v8 = (ot::Cli::Interpreter *)ot::Cli::Output::OutputFormatV((ot::Cli::OutputImplementer **)(v7 + 16), a3, a4);
    uint64_t v9 = ot::Cli::Interpreter::GetInterpreter(v8);
    uint64_t v10 = (ot::Cli::Interpreter *)ot::Cli::Output::OutputNewLine((ot::Cli::OutputImplementer **)(v9 + 16));
    uint64_t v11 = (ot::Cli::OutputImplementer *)ot::Cli::Interpreter::GetInterpreter(v10);
    ot::Cli::OutputImplementer::SetEmittingCommandOutput(v11);
  }
}

BOOL ot::Cli::Interpreter::IsInitialized(ot::Cli::Interpreter *this)
{
  return ot::Cli::Interpreter::sInterpreter != 0;
}

{
  return ot::Cli::Interpreter::IsInitialized(this);
}

ot::TimerMilli *ot::TimerMilli::TimerMilli(ot::TimerMilli *this, ot::Instance *a2, void (*a3)(ot::Timer *))
{
  return this;
}

ot::Timer *ot::Timer::Timer(ot::Timer *this, ot::Instance *a2, void (*a3)(ot::Timer *))
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *(void *)this = a3;
  *((void *)this + 2) = this;
  return result;
}

__n128 ot::Cli::Vendor::Vendor(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this = *a2;
  return result;
}

_DWORD *ot::Mac::ChannelMask::ChannelMask(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

void *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(void *a1, void *a2)
{
  *a1 = *a2;
  *(void *)((char *)a1 + *(void *)(*a1 - 24)) = a2[8];
  a1[2] = a2[9];
  std::stringbuf::~stringbuf((uint64_t)(a1 + 3));
  std::iostream::~basic_iostream();
  return a1;
}

uint64_t non-virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a1 - 16);
}

uint64_t virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(void *a1)
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)a1 + *(void *)(*a1 - 24));
}

uint64_t std::stringbuf::~stringbuf(uint64_t a1)
{
  return a1;
}

{
  std::string::~string((std::string *)(a1 + 64));
  std::streambuf::~streambuf();
  return a1;
}

uint64_t ot::Cli::Interpreter::ProcessSet<char const*>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, unsigned int (*a3)(uint64_t, uint64_t))
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<char const*>(a2, &v7);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)v10 + 8)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return v5(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessSet<char const*>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAs<char const*>(ot::Utils::CmdLineParser::Arg *a1, void *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a1))
  {
    return 7;
  }
  else
  {
    *a2 = ot::Utils::CmdLineParser::Arg::GetCString(a1);
    return 0;
  }
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAs<char const*>(a1, a2);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsHexString(ot::Utils::CmdLineParser **this, char *a2, unsigned __int16 a3)
{
  return ot::Utils::CmdLineParser::ParseAsHexString(*this, a2, (unsigned __int8 *)a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsHexString(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAs<unsigned char>(ot::Utils::CmdLineParser **a1, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint8(a1, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAs<unsigned char>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::ProcessGet<unsigned short>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t))
{
  unsigned int v8 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t v6 = (char *)ot::Cli::Interpreter::FormatStringFor<unsigned short>();
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    unsigned __int16 v4 = a3(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), v6, v4);
  }
  else
  {
    return 7;
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessGet<unsigned short>(a1, a2, a3);
}

const char *ot::Cli::Interpreter::FormatStringFor<unsigned short>()
{
  return "%u";
}

{
  return ot::Cli::Interpreter::FormatStringFor<unsigned short>();
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAs<unsigned int>(ot::Utils::CmdLineParser **a1, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint32(a1, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAs<unsigned int>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAs<unsigned short>(ot::Utils::CmdLineParser **a1, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint16(a1, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAs<unsigned short>(a1, a2, a3);
}

const char *ot::Cli::Interpreter::FormatStringFor<unsigned char>()
{
  return "%u";
}

{
  return ot::Cli::Interpreter::FormatStringFor<unsigned char>();
}

uint64_t ot::Cli::Interpreter::ProcessGet<unsigned int>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t))
{
  unsigned int v9 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t v7 = (char *)ot::Cli::Interpreter::FormatStringFor<unsigned int>();
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    uint64_t v4 = a3(InstancePtr);
    uint64_t v5 = ot::ToUlong(v4);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), v7, v5);
  }
  else
  {
    return 7;
  }
  return v9;
}

{
  return ot::Cli::Interpreter::ProcessGet<unsigned int>(a1, a2, a3);
}

const char *ot::Cli::Interpreter::FormatStringFor<unsigned int>()
{
  return "%lu";
}

{
  return ot::Cli::Interpreter::FormatStringFor<unsigned int>();
}

uint64_t ot::Cli::Interpreter::ProcessGet<signed char>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2, uint64_t (*a3)(uint64_t))
{
  unsigned int v8 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t v6 = (char *)ot::Cli::Interpreter::FormatStringFor<signed char>();
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
    char v4 = a3(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)(a1 + 16), v6, v4);
  }
  else
  {
    return 7;
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessGet<signed char>(a1, a2, a3);
}

uint64_t ot::Cli::Interpreter::ProcessSet<signed char>(uint64_t a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  unsigned int v9 = a3;
  unsigned int v8 = 0;
  signed __int8 v7 = 0;
  unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAs<signed char>(a2, &v7, a3);
  if (!v8)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)))
    {
      uint64_t v5 = v9;
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)(a1 + 16));
      return ((unsigned int (*)(uint64_t, void))v5)(InstancePtr, v7);
    }
    else
    {
      return 7;
    }
  }
  return v8;
}

{
  return ot::Cli::Interpreter::ProcessSet<signed char>(a1, a2, a3);
}

const char *ot::Cli::Interpreter::FormatStringFor<signed char>()
{
  return "%d";
}

{
  return ot::Cli::Interpreter::FormatStringFor<signed char>();
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAs<signed char>(ot::Utils::CmdLineParser **a1, signed __int8 *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::Arg::ParseAsInt8(a1, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAs<signed char>(a1, a2, a3);
}

void (__cdecl ***std::ios::basic_ios[abi:nn180100](void (__cdecl ***a1)(std::ios_base *__hidden this)))(std::ios_base *__hidden this)
{
  std::ios_base::ios_base[abi:nn180100](a1);
  __n128 result = a1;
  return result;
}

void *std::iostream::basic_iostream[abi:nn180100](void *a1, void *a2, void *a3)
{
  std::istream::basic_istream[abi:nn180100](a1, a2 + 1, a3);
  std::ostream::basic_ostream[abi:nn180100](a1 + 2, a2 + 3);
  __n128 result = a1;
  *a1 = *a2;
  *(void *)((char *)a1 + *(void *)(*a1 - 24)) = a2[5];
  a1[2] = a2[6];
  return result;
}

uint64_t std::stringbuf::basic_stringbuf[abi:nn180100](uint64_t a1, int a2)
{
  return a1;
}

{
  uint64_t result;

  std::streambuf::basic_streambuf();
  std::string::basic_string[abi:nn180100]((void *)(a1 + 64));
  __n128 result = a1;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = a2;
  return result;
}

void (__cdecl ***std::ios_base::ios_base[abi:nn180100](void (__cdecl ***result)(std::ios_base *__hidden this)))(std::ios_base *__hidden this)
{
  return result;
}

void *std::istream::basic_istream[abi:nn180100](void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  *(void *)((char *)a1 + *(void *)(*a1 - 24)) = a2[1];
  a1[1] = 0;
  std::ios::init[abi:nn180100]((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), a3);
  return a1;
}

void *std::ostream::basic_ostream[abi:nn180100](void *result, void *a2)
{
  *__n128 result = *a2;
  *(void *)((char *)result + *(void *)(*result - 24)) = a2[1];
  return result;
}

uint64_t std::ios::init[abi:nn180100](std::ios_base *a1, void *a2)
{
  std::ios_base::init(a1, a2);
  a1[1].__vftable = 0;
  uint64_t result = std::char_traits<char>::eof[abi:nn180100]();
  a1[1].__fmtflags_ = result;
  return result;
}

uint64_t std::char_traits<char>::eof[abi:nn180100]()
{
  return 0xFFFFFFFFLL;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  __int16 v15 = a1;
  uint64_t v14 = a2;
  uint64_t v13 = a3;
  std::ostream::sentry::sentry();
  if (std::ostream::sentry::operator BOOL[abi:nn180100](v12))
  {
    std::ostreambuf_iterator<char>::ostreambuf_iterator[abi:nn180100](&v10, v15);
    uint64_t v9 = v14;
    if ((std::ios_base::flags[abi:nn180100]((uint64_t)v15 + *(void *)(*v15 - 24)) & 0xB0) == 0x20) {
      uint64_t v8 = v14 + v13;
    }
    else {
      uint64_t v8 = v14;
    }
    uint64_t v6 = v14 + v13;
    signed __int8 v7 = (const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24));
    std::string::value_type v3 = std::ios::fill[abi:nn180100](v7);
    uint64_t v11 = std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v10, v9, v8, v6, (uint64_t)v7, v3);
    if (std::ostreambuf_iterator<char>::failed[abi:nn180100](&v11)) {
      std::ios::setstate[abi:nn180100]((std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)), 5);
    }
  }
  uint64_t v5 = v15;
  std::ostream::sentry::~sentry();
  return v5;
}

uint64_t std::ostream::sentry::operator BOOL[abi:nn180100](unsigned char *a1)
{
  return *a1 & 1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string::value_type a6)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = a5;
  std::string::value_type v16 = a6;
  if (!a1) {
    return 0;
  }
  uint64_t v15 = v18 - v20;
  uint64_t v14 = std::ios_base::width[abi:nn180100](v17);
  if (v14 <= v18 - v20) {
    uint64_t v14 = 0;
  }
  else {
    v14 -= v15;
  }
  uint64_t v13 = v19 - v20;
  if (v19 - v20 > 0 && std::streambuf::sputn[abi:nn180100](v21, v20, v13) != v13) {
    return 0;
  }
  if (v14 <= 0) {
    goto LABEL_14;
  }
  std::string::basic_string[abi:nn180100](&v12, v14, v16);
  uint64_t v10 = v21;
  std::string::data[abi:nn180100]();
  uint64_t v7 = std::streambuf::sputn[abi:nn180100](v10, v6, v14);
  if (v7 == v14)
  {
    int v11 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v11 = 1;
  }
  std::string::~string(&v12);
  if (!v11)
  {
LABEL_14:
    uint64_t v13 = v18 - v19;
    if (v18 - v19 <= 0 || (uint64_t v8 = std::streambuf::sputn[abi:nn180100](v21, v19, v13), v8 == v13))
    {
      std::ios_base::width[abi:nn180100](v17, 0);
      return v21;
    }
    else
    {
      uint64_t v21 = 0;
      return 0;
    }
  }
  return v22;
}

uint64_t *std::ostreambuf_iterator<char>::ostreambuf_iterator[abi:nn180100](uint64_t *a1, void *a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t *result;

  int v2 = std::ios::rdbuf[abi:nn180100]((uint64_t)a2 + *(void *)(*a2 - 24));
  uint64_t result = a1;
  *a1 = v2;
  return result;
}

uint64_t std::ios_base::flags[abi:nn180100](uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::ios::fill[abi:nn180100](const std::ios_base *a1)
{
  int v1 = std::char_traits<char>::eof[abi:nn180100]();
  if (std::char_traits<char>::eq_int_type[abi:nn180100](v1, a1[1].__fmtflags_)) {
    a1[1].__fmtflags_ = (char)std::ios::widen[abi:nn180100](a1, 32);
  }
  return (char)a1[1].__fmtflags_;
}

BOOL std::ostreambuf_iterator<char>::failed[abi:nn180100](void *a1)
{
  return *a1 == 0;
}

void std::ios::setstate[abi:nn180100](std::ios_base *a1, int a2)
{
}

uint64_t std::ios_base::width[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t std::streambuf::sputn[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, a3);
}

std::string *std::string::basic_string[abi:nn180100](std::string *a1, std::string::size_type a2, std::string::value_type a3)
{
  return a1;
}

{
  std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:nn180100]<std::__default_init_tag,std::__default_init_tag>((uint64_t)a1);
  std::string::__init(a1, a2, a3);
  return a1;
}

uint64_t std::ios_base::width[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a2;
  return v3;
}

uint64_t std::ios::rdbuf[abi:nn180100](uint64_t a1)
{
  return std::ios_base::rdbuf[abi:nn180100](a1);
}

uint64_t std::ios_base::rdbuf[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 40);
}

BOOL std::char_traits<char>::eq_int_type[abi:nn180100](int a1, int a2)
{
  return a1 == a2;
}

uint64_t std::ios::widen[abi:nn180100](const std::ios_base *a1, char a2)
{
  uint64_t v7 = a1;
  char v6 = a2;
  std::ios_base::getloc(a1);
  int v2 = std::use_facet[abi:nn180100]<std::ctype<char>>(&v5);
  char v4 = std::ctype<char>::widen[abi:nn180100]((uint64_t)v2, v6);
  std::locale::~locale(&v5);
  return v4;
}

const std::locale::facet *std::use_facet[abi:nn180100]<std::ctype<char>>(const std::locale *a1)
{
  return std::locale::use_facet(a1, &std::ctype<char>::id);
}

uint64_t std::ctype<char>::widen[abi:nn180100](uint64_t a1, char a2)
{
  return (*(char (**)(uint64_t, void))(*(void *)a1 + 56))(a1, a2);
}

void std::ios_base::setstate[abi:nn180100](std::ios_base *a1, int a2)
{
}

unsigned char *std::__iom_t4<char>::__iom_t4[abi:nn180100](unsigned char *a1, char a2)
{
  return a1;
}

unsigned char *std::__iom_t4<char>::__iom_t4[abi:nn180100](unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t std::ios::fill[abi:nn180100](const std::ios_base *a1, char a2)
{
  int v2 = std::char_traits<char>::eof[abi:nn180100]();
  if (std::char_traits<char>::eq_int_type[abi:nn180100](v2, a1[1].__fmtflags_)) {
    a1[1].__fmtflags_ = (char)std::ios::widen[abi:nn180100](a1, 32);
  }
  char fmtflags = a1[1].__fmtflags_;
  a1[1].__fmtflags_ = a2;
  return fmtflags;
}

const char *ot::Cli::Interpreter::FormatStringFor<char const*>()
{
  return "%s";
}

{
  return ot::Cli::Interpreter::FormatStringFor<char const*>();
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::Interpreter>::Compare(a1, a2);
}

uint64_t ot::Cli::Coap::Coap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ot::Cli::Output::Output((void *)a1, a2, a3);
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 17) = 1;
  *(_OWORD *)(a1 + 4ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  strncpy((char *)(a1 + 104), "0", 0x10uLL);
  uint64_t result = a1;
  *(unsigned char *)(a1 + 119) = 0;
  return result;
}

{
  ot::Cli::Coap::Coap(a1, a2, a3);
  return a1;
}

uint64_t ot::Cli::Coap::PrintPayload(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  __int16 v8 = 0;
  __int16 Length = otMessageGetLength(a2);
  __int16 Offset = otMessageGetOffset(a2);
  unsigned __int16 v7 = Length - Offset;
  if (Length != Offset)
  {
    ot::Cli::Output::OutputFormat(a1, " with payload: ");
    while (v7)
    {
      unsigned __int16 v9 = ot::Min<unsigned short>(v7, 0x10u);
      __int16 v3 = otMessageGetOffset(a2);
      otMessageRead(a2, v8 + v3, v11, v9);
      ot::Cli::Output::OutputBytes(a1, (const unsigned __int8 *)v11, v9);
      v7 -= v9;
      v8 += v9;
    }
  }
  return ot::Cli::Output::OutputNewLine(a1);
}

uint64_t ot::Cli::Coap::Process<7108473799409246994ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    if (*(void *)(a1 + 40)) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%s", *(const char **)(a1 + 40));
    }
    else {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%s", "");
    }
  }
  else if ((unsigned __int16)ot::Utils::CmdLineParser::Arg::GetLength((const char **)a2) < 0x20u)
  {
    *(void *)(a1 + 4ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = a1 + 72;
    *(void *)(a1 + 56) = a1;
    *(void *)(a1 + 48) = ot::Cli::Coap::HandleRequest;
    uint64_t CString = (const char *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
    strncpy((char *)(a1 + 72), CString, 0x1FuLL);
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
    otCoapAddResource(InstancePtr, a1 + 40);
  }
  else
  {
    return 7;
  }
  return v6;
}

void ot::Cli::Coap::HandleRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  unsigned int Code;
  char v4;
  uint64_t v5;
  uint64_t InstancePtr;
  unsigned __int16 v7;
  uint64_t ResponseTxParameters;
  const char *v9;
  uint64_t v10;
  signed int v12;
  ot::Message *v13;
  int inited;

  inited = 0;
  uint64_t v13 = 0;
  std::string v12 = 0;
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "coap request from ");
  ot::Cli::Output::OutputIp6Address((ot::Cli::OutputImplementer **)a1, a3 + 16);
  ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, " ");
  Code = otCoapMessageGetCode();
  if (Code <= 1)
  {
    std::locale v5 = Code - 1;
    char v4 = 0;
  }
  else
  {
    std::locale v5 = Code - 1;
    char v4 = 1;
  }
  if (v4)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "Undefined");
    inited = 6;
  }
  else
  {
    switch(v5)
    {
      case 0:
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "GET");
        break;
      case 1:
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "POST");
        break;
      case 2:
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "PUT");
        break;
      case 3:
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "DELETE");
        break;
      default:
        JUMPOUT(0);
    }
    ot::Cli::Coap::PrintPayload((ot::Cli::OutputImplementer **)a1, a2);
    if (!otCoapMessageGetType() || otCoapMessageGetCode() == 1)
    {
      if (otCoapMessageGetCode() == 1) {
        std::string v12 = 69;
      }
      else {
        std::string v12 = 67;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
      uint64_t v13 = otCoapNewMessage(InstancePtr, 0);
      if (v13)
      {
        inited = otCoapMessageInitResponse((uint64_t)v13, a2, 2u, v12);
        if (!inited)
        {
          if (v12 != 69
            || (inited = otCoapMessageSetPayloadMarker()) == 0
            && (unsigned __int16 v7 = strlen((const char *)(a1 + 104)),
                (inited = otMessageAppend((uint64_t)v13, (char *)(a1 + 104), v7)) == 0))
          {
            uint64_t v10 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
            ResponseTxParameters = ot::Cli::Coap::GetResponseTxParameters((ot::Cli::Coap *)a1);
            inited = otCoapSendResponseWithParameters(v10, (uint64_t)v13, a3, ResponseTxParameters);
          }
        }
      }
      else
      {
        inited = 3;
      }
    }
  }
  if (inited)
  {
    if (v13)
    {
      unsigned __int16 v9 = otThreadErrorToString(inited);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "coap send response error %d: %s", inited, v9);
      otMessageFree((uint64_t)v13);
    }
  }
  else if (v12 >= 64)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "coap response sent");
  }
}

uint64_t ot::Cli::Coap::Process<7568770ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v5 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%s", (const char *)(a1 + 104));
  }
  else if ((unsigned __int16)ot::Utils::CmdLineParser::Arg::GetLength((const char **)a2) < 0x10uLL)
  {
    uint64_t CString = (const char *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
    strncpy((char *)(a1 + 104), CString, 0x10uLL);
    *(unsigned char *)(a1 + 119) = 0;
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::Cli::Coap::Process<492373686370ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  return otCoapStart(InstancePtr, 5683);
}

uint64_t ot::Cli::Coap::Process<1864361470ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  otCoapRemoveResource(InstancePtr, (uint64_t)a1 + 40);
  uint64_t v2 = ot::Cli::Output::GetInstancePtr(a1);
  return otCoapStop(v2);
}

uint64_t ot::Cli::Coap::Process<16542423019117308726ull>(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "request"))
  {
    uint64_t v10 = (char *)a1 + 20;
    int v11 = a1 + 2;
  }
  else
  {
    if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "response")) {
      return 7;
    }
    uint64_t v10 = (char *)a1 + 28;
    int v11 = (char *)a1 + 17;
  }
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 8))) {
    goto LABEL_16;
  }
  if (ot::Utils::CmdLineParser::Arg::operator==((const char **)(a2 + 8), "default"))
  {
    *int v11 = 1;
LABEL_16:
    uint64_t CString = (const char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)a2);
    ot::Cli::Output::OutputLine(a1, "Transmission parameters for %s:", CString);
    if (*v11)
    {
      ot::Cli::Output::OutputLine(a1, "default");
    }
    else
    {
      uint64_t v7 = ot::ToUlong(*(unsigned int *)v10);
      ot::Cli::Output::OutputLine(a1, "ACK_TIMEOUT=%lu ms, ACK_RANDOM_FACTOR=%u/%u, MAX_RETRANSMIT=%u", v7, v10[4], v10[5], v10[6]);
    }
    return v12;
  }
  unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)(a2 + 8), v10, v2);
  if (!v12)
  {
    unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)(a2 + 16), v10 + 4, v3);
    if (!v12)
    {
      unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)(a2 + 24), v10 + 5, v4);
      if (!v12)
      {
        unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)(a2 + 32), v10 + 6, v5);
        if (!v12)
        {
          if (v10[4] <= (int)v10[5]) {
            return 7;
          }
          *int v11 = 0;
          goto LABEL_16;
        }
      }
    }
  }
  return v12;
}

uint64_t ot::Cli::Coap::Process<7568758ull>(ot::Cli::Output *a1, const char **a2)
{
  return ot::Cli::Coap::ProcessRequest(a1, a2, 1u);
}

uint64_t ot::Cli::Coap::ProcessRequest(ot::Cli::Output *a1, const char **a2, unsigned int a3)
{
  unsigned int v23 = a1;
  uint64_t v22 = a2;
  unsigned int v21 = a3;
  unsigned int appended = 0;
  uint64_t v19 = 0;
  unsigned __int16 Length = 0;
  *(_OWORD *)__dst = *(_OWORD *)"test";
  long long v25 = xmmword_1003F93ED;
  unsigned int v16 = 1;
  unsigned int appended = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(a2, (uint64_t)&v15);
  if (!appended)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v22 + 1)))
    {
      unsigned int appended = 7;
    }
    else if ((unsigned __int16)ot::Utils::CmdLineParser::Arg::GetLength(v22 + 1) < 0x20uLL)
    {
      uint64_t CString = (const char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v22 + 1));
      strcpy(__dst, CString);
      if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v22 + 2))
        && ot::Utils::CmdLineParser::Arg::operator==(v22 + 2, "con"))
      {
        unsigned int v16 = 0;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v19 = otCoapNewMessage(InstancePtr, 0);
      if (v19)
      {
        otCoapMessageInit((uint64_t)v19, v16, v21);
        otCoapMessageGenerateToken((uint64_t)v19, 2u);
        unsigned int appended = otCoapMessageAppendUriPathOptions((uint64_t)v19, (ot *)__dst);
        if (!appended
          && (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v22 + 3))
           || (unsigned __int16 Length = ot::Utils::CmdLineParser::Arg::GetLength(v22 + 3)) == 0
           || (unsigned int appended = otCoapMessageSetPayloadMarker()) == 0))
        {
          if (!Length
            || (uint64_t v13 = v19,
                unsigned int v5 = (char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v22 + 3)),
                (unsigned int appended = otMessageAppend((uint64_t)v13, v5, Length)) == 0))
          {
            memset(__b, 0, sizeof(__b));
            *(_OWORD *)&__b[16] = v15;
            *(_WORD *)&__b[34] = 5683;
            if (v16 && v21 != 1)
            {
              uint64_t v10 = ot::Cli::Output::GetInstancePtr(a1);
              unsigned __int16 v9 = v19;
              uint64_t ResponseTxParameters = ot::Cli::Coap::GetResponseTxParameters(a1);
              unsigned int appended = otCoapSendRequestWithParameters(v10, (uint64_t)v9, (uint64_t)__b, 0, 0, ResponseTxParameters);
            }
            else
            {
              uint64_t v12 = ot::Cli::Output::GetInstancePtr(a1);
              int v11 = v19;
              uint64_t RequestTxParameters = ot::Cli::Coap::GetRequestTxParameters(a1);
              unsigned int appended = otCoapSendRequestWithParameters(v12, (uint64_t)v11, (uint64_t)__b, (uint64_t)ot::Cli::Coap::HandleResponse, (uint64_t)a1, RequestTxParameters);
            }
          }
        }
      }
      else
      {
        unsigned int appended = 3;
      }
    }
    else
    {
      unsigned int appended = 7;
    }
  }
  if (appended && v19) {
    otMessageFree((uint64_t)v19);
  }
  return appended;
}

uint64_t ot::Cli::Coap::Process<1930945792ull>(ot::Cli::Output *a1, const char **a2)
{
  return ot::Cli::Coap::ProcessRequest(a1, a2, 2u);
}

uint64_t ot::Cli::Coap::Process<7572847ull>(ot::Cli::Output *a1, const char **a2)
{
  return ot::Cli::Coap::ProcessRequest(a1, a2, 3u);
}

uint64_t ot::Cli::Coap::Process<109390753686805ull>(ot::Cli::Output *a1, const char **a2)
{
  return ot::Cli::Coap::ProcessRequest(a1, a2, 4u);
}

ot::Cli::OutputImplementer **ot::Cli::Coap::HandleResponse(ot::Cli::OutputImplementer **a1, uint64_t a2, uint64_t a3, int a4)
{
  return ot::Cli::Coap::HandleResponse(a1, a2, a3, a4);
}

uint64_t ot::Cli::Coap::GetRequestTxParameters(ot::Cli::Coap *this)
{
  if (*((unsigned char *)this + 16)) {
    return 0;
  }
  else {
    return (uint64_t)this + 20;
  }
}

{
  return ot::Cli::Coap::GetRequestTxParameters(this);
}

uint64_t ot::Cli::Coap::GetResponseTxParameters(ot::Cli::Coap *this)
{
  if (*((unsigned char *)this + 17)) {
    return 0;
  }
  else {
    return (uint64_t)this + 28;
  }
}

{
  return ot::Cli::Coap::GetResponseTxParameters(this);
}

uint64_t ot::Cli::Coap::Process(ot::Cli::Coap *this, const char **a2)
{
  uint64_t v17 = this;
  unsigned int v16 = a2;
  unsigned int v15 = 35;
  uint64_t v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    || ot::Utils::CmdLineParser::Arg::operator==(v16, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::Coap,(unsigned short)9>((uint64_t)this, (const char **)&ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v16)) {
      return 7;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v16);
    uint64_t v14 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Coap>,(unsigned short)9>((ot::BinarySearch *)&CString, (char *)&ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v3, v4, v5, v6);
    if (v14)
    {
      uint64_t v10 = (uint64_t (*)(void *, const char **))*((void *)v14 + 1);
      uint64_t v7 = *((void *)v14 + 2);
      int v11 = (void *)((char *)this + (v7 >> 1));
      if (v7) {
        return (*(uint64_t (**)(void *, const char **))(*v11 + v10))(v11, v16 + 1);
      }
      else {
        return v10(v11, v16 + 1);
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::Coap,(unsigned short)9>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 27;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::Coap,(unsigned short)9>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Coap>,(unsigned short)9>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)9, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Coap>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Coap>,(unsigned short)9>(a1, a2, a3, a4, a5, a6);
}

ot::Cli::OutputImplementer **ot::Cli::Coap::HandleResponse(ot::Cli::OutputImplementer **result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  if (a4)
  {
    uint64_t v4 = otThreadErrorToString(a4);
    return (ot::Cli::OutputImplementer **)ot::Cli::Output::OutputLine(v5, "coap receive response error %d: %s", a4, v4);
  }
  else if (a3)
  {
    if (a2)
    {
      ot::Cli::Output::OutputFormat(result, "coap response from ");
      ot::Cli::Output::OutputIp6Address(v5, a3 + 16);
      return (ot::Cli::OutputImplementer **)ot::Cli::Coap::PrintPayload(v5, a2);
    }
  }
  return result;
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Coap>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::Coap>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::Coap>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::Coap>::Compare(a1, a2);
}

uint64_t ot::Cli::Commissioner::Process<7108469486593286647ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  unsigned int v12 = 0;
  unsigned int v11 = 0;
  unsigned __int8 v10 = 0;
  unsigned __int16 v9 = 0;
  unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(a2, (char *)&v11, a3);
  if (!v12)
  {
    unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v13 + 1, (char *)&v10, v3);
    if (!v12)
    {
      unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v13 + 2, (char *)&v9, v4);
      if (!v12)
      {
        unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)v13 + 3, (uint64_t)v8);
        if (!v12)
        {
          uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
          return otCommissionerAnnounceBegin(InstancePtr, v11, v10, v9, (uint64_t)v8);
        }
      }
    }
  }
  return v12;
}

uint64_t ot::Cli::Commissioner::Process<130900079721176ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  unsigned int v16 = a1;
  unsigned int v15 = a2;
  unsigned int v14 = 0;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  unsigned __int16 v11 = 0;
  unsigned __int16 v10 = 0;
  unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(a2, (char *)&v13, a3);
  if (!v14)
  {
    unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v15 + 1, (char *)&v12, v3);
    if (!v14)
    {
      unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v15 + 2, (char *)&v11, v4);
      if (!v14)
      {
        unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v15 + 3, (char *)&v10, v5);
        if (!v14)
        {
          unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)v15 + 4, (uint64_t)v9);
          if (!v14)
          {
            uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
            return otCommissionerEnergyScan(InstancePtr, v13, v12, v11, v10, (uint64_t)v9, (void (*)(unsigned int, const unsigned __int8 *, unsigned __int8, void *))ot::Cli::Commissioner::HandleEnergyReport, (uint64_t)a1);
          }
        }
      }
    }
  }
  return v14;
}

uint64_t ot::Cli::Commissioner::HandleEnergyReport(ot::Cli::Commissioner *this, const unsigned __int8 *a2, const unsigned __int8 *a3, ot::Cli::OutputImplementer **a4, void *a5)
{
  return ot::Cli::Commissioner::HandleEnergyReport(a4, this, a2, a3);
}

uint64_t ot::Cli::Commissioner::Process<123344129789161ull>(ot::Cli::OutputImplementer **a1, const char **a2)
{
  unsigned int v21 = a1;
  uint64_t v20 = a2;
  unsigned int v19 = 0;
  uint64_t v18 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "table"))
  {
    __int16 v15 = 0;
    ot::Cli::Output::OutputTableHeader<(unsigned char)3>(a1, (const char *const *)ot::Cli::Commissioner::Process<123344129789161ull>(ot::Utils::CmdLineParser::Arg *)::kJoinerTableTitles, ot::Cli::Commissioner::Process<123344129789161ull>(ot::Utils::CmdLineParser::Arg *)::kJoinerTableColumnWidths);
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
      if (otCommissionerGetNextJoinerInfo(InstancePtr, &v15, v22)) {
        break;
      }
      if (*(_DWORD *)v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          ot::Cli::Output::OutputFormat(a1, "|      ");
          ot::Cli::Output::OutputExtAddress(a1, (const unsigned __int8 *)&v23);
        }
        else if (*(_DWORD *)v22 == 2)
        {
          ot::Cli::Output::OutputFormat(a1, "| 0x%08lx%08lx/%2u", HIDWORD(v23), v23, v24);
        }
      }
      else
      {
        ot::Cli::Output::OutputFormat(a1, "| %21s", "*");
      }
      uint64_t v3 = ot::ToUlong(v26);
      ot::Cli::Output::OutputFormat(a1, " | %32s | %10lu |", v25, v3);
      ot::Cli::Output::OutputNewLine(a1);
    }
    return 0;
  }
  else if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v20 + 1)))
  {
    return 7;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (ot::Utils::CmdLineParser::Arg::operator==(v20 + 1, "*")) {
      goto LABEL_19;
    }
    unsigned int v19 = ot::Cli::Interpreter::ParseJoinerDiscerner((ot::Utils::CmdLineParser::Arg *)(v20 + 1), (char *)&v16);
    if (v19 == 23)
    {
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v20 + 1, v27);
      uint64_t v18 = v27;
    }
    if (!v19)
    {
LABEL_19:
      if (ot::Utils::CmdLineParser::Arg::operator==(v20, "add"))
      {
        unsigned int v14 = 120;
        if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v20 + 2)))
        {
          return 7;
        }
        else if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v20 + 3)) {
               || (unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)v20 + 3, (char *)&v14, v4)) == 0)
        }
        {
          if ((_BYTE)v17)
          {
            uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
            uint64_t CString = (ot *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v20 + 2));
            return otCommissionerAddJoinerWithDiscerner(v12, (uint64_t)&v16, CString, v14);
          }
          else
          {
            uint64_t v11 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
            uint64_t v10 = (uint64_t)v18;
            unsigned int v6 = (ot *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v20 + 2));
            return otCommissionerAddJoiner(v11, v10, v6, v14);
          }
        }
      }
      else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "remove"))
      {
        if ((_BYTE)v17)
        {
          uint64_t v7 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
          return otCommissionerRemoveJoinerWithDiscerner(v7, (uint64_t)&v16);
        }
        else
        {
          uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
          return otCommissionerRemoveJoiner(v8, (uint64_t)v18);
        }
      }
      else
      {
        return 7;
      }
    }
  }
  return v19;
}

uint64_t ot::Cli::Commissioner::Process<32002607674527349ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  memset((char *)&v10[1] + 1, 0, 5);
  while (!ot::Utils::CmdLineParser::Arg::IsEmpty(v11))
  {
    if (HIBYTE(v10[1]) >= 0x20uLL)
    {
      *(_DWORD *)&unsigned char v10[2] = 3;
      return *(unsigned int *)&v10[2];
    }
    if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v11, "locator"))
    {
      uint64_t v2 = HIBYTE(v10[1]);
      ++HIBYTE(v10[1]);
      v13[v2] = 9;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v11, "sessionid"))
    {
      uint64_t v3 = HIBYTE(v10[1]);
      ++HIBYTE(v10[1]);
      v13[v3] = 11;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v11, "steeringdata"))
    {
      uint64_t v4 = HIBYTE(v10[1]);
      ++HIBYTE(v10[1]);
      v13[v4] = 8;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v11, "joinerudpport"))
    {
      uint64_t v5 = HIBYTE(v10[1]);
      ++HIBYTE(v10[1]);
      v13[v5] = 18;
    }
    else
    {
      if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)v11, "-x"))
      {
        *(_DWORD *)&unsigned char v10[2] = 7;
        return *(unsigned int *)&v10[2];
      }
      uint64_t v11 = (ot::Utils::CmdLineParser::Arg *)((char *)v11 + 8);
      v10[0] = 32 - HIBYTE(v10[1]);
      *(_DWORD *)&unsigned char v10[2] = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v11, (char *)v10, (unsigned __int16 *)&v13[HIBYTE(v10[1])], v6);
      if (*(_DWORD *)&v10[2]) {
        return *(unsigned int *)&v10[2];
      }
      *(_DWORD *)((char *)&v10[1] + 1) = (HIBYTE(v10[1]) + LOBYTE(v10[0]));
    }
    uint64_t v11 = (ot::Utils::CmdLineParser::Arg *)((char *)v11 + 8);
  }
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  *(_DWORD *)&unsigned char v10[2] = otCommissionerSendMgmtGet(InstancePtr, v13, HIBYTE(v10[1]));
  return *(unsigned int *)&v10[2];
}

uint64_t ot::Cli::Commissioner::Process<32002658413534849ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser::Arg *a2)
{
  __int16 v15 = a1;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    return 7;
  }
  else
  {
    *(void *)uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __int16 v20 = 0;
    while (!ot::Utils::CmdLineParser::Arg::IsEmpty(v14))
    {
      if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v14, "locator"))
      {
        unsigned int v14 = (ot::Utils::CmdLineParser::Arg *)((char *)v14 + 8);
        LOBYTE(v2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = v20 & 0xFE | 1;
        unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v14, (char *)v17, v2);
        if (v13) {
          return v13;
        }
      }
      else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v14, "sessionid"))
      {
        unsigned int v14 = (ot::Utils::CmdLineParser::Arg *)((char *)v14 + 8);
        LOBYTE(v2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = v20 & 0xFD | 2;
        unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v14, (char *)&v17[1], v3);
        if (v13) {
          return v13;
        }
      }
      else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v14, "steeringdata"))
      {
        unsigned int v14 = (ot::Utils::CmdLineParser::Arg *)((char *)v14 + 8);
        LOBYTE(v2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = v20 & 0xFB | 4;
        unsigned __int16 v11 = 16;
        unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v14, (char *)&v11, (unsigned __int16 *)((char *)&v17[2] + 1), v4);
        if (v13) {
          return v13;
        }
        LOBYTE(v17[2]) = v11;
      }
      else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v14, "joinerudpport"))
      {
        unsigned int v14 = (ot::Utils::CmdLineParser::Arg *)((char *)v14 + 8);
        LOBYTE(v2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = v20 & 0xF7 | 8;
        unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v14, (char *)&v19 + 6, v5);
        if (v13) {
          return v13;
        }
      }
      else
      {
        if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)v14, "-x")) {
          return 7;
        }
        unsigned int v14 = (ot::Utils::CmdLineParser::Arg *)((char *)v14 + 8);
        unsigned __int16 v10 = 32;
        unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v14, (char *)&v10, v16, v6);
        if (v13) {
          return v13;
        }
        unsigned __int8 v12 = v10;
      }
      unsigned int v14 = (ot::Utils::CmdLineParser::Arg *)((char *)v14 + 8);
    }
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otCommissionerSendMgmtSet(InstancePtr, (uint64_t)v17, (char *)v16, v12);
  }
}

uint64_t ot::Cli::Commissioner::Process<424573284472ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  unsigned __int8 v12 = a1;
  unsigned __int16 v11 = a2;
  unsigned int v10 = 0;
  unsigned __int16 v9 = 0;
  unsigned int v8 = 0;
  unsigned int v10 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(a2, (char *)&v9, a3);
  if (!v10)
  {
    unsigned int v10 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v11 + 1, (char *)&v8, v3);
    if (!v10)
    {
      unsigned int v10 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)v11 + 2, (uint64_t)v7);
      if (!v10)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
        return otCommissionerPanIdQuery(InstancePtr, v9, v8, (uint64_t)v7, (void (*)(unsigned __int16, unsigned int, void *))ot::Cli::Commissioner::HandlePanIdConflict, (uint64_t)a1);
      }
    }
  }
  return v10;
}

uint64_t ot::Cli::Commissioner::HandlePanIdConflict(ot::Cli::Commissioner *this, unsigned int a2, ot::Cli::OutputImplementer **a3, void *a4)
{
  return ot::Cli::Commissioner::HandlePanIdConflict(a3, (unsigned __int16)this, a2);
}

uint64_t ot::Cli::Commissioner::Process<7732078877527829602ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  uint64_t CString = (ot *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
  return otCommissionerSetProvisioningUrl(InstancePtr, CString);
}

uint64_t ot::Cli::Commissioner::Process<5868095344381626993ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  unsigned __int16 SessionId = otCommissionerGetSessionId(InstancePtr);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%d", SessionId);
  return 0;
}

uint64_t ot::Cli::Commissioner::Process<25605ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    Id = (const char *)otCommissionerGetId(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%s", Id);
    return 0;
  }
  else
  {
    uint64_t v6 = ot::Cli::Output::GetInstancePtr(a1);
    uint64_t CString = (ot *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
    return otCommissionerSetId(v6, CString);
  }
}

uint64_t ot::Cli::Commissioner::Process<492373686370ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  return otCommissionerStart(InstancePtr, (uint64_t)ot::Cli::Commissioner::HandleStateChanged, (uint64_t)ot::Cli::Commissioner::HandleJoinerEvent, (uint64_t)a1);
}

uint64_t ot::Cli::Commissioner::HandleStateChanged(unsigned __int16 a1, ot::Cli::OutputImplementer **a2)
{
  return ot::Cli::Commissioner::HandleStateChanged(a2, a1);
}

uint64_t ot::Cli::Commissioner::HandleJoinerEvent(unsigned __int16 a1, uint64_t a2, const unsigned __int8 *a3, ot::Cli::OutputImplementer **a4)
{
  return ot::Cli::Commissioner::HandleJoinerEvent(a4, a1, a2, a3);
}

uint64_t ot::Cli::Commissioner::HandleStateChanged(ot::Cli::OutputImplementer **a1, unsigned __int16 a2)
{
  uint64_t v2 = (const char *)ot::Cli::Commissioner::StateToString(a2);
  return ot::Cli::Output::OutputLine(a1, "Commissioner: %s", v2);
}

uint64_t ot::Cli::Commissioner::StateToString(unsigned __int16 a1)
{
  return ot::Cli::Output::Stringify<otCommissionerState,(unsigned short)3>(a1, (uint64_t)ot::Cli::Commissioner::StateToString(otCommissionerState)::kStateString, (uint64_t)"unknown");
}

uint64_t ot::Cli::Output::Stringify<otCommissionerState,(unsigned short)3>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 3u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otCommissionerState,(unsigned short)3>(a1, a2, a3);
}

uint64_t ot::Cli::Commissioner::HandleJoinerEvent(ot::Cli::OutputImplementer **a1, unsigned __int16 a2, uint64_t a3, const unsigned __int8 *a4)
{
  uint64_t v4 = (const char *)ot::Cli::Output::Stringify<otCommissionerJoinerEvent,(unsigned short)5>(a2, (uint64_t)ot::Cli::Commissioner::HandleJoinerEvent(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*)::kEventStrings, (uint64_t)"unknown");
  ot::Cli::Output::OutputFormat(a1, "Commissioner: Joiner %s ", v4);
  if (a4) {
    ot::Cli::Output::OutputExtAddress(a1, a4);
  }
  return ot::Cli::Output::OutputNewLine(a1);
}

uint64_t ot::Cli::Output::Stringify<otCommissionerJoinerEvent,(unsigned short)5>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 5u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otCommissionerJoinerEvent,(unsigned short)5>(a1, a2, a3);
}

uint64_t ot::Cli::Commissioner::Process<1864361470ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  return otCommissionerStop(InstancePtr);
}

uint64_t ot::Cli::Commissioner::Process<428983089745ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  unsigned __int16 State = otCommissionerGetState(InstancePtr);
  uint64_t v3 = (const char *)ot::Cli::Commissioner::StateToString(State);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%s", v3);
  return 0;
}

uint64_t ot::Cli::Commissioner::Process(ot::Cli::Commissioner *this, const char **a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  unsigned int v15 = 35;
  unsigned int v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    || ot::Utils::CmdLineParser::Arg::operator==(v16, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::Commissioner,(unsigned short)12>((uint64_t)this, (const char **)&ot::Cli::Commissioner::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v16)) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v16);
    unsigned int v14 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>,(unsigned short)12>((ot::BinarySearch *)&CString, (char *)&ot::Cli::Commissioner::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
    if (v14)
    {
      unsigned __int16 v9 = (uint64_t (*)(void *, const char **))*((void *)v14 + 1);
      uint64_t v6 = *((void *)v14 + 2);
      unsigned int v10 = (void *)((char *)this + (v6 >> 1));
      if (v6) {
        return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v16 + 1);
      }
      else {
        return v9(v10, v16 + 1);
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::Commissioner,(unsigned short)12>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 36;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::Commissioner,(unsigned short)12>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>,(unsigned short)12>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)0xC, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>,(unsigned short)12>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Cli::Commissioner::HandleEnergyReport(ot::Cli::OutputImplementer **this, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 a4)
{
  uint64_t v4 = ot::ToUlong(a2);
  ot::Cli::Output::OutputFormat(this, "Energy: %08lx ", v4);
  for (unsigned __int8 i = 0; i < (int)a4; ++i)
    ot::Cli::Output::OutputFormat(this, "%d ", (char)a3[i]);
  return ot::Cli::Output::OutputNewLine(this);
}

uint64_t ot::Cli::Commissioner::HandlePanIdConflict(ot::Cli::OutputImplementer **this, unsigned __int16 a2, unsigned int a3)
{
  int v5 = a2;
  uint64_t v3 = ot::ToUlong(a3);
  return ot::Cli::Output::OutputLine(this, "Conflict: %04x, %08lx", v5, v3);
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::Commissioner>::Compare(a1, a2);
}

uint64_t ot::Cli::Dataset::PrintOld(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 120) & 2) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "Pending Timestamp: ");
    ot::Cli::Output::OutputUint64Line(a1, *(void *)(a2 + 16));
  }
  if (*(_WORD *)(a2 + 120))
  {
    ot::Cli::Output::OutputFormat(a1, "Active Timestamp: ");
    ot::Cli::Output::OutputUint64Line(a1, *(void *)a2);
  }
  if ((*(_WORD *)(a2 + 120) & 0x100) != 0) {
    ot::Cli::Output::OutputLine(a1, "Channel: %d", *(unsigned __int16 *)(a2 + 90));
  }
  if ((*(_WORD *)(a2 + 120) & 0x800) != 0)
  {
    uint64_t v2 = ot::ToUlong(*(unsigned int *)(a2 + 116));
    ot::Cli::Output::OutputLine(a1, "Channel Mask: 0x%08lx", v2);
  }
  if ((*(_WORD *)(a2 + 120) & 0x40) != 0)
  {
    uint64_t v3 = ot::ToUlong(*(unsigned int *)(a2 + 84));
    ot::Cli::Output::OutputLine(a1, "Delay: %lu", v3);
  }
  if ((*(_WORD *)(a2 + 120) & 0x10) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "Ext PAN ID: ");
    ot::Cli::Output::OutputBytesLine<(unsigned char)8>(a1, (const unsigned __int8 *)(a2 + 65));
  }
  if ((*(_WORD *)(a2 + 120) & 0x20) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "Mesh Local Prefix: ");
    ot::Cli::Output::OutputIp6PrefixLine(a1, (unsigned __int8 *)(a2 + 73));
  }
  if ((*(_WORD *)(a2 + 120) & 4) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "Network Key: ");
    ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, (const unsigned __int8 *)(a2 + 32));
  }
  if ((*(_WORD *)(a2 + 120) & 8) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "Network Name: ");
    ot::Cli::Output::OutputLine(a1, "%s", (const char *)(a2 + 48));
  }
  if ((*(_WORD *)(a2 + 120) & 0x80) != 0) {
    ot::Cli::Output::OutputLine(a1, "PAN ID: 0x%04x", *(unsigned __int16 *)(a2 + 88));
  }
  if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "PSKc: ");
    ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, (const unsigned __int8 *)(a2 + 94));
  }
  if ((*(_WORD *)(a2 + 120) & 0x400) != 0)
  {
    ot::Cli::Output::OutputFormat(a1, "Security Policy: ");
    ot::Cli::Dataset::OutputSecurityPolicy(a1, (unsigned __int16 *)(a2 + 110));
  }
  return 0;
}

uint64_t ot::Cli::Dataset::OutputSecurityPolicy(ot::Cli::OutputImplementer **a1, unsigned __int16 *a2)
{
  if (a2[1]) {
    ot::Cli::Output::OutputFormat(a1, "o");
  }
  if ((a2[1] & 2) != 0) {
    ot::Cli::Output::OutputFormat(a1, "n");
  }
  if ((a2[1] & 4) != 0) {
    ot::Cli::Output::OutputFormat(a1, "r");
  }
  if ((a2[1] & 8) != 0) {
    ot::Cli::Output::OutputFormat(a1, "c");
  }
  if ((a2[1] & 0x10) != 0) {
    ot::Cli::Output::OutputFormat(a1, "C");
  }
  if ((a2[1] & 0x20) != 0) {
    ot::Cli::Output::OutputFormat(a1, "e");
  }
  if ((a2[1] & 0x40) != 0) {
    ot::Cli::Output::OutputFormat(a1, "p");
  }
  if ((a2[1] & 0x100) != 0) {
    ot::Cli::Output::OutputFormat(a1, "R");
  }
  return ot::Cli::Output::OutputLine(a1, " %u", (a2[1] >> 9) & 7);
}

uint64_t ot::Cli::Dataset::Print(ot::Cli::OutputImplementer **a1, unsigned __int8 *a2)
{
  unsigned int v6 = otDatasetParseTlvs(a2, (uint64_t)v7);
  if (!v6)
  {
    if ((v19 & 2) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Pending Timestamp: ");
      ot::Cli::Output::OutputUint64Line(a1, v7[2]);
    }
    if (v19)
    {
      ot::Cli::Output::OutputFormat(a1, "Active Timestamp: ");
      ot::Cli::Output::OutputUint64Line(a1, v7[0]);
    }
    if ((v19 & 0x100) != 0) {
      ot::Cli::Output::OutputLine(a1, "Channel: %d", v14);
    }
    if ((v19 & 0x1000) != 0) {
      ot::Cli::Output::OutputLine(a1, "Wake-up Channel: %d", v15);
    }
    if ((v19 & 0x800) != 0)
    {
      uint64_t v2 = ot::ToUlong(v18);
      ot::Cli::Output::OutputLine(a1, "Channel Mask: 0x%08lx", v2);
    }
    if ((v19 & 0x40) != 0)
    {
      uint64_t v3 = ot::ToUlong(v12);
      ot::Cli::Output::OutputLine(a1, "Delay: %lu", v3);
    }
    if ((v19 & 0x10) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Ext PAN ID: ");
      ot::Cli::Output::OutputBytesLine<(unsigned char)8>(a1, v10);
    }
    if ((v19 & 0x20) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Mesh Local Prefix: ");
      ot::Cli::Output::OutputIp6PrefixLine(a1, v11);
    }
    if ((v19 & 4) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Network Key: ");
      ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, v8);
    }
    if ((v19 & 8) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Network Name: ");
      ot::Cli::Output::OutputLine(a1, "%s", v9);
    }
    if ((v19 & 0x80) != 0) {
      ot::Cli::Output::OutputLine(a1, "PAN ID: 0x%04x", v13);
    }
    if ((v19 & 0x200) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "PSKc: ");
      ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, v16);
    }
    if ((v19 & 0x400) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Security Policy: ");
      ot::Cli::Dataset::OutputSecurityPolicy(a1, v17);
    }
  }
  return v6;
}

uint64_t ot::Cli::Dataset::Process<1930295280ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned __int16 v11 = a1;
  unsigned int v10 = (ot::Utils::CmdLineParser **)a2;
  NewNetworunint64_t k = 7;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "active"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otDatasetGetActiveTlvs(InstancePtr, ot::Cli::Dataset::sDatasetTlvs);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v10, "pending"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr(a1);
    return otDatasetGetPendingTlvs(v3, ot::Cli::Dataset::sDatasetTlvs);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v10, "new"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr(a1);
    NewNetworunint64_t k = otDatasetCreateNewNetwork(v4, (uint64_t)v12);
    if (!NewNetwork) {
      return otDatasetConvertToTlvs((uint64_t)v12, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)v10, "tlvs"))
  {
    unsigned __int16 v8 = 254;
    NewNetworunint64_t k = ot::Utils::CmdLineParser::Arg::ParseAsHexString(v10 + 1, (char *)&v8, (unsigned __int16 *)ot::Cli::Dataset::sDatasetTlvs, v5);
    if (!NewNetwork) {
      byte_1004BC4BE = v8;
    }
  }
  return NewNetwork;
}

uint64_t ot::Cli::Dataset::Process<109399277033242ull>(ot::Cli::Output *a1, const char **a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  unsigned int ActiveTlvs = otDatasetGetActiveTlvs(InstancePtr, v7);
  if (!ActiveTlvs)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
    {
      return ot::Cli::Dataset::Print((ot::Cli::OutputImplementer **)a1, v7);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-x"))
    {
      ot::Cli::Output::OutputBytesLine((ot::Cli::OutputImplementer **)a1, v7, v8);
    }
    else
    {
      return 7;
    }
  }
  return ActiveTlvs;
}

uint64_t ot::Cli::Dataset::Process<28438073741397367ull>(ot::Cli::Output *a1, const char **a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  unsigned int PendingTlvs = otDatasetGetPendingTlvs(InstancePtr, v7);
  if (!PendingTlvs)
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
    {
      return ot::Cli::Dataset::Print((ot::Cli::OutputImplementer **)a1, v7);
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-x"))
    {
      ot::Cli::Output::OutputBytesLine((ot::Cli::OutputImplementer **)a1, v7, v8);
    }
    else
    {
      return 7;
    }
  }
  return PendingTlvs;
}

uint64_t ot::Cli::Dataset::Process<17991946006187835024ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[15] & 1) != 0) {
      ot::Cli::Output::OutputUint64Line(a1, __b[0]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v5 = ot::Utils::CmdLineParser::Arg::ParseAsUint64(a2, (char *)__b, v2);
    if (!v5)
    {
      LOWORD(__b[1]) = 0;
      BYTE2(__b[1]) = 0;
      LOWORD(__b[15]) = __b[15] & 0xFFFE | 1;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<29803101196888419ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[60] & 0x100) != 0) {
      ot::Cli::Output::OutputLine(a1, "%d", __b[45]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v5 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(a2, (char *)&__b[45], v2);
    if (!v5)
    {
      __b[60] = __b[60] & 0xFEFF | 0x100;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<7419947443224800644ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[60] & 0x1000) != 0) {
      ot::Cli::Output::OutputLine(a1, "%d", __b[46]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v5 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(a2, (char *)&__b[46], v2);
    if (!v5)
    {
      __b[60] = __b[60] & 0xEFFF | 0x1000;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<11734141454226389327ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v6 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v6 && (__b[30] & 0x800) != 0)
    {
      uint64_t v2 = ot::ToUlong(__b[29]);
      ot::Cli::Output::OutputLine(a1, "0x%08lx", v2);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v6 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(a2, (char *)&__b[29], v3);
    if (!v6)
    {
      LOWORD(__b[30]) = __b[30] & 0xF7FF | 0x800;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v6;
}

uint64_t ot::Cli::Dataset::Process<483635559789ull>()
{
  return 0;
}

uint64_t ot::Cli::Dataset::Process<125517434289129ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned int v6 = 7;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "active"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otDatasetSetActiveTlvs(InstancePtr, ot::Cli::Dataset::sDatasetTlvs);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "pending"))
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr(a1);
    return otDatasetSetPendingTlvs(v3, ot::Cli::Dataset::sDatasetTlvs);
  }
  return v6;
}

uint64_t ot::Cli::Dataset::Process<513233767555ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v6 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v6 && (__b[30] & 0x40) != 0)
    {
      uint64_t v2 = ot::ToUlong(__b[21]);
      ot::Cli::Output::OutputLine(a1, "%lu", v2);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v6 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(a2, (char *)&__b[21], v3);
    if (!v6)
    {
      LOWORD(__b[30]) = __b[30] & 0xFFBF | 0x40;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v6;
}

uint64_t ot::Cli::Dataset::Process<7040008844819482601ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v4 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v4 && (__b[60] & 0x10) != 0) {
      ot::Cli::Output::OutputBytesLine<(unsigned char)8>(a1, (const unsigned __int8 *)&__b[32] + 1);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v4 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>(a2, (char *)&__b[32] + 1);
    if (!v4)
    {
      __b[60] = __b[60] & 0xFFEF | 0x10;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v4;
}

uint64_t ot::Cli::Dataset::PrintKeychain(ot::Cli::OutputImplementer **this, const char **a2)
{
  unsigned int v4 = 0;
  ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(v6);
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-a"))
  {
    if ((dskeychainRcp::FindAndGetDataSet(0, (ot::MeshCoP::Dataset::Info *)v6) & 1) == 1)
    {
      ot::Cli::Output::OutputLine(this, "ACTIVE DATASET:");
      ot::Cli::Output::OutputLine(this, "===============");
      return ot::Cli::Dataset::PrintOld(this, (uint64_t)v6);
    }
    else
    {
      ot::Cli::Output::OutputLine(this, "Active dataset not found");
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-p"))
  {
    if ((dskeychainRcp::FindAndGetDataSet(1u, (ot::MeshCoP::Dataset::Info *)v6) & 1) == 1)
    {
      ot::Cli::Output::OutputLine(this, "PENDING DATASET:");
      ot::Cli::Output::OutputLine(this, "================");
      return ot::Cli::Dataset::PrintOld(this, (uint64_t)v6);
    }
    else
    {
      ot::Cli::Output::OutputLine(this, "Pending dataset not found");
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-ap"))
  {
    if ((dskeychainRcp::FindAndGetDataSet(0, (ot::MeshCoP::Dataset::Info *)v6) & 1) == 1)
    {
      ot::Cli::Output::OutputLine(this, "ACTIVE DATASET:");
      ot::Cli::Output::OutputLine(this, "===============");
      unsigned int v4 = ot::Cli::Dataset::PrintOld(this, (uint64_t)v6);
    }
    else
    {
      ot::Cli::Output::OutputLine(this, "Active dataset not found");
    }
    ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(v6);
    if ((dskeychainRcp::FindAndGetDataSet(1u, (ot::MeshCoP::Dataset::Info *)v6) & 1) == 1)
    {
      ot::Cli::Output::OutputLine(this, "================");
      ot::Cli::Output::OutputLine(this, "PENDING DATASET:");
      ot::Cli::Output::OutputLine(this, "================");
      return ot::Cli::Dataset::PrintOld(this, (uint64_t)v6);
    }
    else
    {
      ot::Cli::Output::OutputLine(this, "");
      ot::Cli::Output::OutputLine(this, "Pending dataset not found");
    }
  }
  else
  {
    return 7;
  }
  return v4;
}

void *ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(void *a1)
{
  return memset(a1, 0, 0x80uLL);
}

{
  return ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(a1);
}

uint64_t ot::Cli::Dataset::Process<13879157579010930576ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v7 = a1;
  unsigned int v6 = a2;
  unsigned int v5 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[60] & 0x20) != 0)
    {
      ot::Cli::Output::OutputFormat(a1, "Mesh Local Prefix: ");
      ot::Cli::Output::OutputIp6PrefixLine(a1, (unsigned __int8 *)&__b[36] + 1);
    }
  }
  else
  {
    unsigned int v5 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)v6, (uint64_t)&v4);
    if (!v5)
    {
      memset(__b, 0, sizeof(__b));
      *(void *)((char *)&__b[36] + 1) = v4;
      __b[60] = __b[60] & 0xFFDF | 0x20;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<2882870027264844783ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v4 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v4 && (__b[60] & 4) != 0) {
      ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, (const unsigned __int8 *)&__b[16]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v4 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>(a2, (char *)&__b[16]);
    if (!v4)
    {
      __b[60] = __b[60] & 0xFFFB | 4;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v4;
}

uint64_t ot::Cli::Dataset::Process<11015563977516890969ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[60] & 8) != 0) {
      ot::Cli::Output::OutputLine(a1, "%s", (const char *)&__b[24]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    uint64_t CString = (ot *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
    unsigned int v5 = otNetworkNameFromString((uint64_t)&__b[24], CString);
    if (!v5)
    {
      __b[60] = __b[60] & 0xFFF7 | 8;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<424573284472ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[60] & 0x80) != 0) {
      ot::Cli::Output::OutputLine(a1, "0x%04x", __b[44]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v5 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(a2, (char *)&__b[44], v2);
    if (!v5)
    {
      __b[60] = __b[60] & 0xFF7F | 0x80;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<13154242556027051009ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser **a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[15] & 2) != 0) {
      ot::Cli::Output::OutputUint64Line(a1, __b[2]);
    }
  }
  else
  {
    memset(__b, 0, sizeof(__b));
    unsigned int v5 = ot::Utils::CmdLineParser::Arg::ParseAsUint64(a2, (char *)&__b[2], v2);
    if (!v5)
    {
      LOWORD(__b[3]) = 0;
      BYTE2(__b[3]) = 0;
      LOWORD(__b[15]) = __b[15] & 0xFFFD | 2;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<12771032504430052662ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned int v21 = a1;
  __int16 v20 = a2;
  unsigned int v19 = 0;
  unsigned __int8 v18 = 0;
  memset(__b, 0, sizeof(__b));
  for (unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)(v20 + 1);
        !ot::Utils::CmdLineParser::Arg::IsEmpty(i);
        unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "activetimestamp"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint64((ot::Utils::CmdLineParser **)i, (char *)__b, v2);
      if (v19) {
        return v19;
      }
      __b[4] = 0;
      LOBYTE(__b[5]) = 0;
      __b[60] = __b[60] & 0xFFFE | 1;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "pendingtimestamp"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint64((ot::Utils::CmdLineParser **)i, (char *)&__b[8], v3);
      if (v19) {
        return v19;
      }
      __b[12] = 0;
      LOBYTE(__b[13]) = 0;
      __b[60] = __b[60] & 0xFFFD | 2;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "networkkey"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFFFB | 4;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>((ot::Utils::CmdLineParser **)i, (char *)&__b[16]);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "networkname"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFFF7 | 8;
      if (ot::Utils::CmdLineParser::Arg::IsEmpty(i)) {
        return 7;
      }
      uint64_t CString = (ot *)ot::Utils::CmdLineParser::Arg::GetCString(i);
      unsigned int v19 = otNetworkNameFromString((uint64_t)&__b[24], CString);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "extpanid"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFFEF | 0x10;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)i, (char *)&__b[32] + 1);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "localprefix"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFFDF | 0x20;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)i, (uint64_t)&v16);
      if (v19) {
        return v19;
      }
      *(void *)((char *)&__b[36] + 1) = v16;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "delaytimer"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFFBF | 0x40;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)i, (char *)&__b[42], v5);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "panid"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFF7F | 0x80;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)i, (char *)&__b[44], v6);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "channel"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xFEFF | 0x100;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)i, (char *)&__b[45], v7);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "wakeupchannel"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xEFFF | 0x1000;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)i, (char *)&__b[46], v8);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "channelmask"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      __b[60] = __b[60] & 0xF7FF | 0x800;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)i, (char *)&__b[58], v9);
      if (v19) {
        return v19;
      }
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "securitypolicy"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      unsigned int v19 = ot::Cli::Dataset::ParseSecurityPolicy((uint64_t)a1, &__b[55], (ot::Utils::CmdLineParser ***)&i);
      if (v19) {
        return v19;
      }
      __b[60] = __b[60] & 0xFBFF | 0x400;
    }
    else
    {
      if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "-x")) {
        return 7;
      }
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      unsigned __int16 v15 = 128;
      unsigned int v19 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)i, (char *)&v15, v22, v10);
      if (v19) {
        return v19;
      }
      unsigned __int8 v18 = v15;
    }
  }
  if (ot::Utils::CmdLineParser::Arg::operator==(v20, "active"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otDatasetSendMgmtActiveSet(InstancePtr, (uint64_t)__b, (char *)v22, v18, 0, 0);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v20, "pending"))
  {
    uint64_t v12 = ot::Cli::Output::GetInstancePtr(a1);
    return otDatasetSendMgmtPendingSet(v12, (uint64_t)__b, (char *)v22, v18, 0, 0);
  }
  else
  {
    return 7;
  }
}

uint64_t ot::Cli::Dataset::ParseSecurityPolicy(uint64_t a1, _DWORD *a2, ot::Utils::CmdLineParser ***a3)
{
  uint64_t v16 = a1;
  unsigned __int16 v15 = a2;
  unsigned __int16 v14 = (ot::Utils::CmdLineParser::Arg **)a3;
  unsigned int v13 = 0;
  unsigned __int8 v11 = 0;
  *(_DWORD *)uint64_t v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(*a3, (char *)v12, (unsigned __int8 *)a3);
  if (!v13)
  {
    *unsigned __int16 v14 = (ot::Utils::CmdLineParser::Arg *)((char *)*v14 + 8);
    if (!ot::Utils::CmdLineParser::Arg::IsEmpty(*v14))
    {
      uint64_t CString = (unsigned char *)ot::Utils::CmdLineParser::Arg::GetCString(*v14);
      while (*CString)
      {
        unsigned int v3 = (char)*CString;
        BOOL v4 = v3 > 0x43;
        uint64_t v5 = v3 - 67;
        if (v4)
        {
          uint64_t v7 = v5;
          char v6 = 1;
        }
        else
        {
          uint64_t v7 = v5;
          char v6 = 0;
        }
        if (v6)
        {
LABEL_18:
          unsigned int v13 = 7;
          goto LABEL_25;
        }
        switch(v7)
        {
          case 0:
            v12[1] = v12[1] & 0xFFEF | 0x10;
            goto LABEL_19;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 33:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 46:
            goto LABEL_18;
          case 15:
            v12[1] = v12[1] & 0xFEFF | 0x100;
            goto LABEL_19;
          case 32:
            v12[1] = v12[1] & 0xFFF7 | 8;
            goto LABEL_19;
          case 34:
            v12[1] = v12[1] & 0xFFDF | 0x20;
            goto LABEL_19;
          case 43:
            v12[1] = v12[1] & 0xFFFD | 2;
            goto LABEL_19;
          case 44:
            v12[1] = v12[1] & 0xFFFE | 1;
            goto LABEL_19;
          case 45:
            v12[1] = v12[1] & 0xFFBF | 0x40;
            goto LABEL_19;
          case 47:
            v12[1] = v12[1] & 0xFFFB | 4;
LABEL_19:
            ++CString;
            break;
          default:
            JUMPOUT(0);
        }
      }
      *unsigned __int16 v14 = (ot::Utils::CmdLineParser::Arg *)((char *)*v14 + 8);
      if (!ot::Utils::CmdLineParser::Arg::IsEmpty(*v14))
      {
        unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)*v14, (char *)&v11, v8);
        if (!v13)
        {
          if (v11 <= 7u) {
            v12[1] = v12[1] & 0xF1FF | ((v11 & 7) << 9);
          }
          else {
            unsigned int v13 = 7;
          }
        }
      }
    }
  }
LABEL_25:
  if (!v13) {
    *unsigned __int16 v15 = *(_DWORD *)v12;
  }
  return v13;
}

uint64_t ot::Cli::Dataset::Process<12771032453691045162ull>(ot::Cli::Output *a1, const char **a2)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unsigned int v15 = 0;
  unsigned __int8 v13 = 0;
  char v12 = 0;
  __int16 v14 = 0;
  for (unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)(a2 + 1);
        !ot::Utils::CmdLineParser::Arg::IsEmpty(i);
        unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8))
  {
    if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "activetimestamp"))
    {
      __int16 v14 = v14 & 0xFFFE | 1;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "pendingtimestamp"))
    {
      __int16 v14 = v14 & 0xFFFD | 2;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "networkkey"))
    {
      __int16 v14 = v14 & 0xFFFB | 4;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "networkname"))
    {
      __int16 v14 = v14 & 0xFFF7 | 8;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "extpanid"))
    {
      __int16 v14 = v14 & 0xFFEF | 0x10;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "localprefix"))
    {
      __int16 v14 = v14 & 0xFFDF | 0x20;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "delaytimer"))
    {
      __int16 v14 = v14 & 0xFFBF | 0x40;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "panid"))
    {
      __int16 v14 = v14 & 0xFF7F | 0x80;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "channel"))
    {
      __int16 v14 = v14 & 0xFEFF | 0x100;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "wakeupchannel"))
    {
      __int16 v14 = v14 & 0xEFFF | 0x1000;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "securitypolicy"))
    {
      __int16 v14 = v14 & 0xFBFF | 0x400;
    }
    else if (ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "-x"))
    {
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      unsigned __int16 v9 = 32;
      unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)i, (char *)&v9, v18, v2);
      if (v15) {
        return v15;
      }
      unsigned __int8 v13 = v9;
    }
    else
    {
      if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)i, "address")) {
        return 7;
      }
      unsigned __int8 i = (ot::Utils::CmdLineParser::Arg *)((char *)i + 8);
      unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address((const char **)i, (uint64_t)v11);
      if (v15) {
        return v15;
      }
      char v12 = 1;
    }
  }
  if (ot::Utils::CmdLineParser::Arg::operator==(v16, "active"))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    if (v12) {
      return otDatasetSendMgmtActiveGet(InstancePtr, (uint64_t)&v14, (char *)v18, v13, (uint64_t)v11);
    }
    else {
      return otDatasetSendMgmtActiveGet(InstancePtr, (uint64_t)&v14, (char *)v18, v13, 0);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v16, "pending"))
  {
    uint64_t v6 = ot::Cli::Output::GetInstancePtr(a1);
    if (v12) {
      return otDatasetSendMgmtPendingGet(v6, (uint64_t)&v14, (char *)v18, v13, (uint64_t)v11);
    }
    else {
      return otDatasetSendMgmtPendingGet(v6, (uint64_t)&v14, (char *)v18, v13, 0);
    }
  }
  else
  {
    return 7;
  }
}

uint64_t ot::Cli::Dataset::Process<1648543237ull>(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    unsigned int v11 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v11 && (__b[60] & 0x200) != 0) {
      ot::Cli::Output::OutputBytesLine<(unsigned char)16>(a1, (const unsigned __int8 *)&__b[47]);
    }
    return v11;
  }
  memset(__b, 0, sizeof(__b));
  if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)a2, "-p"))
  {
    unsigned int v11 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)16>((ot::Utils::CmdLineParser **)a2, (char *)&__b[47]);
    if (v11) {
      return v11;
    }
    goto LABEL_18;
  }
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 8))) {
    return 7;
  }
  uint64_t CString = (long long *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(a2 + 8));
  if ((__b[60] & 8) != 0)
  {
    unsigned __int16 v8 = &__b[24];
  }
  else
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
    otThreadGetNetworkName(InstancePtr);
    unsigned __int16 v8 = v3;
  }
  if ((__b[60] & 0x10) != 0)
  {
    unsigned int Pskc = otDatasetGeneratePskc(CString, (uint64_t)v8, (uint64_t)&__b[32] + 1, (uint64_t)&__b[47]);
  }
  else
  {
    uint64_t v5 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)a1);
    otThreadGetExtendedPanId(v5);
    unsigned int Pskc = otDatasetGeneratePskc(CString, (uint64_t)v8, v6, (uint64_t)&__b[47]);
  }
  unsigned int v11 = Pskc;
  if (!Pskc)
  {
LABEL_18:
    __b[60] = __b[60] & 0xFDFF | 0x200;
    return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
  }
  return v11;
}

uint64_t ot::Cli::Dataset::Process<15490430763919346926ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  unsigned int v5 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    unsigned int v5 = otDatasetParseTlvs(ot::Cli::Dataset::sDatasetTlvs, (uint64_t)__b);
    if (!v5 && (__b[60] & 0x400) != 0) {
      ot::Cli::Dataset::OutputSecurityPolicy(a1, &__b[55]);
    }
  }
  else
  {
    BOOL v4 = (ot::Utils::CmdLineParser **)v6;
    memset(__b, 0, sizeof(__b));
    unsigned int v5 = ot::Cli::Dataset::ParseSecurityPolicy((uint64_t)a1, &__b[55], &v4);
    if (!v5)
    {
      __b[60] = __b[60] & 0xFBFF | 0x400;
      return otDatasetUpdateTlvs((uint64_t)__b, ot::Cli::Dataset::sDatasetTlvs);
    }
  }
  return v5;
}

uint64_t ot::Cli::Dataset::Process<7568770ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned int v11 = a1;
  unsigned int v10 = a2;
  unsigned int v9 = 0;
  char v8 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "active"))
  {
    char v8 = 0;
  }
  else
  {
    if (!ot::Utils::CmdLineParser::Arg::operator==(v10, "pending")) {
      return 7;
    }
    char v8 = 1;
  }
  unsigned __int16 v7 = 254;
  unsigned int v9 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v10 + 1, (char *)&v7, (unsigned __int16 *)v12, v2);
  if (!v9)
  {
    v12[254] = v7;
    unsigned int v9 = otDatasetParseTlvs(v12, (uint64_t)v13);
    if (!v9)
    {
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
          return otDatasetSetPendingTlvs(InstancePtr, v12);
        }
      }
      else
      {
        uint64_t v3 = ot::Cli::Output::GetInstancePtr(a1);
        return otDatasetSetActiveTlvs(v3, v12);
      }
    }
  }
  return v9;
}

uint64_t ot::Cli::Dataset::Process<1914558731ull>(ot::Cli::OutputImplementer **a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    ot::Cli::Output::OutputBytesLine(a1, ot::Cli::Dataset::sDatasetTlvs, byte_1004BC4BE);
  }
  else {
    return 7;
  }
  return v4;
}

uint64_t ot::Cli::Dataset::Process(ot::Cli::OutputImplementer **this, const char **a2)
{
  uint64_t v16 = this;
  unsigned int v15 = a2;
  unsigned int v14 = 35;
  unsigned __int8 v13 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return ot::Cli::Dataset::Print(this, ot::Cli::Dataset::sDatasetTlvs);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v15, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::Dataset,(unsigned short)22>((uint64_t)this, (const char **)&ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    return 0;
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v15);
    unsigned __int8 v13 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Dataset>,(unsigned short)22>((ot::BinarySearch *)&CString, (char *)&ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
    if (v13)
    {
      unsigned int v9 = (uint64_t (*)(void *, const char **))*((void *)v13 + 1);
      uint64_t v6 = *((void *)v13 + 2);
      unsigned int v10 = (ot::Cli::OutputImplementer **)((char *)this + (v6 >> 1));
      if (v6) {
        return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v15 + 1);
      }
      else {
        return v9(v10, v15 + 1);
      }
    }
  }
  return v14;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::Dataset,(unsigned short)22>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 66;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::Dataset,(unsigned short)22>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Dataset>,(unsigned short)22>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)0x16, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Dataset>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Dataset>,(unsigned short)22>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Dataset>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::Dataset>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::Dataset>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::Dataset>::Compare(a1, a2);
}

uint64_t __cxx_global_var_init_4()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_4()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_cli_dataset_cpp()
{
  return __cxx_global_var_init_1_4();
}

uint64_t ot::Cli::History::ParseArgs(ot::Cli::History *this, const char **a2, BOOL *a3, char *a4)
{
  char v8 = (ot::Utils::CmdLineParser::Arg *)a2;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "list"))
  {
    char v8 = (ot::Utils::CmdLineParser::Arg *)((char *)v8 + 8);
    *a3 = 1;
  }
  else
  {
    *a3 = 0;
  }
  if (ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v8, a4, v4)) {
    *(_WORD *)a4 = 0;
  }
  else {
    char v8 = (ot::Utils::CmdLineParser::Arg *)((char *)v8 + 8);
  }
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(v8)) {
    return 0;
  }
  else {
    return 7;
  }
}

uint64_t ot::Cli::History::Process<123339735204840ull>(ot::Cli::Output *a1, const char **a2)
{
  char v32 = a1;
  unsigned int v31 = a2;
  uint64_t v22 = a1;
  unsigned int v30 = 0;
  BOOL v29 = 0;
  unsigned __int16 v28 = 0;
  uint64_t v26 = 0;
  unsigned int v25 = 0;
  unsigned int v30 = ot::Cli::History::ParseArgs(a1, a2, &v29, (char *)&v28);
  if (!v30)
  {
    if (!v29) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)8>((ot::Cli::OutputImplementer **)v22, (const char *const *)ot::Cli::History::Process<123339735204840ull>(ot::Utils::CmdLineParser::Arg *)::kUnicastAddrInfoTitles, ot::Cli::History::Process<123339735204840ull>(ot::Utils::CmdLineParser::Arg *)::kUnicastAddrInfoColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v27);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v21 = 1;
      if (v28) {
        BOOL v21 = i < (int)v28;
      }
      if (!v21) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(v22);
      uint64_t v26 = otHistoryTrackerIterateUnicastAddressHistory(InstancePtr, (uint64_t)v27, &v25);
      if (!v26) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v25, v34, 0x15u);
      otIp6AddressToString(v26, __s, 44);
      if (v29)
      {
        unsigned int v15 = (const char *)ot::Cli::Output::Stringify<otHistoryTrackerAddressEvent,(unsigned short)2>(*(_DWORD *)(v26 + 20), (uint64_t)ot::Cli::kSimpleEventStrings, (uint64_t)"unknown");
        int v16 = *(unsigned __int8 *)(v26 + 16);
        char v8 = (const char *)ot::Cli::Interpreter::AddressOriginToString((ot::Cli::Interpreter *)*(unsigned __int8 *)(v26 + 17));
        unsigned __int8 v9 = *(unsigned char *)(v26 + 24) & 0xF;
        unsigned int v10 = "yes";
        if ((*(unsigned char *)(v26 + 24) & 0x10) != 0) {
          unsigned int v11 = "yes";
        }
        else {
          unsigned int v11 = "no";
        }
        if ((*(unsigned char *)(v26 + 24) & 0x20) != 0) {
          char v12 = "yes";
        }
        else {
          char v12 = "no";
        }
        if ((*(unsigned char *)(v26 + 24) & 0x40) == 0) {
          unsigned int v10 = "no";
        }
        uint64_t v17 = &v14;
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)v22, "%s -> event:%s address:%s prefixlen:%d origin:%s scope:%d preferred:%s valid:%s rloc:%s", v34, v15, __s, v16, v8, v9, v11, v12, v10);
      }
      else
      {
        size_t v23 = 0;
        unsigned int v19 = __s;
        size_t v23 = strlen(__s);
        snprintf(&__s[v23], 44 - v23, "/%d", *(unsigned __int8 *)(v26 + 16));
        unsigned __int8 v18 = (const char *)ot::Cli::Output::Stringify<otHistoryTrackerAddressEvent,(unsigned short)2>(*(_DWORD *)(v26 + 20), (uint64_t)ot::Cli::kSimpleEventStrings, (uint64_t)"unknown");
        uint64_t v3 = (const char *)ot::Cli::Interpreter::AddressOriginToString((ot::Cli::Interpreter *)*(unsigned __int8 *)(v26 + 17));
        unsigned __int8 v4 = *(unsigned char *)(v26 + 24) & 0xF;
        if ((*(unsigned char *)(v26 + 24) & 0x10) != 0) {
          char v5 = 89;
        }
        else {
          char v5 = 78;
        }
        if ((*(unsigned char *)(v26 + 24) & 0x20) != 0) {
          char v6 = 89;
        }
        else {
          char v6 = 78;
        }
        if ((*(unsigned char *)(v26 + 24) & 0x40) != 0) {
          char v7 = 89;
        }
        else {
          char v7 = 78;
        }
        __int16 v20 = &v14;
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)v22, "| %20s | %-7s | %-43s | %-6s | %3d | %c | %c | %c |", v34, v18, v19, v3, v4, v5, v6, v7);
      }
    }
  }
  return v30;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)8>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 8u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)8>(a1, a2, a3);
}

uint64_t ot::Cli::Output::Stringify<otHistoryTrackerAddressEvent,(unsigned short)2>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 2u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otHistoryTrackerAddressEvent,(unsigned short)2>(a1, a2, a3);
}

uint64_t ot::Cli::History::Process<31451632477041015ull>(ot::Cli::History *a1, const char **a2)
{
  unsigned __int8 v18 = a1;
  uint64_t v17 = a2;
  unsigned int v16 = 0;
  BOOL v15 = 0;
  unsigned __int16 v14 = 0;
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  unsigned int v16 = ot::Cli::History::ParseArgs(a1, a2, &v15, (char *)&v14);
  if (!v16)
  {
    if (!v15) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)4>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::Process<31451632477041015ull>(ot::Utils::CmdLineParser::Arg *)::kMulticastAddrInfoTitles, ot::Cli::History::Process<31451632477041015ull>(ot::Utils::CmdLineParser::Arg *)::kMulticastAddrInfoColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v13);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v8 = 1;
      if (v14) {
        BOOL v8 = i < (int)v14;
      }
      if (!v8) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v12 = otHistoryTrackerIterateMulticastAddressHistory(InstancePtr, (uint64_t)v13, &v11);
      if (!v12) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v11, v20, 0x15u);
      otIp6AddressToString(v12, v19, 40);
      uint64_t v3 = "%s -> event:%s address:%s origin:%s";
      if (!v15) {
        uint64_t v3 = "| %20s | %-12s | %-39s | %-6s |";
      }
      char v7 = (char *)v3;
      uint64_t v6 = ot::Cli::Output::Stringify<otHistoryTrackerAddressEvent,(unsigned short)2>(*(_DWORD *)(v12 + 20), (uint64_t)ot::Cli::History::Process<31451632477041015ull>(ot::Utils::CmdLineParser::Arg *)::kEventStrings, (uint64_t)"unknown");
      uint64_t v4 = ot::Cli::Interpreter::AddressOriginToString((ot::Cli::Interpreter *)*(unsigned __int8 *)(v12 + 16));
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, v7, v20, v6, v19, v4);
    }
  }
  return v16;
}

uint64_t ot::Cli::History::Process<8023188516701246990ull>(ot::Cli::History *a1, const char **a2)
{
  unsigned __int8 v18 = a1;
  uint64_t v17 = a2;
  unsigned int v16 = 0;
  BOOL v15 = 0;
  unsigned __int16 v14 = 0;
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  unsigned int v16 = ot::Cli::History::ParseArgs(a1, a2, &v15, (char *)&v14);
  if (!v16)
  {
    if (!v15) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)7>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kNeighborInfoTitles, ot::Cli::History::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kNeighborInfoColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v13);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v6 = 1;
      if (v14) {
        BOOL v6 = i < (int)v14;
      }
      if (!v6) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v12 = (const unsigned __int8 *)otHistoryTrackerIterateNeighborHistory(InstancePtr, (uint64_t)v13, &v11);
      if (!v12) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v11, v19, 0x15u);
      char v10 = v10 & 0xFE | ((v12[11] & 4) != 0);
      char v10 = v10 & 0xFD | (2 * ((v12[11] & 8) != 0));
      char v10 = v10 & 0xFB | (4 * ((v12[11] & 0x10) != 0));
      ot::Cli::Interpreter::LinkModeToString(&v10, v9);
      if (v15) {
        uint64_t v3 = "%s -> type:%s event:%s extaddr:";
      }
      else {
        uint64_t v3 = "| %20s | %-6s | %-9s | ";
      }
      if ((v12[11] & 0x20) != 0) {
        uint64_t v4 = "Child";
      }
      else {
        uint64_t v4 = "Router";
      }
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, v3, v19, v4, ot::Cli::History::Process<8023188516701246990ull>(ot::Utils::CmdLineParser::Arg *)::kEventString[v12[11] & 3]);
      ot::Cli::Output::OutputExtAddress((ot::Cli::OutputImplementer **)a1, v12);
      if (v15) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, " rloc16:0x%04x mode:%s rss:%d");
      }
      else {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, " | 0x%04x | %-4s | %7d |");
      }
    }
  }
  return v16;
}

uint64_t ot::Cli::History::Process<123344230057719ull>(ot::Cli::History *a1, const char **a2)
{
  BOOL v15 = a1;
  unsigned __int16 v14 = a2;
  char v13 = 10;
  unsigned int v12 = 0;
  BOOL v11 = 0;
  unsigned __int16 v10 = 0;
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  unsigned int v12 = ot::Cli::History::ParseArgs(a1, a2, &v11, (char *)&v10);
  if (!v12)
  {
    if (!v11) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)5>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::Process<123344230057719ull>(ot::Utils::CmdLineParser::Arg *)::kRouterInfoTitles, ot::Cli::History::Process<123344230057719ull>(ot::Utils::CmdLineParser::Arg *)::kRouterInfoColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v9);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v4 = 1;
      if (v10) {
        BOOL v4 = i < (int)v10;
      }
      if (!v4) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v8 = otHistoryTrackerIterateRouterHistory(InstancePtr, (uint64_t)v9, &v7);
      if (!v8) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v7, v16, 0x15u);
      if (v11) {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "%s -> event:%s router:%u(0x%04x) nexthop:");
      }
      else {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "| %20s | %-14s | %2u (0x%04x) | ");
      }
      if (*(unsigned char *)(v8 + 1) == 63)
      {
        if (v11) {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "%s");
        }
        else {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "%11s");
        }
      }
      else if (v11)
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "%u(0x%04x)");
      }
      else
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "%2u (0x%04x)");
      }
      if ((*(unsigned char *)(v8 + 2) & 0xF) != 0)
      {
        if (v11) {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, " old-cost:%u");
        }
        else {
          ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, " | %3u ->");
        }
      }
      else if (v11)
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, " old-cost:inf");
      }
      else
      {
        ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, " | inf ->");
      }
      if (*(unsigned char *)(v8 + 2) >> 4)
      {
        if (v11) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, " new-cost:%u");
        }
        else {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, " %3u |");
        }
      }
      else if (v11)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, " new-cost:inf");
      }
      else
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, " inf |");
      }
    }
  }
  return v12;
}

uint64_t ot::Cli::History::Process<30629005309797515ull>(ot::Cli::History *a1, const char **a2)
{
  unsigned int v19 = a1;
  unsigned __int8 v18 = a2;
  unsigned int v17 = 0;
  BOOL v16 = 0;
  unsigned __int16 v15 = 0;
  uint64_t v13 = 0;
  unsigned int v12 = 0;
  unsigned int v17 = ot::Cli::History::ParseArgs(a1, a2, &v16, (char *)&v15);
  if (!v17)
  {
    if (!v16) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)5>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::Process<30629005309797515ull>(ot::Utils::CmdLineParser::Arg *)::kNetInfoTitles, ot::Cli::History::Process<30629005309797515ull>(ot::Utils::CmdLineParser::Arg *)::kNetInfoColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v14);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v8 = 1;
      if (v15) {
        BOOL v8 = i < (int)v15;
      }
      if (!v8) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v13 = otHistoryTrackerIterateNetInfoHistory(InstancePtr, (uint64_t)v14, &v12);
      if (!v13) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v12, v20, 0x15u);
      uint64_t v3 = "%s -> role:%s mode:%s rloc16:0x%04x partition-id:%u";
      if (!v16) {
        uint64_t v3 = "| %20s | %-8s | %-4s | 0x%04x | %12u |";
      }
      unsigned int v7 = (char *)v3;
      BOOL v6 = otThreadDeviceRoleToString(*(_DWORD *)v13);
      BOOL v4 = ot::Cli::Interpreter::LinkModeToString((unsigned char *)(v13 + 4), v11);
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, v7, v20, v6, v4, *(unsigned __int16 *)(v13 + 6), *(unsigned int *)(v13 + 8));
    }
  }
  return v17;
}

uint64_t ot::Cli::History::Process<30714ull>(ot::Cli::History *a1, const char **a2)
{
  return ot::Cli::History::ProcessRxTxHistory(a1, 0, a2);
}

uint64_t ot::Cli::History::ProcessRxTxHistory(ot::Cli::History *a1, char a2, const char **a3)
{
  unsigned int v25 = a1;
  char v24 = a2;
  size_t v23 = a3;
  unsigned int v22 = 0;
  BOOL v21 = 0;
  unsigned __int16 v20 = 0;
  char v17 = 0;
  BOOL v16 = 0;
  unsigned __int16 v15 = 0;
  unsigned __int16 v14 = 0;
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  unsigned int v11 = 0;
  unsigned int v22 = ot::Cli::History::ParseArgs(a1, a3, &v21, (char *)&v20);
  if (!v22)
  {
    if (!v21) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)10>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::ProcessRxTxHistory(ot::Cli::History::RxTx,ot::Utils::CmdLineParser::Arg *)::kTableTitles, ot::Cli::History::ProcessRxTxHistory(ot::Cli::History::RxTx,ot::Utils::CmdLineParser::Arg *)::kTableColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v18);
    otHistoryTrackerInitIterator((uint64_t)v19);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v8 = 1;
      if (v20) {
        BOOL v8 = i < (int)v20;
      }
      if (!v8) {
        break;
      }
      if (v24)
      {
        if (v24 == 1)
        {
          uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
          BOOL v16 = (unsigned __int16 *)otHistoryTrackerIterateTxHistory(InstancePtr, (uint64_t)v18, &v13);
          char v17 = 0;
        }
        else if (v24 == 2)
        {
          if (!v15)
          {
            uint64_t v5 = ot::Cli::Output::GetInstancePtr(a1);
            unsigned __int16 v15 = (unsigned __int16 *)otHistoryTrackerIterateRxHistory(v5, (uint64_t)v19, &v12);
          }
          if (!v14)
          {
            uint64_t v6 = ot::Cli::Output::GetInstancePtr(a1);
            unsigned __int16 v14 = (unsigned __int16 *)otHistoryTrackerIterateTxHistory(v6, (uint64_t)v18, &v11);
          }
          if (!v15 || v14 && v12 > v11)
          {
            BOOL v16 = v14;
            unsigned int v13 = v11;
            char v17 = 0;
            unsigned __int16 v14 = 0;
          }
          else
          {
            BOOL v16 = v15;
            unsigned int v13 = v12;
            char v17 = 1;
            unsigned __int16 v15 = 0;
          }
        }
      }
      else
      {
        uint64_t v3 = ot::Cli::Output::GetInstancePtr(a1);
        BOOL v16 = (unsigned __int16 *)otHistoryTrackerIterateRxHistory(v3, (uint64_t)v19, &v13);
        char v17 = 1;
      }
      if (!v16) {
        break;
      }
      if (v21)
      {
        ot::Cli::History::OutputRxTxEntryListFormat((ot::Cli::OutputImplementer **)a1, v16, v13, v17 & 1);
      }
      else
      {
        if (i) {
          ot::Cli::Output::OutputTableSeparator<(unsigned char)10>((ot::Cli::OutputImplementer **)a1, ot::Cli::History::ProcessRxTxHistory(ot::Cli::History::RxTx,ot::Utils::CmdLineParser::Arg *)::kTableColumnWidths);
        }
        ot::Cli::History::OutputRxTxEntryTableFormat((ot::Cli::OutputImplementer **)a1, v16, v13, v17 & 1);
      }
    }
  }
  return v22;
}

uint64_t ot::Cli::History::Process<1997338614ull>(ot::Cli::History *a1, const char **a2)
{
  return ot::Cli::History::ProcessRxTxHistory(a1, 2, a2);
}

uint64_t ot::Cli::History::Process<30716ull>(ot::Cli::History *a1, const char **a2)
{
  return ot::Cli::History::ProcessRxTxHistory(a1, 1, a2);
}

uint64_t ot::Cli::History::MessagePriorityToString(ot::Cli::History *this)
{
  return ot::Cli::Output::Stringify<unsigned char,(unsigned short)4>(this, (uint64_t)ot::Cli::History::MessagePriorityToString(unsigned char)::kPriorityStrings, (uint64_t)"unkn");
}

const char *ot::Cli::History::RadioTypeToString(uint64_t a1)
{
  uint64_t v2 = "none";
  if ((*(unsigned char *)(a1 + 45) & 0x20) != 0 && (*(unsigned char *)(a1 + 45) & 0x10) != 0) {
    return "all";
  }
  if ((*(unsigned char *)(a1 + 45) & 0x10) != 0) {
    return "15.4";
  }
  if ((*(unsigned char *)(a1 + 45) & 0x20) != 0) {
    return "trel";
  }
  return v2;
}

const char *ot::Cli::History::MessageTypeToString(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  uint64_t v8 = otIp6ProtoToString(*(unsigned char *)(a1 + 42), a2, a3, a4, a5, a6);
  if (*(unsigned char *)(a1 + 42) == 58)
  {
    int v7 = *(unsigned __int8 *)(a1 + 43);
    switch(v7)
    {
      case 1:
        return "ICMP6(Unreach)";
      case 2:
        return "ICMP6(TooBig)";
      case 128:
        return "ICMP6(EchoReqst)";
      case 129:
        return "ICMP6(EchoReply)";
      case 133:
        return "ICMP6(RouterSol)";
      case 134:
        return "ICMP6(RouterAdv)";
      default:
        return "ICMP6(Other)";
    }
  }
  return (const char *)v8;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)10>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 0xAu, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)10>(a1, a2, a3);
}

uint64_t ot::Cli::History::OutputRxTxEntryListFormat(ot::Cli::OutputImplementer **a1, unsigned __int16 *a2, unsigned int a3, char a4)
{
  char v22 = a4 & 1;
  otHistoryTrackerEntryAgeToString(a3, v24, 0x15u);
  ot::Cli::Output::OutputLine(a1, "%s", v24);
  char v17 = ot::Cli::History::MessageTypeToString((uint64_t)a2, v4, v5, v6, v7, v8);
  int v18 = *a2;
  int v19 = a2[20];
  unsigned __int8 v9 = "yes";
  if ((*((unsigned char *)a2 + 45) & 1) == 0) {
    unsigned __int8 v9 = "no";
  }
  unsigned __int16 v20 = v9;
  unsigned __int16 v10 = (const char *)ot::Cli::History::MessagePriorityToString((ot::Cli::History *)((*((unsigned char *)a2 + 45) >> 2) & 3));
  ot::Cli::Output::OutputFormat(a1, 4u, "type:%s len:%u cheksum:0x%04x sec:%s prio:%s ", v17, v18, v19, v20, v10);
  if (v22)
  {
    ot::Cli::Output::OutputFormat(a1, "rss:%d", *((char *)a2 + 44));
  }
  else
  {
    unsigned int v11 = "yes";
    if ((*((unsigned char *)a2 + 45) & 2) == 0) {
      unsigned int v11 = "no";
    }
    ot::Cli::Output::OutputFormat(a1, "tx-success:%s", v11);
  }
  unsigned int v12 = "from";
  if ((v22 & 1) == 0) {
    unsigned int v12 = "to";
  }
  unsigned __int16 v15 = v12;
  int v16 = a2[1];
  unsigned int v13 = ot::Cli::History::RadioTypeToString((uint64_t)a2);
  ot::Cli::Output::OutputLine(a1, " %s:0x%04x radio:%s", v15, v16, v13);
  ot::Cli::Output::OutputFormat(a1, 4u, "src:");
  ot::Cli::Output::OutputSockAddrLine(a1, (uint64_t)(a2 + 2));
  ot::Cli::Output::OutputFormat(a1, 4u, "dst:");
  return ot::Cli::Output::OutputSockAddrLine(a1, (uint64_t)(a2 + 11));
}

uint64_t ot::Cli::Output::OutputTableSeparator<(unsigned char)10>(ot::Cli::OutputImplementer **a1, const unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputTableSeparator(a1, 0xAu, a2);
}

{
  return ot::Cli::Output::OutputTableSeparator<(unsigned char)10>(a1, a2);
}

uint64_t ot::Cli::History::OutputRxTxEntryTableFormat(ot::Cli::OutputImplementer **a1, unsigned __int16 *a2, unsigned int a3, char a4)
{
  char v18 = a4 & 1;
  otHistoryTrackerEntryAgeToString(a3, v21, 0x15u);
  unsigned int v13 = ot::Cli::History::MessageTypeToString((uint64_t)a2, v4, v5, v6, v7, v8);
  int v14 = *a2;
  int v15 = a2[20];
  unsigned __int8 v9 = "yes";
  if ((*((unsigned char *)a2 + 45) & 1) == 0) {
    unsigned __int8 v9 = "no";
  }
  int v16 = v9;
  unsigned __int16 v10 = (const char *)ot::Cli::History::MessagePriorityToString((ot::Cli::History *)((*((unsigned char *)a2 + 45) >> 2) & 3));
  ot::Cli::Output::OutputFormat(a1, "| %20s | %-16.16s | %5u | 0x%04x | %3s | %4s | ", "", v13, v14, v15, v16, v10);
  if (v18)
  {
    ot::Cli::Output::OutputFormat(a1, "%4d | RX ", *((char *)a2 + 44));
  }
  else
  {
    ot::Cli::Output::OutputFormat(a1, " NA  |");
    if ((*((unsigned char *)a2 + 45) & 2) != 0) {
      ot::Cli::Output::OutputFormat(a1, " TX ");
    }
    else {
      ot::Cli::Output::OutputFormat(a1, "TX-F");
    }
  }
  if (a2[1] == 0xFFFF)
  {
    ot::Cli::Output::OutputFormat(a1, "| bcast  ");
  }
  else if (a2[1] == 65534)
  {
    ot::Cli::Output::OutputFormat(a1, "| unknwn ");
  }
  else
  {
    ot::Cli::Output::OutputFormat(a1, "| 0x%04x ", a2[1]);
  }
  unsigned int v11 = ot::Cli::History::RadioTypeToString((uint64_t)a2);
  ot::Cli::Output::OutputLine(a1, "| %5.5s |", v11);
  otIp6SockAddrToString((uint64_t)(a2 + 2), v20, 48);
  ot::Cli::Output::OutputLine(a1, "| %20s | src: %-70s |", v21, v20);
  otIp6SockAddrToString((uint64_t)(a2 + 11), v20, 48);
  return ot::Cli::Output::OutputLine(a1, "| %20s | dst: %-70s |", "", v20);
}

uint64_t ot::Cli::History::Process<129830133337582ull>(ot::Cli::History *a1, const char **a2)
{
  char v18 = a1;
  char v17 = a2;
  unsigned int v16 = 0;
  BOOL v15 = 0;
  unsigned __int16 v14 = 0;
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  v19[0] = 0;
  v19[1] = 0;
  char v20 = 0;
  unsigned int v16 = ot::Cli::History::ParseArgs(a1, a2, &v15, (char *)&v14);
  if (!v16)
  {
    if (!v15) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)6>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::Process<129830133337582ull>(ot::Utils::CmdLineParser::Arg *)::kPrefixTitles, ot::Cli::History::Process<129830133337582ull>(ot::Utils::CmdLineParser::Arg *)::kPrefixColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v13);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v8 = 1;
      if (v14) {
        BOOL v8 = i < (int)v14;
      }
      if (!v8) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v12 = otHistoryTrackerIterateOnMeshPrefixHistory(InstancePtr, (uint64_t)v13, &v11);
      if (!v12) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v11, v22, 0x15u);
      otIp6PrefixToString(v12, v21, 45);
      ot::Cli::NetworkData::PrefixFlagsToString(v12, v19);
      uint64_t v3 = "%s -> event:%s prefix:%s flags:%s pref:%s rloc16:0x%04x";
      if (!v15) {
        uint64_t v3 = "| %20s | %-7s | %-43s | %-9s | %-4s | 0x%04x |";
      }
      uint64_t v7 = (char *)v3;
      uint64_t v6 = ot::Cli::Output::Stringify<otHistoryTrackerNetDataEvent,(unsigned short)2>(*(_DWORD *)(v12 + 24), (uint64_t)ot::Cli::kSimpleEventStrings, (uint64_t)"unknown");
      unsigned __int8 v4 = ot::Cli::Interpreter::PreferenceToString((ot::Cli::Interpreter *)((__int16)(*(_WORD *)(v12 + 17) << 14) >> 14));
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, v7, v22, v6, v21, v19, v4, *(unsigned __int16 *)(v12 + 20));
    }
  }
  return v16;
}

uint64_t ot::Cli::Output::OutputTableHeader<(unsigned char)6>(ot::Cli::OutputImplementer **a1, const char *const *a2, const unsigned __int8 *a3)
{
  return ot::Cli::Output::OutputTableHeader(a1, 6u, a2, a3);
}

{
  return ot::Cli::Output::OutputTableHeader<(unsigned char)6>(a1, a2, a3);
}

uint64_t ot::Cli::Output::Stringify<otHistoryTrackerNetDataEvent,(unsigned short)2>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (a1 >= 2u) {
    return a3;
  }
  else {
    return *(void *)(a2 + 8 * a1);
  }
}

{
  return ot::Cli::Output::Stringify<otHistoryTrackerNetDataEvent,(unsigned short)2>(a1, a2, a3);
}

uint64_t ot::Cli::History::Process<428984388969ull>(ot::Cli::History *a1, const char **a2)
{
  char v18 = a1;
  char v17 = a2;
  unsigned int v16 = 0;
  BOOL v15 = 0;
  unsigned __int16 v14 = 0;
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  v19[0] = 0;
  v19[1] = 0;
  char v20 = 0;
  unsigned int v16 = ot::Cli::History::ParseArgs(a1, a2, &v15, (char *)&v14);
  if (!v16)
  {
    if (!v15) {
      ot::Cli::Output::OutputTableHeader<(unsigned char)6>((ot::Cli::OutputImplementer **)a1, (const char *const *)ot::Cli::History::Process<428984388969ull>(ot::Utils::CmdLineParser::Arg *)::kRouteTitles, ot::Cli::History::Process<428984388969ull>(ot::Utils::CmdLineParser::Arg *)::kRouteColumnWidths);
    }
    otHistoryTrackerInitIterator((uint64_t)v13);
    for (unsigned __int16 i = 0; ; ++i)
    {
      BOOL v8 = 1;
      if (v14) {
        BOOL v8 = i < (int)v14;
      }
      if (!v8) {
        break;
      }
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
      uint64_t v12 = otHistoryTrackerIterateExternalRouteHistory(InstancePtr, (uint64_t)v13, &v11);
      if (!v12) {
        break;
      }
      otHistoryTrackerEntryAgeToString(v11, v22, 0x15u);
      otIp6PrefixToString(v12, v21, 45);
      ot::Cli::NetworkData::RouteFlagsToString(v12, v19);
      uint64_t v3 = "%s -> event:%s route:%s flags:%s pref:%s rloc16:0x%04x";
      if (!v15) {
        uint64_t v3 = "| %20s | %-7s | %-43s | %-9s | %-4s | 0x%04x |";
      }
      uint64_t v7 = (char *)v3;
      uint64_t v6 = ot::Cli::Output::Stringify<otHistoryTrackerNetDataEvent,(unsigned short)2>(*(_DWORD *)(v12 + 24), (uint64_t)ot::Cli::kSimpleEventStrings, (uint64_t)"unknown");
      unsigned __int8 v4 = ot::Cli::Interpreter::PreferenceToString((ot::Cli::Interpreter *)((char)(*(unsigned char *)(v12 + 20) << 6) >> 6));
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, v7, v22, v6, v21, v19, v4, *(unsigned __int16 *)(v12 + 18));
    }
  }
  return v16;
}

uint64_t ot::Cli::History::Process(ot::Cli::History *this, const char **a2)
{
  char v17 = this;
  unsigned int v16 = a2;
  unsigned int v15 = 35;
  unsigned __int16 v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    || ot::Utils::CmdLineParser::Arg::operator==(v16, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::History,(unsigned short)10>((uint64_t)this, (const char **)&ot::Cli::History::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v16)) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v16);
    unsigned __int16 v14 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::History>,(unsigned short)10>((ot::BinarySearch *)&CString, (char *)&ot::Cli::History::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
    if (v14)
    {
      unsigned __int8 v9 = (uint64_t (*)(void *, const char **))*((void *)v14 + 1);
      uint64_t v6 = *((void *)v14 + 2);
      unsigned __int16 v10 = (void *)((char *)this + (v6 >> 1));
      if (v6) {
        return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v16 + 1);
      }
      else {
        return v9(v10, v16 + 1);
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::History,(unsigned short)10>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 30;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::History,(unsigned short)10>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::History>,(unsigned short)10>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)0xA, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::History>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::History>,(unsigned short)10>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::History>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::History>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::History>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::History>::Compare(a1, a2);
}

uint64_t ot::Cli::Joiner::Process<16073431636142911865ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned int v11 = a1;
  unsigned __int16 v10 = a2;
  unsigned int v9 = 7;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    Discerner = (unsigned int *)otJoinerGetDiscerner(InstancePtr);
    if (Discerner)
    {
      if (*(void *)Discerner > 0xFFFFFFFFuLL) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "0x%lx%08lx/%u", HIDWORD(*(void *)Discerner), *Discerner, *((unsigned __int8 *)Discerner + 8));
      }
      else {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "0x%lx/%u", *Discerner, *((unsigned __int8 *)Discerner + 8));
      }
      return 0;
    }
    else
    {
      return 23;
    }
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    if (ot::Utils::CmdLineParser::Arg::operator==(v10, "clear"))
    {
      uint64_t v3 = ot::Cli::Output::GetInstancePtr(a1);
      return otJoinerSetDiscerner(v3, 0);
    }
    else if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 1)) {
           && !ot::Cli::Interpreter::ParseJoinerDiscerner((ot::Utils::CmdLineParser::Arg *)v10, (char *)v7))
    }
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr(a1);
      return otJoinerSetDiscerner(v4, (uint64_t)v7);
    }
  }
  return v9;
}

uint64_t ot::Cli::Joiner::Process<25605ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  otJoinerGetId(InstancePtr);
  ot::Cli::Output::OutputExtAddressLine((ot::Cli::OutputImplementer **)a1, v2);
  return 0;
}

uint64_t ot::Cli::Joiner::Process<13525664152328030601ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser **a2)
{
  unsigned __int16 v10 = a1;
  unsigned int v9 = a2;
  unsigned int v8 = 7;
  RepeatScaunint64_t n = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    RepeatScaunint64_t n = otJoinerGetRepeatScan(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%u", RepeatScan);
    return 0;
  }
  else
  {
    unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v9, (char *)&RepeatScan, v2);
    if (!v8)
    {
      uint64_t v4 = ot::Cli::Output::GetInstancePtr(a1);
      return otJoinerSetRepeatScan(v4, RepeatScan);
    }
  }
  return v8;
}

uint64_t ot::Cli::Joiner::Process<492373686370ull>(ot::Cli::Output *a1, uint64_t a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    uint64_t CString = (ot *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)a2);
    uint64_t v2 = (ot *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(a2 + 8));
    return otJoinerStart(InstancePtr, CString, v2, (ot *)"OPENTHREAD", (ot *)"POSIX", (ot *)"0.01.00", 0, (uint64_t)ot::Cli::Joiner::HandleCallback, (uint64_t)a1);
  }
}

uint64_t ot::Cli::Joiner::HandleCallback(int a1, ot::Cli::OutputImplementer **a2)
{
  return ot::Cli::Joiner::HandleCallback(a2, a1);
}

uint64_t ot::Cli::Joiner::Process<1864361470ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  otJoinerStop(InstancePtr);
  return 0;
}

uint64_t ot::Cli::Joiner::Process<428983089745ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  int State = otJoinerGetState(InstancePtr);
  uint64_t v3 = otJoinerStateToString(State);
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%s", v3);
  return 0;
}

uint64_t ot::Cli::Joiner::Process(ot::Cli::Joiner *this, const char **a2)
{
  char v17 = this;
  unsigned int v16 = a2;
  unsigned int v15 = 35;
  unsigned __int16 v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    || ot::Utils::CmdLineParser::Arg::operator==(v16, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::Joiner,(unsigned short)6>((uint64_t)this, (const char **)&ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v16)) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v16);
    unsigned __int16 v14 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Joiner>,(unsigned short)6>((ot::BinarySearch *)&CString, (char *)&ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
    if (v14)
    {
      unsigned int v9 = (uint64_t (*)(void *, const char **))*((void *)v14 + 1);
      uint64_t v6 = *((void *)v14 + 2);
      unsigned __int16 v10 = (void *)((char *)this + (v6 >> 1));
      if (v6) {
        return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v16 + 1);
      }
      else {
        return v9(v10, v16 + 1);
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::Joiner,(unsigned short)6>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 18;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::Joiner,(unsigned short)6>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Joiner>,(unsigned short)6>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)6, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Joiner>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::Joiner>,(unsigned short)6>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Cli::Joiner::HandleCallback(ot::Cli::OutputImplementer **a1, int a2)
{
  if (!a2) {
    return ot::Cli::Output::OutputLine(a1, "Join success");
  }
  uint64_t v3 = otThreadErrorToString(a2);
  return ot::Cli::Output::OutputLine(a1, "Join failed [%s]", v3);
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::Joiner>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::Joiner>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::Joiner>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::Joiner>::Compare(a1, a2);
}

uint64_t ot::Cli::NetworkData::NetworkData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 16) = 0;
  otBorderRouterSetNetDataFullCallback(a2, (void (*)(void *))ot::Cli::NetworkData::HandleNetdataFull, a1);
  return a1;
}

{
  ot::Cli::NetworkData::NetworkData(a1, a2, a3);
  return a1;
}

uint64_t ot::Cli::NetworkData::HandleNetdataFull(ot::Cli::NetworkData *this, void *a2)
{
  return ot::Cli::NetworkData::HandleNetdataFull((uint64_t)this);
}

uint64_t ot::Cli::NetworkData::PrefixFlagsToString(uint64_t result, unsigned char *a2)
{
  unsigned __int16 v10 = a2;
  if ((*(_WORD *)(result + 17) & 4) != 0)
  {
    unsigned __int16 v10 = a2 + 1;
    *a2 = 112;
  }
  if ((*(_WORD *)(result + 17) & 8) != 0)
  {
    uint64_t v2 = v10++;
    *uint64_t v2 = 97;
  }
  if ((*(_WORD *)(result + 17) & 0x10) != 0)
  {
    uint64_t v3 = v10++;
    *uint64_t v3 = 100;
  }
  if ((*(_WORD *)(result + 17) & 0x20) != 0)
  {
    uint64_t v4 = v10++;
    *uint64_t v4 = 99;
  }
  if ((*(_WORD *)(result + 17) & 0x40) != 0)
  {
    uint64_t v5 = v10++;
    *uint64_t v5 = 114;
  }
  if ((*(_WORD *)(result + 17) & 0x80) != 0)
  {
    uint64_t v6 = v10++;
    *uint64_t v6 = 111;
  }
  if ((*(_WORD *)(result + 17) & 0x100) != 0)
  {
    uint64_t v7 = v10++;
    *uint64_t v7 = 115;
  }
  if ((*(_WORD *)(result + 17) & 0x200) != 0)
  {
    unsigned int v8 = v10++;
    *unsigned int v8 = 110;
  }
  if ((*(_WORD *)(result + 17) & 0x400) != 0)
  {
    unsigned int v9 = v10++;
    *unsigned int v9 = 68;
  }
  *unsigned __int16 v10 = 0;
  return result;
}

uint64_t ot::Cli::NetworkData::OutputPrefix(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  char v7 = 0;
  ot::Cli::Output::OutputIp6Prefix(a1, a2);
  ot::Cli::NetworkData::PrefixFlagsToString(a2, v6);
  if (LOBYTE(v6[0])) {
    ot::Cli::Output::OutputFormat(a1, " %s", (const char *)v6);
  }
  uint64_t v2 = ot::Cli::Interpreter::PreferenceToString((ot::Cli::Interpreter *)((__int16)(*(_WORD *)(a2 + 17) << 14) >> 14));
  return ot::Cli::Output::OutputLine(a1, " %s %04x", v2, *(unsigned __int16 *)(a2 + 20));
}

uint64_t ot::Cli::NetworkData::RouteFlagsToString(uint64_t result, unsigned char *a2)
{
  uint64_t v3 = a2;
  if ((*(unsigned char *)(result + 20) & 8) != 0)
  {
    uint64_t v3 = a2 + 1;
    *a2 = 115;
  }
  if ((*(unsigned char *)(result + 20) & 4) != 0)
  {
    uint64_t v2 = v3++;
    *uint64_t v2 = 110;
  }
  *uint64_t v3 = 0;
  return result;
}

uint64_t ot::Cli::NetworkData::OutputRoute(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  char v7 = 0;
  ot::Cli::Output::OutputIp6Prefix(a1, a2);
  ot::Cli::NetworkData::RouteFlagsToString(a2, v6);
  if (LOBYTE(v6[0])) {
    ot::Cli::Output::OutputFormat(a1, " %s", (const char *)v6);
  }
  uint64_t v2 = ot::Cli::Interpreter::PreferenceToString((ot::Cli::Interpreter *)((char)(*(unsigned char *)(a2 + 20) << 6) >> 6));
  return ot::Cli::Output::OutputLine(a1, " %s %04x", v2, *(unsigned __int16 *)(a2 + 18));
}

uint64_t ot::Cli::NetworkData::OutputService(ot::Cli::OutputImplementer **a1, unsigned __int8 *a2)
{
  ot::Cli::Output::OutputFormat(a1, "sid[%u] ", *a2);
  uint64_t v2 = ot::ToUlong(*((unsigned int *)a2 + 1));
  ot::Cli::Output::OutputFormat(a1, "%lu ", v2);
  ot::Cli::Output::OutputBytes(a1, a2 + 9, a2[8]);
  ot::Cli::Output::OutputFormat(a1, " ");
  ot::Cli::Output::OutputBytes(a1, a2 + 264, a2[263]);
  if (a2[262]) {
    ot::Cli::Output::OutputFormat(a1, " s");
  }
  return ot::Cli::Output::OutputLine(a1, " %04x", *((unsigned __int16 *)a2 + 256));
}

uint64_t ot::Cli::NetworkData::Process<112625398707738ull>(ot::Cli::Output *a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v6 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    unsigned __int8 Length = otNetDataGetLength(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%u", Length);
  }
  else
  {
    return 7;
  }
  return v6;
}

uint64_t ot::Cli::NetworkData::Process<4362819052862294378ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned int v7 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    Maxunsigned __int8 Length = otNetDataGetMaxLength(InstancePtr);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "%u", MaxLength);
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "reset"))
  {
    uint64_t v4 = ot::Cli::Output::GetInstancePtr(a1);
    otNetDataResetMaxLength(v4);
  }
  else
  {
    return 7;
  }
  return v7;
}

uint64_t ot::Cli::NetworkData::Process<8020458550946499069ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  return otBorderRouterRegister(InstancePtr);
}

uint64_t ot::Cli::NetworkData::Process<3328099188798998309ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned __int16 v10 = a1;
  unsigned int v9 = a2;
  unsigned int v8 = 0;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "check"))
  {
    unsigned int v8 = ot::Cli::Interpreter::ParseJoinerDiscerner((ot::Utils::CmdLineParser::Arg *)(v9 + 1), v6);
    if (v8 == 23)
    {
      char v7 = 0;
      unsigned int v8 = ot::Utils::CmdLineParser::Arg::ParseAsHexString<(unsigned short)8>((ot::Utils::CmdLineParser **)v9 + 1, v11);
    }
    if (!v8)
    {
      if (v7)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
        return otNetDataSteeringDataCheckJoinerWithDiscerner(InstancePtr, (uint64_t)v6);
      }
      else
      {
        uint64_t v3 = ot::Cli::Output::GetInstancePtr(a1);
        return otNetDataSteeringDataCheckJoiner(v3, (uint64_t)v11);
      }
    }
  }
  else
  {
    return 7;
  }
  return v8;
}

uint64_t ot::Cli::NetworkData::SetNetdata(ot::Cli::NetworkData *this, char *a2, size_t a3, unsigned __int8 a4, char a5)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  return otSetNetData(InstancePtr, a2, a3, a3, a5);
}

uint64_t ot::Cli::NetworkData::GetNextPrefix(ot::Cli::Output *a1, unsigned int *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otBorderRouterGetNextOnMeshPrefix(InstancePtr, a2, a3);
  }
  else
  {
    uint64_t v5 = ot::Cli::Output::GetInstancePtr(a1);
    return otNetDataGetNextOnMeshPrefix(v5, a2, a3);
  }
}

uint64_t ot::Cli::NetworkData::OutputPrefixes(ot::Cli::OutputImplementer **this, char a2)
{
  char v7 = this;
  char v6 = a2 & 1;
  unsigned int v5 = 0;
  ot::Cli::Output::OutputLine(this, "Prefixes:");
  while (1)
  {
    uint64_t result = ot::Cli::NetworkData::GetNextPrefix((ot::Cli::Output *)this, &v5, (uint64_t)v4, v6 & 1);
    if (result) {
      break;
    }
    ot::Cli::NetworkData::OutputPrefix(this, (uint64_t)v4);
  }
  return result;
}

uint64_t ot::Cli::NetworkData::GetNextRoute(ot::Cli::Output *a1, unsigned int *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otBorderRouterGetNextRoute(InstancePtr, a2, a3);
  }
  else
  {
    uint64_t v5 = ot::Cli::Output::GetInstancePtr(a1);
    return otNetDataGetNextRoute(v5, a2, a3);
  }
}

uint64_t ot::Cli::NetworkData::OutputRoutes(ot::Cli::OutputImplementer **this, char a2)
{
  char v7 = this;
  char v6 = a2 & 1;
  unsigned int v5 = 0;
  ot::Cli::Output::OutputLine(this, "Routes:");
  while (1)
  {
    uint64_t result = ot::Cli::NetworkData::GetNextRoute((ot::Cli::Output *)this, &v5, (uint64_t)v4, v6 & 1);
    if (result) {
      break;
    }
    ot::Cli::NetworkData::OutputRoute(this, (uint64_t)v4);
  }
  return result;
}

uint64_t ot::Cli::NetworkData::GetNextService(ot::Cli::Output *a1, unsigned int *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    return otServerGetNextService(InstancePtr, a2, a3);
  }
  else
  {
    uint64_t v5 = ot::Cli::Output::GetInstancePtr(a1);
    return otNetDataGetNextService(v5, a2, a3);
  }
}

uint64_t ot::Cli::NetworkData::OutputServices(ot::Cli::NetworkData *this, char a2)
{
  char v6 = this;
  char v5 = a2 & 1;
  unsigned int v4 = 0;
  ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Services:");
  while (1)
  {
    uint64_t result = ot::Cli::NetworkData::GetNextService(this, &v4, (uint64_t)v7, v5 & 1);
    if (result) {
      break;
    }
    ot::Cli::NetworkData::OutputService((ot::Cli::OutputImplementer **)this, v7);
  }
  return result;
}

ot::Cli::OutputImplementer **ot::Cli::NetworkData::OutputLowpanContexts(ot::Cli::OutputImplementer **this, char a2)
{
  unsigned int v9 = this;
  char v8 = a2 & 1;
  unsigned int v4 = (ot::Cli::Output *)this;
  int v7 = 0;
  if ((a2 & 1) == 0)
  {
    ot::Cli::Output::OutputLine(this, "Contexts:");
    while (1)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(v4);
      this = (ot::Cli::OutputImplementer **)otNetDataGetNextLowpanContextInfo(InstancePtr, (ot::NetworkData::OnMeshPrefixConfig *)&v7, (uint64_t)v5);
      if (this) {
        break;
      }
      ot::Cli::Output::OutputIp6Prefix((ot::Cli::OutputImplementer **)v4, (uint64_t)&v6);
      if (v5[1]) {
        char v3 = 99;
      }
      else {
        char v3 = 45;
      }
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)v4, " %u %c", v5[0], v3);
    }
  }
  return this;
}

uint64_t ot::Cli::NetworkData::OutputBinary(ot::Cli::NetworkData *this, char a2)
{
  int v7 = this;
  char v6[8] = a2 & 1;
  *(_DWORD *)&v6[1] = 0;
  v6[0] = -1;
  if (a2)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    *(_DWORD *)&v6[1] = otBorderRouterGetNetData(InstancePtr, 0, v8, v6);
  }
  else
  {
    uint64_t v3 = ot::Cli::Output::GetInstancePtr(this);
    *(_DWORD *)&v6[1] = otNetDataGet(v3, 0, v8, v6);
  }
  if (!*(_DWORD *)&v6[1]) {
    ot::Cli::Output::OutputBytesLine((ot::Cli::OutputImplementer **)this, v8, v6[0]);
  }
  return *(unsigned int *)&v6[1];
}

uint64_t ot::Cli::NetworkData::Process<1980428035ull>(ot::Cli::NetworkData *a1, uint64_t a2)
{
  char v6 = 0;
  char v5 = 0;
  for (unsigned __int8 i = 0; !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 8 * i)); ++i)
  {
    if (ot::Utils::CmdLineParser::Arg::operator==((const char **)(a2 + 8 * i), "local"))
    {
      char v6 = 1;
    }
    else
    {
      if (!ot::Utils::CmdLineParser::Arg::operator==((const char **)(a2 + 8 * i), "-x")) {
        return 7;
      }
      char v5 = 1;
    }
  }
  if (v5)
  {
    return ot::Cli::NetworkData::OutputBinary(a1, v6 & 1);
  }
  else
  {
    ot::Cli::NetworkData::OutputPrefixes((ot::Cli::OutputImplementer **)a1, v6 & 1);
    ot::Cli::NetworkData::OutputRoutes((ot::Cli::OutputImplementer **)a1, v6 & 1);
    ot::Cli::NetworkData::OutputServices(a1, v6 & 1);
    ot::Cli::NetworkData::OutputLowpanContexts((ot::Cli::OutputImplementer **)a1, v6 & 1);
    return 0;
  }
}

uint64_t ot::Cli::NetworkData::Process<109323266905330ull>(ot::Cli::Output *a1, uint64_t a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  unsigned int DeviceRole = otThreadGetDeviceRole(InstancePtr);
  unsigned int v4 = otThreadDeviceRoleToString(DeviceRole);
  if (!strcmp(v4, "disabled") || (uint64_t v5 = ot::Cli::Output::GetInstancePtr(a1), otThreadIsDeviceDetached(v5)))
  {
    unsigned int v10 = 7;
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 8)))
    {
      memset(__b, 0, sizeof(__b));
      ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray((ot::Utils::CmdLineParser::Arg *)a2, (ot::Utils::CmdLineParser::Arg *)__b, v6);
      strcpy(__dst, __b[0]);
      size_t v7 = strlen(__dst);
      if (!ot::Cli::NetworkData::SetNetdata(a1, __dst, v7, 0, 0))
      {
        ot::Cli::NetworkData::OutputPrefixes((ot::Cli::OutputImplementer **)a1, 0);
        ot::Cli::NetworkData::OutputRoutes((ot::Cli::OutputImplementer **)a1, 0);
        ot::Cli::NetworkData::OutputServices(a1, 0);
        ot::Cli::NetworkData::OutputLowpanContexts((ot::Cli::OutputImplementer **)a1, 0);
        return 0;
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    unsigned int v10 = 13;
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "Invalid state. To process this decode command , device must be in offline, detached or disabled state.");
  }
  return v10;
}

uint64_t ot::Cli::NetworkData::Process<1797841137ull>(uint64_t a1, const char **a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    if (*(unsigned char *)(a1 + 16)) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "yes", a1);
    }
    else {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)a1, "no", a1);
    }
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(a2, "reset"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1))) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    else {
      return 7;
    }
  }
  else
  {
    return 7;
  }
  return v4;
}

uint64_t ot::Cli::NetworkData::Process(ot::Cli::NetworkData *this, const char **a2)
{
  char v17 = this;
  unsigned int v16 = a2;
  unsigned int v15 = 35;
  unsigned __int16 v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    || ot::Utils::CmdLineParser::Arg::operator==(v16, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::NetworkData,(unsigned short)7>((uint64_t)this, (const char **)&ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v16)) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v16);
    unsigned __int16 v14 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>,(unsigned short)7>((ot::BinarySearch *)&CString, (char *)&ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
    if (v14)
    {
      unsigned int v9 = (uint64_t (*)(void *, const char **))*((void *)v14 + 1);
      uint64_t v6 = *((void *)v14 + 2);
      unsigned int v10 = (void *)((char *)this + (v6 >> 1));
      if (v6) {
        return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v16 + 1);
      }
      else {
        return v9(v10, v16 + 1);
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::NetworkData,(unsigned short)7>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 21;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::NetworkData,(unsigned short)7>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>,(unsigned short)7>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)7, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>,(unsigned short)7>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Cli::NetworkData::HandleNetdataFull(uint64_t this)
{
  *(unsigned char *)(this + 16) = 1;
  return this;
}

{
  return ot::Cli::NetworkData::HandleNetdataFull(this);
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::NetworkData>::Compare(a1, a2);
}

uint64_t ot::Cli::Vendor::ProcessGetVendorAssert(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned __int16 v14 = this;
  unsigned int v13 = a2;
  unsigned int Assert = 0;
  int v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int Assert = otPlatVendorGenerateAssert(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!Assert) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "VendorAssert=%u", v11);
  }
  return Assert;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorAssignedHwMac(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned __int16 v14 = this;
  unsigned int v13 = a2;
  int v11 = this;
  uint64_t v15 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  unsigned int AssignedHwMac = otPlatVendorGetAssignedHwMac(InstancePtr, (uint64_t)&v15, v3, v4, v5, v6, v7, v8);
  if (!AssignedHwMac)
  {
    v10[9] = v10;
    ot::Cli::Output::OutputLine(v11, "AssignedHWMac=%x:%x:%x:%x:%x:%x:%x:%x", v15, BYTE1(v15), BYTE2(v15), BYTE3(v15), BYTE4(v15), BYTE5(v15), BYTE6(v15), HIBYTE(v15));
  }
  return AssignedHwMac;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorHardFault(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int HardFault = otPlatVendorGenerateHardFault(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!HardFault) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "HardFault");
  }
  return HardFault;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorPower(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned __int16 v14 = this;
  unsigned int v13 = a2;
  unsigned int Power = 0;
  char v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int Power = otPlatVendorGetPower(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!Power) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, " unsigned int Power = %f dBm", (double)v11 * 0.25);
  }
  return Power;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorPTB(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  char v20 = this;
  int v19 = a2;
  unsigned int v13 = this;
  unsigned int PTB = 0;
  unsigned __int16 v17 = 1300;
  unsigned int v16 = v10;
  uint64_t v11 = 1312;
  __chkstk_darwin(this, a2);
  uint64_t v12 = &v10[-v11];
  uint64_t v15 = v2;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)v13);
  unsigned int PTB = otPlatVendorGetPTB(InstancePtr, (uint64_t)v12, (uint64_t)&v17, v4, v5, v6, v7, v8);
  if (!PTB)
  {
    ot::Cli::Output::OutputLine(v13, "RCP2 PTB Read data response Size = %d", v17);
    for (unsigned __int16 i = 0; i < (int)v17; ++i)
      ot::Cli::Output::OutputLine(v13, "Byte[%d] = 0X%x", i, v12[i]);
  }
  return PTB;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorStackOverflow(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int StackOverflow = otPlatVendorGenerateStackOverflow(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!StackOverflow) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "StackOverflow");
  }
  return StackOverflow;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorVersion(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  Versiounint64_t n = otPlatVendorGetVersion(InstancePtr, (uint64_t)v11, 500, v3, v4, v5, v6, v7);
  if (!Version) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "mVersion=%s", v11);
  }
  return Version;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorAssert(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  uint64_t v15 = this;
  unsigned __int16 v14 = a2;
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorScheduleAssert(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "VendorAssert=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorAssignedHwMac(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser **a2)
{
  uint64_t v15 = this;
  unsigned __int16 v14 = a2;
  uint64_t v11 = this;
  *(void *)unsigned int v16 = 0x807060504030201;
  __int16 v12 = 8;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsHexString(a2, (char *)v16, 8u);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)v11);
    unsigned int v13 = otPlatVendorSetAssignedHwMac(InstancePtr, (uint64_t)v16, v3, v4, v5, v6, v7, v8);
    if (!v13)
    {
      v10[9] = v10;
      ot::Cli::Output::OutputLine(v11, "AssignedHWMac=%x:%x:%x:%x:%x:%x:%x:%x", v16[0], v16[1], v16[2], v16[3], v16[4], v16[5], v16[6], v16[7]);
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorPower(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  uint64_t v15 = this;
  unsigned __int16 v14 = a2;
  unsigned int v13 = 0;
  signed __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsInt8(v14, &v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetPower(InstancePtr, (uint64_t)&v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, " Setting Power as %f dBm", (double)v12 * 0.25);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessHelp(ot::Cli::OutputImplementer **this)
{
  ot::Cli::Output::OutputLine(this, "GET PROPERTIES:");
  for (unsigned __int16 i = (const char **)&ot::Cli::Vendor::sGetCommands; i != (const char **)&ot::Cli::Vendor::sSetCommands; i += 3)
    ot::Cli::Output::OutputLine(this, *i);
  ot::Cli::Output::OutputLine(this, "");
  ot::Cli::Output::OutputLine(this, "SET PROPERTIES:");
  for (unsigned __int16 j = (const char **)&ot::Cli::Vendor::sSetCommands; j != (const char **)off_10049E8E0; j += 3)
    ot::Cli::Output::OutputLine(this, *j);
  return 0;
}

uint64_t ot::Cli::Vendor::ProcessGet(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = 35;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    ot::Cli::Vendor::ProcessHelp(this);
    IgnoreError();
  }
  else
  {
    uint64_t CString = (ot::Utils::LookupTable *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
    unsigned int v13 = ot::Utils::LookupTable::Find<ot::Cli::Vendor::Command,(unsigned short)8>(CString, (const char *)&ot::Cli::Vendor::sGetCommands, v3, v4, v5, v6);
    if (v13)
    {
      unsigned int v10 = (uint64_t (*)(void *, char *))*((void *)v13 + 1);
      uint64_t v7 = *((void *)v13 + 2);
      uint64_t v11 = (ot::Cli::OutputImplementer **)((char *)this + (v7 >> 1));
      if (v7) {
        return (*(uint64_t (**)(void *, char *))(*v11 + v10))(v11, (char *)a2 + 8);
      }
      else {
        return v10(v11, (char *)a2 + 8);
      }
    }
  }
  return v14;
}

const char *ot::Utils::LookupTable::Find<ot::Cli::Vendor::Command,(unsigned short)8>(ot::Utils::LookupTable *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *(*a6)(const void *))
{
  return ot::Utils::LookupTable::Find(a1, a2, (const void *)8, 0x18u, (uint64_t (*)(const char *))ot::Utils::LookupTable::GetName<ot::Cli::Vendor::Command>, a6);
}

{
  return ot::Utils::LookupTable::Find<ot::Cli::Vendor::Command,(unsigned short)8>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Cli::Vendor::ProcessSet(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = 35;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    ot::Cli::Vendor::ProcessHelp(this);
    IgnoreError();
  }
  else
  {
    uint64_t CString = (ot::Utils::LookupTable *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
    unsigned int v13 = ot::Utils::LookupTable::Find<ot::Cli::Vendor::Command,(unsigned short)4>(CString, (const char *)&ot::Cli::Vendor::sSetCommands, v3, v4, v5, v6);
    if (v13)
    {
      unsigned int v10 = (uint64_t (*)(void *, char *))*((void *)v13 + 1);
      uint64_t v7 = *((void *)v13 + 2);
      uint64_t v11 = (ot::Cli::OutputImplementer **)((char *)this + (v7 >> 1));
      if (v7) {
        return (*(uint64_t (**)(void *, char *))(*v11 + v10))(v11, (char *)a2 + 8);
      }
      else {
        return v10(v11, (char *)a2 + 8);
      }
    }
  }
  return v14;
}

const char *ot::Utils::LookupTable::Find<ot::Cli::Vendor::Command,(unsigned short)4>(ot::Utils::LookupTable *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *(*a6)(const void *))
{
  return ot::Utils::LookupTable::Find(a1, a2, (const void *)4, 0x18u, (uint64_t (*)(const char *))ot::Utils::LookupTable::GetName<ot::Cli::Vendor::Command>, a6);
}

{
  return ot::Utils::LookupTable::Find<ot::Cli::Vendor::Command,(unsigned short)4>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Cli::Vendor::ProcessGetVendorPeek(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v16 = this;
  uint64_t v15 = a2;
  unsigned int v14 = 0;
  unsigned int v13 = 0;
  unsigned __int16 v12[2] = 0;
  *(_WORD *)signed __int8 v12 = ot::Utils::CmdLineParser::Arg::GetArgsLength(a2, a2);
  if (v12[0] != 2) {
    ot::Cli::Output::OutputLine(this, "Usage: get peek [address:32-bit] [count:16-bit]");
  }
  unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)v15, (char *)&v13, v2);
  if (!v14)
  {
    unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v15 + 1, &v12[1], v3);
    if (!v14)
    {
      unsigned __int16 v11 = 0;
      unsigned int v14 = otPlatPeek((uint64_t)v17, (uint64_t)&v11, v13, *(unsigned __int16 *)&v12[1], v4, v5, v6, v7);
      ot::Cli::Output::OutputLine(this, "BytesRead=%u", v11);
      for (int i = 0; i < v11; ++i)
        ot::Cli::Output::OutputLine(this, "Byte[%d]=%x", i, v17[i]);
    }
  }
  return v14;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRx(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v16 = this;
  uint64_t v15 = a2;
  CoexRxint Mode = 0;
  unsigned __int8 v13 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CoexRxint Mode = otPlatVendorGetCoexRxMode(InstancePtr, (uint64_t)&v13, v3, v4, v5, v6, v7, v8);
  if (!CoexRxMode)
  {
    if (v13 <= 1u)
    {
      uint64_t v10 = v13 - 1;
      char v9 = 0;
    }
    else
    {
      uint64_t v10 = v13 - 1;
      char v9 = 1;
    }
    if (v9)
    {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Unknown Rx Coex Mode");
    }
    else
    {
      switch(v10)
      {
        case 0:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_RX_REQUEST_MODE_RESERVED");
          break;
        case 1:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_RX_REQUEST_MODE_PREAMBLE");
          break;
        case 2:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_RX_REQUEST_MODE_DESTINED");
          break;
        case 3:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_RX_REQUEST_MODE_MIXED");
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  return CoexRxMode;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRxUpperBound(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexRxMixedModeUpperBound = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexRxMixedModeUpperBound = otPlatVendorGetCoexRxMixedModeUpperBound(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexRxMixedModeUpperBound) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Upper bound threshold=%u", v11);
  }
  return CoexRxMixedModeUpperBound;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRxLowerBound(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexRxMixedModeLowerBound = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexRxMixedModeLowerBound = otPlatVendorGetCoexRxMixedModeLowerBound(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexRxMixedModeLowerBound) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Lower bound threshold=%u", v11);
  }
  return CoexRxMixedModeLowerBound;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexTx(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v16 = this;
  uint64_t v15 = a2;
  CoexTxint Mode = 0;
  unsigned __int8 v13 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CoexTxint Mode = otPlatVendorGetCoexTxMode(InstancePtr, (uint64_t)&v13, v3, v4, v5, v6, v7, v8);
  if (!CoexTxMode)
  {
    if (v13 <= 1u)
    {
      uint64_t v10 = v13 - 1;
      char v9 = 0;
    }
    else
    {
      uint64_t v10 = v13 - 1;
      char v9 = 1;
    }
    if (v9)
    {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Unknown COEX_TX_REQUEST_MODE");
    }
    else
    {
      switch(v10)
      {
        case 0:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_TX_REQUEST_MODE_FRAME_READY");
          break;
        case 1:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_TX_REQUEST_MODE_CCA_START");
          break;
        case 2:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_TX_REQUEST_MODE_RESERVED");
          break;
        case 3:
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "COEX_TX_REQUEST_MODE_BEFORE_CCA_REQ_TOGGLE");
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  return CoexTxMode;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexEnabled(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexEnabled = 0;
  char v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexEnabled = otPlatVendorGetCoexEnabled(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexEnabled)
  {
    if (v11) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "enabled", this);
    }
    else {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "disabled", this);
    }
  }
  return CoexEnabled;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexGrantTimeout(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  CoexGrantuint64_t Timeout = 0;
  int v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CoexGrantuint64_t Timeout = otPlatVendorGetCoexGrantTimeout(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexGrantTimeout) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Timeout=%u", v11);
  }
  return CoexGrantTimeout;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRxThrottleMaxAttemptsNone(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexThrottleMaxAttemptsNone = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexThrottleMaxAttemptsNone = otPlatVendorGetCoexThrottleMaxAttemptsNone(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexThrottleMaxAttemptsNone) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxAttemptsNone=%u", v11);
  }
  return CoexThrottleMaxAttemptsNone;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRxThrottleMaxAttemptsTxOnly(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexThrottleMaxAttemptsTxOnly = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexThrottleMaxAttemptsTxOnly = otPlatVendorGetCoexThrottleMaxAttemptsTxOnly(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexThrottleMaxAttemptsTxOnly) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxAttemptsTxOnly=%u", v11);
  }
  return CoexThrottleMaxAttemptsTxOnly;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRxThrottleMaxAttemptsRxOnly(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexThrottleMaxAttemptsRxOnly = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexThrottleMaxAttemptsRxOnly = otPlatVendorGetCoexThrottleMaxAttemptsRxOnly(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexThrottleMaxAttemptsRxOnly) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxAttemptsRxOnly=%u", v11);
  }
  return CoexThrottleMaxAttemptsRxOnly;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexRxThrottleTimeout(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  CoexRxThrottleuint64_t Timeout = 0;
  int v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CoexRxThrottleuint64_t Timeout = otPlatVendorGetCoexRxThrottleTimeout(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexRxThrottleTimeout) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Timeout=%u", v11);
  }
  return CoexRxThrottleTimeout;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexHistograms(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v19 = this;
  char v18 = a2;
  unsigned int CoexHistograms = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexHistograms = otPlatVendorGetCoexHistograms(InstancePtr, (uint64_t)v11);
  if (!CoexHistograms)
  {
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, "CoexUnsolicatedTxGrantHistogram=[%u", v11[0]);
    for (unsigned __int8 i = 1; i < 0x14u; ++i)
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, ", %u", v11[i]);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, "]\nCoexUnsolicatedRxGrantHistogram=[%u", v12[0]);
    for (unsigned __int8 j = 1; j < 0x14u; ++j)
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, ", %u", v12[j]);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, "]\nCoexTotalTxGrantHistogram=[%u", v13[0]);
    for (unsigned __int8 k = 1; k < 0x14u; ++k)
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, ", %u", v13[k]);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, "]\nCoexTotalRxGrantHistogram=[%u", v14[0]);
    for (unsigned __int8 m = 1; m < 0x14u; ++m)
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, ", %u", v14[m]);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, "]\nCoexTotalGrantTimeHistogram=[%u", v15[0]);
    for (unsigned __int8 n = 1; n < 0x10u; ++n)
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, ", %u", v15[n]);
    ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, "]\nCoexAbortsDueToGrantRevokesHistogram=[%u", v16[0]);
    for (iunsigned __int8 i = 1; ii < 0xBu; ++ii)
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)this, ", %u", v16[ii]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "]");
  }
  return CoexHistograms;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexCslReqAheadTime(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CoexRequestAheadCslTx = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexRequestAheadCslTx = otPlatVendorGetCoexRequestAheadCslTx(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexRequestAheadCslTx) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CslReqAheadTime=%u", v11);
  }
  return CoexRequestAheadCslTx;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCoexCslReqAheadTimeMin(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  CoexRequestAheadCslTxMiunsigned __int8 n = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CoexRequestAheadCslTxMiunsigned __int8 n = otPlatVendorGetCoexRequestAheadCslTxMin(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexRequestAheadCslTxMin) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CslReqAheadTimeMin=%u", v11);
  }
  return CoexRequestAheadCslTxMin;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCslTxSchedulerFrameReqAhead(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CslTxSchedulerFrameRequestAhead = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CslTxSchedulerFrameRequestAhead = otPlatVendorGetCslTxSchedulerFrameRequestAhead(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CslTxSchedulerFrameRequestAhead) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "FrameReqAhead=%u", v11);
  }
  return CslTxSchedulerFrameRequestAhead;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorPmuWakeTestResult(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int PmuWakeTestResult = 0;
  int v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int PmuWakeTestResult = otPlatVendorGetPmuWakeTestResult(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!PmuWakeTestResult) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "PmuWakeTestResult=%u", v11);
  }
  return PmuWakeTestResult;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorFemEnabled(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int FemEnabled = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int FemEnabled = otPlatVendorGetFemEnabled(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!FemEnabled) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Fem Enabled=%u", v11);
  }
  return FemEnabled;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCsmaMinBe(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CsmaMinBe = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CsmaMinBe = otPlatVendorGetCsmaMinBe(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CsmaMinBe) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MinBE=%u", v11);
  }
  return CsmaMinBe;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCsmaMaxBe(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CsmaMaxBe = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CsmaMaxBe = otPlatVendorGetCsmaMaxBe(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CsmaMaxBe) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxBE=%u", v11);
  }
  return CsmaMaxBe;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCsmaMaxBackOffs(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CsmaMaxBackoffs = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CsmaMaxBackoffs = otPlatVendorGetCsmaMaxBackoffs(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CsmaMaxBackoffs) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxBackoffs=%u", v11);
  }
  return CsmaMaxBackoffs;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCsmaSlidingWindowEnabled(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CsmaSlidingWindowEnabled = 0;
  char v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CsmaSlidingWindowEnabled = otPlatVendorGetCsmaSlidingWindowEnabled(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CsmaSlidingWindowEnabled) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Enabled=%u", v11 & 1);
  }
  return CsmaSlidingWindowEnabled;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCcaEnergyDetectedHistogram(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v15 = this;
  unsigned int v14 = a2;
  CcaEnergyDetectedHistograunsigned __int8 m = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CcaEnergyDetectedHistograunsigned __int8 m = otPlatVendorGetCcaEnergyDetectedHistogram(InstancePtr, (uint64_t)v12, v3, v4, v5, v6, v7, v8);
  if (!CcaEnergyDetectedHistogram)
  {
    for (unsigned __int8 i = 0; i < 0xCu; ++i)
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CcaHistogram[%d]=%u", i, v12[i]);
  }
  return CcaEnergyDetectedHistogram;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCsmaBackoffHistogram(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v15 = this;
  unsigned int v14 = a2;
  CsmaBackoffHistograunsigned __int8 m = 0;
  bzero(v12, 0x400uLL);
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  CsmaBackoffHistograunsigned __int8 m = otPlatVendorGetCsmaBackoffHistogram(InstancePtr, v12, v3, v4, v5, v6, v7, v8);
  if (!CsmaBackoffHistogram)
  {
    for (unsigned __int16 i = 0; i < (int)v12[0]; ++i)
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CSMABackoffHistogram[%d]=%u", i, *(_DWORD *)&v12[4 * i + 4]);
  }
  return CsmaBackoffHistogram;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorIfsMode(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  Ifsint Mode = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  Ifsint Mode = otPlatVendorGetIfsMode(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!IfsMode) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "IFSMode=%u", v11);
  }
  return IfsMode;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorIfsMinSifs(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int IfsMinSifs = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int IfsMinSifs = otPlatVendorGetIfsMinSifs(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!IfsMinSifs) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MinSIFS=%u", v11);
  }
  return IfsMinSifs;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorIfsMinLifs(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int IfsMinLifs = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int IfsMinLifs = otPlatVendorGetIfsMinLifs(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!IfsMinLifs) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MinLIFS=%u", v11);
  }
  return IfsMinLifs;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorIfsMinRetxSifs(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  return 0;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorIfsMinRetxLifs(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  return 0;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCsmaCcaIdleAttempts(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int CsmaCcaIdleAttempts = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CsmaCcaIdleAttempts = otPlatVendorGetCsmaCcaIdleAttempts(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CsmaCcaIdleAttempts) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CCA Idle Attempts=%u", v11);
  }
  return CsmaCcaIdleAttempts;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorGetIfsAckTurnAroundTime(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int IfsAckTurnAroundTime = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int IfsAckTurnAroundTime = otPlatVendorGetIfsAckTurnAroundTime(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!IfsAckTurnAroundTime)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "AckTurnAroundTime=%u", v11);
    persist_ifs_ackturnaround_time();
  }
  return IfsAckTurnAroundTime;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorGetIfsAckTurnAroundMode(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  IfsAckTurnAroundint Mode = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  IfsAckTurnAroundint Mode = otPlatVendorGetIfsAckTurnAroundMode(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!IfsAckTurnAroundMode)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "AckTurnAroundMode=%u", v11);
    persist_ifs_ackturnaround_mode();
  }
  return IfsAckTurnAroundMode;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorGetIfsAckTurnAroundEnable(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int IfsAckTurnAroundEnable = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int IfsAckTurnAroundEnable = otPlatVendorGetIfsAckTurnAroundEnable(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!IfsAckTurnAroundEnable)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "AckTurnAroundEnable=%u", v11);
    persist_ifs_ackturnaround_enable();
  }
  return IfsAckTurnAroundEnable;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorIfsAckDataPerNeighbor(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v15 = __chkstk_darwin(this, a2);
  uint64_t v14 = v2;
  uint64_t v10 = (ot::Cli::OutputImplementer **)v15;
  unsigned int IfsAckDataPerNeighbor = 0;
  unsigned __int8 v12 = 0;
  unsigned int IfsAckDataPerNeighbor = otPlatVendorGetIfsAckDataPerNeighbor((uint64_t)v16, (uint64_t)&v12, v3, v4, v5, v6, v7, v8);
  if (!IfsAckDataPerNeighbor)
  {
    for (unsigned __int16 i = 0; i < (int)v12; ++i)
    {
      ot::Cli::Output::OutputFormat(v10, "[%u] Neighbor Short Address = %04x | Bit field = %04x", i, (unsigned __int16)v16[57 * i], (unsigned __int16)v16[57 * i + 5]);
      ot::Cli::Output::OutputFormat(v10, " | Extended Address = ");
      ot::Cli::Output::OutputExtAddress(v10, (const unsigned __int8 *)&v16[57 * i + 1]);
      ot::Cli::Output::OutputFormat(v10, " | IE data = ");
      ot::Cli::Output::OutputBytesLine(v10, (const unsigned __int8 *)&v16[57 * i + 6], v16[57 * i + 56]);
    }
  }
  return IfsAckDataPerNeighbor;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorOtRadioCounters(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned int OpenThreadRadioCounters = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int OpenThreadRadioCounters = otPlatVendorGetOpenThreadRadioCounters(InstancePtr, (uint64_t)v5);
  if (!OpenThreadRadioCounters)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TransmittedFrames=%u", v5[0]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTimeslotEnded=%u", v5[1]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTimeslotDenied=%u", v5[2]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorBusyChannelCcaNotStarted=%u", v5[3]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorChannelAccessCcaBusy=%u", v5[4]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorChannelAccessFailure=%u", v5[5]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAborted=%u", v5[6]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedCsmaCfgBackoff=%u", v5[7]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedCsmaBackoff=%u", v5[8]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedCsmaPrepare=%u", v5[9]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedIfs=%u", v5[10]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedRxAck=%u", v5[11]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedCcaTx=%u", v5[12]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorTxAbortedTx=%u", v5[13]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorNotGranted=%u", v5[14]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorInvalidAck=%u", v5[15]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorNoAck=%u", v5[16]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxErrorAckNoMem=%u", v5[17]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "ReceivedFrames=%u", v5[18]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorReceiveFailed=%u", v5[19]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorInvalidFrame=%u", v5[20]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorDelayedTimeout=%u", v5[21]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorInvalidFcs=%u", v5[22]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorDestAddrFiltered=%u", v5[24]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorRuntimeDelay=%u", v5[25]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorTimeslotEnded=%u", v5[26]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAborted=%u", v5[27]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorDelayedTimeslotEnded=%u", v5[28]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorInvalidLength=%u", v5[29]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorInvalidData=%u", v5[30]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckFailedRadioState[PATH_0]=%u", v5[31]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckFailedRadioDelay[PATH_0]=%u", v5[33]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckDenied[PATH_0]=%u", v5[35]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckAborted[PATH_0]=%u", v5[37]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckFailedRadioState[PATH_1]=%u", v5[32]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckFailedRadioDelay[PATH_1]=%u", v5[34]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckDenied[PATH_1]=%u", v5[36]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorAckAborted[PATH_1]=%u", v5[38]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RxErrorInvalidFcsWhenSwitchingRadioPath=%u", v5[23]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "SleepState=%u", v5[39]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "EnergyDetectedRequests=%u", v5[40]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "EnergyDetectedEvents=%u", v5[41]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Radio status double notification events=%u", v5[42]);
  }
  return OpenThreadRadioCounters;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorRadioCounters(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int RadioCounters = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int RadioCounters = otPlatVendorGetRadioCounters(InstancePtr, (uint64_t)v11, v3, v4, v5, v6, v7, v8);
  if (!RadioCounters)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CcaFailedAttempts=%u", v11[0]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "ReceivedFrames=%u", v11[1]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "ReceivedEnergyEvents=%u", v11[2]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "ReceivedPreambles=%u", v11[3]);
  }
  return RadioCounters;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorRadioStats(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int RadioStats = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int RadioStats = otPlatVendorGetRadioStats(InstancePtr, (uint64_t)v11, v3, v4, v5, v6, v7, v8);
  if (!RadioStats)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RTT Min=%u", v11[0]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RTT Max=%u", v11[1]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RTT Avg=%u", v11[2]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RTT Perc=%u", v11[3]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RetryInterval Min=%u", v11[4]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RetryInterval Max=%u", v11[5]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RetryInterval Avg=%u", v11[6]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RetryInterval Perc=%u", v11[7]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxDelay Min=%u", v11[8]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxDelay Max=%u", v11[9]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxDelay Avg=%u", v11[10]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "TxDelay Perc=%u", v11[11]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Listen=%u", v11[12]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Receive=%u", v11[13]);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Transmit=%u", v11[14]);
  }
  return RadioStats;
}

uint64_t ot::Cli::Vendor::ProcessGetMSFState(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  MSFint State = 0;
  char v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  MSFint State = otPlatVendorGetMSFState(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!MSFState)
  {
    if (v11) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MSF loaded", this);
    }
    else {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MSF not loaded", this);
    }
  }
  return MSFState;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorFaultInfo(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v15 = this;
  uint64_t v14 = a2;
  unsigned int FaultInfo = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int FaultInfo = otPlatVendorGetFaultInfo(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!FaultInfo)
  {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Address=%u", v12);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Line=%u", DWORD1(v12));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "RandomId=%u", v11);
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CrashCount=%u", WORD4(v12));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CrashType=%u", DWORD1(v11));
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Timestamp=%u", DWORD2(v11));
  }
  return FaultInfo;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorDeepSleepFilterList(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int DeepSleepFilterList = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int DeepSleepFilterList = otPlatVendorGetDeepSleepFilterList(InstancePtr, (uint64_t)v15, (uint64_t)&v11, v3, v4, v5, v6, v7);
  if (!DeepSleepFilterList)
  {
    for (unsigned __int8 i = 0; i < (int)v11; ++i)
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "DeepSleepFilterList=%u", v15[i]);
  }
  return DeepSleepFilterList;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorDeepSleepLogLevel(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  DeepSleepLogint Level = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  DeepSleepLogint Level = otPlatVendorGetDeepSleepLogLevel(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!DeepSleepLogLevel) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "DeepSleepLogLevel=%u", v11);
  }
  return DeepSleepLogLevel;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorDeepSleepRegionLogLevels(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  unsigned int DeepSleepRegionLogLevels = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int DeepSleepRegionLogLevels = otPlatVendorGetDeepSleepRegionLogLevels(InstancePtr, (uint64_t)v15, (uint64_t)&v11, v3, v4, v5, v6, v7);
  if (!DeepSleepRegionLogLevels)
  {
    for (unsigned __int8 i = 0; i < (int)v11; ++i)
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "%u", v15[i]);
  }
  return DeepSleepRegionLogLevels;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorLastHostWakeReason(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  HostWakeReasounsigned __int8 n = 0;
  int v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  HostWakeReasounsigned __int8 n = otPlatVendorGetHostWakeReason(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!HostWakeReason) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "HostWakeReason=%u", v11);
  }
  return HostWakeReason;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorDeviceId(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  int v11 = this;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  unsigned int DeviceId = otPlatVendorGetDeviceId(InstancePtr, (uint64_t)v15, v3, v4, v5, v6, v7, v8);
  if (!DeviceId)
  {
    void v10[10] = v10;
    ot::Cli::Output::OutputLine(v11, "%x:%x:%x:%x:%x:%x:%x:%x", v15[0], v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7]);
  }
  return DeviceId;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorNcpStateDump(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v41 = this;
  v40 = a2;
  CoexGrantuint64_t Timeout = 0;
  ot::Cli::Output::OutputLine(this, "RCP State Dump");
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  int State = otBorderAgentGetState(InstancePtr);
  ot::Cli::Output::OutputFormat(this, "Border Agent State=%d\n", State);
  __int16 v37 = 0;
  ot::Cli::Output::OutputFormat(this, "Role=");
  uint64_t v3 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  unsigned int DeviceRole = otThreadGetDeviceRole(v3);
  uint64_t v5 = otThreadDeviceRoleToString(DeviceRole);
  ot::Cli::Output::OutputLine(this, "%s", v5);
  ot::Cli::Output::OutputFormat(this, "\nRLOC16=");
  uint64_t v6 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  uint64_t Rloc = otThreadGetRloc(v6);
  ot::Cli::Output::OutputIp6Address(this, Rloc);
  uint64_t v8 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  unsigned int v9 = otJoinerGetState(v8);
  if (v9)
  {
    uint64_t v11 = v9;
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 0;
  }
  if (v10)
  {
    ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: unknown");
  }
  else
  {
    switch(v11)
    {
      case 0:
        ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: %s", "idle");
        break;
      case 1:
        ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: %s", "discover");
        break;
      case 2:
        ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: %s", "connecting");
        break;
      case 3:
        ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: %s", "connected");
        break;
      case 4:
        ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: %s", "entrust");
        break;
      case 5:
        ot::Cli::Output::OutputFormat(this, "\nJOINER_STATE: %s", "joined");
        break;
      default:
        JUMPOUT(0);
    }
  }
  unsigned __int8 v36 = 0;
  uint64_t v12 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  int v28 = otCommissionerGetState(v12);
  if (v28)
  {
    if (v28 == 1)
    {
      unsigned __int8 v36 = 1;
    }
    else if (v28 == 2)
    {
      unsigned __int8 v36 = 2;
    }
  }
  else
  {
    unsigned __int8 v36 = 0;
  }
  ot::Cli::Output::OutputFormat(this, "\nMESHCOP_COMMISSIONER_STATE: %d", v36);
  ot::Cli::Output::OutputFormat(this, "\nIPV6_ADDRESS_TABLE: \n");
  uint64_t v13 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  for (uint64_t i = otIp6GetUnicastAddresses(v13); i; uint64_t i = *(void *)(i + 24))
  {
    ot::Cli::Output::OutputIp6Address(this, i);
    ot::Cli::Output::OutputFormat(this, "Prefix Length=%d", *(unsigned __int8 *)(i + 16));
    if (*(unsigned char *)(i + 18)) {
      int v14 = -1;
    }
    else {
      int v14 = 0;
    }
    ot::Cli::Output::OutputFormat(this, "Preferred:%d", v14);
    if ((*(unsigned char *)(i + 18) & 2) != 0) {
      int v15 = -1;
    }
    else {
      int v15 = 0;
    }
    ot::Cli::Output::OutputFormat(this, "Valid:%d\n", v15);
  }
  ot::Cli::Output::OutputFormat(this, "\nMSG_BUFFER_COUNTERS\n");
  uint64_t v16 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  otMessageGetBufferInfo(v16, (uint64_t)v34);
  ot::Cli::Output::OutputFormat(this, "\nmTotalBuffers:%u", v34[0]);
  ot::Cli::Output::OutputFormat(this, "\nmFreeBuffers:%u", v34[1]);
  ot::Cli::Output::OutputFormat(this, "\nm6loSendMessages:%u", v34[4]);
  ot::Cli::Output::OutputFormat(this, "\nm6loSendBuffers:%u", v34[5]);
  ot::Cli::Output::OutputFormat(this, "\nm6loReassemblyMessages:%u", v34[8]);
  ot::Cli::Output::OutputFormat(this, "\nm6loReassemblyBuffers:%u", v34[9]);
  ot::Cli::Output::OutputFormat(this, "\nmIp6Messages:%u", v34[12]);
  ot::Cli::Output::OutputFormat(this, "\nmIp6Buffers:%u", v34[13]);
  ot::Cli::Output::OutputFormat(this, "\nmMplMessages:%u", v34[16]);
  ot::Cli::Output::OutputFormat(this, "\nmMplBuffers:%u", v34[17]);
  ot::Cli::Output::OutputFormat(this, "\nmMleMessages:%u", v34[20]);
  ot::Cli::Output::OutputFormat(this, "\nmMleBuffers:%u", v34[21]);
  ot::Cli::Output::OutputFormat(this, "\nmCoapMessages:%u", v34[24]);
  ot::Cli::Output::OutputFormat(this, "\nmCoapBuffers:%u", v34[25]);
  ot::Cli::Output::OutputFormat(this, "\nNeighbor Info\n");
  while (1)
  {
    uint64_t v17 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
    if (otThreadGetNextNeighborInfo(v17, &v37, (uint64_t)v43)) {
      break;
    }
    ot::Cli::Output::OutputFormat(this, " neighInfo.mIsChild:%u", (v47 & 8) != 0);
    ot::Cli::Output::OutputFormat(this, " neighInfo.mRloc16:%u", v44);
    ot::Cli::Output::OutputFormat(this, " neighInfo.mAverageRssi:%u", v45);
    ot::Cli::Output::OutputFormat(this, " neighInfo.mLastRssi:%u", v46);
  }
  ot::Cli::Output::OutputFormat(this, "\nLEADER_NETWORK_DATA\n");
  unsigned __int8 v33 = -1;
  uint64_t v18 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  otNetDataGet(v18, 0, v42, (char *)&v33);
  IgnoreError();
  for (int j = 0; j < v33; ++j)
    ot::Cli::Output::OutputFormat(this, "%x", v42[j]);
  ot::Cli::Output::OutputFormat(this, "\nMLE_COUNTERS\n");
  uint64_t v19 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  uint64_t MleCounters = (unsigned __int16 *)otThreadGetMleCounters(v19);
  if (!MleCounters) {
    __assert_rtn("ProcessGetVendorNcpStateDump", "cli_vendor.cpp", 1319, "counters != nullptr");
  }
  ot::Cli::Output::OutputFormat(this, "\ncounters->mDisabledRole:%u", *MleCounters);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mDetachedRole:%u", MleCounters[1]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mChildRole:%u", MleCounters[2]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mRouterRole:%u", MleCounters[3]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mLeaderRole:%u", MleCounters[4]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mAttachAttempts:%u", MleCounters[5]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mPartitionIdChanges:%u", MleCounters[6]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mBetterPartitionAttachAttempts:%u", MleCounters[7]);
  ot::Cli::Output::OutputFormat(this, "\ncounters->mParentChanges:%u", MleCounters[32]);
  int v30 = 0;
  uint64_t v20 = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  CoexGrantuint64_t Timeout = otPlatVendorGetCoexGrantTimeout(v20, (uint64_t)&v30, v21, v22, v23, v24, v25, v26);
  if (!CoexGrantTimeout) {
    ot::Cli::Output::OutputFormat(this, "\nCoexGrantTimeout:%u", v30);
  }
  return CoexGrantTimeout;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorValidateSettings(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  return 0;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorLogTimestampEntry(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  ot::Cli::Output::OutputLine(this, "LogTimeStamp=%llu", this[2]);
  return 0;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRx(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexRxMode(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        persist_coex_rxmode();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRxUpperBound(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexRxMixedModeUpperBound(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        persist_coex_rxthresholdUpperBound();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRxLowerBound(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexRxMixedModeLowerBound(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        persist_coex_rxthresholdLowerBound();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexTx(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexTxMode(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        persist_coex_txmode();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexEnabled(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  BOOL v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsBool((ot::Utils::CmdLineParser **)v14, &v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexEnabled(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        persist_coex_enabled();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexCounters(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetCoexCounters(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset CoexMetrics");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexGrantTimeout(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v14, (char *)&v12, v2);
    if (!v13)
    {
      if (v12 <= 0x32E38)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
        unsigned int v13 = otPlatVendorSetCoexGrantTimeout(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
        if (!v13) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Timeout=%u", v12);
        }
      }
      else
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Timeout=%u is greater than max supported value:208440 ", v12);
        return 7;
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRxThrottleMaxAttemptsNone(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexThrottleMaxAttemptsNone(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxAttempts=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRxThrottleMaxAttemptsTxOnly(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexThrottleMaxAttemptsTxOnly(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxAttemptsTxOnly=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRxThrottleMaxAttemptsRxOnly(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexThrottleMaxAttemptsRxOnly(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxAttemptsRxOnly=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexRxThrottleTimeout(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexRxThrottleTimeout(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Coex RxThrottle Timeout=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexHistograms(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetCoexHistograms(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset Coex Histogram");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCoexCslReqAheadTime(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCoexRequestAheadCslTx(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CslReqAheadTime=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCslTxSchedulerFrameReqAhead(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCslTxSchedulerFrameRequestAhead(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "FrameReqAhead=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorPmuWakeTestStart(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetPmuWakeTestStart(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "PmuWakeTestStart=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorFemEnabled(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetFemEnabled(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Fem Enabled=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCsmaMinBe(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCsmaMinBe(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MinBE=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCsmaMaxBe(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCsmaMaxBe(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxBE=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCsmaMaxBackOffs(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCsmaMaxBackoffs(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MaxBackoffs=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCsmaCcaIdleAttempts(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v14 + 1)))
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCsmaCcaIdleAttempts(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CcaIdleAttempts=%u", v12);
        persist_csma_cca_idle_attempts();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCsmaSlidingWindowEnabled(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  BOOL v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsBool(v14, &v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetCsmaSlidingWindowEnabled(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Enabled=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCcaEnergyDetectedHistogram(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetCcaEnergyDetectedHistogram(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset CcaHistogram");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCsmaBackoffHistogram(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetCsmaBackoffHistogram(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset CSMABackoffHistogram");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsMode(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetIfsMode(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "IFSMode=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsMinSifs(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetIfsMinSifs(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MinSIFS=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsMinLifs(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetIfsMinLifs(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "MinLIFS=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsMinRetxSifs(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return 7;
  }
  else {
    ot::Cli::Output::OutputLine(this, "RICK UPMERGE CANDIDATE");
  }
  return v4;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsMinRetxLifs(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return 7;
  }
  else {
    ot::Cli::Output::OutputLine(this, "RICK UPMERGE CANDIDATE");
  }
  return v4;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsAckTurnAroundMode(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v14 + 1)))
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetIfsAckTurnAroundMode(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "AckTurnAroundMode=%u", v12);
        persist_ifs_ackturnaround_mode();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsAckTurnAroundEnable(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v14 + 1)))
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      if (v12 <= 1u)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
        unsigned int v13 = otPlatVendorSetIfsAckTurnAroundEnable(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
        if (!v13)
        {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "AckTurnAroundEnable=%u", v12);
          persist_ifs_ackturnaround_enable();
        }
      }
      else
      {
        return 7;
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorIfsAckTurnAroundTime(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    && ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v14 + 1)))
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetIfsAckTurnAroundTime(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13)
      {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "AckTurnAroundTime=%u", v12);
        persist_ifs_ackturnaround_time();
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCntrStatsReset(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorCntrStatsReset(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CnrtStatsReset=%s", v13);
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorOtRadioCounters(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetOpenThreadRadioCounters(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset Radio counters");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorRadioCounters(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetRadioCounters(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset Radio Counters");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorRadioStats(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorResetRadioStats(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Reset RadioStats");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorLoggingTest(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v14 = this;
  unsigned int v13 = a2;
  unsigned int v12 = 0;
  v11[7] = 1;
  v11[6] = 1;
  strcpy(v11, "hello");
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
  {
    return 7;
  }
  else
  {
    unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v13, &v11[7], v2);
    if (!v12)
    {
      unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v13 + 1, &v11[6], v3);
      if (!v12)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
        unsigned int v12 = otPlatVendorLoggingTest(InstancePtr, v11[7], v11[6], (uint64_t)v11, v5, v6, v7, v8);
        if (!v12) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Log test");
        }
      }
    }
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorFilterNotif (ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8((ot::Utils::CmdLineParser **)v14, (char *)&v12, v2);
    if (!v13)
    {
      unsigned int v13 = otPlatVendorSetNotificationFilter(v12, v3, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine(this, "FilterNotif");
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorFaultInfo(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  return otPlatVendorSetFaultInfo(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t ot::Cli::Vendor::ProcessSetVendorDeepSleepFilterList(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v14 = this;
  unsigned int v13 = a2;
  unsigned int v12 = 0;
  unsigned __int8 v11 = 100;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorSetDeepSleepFilterList(InstancePtr, (uint64_t)v15, (uint64_t)&v11, v3, v4, v5, v6, v7);
  if (!v12)
  {
    for (unsigned __int16 i = 0; i < (int)v11; ++i)
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "DeepSleepFilterLis=%u", v15[i]);
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorDeepSleepLogLevel(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v14, (char *)&v12, v2);
    if (!v13)
    {
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
      unsigned int v13 = otPlatVendorSetDeepSleepLogLevel(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
      if (!v13) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "DeepSleepLogLevel=%u", v12);
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorDeepSleepRegionLogLevels(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v14 = this;
  unsigned int v13 = a2;
  unsigned int v12 = 0;
  unsigned __int8 v11 = -1;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorSetDeepSleepRegionLogLevels(InstancePtr, (uint64_t)v15, (uint64_t)&v11, v3, v4, v5, v6, v7);
  if (!v12)
  {
    for (unsigned __int8 i = 0; i < (int)v11; ++i)
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "%u", v15[i]);
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorLastHostWakeReason(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int v12 = otPlatVendorSetHostWakeReason(InstancePtr, v3, v4, v5, v6, v7, v8, v9);
  if (!v12) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Clear HostWakeReason");
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorFlashErase(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  uint64_t v16 = this;
  int v15 = a2;
  unsigned int v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 1)))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = 0;
    unsigned int v12 = 0;
    unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v15, (char *)&v13, v2);
    if (!v14)
    {
      unsigned int v14 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v15 + 1, (char *)&v12, v3);
      if (!v14)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
        unsigned int v14 = otPlatVendorFlashErase(InstancePtr, v13, v12, v5, v6, v7, v8, v9);
        if (!v14) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "%u:%u", v13, v12);
        }
      }
    }
  }
  return v14;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorFlashWrite(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned int v12 = 0;
  unsigned __int16 v11 = 100;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)a2 + 8)))
  {
    return 7;
  }
  else
  {
    unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)v14, (char *)&v12, v2);
    if (!v13)
    {
      unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsHexString((ot::Utils::CmdLineParser **)v14 + 1, (char *)&v11, v16, v3);
      if (!v13)
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
        unsigned int v13 = otPlatVendorFlashWrite(InstancePtr, v12, (uint64_t)v16, v11, v5, v6, v7, v8);
        if (!v13) {
          ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Flash write Address=%u", v12);
        }
      }
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorOtLogTimestampBase(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2))
  {
    return 7;
  }
  else
  {
    unsigned int v12 = ot::Utils::CmdLineParser::Arg::ParseAsUint64((ot::Utils::CmdLineParser **)v13, (char *)&v11, v2);
    if (!v12) {
      return otPlatVendorSetLogTimestampBase(v11, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  return v12;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorUartDisableStart(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  int v5 = 0;
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return 7;
  }
  else {
    return ot::Utils::CmdLineParser::Arg::ParseAsUint32((ot::Utils::CmdLineParser **)v6, (char *)&v4, v2);
  }
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCore(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int Core = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int Core = otPlatVendorGetCore(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!Core) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Core=%d", v11);
  }
  return Core;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorAntenna(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int Antenna = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int Antenna = otPlatVendorGetAntenna(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!Antenna) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Antenna=%d", v11);
  }
  return Antenna;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorCC(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int CC = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CC = otPlatVendorGetCC(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CC) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "CountryCode=%u", v11);
  }
  return CC;
}

uint64_t ot::Cli::Vendor::ProcessGetVendorPCAP(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int PCAP = 0;
  char v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int PCAP = otPlatVendorGetPCAP(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!PCAP) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "pcap=%d", v11 & 0xF);
  }
  return PCAP;
}

uint64_t ot::Cli::Vendor::ProcessGetPriority(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int Priority = 0;
  unsigned __int8 v11 = 0;
  unsigned __int8 v10 = 0;
  int v9 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int Priority = otPlatVendorGetPriority(InstancePtr, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9, v3, v4, v5, v6);
  if (!Priority) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "priority = %d, overridePriority = %d, overridePriorityDuratiounsigned __int8 n = %d", v11, v10, v9);
  }
  return Priority;
}

uint64_t ot::Cli::Vendor::ProcessGetGPIO(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v14 = this;
  unsigned int v13 = a2;
  unsigned int GPIO = 0;
  v15[0] = *(_OWORD *)off_10049E8E0;
  v15[1] = *(_OWORD *)off_10049E8F0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int GPIO = otPlatVendorGetGPIO(InstancePtr, (uint64_t)v11, v3, v4, v5, v6, v7, v8);
  if (!GPIO) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "GPIO: txd->%s, rxd->%s, rts->%s, cts->%s", *((const char **)v15 + v11[0]), *((const char **)v15 + v11[1]), *((const char **)v15 + v11[2]), *((const char **)v15 + v11[3]));
  }
  return GPIO;
}

uint64_t ot::Cli::Vendor::ProcessGetBackOff(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t v2 = "Enabled";
  if (!enablebackoff) {
    uint64_t v2 = "Disabled";
  }
  ot::Cli::Output::OutputLine(this, "Backoff is %s", v2);
  return 0;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorAntenna(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(a2, (char *)&v12, a3);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v13 = otPlatVendorSetAntenna(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
    if (!v13) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set Antenna %u", v12);
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorCC(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(a2, (char *)&v12, a3);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v13 = otPlatVendorSetCC(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
    if (!v13) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set CC =%u", v12);
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetVendorPCAP(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(a2, (char *)&v12, a3);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v13 = otPlatVendorSetPCAP(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
    if (!v13) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set pcap =%x", v12);
    }
  }
  return v13;
}

uint64_t ot::Cli::Vendor::ProcessSetPriority(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  unsigned int v15 = 0;
  unsigned __int8 v14 = 0;
  unsigned __int8 v13 = 0;
  unsigned int v12 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(a2 + 2)))
  {
    return 7;
  }
  else
  {
    unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v16, (char *)&v14, v2);
    if (!v15)
    {
      unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(v16 + 1, (char *)&v13, v3);
      if (!v15)
      {
        unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v16 + 2, (char *)&v12, v4);
        if (!v15)
        {
          uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
          unsigned int v15 = otPlatVendorSetPriority(InstancePtr, v14, v13, v12, v6, v7, v8, v9);
          if (!v15) {
            ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set priority =%d, overritePriority =%d, overritePriorityDuration =%u", v14, v13, v12);
          }
        }
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Vendor::ProcessSetGPIO(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  v20[0] = *(_OWORD *)off_10049E900;
  v20[1] = *(_OWORD *)off_10049E910;
  v19[0] = *(_OWORD *)off_10049E920;
  v19[1] = *(_OWORD *)off_10049E930;
  signed __int8 v13 = -1;
  signed __int8 v12 = -1;
  __s1 = (char *)ot::Utils::CmdLineParser::Arg::GetCString(a2);
  uint64_t CString = (char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)((char *)a2 + 8));
  for (unsigned __int8 i = 0; i < 4u; ++i)
  {
    if (!strcmp(__s1, *((const char **)v20 + i)))
    {
      signed __int8 v13 = i + 1;
      break;
    }
  }
  for (unsigned __int8 j = 0; j < 4u; ++j)
  {
    if (!strcmp(CString, *((const char **)v19 + j)))
    {
      signed __int8 v12 = j;
      break;
    }
  }
  if (v13 >= 0 && v12 >= 0)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v16 = otPlatVendorSetGPIO(InstancePtr, v13, v12, v3, v4, v5, v6, v7);
    if (!v16) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set GPIO %s(%d) as %s(%d)", *((const char **)v20 + v13 - 1), v13, *((const char **)v19 + v12), v12);
    }
    return v16;
  }
  else
  {
    return 7;
  }
}

uint64_t ot::Cli::Vendor::ProcessSetBackOff(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  unsigned int v7 = 0;
  unsigned __int8 v6 = 0;
  unsigned int v7 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(a2, (char *)&v6, a3);
  if (!v7)
  {
    enablebackoff = v6;
    uint64_t v3 = "Enable";
    if (!v6) {
      uint64_t v3 = "Disable";
    }
    ot::Cli::Output::OutputLine(this, "%s Backoff", v3);
  }
  return v7;
}

uint64_t ot::Utils::LookupTable::GetName<ot::Cli::Vendor::Command>(uint64_t a1)
{
  return *(void *)a1;
}

void *ot::Cli::OutputImplementer::OutputImplementer(void *this, int (*a2)(void *, const char *, char *), void *a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

ot::Cli::OutputImplementer *ot::Cli::OutputImplementer::OutputImplementer(ot::Cli::OutputImplementer *this, int (*a2)(void *, const char *, char *), void *a3)
{
  return this;
}

uint64_t ot::Cli::Output::OutputFormat(ot::Cli::OutputImplementer **this, const char *a2, ...)
{
  va_start(va, a2);
  return ot::Cli::Output::OutputFormatV(this, a2, va);
}

uint64_t ot::Cli::Output::OutputFormatV(ot::Cli::OutputImplementer **this, const char *a2, char *a3)
{
  return ot::Cli::OutputImplementer::OutputV(this[1], a2, a3);
}

uint64_t ot::Cli::Output::OutputFormat(ot::Cli::OutputImplementer **this, unsigned __int8 a2, const char *a3, ...)
{
  va_start(va, a3);
  ot::Cli::Output::OutputSpaces(this, a2);
  return ot::Cli::Output::OutputFormatV(this, a3, va);
}

uint64_t ot::Cli::Output::OutputSpaces(ot::Cli::OutputImplementer **this, unsigned __int8 a2)
{
  return ot::Cli::Output::OutputFormat(this, "%*s", a2, "");
}

uint64_t ot::Cli::Output::OutputLine(ot::Cli::OutputImplementer **this, const char *a2, ...)
{
  va_start(va, a2);
  ot::Cli::Output::OutputFormatV(this, a2, va);
  return ot::Cli::Output::OutputNewLine(this);
}

uint64_t ot::Cli::Output::OutputNewLine(ot::Cli::OutputImplementer **this)
{
  return ot::Cli::Output::OutputFormat(this, "\r\n");
}

uint64_t ot::Cli::Output::OutputLine(ot::Cli::OutputImplementer **this, unsigned __int8 a2, const char *a3, ...)
{
  va_start(va, a3);
  ot::Cli::Output::OutputSpaces(this, a2);
  ot::Cli::Output::OutputFormatV(this, a3, va);
  return ot::Cli::Output::OutputNewLine(this);
}

ot::Cli::OutputImplementer **ot::Cli::Output::OutputBytes(ot::Cli::OutputImplementer **this, const unsigned __int8 *a2, unsigned __int16 a3)
{
  uint64_t v3 = this;
  for (unsigned __int16 i = 0; i < (int)a3; ++i)
    this = (ot::Cli::OutputImplementer **)ot::Cli::Output::OutputFormat(v3, "%02x", a2[i]);
  return this;
}

uint64_t ot::Cli::Output::OutputBytesLine(ot::Cli::OutputImplementer **this, const unsigned __int8 *a2, unsigned __int16 a3)
{
  return ot::Cli::Output::OutputNewLine(this);
}

uint64_t ot::Cli::Output::Uint64ToString(unint64_t a1, uint64_t a2)
{
  unint64_t v4 = a1;
  uint64_t v3 = a2 + 20;
  *(unsigned char *)(a2 + 2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0;
  if (a1)
  {
    while (v4)
    {
      *(unsigned char *)--uint64_t v3 = v4 % 0xA + 48;
      v4 /= 0xAuLL;
    }
  }
  else
  {
    uint64_t v3 = a2 + 19;
    *(unsigned char *)(a2 + 19) = 48;
  }
  return v3;
}

uint64_t ot::Cli::Output::OutputUint64(ot::Cli::OutputImplementer **this, unint64_t a2)
{
  uint64_t v2 = (const char *)ot::Cli::Output::Uint64ToString(a2, (uint64_t)v5);
  return ot::Cli::Output::OutputFormat(this, "%s", v2);
}

uint64_t ot::Cli::Output::OutputUint64Line(ot::Cli::OutputImplementer **this, unint64_t a2)
{
  return ot::Cli::Output::OutputNewLine(this);
}

uint64_t ot::Cli::Output::OutputEnabledDisabledStatus(ot::Cli::OutputImplementer **this, char a2)
{
  if (a2) {
    return ot::Cli::Output::OutputLine(this, "Enabled");
  }
  else {
    return ot::Cli::Output::OutputLine(this, "Disabled");
  }
}

uint64_t ot::Cli::Output::OutputIp6Address(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  otIp6AddressToString(a2, v4, 40);
  return ot::Cli::Output::OutputFormat(a1, "%s", v4);
}

uint64_t ot::Cli::Output::OutputIp6AddressLine(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  return ot::Cli::Output::OutputNewLine(a1);
}

uint64_t ot::Cli::Output::OutputIp6Prefix(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  otIp6PrefixToString(a2, v4, 45);
  return ot::Cli::Output::OutputFormat(a1, "%s", v4);
}

uint64_t ot::Cli::Output::OutputIp6PrefixLine(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  return ot::Cli::Output::OutputNewLine(a1);
}

uint64_t ot::Cli::Output::OutputIp6Prefix(ot::Cli::OutputImplementer **a1, unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputFormat(a1, "%x:%x:%x:%x::/64", a2[1] | (*a2 << 8), a2[3] | (a2[2] << 8), a2[5] | (a2[4] << 8), a2[7] | (a2[6] << 8));
}

uint64_t ot::Cli::Output::OutputIp6PrefixLine(ot::Cli::OutputImplementer **a1, unsigned __int8 *a2)
{
  return ot::Cli::Output::OutputNewLine(a1);
}

uint64_t ot::Cli::Output::OutputSockAddr(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  otIp6SockAddrToString(a2, v4, 48);
  return ot::Cli::Output::OutputFormat(a1, "%s", v4);
}

uint64_t ot::Cli::Output::OutputSockAddrLine(ot::Cli::OutputImplementer **a1, uint64_t a2)
{
  return ot::Cli::Output::OutputNewLine(a1);
}

uint64_t ot::Cli::Output::OutputDnsTxtData(ot::Cli::OutputImplementer **this, const unsigned __int8 *a2, __int16 a3)
{
  unsigned __int8 v11 = this;
  unsigned __int8 v10 = a2;
  __int16 v9 = a3;
  char v5 = 1;
  otDnsInitTxtEntryIterator((uint64_t)v12, a2, a3);
  ot::Cli::Output::OutputFormat(this, "[");
  while (!otDnsGetNextTxtEntry((uint64_t)v12, (uint64_t)&v6))
  {
    if ((v5 & 1) == 0) {
      ot::Cli::Output::OutputFormat(this, ", ");
    }
    if (v6)
    {
      ot::Cli::Output::OutputFormat(this, "%s", v6);
      if (v7)
      {
        ot::Cli::Output::OutputFormat(this, "=");
        ot::Cli::Output::OutputBytes(this, v7, v8);
      }
    }
    else
    {
      ot::Cli::Output::OutputFormat(this, "[");
      ot::Cli::Output::OutputBytes(this, v7, v8);
      ot::Cli::Output::OutputFormat(this, "]");
    }
    char v5 = 0;
  }
  return ot::Cli::Output::OutputFormat(this, "]");
}

char *ot::Cli::Output::PercentageToString(unsigned __int16 a1, char *a2)
{
  unsigned __int16 v6 = a1;
  char v5 = a2;
  unsigned int v4 = a1;
  ot::StringWriter::StringWriter((ot::StringWriter *)v3, a2, 7);
  unsigned int v4 = 10000 * v4 / 0xFFFF;
  ot::StringWriter::Append((ot::StringWriter *)v3, "%u.%02u", (unsigned __int16)(v4 / 0x64), v4 % 0x64);
  return v5;
}

uint64_t ot::Cli::OutputImplementer::OutputV(ot::Cli::OutputImplementer *this, const char *a2, char *a3)
{
  return (*(uint64_t (**)(void, const char *, char *))this)(*((void *)this + 1), a2, a3);
}

uint64_t ot::Cli::Output::OutputTableHeader(ot::Cli::OutputImplementer **this, unsigned __int8 a2, const char *const *a3, const unsigned __int8 *a4)
{
  for (unsigned __int8 i = 0; i < (int)a2; ++i)
  {
    __s = (char *)a3[i];
    unsigned __int8 v6 = a4[i];
    if (strlen(__s) + 2 > v6) {
      ot::Cli::Output::OutputFormat(this, "|%*.*s", -v6, v6, __s);
    }
    else {
      ot::Cli::Output::OutputFormat(this, "| %*s", 1 - v6, __s);
    }
  }
  ot::Cli::Output::OutputLine(this, "|");
  return ot::Cli::Output::OutputTableSeparator(this, a2, a4);
}

uint64_t ot::Cli::Output::OutputTableSeparator(ot::Cli::OutputImplementer **this, unsigned __int8 a2, const unsigned __int8 *a3)
{
  for (unsigned __int8 i = 0; i < (int)a2; ++i)
  {
    ot::Cli::Output::OutputFormat(this, "+");
    for (unsigned __int8 j = a3[i]; j; --j)
      ot::Cli::Output::OutputFormat(this, "-");
  }
  return ot::Cli::Output::OutputLine(this, "+");
}

uint64_t ot::Cli::UdpExample::UdpExample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 16) = 1;
  memset((void *)(a1 + 24), 0, 0x48uLL);
  return a1;
}

{
  ot::Cli::UdpExample::UdpExample(a1, a2, a3);
  return a1;
}

uint64_t ot::Cli::UdpExample::Process<1665317123ull>(ot::Cli::Output *a1, const char **a2)
{
  unsigned __int8 v11 = a1;
  unsigned __int8 v10 = a2;
  unsigned int v9 = 0;
  unsigned int v6 = 1;
  if (ot::Utils::CmdLineParser::Arg::operator==(a2, "-u"))
  {
    unsigned int v6 = 0;
    ++v10;
  }
  else if (ot::Utils::CmdLineParser::Arg::operator==(v10, "-b"))
  {
    unsigned int v6 = 2;
    ++v10;
  }
  unsigned int v9 = ot::Utils::CmdLineParser::Arg::ParseAsIp6Address(v10, (uint64_t)v7);
  if (!v9)
  {
    unsigned int v9 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v10 + 1, v8, v2);
    if (!v9)
    {
      if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v10 + 2)))
      {
        uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
        return otUdpBind(InstancePtr, (uint64_t)a1 + 24, (uint64_t)v7, v6);
      }
      else
      {
        return 7;
      }
    }
  }
  return v9;
}

uint64_t ot::Cli::UdpExample::Process<32000442710786154ull>(ot::Cli::Output *a1, const char **a2)
{
  signed __int8 v12 = a1;
  unsigned __int8 v11 = a2;
  unsigned int v10 = 0;
  char v7 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  unsigned int v10 = ot::Cli::Interpreter::ParseToIp6Address(InstancePtr, v11, (uint64_t)v8, &v7);
  if (!v10)
  {
    if (v7)
    {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "Connecting to synthesized IPv6 address: ");
      ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)a1, (uint64_t)v8);
    }
    unsigned int v10 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v11 + 1, v9, v3);
    if (!v10)
    {
      if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v11 + 2)))
      {
        uint64_t v4 = ot::Cli::Output::GetInstancePtr(a1);
        return otUdpConnect(v4, (uint64_t)a1 + 24, (uint64_t)v8);
      }
      else
      {
        return 7;
      }
    }
  }
  return v10;
}

uint64_t ot::Cli::UdpExample::Process<428967416664ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  return otUdpClose(InstancePtr, (uint64_t)a1 + 24);
}

uint64_t ot::Cli::UdpExample::Process<1830547446ull>(ot::Cli::Output *a1)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
  if (otUdpIsOpen(InstancePtr, (uint64_t)a1 + 24))
  {
    return 24;
  }
  else
  {
    uint64_t v2 = ot::Cli::Output::GetInstancePtr(a1);
    return otUdpOpen(v2, (uint64_t)a1 + 24, (uint64_t)ot::Cli::UdpExample::HandleUdpReceive, (uint64_t)a1);
  }
}

uint64_t ot::Cli::UdpExample::HandleUdpReceive(ot::Cli::OutputImplementer **a1, uint64_t a2, uint64_t a3)
{
  return ot::Cli::UdpExample::HandleUdpReceive(a1, a2, a3);
}

{
  unsigned __int16 Offset;
  unsigned __int16 v4;
  int Length;
  char v10[1500];

  unsigned __int8 Length = (unsigned __int16)otMessageGetLength(a2);
  __int16 Offset = otMessageGetOffset(a2);
  ot::Cli::Output::OutputFormat(a1, "%d bytes from ", Length - Offset);
  ot::Cli::Output::OutputIp6Address(a1, a3 + 16);
  ot::Cli::Output::OutputFormat(a1, " %d ", *(unsigned __int16 *)(a3 + 34));
  uint64_t v4 = otMessageGetOffset(a2);
  v10[(unsigned __int16)otMessageRead(a2, v4, v10, 0x5DBu)] = 0;
  return ot::Cli::Output::OutputLine(a1, "%s", v10);
}

uint64_t ot::Cli::UdpExample::Process<1665316120ull>(ot::Cli::Output *a1, const char **a2)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  unsigned int v21 = 0;
  uint64_t v20 = 0;
  __int16 v18 = 0;
  LOBYTE(v18) = *((unsigned char *)a1 + 16) & 1;
  HIBYTE(v18) = 1;
  memset(__b, 0, sizeof(__b));
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v22 + 2)))
  {
    char v17 = 0;
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(a1);
    unsigned int v21 = ot::Cli::Interpreter::ParseToIp6Address(InstancePtr, v22, (uint64_t)&__b[16], &v17);
    if (v21) {
      goto LABEL_25;
    }
    if (v17)
    {
      ot::Cli::Output::OutputFormat((ot::Cli::OutputImplementer **)a1, "Sending to synthesized IPv6 address: ");
      ot::Cli::Output::OutputIp6AddressLine((ot::Cli::OutputImplementer **)a1, (uint64_t)&__b[16]);
    }
    unsigned int v21 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v22 + 1, &__b[34], v3);
    if (v21) {
      goto LABEL_25;
    }
    v22 += 2;
  }
  uint64_t v4 = ot::Cli::Output::GetInstancePtr(a1);
  uint64_t v20 = otUdpNewMessage(v4, (uint64_t)&v18);
  if (!v20)
  {
    unsigned int v21 = 3;
    goto LABEL_25;
  }
  if (ot::Utils::CmdLineParser::Arg::operator==(v22, "-s"))
  {
    unsigned __int16 v16 = 0;
    unsigned int v21 = ot::Utils::CmdLineParser::Arg::ParseAsUint16((ot::Utils::CmdLineParser **)v22 + 1, (char *)&v16, v5);
    if (v21) {
      goto LABEL_25;
    }
    unsigned int v21 = ot::Cli::UdpExample::PrepareAutoGeneratedPayload((uint64_t)v20, v16);
    if (v21) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (ot::Utils::CmdLineParser::Arg::operator==(v22, "-x"))
  {
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)(v22 + 1)))
    {
      unsigned int v21 = 7;
      goto LABEL_25;
    }
    unsigned __int8 v14 = v20;
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)(v22 + 1));
    unsigned int v21 = ot::Cli::UdpExample::PrepareHexStringPayload((uint64_t)v14, CString, v7, v8);
    if (!v21)
    {
LABEL_23:
      uint64_t v10 = ot::Cli::Output::GetInstancePtr(a1);
      unsigned int v21 = otUdpSend(v10, (uint64_t)a1 + 24, (uint64_t)v20, (uint64_t)__b);
      if (!v21) {
        uint64_t v20 = 0;
      }
    }
  }
  else
  {
    if (ot::Utils::CmdLineParser::Arg::operator==(v22, "-t")) {
      ++v22;
    }
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v22))
    {
      unsigned int v21 = 7;
      goto LABEL_25;
    }
    signed __int8 v13 = v20;
    signed __int8 v12 = (char *)ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v22);
    unsigned __int16 Length = ot::Utils::CmdLineParser::Arg::GetLength(v22);
    unsigned int v21 = otMessageAppend((uint64_t)v13, v12, Length);
    if (!v21) {
      goto LABEL_23;
    }
  }
LABEL_25:
  if (v20) {
    otMessageFree((uint64_t)v20);
  }
  return v21;
}

uint64_t ot::Cli::UdpExample::PrepareAutoGeneratedPayload(uint64_t a1, __int16 a2)
{
  uint64_t v6 = a1;
  __int16 v5 = a2;
  unsigned int v4 = 0;
  char v3 = 48;
  while (v5)
  {
    unsigned int v4 = otMessageAppend(v6, &v3, 1u);
    if (v4) {
      break;
    }
    switch(v3)
    {
      case '9':
        char v3 = 65;
        break;
      case 'Z':
        char v3 = 97;
        break;
      case 'z':
        char v3 = 48;
        break;
      default:
        ++v3;
        break;
    }
    --v5;
  }
  return v4;
}

uint64_t ot::Cli::UdpExample::PrepareHexStringPayload(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7 = a1;
  *(void *)&v6[6] = a2;
  *(_DWORD *)&void v6[2] = 0;
  *(_WORD *)uint64_t v6 = 0;
  BOOL v5 = 0;
  do
  {
    if (v5) {
      break;
    }
    strcpy(v6, "2");
    *(_DWORD *)&void v6[2] = ot::Utils::CmdLineParser::ParseAsHexStringSegment((const char **)&v6[6], (const char **)v6, v8, a4);
    if (*(_DWORD *)&v6[2])
    {
      if (*(_DWORD *)&v6[2] != 36) {
        break;
      }
    }
    BOOL v5 = *(_DWORD *)&v6[2] == 0;
    *(_DWORD *)&void v6[2] = otMessageAppend(v7, (char *)v8, *(unsigned __int16 *)v6);
  }
  while (!*(_DWORD *)&v6[2]);
  return *(unsigned int *)&v6[2];
}

uint64_t ot::Cli::UdpExample::Process<12648424561679575046ull>(ot::Cli::OutputImplementer **a1, const char **a2)
{
  unsigned int v5 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)) {
    ot::Cli::Output::OutputEnabledDisabledStatus(a1, (_BYTE)a1[2] & 1);
  }
  else {
    return ot::Cli::Interpreter::ParseEnableOrDisable(a2, (const ot::Utils::CmdLineParser::Arg *)(a1 + 2), v2);
  }
  return v5;
}

uint64_t ot::Cli::UdpExample::Process(ot::Cli::UdpExample *this, const char **a2)
{
  char v17 = this;
  unsigned __int16 v16 = a2;
  unsigned int v15 = 35;
  unsigned __int8 v14 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a2)
    || ot::Utils::CmdLineParser::Arg::operator==(v16, "help"))
  {
    ot::Cli::Output::OutputCommandTable<ot::Cli::UdpExample,(unsigned short)6>((uint64_t)this, (const char **)&ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg *)::kCommands);
    if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)v16)) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t CString = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)v16);
    unsigned __int8 v14 = ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>,(unsigned short)6>((ot::BinarySearch *)&CString, (char *)&ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg *)::kCommands, v2, v3, v4, v5);
    if (v14)
    {
      unsigned int v9 = (uint64_t (*)(void *, const char **))*((void *)v14 + 1);
      uint64_t v6 = *((void *)v14 + 2);
      uint64_t v10 = (void *)((char *)this + (v6 >> 1));
      if (v6) {
        return (*(uint64_t (**)(void *, const char **))(*v10 + v9))(v10, v16 + 1);
      }
      else {
        return v9(v10, v16 + 1);
      }
    }
  }
  return v15;
}

uint64_t ot::Cli::Output::OutputCommandTable<ot::Cli::UdpExample,(unsigned short)6>(uint64_t result, const char **a2)
{
  uint64_t v2 = (ot::Cli::OutputImplementer **)result;
  uint64_t v4 = a2;
  uint64_t v3 = a2 + 18;
  while (v4 != v3)
  {
    uint64_t result = ot::Cli::Output::OutputLine(v2, "%s", *v4);
    v4 += 3;
  }
  return result;
}

{
  return ot::Cli::Output::OutputCommandTable<ot::Cli::UdpExample,(unsigned short)6>(result, a2);
}

char *ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>,(unsigned short)6>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)6, 0x18u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>>, a6);
}

{
  return ot::BinarySearch::Find<char *,ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>,(unsigned short)6>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::BinarySearch::Compare<char *,ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>>(const char **a1, const char **a2)
{
  return ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>::Compare(a2, *a1);
}

uint64_t ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>::Compare(const char **a1, const char *a2)
{
  return strcmp(a2, *a1);
}

{
  return ot::Cli::Output::CommandEntry<ot::Cli::UdpExample>::Compare(a1, a2);
}

ot::WakeupTxScheduler *ot::WakeupTxScheduler::WakeupTxScheduler(ot::WakeupTxScheduler *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Time::Time((ot::WakeupTxScheduler *)((char *)this + 8), 0);
  ot::Time::Time((ot::WakeupTxScheduler *)((char *)this + 12), 0);
  ot::TimerMicroIn<ot::Mac::Mac,&ot::Mac::Mac::RequestWakeupFrameTransmission>::TimerMicroIn((ot::WakeupTxScheduler *)((char *)this + 24), a2);
  uint64_t result = this;
  *((unsigned char *)this + 48) &= ~1u;
  *((unsigned char *)this + 49) = 1;
  return result;
}

{
  ot::WakeupTxScheduler::WakeupTxScheduler(this, a2);
  return this;
}

ot::Time *ot::Time::Time(ot::Time *this, int a2)
{
  return this;
}

{
  ot::Time::SetValue(this, a2);
  return this;
}

uint64_t ot::anonymous namespace'::CalcTxRequestAheadTimeUs(ot::_anonymous_namespace_ *this, ot::Instance *a2)
{
  unsigned __int16 v4 = 2000;
  unsigned int BusSpeed = otPlatRadioGetBusSpeed();
  if (BusSpeed) {
    return (unsigned __int16)((BusSpeed + 799999999) / BusSpeed + 2000);
  }
  return v4;
}

ot::TimerMilli *ot::TimerMicroIn<ot::Mac::Mac,&ot::Mac::Mac::RequestWakeupFrameTransmission>::TimerMicroIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMicroIn<ot::Mac::Mac,&ot::Mac::Mac::RequestWakeupFrameTransmission>::HandleTimer);
  return a1;
}

uint64_t ot::WakeupTxScheduler::WakeUpPatternToInterval(ot::WakeupTxScheduler *this, char a2)
{
  if (a2 == 1)
  {
    return 15000;
  }
  else if (a2 == 3 || a2 == 2)
  {
    return 7500;
  }
  else if (a2 == 4)
  {
    return 15000;
  }
  else
  {
    return 7500;
  }
}

uint64_t ot::WakeupTxScheduler::WakeUp(ot::WakeupTxScheduler *this, const ot::Mac::ExtAddress *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v34 = this;
  unsigned __int8 v33 = a2;
  unsigned __int16 v32 = a3;
  unsigned __int8 v31 = a4;
  unsigned int v30 = 0;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"WakeupTxSched", "Wake-up sequence ongoing: %d, %s", a3, a4, a5, a6, a7, a8, *((unsigned char *)this + 48) & 1);
  if (*((unsigned char *)this + 48))
  {
    return 13;
  }
  else
  {
    *(void *)this = *(void *)v33;
    int Now = ot::TimerMicro::GetNow(v8);
    int v29 = Now;
    int v27 = ot::Time::operator+(&v29, *((unsigned __int16 *)this + 8));
    *((_DWORD *)this + 2) = v27;
    *((_WORD *)this + 9) = ot::WakeupTxScheduler::WakeUpPatternToInterval(this, v31);
    int v25 = ot::Time::operator+((_DWORD *)this + 2, 1000 * v32);
    int v26 = ot::Time::operator+(&v25, *((unsigned __int16 *)this + 9));
    *((_DWORD *)this + 3) = v26;
    *((unsigned char *)this + 48) = *((unsigned char *)this + 48) & 0xFE | 1;
    ot::Mac::ExtAddress::ToString(v33, (ot::StringWriter *)v35);
    char v9 = ot::String<(unsigned short)17>::AsCString((uint64_t)v35);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"WakeupTxSched", "Scheduled wake-up sequence to %s", v10, v11, v12, v13, v14, v15, v9);
    unsigned __int16 v16 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::SetWakeupConfiguration(v16, v32, v31);
    IgnoreError();
    ot::WakeupTxScheduler::ScheduleNext(this, 1, v17, v18, v19, v20, v21, v22);
  }
  return v30;
}

uint64_t ot::TimerMicro::GetNow(ot::TimerMicro *this)
{
  int Now = otPlatAlarmMicroGetNow();
  ot::Time::Time((ot::Time *)&v3, Now);
  return v3;
}

{
  return ot::TimerMicro::GetNow(this);
}

uint64_t ot::Time::operator+(_DWORD *a1, int a2)
{
  ot::Time::Time((ot::Time *)&v3, *a1 + a2);
  return v3;
}

{
  return ot::Time::operator+(a1, a2);
}

uint64_t ot::String<(unsigned short)17>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)17>::AsCString(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Radio>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(a1);
}

uint64_t ot::Radio::SetWakeupConfiguration(ot::Radio *this, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetWakeupConfiguration((uint64_t)InstancePtr, a2, a3);
}

{
  return ot::Radio::SetWakeupConfiguration(this, a2, a3);
}

void ot::WakeupTxScheduler::ScheduleNext(ot::WakeupTxScheduler *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    int v10 = ot::Time::operator-((_DWORD *)this + 2, *((unsigned __int16 *)this + 8));
    ot::TimerMicro::FireAt((ot::WakeupTxScheduler *)((char *)this + 24), v10);
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"WakeupTxSched", "Started wake-up sequence", a3, a4, a5, a6, a7, a8, v8);
    *((unsigned char *)this + 48) &= ~1u;
  }
}

ot::Mac::Frame *ot::WakeupTxScheduler::PrepareWakeupFrame(ot::WakeupTxScheduler *this, ot::Mac::TxFrames *a2)
{
  uint64_t v38 = this;
  __int16 v37 = a2;
  TxFrame = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v35);
  ot::Mac::Address::Address((ot::Mac::Address *)v34);
  unsigned int v32 = 0;
  unsigned __int8 v31 = 0;
  if ((*((unsigned char *)this + 48) & 1) == 1)
  {
    ot::Mac::Address::SetExtended((uint64_t)v35, this);
    uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ExtAddress = (void *)ot::Mac::Mac::GetExtAddress(v2);
    ot::Mac::Address::SetExtended((uint64_t)v34, ExtAddress);
    Instance = (ot::_anonymous_namespace_ *)ot::InstanceLocator::GetInstance(this);
    int v29 = (int)RadioNow;
    int Now = ot::TimerMicro::GetNow(RadioNow);
    int v7 = ot::Time::operator-((_DWORD *)this + 2, &Now);
    int v30 = ot::Time::operator+(&v29, v7);
    int v33 = v30;
    TxFrame = (ot::Mac::Frame *)ot::Mac::TxFrames::GetTxFrame(v37);
    int v26 = TxFrame;
    char v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v8);
    if (ot::Mac::TxFrame::GenerateWakeupFrame(v26, PanId, (const ot::Mac::Address *)v35, (const ot::Mac::Address *)v34))
    {
      return 0;
    }
    else
    {
      ot::Mac::TxFrame::SetTxDelayBaseTime((uint64_t)TxFrame, 0);
      int v25 = TxFrame;
      int Value = ot::Time::GetValue((ot::Time *)&v33);
      ot::Mac::TxFrame::SetTxDelay((uint64_t)v25, Value);
      ot::Mac::TxFrame::SetCsmaCaEnabled((uint64_t)TxFrame, 0);
      ot::Mac::TxFrame::SetMaxCsmaBackoffs((uint64_t)TxFrame, 0);
      ot::Mac::TxFrame::SetMaxFrameRetries((uint64_t)TxFrame, 0);
      unsigned int v32 = (*((unsigned __int16 *)this + 9) - 4224) / 2;
      v32 += *((unsigned __int16 *)this + 9);
      ot::Mac::Frame::GetRendezvousTimeIe(TxFrame);
      ot::Mac::RendezvousTimeIe::SetRendezvousTime(v11, v32 / 0xA0, v12);
      ot::Mac::Frame::GetConnectionIe(TxFrame);
      unsigned __int8 v31 = v13;
      uint64_t v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      char v15 = ot::Mle::Mle::WedWakeUpPattern(v14);
      char v16 = 2;
      if (v15 == 2) {
        char v16 = 1;
      }
      *((unsigned char *)this + 49) = v16;
      ot::Mac::ConnectionIe::SetRetryInterval((uint64_t)v31, *((unsigned char *)this + 49));
      ot::Mac::ConnectionIe::SetRetryCount((uint64_t)v31, 12);
      ot::WakeupTxScheduler::ScheduleNext(this, 0, v17, v18, v19, v20, v21, v22);
      uint64_t v23 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      ot::Mle::Mle::HandleCslWakeupTxInitiatedStartAttachTimer(v23);
    }
  }
  return TxFrame;
}

ot::Mac::Address *ot::Mac::Address::Address(ot::Mac::Address *this)
{
  return this;
}

uint64_t ot::Mac::Address::SetExtended(uint64_t result, void *a2)
{
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = 2;
  return result;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::Mac>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
}

uint64_t ot::Mac::Mac::GetExtAddress(ot::Mac::Mac *this)
{
  return ot::Mac::Links::GetExtAddress((ot::Mac::Mac *)((char *)this + 56));
}

{
  return ot::Mac::Mac::GetExtAddress(this);
}

uint64_t ot::anonymous namespace'::GetRadioNow(ot::_anonymous_namespace_ *this, ot::Instance *a2)
{
  int Now = otPlatRadioGetNow();
  ot::Time::Time((ot::Time *)&v4, Now);
  return v4;
}

uint64_t ot::Time::operator-(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

{
  return ot::Time::operator-(a1, a2);
}

uint64_t ot::Mac::TxFrames::GetTxFrame(ot::Mac::TxFrames *this)
{
  return *(void *)this;
}

{
  return ot::Mac::TxFrames::GetTxFrame(this);
}

uint64_t ot::Mac::Mac::GetPanId(ot::Mac::Mac *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Mac::Mac::GetPanId(this);
}

uint64_t ot::Mac::TxFrame::SetTxDelayBaseTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetTxDelayBaseTime(this, a2);
}

uint64_t ot::Mac::TxFrame::SetTxDelay(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetTxDelay(this, a2);
}

uint64_t ot::Time::GetValue(ot::Time *this)
{
  return *(unsigned int *)this;
}

{
  return ot::Time::GetValue(this);
}

uint64_t ot::Mac::TxFrame::SetCsmaCaEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 45) = *(unsigned char *)(this + 45) & 0xFB | (4 * (a2 & 1));
  return this;
}

{
  return ot::Mac::TxFrame::SetCsmaCaEnabled(this, a2);
}

uint64_t ot::Mac::TxFrame::SetMaxCsmaBackoffs(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetMaxCsmaBackoffs(this, a2);
}

uint64_t ot::Mac::TxFrame::SetMaxFrameRetries(uint64_t this, char a2)
{
  *(unsigned char *)(this + 41) = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetMaxFrameRetries(this, a2);
}

void ot::Mac::Frame::GetRendezvousTimeIe(ot::Mac::Frame *this)
{
  ot::AsConst<ot::Mac::Frame>();
  ot::Mac::Frame::GetRendezvousTimeIe(v1);
  ot::AsNonConst<ot::Mac::RendezvousTimeIe>();
}

{
  ot::Mac::Frame::GetRendezvousTimeIe(this);
}

uint64_t ot::Mac::RendezvousTimeIe::SetRendezvousTime(ot::Mac::RendezvousTimeIe *this, unsigned __int16 a2, unsigned __int8 *a3)
{
  return ot::Encoding::LittleEndian::WriteUint16(a2, this, a3);
}

{
  return ot::Mac::RendezvousTimeIe::SetRendezvousTime(this, a2, a3);
}

void ot::Mac::Frame::GetConnectionIe(ot::Mac::Frame *this)
{
  ot::AsConst<ot::Mac::Frame>();
  ot::Mac::Frame::GetConnectionIe(v1);
  ot::AsNonConst<ot::Mac::ConnectionIe>();
}

{
  ot::Mac::Frame::GetConnectionIe(this);
}

uint64_t ot::Mac::ConnectionIe::SetRetryInterval(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4) = *(unsigned char *)(this + 4) & 0xCF | (16 * a2);
  return this;
}

{
  return ot::Mac::ConnectionIe::SetRetryInterval(this, a2);
}

uint64_t ot::Mac::ConnectionIe::SetRetryCount(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4) = a2 | *(unsigned char *)(this + 4) & 0xF0;
  return this;
}

{
  return ot::Mac::ConnectionIe::SetRetryCount(this, a2);
}

uint64_t ot::Time::operator-(_DWORD *a1, int a2)
{
  ot::Time::Time((ot::Time *)&v3, *a1 - a2);
  return v3;
}

{
  return ot::Time::operator-(a1, a2);
}

uint64_t ot::WakeupTxScheduler::Stop(ot::WakeupTxScheduler *this)
{
  *((unsigned char *)this + 48) &= ~1u;
  return ot::TimerMicro::Stop((ot::WakeupTxScheduler *)((char *)this + 24));
}

_DWORD *ot::Time::SetValue(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  return ot::Time::SetValue(this, a2);
}

void *ot::Radio::GetInstancePtr(ot::Radio *this)
{
  return ot::InstanceLocator::GetInstance(this);
}

{
  return ot::Radio::GetInstancePtr(this);
}

uint64_t ot::Mac::Address::Address(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t ot::Mac::Links::GetExtAddress(ot::Mac::Links *this)
{
  return ot::Mac::SubMac::GetExtAddress((ot::Mac::Links *)((char *)this + 8));
}

{
  return ot::Mac::Links::GetExtAddress(this);
}

uint64_t ot::Mac::SubMac::GetExtAddress(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::Mac::SubMac::GetExtAddress(this);
}

uint64_t ot::Mac::Frame::GetRendezvousTimeIe(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetHeaderIe(this, 0x1Du) + 2;
}

{
  return ot::Mac::Frame::GetRendezvousTimeIe(this);
}

uint64_t ot::Mac::Frame::GetConnectionIe(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetThreadIe(this, 1u) + 2;
}

{
  return ot::Mac::Frame::GetConnectionIe(this);
}

uint64_t ot::TimerMicroIn<ot::Mac::Mac,&ot::Mac::Mac::RequestWakeupFrameTransmission>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mac::Mac::RequestWakeupFrameTransmission)(v2);
}

uint64_t ot::Instance::Get<ot::Radio>(uint64_t a1)
{
  return a1 + 34;
}

{
  return ot::Instance::Get<ot::Radio>(a1);
}

uint64_t ot::Instance::Get<ot::Mac::Mac>(uint64_t a1)
{
  return a1 + 88168;
}

{
  return ot::Instance::Get<ot::Mac::Mac>(a1);
}

const char *ot::Utils::LookupTable::Find(ot::Utils::LookupTable *this, const char *a2, const void *a3, unsigned __int16 a4, uint64_t (*a5)(const char *), const char *(*a6)(const void *))
{
  unsigned __int16 v11 = 0;
  unsigned __int16 v10 = (unsigned __int16)a3;
  while (v11 < (int)v10)
  {
    unsigned __int16 v9 = (v11 + v10) / 2;
    uint64_t v12 = &a2[a4 * v9];
    uint64_t v6 = (const char *)a5(v12);
    int v8 = strcmp((const char *)this, v6);
    if (!v8) {
      return v12;
    }
    if (v8 <= 0) {
      unsigned __int16 v10 = (v11 + v10) / 2;
    }
    else {
      unsigned __int16 v11 = v9 + 1;
    }
  }
  return 0;
}

uint64_t otBackboneRouterGetPrimary(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("otBackboneRouterGetPrimary", "backbone_router_api.cpp", 47, "(aConfig) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int v3 = (ot::BackboneRouter::Leader *)ot::Instance::Get<ot::BackboneRouter::Leader>(v2);
  return ot::BackboneRouter::Leader::GetConfig(v3, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otInstance>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t ot::Instance::Get<ot::BackboneRouter::Leader>(uint64_t a1)
{
  return a1 + 145608;
}

{
  return ot::Instance::Get<ot::BackboneRouter::Leader>(a1);
}

void otBackboneRouterSetEnabled(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int v3 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v2);
  ot::BackboneRouter::Local::SetEnabled(v3, v4 & 1);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::Local>(uint64_t a1)
{
  return a1 + 145640;
}

{
  return ot::Instance::Get<ot::BackboneRouter::Local>(a1);
}

uint64_t otBackboneRouterGetState(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  unsigned __int8 State = ot::BackboneRouter::Local::GetState(v2);
  return ot::MapEnum<ot::BackboneRouter::Local::State>(State);
}

uint64_t ot::MapEnum<ot::BackboneRouter::Local::State>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::BackboneRouter::Local::State>(result);
}

uint64_t ot::BackboneRouter::Local::GetState(ot::BackboneRouter::Local *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::BackboneRouter::Local::GetState(this);
}

uint64_t otBackboneRouterGetConfig(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("otBackboneRouterGetConfig", "backbone_router_ftd_api.cpp", 58, "(aConfig) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::BackboneRouter::Local>(v2);
  return ot::BackboneRouter::Local::GetConfig(v3, a2);
}

uint64_t otBackboneRouterSetConfig(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("otBackboneRouterSetConfig", "backbone_router_ftd_api.cpp", 65, "(aConfig) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::BackboneRouter::Local>(v2);
  return ot::BackboneRouter::Local::SetConfig(v3, a2);
}

uint64_t otBackboneRouterRegister(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  return ot::BackboneRouter::Local::AddService(v2, 1);
}

uint64_t otBackboneRouterGetRegistrationJitter(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  return ot::BackboneRouter::Local::GetRegistrationJitter(v2);
}

uint64_t ot::BackboneRouter::Local::GetRegistrationJitter(ot::BackboneRouter::Local *this)
{
  return *((unsigned __int8 *)this + 11);
}

{
  return ot::BackboneRouter::Local::GetRegistrationJitter(this);
}

uint64_t otBackboneRouterSetRegistrationJitter(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::BackboneRouter::Local>(v2);
  return ot::BackboneRouter::Local::SetRegistrationJitter(v3, a2);
}

uint64_t ot::BackboneRouter::Local::SetRegistrationJitter(uint64_t this, char a2)
{
  *(unsigned char *)(this + 11) = a2;
  return this;
}

{
  return ot::BackboneRouter::Local::SetRegistrationJitter(this, a2);
}

uint64_t otBackboneRouterGetDomainPrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int v5 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v2);
  uint64_t v3 = (ot::NetworkData::OnMeshPrefixConfig *)ot::AsCoreType<otBorderRouterConfig>(a2);
  return ot::BackboneRouter::Local::GetDomainPrefix(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otBorderRouterConfig>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

void *otBackboneRouterSetDomainPrefixCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::BackboneRouter::Local>(v3);
  return ot::BackboneRouter::Local::SetDomainPrefixCallback(v4, a2, a3);
}

void *ot::BackboneRouter::Local::SetDomainPrefixCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::Set((void *)(a1 + 104), a2, a3);
}

{
  return ot::BackboneRouter::Local::SetDomainPrefixCallback(a1, a2, a3);
}

void *otBackboneRouterSetNdProxyCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::BackboneRouter::NdProxyTable>(v3);
  return ot::BackboneRouter::NdProxyTable::SetCallback(v4, a2, a3);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::NdProxyTable>(uint64_t a1)
{
  return ot::BackboneRouter::Manager::GetNdProxyTable((ot::BackboneRouter::Manager *)(a1 + 145768));
}

{
  return ot::Instance::Get<ot::BackboneRouter::NdProxyTable>(a1);
}

void *ot::BackboneRouter::NdProxyTable::SetCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*)>::Set((void *)(a1 + 6000), a2, a3);
}

{
  return ot::BackboneRouter::NdProxyTable::SetCallback(a1, a2, a3);
}

uint64_t otBackboneRouterGetNdProxyInfo(uint64_t a1, ot::Ip6::Address *a2, uint64_t a3)
{
  if (!a3) {
    __assert_rtn("otBackboneRouterGetNdProxyInfo", "backbone_router_ftd_api.cpp", 109, "(aNdProxyInfo) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::BackboneRouter::NdProxyTable>(v3);
  return ot::BackboneRouter::NdProxyTable::GetInfo(v4, a2, a3);
}

uint64_t otBackboneRouterSetMulticastListenerCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::BackboneRouter::MulticastListenersTable>(v3);
  return ot::BackboneRouter::MulticastListenersTable::SetCallback(v4, a2, a3);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::MulticastListenersTable>(uint64_t a1)
{
  return ot::BackboneRouter::Manager::GetMulticastListenersTable((ot::BackboneRouter::Manager *)(a1 + 145768));
}

{
  return ot::Instance::Get<ot::BackboneRouter::MulticastListenersTable>(a1);
}

uint64_t otBackboneRouterMulticastListenerGetNext(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otBackboneRouterMulticastListenerGetNext", "backbone_router_ftd_api.cpp", 128, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otBackboneRouterMulticastListenerGetNext", "backbone_router_ftd_api.cpp", 129, "(aListenerInfo) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (unsigned __int16 *)ot::Instance::Get<ot::BackboneRouter::MulticastListenersTable>(v3);
  return ot::BackboneRouter::MulticastListenersTable::GetNext(v4, a2, a3);
}

void *ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*)>::Set(result, a2, a3);
}

uint64_t ot::BackboneRouter::Manager::GetMulticastListenersTable(ot::BackboneRouter::Manager *this)
{
  return (uint64_t)this + 6032;
}

{
  return ot::BackboneRouter::Manager::GetMulticastListenersTable(this);
}

uint64_t otBorderAgentGetId(uint64_t a1, unsigned __int8 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::MeshCoP::BorderAgent *)ot::Instance::Get<ot::MeshCoP::BorderAgent>(v3);
  return ot::MeshCoP::BorderAgent::GetId(v4, a2, a3);
}

uint64_t ot::Instance::Get<ot::MeshCoP::BorderAgent>(uint64_t a1)
{
  return a1 + 143432;
}

{
  return ot::Instance::Get<ot::MeshCoP::BorderAgent>(a1);
}

uint64_t otBorderAgentGetState(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::BorderAgent *)ot::Instance::Get<ot::MeshCoP::BorderAgent>(v1);
  unsigned __int8 State = ot::MeshCoP::BorderAgent::GetState(v2);
  return ot::MapEnum<ot::MeshCoP::BorderAgent::State>(State);
}

uint64_t ot::MapEnum<ot::MeshCoP::BorderAgent::State>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::MeshCoP::BorderAgent::State>(result);
}

uint64_t ot::MeshCoP::BorderAgent::GetState(ot::MeshCoP::BorderAgent *this)
{
  return *((unsigned __int8 *)this + 136);
}

{
  return ot::MeshCoP::BorderAgent::GetState(this);
}

uint64_t otBorderAgentGetUdpPort(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::BorderAgent *)ot::Instance::Get<ot::MeshCoP::BorderAgent>(v1);
  return (unsigned __int16)ot::MeshCoP::BorderAgent::GetUdpPort(v2);
}

uint64_t otBorderRouterGetNetData(uint64_t a1, char a2, unsigned __int8 *a3, char *a4)
{
  char v9 = a2 & 1;
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  unsigned int v5 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkData::Local>(v4);
  return ot::NetworkData::NetworkData::CopyNetworkData(v5, (v9 & 1) != 0, a3, a4);
}

uint64_t ot::Instance::Get<ot::NetworkData::Local>(uint64_t a1)
{
  return a1 + 142680;
}

{
  return ot::Instance::Get<ot::NetworkData::Local>(a1);
}

uint64_t otBorderRouterAddOnMeshPrefix(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 17) & 0x400) != 0)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    int v8 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v2);
    uint64_t v3 = (const ot::NetworkData::OnMeshPrefixConfig *)ot::AsCoreType<otBorderRouterConfig>(a2);
    return ot::BackboneRouter::Local::SetDomainPrefix(v8, v3);
  }
  else
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    int v7 = (ot::NetworkData::Local *)ot::Instance::Get<ot::NetworkData::Local>(v4);
    unsigned int v5 = (const ot::NetworkData::OnMeshPrefixConfig *)ot::AsCoreType<otBorderRouterConfig>(a2);
    return ot::NetworkData::Local::AddOnMeshPrefix(v7, v5);
  }
}

uint64_t otBorderRouterRemoveOnMeshPrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  int v8 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v2);
  uint64_t v3 = (const ot::Ip6::Prefix *)ot::AsCoreType<otIp6Prefix>(a2);
  unsigned int v9 = ot::BackboneRouter::Local::RemoveDomainPrefix(v8, v3);
  if (v9 == 23)
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    int v7 = (ot::NetworkData::Local *)ot::Instance::Get<ot::NetworkData::Local>(v4);
    unsigned int v5 = (const ot::Ip6::Prefix *)ot::AsCoreType<otIp6Prefix>(a2);
    return ot::NetworkData::Local::RemoveOnMeshPrefix(v7, v5);
  }
  return v9;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp6Prefix>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t ot::NetworkData::Local::RemoveOnMeshPrefix(ot::NetworkData::Local *this, const ot::Ip6::Prefix *a2)
{
  return ot::NetworkData::Local::RemovePrefix(this, a2);
}

{
  return ot::NetworkData::Local::RemoveOnMeshPrefix(this, a2);
}

uint64_t otBorderRouterGetNextOnMeshPrefix(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otBorderRouterGetNextOnMeshPrefix", "border_router_api.cpp", 90, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Local>(v3);
  uint64_t v4 = (ot::NetworkData::OnMeshPrefixConfig *)ot::AsCoreType<otBorderRouterConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v6, a2, v4);
}

uint64_t otBorderRouterAddRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int v5 = (ot::NetworkData::Local *)ot::Instance::Get<ot::NetworkData::Local>(v2);
  uint64_t v3 = (const ot::NetworkData::ExternalRouteConfig *)ot::AsCoreType<otExternalRouteConfig>(a2);
  return ot::NetworkData::Local::AddHasRoutePrefix(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otExternalRouteConfig>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otBorderRouterRemoveRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int v5 = (ot::NetworkData::Local *)ot::Instance::Get<ot::NetworkData::Local>(v2);
  uint64_t v3 = (const ot::Ip6::Prefix *)ot::AsCoreType<otIp6Prefix>(a2);
  return ot::NetworkData::Local::RemoveHasRoutePrefix(v5, v3);
}

uint64_t ot::NetworkData::Local::RemoveHasRoutePrefix(ot::NetworkData::Local *this, const ot::Ip6::Prefix *a2)
{
  return ot::NetworkData::Local::RemovePrefix(this, a2);
}

{
  return ot::NetworkData::Local::RemoveHasRoutePrefix(this, a2);
}

uint64_t otBorderRouterGetNextRoute(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otBorderRouterGetNextRoute", "border_router_api.cpp", 109, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Local>(v3);
  uint64_t v4 = (ot::NetworkData::ExternalRouteConfig *)ot::AsCoreType<otExternalRouteConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextExternalRoute(v6, a2, v4);
}

uint64_t otBorderRouterRegister(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::Notifier *)ot::Instance::Get<ot::NetworkData::Notifier>(v1);
  ot::NetworkData::Notifier::HandleServerDataUpdated(v2);
  return 0;
}

uint64_t ot::Instance::Get<ot::NetworkData::Notifier>(uint64_t a1)
{
  return a1 + 143312;
}

{
  return ot::Instance::Get<ot::NetworkData::Notifier>(a1);
}

void *otBorderRouterSetNetDataFullCallback(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::NetworkData::Notifier *)ot::Instance::Get<ot::NetworkData::Notifier>(v3);
  return ot::NetworkData::Notifier::SetNetDataFullCallback(v4, a2, a3);
}

void otChannelManagerRequestChannelChange(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v2);
  ot::Utils::ChannelManager::RequestChannelChange(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t ot::Instance::Get<ot::Utils::ChannelManager>(uint64_t a1)
{
  return a1 + 155872;
}

{
  return ot::Instance::Get<ot::Utils::ChannelManager>(a1);
}

uint64_t otChannelManagerGetRequestedChannel(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return ot::Utils::ChannelManager::GetRequestedChannel(v2);
}

uint64_t ot::Utils::ChannelManager::GetRequestedChannel(ot::Utils::ChannelManager *this)
{
  return *((unsigned __int8 *)this + 10);
}

{
  return ot::Utils::ChannelManager::GetRequestedChannel(this);
}

uint64_t otChannelManagerGetDelay(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return (unsigned __int16)ot::Utils::ChannelManager::GetDelay(v2);
}

uint64_t ot::Utils::ChannelManager::GetDelay(ot::Utils::ChannelManager *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Utils::ChannelManager::GetDelay(this);
}

uint64_t otChannelManagerSetDelay(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v2);
  return ot::Utils::ChannelManager::SetDelay(v3, a2);
}

void otChannelManagerSetAutoChannelSelectionEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  ot::Utils::ChannelManager::SetAutoChannelSelectionEnabled(v2);
}

uint64_t otChannelManagerGetAutoChannelSelectionEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return ot::Utils::ChannelManager::GetAutoChannelSelectionEnabled(v2) & 1;
}

uint64_t ot::Utils::ChannelManager::GetAutoChannelSelectionEnabled(ot::Utils::ChannelManager *this)
{
  return *((unsigned char *)this + 44) & 1;
}

{
  return ot::Utils::ChannelManager::GetAutoChannelSelectionEnabled(this);
}

uint64_t otChannelManagerSetAutoChannelSelectionInterval(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v2);
  return ot::Utils::ChannelManager::SetAutoChannelSelectionInterval(v3, a2);
}

uint64_t otChannelManagerGetAutoChannelSelectionInterval(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return ot::Utils::ChannelManager::GetAutoChannelSelectionInterval(v2);
}

uint64_t ot::Utils::ChannelManager::GetAutoChannelSelectionInterval(ot::Utils::ChannelManager *this)
{
  return *((unsigned int *)this + 10);
}

{
  return ot::Utils::ChannelManager::GetAutoChannelSelectionInterval(this);
}

uint64_t otChannelManagerGetSupportedChannels(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return ot::Utils::ChannelManager::GetSupportedChannels(v2);
}

uint64_t ot::Utils::ChannelManager::GetSupportedChannels(ot::Utils::ChannelManager *this)
{
  return ot::Mac::ChannelMask::GetMask(this);
}

{
  return ot::Utils::ChannelManager::GetSupportedChannels(this);
}

void otChannelManagerSetSupportedChannels(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v2);
  ot::Utils::ChannelManager::SetSupportedChannels(v3, a2);
}

uint64_t otChannelManagerGetFavoredChannels(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return ot::Utils::ChannelManager::GetFavoredChannels(v2);
}

uint64_t ot::Utils::ChannelManager::GetFavoredChannels(ot::Utils::ChannelManager *this)
{
  return ot::Mac::ChannelMask::GetMask((ot::Utils::ChannelManager *)((char *)this + 4));
}

{
  return ot::Utils::ChannelManager::GetFavoredChannels(this);
}

void otChannelManagerSetFavoredChannels(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v2);
  ot::Utils::ChannelManager::SetFavoredChannels(v3, a2);
}

uint64_t otChannelManagerGetCcaFailureRateThreshold(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v1);
  return (unsigned __int16)ot::Utils::ChannelManager::GetCcaFailureRateThreshold(v2);
}

uint64_t ot::Utils::ChannelManager::GetCcaFailureRateThreshold(ot::Utils::ChannelManager *this)
{
  return *((unsigned __int16 *)this + 23);
}

{
  return ot::Utils::ChannelManager::GetCcaFailureRateThreshold(this);
}

void otChannelManagerSetCcaFailureRateThreshold(uint64_t a1, __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Utils::ChannelManager *)ot::Instance::Get<ot::Utils::ChannelManager>(v2);
  ot::Utils::ChannelManager::SetCcaFailureRateThreshold(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t ot::Mac::ChannelMask::GetMask(ot::Mac::ChannelMask *this)
{
  return *(unsigned int *)this;
}

{
  return ot::Mac::ChannelMask::GetMask(this);
}

uint64_t ot::DataUtils::MatchBytes(ot::DataUtils *this, const unsigned __int8 *a2, const unsigned __int8 *a3, uint64_t a4, BOOL (*a5)(unsigned __int8, unsigned __int8))
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  __int16 v11 = (__int16)a3;
  *(void *)&v10[1] = a4;
  v10[0] = 1;
  if (a4)
  {
    while (v11--)
    {
      uint64_t v6 = v13;
      uint64_t v13 = (ot::DataUtils *)((char *)v13 + 1);
      uint64_t v7 = *(unsigned __int8 *)v6;
      uint64_t v8 = v12++;
      if (((*(uint64_t (**)(uint64_t, void))&v10[1])(v7, *v8) & 1) == 0)
      {
        v10[0] = 0;
        return v10[0] & 1;
      }
    }
  }
  else
  {
    *(void *)unsigned __int16 v10 = memcmp(this, a2, (unsigned __int16)a3) == 0;
  }
  return v10[0] & 1;
}

uint64_t otChildSupervisionGetInterval(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::SupervisionListener *)ot::Instance::Get<ot::SupervisionListener>(v1);
  return (unsigned __int16)ot::SupervisionListener::GetInterval(v2);
}

uint64_t ot::Instance::Get<ot::SupervisionListener>(uint64_t a1)
{
  return a1 + 153728;
}

{
  return ot::Instance::Get<ot::SupervisionListener>(a1);
}

uint64_t ot::SupervisionListener::GetInterval(ot::SupervisionListener *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return ot::SupervisionListener::GetInterval(this);
}

void otChildSupervisionSetInterval(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::SupervisionListener *)ot::Instance::Get<ot::SupervisionListener>(v2);
  ot::SupervisionListener::SetInterval(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t otChildSupervisionGetCheckTimeout(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::SupervisionListener *)ot::Instance::Get<ot::SupervisionListener>(v1);
  return (unsigned __int16)ot::SupervisionListener::GetTimeout(v2);
}

uint64_t ot::SupervisionListener::GetTimeout(ot::SupervisionListener *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::SupervisionListener::GetTimeout(this);
}

ot::SupervisionListener *otChildSupervisionSetCheckTimeout(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::SupervisionListener *)ot::Instance::Get<ot::SupervisionListener>(v2);
  return ot::SupervisionListener::SetTimeout(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t otChildSupervisionGetCheckFailureCounter(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::SupervisionListener *)ot::Instance::Get<ot::SupervisionListener>(v1);
  return (unsigned __int16)ot::SupervisionListener::GetCounter(v2);
}

uint64_t ot::SupervisionListener::GetCounter(ot::SupervisionListener *this)
{
  return *((unsigned __int16 *)this + 2);
}

{
  return ot::SupervisionListener::GetCounter(this);
}

uint64_t otChildSupervisionResetCheckFailureCounter(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::SupervisionListener>(v1);
  return ot::SupervisionListener::ResetCounter(v2);
}

uint64_t ot::SupervisionListener::ResetCounter(uint64_t this)
{
  *(_WORD *)(this + 4) = 0;
  return this;
}

{
  return ot::SupervisionListener::ResetCounter(this);
}

ot::Message *otCoapNewMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  ApplicationCoap = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(v2);
  uint64_t v3 = (const ot::Message::Settings *)ot::Message::Settings::From(a2);
  return ot::Coap::CoapBase::NewMessage(ApplicationCoap, v3);
}

uint64_t ot::Instance::GetApplicationCoap(ot::Instance *this)
{
  return (uint64_t)this + 155512;
}

{
  return ot::Instance::GetApplicationCoap(this);
}

void otCoapMessageInit(uint64_t a1, unsigned int a2, unsigned int a3)
{
  ot::AsCoapMessage();
  uint64_t v6 = v3;
  char v5 = ot::MapEnum<otCoapType>(a2);
  char v4 = ot::MapEnum<otCoapCode>(a3);
  ot::Coap::Message::Init(v6, v5, v4);
}

uint64_t ot::MapEnum<otCoapType>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otCoapType>(result);
}

uint64_t ot::MapEnum<otCoapCode>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otCoapCode>(result);
}

uint64_t otCoapMessageInitResponse(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  ot::AsCoapMessage();
  __int16 v11 = v4;
  ot::AsCoapMessage();
  unsigned __int16 v10 = v5;
  char v9 = ot::MapEnum<otCoapType>(a3);
  char v6 = ot::MapEnum<otCoapCode>(a4);
  ot::Coap::Message::Init(v11, v9, v6);
  unsigned __int16 MessageId = ot::Coap::Message::GetMessageId(v10);
  ot::Coap::Message::SetMessageId(v11, MessageId);
  return ot::Coap::Message::SetTokenFromMessage(v11, v10);
}

uint64_t ot::Coap::Message::SetMessageId(ot::Coap::Message *this, unsigned __int16 a2)
{
  unsigned int v6 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  ot::Coap::Message::GetHelpData(this);
  uint64_t v3 = v2;
  uint64_t result = v6;
  *(_WORD *)(v3 + 2) = v6;
  return result;
}

{
  return ot::Coap::Message::SetMessageId(this, a2);
}

uint64_t ot::Coap::Message::GetMessageId(ot::Coap::Message *this)
{
  unint64_t HelpData = ot::Coap::Message::GetHelpData(this);
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)(HelpData + 2));
}

{
  return ot::Coap::Message::GetMessageId(this);
}

uint64_t otCoapMessageSetToken(uint64_t a1, const unsigned __int8 *a2, unsigned __int8 a3)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::SetToken(v3, a2, a3);
}

void otCoapMessageGenerateToken(uint64_t a1, unsigned __int8 a2)
{
  ot::AsCoapMessage();
  ot::Coap::Message::GenerateRandomToken(v2, a2);
  IgnoreError();
}

uint64_t otCoapMessageAppendContentFormatOption(uint64_t a1, unsigned int a2)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendContentFormatOption(v2, a2);
}

uint64_t ot::Coap::Message::AppendContentFormatOption(ot::Coap::Message *a1, unsigned int a2)
{
  return ot::Coap::Message::AppendUintOption(a1, 0xCu, (unsigned __int8 *)a2);
}

{
  return ot::Coap::Message::AppendContentFormatOption(a1, a2);
}

uint64_t otCoapMessageAppendOption(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, char *a4)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendOption(v4, a2, a3, a4);
}

uint64_t otCoapMessageAppendUintOption(uint64_t a1, unsigned __int16 a2, unsigned int a3)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendUintOption(v3, a2, (unsigned __int8 *)a3);
}

uint64_t otCoapMessageAppendObserveOption(uint64_t a1, int a2)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendObserveOption(v2, a2);
}

uint64_t ot::Coap::Message::AppendObserveOption(ot::Coap::Message *this, int a2)
{
  return ot::Coap::Message::AppendUintOption(this, 6u, (unsigned __int8 *)(a2 & 0xFFFFFF));
}

{
  return ot::Coap::Message::AppendObserveOption(this, a2);
}

uint64_t otCoapMessageAppendUriPathOptions(uint64_t a1, ot *a2)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendUriPathOptions(v2, a2);
}

uint64_t otCoapBlockSizeFromExponent(char a1)
{
  return (unsigned __int16)(1 << (a1 + 4));
}

uint64_t otCoapMessageAppendBlock2Option(uint64_t a1, unsigned int a2, char a3, int a4)
{
  char v7 = a3 & 1;
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendBlockOption(v4, 2, a2, v7 & 1, a4);
}

uint64_t otCoapMessageAppendBlock1Option(uint64_t a1, unsigned int a2, char a3, int a4)
{
  char v7 = a3 & 1;
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendBlockOption(v4, 1, a2, v7 & 1, a4);
}

uint64_t otCoapMessageAppendProxyUriOption(uint64_t a1, char *a2)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendProxyUriOption(v2, a2);
}

uint64_t ot::Coap::Message::AppendProxyUriOption(ot::Coap::Message *this, char *a2)
{
  return ot::Coap::Message::AppendStringOption(this, 0x23u, a2);
}

{
  return ot::Coap::Message::AppendProxyUriOption(this, a2);
}

uint64_t otCoapMessageAppendMaxAgeOption(uint64_t a1, unsigned int a2)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendMaxAgeOption(v2, a2);
}

uint64_t ot::Coap::Message::AppendMaxAgeOption(ot::Coap::Message *this, unsigned int a2)
{
  return ot::Coap::Message::AppendUintOption(this, 0xEu, (unsigned __int8 *)a2);
}

{
  return ot::Coap::Message::AppendMaxAgeOption(this, a2);
}

uint64_t otCoapMessageAppendUriQueryOption(uint64_t a1, char *a2)
{
  ot::AsCoapMessage();
  return ot::Coap::Message::AppendUriQueryOption(v2, a2);
}

uint64_t ot::Coap::Message::AppendUriQueryOption(ot::Coap::Message *this, char *a2)
{
  return ot::Coap::Message::AppendStringOption(this, 0xFu, a2);
}

{
  return ot::Coap::Message::AppendUriQueryOption(this, a2);
}

uint64_t otCoapMessageSetPayloadMarker()
{
  ot::AsCoapMessage();
  return ot::Coap::Message::SetPayloadMarker(v0);
}

uint64_t otCoapMessageGetType()
{
  ot::AsCoapMessage();
  return ot::Coap::Message::GetType(v0);
}

uint64_t ot::Coap::Message::GetType(ot::Coap::Message *this)
{
  return (*(unsigned char *)ot::Coap::Message::GetHelpData(this) & 0x30) >> 4;
}

{
  return ot::Coap::Message::GetType(this);
}

uint64_t otCoapMessageGetCode()
{
  ot::AsCoapMessage();
  return ot::Coap::Message::GetCode(v0);
}

uint64_t ot::Coap::Message::GetCode(ot::Coap::Message *this)
{
  return *(unsigned __int8 *)(ot::Coap::Message::GetHelpData(this) + 1);
}

{
  return ot::Coap::Message::GetCode(this);
}

void otCoapMessageSetCode(uint64_t a1, unsigned int a2)
{
  ot::AsCoapMessage();
  char v4 = v2;
  char v3 = ot::MapEnum<otCoapCode>(a2);
  ot::Coap::Message::SetCode(v4, v3);
}

void ot::Coap::Message::SetCode(ot::Coap::Message *a1, char a2)
{
  ot::Coap::Message::GetHelpData(a1);
  *(unsigned char *)(v2 + 1) = a2;
}

{
  ot::Coap::Message::SetCode(a1, a2);
}

uint64_t otCoapMessageCodeToString()
{
  ot::AsCoapMessage();
  return ot::Coap::Message::CodeToString(v0);
}

uint64_t otCoapMessageGetMessageId()
{
  ot::AsCoapMessage();
  return (unsigned __int16)ot::Coap::Message::GetMessageId(v0);
}

uint64_t otCoapMessageGetTokenLength()
{
  ot::AsCoapMessage();
  return ot::Coap::Message::GetTokenLength(v0);
}

uint64_t ot::Coap::Message::GetTokenLength(ot::Coap::Message *this)
{
  return *(unsigned char *)ot::Coap::Message::GetHelpData(this) & 0xF;
}

{
  return ot::Coap::Message::GetTokenLength(this);
}

unint64_t otCoapMessageGetToken()
{
  ot::AsCoapMessage();
  return ot::Coap::Message::GetToken(v0);
}

unint64_t ot::Coap::Message::GetToken(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetHelpData(this) + 4;
}

{
  return ot::Coap::Message::GetToken(this);
}

uint64_t otCoapOptionIteratorInit(uint64_t a1)
{
  char v3 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  ot::AsCoapMessage();
  return ot::Coap::Option::Iterator::Init(v3, v1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCoapOptionIterator>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otCoapOptionIteratorGetFirstOptionMatching(uint64_t a1, unsigned __int16 a2)
{
  char v4 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  Message = (const ot::Coap::Message *)ot::Coap::Option::Iterator::GetMessage(v4);
  ot::Coap::Option::Iterator::Init(v4, Message, a2);
  IgnoreError();
  return ot::Coap::Option::Iterator::GetOption(v4);
}

uint64_t ot::Coap::Option::Iterator::Init(ot::Coap::Option::Iterator *this, const ot::Coap::Message *a2, unsigned __int16 a3)
{
  return ot::Coap::Option::Iterator::InitOrAdvance(this, a2, a3);
}

{
  return ot::Coap::Option::Iterator::Init(this, a2, a3);
}

uint64_t ot::Coap::Option::Iterator::GetMessage(ot::Coap::Option::Iterator *this)
{
  return *(void *)this;
}

{
  return ot::Coap::Option::Iterator::GetMessage(this);
}

uint64_t ot::Coap::Option::Iterator::GetOption(ot::Coap::Option::Iterator *this)
{
  if (ot::Coap::Option::Iterator::IsDone(this)) {
    return 0;
  }
  else {
    return (uint64_t)this + 8;
  }
}

{
  return ot::Coap::Option::Iterator::GetOption(this);
}

uint64_t otCoapOptionIteratorGetFirstOption(uint64_t a1)
{
  char v3 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  Message = (const ot::Coap::Message *)ot::Coap::Option::Iterator::GetMessage(v3);
  ot::Coap::Option::Iterator::Init(v3, Message);
  IgnoreError();
  return ot::Coap::Option::Iterator::GetOption(v3);
}

uint64_t otCoapOptionIteratorGetNextOptionMatching(uint64_t a1, unsigned __int16 a2)
{
  char v3 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  ot::Coap::Option::Iterator::Advance(v3, a2);
  IgnoreError();
  return ot::Coap::Option::Iterator::GetOption(v3);
}

uint64_t ot::Coap::Option::Iterator::Advance(ot::Coap::Option::Iterator *this, unsigned __int16 a2)
{
  return ot::Coap::Option::Iterator::InitOrAdvance(this, 0, a2);
}

{
  return ot::Coap::Option::Iterator::Advance(this, a2);
}

uint64_t otCoapOptionIteratorGetNextOption(uint64_t a1)
{
  uint64_t v2 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  ot::Coap::Option::Iterator::Advance(v2);
  IgnoreError();
  return ot::Coap::Option::Iterator::GetOption(v2);
}

uint64_t otCoapOptionIteratorGetOptionUintValue(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  return ot::Coap::Option::Iterator::ReadOptionValue(v2, a2);
}

uint64_t otCoapOptionIteratorGetOptionValue(uint64_t a1, char *a2)
{
  uint64_t v2 = (ot::Coap::Option::Iterator *)ot::AsCoreType<otCoapOptionIterator>(a1);
  return ot::Coap::Option::Iterator::ReadOptionValue(v2, a2);
}

uint64_t otCoapSendRequestWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (ot::Coap::TxParameters *)ot::Coap::TxParameters::From(a6);
  if (!a6 || ot::Coap::TxParameters::IsValid(v12))
  {
    unsigned int v6 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
    ApplicationCoap = (_WORD *)ot::Instance::GetApplicationCoap(v6);
    ot::AsCoapMessage();
    unsigned __int16 v10 = v7;
    uint64_t v8 = (ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
    return ot::Coap::CoapBase::SendMessage(ApplicationCoap, v10, v8, v12, a4, a5);
  }
  else
  {
    return 7;
  }
}

void *ot::Coap::TxParameters::From(uint64_t a1)
{
  if (a1) {
    return (void *)a1;
  }
  else {
    return ot::Coap::TxParameters::GetDefault(0);
  }
}

{
  return ot::Coap::TxParameters::From(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMessageInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otCoapStart(uint64_t a1, __int16 a2)
{
  uint64_t v2 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t ApplicationCoap = ot::Instance::GetApplicationCoap(v2);
  return ot::Coap::Coap::Start(ApplicationCoap, a2, 0);
}

uint64_t otCoapStop(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t ApplicationCoap = (ot::Coap::Coap *)ot::Instance::GetApplicationCoap(v1);
  return ot::Coap::Coap::Stop(ApplicationCoap);
}

void otCoapAddResource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t ApplicationCoap = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(v2);
  char v3 = (ot::Coap::Resource *)ot::AsCoreType<otCoapResource>(a2);
  ot::Coap::CoapBase::AddResource(ApplicationCoap, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCoapResource>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otCoapRemoveResource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t ApplicationCoap = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(v2);
  char v3 = (ot::Coap::Resource *)ot::AsCoreType<otCoapResource>(a2);
  return ot::Coap::CoapBase::RemoveResource(ApplicationCoap, v3);
}

void *otCoapSetDefaultHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t ApplicationCoap = ot::Instance::GetApplicationCoap(v3);
  return ot::Coap::CoapBase::SetDefaultHandler(ApplicationCoap, a2, a3);
}

void *ot::Coap::CoapBase::SetDefaultHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::Set((void *)(a1 + 112), a2, a3);
}

{
  return ot::Coap::CoapBase::SetDefaultHandler(a1, a2, a3);
}

uint64_t otCoapSendResponseWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t ApplicationCoap = (_WORD *)ot::Instance::GetApplicationCoap(v4);
  ot::AsCoapMessage();
  uint64_t v8 = v5;
  char v9 = (ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  unsigned int v6 = (ot::Coap::TxParameters *)ot::Coap::TxParameters::From(a4);
  return ot::Coap::CoapBase::SendMessage(ApplicationCoap, v8, v9, v6, 0, 0);
}

uint64_t ot::Encoding::BigEndian::HostSwap16(ot::Encoding::BigEndian *this)
{
  return (unsigned __int16)ot::Encoding::Swap16((ot::Encoding *)(unsigned __int16)this);
}

{
  return ot::Encoding::BigEndian::HostSwap16(this);
}

void ot::Coap::Message::GetHelpData(ot::Coap::Message *this)
{
  ot::AsConst<ot::Coap::Message>();
  ot::Coap::Message::GetHelpData(v1);
  ot::AsNonConst<ot::Coap::Message::HelpData>();
}

{
  ot::Coap::Message::GetHelpData(this);
}

uint64_t ot::Encoding::Swap16(ot::Encoding *this)
{
  return (unsigned __int16)((this << 8) | ((unsigned __int16)((unsigned __int16)this & 0xFF00) >> 8));
}

{
  return ot::Encoding::Swap16(this);
}

unint64_t ot::Coap::Message::GetHelpData(ot::Coap::Message *this)
{
  return (ot::Buffer::GetFirstData(this) + 1) & 0xFFFFFFFFFFFFFFFELL;
}

{
  return ot::Coap::Message::GetHelpData(this);
}

uint64_t ot::Buffer::GetFirstData(ot::Buffer *this)
{
  return (uint64_t)this + 80;
}

{
  return (uint64_t)this + 80;
}

{
  return ot::Buffer::GetFirstData(this);
}

{
  return ot::Buffer::GetFirstData(this);
}

BOOL ot::Coap::Option::Iterator::IsDone(ot::Coap::Option::Iterator *this)
{
  return *((unsigned __int16 *)this + 5) == 0xFFFF;
}

{
  return ot::Coap::Option::Iterator::IsDone(this);
}

void *ot::Coap::TxParameters::GetDefault(ot::Coap::TxParameters *this)
{
  return &ot::Coap::TxParameters::kDefaultTxParameters;
}

{
  return ot::Coap::TxParameters::GetDefault(this);
}

void *ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::Set(result, a2, a3);
}

uint64_t otCommissionerStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = ot::Instance::Get<ot::MeshCoP::Commissioner>(v4);
  return ot::MeshCoP::Commissioner::Start(v5, a2, a3, a4);
}

uint64_t ot::Instance::Get<ot::MeshCoP::Commissioner>(uint64_t a1)
{
  return a1 + 143592;
}

{
  return ot::Instance::Get<ot::MeshCoP::Commissioner>(a1);
}

uint64_t otCommissionerGetId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v1);
  return ot::MeshCoP::Commissioner::GetId(v2);
}

uint64_t ot::MeshCoP::Commissioner::GetId(ot::MeshCoP::Commissioner *this)
{
  return (uint64_t)this + 489;
}

{
  return ot::MeshCoP::Commissioner::GetId(this);
}

uint64_t otCommissionerSetId(uint64_t a1, ot *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v3 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v2);
  return ot::MeshCoP::Commissioner::SetId(v3, a2);
}

uint64_t otCommissionerStop(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v1);
  return ot::MeshCoP::Commissioner::Stop(v2);
}

uint64_t ot::MeshCoP::Commissioner::Stop(ot::MeshCoP::Commissioner *this)
{
  return ot::MeshCoP::Commissioner::Stop(this, 0);
}

{
  return ot::MeshCoP::Commissioner::Stop(this);
}

uint64_t otCommissionerAddJoiner(uint64_t a1, uint64_t a2, ot *a3, unsigned int a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  char v7 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v4);
  if (a2)
  {
    uint64_t v5 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
    return ot::MeshCoP::Commissioner::AddJoiner(v7, v5, a3, a4);
  }
  else
  {
    return ot::MeshCoP::Commissioner::AddJoinerAny(v7, a3, a4);
  }
}

uint64_t ot::MeshCoP::Commissioner::AddJoinerAny(ot::MeshCoP::Commissioner *this, ot *a2, unsigned int a3)
{
  return ot::MeshCoP::Commissioner::AddJoiner(this, 0, 0, a2, a3);
}

{
  return ot::MeshCoP::Commissioner::AddJoinerAny(this, a2, a3);
}

uint64_t ot::MeshCoP::Commissioner::AddJoiner(ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, ot *a3, unsigned int a4)
{
  return ot::MeshCoP::Commissioner::AddJoiner(this, a2, 0, a3, a4);
}

{
  return ot::MeshCoP::Commissioner::AddJoiner(this, a2, a3, a4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otExtAddress>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otCommissionerAddJoinerWithDiscerner(uint64_t a1, uint64_t a2, ot *a3, unsigned int a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  char v7 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v4);
  uint64_t v5 = (const ot::MeshCoP::JoinerDiscerner *)ot::AsCoreType<otJoinerDiscerner>(a2);
  return ot::MeshCoP::Commissioner::AddJoiner(v7, v5, a3, a4);
}

uint64_t ot::MeshCoP::Commissioner::AddJoiner(ot::MeshCoP::Commissioner *this, const ot::MeshCoP::JoinerDiscerner *a2, ot *a3, unsigned int a4)
{
  return ot::MeshCoP::Commissioner::AddJoiner(this, 0, a2, a3, a4);
}

{
  return ot::MeshCoP::Commissioner::AddJoiner(this, a2, a3, a4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otJoinerDiscerner>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otCommissionerGetNextJoinerInfo(uint64_t a1, _WORD *a2, char *a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::MeshCoP::Commissioner>(v3);
  return ot::MeshCoP::Commissioner::GetNextJoinerInfo(v4, a2, a3);
}

uint64_t otCommissionerRemoveJoiner(uint64_t a1, uint64_t a2)
{
  *(void *)&v6[4] = a2;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v2);
  if (*(void *)&v6[4])
  {
    uint64_t v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(*(uint64_t *)&v6[4]);
    *(_DWORD *)unsigned int v6 = ot::MeshCoP::Commissioner::RemoveJoiner(v5, v3, 0);
  }
  else
  {
    *(void *)unsigned int v6 = ot::MeshCoP::Commissioner::RemoveJoinerAny(v5, 0);
  }
  return *(unsigned int *)v6;
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoinerAny(ot::MeshCoP::Commissioner *this, unsigned int a2)
{
  return ot::MeshCoP::Commissioner::RemoveJoiner(this, 0, 0, a2);
}

{
  return ot::MeshCoP::Commissioner::RemoveJoinerAny(this, a2);
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoiner(ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, unsigned int a3)
{
  return ot::MeshCoP::Commissioner::RemoveJoiner(this, a2, 0, a3);
}

{
  return ot::MeshCoP::Commissioner::RemoveJoiner(this, a2, a3);
}

uint64_t otCommissionerRemoveJoinerWithDiscerner(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v2);
  uint64_t v3 = (const ot::MeshCoP::JoinerDiscerner *)ot::AsCoreType<otJoinerDiscerner>(a2);
  return ot::MeshCoP::Commissioner::RemoveJoiner(v5, v3, 0);
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoiner(ot::MeshCoP::Commissioner *this, const ot::MeshCoP::JoinerDiscerner *a2, unsigned int a3)
{
  return ot::MeshCoP::Commissioner::RemoveJoiner(this, 0, a2, a3);
}

{
  return ot::MeshCoP::Commissioner::RemoveJoiner(this, a2, a3);
}

uint64_t otCommissionerSetProvisioningUrl(uint64_t a1, ot *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v2);
  return ot::MeshCoP::Commissioner::SetProvisioningUrl(v3, a2);
}

uint64_t otCommissionerGetProvisioningUrl(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v1);
  return ot::MeshCoP::Commissioner::GetProvisioningUrl(v2);
}

uint64_t ot::MeshCoP::Commissioner::GetProvisioningUrl(ot::MeshCoP::Commissioner *this)
{
  return (uint64_t)this + 424;
}

{
  return ot::MeshCoP::Commissioner::GetProvisioningUrl(this);
}

uint64_t otCommissionerAnnounceBegin(uint64_t a1, int a2, unsigned __int8 a3, unsigned __int16 a4, uint64_t a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v5);
  AnnounceBeginClient = (ot::AnnounceBeginClient *)ot::MeshCoP::Commissioner::GetAnnounceBeginClient(v6);
  char v7 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a5);
  return ot::AnnounceBeginClient::SendRequest(AnnounceBeginClient, a2, a3, a4, v7);
}

uint64_t ot::MeshCoP::Commissioner::GetAnnounceBeginClient(ot::MeshCoP::Commissioner *this)
{
  return (uint64_t)this + 352;
}

{
  return ot::MeshCoP::Commissioner::GetAnnounceBeginClient(this);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp6Address>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otCommissionerEnergyScan(uint64_t a1, int a2, unsigned __int8 a3, unsigned __int16 a4, unsigned __int16 a5, uint64_t a6, void (*a7)(unsigned int, const unsigned __int8 *, unsigned __int8, void *), uint64_t a8)
{
  uint64_t v8 = ot::AsCoreType<otInstance>(a1);
  char v9 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v8);
  EnergyScanClient = (ot::EnergyScanClient *)ot::MeshCoP::Commissioner::GetEnergyScanClient(v9);
  unsigned __int16 v10 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a6);
  return ot::EnergyScanClient::SendQuery(EnergyScanClient, a2, a3, a4, a5, v10, a7, a8);
}

uint64_t ot::MeshCoP::Commissioner::GetEnergyScanClient(ot::MeshCoP::Commissioner *this)
{
  return (uint64_t)this + 360;
}

{
  return ot::MeshCoP::Commissioner::GetEnergyScanClient(this);
}

uint64_t otCommissionerPanIdQuery(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4, void (*a5)(unsigned __int16, unsigned int, void *), uint64_t a6)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  char v7 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v6);
  PanIdQueryClient = (ot::PanIdQueryClient *)ot::MeshCoP::Commissioner::GetPanIdQueryClient(v7);
  uint64_t v8 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a4);
  return ot::PanIdQueryClient::SendQuery(PanIdQueryClient, a2, a3, v8, a5, a6);
}

uint64_t ot::MeshCoP::Commissioner::GetPanIdQueryClient(ot::MeshCoP::Commissioner *this)
{
  return (uint64_t)this + 376;
}

{
  return ot::MeshCoP::Commissioner::GetPanIdQueryClient(this);
}

uint64_t otCommissionerSendMgmtGet(uint64_t a1, char *a2, unsigned __int8 a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v3);
  return ot::MeshCoP::Commissioner::SendMgmtCommissionerGetRequest(v4, a2, a3);
}

uint64_t otCommissionerSendMgmtSet(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  char v7 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v4);
  uint64_t v5 = (const ot::MeshCoP::Commissioner::Dataset *)ot::AsCoreType<otCommissioningDataset>(a2);
  return ot::MeshCoP::Commissioner::SendMgmtCommissionerSetRequest(v7, v5, a3, a4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCommissioningDataset>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otCommissionerGetSessionId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v1);
  return (unsigned __int16)ot::MeshCoP::Commissioner::GetSessionId(v2);
}

uint64_t ot::MeshCoP::Commissioner::GetSessionId(ot::MeshCoP::Commissioner *this)
{
  return *((unsigned __int16 *)this + 138);
}

{
  return ot::MeshCoP::Commissioner::GetSessionId(this);
}

uint64_t otCommissionerGetState(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Commissioner *)ot::Instance::Get<ot::MeshCoP::Commissioner>(v1);
  unsigned __int8 State = ot::MeshCoP::Commissioner::GetState(v2);
  return ot::MapEnum<ot::MeshCoP::Commissioner::State>(State);
}

uint64_t ot::MapEnum<ot::MeshCoP::Commissioner::State>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::MeshCoP::Commissioner::State>(result);
}

uint64_t ot::MeshCoP::Commissioner::GetState(ot::MeshCoP::Commissioner *this)
{
  return *((unsigned __int8 *)this + 554);
}

{
  return ot::MeshCoP::Commissioner::GetState(this);
}

uint64_t otDatasetIsCommissioned(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  unsigned int active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v1);
  return ot::MeshCoP::ActiveDatasetManager::IsCommissioned(active) & 1;
}

uint64_t ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(uint64_t a1)
{
  return a1 + 87264;
}

{
  return ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(a1);
}

uint64_t otDatasetGetActive(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int active = (ot::MeshCoP::DatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v2);
  uint64_t v3 = (ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::DatasetManager::Read(active, v3);
}

uint64_t ot::MeshCoP::DatasetManager::Read(ot::MeshCoP::DatasetManager *this, ot::MeshCoP::Dataset::Info *a2)
{
  return ot::MeshCoP::DatasetLocal::Read((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
}

{
  return ot::MeshCoP::DatasetManager::Read(this, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otOperationalDataset>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otDatasetGetActiveTlvs(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    __assert_rtn("otDatasetGetActiveTlvs", "dataset_api.cpp", 57, "(aDataset) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t active = ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v2);
  return ot::MeshCoP::DatasetManager::Read(active, a2);
}

uint64_t ot::MeshCoP::DatasetManager::Read(uint64_t a1, unsigned char *a2)
{
  return ot::MeshCoP::DatasetLocal::Read((ot::MeshCoP::DatasetLocal *)(a1 + 4), a2);
}

{
  return ot::MeshCoP::DatasetManager::Read(a1, a2);
}

uint64_t otDatasetSetActive(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v2);
  uint64_t v3 = (const ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::ActiveDatasetManager::Save(active, v3);
}

uint64_t ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::ActiveDatasetManager *this, const ot::MeshCoP::Dataset::Info *a2)
{
  return ot::MeshCoP::DatasetManager::Save(this, a2);
}

{
  return ot::MeshCoP::ActiveDatasetManager::Save(this, a2);
}

uint64_t otDatasetSetActiveTlvs(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otDatasetSetActiveTlvs", "dataset_api.cpp", 69, "(aDataset) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t active = ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v2);
  return ot::MeshCoP::ActiveDatasetManager::Save(active, a2);
}

uint64_t ot::MeshCoP::ActiveDatasetManager::Save(uint64_t a1, unsigned __int8 *a2)
{
  return ot::MeshCoP::DatasetManager::Save(a1, a2);
}

{
  return ot::MeshCoP::ActiveDatasetManager::Save(a1, a2);
}

uint64_t otDatasetGetPending(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::MeshCoP::DatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v2);
  uint64_t v3 = (ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::DatasetManager::Read(v5, v3);
}

uint64_t ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(uint64_t a1)
{
  return a1 + 87600;
}

{
  return ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(a1);
}

uint64_t otDatasetGetPendingTlvs(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    __assert_rtn("otDatasetGetPendingTlvs", "dataset_api.cpp", 81, "(aDataset) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v2);
  return ot::MeshCoP::DatasetManager::Read(v3, a2);
}

uint64_t otDatasetSetPending(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v2);
  uint64_t v3 = (const ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::PendingDatasetManager::Save(v5, v3);
}

uint64_t otDatasetSetPendingTlvs(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otDatasetSetPendingTlvs", "dataset_api.cpp", 93, "(aDataset) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v2);
  return ot::MeshCoP::PendingDatasetManager::Save(v3, a2);
}

uint64_t otDatasetSendMgmtActiveGet(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  uint64_t active = (ot::InstanceLocator *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v5);
  uint64_t v6 = (ot::MeshCoP::Dataset::Components *)ot::AsCoreType<otOperationalDatasetComponents>(a2);
  return ot::MeshCoP::DatasetManager::SendGetRequest(active, v6, a3, a4, a5);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otOperationalDatasetComponents>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otDatasetSendMgmtActiveSet(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  uint64_t active = ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
  char v7 = (const ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::DatasetManager::SendSetRequest(active, v7, a3, a4, a5, a6);
}

uint64_t otDatasetSendMgmtPendingGet(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  uint64_t v8 = (ot::InstanceLocator *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v5);
  uint64_t v6 = (ot::MeshCoP::Dataset::Components *)ot::AsCoreType<otOperationalDatasetComponents>(a2);
  return ot::MeshCoP::DatasetManager::SendGetRequest(v8, v6, a3, a4, a5);
}

uint64_t otDatasetSendMgmtPendingSet(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  uint64_t v9 = ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v6);
  char v7 = (const ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::DatasetManager::SendSetRequest(v9, v7, a3, a4, a5, a6);
}

uint64_t otDatasetGeneratePskc(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (ot::MeshCoP::NetworkName *)ot::AsCoreType<otNetworkName>(a2);
  char v7 = (void *)ot::AsCoreType<otExtendedPanId>(a3);
  uint64_t v4 = (char *)ot::AsCoreType<otPskc>(a4);
  return ot::MeshCoP::GeneratePskc(a1, v6, v7, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetworkName>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otExtendedPanId>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otPskc>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otNetworkNameFromString(uint64_t a1, ot *a2)
{
  uint64_t v2 = (ot::MeshCoP::NetworkName *)ot::AsCoreType<otNetworkName>(a1);
  unsigned int v5 = ot::MeshCoP::NetworkName::Set(v2, a2);
  if (v5 == 24) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t otDatasetParseTlvs(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v7);
  if (!a1) {
    __assert_rtn("otDatasetParseTlvs", "dataset_api.cpp", 162, "(aDatasetTlvs) != nullptr");
  }
  ot::MeshCoP::Dataset::SetFrom(v7, a1);
  if (ot::MeshCoP::Dataset::IsValid((ot::MeshCoP::Dataset *)v7))
  {
    uint64_t v2 = (ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
    ot::MeshCoP::Dataset::ConvertTo((ot::MeshCoP::Dataset *)v7, v2);
  }
  else
  {
    return 7;
  }
  return v4;
}

uint64_t otDatasetConvertToTlvs(uint64_t a1, unsigned char *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v7);
  if (!a2) {
    __assert_rtn("otDatasetConvertToTlvs", "dataset_api.cpp", 177, "(aDatasetTlvs) != nullptr");
  }
  uint64_t v2 = (const ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a1);
  unsigned int v4 = ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v7, v2);
  if (!v4) {
    ot::MeshCoP::Dataset::ConvertTo(v7, a2);
  }
  return v4;
}

uint64_t otDatasetUpdateTlvs(uint64_t a1, unsigned __int8 *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v7);
  if (!a2) {
    __assert_rtn("otDatasetUpdateTlvs", "dataset_api.cpp", 191, "(aDatasetTlvs) != nullptr");
  }
  ot::MeshCoP::Dataset::SetFrom(v7, a2);
  uint64_t v2 = (const ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a1);
  unsigned int v4 = ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v7, v2);
  if (!v4) {
    ot::MeshCoP::Dataset::ConvertTo(v7, a2);
  }
  return v4;
}

uint64_t otDatasetCreateNewNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v2);
  uint64_t v3 = (ot::MeshCoP::Dataset::Info *)ot::AsCoreType<otOperationalDataset>(a2);
  return ot::MeshCoP::ActiveDatasetManager::CreateNewNetwork(active, v3);
}

uint64_t ot::MeshCoP::ActiveDatasetManager::CreateNewNetwork(ot::MeshCoP::ActiveDatasetManager *this, ot::MeshCoP::Dataset::Info *a2)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::MeshCoP::Dataset::Info::GenerateRandom(a2, Instance);
}

{
  return ot::MeshCoP::ActiveDatasetManager::CreateNewNetwork(this, a2);
}

uint64_t otDatasetGetDelayTimerMinimal(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Leader *)ot::Instance::Get<ot::MeshCoP::Leader>(v1);
  return ot::MeshCoP::Leader::GetDelayTimerMinimal(v2);
}

uint64_t ot::Instance::Get<ot::MeshCoP::Leader>(uint64_t a1)
{
  return a1 + 145504;
}

{
  return ot::Instance::Get<ot::MeshCoP::Leader>(a1);
}

uint64_t otDatasetSetDelayTimerMinimal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::MeshCoP::Leader *)ot::Instance::Get<ot::MeshCoP::Leader>(v2);
  return ot::MeshCoP::Leader::SetDelayTimerMinimal(v3, a2);
}

uint64_t otDiagProcessCmdLine(uint64_t a1, char *a2, char *a3, size_t a4)
{
  if (!a2) {
    __assert_rtn("otDiagProcessCmdLine", "diags_api.cpp", 47, "(aString) != nullptr");
  }
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  unsigned int v5 = (ot::FactoryDiags::Diags *)ot::Instance::Get<ot::FactoryDiags::Diags>(v4);
  return ot::FactoryDiags::Diags::ProcessLine(v5, a2, a3, a4);
}

uint64_t ot::Instance::Get<ot::FactoryDiags::Diags>(uint64_t a1)
{
  return a1 + 166400;
}

{
  return ot::Instance::Get<ot::FactoryDiags::Diags>(a1);
}

uint64_t otDiagProcessCmd(uint64_t a1, unsigned __int8 a2, const char **a3, char *a4, size_t a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::FactoryDiags::Diags *)ot::Instance::Get<ot::FactoryDiags::Diags>(v5);
  return ot::FactoryDiags::Diags::ProcessCmd(v6, a2, a3, a4, a5);
}

uint64_t otDiagIsEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::FactoryDiags::Diags *)ot::Instance::Get<ot::FactoryDiags::Diags>(v1);
  return ot::FactoryDiags::Diags::IsEnabled(v2) & 1;
}

ot::ChildSupervisor *ot::ChildSupervisor::ChildSupervisor(ot::ChildSupervisor *this, ot::Instance *a2)
{
  return this;
}

{
  ot::ChildSupervisor::ChildSupervisor(this, a2);
  return this;
}

uint64_t ot::SupervisionListener::HandleTimer(ot::SupervisionListener *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsChild(v1))
  {
    uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    if ((ot::MeshForwarder::GetRxOnWhenIdle(v2) & 1) == 0)
    {
      char CurrentTimeoutMs = ot::SupervisionListener::GetCurrentTimeoutMs(this);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"ChildSupervsn", "Supervision timeout. No frame from parent in %u ms", v4, v5, v6, v7, v8, v9, CurrentTimeoutMs);
      ++*((_WORD *)this + 2);
      unsigned __int16 v10 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::MleRouter::SendChildUpdateRequest(v10);
      IgnoreError();
    }
  }
  return ot::SupervisionListener::RestartTimer(this);
}

uint64_t ot::ChildSupervisor::HandleTimer(ot::ChildSupervisor *this)
{
  uint64_t v13 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v1, 0);
  uint64_t v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1] = v2;
  v9[0] = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1] = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9))
  {
    uint64_t v8 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    if (!ot::Neighbor::IsRxOnWhenIdle(v8) && (unsigned __int16)ot::Child::GetSupervisionInterval(v8))
    {
      ot::Child::IncrementUnitsSinceLastSupervision((uint64_t)v8);
      UnitsSinceLastSupervisiounsigned __int8 n = (unsigned __int16)ot::Child::GetUnitsSinceLastSupervision(v8);
      if (UnitsSinceLastSupervision >= (unsigned __int16)ot::Child::GetSupervisionInterval(v8)) {
        ot::ChildSupervisor::SendMessage(this, v8);
      }
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }
  unsigned int Interval = ot::ChildSupervisor::GetInterval(this);
  return ot::TimerMilli::Start((ot::ChildSupervisor *)((char *)this + 8), Interval);
}

ot::TimerMilli *ot::TimerMilliIn<ot::ChildSupervisor,&ot::ChildSupervisor::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::ChildSupervisor,&ot::ChildSupervisor::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::ChildSupervisor::GetDestination(ot::ChildSupervisor *this, const ot::Message *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  uint64_t v6 = 0;
  unsigned __int16 v5 = 0;
  if (ot::Message::GetType(a2) == 2)
  {
    ot::Message::Read<unsigned short>(v7, 0, (char *)&v5);
    IgnoreError();
    uint64_t v2 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    return ot::ChildTable::GetChildAtIndex(v2, v5);
  }
  return v6;
}

uint64_t ot::Message::GetType(ot::Message *this)
{
  return *(_WORD *)(ot::Buffer::GetMetadata(this) + 68) & 7;
}

{
  return ot::Message::GetType(this);
}

uint64_t ot::Message::Read<unsigned short>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<unsigned short>(a1, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::ChildTable>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
}

void ot::ChildSupervisor::SendMessage(ot::ChildSupervisor *this, ot::Child *a2)
{
  char v16 = this;
  char v15 = a2;
  uint64_t v14 = 0;
  __int16 ChildIndex = 0;
  if (!(unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 144)))
  {
    uint64_t v2 = (ot::Message::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    uint64_t v14 = ot::MessagePool::Allocate(v2, 2, 1);
    if (v14)
    {
      uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      __int16 ChildIndex = ot::ChildTable::GetChildIndex(v3, (uint64_t)v15);
      if (!ot::Message::Append<unsigned short>(v14, (char *)&ChildIndex))
      {
        uint64_t v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        if (!ot::MeshForwarder::SendMessage(v4, v14))
        {
          uint64_t v14 = 0;
          char Rloc16 = ot::Neighbor::GetRloc16(v15);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChildSupervsn", "Sending supervision message to child 0x%04x", v6, v7, v8, v9, v10, v11, Rloc16);
        }
      }
    }
  }
  if (v14) {
    ot::Message::Free(v14);
  }
}

uint64_t ot::IndirectSender::ChildInfo::GetIndirectMessageCount(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 16) & 0x3FFFLL;
}

{
  return ot::IndirectSender::ChildInfo::GetIndirectMessageCount(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MessagePool>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(a1);
}

uint64_t ot::ChildTable::GetChildIndex(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)((a2 - (a1 + 8)) / 464);
}

uint64_t ot::Message::Append<unsigned short>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<unsigned short>(a1, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshForwarder>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
}

uint64_t ot::Neighbor::GetRloc16(ot::Neighbor *this)
{
  return *((unsigned __int16 *)this + 14);
}

{
  return ot::Neighbor::GetRloc16(this);
}

uint64_t ot::ChildSupervisor::UpdateOnSend(ot::ChildSupervisor *this, ot::Child *a2)
{
  return ot::Child::ResetUnitsSinceLastSupervision((uint64_t)a2);
}

uint64_t ot::Child::ResetUnitsSinceLastSupervision(uint64_t this)
{
  *(_WORD *)(this + 46ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0;
  return this;
}

{
  return ot::Child::ResetUnitsSinceLastSupervision(this);
}

uint64_t ot::ChildSupervisor::GetInterval(ot::ChildSupervisor *this)
{
  unsigned int v3 = 1000;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsCslPeripheralPresent(v1)) {
    return 100;
  }
  return v3;
}

BOOL ot::Mle::Mle::IsCslPeripheralPresent(ot::Mle::Mle *this)
{
  return *((void *)this + 135) != 0;
}

{
  return ot::Mle::Mle::IsCslPeripheralPresent(this);
}

uint64_t ot::ChildTable::Iterate(ot::InstanceLocator *a1, char a2)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  ot::ChildTable::IteratorBuilder::IteratorBuilder(&v5, (uint64_t)Instance, a2);
  return v5;
}

{
  return ot::ChildTable::Iterate(a1, a2);
}

uint64_t ot::ChildTable::IteratorBuilder::begin(ot::ChildTable::IteratorBuilder *this)
{
  Instance = ot::InstanceLocator::GetInstance(this);
  ot::ChildTable::Iterator::Iterator((uint64_t)&v4, (uint64_t)Instance, *(unsigned char *)this);
  return v4;
}

{
  return ot::ChildTable::IteratorBuilder::begin(this);
}

uint64_t ot::ChildTable::IteratorBuilder::end(ot::ChildTable::IteratorBuilder *this)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::ChildTable::Iterator::Iterator((ot::ChildTable::Iterator *)&v3, Instance);
  return v3;
}

{
  return ot::ChildTable::IteratorBuilder::end(this);
}

BOOL ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*(a1);
}

BOOL ot::Neighbor::IsRxOnWhenIdle(ot::Neighbor *this)
{
  uint64_t v3 = this;
  Deviceint Mode = ot::Neighbor::GetDeviceMode(this);
  return ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&DeviceMode);
}

{
  return ot::Neighbor::IsRxOnWhenIdle(this);
}

uint64_t ot::Child::GetSupervisionInterval(ot::Child *this)
{
  return *((unsigned __int16 *)this + 229);
}

{
  return ot::Child::GetSupervisionInterval(this);
}

uint64_t ot::Child::IncrementUnitsSinceLastSupervision(uint64_t this)
{
  return this;
}

{
  return ot::Child::IncrementUnitsSinceLastSupervision(this);
}

uint64_t ot::Child::GetUnitsSinceLastSupervision(ot::Child *this)
{
  return *((unsigned __int16 *)this + 230);
}

{
  return ot::Child::GetUnitsSinceLastSupervision(this);
}

uint64_t ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++(uint64_t a1)
{
  return ot::ChildTable::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++(a1);
}

void ot::ChildSupervisor::CheckState(ot::ChildSupervisor *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  HasChildreunsigned __int8 n = 0;
  if (!ot::Mle::Mle::IsDisabled(v1))
  {
    uint64_t v2 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    HasChildreunsigned __int8 n = ot::ChildTable::HasChildren(v2, 0);
  }
  if (HasChildren && !ot::Timer::IsRunning((ot::ChildSupervisor *)((char *)this + 8)))
  {
    unsigned int Interval = ot::ChildSupervisor::GetInterval(this);
    ot::TimerMilli::Start((ot::ChildSupervisor *)((char *)this + 8), Interval);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChildSupervsn", "Starting Child Supervision", v4, v5, v6, v7, v8, v9, (_BYTE)this + 8);
  }
  if (!HasChildren && ot::Timer::IsRunning((ot::ChildSupervisor *)((char *)this + 8)))
  {
    ot::TimerMilli::Stop((ot::ChildSupervisor *)((char *)this + 8));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChildSupervsn", "Stopping Child Supervision", v10, v11, v12, v13, v14, v15, v16);
  }
}

BOOL ot::Mle::Mle::IsDisabled(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 73) == 0;
}

{
  return ot::Mle::Mle::IsDisabled(this);
}

BOOL ot::Timer::IsRunning(ot::Timer *this)
{
  return *((void *)this + 2) != (void)this;
}

{
  return ot::Timer::IsRunning(this);
}

void ot::ChildSupervisor::HandleNotifierEvents(ot::ChildSupervisor *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v3, 3076)) {
    ot::ChildSupervisor::CheckState(a1);
  }
}

BOOL ot::Events::ContainsAny(ot::Events *this, uint64_t a2)
{
  return (*(void *)this & a2) != 0;
}

{
  return ot::Events::ContainsAny(this, a2);
}

ot::SupervisionListener *ot::SupervisionListener::SupervisionListener(ot::SupervisionListener *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(_WORD *)this = 0;
  *((_WORD *)this + 1) = 129;
  ot::TimerMilliIn<ot::SupervisionListener,&ot::SupervisionListener::HandleTimer>::TimerMilliIn((ot::SupervisionListener *)((char *)this + 8), a2);
  ot::SupervisionListener::SetTimeout(this, 0xBEu, v2, v3, v4, v5, v6, v7);
  return this;
}

{
  ot::SupervisionListener::SupervisionListener(this, a2);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::SupervisionListener,&ot::SupervisionListener::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::SupervisionListener,&ot::SupervisionListener::HandleTimer>::HandleTimer);
  return a1;
}

ot::SupervisionListener *ot::SupervisionListener::SetTimeout(ot::SupervisionListener *this, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = this;
  if (*(unsigned __int16 *)this != a2)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChildSupervsn", "Timeout: %u -> %u", a3, a4, a5, a6, a7, a8, *(_WORD *)this);
    *(_WORD *)uint64_t v8 = a2;
    return (ot::SupervisionListener *)ot::SupervisionListener::RestartTimer(v8);
  }
  return this;
}

uint64_t ot::SupervisionListener::Start(ot::SupervisionListener *this)
{
  return ot::SupervisionListener::RestartTimer(this);
}

uint64_t ot::SupervisionListener::RestartTimer(ot::SupervisionListener *this)
{
  unsigned int CurrentTimeoutMs = ot::SupervisionListener::GetCurrentTimeoutMs(this);
  if (!CurrentTimeoutMs) {
    return ot::TimerMilli::Stop((ot::SupervisionListener *)((char *)this + 8));
  }
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsDisabled(v1)) {
    return ot::TimerMilli::Stop((ot::SupervisionListener *)((char *)this + 8));
  }
  uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  if (ot::MeshForwarder::GetRxOnWhenIdle(v2)) {
    return ot::TimerMilli::Stop((ot::SupervisionListener *)((char *)this + 8));
  }
  else {
    return ot::TimerMilli::Start((ot::SupervisionListener *)((char *)this + 8), CurrentTimeoutMs);
  }
}

uint64_t ot::SupervisionListener::Stop(ot::SupervisionListener *this)
{
  return ot::TimerMilli::Stop((ot::SupervisionListener *)((char *)this + 8));
}

void ot::SupervisionListener::SetInterval(ot::SupervisionListener *this, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned __int16 *)this + 1) != a2)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChildSupervsn", "Interval: %u -> %u", a3, a4, a5, a6, a7, a8, *((_WORD *)this + 1));
    *((_WORD *)this + 1) = a2;
    uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (ot::Mle::Mle::IsChild(v8))
    {
      uint64_t v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      ot::Mle::Mle::SendChildUpdateRequest(v9);
      IgnoreError();
    }
  }
}

BOOL ot::Mle::Mle::IsChild(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 73) == 2;
}

{
  return ot::Mle::Mle::IsChild(this);
}

uint64_t ot::SupervisionListener::UpdateOnReceive(ot::SupervisionListener *this, const ot::Mac::Address *a2, char a3)
{
  char v21 = a3 & 1;
  uint64_t result = ot::Timer::IsRunning((ot::SupervisionListener *)((char *)this + 8));
  if (result & 1) != 0 && (v21)
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    uint64_t result = ot::Mle::Mle::IsChild(v4);
    if (result)
    {
      uint64_t v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
      uint64_t Neighbor = ot::NeighborTable::FindNeighbor(v5, a2, 1);
      uint64_t v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      uint64_t Parent = ot::Mle::Mle::GetParent(v6);
      uint64_t result = Neighbor;
      if (Neighbor == Parent)
      {
        uint64_t v8 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
        uint64_t v9 = (ot::TimerMilli *)ot::NeighborTable::FindNeighbor(v8, a2, 1);
        uint64_t v20 = (uint64_t)v9;
        if (v9)
        {
          int Now = ot::TimerMilli::GetNow(v9);
          ot::Neighbor::SetLastHeard(v20, Now);
        }
        else
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)1>((ot *)"ChildSupervsn", "Parent is nullptr, cannot update last heard time", v10, v11, v12, v13, v14, v15, v16);
        }
        return ot::SupervisionListener::RestartTimer(this);
      }
    }
  }
  return result;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NeighborTable>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
}

uint64_t ot::Mle::Mle::GetParent(ot::Mle::Mle *this)
{
  return (uint64_t)this + 80;
}

{
  return ot::Mle::Mle::GetParent(this);
}

uint64_t ot::Neighbor::SetLastHeard(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

{
  return ot::Neighbor::SetLastHeard(result, a2);
}

uint64_t ot::TimerMilli::GetNow(ot::TimerMilli *this)
{
  int Now = otPlatAlarmMilliGetNow();
  ot::Time::Time((ot::Time *)&v3, Now);
  return v3;
}

{
  return ot::TimerMilli::GetNow(this);
}

uint64_t ot::SupervisionListener::GetCurrentInterval(ot::SupervisionListener *this)
{
  return *((unsigned __int16 *)this + 1);
}

uint64_t ot::SupervisionListener::GetCurrentTimeoutMs(ot::SupervisionListener *this)
{
  return ot::Time::SecToMsec((ot::Time *)*(unsigned __int16 *)this);
}

uint64_t ot::Time::SecToMsec(ot::Time *this)
{
  return (1000 * this);
}

{
  return ot::Time::SecToMsec(this);
}

uint64_t ot::Mle::MleRouter::SendChildUpdateRequest(ot::Mle::MleRouter *this)
{
  return ot::Mle::Mle::SendChildUpdateRequest(this);
}

{
  return ot::Mle::MleRouter::SendChildUpdateRequest(this);
}

uint64_t ot::Buffer::GetMetadata(ot::Buffer *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return ot::Buffer::GetMetadata(this);
}

{
  return ot::Buffer::GetMetadata(this);
}

unsigned char *ot::ChildTable::IteratorBuilder::IteratorBuilder(unsigned char *a1, uint64_t a2, char a3)
{
  return a1;
}

{
  unsigned char *result;

  ot::InstanceLocator::InstanceLocator();
  uint64_t result = a1;
  *a1 = a3;
  return result;
}

ot::ChildTable::Iterator *ot::ChildTable::Iterator::Iterator(ot::ChildTable::Iterator *this, ot::Instance *a2)
{
  return this;
}

{
  ot::ChildTable::Iterator *result;

  ot::InstanceLocator::InstanceLocator();
  ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator(this);
  uint64_t result = this;
  *((unsigned char *)this + 8) = 0;
  return result;
}

void *ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator(void *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t ot::Neighbor::GetDeviceMode(ot::Neighbor *this)
{
  ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v2, *((unsigned char *)this + 30) >> 4);
  return v2;
}

{
  return ot::Neighbor::GetDeviceMode(this);
}

BOOL ot::Mle::DeviceMode::IsRxOnWhenIdle(ot::Mle::DeviceMode *this)
{
  return (*(unsigned char *)this & 8) != 0;
}

{
  return ot::Mle::DeviceMode::IsRxOnWhenIdle(this);
}

ot::Mle::DeviceMode *ot::Mle::DeviceMode::DeviceMode(ot::Mle::DeviceMode *this, char a2)
{
  return this;
}

{
  ot::Mle::DeviceMode::Set(this, a2);
  return this;
}

unsigned char *ot::Mle::DeviceMode::Set(unsigned char *this, char a2)
{
  *this = a2 | 4;
  return this;
}

{
  return ot::Mle::DeviceMode::Set(this, a2);
}

uint64_t ot::TimerMilliIn<ot::ChildSupervisor,&ot::ChildSupervisor::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unsigned __int8 v2 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(a1);
  return ot::ChildSupervisor::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::ChildSupervisor>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(a1);
}

uint64_t ot::Instance::Get<ot::ChildSupervisor>(uint64_t a1)
{
  return a1 + 153696;
}

{
  return ot::Instance::Get<ot::ChildSupervisor>(a1);
}

uint64_t ot::Instance::Get<ot::ChildTable>(uint64_t a1)
{
  return a1 + 91528;
}

{
  return ot::Instance::Get<ot::ChildTable>(a1);
}

uint64_t ot::Instance::Get<ot::MessagePool>(uint64_t a1)
{
  return a1 + 208;
}

{
  return ot::Instance::Get<ot::MessagePool>(a1);
}

uint64_t ot::Instance::Get<ot::MeshForwarder>(uint64_t a1)
{
  return a1 + 89864;
}

{
  return ot::Instance::Get<ot::MeshForwarder>(a1);
}

uint64_t ot::TimerMilliIn<ot::SupervisionListener,&ot::SupervisionListener::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unsigned __int8 v2 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(a1);
  return ot::SupervisionListener::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::SupervisionListener>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(a1);
}

uint64_t ot::Instance::Get<ot::Mle::MleRouter>(uint64_t a1)
{
  return a1 + 90320;
}

{
  return ot::Instance::Get<ot::Mle::MleRouter>(a1);
}

uint64_t ot::Instance::Get<ot::NeighborTable>(uint64_t a1)
{
  return a1 + 90552;
}

{
  return ot::Instance::Get<ot::NeighborTable>(a1);
}

uint64_t otDnsInitTxtEntryIterator(uint64_t a1, const unsigned __int8 *a2, __int16 a3)
{
  unsigned int v3 = (ot::Dns::TxtEntry::Iterator *)ot::AsCoreType<otDnsTxtEntryIterator>(a1);
  return ot::Dns::TxtEntry::Iterator::Init(v3, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otDnsTxtEntryIterator>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otDnsGetNextTxtEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::Dns::TxtEntry::Iterator *)ot::AsCoreType<otDnsTxtEntryIterator>(a1);
  uint64_t v2 = ot::AsCoreType<otDnsTxtEntry>(a2);
  return ot::Dns::TxtEntry::Iterator::GetNextEntry(v4, v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otDnsTxtEntry>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

const char *otThreadErrorToString(int a1)
{
  return ot::ErrorToString(a1);
}

uint64_t otIcmp6GetEchoMode(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Ip6::Icmp *)ot::Instance::Get<ot::Ip6::Icmp>(v1);
  return ot::Ip6::Icmp::GetEchoMode(v2);
}

uint64_t ot::Instance::Get<ot::Ip6::Icmp>(uint64_t a1)
{
  return a1 + 85312;
}

{
  return ot::Instance::Get<ot::Ip6::Icmp>(a1);
}

uint64_t ot::Ip6::Icmp::GetEchoMode(ot::Ip6::Icmp *this)
{
  return *((unsigned int *)this + 3);
}

{
  return ot::Ip6::Icmp::GetEchoMode(this);
}

uint64_t otIcmp6SetEchoMode(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Ip6::Icmp>(v2);
  return ot::Ip6::Icmp::SetEchoMode(v3, a2);
}

uint64_t ot::Ip6::Icmp::SetEchoMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

{
  return ot::Ip6::Icmp::SetEchoMode(result, a2);
}

uint64_t otIcmp6RegisterHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Icmp *)ot::Instance::Get<ot::Ip6::Icmp>(v2);
  uint64_t v3 = (ot::Ip6::Icmp::Handler *)ot::AsCoreType<otIcmp6Handler>(a2);
  return ot::Ip6::Icmp::RegisterHandler(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIcmp6Handler>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otIcmp6SendEchoRequest(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v8 = (ot::Ip6::Icmp *)ot::Instance::Get<ot::Ip6::Icmp>(v4);
  uint64_t v7 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  uint64_t v5 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  return ot::Ip6::Icmp::SendEchoRequest(v8, v7, v5, a4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMessage>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

ot::Utils::MeshDiag *ot::Utils::MeshDiag::MeshDiag(ot::Utils::MeshDiag *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Utils::MeshDiag::MeshDiag(this, a2);
  return this;
}

void *ot::Utils::MeshDiag::HandleTimer(ot::Utils::MeshDiag *this)
{
  uint64_t v1 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  ot::Coap::CoapBase::AbortTransaction(v1, (uint64_t)ot::Utils::MeshDiag::HandleDiagGetResponse, (uint64_t)this);
  IgnoreError();
  return ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,decltype(nullptr)>(this, &ot::kErrorResponseTimeout);
}

void *ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(void *a1)
{
  return a1;
}

{
  ot::CallbackBase<void (*)(otError,otMeshDiagRouterInfo *,void *)>::CallbackBase(a1);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::MeshDiag,&ot::Utils::MeshDiag::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::MeshDiag,&ot::Utils::MeshDiag::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Utils::MeshDiag::DiscoverTopology(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v10 = 0;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
  if (ot::Mle::Mle::IsAttached(v4))
  {
    if (ot::Timer::IsRunning((ot::Timer *)(a1 + 24)))
    {
      return 5;
    }
    else
    {
      uint64_t v5 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>((ot::InstanceLocator *)a1);
      ot::RouterTable::GetRouterIdSet(v5, (ot::Mle::RouterIdSet *)(a1 + 16));
      for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
      {
        if (ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)(a1 + 16), i))
        {
          unsigned __int16 v6 = ot::Mle::Rloc16FromRouterId((ot::Mle *)i);
          unsigned int v10 = ot::Utils::MeshDiag::SendDiagGetTo((ot::InstanceLocator *)a1, v6, a2);
          if (v10) {
            return v10;
          }
        }
      }
      ot::CallbackBase<void (*)(otError,otMeshDiagRouterInfo *,void *)>::Set((void *)a1, a3, a4);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 24), 0x1388u);
    }
  }
  else
  {
    return 13;
  }
  return v10;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::RouterTable>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(a1);
}

uint64_t ot::RouterTable::GetRouterIdSet(ot::RouterTable *this, ot::Mle::RouterIdSet *a2)
{
  return ot::RouterTable::RouterIdMap::GetAsRouterIdSet((ot::RouterTable *)((char *)this + 4640), a2);
}

{
  return ot::RouterTable::GetRouterIdSet(this, a2);
}

BOOL ot::Mle::RouterIdSet::Contains(ot::Mle::RouterIdSet *this, unsigned __int8 a2)
{
  char v3 = *((unsigned char *)this + a2 / 8);
  return (v3 & ot::Mle::RouterIdSet::MaskFor((ot::Mle::RouterIdSet *)a2)) != 0;
}

{
  return ot::Mle::RouterIdSet::Contains(this, a2);
}

uint64_t ot::Utils::MeshDiag::SendDiagGetTo(ot::InstanceLocator *a1, unsigned __int16 a2, unsigned char *a3)
{
  char v16 = a1;
  unsigned __int16 v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v11, Instance);
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v12 = ot::Coap::CoapBase::NewConfirmablePostMessage(v4, 0x21u);
  if (v12)
  {
    ot::Message::SetPriority(v12, 0);
    IgnoreError();
    v10[0] = 1;
    v10[1] = 0;
    void v10[2] = 5;
    unsigned __int8 v9 = 4;
    unsigned char v10[3] = 24;
    if (*v14)
    {
      unsigned __int8 v9 = 5;
      unsigned char v10[4] = 8;
    }
    if ((*v14 & 2) != 0)
    {
      uint64_t v5 = v9++;
      v10[v5] = 16;
    }
    unsigned int v13 = ot::Tlv::Append<ot::NetworkDiagnostic::TypeListTlv>(v12, v10, v9);
    if (!v13)
    {
      ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v11, v15);
      unsigned __int16 v6 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      unsigned int v13 = ot::Coap::CoapBase::SendMessage(v6, v12, (ot::Ip6::MessageInfo *)v11, (uint64_t)ot::Utils::MeshDiag::HandleDiagGetResponse, (uint64_t)a1);
    }
  }
  else
  {
    unsigned int v13 = 3;
  }
  if (v13 && v12) {
    ot::Message::Free(v12);
  }
  return v13;
}

uint64_t ot::Mle::Rloc16FromRouterId(ot::Mle *this)
{
  return (unsigned __int16)(this << 10);
}

{
  return ot::Mle::Rloc16FromRouterId(this);
}

void *ot::CallbackBase<void (*)(otError,otMeshDiagRouterInfo *,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otError,otMeshDiagRouterInfo *,void *)>::Set(result, a2, a3);
}

void ot::Utils::MeshDiag::Cancel(ot::Utils::MeshDiag *this)
{
  ot::TimerMilli::Stop((ot::Utils::MeshDiag *)((char *)this + 24));
  uint64_t v1 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  ot::Coap::CoapBase::AbortTransaction(v1, (uint64_t)ot::Utils::MeshDiag::HandleDiagGetResponse, (uint64_t)this);
  IgnoreError();
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Tmf::Agent>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
}

uint64_t ot::Utils::MeshDiag::HandleDiagGetResponse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::Utils::MeshDiag::HandleDiagGetResponse(a1, v7, v5, a4);
}

ot::Tmf::MessageInfo *ot::Tmf::MessageInfo::MessageInfo(ot::Tmf::MessageInfo *this, ot::Instance *a2)
{
  return this;
}

{
  ot::InstanceLocator::InstanceLocator();
  ot::Ip6::MessageInfo::MessageInfo(this);
  ot::Ip6::MessageInfo::SetPeerPort((uint64_t)this, 61631);
  return this;
}

uint64_t ot::Tlv::Append<ot::NetworkDiagnostic::TypeListTlv>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x12, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::NetworkDiagnostic::TypeListTlv>(a1, a2, a3);
}

uint64_t ot::Utils::MeshDiag::HandleDiagGetResponse(uint64_t result, ot::Message *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v16 = result;
  unsigned __int16 v15 = a2;
  uint64_t v14 = a3;
  v13[1] = a4;
  unsigned __int8 v9 = (void *)result;
  v13[0] = 0;
  if (!a4)
  {
    if (v15)
    {
      uint64_t result = ot::Timer::IsRunning((ot::Timer *)(result + 24));
      if (result)
      {
        uint64_t result = ot::Utils::MeshDiag::RouterInfo::ParseFrom((ot::Utils::MeshDiag::RouterInfo *)v17, v15);
        if (!result)
        {
          if (!ot::Utils::MeshDiag::Ip6AddrIterator::InitFrom((ot::Utils::MeshDiag::Ip6AddrIterator *)v12, v15, v4, v5, v6))uint64_t v20 = v12; {
          if (!ot::Utils::MeshDiag::ChildIterator::InitFrom((ot::Utils::MeshDiag::ChildIterator *)v11, v15, v18, v7, v8))char v21 = v11;
          }
          ot::Mle::RouterIdSet::Remove((ot::Mle::RouterIdSet *)(v9 + 2), v19);
          if (ot::Mle::RouterIdSet::GetNumberOfAllocatedIds((ot::Mle::RouterIdSet *)(v9 + 2)))
          {
            v13[0] = 36;
          }
          else
          {
            v13[0] = 0;
            ot::TimerMilli::Stop((ot::TimerMilli *)(v9 + 3));
          }
          unsigned int v10 = v17;
          return (uint64_t)ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Utils::MeshDiag::RouterInfo *>(v9, v13, &v10);
        }
      }
    }
  }
  return result;
}

uint64_t ot::Utils::MeshDiag::RouterInfo::ParseFrom(ot::Utils::MeshDiag::RouterInfo *this, const ot::Message *a2)
{
  uint64_t v24 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a2);
  ot::Clearable<ot::Utils::MeshDiag::RouterInfo>::Clear(this);
  unsigned int v25 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(a2, (unsigned __int16 *)this + 4, v2, v3);
  if (!v25)
  {
    uint64_t v4 = ot::AsCoreType<otExtAddress>((uint64_t)this);
    unsigned int v25 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(a2, v4, v5, v6, v7);
    if (!v25)
    {
      unsigned int v25 = ot::Tlv::FindTlv<ot::NetworkDiagnostic::RouteTlv>(a2, v27, v8, v9, v10);
      if (!v25)
      {
        unsigned int v20 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(a2, (unsigned __int16 *)this + 6, v11, v12);
        unsigned int v25 = v20;
        if (v20)
        {
          if (v20 != 23) {
            return v25;
          }
          *((_WORD *)this + 6) = -1;
          unsigned int v25 = 0;
        }
        *((unsigned char *)this + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = ot::Mle::RouterIdFromRloc16((ot::Mle *)*((unsigned __int16 *)this + 4));
        int v18 = *((unsigned __int16 *)this + 4);
        *((unsigned char *)this + 14) = *((unsigned char *)this + 14) & 0xFE | (v18 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v24));
        BOOL v19 = 0;
        if (ot::Mle::Mle::IsChild(v24))
        {
          int v17 = *((unsigned __int16 *)this + 4);
          uint64_t Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v24);
          BOOL v19 = v17 == (unsigned __int16)ot::Neighbor::GetRloc16(Parent);
        }
        *((unsigned char *)this + 14) = *((unsigned char *)this + 14) & 0xFD | (2 * v19);
        int v16 = *((unsigned __int8 *)this + 10);
        *((unsigned char *)this + 14) = *((unsigned char *)this + 14) & 0xFB | (4
                                                              * (v16 == ot::Mle::Mle::GetLeaderId(v24)));
        uint64_t v14 = (const unsigned __int8 **)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a2);
        *((unsigned char *)this + 14) = *((unsigned char *)this + 14) & 0xF7 | (8
                                                              * (ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(v14, *((_WORD *)this + 4)) & 1));
        unsigned __int8 v23 = 0;
        unsigned __int8 v22 = 0;
        while (v23 <= 0x3Eu)
        {
          if (ot::Mle::RouteTlv::IsRouterIdSet((ot::Mle::RouteTlv *)v27, v23)) {
            *((unsigned char *)this + v23 + 15) = ot::Mle::RouteTlv::GetLinkQualityIn((ot::Mle::RouteTlv *)v27, v22++);
          }
          ++v23;
        }
      }
    }
  }
  return v25;
}

uint64_t ot::Utils::MeshDiag::Ip6AddrIterator::InitFrom(ot::Utils::MeshDiag::Ip6AddrIterator *this, const ot::Message *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned int v10 = this;
  uint64_t v9 = a2;
  TlvValue__int16 Offset = 0;
  unsigned __int16 v7 = 0;
  TlvValue__int16 Offset = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)8, (_WORD *)this + 4, &v7, a5);
  if (!TlvValueOffset)
  {
    *((_WORD *)this + 5) = *((_WORD *)this + 4) + v7;
    *(void *)this = v9;
  }
  return TlvValueOffset;
}

uint64_t ot::Utils::MeshDiag::ChildIterator::InitFrom(ot::Utils::MeshDiag::ChildIterator *this, const ot::Message *a2, __int16 a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v11 = this;
  unsigned int v10 = a2;
  __int16 v9 = a3;
  TlvValue__int16 Offset = 0;
  unsigned __int16 v7 = 0;
  TlvValue__int16 Offset = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x10, (_WORD *)this + 4, &v7, a5);
  if (!TlvValueOffset)
  {
    *((_WORD *)this + 5) = *((_WORD *)this + 4) + v7;
    *(void *)this = v10;
    *((_WORD *)this + 6) = v9;
  }
  return TlvValueOffset;
}

uint64_t ot::Mle::RouterIdSet::Remove(ot::Mle::RouterIdSet *this, unsigned __int8 a2)
{
  uint64_t result = ot::Mle::RouterIdSet::MaskFor((ot::Mle::RouterIdSet *)a2);
  *((unsigned char *)this + a2 / 8) &= ~(_BYTE)result;
  return result;
}

{
  return ot::Mle::RouterIdSet::Remove(this, a2);
}

void *ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Utils::MeshDiag::RouterInfo *>(void *result, unsigned int *a2, void *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Utils::MeshDiag::RouterInfo *>((uint64_t)result, a2, a3);
  }
  return result;
}

{
  return ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Utils::MeshDiag::RouterInfo *>(result, a2, a3);
}

void *ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,decltype(nullptr)>(void *result, unsigned int *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,decltype(nullptr)>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,decltype(nullptr)>(result, a2);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::Mle>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
}

void *ot::Clearable<ot::Utils::MeshDiag::RouterInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x60uLL);
}

{
  return ot::Clearable<ot::Utils::MeshDiag::RouterInfo>::Clear(a1);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 1u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, 0, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::FindTlv<ot::NetworkDiagnostic::RouteTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)5, 0x4Au, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::NetworkDiagnostic::RouteTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x18u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::Mle::RouterIdFromRloc16(ot::Mle *this)
{
  return (int)(unsigned __int16)this >> 10;
}

{
  return ot::Mle::RouterIdFromRloc16(this);
}

uint64_t ot::Mle::Mle::GetRloc16(ot::Mle::Mle *this)
{
  return *((unsigned __int16 *)this + 340);
}

{
  return ot::Mle::Mle::GetRloc16(this);
}

uint64_t ot::Mle::Mle::GetLeaderId(ot::Mle::Mle *this)
{
  return ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::Mle *)((char *)this + 64));
}

{
  return ot::Mle::Mle::GetLeaderId(this);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Leader>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
}

BOOL ot::Mle::RouteTlv::IsRouterIdSet(ot::Mle::RouteTlv *this, unsigned __int8 a2)
{
  return ot::Mle::RouterIdSet::Contains((ot::Mle::RouteTlv *)((char *)this + 3), a2);
}

{
  return ot::Mle::RouteTlv::IsRouterIdSet(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetLinkQualityIn(ot::Mle::RouteTlv *this, unsigned __int8 a2)
{
  return (*((unsigned char *)this + a2 + 11) & 0x30) >> 4;
}

{
  return ot::Mle::RouteTlv::GetLinkQualityIn(this, a2);
}

uint64_t ot::Utils::MeshDiag::Ip6AddrIterator::GetNextAddress(ot::Utils::MeshDiag::Ip6AddrIterator *this, ot::Ip6::Address *a2)
{
  unsigned int v4 = 0;
  if (*(void *)this)
  {
    if ((unint64_t)*((unsigned __int16 *)this + 4) + 16 <= *((unsigned __int16 *)this + 5))
    {
      ot::Message::Read<ot::Ip6::Address>(*(ot::Message **)this, *((_WORD *)this + 4), (char *)a2);
      IgnoreError();
      *((_WORD *)this + 4) += 16;
    }
    else
    {
      return 23;
    }
  }
  else
  {
    return 23;
  }
  return v4;
}

uint64_t ot::Message::Read<ot::Ip6::Address>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return ot::Message::Read<ot::Ip6::Address>(a1, a2, a3);
}

uint64_t ot::Utils::MeshDiag::ChildIterator::GetNextChildInfo(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v16 = a1;
  unsigned __int16 v15 = a2;
  unsigned int v14 = 0;
  if (*(void *)a1)
  {
    if ((unint64_t)*(unsigned __int16 *)(a1 + 8) + 3 <= *(unsigned __int16 *)(a1 + 10))
    {
      ot::Message::Read<ot::NetworkDiagnostic::ChildTableEntry>(*(ot::Message **)a1, *(_WORD *)(a1 + 8), v13);
      IgnoreError();
      *(_WORD *)(a1 + 8) += 3;
      __int16 v9 = *(_WORD *)(a1 + 12);
      __int16 ChildId = ot::NetworkDiagnostic::ChildTableEntry::GetChildId((ot::NetworkDiagnostic::ChildTableEntry *)v13);
      *unsigned __int16 v15 = v9 + ChildId;
      char Mode = ot::NetworkDiagnostic::ChildTableEntry::GetMode((ot::NetworkDiagnostic::ChildTableEntry *)v13);
      ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&Mode, (unsigned char *)v15 + 2);
      char LinkQuality = ot::NetworkDiagnostic::ChildTableEntry::GetLinkQuality((ot::NetworkDiagnostic::ChildTableEntry *)v13);
      *((unsigned char *)v15 + 3) = LinkQuality;
      int v10 = *v15;
      unsigned int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(*(ot::Message **)a1);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v4);
      *((unsigned char *)v15 + 4) = v15[2] & 0xFE | (v10 == Rloc16);
      uint64_t v6 = (const unsigned __int8 **)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(*(ot::Message **)a1);
      char v7 = ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(v6, *v15);
      *((unsigned char *)v15 + 4) = v15[2] & 0xFD | (2 * (v7 & 1));
    }
    else
    {
      return 23;
    }
  }
  else
  {
    return 23;
  }
  return v14;
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::ChildTableEntry>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 3u);
}

{
  return ot::Message::Read<ot::NetworkDiagnostic::ChildTableEntry>(a1, a2, a3);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::GetChildId(ot::NetworkDiagnostic::ChildTableEntry *this)
{
  return ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this) & 0x1FF;
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::GetChildId(this);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::GetMode(ot::NetworkDiagnostic::ChildTableEntry *this)
{
  ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v2, *((unsigned char *)this + 2));
  return v2;
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::GetMode(this);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::GetLinkQuality(ot::NetworkDiagnostic::ChildTableEntry *this)
{
  return (int)(ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this) & 0x600) >> 9;
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::GetLinkQuality(this);
}

void *ot::CallbackBase<void (*)(otError,otMeshDiagRouterInfo *,void *)>::CallbackBase(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

uint64_t ot::Mle::RouterIdSet::MaskFor(ot::Mle::RouterIdSet *this)
{
  return (128 >> (this % 8));
}

{
  return ot::Mle::RouterIdSet::MaskFor(this);
}

ot::Ip6::MessageInfo *ot::Ip6::MessageInfo::MessageInfo(ot::Ip6::MessageInfo *this)
{
  return this;
}

{
  ot::Ip6::MessageInfo::MessageInfo(this);
  return this;
}

uint64_t ot::Ip6::MessageInfo::SetPeerPort(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 34) = a2;
  return this;
}

{
  return ot::Ip6::MessageInfo::SetPeerPort(this, a2);
}

void *ot::Clearable<ot::Ip6::MessageInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x38uLL);
}

{
  return ot::Clearable<ot::Ip6::MessageInfo>::Clear(a1);
}

uint64_t ot::Mle::LeaderData::GetLeaderRouterId(ot::Mle::LeaderData *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return ot::Mle::LeaderData::GetLeaderRouterId(this);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(ot::NetworkDiagnostic::ChildTableEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this);
}

void *ot::TimerMilliIn<ot::Utils::MeshDiag,&ot::Utils::MeshDiag::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unsigned __int8 v2 = (ot::Utils::MeshDiag *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::MeshDiag>(a1);
  return ot::Utils::MeshDiag::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::MeshDiag>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::MeshDiag>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::MeshDiag>(a1);
}

uint64_t ot::Instance::Get<ot::Utils::MeshDiag>(uint64_t a1)
{
  return a1 + 155920;
}

{
  return ot::Instance::Get<ot::Utils::MeshDiag>(a1);
}

uint64_t ot::Instance::Get<ot::RouterTable>(uint64_t a1)
{
  return a1 + 121232;
}

{
  return ot::Instance::Get<ot::RouterTable>(a1);
}

uint64_t ot::Instance::Get<ot::Tmf::Agent>(uint64_t a1)
{
  return a1 + 86240;
}

{
  return ot::Instance::Get<ot::Tmf::Agent>(a1);
}

uint64_t ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Utils::MeshDiag::RouterInfo *>(uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Utils::MeshDiag::RouterInfo *>(a1, a2, a3);
}

uint64_t ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,decltype(nullptr)>(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, 0, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,decltype(nullptr)>(a1, a2);
}

void *ot::Message::GetInstance(ot::Message *this)
{
  MessagePool = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
  return ot::InstanceLocator::GetInstance(MessagePool);
}

{
  return ot::Message::GetInstance(this);
}

uint64_t ot::Message::GetMessagePool(ot::Message *this)
{
  return *(void *)(ot::Buffer::GetMetadata(this) + 16);
}

{
  return ot::Message::GetMessagePool(this);
}

uint64_t ot::Instance::Get<ot::NetworkData::Leader>(uint64_t a1)
{
  return a1 + 142944;
}

{
  return ot::Instance::Get<ot::NetworkData::Leader>(a1);
}

uint64_t ot::Preference::To2BitUint(ot::Preference *this)
{
  if ((_BYTE)this)
  {
    if ((char)this > 0) {
      return 1;
    }
    else {
      return 3;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t ot::Preference::From2BitUint(ot::Preference *this)
{
  return ot::Preference::From2BitUint(unsigned char)::kPreferences[this & 3];
}

BOOL ot::Preference::IsValid(ot::Preference *this)
{
  BOOL v2 = 1;
  if ((char)this != 1)
  {
    BOOL v2 = 1;
    if ((_BYTE)this) {
      return (char)this == -1;
    }
  }
  return v2;
}

const char *ot::Preference::ToString(ot::Preference *this)
{
  if (!(_BYTE)this) {
    return "medium";
  }
  uint64_t v1 = "high";
  if ((char)this <= 0) {
    return "low";
  }
  return v1;
}

unsigned char *otInstanceInitSingle(ot::Instance *a1)
{
  return ot::Instance::InitSingle(a1);
}

uint64_t otInstanceIsInitialized(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  return ot::Instance::IsInitialized(v1) & 1;
}

uint64_t ot::Instance::IsInitialized(ot::Instance *this)
{
  return *((unsigned char *)this + 166440) & 1;
}

{
  return ot::Instance::IsInitialized(this);
}

void otInstanceFinalize(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  ot::Instance::Finalize(v1);
}

void otInstanceReset(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  ot::Instance::Reset(v1);
}

unint64_t otInstanceGetUptime(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Uptime *)ot::Instance::Get<ot::Uptime>(v1);
  return ot::Uptime::GetUptime(v2);
}

uint64_t ot::Instance::Get<ot::Uptime>(uint64_t a1)
{
  return a1 + 40;
}

{
  return ot::Instance::Get<ot::Uptime>(a1);
}

ot::StringWriter *otInstanceGetUptimeAsString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otInstanceGetUptimeAsString", "instance_api.cpp", 92, "(aBuffer) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v4 = (ot::Uptime *)ot::Instance::Get<ot::Uptime>(v3);
  return ot::Uptime::GetUptime(v4, a2, a3);
}

uint64_t otSetStateChangedCallback(uint64_t a1, void (*a2)(unint64_t, void *), uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v4 = (ot::Notifier *)ot::Instance::Get<ot::Notifier>(v3);
  return ot::Notifier::RegisterCallback(v4, a2, a3);
}

uint64_t ot::Instance::Get<ot::Notifier>(uint64_t a1)
{
  return a1 + 72;
}

{
  return ot::Instance::Get<ot::Notifier>(a1);
}

uint64_t otRemoveStateChangeCallback(uint64_t a1, void (*a2)(unint64_t, void *), uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Notifier>(v3);
  return ot::Notifier::RemoveCallback(v4, a2, a3);
}

void otInstanceFactoryReset(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  ot::Instance::FactoryReset(v1);
}

uint64_t otInstanceErasePersistentInfo(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  return ot::Instance::ErasePersistentInfo(v1);
}

const char *otGetVersionString()
{
  return "OPENTHREAD/0.01.00; POSIX; Nov 10 2024 03:00:22";
}

uint64_t otGetRadioVersionString(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Radio *)ot::Instance::Get<ot::Radio>(v1);
  return ot::Radio::GetVersionString(v2);
}

uint64_t ot::Radio::GetVersionString(ot::Radio *this)
{
  return otPlatRadioGetVersionString();
}

{
  return ot::Radio::GetVersionString(this);
}

uint64_t otIp6SetEnabled(uint64_t a1, char a2)
{
  char v14 = a2 & 1;
  unsigned int v13 = 0;
  uint64_t v12 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v12);
  if (ot::Mac::LinkRaw::IsEnabled(v2))
  {
    return 13;
  }
  else
  {
    uint64_t v3 = ot::Instance::Get<ot::ThreadNetif>(v12);
    if (v14) {
      ot::ThreadNetif::Up(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    else {
      ot::ThreadNetif::Down(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return v13;
}

uint64_t ot::Instance::Get<ot::Mac::LinkRaw>(uint64_t a1)
{
  return a1 + 166360;
}

{
  return ot::Instance::Get<ot::Mac::LinkRaw>(a1);
}

BOOL ot::Mac::LinkRaw::IsEnabled(ot::Mac::LinkRaw *this)
{
  return *((void *)this + 1) != 0;
}

{
  return ot::Mac::LinkRaw::IsEnabled(this);
}

uint64_t ot::Instance::Get<ot::ThreadNetif>(uint64_t a1)
{
  return a1 + 85536;
}

{
  return ot::Instance::Get<ot::ThreadNetif>(a1);
}

uint64_t otIp6IsEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::ThreadNetif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  return ot::ThreadNetif::IsUp(v2) & 1;
}

uint64_t ot::ThreadNetif::IsUp(ot::ThreadNetif *this)
{
  return *((unsigned char *)this + 696) & 1;
}

{
  return ot::ThreadNetif::IsUp(this);
}

uint64_t otIp6GetUnicastAddresses(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  ot::Ip6::Netif::GetUnicastAddresses(v2);
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(v3);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(a1);
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(a1);
}

uint64_t otIp6AddUnicastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  uint64_t v3 = (const ot::Ip6::Netif::UnicastAddress *)ot::AsCoreType<otNetifAddress>(a2);
  return ot::Ip6::Netif::AddExternalUnicastAddress(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetifAddress>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otIp6RemoveUnicastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  uint64_t v3 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Netif::RemoveExternalUnicastAddress(v5, v3);
}

uint64_t otIp6GetMulticastAddresses(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  uint64_t MulticastAddresses = ot::Ip6::Netif::GetMulticastAddresses(v2);
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(MulticastAddresses);
}

uint64_t ot::Ip6::Netif::GetMulticastAddresses(ot::Ip6::Netif *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::Ip6::Netif::GetMulticastAddresses(this);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(a1);
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(a1);
}

uint64_t otIp6SubscribeMulticastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  uint64_t v3 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Netif::SubscribeExternalMulticast(v5, v3);
}

uint64_t otIp6UnsubscribeMulticastAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v2);
  uint64_t v3 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Netif::UnsubscribeExternalMulticast(v5, v3);
}

uint64_t otIp6IsMulticastPromiscuousEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Ip6::Netif *)ot::Instance::Get<ot::ThreadNetif>(v1);
  return ot::Ip6::Netif::IsMulticastPromiscuousEnabled(v2) & 1;
}

uint64_t ot::Ip6::Netif::IsMulticastPromiscuousEnabled(ot::Ip6::Netif *this)
{
  return *((unsigned char *)this + 16) & 1;
}

{
  return ot::Ip6::Netif::IsMulticastPromiscuousEnabled(this);
}

uint64_t otIp6SetMulticastPromiscuousEnabled(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::ThreadNetif>(v2);
  return ot::Ip6::Netif::SetMulticastPromiscuous(v3, v5 & 1);
}

uint64_t ot::Ip6::Netif::SetMulticastPromiscuous(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16) = a2 & 1;
  return this;
}

{
  return ot::Ip6::Netif::SetMulticastPromiscuous(this, a2);
}

void *otIp6SetReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Ip6::Ip6>(v3);
  return ot::Ip6::Ip6::SetReceiveDatagramCallback(v4, a2, a3);
}

uint64_t ot::Instance::Get<ot::Ip6::Ip6>(uint64_t a1)
{
  return a1 + 85224;
}

{
  return ot::Instance::Get<ot::Ip6::Ip6>(a1);
}

void *ot::Ip6::Ip6::SetReceiveDatagramCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otMessage *,void *)>::Set((void *)(a1 + 8), a2, a3);
}

{
  return ot::Ip6::Ip6::SetReceiveDatagramCallback(a1, a2, a3);
}

uint64_t otIp6SetLargeScopeMulticastReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Ip6::Ip6>(v3);
  return ot::Ip6::Ip6::SetLargeScopeMulticastReceiveDatagramCallback(v4, a2, a3);
}

void *otIp6SetAddressCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::ThreadNetif>(v3);
  return ot::Ip6::Netif::SetAddressCallback(v4, a2, a3);
}

void *ot::Ip6::Netif::SetAddressCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::Set((void *)(a1 + 24), a2, a3);
}

{
  return ot::Ip6::Netif::SetAddressCallback(a1, a2, a3);
}

uint64_t otIp6IsReceiveFilterEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v1);
  return ot::Ip6::Ip6::IsReceiveIp6FilterEnabled(v2) & 1;
}

uint64_t ot::Ip6::Ip6::IsReceiveIp6FilterEnabled(ot::Ip6::Ip6 *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::Ip6::Ip6::IsReceiveIp6FilterEnabled(this);
}

unsigned char *otIp6SetReceiveFilterEnabled(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (unsigned char *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  return ot::Ip6::Ip6::SetReceiveIp6FilterEnabled(v3, v5 & 1);
}

unsigned char *ot::Ip6::Ip6::SetReceiveIp6FilterEnabled(unsigned char *this, char a2)
{
  *this = a2 & 1;
  return this;
}

{
  return ot::Ip6::Ip6::SetReceiveIp6FilterEnabled(this, a2);
}

uint64_t otIp6Send(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  uint64_t v3 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  return ot::Ip6::Ip6::SendRaw(v5, v3, 1);
}

uint64_t otIp6GetSourceDestinationAddressandPort(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v3);
  uint64_t v4 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  return ot::Ip6::Ip6::extractAddressAndportfromHeader(v6, v4, a3);
}

ot::Buffer *otIp6NewMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  uint64_t v3 = (const ot::Message::Settings *)ot::Message::Settings::From(a2);
  return ot::Ip6::Ip6::NewMessage(v5, 0, v3);
}

ot::Message *otIp6NewMessageFromBuffer(uint64_t a1, char *a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v4);
  char v5 = (const ot::Message::Settings *)ot::Message::Settings::From(a4);
  return ot::Ip6::Ip6::NewMessageFromData(v7, a2, a3, v5);
}

uint64_t otIp6AddUnsecurePort(uint64_t a1, __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v2);
  return ot::Ip6::Filter::AddUnsecurePort(v3, a2);
}

uint64_t ot::Instance::Get<ot::Ip6::Filter>(uint64_t a1)
{
  return a1 + 88002;
}

{
  return ot::Instance::Get<ot::Ip6::Filter>(a1);
}

uint64_t ot::Ip6::Filter::AddUnsecurePort(ot::Ip6::Filter *this, __int16 a2)
{
  return ot::Ip6::Filter::UpdateUnsecurePorts((uint64_t)this, 0, a2);
}

{
  return ot::Ip6::Filter::AddUnsecurePort(this, a2);
}

uint64_t otIp6RemoveUnsecurePort(uint64_t a1, __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v2);
  return ot::Ip6::Filter::RemoveUnsecurePort(v3, a2);
}

uint64_t ot::Ip6::Filter::RemoveUnsecurePort(ot::Ip6::Filter *this, __int16 a2)
{
  return ot::Ip6::Filter::UpdateUnsecurePorts((uint64_t)this, 1, a2);
}

{
  return ot::Ip6::Filter::RemoveUnsecurePort(this, a2);
}

uint64_t otIp6RemoveAllUnsecurePorts(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v1);
  return ot::Ip6::Filter::RemoveAllUnsecurePorts(v2);
}

uint64_t ot::Ip6::Filter::RemoveAllUnsecurePorts(ot::Ip6::Filter *this)
{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Clear((uint64_t)this);
}

{
  return ot::Ip6::Filter::RemoveAllUnsecurePorts(this);
}

uint64_t otIp6GetUnsecurePorts(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otIp6GetUnsecurePorts", "ip6_api.cpp", 183, "(aNumEntries) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Ip6::Filter *)ot::Instance::Get<ot::Ip6::Filter>(v2);
  return ot::Ip6::Filter::GetUnsecurePorts(v3, a2);
}

uint64_t ot::Ip6::Filter::GetUnsecurePorts(ot::Ip6::Filter *this, unsigned __int8 *a2)
{
  *a2 = ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetLength((uint64_t)this);
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::operator[]((uint64_t)this, 0);
}

{
  return ot::Ip6::Filter::GetUnsecurePorts(this, a2);
}

BOOL otIp6IsAddressEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)ot::AsCoreType<otIp6Address>(a1);
  uint64_t v2 = (const void *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Equatable<ot::Ip6::Address>::operator==(v4, v2);
}

BOOL otIp6ArePrefixesEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)ot::AsCoreType<otIp6Prefix>(a1);
  uint64_t v2 = (unsigned __int8 *)ot::AsCoreType<otIp6Prefix>(a2);
  return ot::Ip6::Prefix::operator==(v4, v2);
}

uint64_t otIp6AddressFromString(const char *a1, uint64_t a2)
{
  uint64_t v2 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Address::FromString(v2, a1);
}

uint64_t otIp6PrefixFromString(ot *a1, uint64_t a2)
{
  uint64_t v2 = (const char **)ot::AsCoreType<otIp6Prefix>(a2);
  return ot::Ip6::Prefix::FromString(v2, a1);
}

ot::StringWriter *otIp6AddressToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp6AddressToString", "ip6_api.cpp", 210, "(aBuffer) != nullptr");
  }
  uint64_t v3 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a1);
  return ot::Ip6::Address::ToString(v3, a2, a3);
}

ot::StringWriter *otIp6SockAddrToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp6SockAddrToString", "ip6_api.cpp", 217, "(aBuffer) != nullptr");
  }
  uint64_t v3 = (ot::Ip6::SockAddr *)ot::AsCoreType<otSockAddr>(a1);
  return ot::Ip6::SockAddr::ToString(v3, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otSockAddr>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

ot::StringWriter *otIp6PrefixToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp6PrefixToString", "ip6_api.cpp", 224, "(aBuffer) != nullptr");
  }
  uint64_t v3 = (ot::Ip6::Prefix *)ot::AsCoreType<otIp6Prefix>(a1);
  return ot::Ip6::Prefix::ToString(v3, a2, a3);
}

uint64_t otIp6PrefixMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a1);
  uint64_t v2 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Ip6::Address::PrefixMatch(v4, v2);
}

void *otIp6GetPrefix(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  char v5 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a1);
  uint64_t v3 = (ot::Ip6::Prefix *)ot::AsCoreType<otIp6Prefix>(a3);
  return ot::Ip6::Address::GetPrefix(v5, a2, v3);
}

void *ot::Ip6::Address::GetPrefix(ot::Ip6::Address *this, unsigned __int8 a2, ot::Ip6::Prefix *a3)
{
  return ot::Ip6::Prefix::Set(a3, (const unsigned __int8 *)this, a2);
}

{
  return ot::Ip6::Address::GetPrefix(this, a2, a3);
}

BOOL otIp6IsAddressUnspecified(uint64_t a1)
{
  uint64_t v1 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a1);
  return ot::Ip6::Address::IsUnspecified(v1);
}

uint64_t otIp6SelectSourceAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>(v2);
  uint64_t v3 = (ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a2);
  return ot::Ip6::Ip6::SelectSourceAddress(v5, v3);
}

uint64_t otIp6RegisterMulticastListeners(uint64_t a1, char *a2, unsigned __int8 a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (ot::InstanceLocator *)ot::Instance::Get<ot::MlrManager>(v6);
  return ot::MlrManager::RegisterMulticastListeners(v7, a2, a3, a4, a5, a6);
}

uint64_t ot::Instance::Get<ot::MlrManager>(uint64_t a1)
{
  return a1 + 153560;
}

{
  return ot::Instance::Get<ot::MlrManager>(a1);
}

uint64_t otIp6IsSlaacEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::Slaac *)ot::Instance::Get<ot::Utils::Slaac>(v1);
  return ot::Utils::Slaac::IsEnabled(v2) & 1;
}

uint64_t ot::Instance::Get<ot::Utils::Slaac>(uint64_t a1)
{
  return a1 + 87120;
}

{
  return ot::Instance::Get<ot::Utils::Slaac>(a1);
}

uint64_t ot::Utils::Slaac::IsEnabled(ot::Utils::Slaac *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::Utils::Slaac::IsEnabled(this);
}

unsigned char *otIp6SetSlaacEnabled(uint64_t a1, char a2)
{
  char v12 = a2 & 1;
  uint64_t v11 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (unsigned char *)ot::Instance::Get<ot::Utils::Slaac>(v11);
  if (v12) {
    return ot::Utils::Slaac::Enable(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  else {
    return ot::Utils::Slaac::Disable(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void otIp6SetSlaacPrefixFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Utils::Slaac>(v2);
  ot::Utils::Slaac::SetFilter(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t otIp6ProtoToString(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::Ip6::Ip6::IpProtoToString((ot::Ip6::Ip6 *)a1, a2, a3, a4, a5, a6);
}

void *ot::CallbackBase<void (*)(otMessage *,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otMessage *,void *)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::Set(result, a2, a3);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::Clear(uint64_t result)
{
  *(unsigned char *)(result + 4) = 0;
  return result;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Clear(result);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetLength(a1);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::operator[](uint64_t a1, unsigned __int8 a2)
{
  return a1 + 2 * a2;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::operator[](a1, a2);
}

uint64_t otJoinerStart(uint64_t a1, ot *a2, ot *a3, ot *a4, ot *a5, ot *a6, char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = ot::AsCoreType<otInstance>(a1);
  uint64_t v10 = ot::Instance::Get<ot::MeshCoP::Joiner>(v9);
  return ot::MeshCoP::Joiner::Start(v10, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Instance::Get<ot::MeshCoP::Joiner>(uint64_t a1)
{
  return a1 + 145264;
}

{
  return ot::Instance::Get<ot::MeshCoP::Joiner>(a1);
}

unsigned __int8 *otJoinerStop(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  return ot::MeshCoP::Joiner::Stop(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t otJoinerGetState(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  unsigned __int8 State = ot::MeshCoP::Joiner::GetState(v2);
  return ot::MapEnum<ot::MeshCoP::Joiner::State>(State);
}

uint64_t ot::MapEnum<ot::MeshCoP::Joiner::State>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::MeshCoP::Joiner::State>(result);
}

uint64_t ot::MeshCoP::Joiner::GetState(ot::MeshCoP::Joiner *this)
{
  return *((unsigned __int8 *)this + 24);
}

{
  return ot::MeshCoP::Joiner::GetState(this);
}

uint64_t otJoinerGetRepeatScan(uint64_t a1)
{
  uint64_t v1 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(a1);
  return ot::MeshCoP::Joiner::GetRepeatScan(v1);
}

uint64_t ot::MeshCoP::Joiner::GetRepeatScan(ot::MeshCoP::Joiner *this)
{
  return *((unsigned __int8 *)this + 112);
}

{
  return ot::MeshCoP::Joiner::GetRepeatScan(this);
}

uint64_t otJoinerSetRepeatScan(uint64_t a1, char a2)
{
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(a1);
  return ot::MeshCoP::Joiner::SetRepeatScan(v2, a2);
}

uint64_t ot::MeshCoP::Joiner::SetRepeatScan(ot::MeshCoP::Joiner *this, char a2)
{
  *((unsigned char *)this + 112) = a2;
  return 0;
}

{
  return ot::MeshCoP::Joiner::SetRepeatScan(this, a2);
}

void otJoinerGetId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  ot::MeshCoP::Joiner::GetId(v2);
}

uint64_t otJoinerSetDiscerner(uint64_t a1, uint64_t a2)
{
  *(void *)&v6[4] = a2;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v2);
  if (*(void *)&v6[4])
  {
    uint64_t v3 = (const ot::MeshCoP::JoinerDiscerner *)ot::AsCoreType<otJoinerDiscerner>(*(uint64_t *)&v6[4]);
    *(_DWORD *)uint64_t v6 = ot::MeshCoP::Joiner::SetDiscerner(v5, v3);
  }
  else
  {
    *(void *)uint64_t v6 = ot::MeshCoP::Joiner::ClearDiscerner(v5);
  }
  return *(unsigned int *)v6;
}

uint64_t otJoinerGetDiscerner(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::Joiner *)ot::Instance::Get<ot::MeshCoP::Joiner>(v1);
  return ot::MeshCoP::Joiner::GetDiscerner(v2);
}

char *otJoinerStateToString(int a1)
{
  if (a1 > 5) {
    __assert_rtn("otJoinerStateToString", "joiner_api.cpp", 112, "aState <= OT_JOINER_STATE_JOINED");
  }
  unsigned __int8 v1 = ot::MapEnum<otJoinerState>(a1);
  return ot::MeshCoP::Joiner::StateToString(v1);
}

uint64_t ot::MapEnum<otJoinerState>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otJoinerState>(result);
}

uint64_t otLinkGetChannel(uint64_t a1)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  unsigned __int8 v1 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v6);
  if (ot::Mac::LinkRaw::IsEnabled(v1))
  {
    uint64_t v2 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v6);
    return ot::Mac::LinkRaw::GetChannel(v2);
  }
  else
  {
    uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v6);
    return ot::Mac::Mac::GetPanChannel(v3);
  }
}

uint64_t ot::Mac::LinkRaw::GetChannel(ot::Mac::LinkRaw *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Mac::LinkRaw::GetChannel(this);
}

uint64_t ot::Mac::Mac::GetPanChannel(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 10);
}

{
  return ot::Mac::Mac::GetPanChannel(this);
}

uint64_t otLinkSetChannel(uint64_t a1, char a2)
{
  uint64_t v9 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v9);
  if (ot::Mac::LinkRaw::IsEnabled(v2))
  {
    uint64_t v3 = (ot::Mac::LinkRaw *)ot::Instance::Get<ot::Mac::LinkRaw>(v9);
    return ot::Mac::LinkRaw::SetChannel(v3, a2);
  }
  else
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v9);
    if (ot::Mle::Mle::IsDisabled(v4))
    {
      uint64_t v5 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v9);
      unsigned int v10 = ot::Mac::Mac::SetPanChannel(v5, a2);
      if (!v10)
      {
        uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v9);
        ot::MeshCoP::ActiveDatasetManager::Clear(active);
        uint64_t v7 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v9);
        ot::MeshCoP::PendingDatasetManager::Clear(v7);
      }
    }
    else
    {
      return 13;
    }
  }
  return v10;
}

uint64_t ot::MeshCoP::ActiveDatasetManager::Clear(ot::MeshCoP::ActiveDatasetManager *this)
{
  return ot::MeshCoP::DatasetManager::Clear(this);
}

{
  return ot::MeshCoP::ActiveDatasetManager::Clear(this);
}

uint64_t otLinkGetSupportedChannelMask(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  uint64_t SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  return ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
}

uint64_t ot::Mac::Mac::GetSupportedChannelMask(ot::Mac::Mac *this)
{
  return (uint64_t)this + 12;
}

{
  return ot::Mac::Mac::GetSupportedChannelMask(this);
}

uint64_t otLinkSetSupportedChannelMask(uint64_t a1, int a2)
{
  uint64_t v9 = a1;
  int v8 = a2;
  unsigned int v7 = 0;
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v6);
  if (ot::Mle::Mle::IsDisabled(v2))
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v6);
    ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v5, v8);
    ot::Mac::Mac::SetSupportedChannelMask(v4, (const ot::Mac::ChannelMask *)v5);
  }
  else
  {
    return 13;
  }
  return v7;
}

uint64_t otLinkGetExtendedAddress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetExtAddress(v2);
}

uint64_t otLinkSetExtendedAddress(uint64_t a1, uint64_t a2)
{
  unsigned int v8 = 0;
  uint64_t v7 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v7);
  if (ot::Mle::Mle::IsDisabled(v2))
  {
    uint64_t v6 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v7);
    uint64_t v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
    ot::Mac::Mac::SetExtAddress(v6, v3);
    uint64_t v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v7);
    ot::Mle::Mle::UpdateLinkLocalAddress(v4);
  }
  else
  {
    return 13;
  }
  return v8;
}

void ot::Mac::Mac::SetExtAddress(ot::Mac::Mac *this, const ot::Mac::ExtAddress *a2)
{
}

{
  ot::Mac::Mac::SetExtAddress(this, a2);
}

uint64_t otLinkGetFactoryAssignedIeeeEui64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Radio *)ot::Instance::Get<ot::Radio>(v2);
  uint64_t v3 = (ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  return ot::Radio::GetIeeeEui64(v5, v3);
}

uint64_t ot::Radio::GetIeeeEui64(ot::Radio *this, ot::Mac::ExtAddress *a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetIeeeEui64((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::GetIeeeEui64(this, a2);
}

uint64_t otLinkGetPanId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetPanId(v2);
}

uint64_t otLinkSetPanId(uint64_t a1, __int16 a2)
{
  unsigned int v8 = 0;
  uint64_t v7 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v7);
  if (ot::Mle::Mle::IsDisabled(v2))
  {
    uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v7);
    ot::Mac::Mac::SetPanId(v3, a2);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v7);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v5 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v7);
    ot::MeshCoP::PendingDatasetManager::Clear(v5);
  }
  else
  {
    return 13;
  }
  return v8;
}

uint64_t otLinkGetCslRequestAhead(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::CslTxScheduler *)ot::Instance::Get<ot::CslTxScheduler>(v1);
  return ot::CslTxScheduler::GetFrameRequestAheadUs(v2);
}

uint64_t ot::Instance::Get<ot::CslTxScheduler>(uint64_t a1)
{
  return a1 + 90232;
}

{
  return ot::Instance::Get<ot::CslTxScheduler>(a1);
}

uint64_t otLinkSetCslRequestAhead(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (_DWORD *)ot::Instance::Get<ot::CslTxScheduler>(v2);
  ot::CslTxScheduler::SetFrameRequestAheadUs(v3, a2);
  return 0;
}

uint64_t otLinkGetPollPeriod(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v1);
  return ot::DataPollSender::GetKeepAlivePollPeriod(v2);
}

uint64_t ot::Instance::Get<ot::DataPollSender>(uint64_t a1)
{
  return a1 + 90264;
}

{
  return ot::Instance::Get<ot::DataPollSender>(a1);
}

uint64_t otLinkSetPollPeriod(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v2);
  return ot::DataPollSender::SetExternalPollPeriod(v3, a2);
}

uint64_t otLinkSendDataRequest(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v1);
  return ot::DataPollSender::SendDataPoll(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t otLinkGetShortAddress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetShortAddress(v2);
}

uint64_t ot::Mac::Mac::GetShortAddress(ot::Mac::Mac *this)
{
  return (unsigned __int16)ot::Mac::Links::GetShortAddress((ot::Mac::Mac *)((char *)this + 56));
}

{
  return ot::Mac::Mac::GetShortAddress(this);
}

uint64_t otLinkGetMaxFrameRetriesDirect(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetMaxFrameRetriesDirect(v2);
}

uint64_t ot::Mac::Mac::GetMaxFrameRetriesDirect(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 24);
}

{
  return ot::Mac::Mac::GetMaxFrameRetriesDirect(this);
}

uint64_t otLinkSetMaxFrameRetriesDirect(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::SetMaxFrameRetriesDirect(v3, a2);
}

uint64_t ot::Mac::Mac::SetMaxFrameRetriesDirect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  return this;
}

{
  return ot::Mac::Mac::SetMaxFrameRetriesDirect(this, a2);
}

uint64_t otLinkGetMaxFrameRetriesIndirect(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetMaxFrameRetriesIndirect(v2);
}

uint64_t ot::Mac::Mac::GetMaxFrameRetriesIndirect(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 25);
}

{
  return ot::Mac::Mac::GetMaxFrameRetriesIndirect(this);
}

uint64_t otLinkSetMaxFrameRetriesIndirect(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::SetMaxFrameRetriesIndirect(v3, a2);
}

uint64_t ot::Mac::Mac::SetMaxFrameRetriesIndirect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return this;
}

{
  return ot::Mac::Mac::SetMaxFrameRetriesIndirect(this, a2);
}

uint64_t otLinkFilterGetAddressMode(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v1);
  unsigned __int8 Mode = ot::Mac::Filter::GetMode(v2);
  return ot::MapEnum<ot::Mac::Filter::Mode>(Mode);
}

uint64_t ot::MapEnum<ot::Mac::Filter::Mode>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::Mac::Filter::Mode>(result);
}

uint64_t ot::Instance::Get<ot::Mac::Filter>(uint64_t a1)
{
  return a1 + 89524;
}

{
  return ot::Instance::Get<ot::Mac::Filter>(a1);
}

uint64_t ot::Mac::Filter::GetMode(ot::Mac::Filter *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Mac::Filter::GetMode(this);
}

unsigned char *otLinkFilterSetAddressMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (unsigned char *)ot::Instance::Get<ot::Mac::Filter>(v2);
  char v3 = ot::MapEnum<otMacFilterAddressMode>(a2);
  return ot::Mac::Filter::SetMode(v5, v3);
}

unsigned char *ot::Mac::Filter::SetMode(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::Mac::Filter::SetMode(result, a2);
}

uint64_t ot::MapEnum<otMacFilterAddressMode>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otMacFilterAddressMode>(result);
}

uint64_t otLinkFilterAddAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v2);
  char v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  return ot::Mac::Filter::AddAddress(v5, v3);
}

void otLinkFilterRemoveAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v2);
  char v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  ot::Mac::Filter::RemoveAddress(v4, v3);
}

uint64_t otLinkFilterClearAddresses(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::Mac::Filter>(v1);
  return ot::Mac::Filter::ClearAddresses(v2);
}

uint64_t otLinkFilterGetNextAddress(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otLinkFilterGetNextAddress", "link_api.cpp", 233, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otLinkFilterGetNextAddress", "link_api.cpp", 234, "(aEntry) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Mac::Filter>(v3);
  return ot::Mac::Filter::GetNextAddress(v4, a2, a3);
}

uint64_t otLinkFilterAddRssIn(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v3);
  uint64_t v4 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  return ot::Mac::Filter::AddRssIn(v6, v4, a3);
}

void otLinkFilterRemoveRssIn(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::Mac::Filter *)ot::Instance::Get<ot::Mac::Filter>(v2);
  uint64_t v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  ot::Mac::Filter::RemoveRssIn(v4, v3);
}

uint64_t otLinkFilterSetDefaultRssIn(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mac::Filter>(v2);
  return ot::Mac::Filter::SetDefaultRssIn(v3, a2);
}

uint64_t ot::Mac::Filter::SetDefaultRssIn(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1) = a2;
  return this;
}

{
  return ot::Mac::Filter::SetDefaultRssIn(this, a2);
}

uint64_t otLinkFilterClearDefaultRssIn(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::Mac::Filter>(v1);
  return ot::Mac::Filter::ClearDefaultRssIn(v2);
}

uint64_t ot::Mac::Filter::ClearDefaultRssIn(uint64_t this)
{
  *(unsigned char *)(this + 1) = 127;
  return this;
}

{
  return ot::Mac::Filter::ClearDefaultRssIn(this);
}

uint64_t otLinkFilterClearAllRssIn(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::Mac::Filter>(v1);
  return ot::Mac::Filter::ClearAllRssIn(v2);
}

uint64_t otLinkFilterGetNextRssIn(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otLinkFilterGetNextRssIn", "link_api.cpp", 263, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otLinkFilterGetNextRssIn", "link_api.cpp", 264, "(aEntry) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Mac::Filter>(v3);
  return ot::Mac::Filter::GetNextRssIn(v4, a2, a3);
}

void otLinkSetRadioFilterEnabled(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::SetRadioFilterEnabled(v3, v4 & 1);
}

uint64_t otLinkIsRadioFilterEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsRadioFilterEnabled(v2) & 1;
}

uint64_t ot::Mac::Mac::IsRadioFilterEnabled(ot::Mac::Mac *this)
{
  SubMac = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
  return ot::Mac::SubMac::IsRadioFilterEnabled(SubMac) & 1;
}

{
  return ot::Mac::Mac::IsRadioFilterEnabled(this);
}

uint64_t otLinkConvertRssToLinkQuality(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  unsigned __int8 v4 = ot::Mac::Mac::ComputeLinkMargin(v3, a2);
  return ot::LinkQualityForLinkMargin((ot *)v4);
}

uint64_t otLinkConvertLinkQualityToRss(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  char NoiseFloor = ot::Mac::Mac::GetNoiseFloor(v3);
  return (char)ot::GetTypicalRssForLinkQuality(NoiseFloor, a2);
}

uint64_t ot::Mac::Mac::GetNoiseFloor(ot::Mac::Mac *this)
{
  return (char)ot::Mac::Links::GetNoiseFloor((ot::Mac::Mac *)((char *)this + 56));
}

{
  return ot::Mac::Mac::GetNoiseFloor(this);
}

uint64_t otLinkGetTxDirectRetrySuccessHistogram(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otLinkGetTxDirectRetrySuccessHistogram", "link_api.cpp", 297, "(aNumberOfEntries) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetDirectRetrySuccessHistogram(v3, a2);
}

uint64_t otLinkGetTxIndirectRetrySuccessHistogram(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    __assert_rtn("otLinkGetTxIndirectRetrySuccessHistogram", "link_api.cpp", 306, "(aNumberOfEntries) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetIndirectRetrySuccessHistogram(v3, a2);
}

void *otLinkResetTxRetrySuccessHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ResetRetrySuccessHistogram(v2);
}

uint64_t otLinkGetTxDirectErrorNoAckHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetDirectErrorNoAckHistogram(v3, a2);
}

uint64_t otLinkGetTxDirectErrorChannelAccessFailureHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::GetDirectErrorChannelAccessFailureHistogram(v3, a2);
}

void *otLinkResetTxErrorHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ResetTxErrorHistogram(v2);
}

void otLinkGetTxPacketSizeHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetTxSizeHistogram(v3, a2);
}

void otLinkGetRxPacketSizeHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetRxSizeHistogram(v3, a2);
}

void otLinkGetLqiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetRxLqiHistogram(v3, a2);
}

void otLinkGetRouterRssiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetRouterRssiHistogram(v3, a2);
}

void otLinkGetEndDeviceRssiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetEndDeviceRssiHistogram(v3, a2);
}

void otLinkGetJoinerRssiHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::GetJoinerRssiHistogram(v3, a2);
}

void *otLinkResetPacketSizeHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearSizeHistograms(v2);
}

void *otLinkResetLqiHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearLqiHistogram(v2);
}

void *otLinkResetNeighborRssiHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearNeighborRssiHistograms(v2);
}

void *otLinkResetJoinerRssiHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ClearJoinerRssiHistograms(v2);
}

void *otLinkSetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Mac::Mac>(v3);
  return ot::Mac::Mac::SetPcapCallback(v4, a2, a3);
}

void *ot::Mac::Mac::SetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::Mac::Links::SetPcapCallback(a1 + 56, a2, a3);
}

{
  return ot::Mac::Mac::SetPcapCallback(a1, a2, a3);
}

uint64_t otLinkIsPromiscuous(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsPromiscuous(v2) & 1;
}

uint64_t ot::Mac::Mac::IsPromiscuous(ot::Mac::Mac *this)
{
  return (*(unsigned __int8 *)this >> 3) & 1;
}

{
  return ot::Mac::Mac::IsPromiscuous(this);
}

uint64_t otLinkSetPromiscuous(uint64_t a1, char a2)
{
  char v7 = a2 & 1;
  unsigned int v6 = 0;
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::ThreadNetif *)ot::Instance::Get<ot::ThreadNetif>(v5);
  if (ot::ThreadNetif::IsUp(v2))
  {
    return 13;
  }
  else
  {
    uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v5);
    ot::Mac::Mac::SetPromiscuous(v3, v7 & 1);
  }
  return v6;
}

uint64_t otLinkSetEnabled(uint64_t a1, char a2)
{
  char v7 = a2 & 1;
  unsigned int v6 = 0;
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::ThreadNetif *)ot::Instance::Get<ot::ThreadNetif>(v5);
  if (ot::ThreadNetif::IsUp(v2))
  {
    return 13;
  }
  else
  {
    uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v5);
    ot::Mac::Mac::SetEnabled(v3, v7 & 1);
  }
  return v6;
}

uint64_t otLinkIsEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsEnabled(v2) & 1;
}

uint64_t ot::Mac::Mac::IsEnabled(ot::Mac::Mac *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::Mac::Mac::IsEnabled(this);
}

uint64_t otLinkGetCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetCounters(v2);
}

uint64_t ot::Mac::Mac::GetCounters(ot::Mac::Mac *this)
{
  return (uint64_t)this + 328;
}

{
  return ot::Mac::Mac::GetCounters(this);
}

void *otLinkResetCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::ResetCounters(v2);
}

void *ot::Mac::Mac::ResetCounters(ot::Mac::Mac *this)
{
  return memset((char *)this + 328, 0, 0xB8uLL);
}

{
  return ot::Mac::Mac::ResetCounters(this);
}

void otLinkRegenerateExAddr(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  ot::Mac::Mac::RegenerateExtAddr(v2);
}

uint64_t otLinkRegenerateMleIid(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GenerateMleIid(v2);
}

uint64_t otLinkActiveScan(uint64_t a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v5);
  return ot::Mac::Mac::ActiveScan(v6, a2, a3, a4, a5);
}

BOOL otLinkIsActiveScanInProgress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsActiveScanInProgress(v2);
}

BOOL ot::Mac::Mac::IsActiveScanInProgress(ot::Mac::Mac *this)
{
  return ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 1u);
}

{
  return ot::Mac::Mac::IsActiveScanInProgress(this);
}

uint64_t otLinkEnergyScan(uint64_t a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v5);
  return ot::Mac::Mac::EnergyScan(v6, a2, a3, a4, a5);
}

BOOL otLinkIsEnergyScanInProgress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsEnergyScanInProgress(v2);
}

BOOL ot::Mac::Mac::IsEnergyScanInProgress(ot::Mac::Mac *this)
{
  return ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 2u);
}

{
  return ot::Mac::Mac::IsEnergyScanInProgress(this);
}

uint64_t otLinkIsInTransmitState(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsInTransmitState(v2) & 1;
}

uint64_t otLinkGetCcaFailureRate(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetCcaFailureRate(v2);
}

uint64_t ot::Mac::Mac::GetCcaFailureRate(ot::Mac::Mac *this)
{
  return (unsigned __int16)ot::SuccessRateTracker::GetFailureRate((ot::Mac::Mac *)((char *)this + 516));
}

{
  return ot::Mac::Mac::GetCcaFailureRate(this);
}

uint64_t otLinkGetMleAdvTxNum(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetMleAdvTxNum(v2);
}

uint64_t ot::Mac::Mac::GetMleAdvTxNum(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 26);
}

{
  return ot::Mac::Mac::GetMleAdvTxNum(this);
}

uint64_t otLinkSetMleAdvTxNum(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  return ot::Mac::Mac::SetMleAdvTxNum(v3, a2);
}

uint64_t otLinkCslPeriodToUs(unsigned __int16 a1)
{
  return 160 * a1;
}

uint64_t otLinkCslPeriodToMs(unsigned __int16 a1)
{
  return 160 * a1 / 0x3E8;
}

uint64_t otLinkCslGetChannel(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetCslChannel(v2);
}

uint64_t ot::Mac::Mac::GetCslChannel(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 32);
}

{
  return ot::Mac::Mac::GetCslChannel(this);
}

uint64_t otLinkCslSetChannel(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v5 = 0;
  if (ot::Radio::IsCslChannelValid((ot::Radio *)a2))
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
    ot::Mac::Mac::SetCslChannel(v3, a2);
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::Radio::IsCslChannelValid(ot::Radio *this)
{
  char v4 = 1;
  if ((_BYTE)this)
  {
    char v3 = 1;
    if (this != 11)
    {
      BOOL v2 = 0;
      if (this > 0xBu) {
        BOOL v2 = this <= 0x19u;
      }
      char v3 = v2;
    }
    char v4 = v3;
  }
  return v4 & 1;
}

{
  return ot::Radio::IsCslChannelValid(this);
}

uint64_t otLinkCslGetPeriod(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return (unsigned __int16)ot::Mac::Mac::GetCslPeriod(v2);
}

uint64_t ot::Mac::Mac::GetCslPeriod(ot::Mac::Mac *this)
{
  return *((unsigned __int16 *)this + 17);
}

{
  return ot::Mac::Mac::GetCslPeriod(this);
}

uint64_t otLinkCslSetPeriod(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v5 = 0;
  if (a2 && a2 < 0x3EuLL)
  {
    return 7;
  }
  else
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    char v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
    ot::Mac::Mac::SetCslPeriod(v3, a2);
  }
  return v5;
}

uint64_t otLinkCslGetTimeout(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetCslTimeout(v2);
}

uint64_t ot::Mle::Mle::GetCslTimeout(ot::Mle::Mle *this)
{
  return *((unsigned int *)this + 169);
}

{
  return ot::Mle::Mle::GetCslTimeout(this);
}

uint64_t otLinkCslSetTimeout(uint64_t a1, unsigned int a2)
{
  unsigned int v5 = 0;
  if (a2 <= 0x2710uLL)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
    ot::Mle::Mle::SetCslTimeout(v3, a2);
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t otLinkWorGetChannel(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::GetWorChannel(v2);
}

uint64_t ot::Mac::Mac::GetWorChannel(ot::Mac::Mac *this)
{
  return *((unsigned __int8 *)this + 36);
}

{
  return ot::Mac::Mac::GetWorChannel(this);
}

uint64_t otLinkWorSetChannel(uint64_t a1, char a2)
{
  unsigned int v8 = 0;
  uint64_t v7 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v7);
  if (ot::Mle::Mle::IsDisabled(v2))
  {
    uint64_t v3 = ot::Instance::Get<ot::Mac::Mac>(v7);
    ot::Mac::Mac::SetWorChannel(v3, a2);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v7);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    unsigned int v5 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v7);
    ot::MeshCoP::PendingDatasetManager::Clear(v5);
  }
  else
  {
    return 13;
  }
  return v8;
}

unsigned __int8 *otLinkSetFragmentSize(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (unsigned __int8 *)ot::Instance::Get<ot::MeshForwarder>(v2);
  return ot::MeshForwarder::setFragmentSize(v3, a2);
}

unsigned __int8 *ot::MeshForwarder::setFragmentSize(unsigned __int8 *this, unsigned __int8 a2)
{
  if (a2 >= 0x3Fu && a2 <= 0x7Fu) {
    *this = a2;
  }
  return this;
}

{
  return ot::MeshForwarder::setFragmentSize(this, a2);
}

unsigned __int8 *otLinkGetFragmentSize(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (unsigned __int8 *)ot::Instance::Get<ot::MeshForwarder>(v2);
  return ot::MeshForwarder::getFragmentSize(v3, a2);
}

unsigned __int8 *ot::MeshForwarder::getFragmentSize(unsigned __int8 *this, unsigned __int8 *a2)
{
  *a2 = *this;
  return this;
}

{
  return ot::MeshForwarder::getFragmentSize(this, a2);
}

BOOL otLinkIsCslEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v1);
  return ot::Mac::Mac::IsCslEnabled(v2);
}

void otLinkSetDataPollTimeoutCoex(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>(v2);
  ot::Mac::Mac::SetDataPollTimeoutCoex(v3, a2);
}

void otLinkSetCoexLoadMap(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::Mle::SetCoexLoadMapValue(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t otLinkSetDiscoverScanDutyCycle(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::Mle::adjustDutyCycleForSRDiscoverScan(v3, v5 & 1);
}

uint64_t otLinkSetPairingDeviceExtAddr(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v7 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
    uint64_t v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
    return ot::Mle::MleRouter::SetPairingDeviceExtAddr(v7, v3);
  }
  else
  {
    uint64_t v5 = ot::AsCoreType<otInstance>(a1);
    uint64_t v6 = ot::Instance::Get<ot::Mle::MleRouter>(v5);
    return ot::Mle::MleRouter::ResetPairingDeviceExtAddr(v6);
  }
}

uint64_t otLinkGetPairingDeviceExtAddr(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetPairingDeviceExtAddr(v2);
}

void otLinkSetB2BDataPollDelay(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v2);
  ot::DataPollSender::SetB2BDataPollDelay(v3, a2, v4, v5, v6, v7, v8, v9);
}

void otLinkSetSessionPriority(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::DataPollSender *)ot::Instance::Get<ot::DataPollSender>(v2);
  ot::DataPollSender::SetSessionPriority(v3, a2, v4, v5, v6, v7, v8, v9);
}

uint64_t otLinkGetPrioritizedWindowSize(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return (unsigned __int16)ot::Mle::Mle::getPrioritizedWindowSize(v2);
}

void ot::Mac::Links::SetExtAddress(ot::Mac::Links *this, const ot::Mac::ExtAddress *a2)
{
}

{
  ot::Mac::Links::SetExtAddress(this, a2);
}

uint64_t ot::Mac::Links::GetShortAddress(ot::Mac::Links *this)
{
  return (unsigned __int16)ot::Mac::SubMac::GetShortAddress((ot::Mac::Links *)((char *)this + 8));
}

{
  return ot::Mac::Links::GetShortAddress(this);
}

uint64_t ot::Mac::SubMac::GetShortAddress(ot::Mac::SubMac *this)
{
  return *((unsigned __int16 *)this + 3);
}

{
  return ot::Mac::SubMac::GetShortAddress(this);
}

uint64_t ot::Mac::Links::GetSubMac(ot::Mac::Links *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return ot::Mac::Links::GetSubMac(this);
}

{
  return ot::Mac::Links::GetSubMac(this);
}

uint64_t ot::Mac::SubMac::IsRadioFilterEnabled(ot::Mac::SubMac *this)
{
  return (*((unsigned __int8 *)this + 16) >> 1) & 1;
}

{
  return ot::Mac::SubMac::IsRadioFilterEnabled(this);
}

uint64_t ot::Mac::Links::GetNoiseFloor(ot::Mac::Links *this)
{
  return (char)ot::Mac::SubMac::GetNoiseFloor((ot::Mac::Links *)((char *)this + 8));
}

{
  return ot::Mac::Links::GetNoiseFloor(this);
}

void *ot::Mac::Links::SetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::Mac::SubMac::SetPcapCallback(a1 + 8, a2, a3);
}

{
  return ot::Mac::Links::SetPcapCallback(a1, a2, a3);
}

void *ot::Mac::SubMac::SetPcapCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::Set((void *)(a1 + 40), a2, a3);
}

{
  return ot::Mac::SubMac::SetPcapCallback(a1, a2, a3);
}

void *ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::Set(result, a2, a3);
}

uint64_t ot::SuccessRateTracker::GetFailureRate(ot::SuccessRateTracker *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::SuccessRateTracker::GetFailureRate(this);
}

uint64_t otLinkMetricsQuery(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (void *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v6);
  ot::LinkMetrics::Initiator::SetReportCallback(v7, a5, a6);
  uint64_t v8 = ot::AsCoreType<otInstance>(a1);
  char v12 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v8);
  uint64_t v11 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  ot::AsCoreTypePtr<otLinkMetrics>();
  return ot::LinkMetrics::Initiator::Query(v12, v11, a3, v9);
}

uint64_t ot::Instance::Get<ot::LinkMetrics::Initiator>(uint64_t a1)
{
  return a1 + 153912;
}

{
  return ot::Instance::Get<ot::LinkMetrics::Initiator>(a1);
}

void *ot::LinkMetrics::Initiator::SetReportCallback(void *a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::Set(a1, a2, a3);
}

{
  return ot::LinkMetrics::Initiator::SetReportCallback(a1, a2, a3);
}

uint64_t otLinkMetricsConfigForwardTrackingSeries(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v17 = a4;
  uint64_t v7 = ot::AsCoreType<otInstance>(a1);
  char v12 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v7);
  ot::LinkMetrics::Initiator::SetMgmtResponseCallback((uint64_t)v12, a6, a7);
  unsigned int v10 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  uint64_t v11 = (ot::LinkMetrics::SeriesFlags *)ot::AsCoreType<otLinkMetricsSeriesFlags>((uint64_t)&v17);
  ot::AsCoreTypePtr<otLinkMetrics>();
  return ot::LinkMetrics::Initiator::SendMgmtRequestForwardTrackingSeries(v12, (__n128 *)v10, a3, v11, v8);
}

void *ot::LinkMetrics::Initiator::SetMgmtResponseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::Set((void *)(a1 + 16), a2, a3);
}

{
  return ot::LinkMetrics::Initiator::SetMgmtResponseCallback(a1, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otLinkMetricsSeriesFlags>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otLinkMetricsConfigEnhAckProbing(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = ot::AsCoreType<otInstance>(a1);
  unsigned int v13 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v8);
  ot::LinkMetrics::Initiator::SetMgmtResponseCallback((uint64_t)v13, a5, a6);
  ot::LinkMetrics::Initiator::SetEnhAckProbingCallback((uint64_t)v13, a7, a8);
  uint64_t v11 = (__n128 *)ot::AsCoreType<otIp6Address>(a2);
  char v12 = ot::MapEnum<otLinkMetricsEnhAckFlags>(a3);
  ot::AsCoreTypePtr<otLinkMetrics>();
  return ot::LinkMetrics::Initiator::SendMgmtRequestEnhAckProbing(v13, v11, v12, v9);
}

void *ot::LinkMetrics::Initiator::SetEnhAckProbingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::Set((void *)(a1 + 32), a2, a3);
}

{
  return ot::LinkMetrics::Initiator::SetEnhAckProbingCallback(a1, a2, a3);
}

uint64_t ot::MapEnum<otLinkMetricsEnhAckFlags>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otLinkMetricsEnhAckFlags>(result);
}

uint64_t otLinkMetricsSendLinkProbe(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (ot::LinkMetrics::Initiator *)ot::Instance::Get<ot::LinkMetrics::Initiator>(v4);
  uint64_t v5 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::LinkMetrics::Initiator::SendLinkProbe(v7, v5, a3, a4);
}

void *ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::Set(result, a2, a3);
}

uint64_t otPlatCryptoAesInit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x120uLL) {
      mbedtls_aes_init();
    }
    else {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoAesSetKey(uint64_t a1, const ot::Crypto::Key *a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  ot::Crypto::LiteralKey::LiteralKey((ot::Crypto::LiteralKey *)v6, a2);
  if (v10)
  {
    if (*(unsigned __int16 *)(v10 + 8) >= 0x120uLL)
    {
      uint64_t v7 = *(int **)v10;
      uint64_t v5 = v7;
      uint64_t Bytes = ot::Crypto::LiteralKey::GetBytes((ot::Crypto::LiteralKey *)v6);
      unsigned __int16 Length = ot::Crypto::LiteralKey::GetLength((ot::Crypto::LiteralKey *)v6);
      if (mbedtls_aes_setkey_enc(v5, Bytes, 8 * Length)) {
        return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v8;
}

uint64_t ot::Crypto::LiteralKey::GetBytes(ot::Crypto::LiteralKey *this)
{
  return *(void *)this;
}

{
  return ot::Crypto::LiteralKey::GetBytes(this);
}

uint64_t ot::Crypto::LiteralKey::GetLength(ot::Crypto::LiteralKey *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Crypto::LiteralKey::GetLength(this);
}

uint64_t otPlatCryptoAesEncrypt(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x120uLL || mbedtls_aes_crypt_ecb(*(void *)a1, 1, a2, a3) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoAesFree(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x120uLL) {
      mbedtls_aes_free(*(void **)a1);
    }
    else {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoHmacSha256Init(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x18uLL)
    {
      uint64_t v2 = *(void *)a1;
      mbedtls_md_init();
      uint64_t v3 = mbedtls_md_info_from_type(6);
      return mbedtls_md_setup(v2, (uint64_t)v3, 1) != 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 7;
  }
}

uint64_t otPlatCryptoHmacSha256Deinit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x18uLL) {
      mbedtls_md_free(*(void ***)a1);
    }
    else {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoHmacSha256Start(uint64_t a1, const ot::Crypto::Key *a2)
{
  uint64_t v9 = a1;
  unsigned int v8 = a2;
  unsigned int v7 = 0;
  ot::Crypto::LiteralKey::LiteralKey((ot::Crypto::LiteralKey *)v6, a2);
  if (v9)
  {
    if (*(unsigned __int16 *)(v9 + 8) >= 0x18uLL)
    {
      uint64_t v5 = *(void *)v9;
      uint64_t Bytes = (unsigned char *)ot::Crypto::LiteralKey::GetBytes((ot::Crypto::LiteralKey *)v6);
      unsigned __int16 Length = ot::Crypto::LiteralKey::GetLength((ot::Crypto::LiteralKey *)v6);
      if (mbedtls_md_hmac_starts(v5, Bytes, Length)) {
        return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v7;
}

uint64_t otPlatCryptoHmacSha256Update(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x18uLL || mbedtls_md_hmac_update(*(void *)a1, a2, a3) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoHmacSha256Finish(uint64_t a1, unsigned char *a2)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x18uLL || mbedtls_md_hmac_finish(*(uint64_t **)a1, a2) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoHkdfInit(uint64_t a1)
{
  unsigned int v3 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x20uLL)
    {
      uint64_t v1 = *(_OWORD **)a1;
      *uint64_t v1 = 0u;
      v1[1] = 0u;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v3;
}

uint64_t otPlatCryptoHkdfExpand(uint64_t a1, uint64_t a2, unsigned __int16 a3, char *a4, unsigned __int16 a5)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  unsigned __int16 v18 = a3;
  char v17 = a4;
  unsigned __int16 v16 = a5;
  int v15 = 0;
  ot::Crypto::HmacSha256::HmacSha256((ot::Crypto::HmacSha256 *)__n_4);
  char __n_3 = 0;
  __unsigned __int8 n = 0;
  uint64_t v11 = 0;
  if (v20)
  {
    if (*(unsigned __int16 *)(v20 + 8) >= 0x20uLL)
    {
      uint64_t v11 = *(ot::Crypto::Sha256::Hash **)v20;
      while (v16)
      {
        ot::Crypto::Sha256::Hash::GetBytes(v11);
        ot::Crypto::Key::Set((uint64_t)v10, v5, 32);
        ot::Crypto::HmacSha256::Start((ot::Crypto::HmacSha256 *)__n_4, (const ot::Crypto::Key *)v10);
        if (__n_3) {
          ot::Crypto::HmacSha256::Update<ot::Crypto::Sha256::Hash>((ot::Crypto::HmacSha256 *)__n_4, (uint64_t)v21);
        }
        ot::Crypto::HmacSha256::Update((ot::Crypto::HmacSha256 *)__n_4, v19, v18);
        ++__n_3;
        ot::Crypto::HmacSha256::Update<unsigned char>((ot::Crypto::HmacSha256 *)__n_4, (uint64_t)&__n_3);
        ot::Crypto::HmacSha256::Finish((ot::Crypto::HmacSha256 *)__n_4, (ot::Crypto::Sha256::Hash *)v21);
        __unsigned __int8 n = ot::Min<unsigned short>(v16, 0x20u);
        __dst = v17;
        ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v21);
        memcpy(__dst, v6, __n);
        v17 += __n;
        v16 -= __n;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 7;
  }
  unsigned int v8 = v15;
  ot::Crypto::HmacSha256::~HmacSha256((ot::Crypto::HmacSha256 *)__n_4);
  return v8;
}

uint64_t ot::Crypto::Key::Set(uint64_t this, const unsigned __int8 *a2, __int16 a3)
{
  *(void *)this = a2;
  *(_WORD *)(this + 8) = a3;
  return this;
}

{
  return ot::Crypto::Key::Set(this, a2, a3);
}

uint64_t ot::Crypto::HmacSha256::Update<ot::Crypto::Sha256::Hash>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 0x20u);
}

{
  return ot::Crypto::HmacSha256::Update<ot::Crypto::Sha256::Hash>(a1, a2);
}

uint64_t ot::Crypto::HmacSha256::Update<unsigned char>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 1u);
}

{
  return ot::Crypto::HmacSha256::Update<unsigned char>(a1, a2);
}

uint64_t otPlatCryptoHkdfExtract(uint64_t a1, const unsigned __int8 *a2, __int16 a3, const ot::Crypto::Key *a4)
{
  uint64_t v16 = a1;
  int v15 = a2;
  __int16 v14 = a3;
  unsigned int v13 = a4;
  int v12 = 0;
  ot::Crypto::HmacSha256::HmacSha256((ot::Crypto::HmacSha256 *)v11);
  uint64_t v9 = 0;
  ot::Crypto::LiteralKey::LiteralKey((ot::Crypto::LiteralKey *)v8, v13);
  if (v16)
  {
    if (*(unsigned __int16 *)(v16 + 8) >= 0x20uLL)
    {
      uint64_t v9 = *(ot::Crypto::Sha256::Hash **)v16;
      ot::Crypto::Key::Set((uint64_t)v10, v15, v14);
      ot::Crypto::HmacSha256::Start((ot::Crypto::HmacSha256 *)v11, (const ot::Crypto::Key *)v10);
      uint64_t Bytes = (void *)ot::Crypto::LiteralKey::GetBytes((ot::Crypto::LiteralKey *)v8);
      unsigned __int16 Length = ot::Crypto::LiteralKey::GetLength((ot::Crypto::LiteralKey *)v8);
      ot::Crypto::HmacSha256::Update((ot::Crypto::HmacSha256 *)v11, (uint64_t)Bytes, Length);
      ot::Crypto::HmacSha256::Finish((ot::Crypto::HmacSha256 *)v11, v9);
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 7;
  }
  unsigned int v6 = v12;
  ot::Crypto::HmacSha256::~HmacSha256((ot::Crypto::HmacSha256 *)v11);
  return v6;
}

uint64_t otPlatCryptoHkdfDeinit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x20uLL)
    {
      *(void *)a1 = 0;
      *(_WORD *)(a1 + 8) = 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoSha256Init(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1) {
    mbedtls_sha256_init();
  }
  else {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoSha256Deinit(uint64_t a1)
{
  unsigned int v2 = 0;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 8) >= 0x6CuLL)
    {
      mbedtls_sha256_free(*(void **)a1);
      *(void *)a1 = 0;
      *(_WORD *)(a1 + 8) = 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v2;
}

uint64_t otPlatCryptoSha256Start(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x6CuLL || mbedtls_sha256_starts_ret(*(_DWORD **)a1, 0) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoSha256Update(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x6CuLL || mbedtls_sha256_update_ret(*(_DWORD **)a1, a2, a3) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoSha256Finish(uint64_t a1, unsigned char *a2)
{
  if (a1) {
    return *(unsigned __int16 *)(a1 + 8) < 0x6CuLL || mbedtls_sha256_finish_ret(*(void *)a1, a2) != 0;
  }
  else {
    return 7;
  }
}

uint64_t otPlatCryptoRandomInit()
{
  mbedtls_entropy_init(sEntropyContext);
  mbedtls_entropy_add_source((uint64_t)sEntropyContext, (uint64_t)handleMbedtlsEntropyPoll, 0, 16, 1);
  mbedtls_ctr_drbg_init((uint64_t)&sCtrDrbgContext);
  uint64_t result = mbedtls_ctr_drbg_seed((uint64_t)&sCtrDrbgContext, (uint64_t)mbedtls_entropy_func, (uint64_t)sEntropyContext, 0, 0);
  if (result) {
    __assert_rtn("otPlatCryptoRandomInit", "crypto_platform.cpp", 478, "rval == 0");
  }
  return result;
}

uint64_t handleMbedtlsEntropyPoll(void *a1, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unsigned int v5 = -60;
  if (!otPlatEntropyGet(a2, a3))
  {
    unsigned int v5 = 0;
    if (a4) {
      *a4 = a3;
    }
  }
  return v5;
}

_DWORD *otPlatCryptoRandomDeinit()
{
  return mbedtls_ctr_drbg_free(sCtrDrbgContext);
}

uint64_t otPlatCryptoRandomGet(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2 = (ot::Crypto::MbedTls *)mbedtls_ctr_drbg_random((uint64_t)&sCtrDrbgContext, a1, a2);
  return ot::Crypto::MbedTls::MapError(v2);
}

void *otPlatCryptoPbkdf2GenerateKey(long long *a1, unsigned __int16 a2, const void *a3, unsigned __int16 a4, unsigned int a5, unsigned __int16 a6, char *a7)
{
  int v14 = 0;
  if (a4 > 0x22uLL) {
    __assert_rtn("otPlatCryptoPbkdf2GenerateKey", "crypto_platform.cpp", 737, "aSaltLen <= sizeof(prfInput)");
  }
  uint64_t result = memcpy(__dst, a3, a4);
  if (a5 % 2) {
    __assert_rtn("otPlatCryptoPbkdf2GenerateKey", "crypto_platform.cpp", 739, "aIterationCounter % 2 == 0");
  }
  unsigned int v16 = a5 / 2;
  while (a6)
  {
    ++v14;
    __dst[a4] = HIBYTE(v14);
    __dst[a4 + 1] = BYTE2(v14);
    __dst[a4 + 2] = BYTE1(v14);
    __dst[a4 + 3] = v14;
    mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)__dst, a4 + 4, (uint64_t)__src);
    mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)__src, 0x10uLL, (uint64_t)v22);
    for (unsigned int i = 0; i < 2uLL; ++i)
      __src[i] ^= v22[i];
    for (unsigned int j = 1; j < v16; ++j)
    {
      mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)v22, 0x10uLL, (uint64_t)v21);
      mbedtls_aes_cmac_prf_128(a1, a2, (uint64_t)v21, 0x10uLL, (uint64_t)v22);
      for (unsigned int k = 0; k < 2uLL; ++k)
        __src[k] ^= v22[k] ^ v21[k];
    }
    unsigned __int16 v11 = ot::Min<unsigned short>(a6, 0x10u);
    uint64_t result = memcpy(a7, __src, v11);
    a7 += v11;
    a6 -= v11;
  }
  return result;
}

uint64_t otLoggingGetLevel(ot::Instance *a1)
{
  return ot::Instance::GetLogLevel(a1);
}

uint64_t ot::Instance::GetLogLevel(ot::Instance *this)
{
  return ot::Instance::sLogLevel;
}

{
  return ot::Instance::GetLogLevel(this);
}

uint64_t otLoggingSetLevel(unsigned int a1)
{
  unsigned int v2 = 0;
  if (a1 < 6) {
    ot::Instance::SetLogLevel(a1);
  }
  else {
    return 7;
  }
  return v2;
}

void otLogCritPlat(const char *a1, ...)
{
  va_start(va, a1);
  ot::Logger::LogVarArgs((ot *)"Platform", 1u, a1, va);
}

void otLogWarnPlat(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogNotePlat(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogInfoPlat(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogDebgPlat(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otDumpCritPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpWarnPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpNotePlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpInfoPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otDumpDebgPlat(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

void otLogCli(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  BOOL v9 = 0;
  if (a1 >= 0) {
    BOOL v9 = a1 <= 5;
  }
  if (!v9) {
    __assert_rtn("otLogCli", "logging_api.cpp", 189, "aLogLevel >= kLogLevelNone && aLogLevel <= kLogLevelDebg");
  }
  if (a1 < 6) {
    ot::Logger::LogVarArgs((ot *)"Cli", a1, a2, &a9);
  }
}

void otLogCritRcp(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogWarnRcp(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogNoteRcp(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogInfoRcp(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otLogDebgRcp(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void otMessageFree(uint64_t a1)
{
  uint64_t v1 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  ot::Message::Free(v1);
}

uint64_t otMessageGetLength(uint64_t a1)
{
  uint64_t v1 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return (unsigned __int16)ot::Message::GetLength(v1);
}

uint64_t ot::Message::GetLength(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 46);
}

{
  return ot::Message::GetLength(this);
}

uint64_t otMessageSetLength(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return ot::Message::SetLength(v2, a2);
}

uint64_t otMessageGetOffset(uint64_t a1)
{
  uint64_t v1 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return (unsigned __int16)ot::Message::GetOffset(v1);
}

uint64_t ot::Message::GetOffset(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 48);
}

{
  return ot::Message::GetOffset(this);
}

uint64_t otMessageSetOffset(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return ot::Message::SetOffset(v2, a2);
}

uint64_t otMessageIsLinkSecurityEnabled(uint64_t a1)
{
  uint64_t v1 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return ot::Message::IsLinkSecurityEnabled(v1) & 1;
}

uint64_t ot::Message::IsLinkSecurityEnabled(ot::Message *this)
{
  return HIBYTE(*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68)) & 1;
}

{
  return ot::Message::IsLinkSecurityEnabled(this);
}

uint64_t otMessageSetDirectTransmission(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
    return ot::Message::SetDirectTransmission(v2);
  }
  else
  {
    uint64_t v4 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
    return ot::Message::ClearDirectTransmission(v4);
  }
}

uint64_t ot::Message::SetDirectTransmission(ot::Message *this)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFF7F | 0x80;
  return result;
}

{
  return ot::Message::SetDirectTransmission(this);
}

uint64_t ot::Message::ClearDirectTransmission(ot::Message *this)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) &= ~0x80u;
  return result;
}

{
  return ot::Message::ClearDirectTransmission(this);
}

uint64_t otMessageGetRss(uint64_t a1)
{
  uint64_t v1 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return (char)ot::Message::GetAverageRss(v1);
}

uint64_t ot::Message::GetAverageRss(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return (char)ot::RssAverager::GetAverage((ot::RssAverager *)(Metadata + 56));
}

{
  return ot::Message::GetAverageRss(this);
}

uint64_t otMessageSetTimestamp(uint64_t a1)
{
  unsigned int v2 = (ot::TimerMilli *)ot::AsCoreType<otMessage>(a1);
  int Now = ot::TimerMilli::GetNow(v2);
  return ot::Message::SetTimestamp(v2, Now);
}

uint64_t ot::Message::SetTimestamp(ot::Buffer *a1, int a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 36) = a2;
  return result;
}

{
  return ot::Message::SetTimestamp(a1, a2);
}

uint64_t otMessageAppend(uint64_t a1, char *a2, unsigned __int16 a3)
{
  if (!a2) {
    __assert_rtn("otMessageAppend", "message_api.cpp", 78, "(aBuf) != nullptr");
  }
  unsigned int v3 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return ot::Message::AppendBytes(v3, a2, a3);
}

uint64_t otMessageRead(uint64_t a1, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  if (!a3) {
    __assert_rtn("otMessageRead", "message_api.cpp", 85, "(aBuf) != nullptr");
  }
  uint64_t v4 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return (unsigned __int16)ot::Message::ReadBytes(v4, a2, a3, a4);
}

uint64_t otMessageWrite(uint64_t a1, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  if (!a3) {
    __assert_rtn("otMessageWrite", "message_api.cpp", 92, "(aBuf) != nullptr");
  }
  uint64_t v4 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  ot::Message::WriteBytes(v4, a2, a3, a4);
  return a4;
}

void *otMessageQueueInit(void *result)
{
  if (!result) {
    __assert_rtn("otMessageQueueInit", "message_api.cpp", 101, "(aQueue) != nullptr");
  }
  *uint64_t result = 0;
  return result;
}

ot::Message **otMessageQueueEnqueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::MessageQueue *)ot::AsCoreType<otMessageQueue>(a1);
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  return ot::MessageQueue::Enqueue(v4, v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMessageQueue>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

ot::Message **ot::MessageQueue::Enqueue(ot::MessageQueue *this, ot::Message *a2)
{
  return ot::MessageQueue::Enqueue(this, a2, 1);
}

{
  return ot::MessageQueue::Enqueue(this, a2);
}

ot::Message **otMessageQueueEnqueueAtHead(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::MessageQueue *)ot::AsCoreType<otMessageQueue>(a1);
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  return ot::MessageQueue::Enqueue(v4, v2, 0);
}

uint64_t otMessageQueueDequeue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::MessageQueue *)ot::AsCoreType<otMessageQueue>(a1);
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  return ot::MessageQueue::Dequeue(v4, v2);
}

uint64_t otMessageQueueGetHead(uint64_t a1)
{
  uint64_t v1 = (ot::MessageQueue *)ot::AsCoreType<otMessageQueue>(a1);
  return ot::MessageQueue::GetHead(v1);
}

uint64_t ot::MessageQueue::GetHead(ot::MessageQueue *this)
{
  Tail = (ot::Message *)ot::MessageQueue::GetTail(this);
  return ot::Message::NextOf(Tail, v2);
}

{
  ot::Message *Tail;
  const ot::Message *v2;

  Tail = (ot::Message *)ot::MessageQueue::GetTail(this);
  return ot::Message::NextOf(Tail, v2);
}

{
  return ot::MessageQueue::GetHead(this);
}

{
  return ot::MessageQueue::GetHead(this);
}

uint64_t otMessageQueueGetNext(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  if (ot::Message::GetMessageQueue(v2) != a1) {
    return 0;
  }
  unsigned int v3 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  return ot::Message::GetNext(v3);
}

uint64_t ot::Message::GetMessageQueue(ot::Message *this)
{
  if ((*(_WORD *)(ot::Buffer::GetMetadata(this) + 68) & 0x800) != 0) {
    return 0;
  }
  else {
    return *(void *)(ot::Buffer::GetMetadata(this) + 24);
  }
}

{
  return ot::Message::GetMessageQueue(this);
}

uint64_t otMessageGetBufferIDs(uint64_t a1, char *a2)
{
  unsigned int v2 = (ot::Message *)ot::AsCoreType<otMessage>(a1);
  return ot::Message::GetBufferIDs(v2, a2);
}

uint64_t otMessageGetIsBufferStatsEnabled(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  unsigned int v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return ot::MessagePool::GetIsBufferStatsEnabled(v2) & 1;
}

uint64_t ot::MessagePool::GetIsBufferStatsEnabled(ot::MessagePool *this)
{
  return *((unsigned char *)this + 85012) & 1;
}

{
  return ot::MessagePool::GetIsBufferStatsEnabled(this);
}

uint64_t otMessageSetIsBufferStatsEnabled(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::MessagePool>(v2);
  return ot::MessagePool::SetIsBufferStatsEnabled(v3, v5 & 1);
}

uint64_t ot::MessagePool::SetIsBufferStatsEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 85012) = a2 & 1;
  return this;
}

{
  return ot::MessagePool::SetIsBufferStatsEnabled(this, a2);
}

unint64_t otMessageGetBufferAt(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v2);
  return ot::MessagePool::GetBufferAt(v3, a2);
}

unint64_t ot::MessagePool::GetBufferAt(ot::MessagePool *this, unsigned __int16 a2)
{
  return ot::Pool<ot::Buffer,(unsigned short)256>::GetEntryAt((uint64_t)this + 8, a2);
}

{
  return ot::MessagePool::GetBufferAt(this, a2);
}

uint64_t otMessageResetBufferStats(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::MessagePool>(v1);
  return ot::MessagePool::ResetBufferStats(v2);
}

uint64_t otMessageGetBufferStats(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return ot::MessagePool::GetBufferStats(v2);
}

uint64_t ot::MessagePool::GetBufferStats(ot::MessagePool *this)
{
  return (uint64_t)this + 65556;
}

{
  return ot::MessagePool::GetBufferStats(this);
}

uint64_t otMessageGetTotalBufferCount(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return (unsigned __int16)ot::MessagePool::GetTotalBufferCount(v2);
}

uint64_t otMessageGetFreeBufferCount(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>(v1);
  return (unsigned __int16)ot::MessagePool::GetFreeBufferCount(v2);
}

BOOL otMessageGetBufferInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (_WORD *)ot::AsCoreType<otBufferInfo>(a2);
  return ot::Instance::GetBufferInfo(v4, v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otBufferInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otMessageResetBufferInfo(uint64_t a1)
{
  uint64_t v1 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  return ot::Instance::ResetBufferInfo(v1);
}

uint64_t otMessageGetMatterHeader(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v8 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v3);
  uint64_t v4 = (const ot::Message *)ot::AsCoreType<otMessage>(v11);
  if (ot::MeshForwarder::IsMatter(v8, v4, (ot::Ip6::Headers *)v9))
  {
    uint64_t v5 = ot::AsCoreType<otInstance>(v12);
    unsigned int v6 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v5);
    ot::MeshForwarder::GetMatterHeader(v6, (const ot::Ip6::Headers *)v9, v10);
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

BOOL otMessageIsIcmpError(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = ot::Instance::Get<ot::MeshForwarder>(v2);
  uint64_t v3 = (const void *)ot::AsCoreType<otMessage>(a2);
  memcpy(__dst, v3, sizeof(__dst));
  return ot::MeshForwarder::IsTxIcmpError(v5, (ot::Message *)__dst);
}

uint64_t ot::Message::NextOf(ot::Message *this, ot::Message *a2)
{
  if (this) {
    return *(void *)ot::Message::Next(this);
  }
  else {
    return 0;
  }
}

{
  return ot::Message::NextOf(this, a2);
}

uint64_t ot::MessageQueue::GetTail(ot::MessageQueue *this)
{
  return *(void *)this;
}

{
  return *(void *)this;
}

{
  return ot::MessageQueue::GetTail(this);
}

{
  return ot::MessageQueue::GetTail(this);
}

uint64_t ot::Message::Next(ot::Message *this)
{
  return ot::Buffer::GetMetadata(this);
}

{
  return ot::Buffer::GetMetadata(this);
}

{
  return ot::Message::Next(this);
}

{
  return ot::Message::Next(this);
}

unint64_t ot::Pool<ot::Buffer,(unsigned short)256>::GetEntryAt(uint64_t a1, unsigned __int16 a2)
{
  return a1 + 8 + ((unint64_t)a2 << 8);
}

{
  return ot::Pool<ot::Buffer,(unsigned short)256>::GetEntryAt(a1, a2);
}

uint64_t otNetDataGet(uint64_t a1, char a2, unsigned __int8 *a3, char *a4)
{
  char v9 = a2 & 1;
  if (!a3) {
    __assert_rtn("otNetDataGet", "netdata_api.cpp", 45, "(aData) != nullptr");
  }
  if (!a4) {
    __assert_rtn("otNetDataGet", "netdata_api.cpp", 46, "(aDataLength) != nullptr");
  }
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkData::Leader>(v4);
  return ot::NetworkData::NetworkData::CopyNetworkData(v5, (v9 & 1) != 0, a3, a4);
}

uint64_t otNetDataGetLength(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::NetworkData *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::NetworkData::GetLength(v2);
}

uint64_t ot::NetworkData::NetworkData::GetLength(ot::NetworkData::NetworkData *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return ot::NetworkData::NetworkData::GetLength(this);
}

uint64_t otNetDataGetMaxLength(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::LeaderBase::GetMaxLength(v2);
}

uint64_t ot::NetworkData::LeaderBase::GetMaxLength(ot::NetworkData::LeaderBase *this)
{
  return *((unsigned __int8 *)this + 266);
}

{
  return ot::NetworkData::LeaderBase::GetMaxLength(this);
}

uint64_t otNetDataResetMaxLength(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::LeaderBase::ResetMaxLength(v2);
}

uint64_t ot::NetworkData::LeaderBase::ResetMaxLength(ot::NetworkData::LeaderBase *this)
{
  uint64_t result = ot::NetworkData::NetworkData::GetLength(this);
  *((unsigned char *)this + 266) = result;
  return result;
}

{
  return ot::NetworkData::LeaderBase::ResetMaxLength(this);
}

void otNetDataReset(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::Leader *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  ot::NetworkData::Leader::Reset(v2);
}

uint64_t otNetDataGetNextOnMeshPrefix(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextOnMeshPrefix", "netdata_api.cpp", 78, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  uint64_t v4 = (ot::NetworkData::OnMeshPrefixConfig *)ot::AsCoreType<otBorderRouterConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v6, a2, v4);
}

uint64_t otSetNetData(uint64_t a1, char *a2, size_t a3, char a4, char a5)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v5);
  return ot::NetworkData::LeaderBase::setStringAsNetworkData(v6, a2, a3, a4, a5);
}

uint64_t otNetDataGetNextRoute(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextRoute", "netdata_api.cpp", 103, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  uint64_t v4 = (ot::NetworkData::ExternalRouteConfig *)ot::AsCoreType<otExternalRouteConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextExternalRoute(v6, a2, v4);
}

uint64_t otNetDataGetNextService(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextService", "netdata_api.cpp", 110, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  uint64_t v4 = (ot::NetworkData::ServiceConfig *)ot::AsCoreType<otServiceConfig>(a3);
  return ot::NetworkData::NetworkData::GetNextService(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otServiceConfig>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otNetDataGetNextLowpanContextInfo(uint64_t a1, ot::NetworkData::OnMeshPrefixConfig *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otNetDataGetNextLowpanContextInfo", "netdata_api.cpp", 119, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::NetworkData::NetworkData *)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  uint64_t v4 = (ot::NetworkData::LowpanContextInfo *)ot::AsCoreType<otLowpanContextInfo>(a3);
  return ot::NetworkData::NetworkData::GetNextLowpanContextInfo(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otLowpanContextInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otNetDataGetVersion(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetDataVersion(LeaderData, 0);
}

uint64_t ot::Mle::LeaderData::GetDataVersion(uint64_t a1, char a2)
{
  if (a2) {
    return *(unsigned __int8 *)(a1 + 6);
  }
  else {
    return *(unsigned __int8 *)(a1 + 5);
  }
}

{
  return ot::Mle::LeaderData::GetDataVersion(a1, a2);
}

uint64_t otNetDataGetStableVersion(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetDataVersion(LeaderData, 1);
}

uint64_t otNetDataSteeringDataCheckJoiner(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v2);
  uint64_t v3 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  return ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(v6, v3, v4);
}

uint64_t otNetDataSteeringDataCheckJoinerWithDiscerner(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::NetworkData::LeaderBase *)ot::Instance::Get<ot::NetworkData::Leader>(v2);
  uint64_t v3 = (const ot::MeshCoP::JoinerDiscerner *)ot::AsCoreType<otJoinerDiscerner>(a2);
  return ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(v5, v3);
}

uint64_t otThreadGetNextDiagnosticTlv(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otThreadGetNextDiagnosticTlv", "netdiag_api.cpp", 49, "(aIterator) != nullptr");
  }
  if (!a3) {
    __assert_rtn("otThreadGetNextDiagnosticTlv", "netdiag_api.cpp", 50, "(aNetworkDiagTlv) != nullptr");
  }
  ot::AsCoapMessage();
  return ot::NetworkDiagnostic::Client::GetNextDiagTlv(v3, a2, a3);
}

uint64_t otThreadSendDiagnosticGet(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = ot::AsCoreType<otInstance>(a1);
  char v9 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkDiagnostic::Client>(v6);
  unsigned int v7 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::NetworkDiagnostic::Client::SendDiagnosticGet(v9, v7, a3, a4, a5, a6);
}

uint64_t ot::Instance::Get<ot::NetworkDiagnostic::Client>(uint64_t a1)
{
  return a1 + 143416;
}

{
  return ot::Instance::Get<ot::NetworkDiagnostic::Client>(a1);
}

uint64_t otThreadSendDiagnosticReset(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  unsigned int v7 = (ot::NetworkDiagnostic::Client *)ot::Instance::Get<ot::NetworkDiagnostic::Client>(v4);
  uint64_t v5 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::NetworkDiagnostic::Client::SendDiagnosticReset(v7, v5, a3, a4);
}

void *otThreadGetVendorName(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkDiagnostic::Server *)ot::Instance::Get<ot::NetworkDiagnostic::Server>(v1);
  return ot::NetworkDiagnostic::Server::GetVendorName(v2);
}

uint64_t ot::Instance::Get<ot::NetworkDiagnostic::Server>(uint64_t a1)
{
  return a1 + 143409;
}

{
  return ot::Instance::Get<ot::NetworkDiagnostic::Server>(a1);
}

void *ot::NetworkDiagnostic::Server::GetVendorName(ot::NetworkDiagnostic::Server *this)
{
  return &ot::NetworkDiagnostic::Server::kVendorName;
}

{
  return ot::NetworkDiagnostic::Server::GetVendorName(this);
}

void *otThreadGetVendorModel(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkDiagnostic::Server *)ot::Instance::Get<ot::NetworkDiagnostic::Server>(v1);
  return ot::NetworkDiagnostic::Server::GetVendorModel(v2);
}

void *ot::NetworkDiagnostic::Server::GetVendorModel(ot::NetworkDiagnostic::Server *this)
{
  return &ot::NetworkDiagnostic::Server::kVendorModel;
}

{
  return ot::NetworkDiagnostic::Server::GetVendorModel(this);
}

void *otThreadGetVendorSwVersion(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkDiagnostic::Server *)ot::Instance::Get<ot::NetworkDiagnostic::Server>(v1);
  return ot::NetworkDiagnostic::Server::GetVendorSwVersion(v2);
}

void *ot::NetworkDiagnostic::Server::GetVendorSwVersion(ot::NetworkDiagnostic::Server *this)
{
  return &ot::NetworkDiagnostic::Server::kVendorSwVersion;
}

{
  return ot::NetworkDiagnostic::Server::GetVendorSwVersion(this);
}

ot::Utils::HistoryTracker *ot::Utils::HistoryTracker::HistoryTracker(ot::Utils::HistoryTracker *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Utils::HistoryTracker::HistoryTracker(this, a2);
  return this;
}

uint64_t ot::Utils::HistoryTracker::HandleTimer(ot::Utils::HistoryTracker *this)
{
  return ot::TimerMilli::Start((ot::Utils::HistoryTracker *)((char *)this + 9816), 0x36EE800u);
}

_WORD *ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList(_WORD *a1)
{
  return a1;
}

{
  ot::Utils::HistoryTracker::List::List(a1);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::HistoryTracker,&ot::Utils::HistoryTracker::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::HistoryTracker,&ot::Utils::HistoryTracker::HandleTimer>::HandleTimer);
  return a1;
}

ot::NetworkData::MutableNetworkData *ot::NetworkData::MutableNetworkData::MutableNetworkData(ot::NetworkData::MutableNetworkData *this, ot::Instance *a2, unsigned __int8 *a3, char a4, char a5)
{
  return this;
}

{
  ot::NetworkData::MutableNetworkData *result;

  ot::NetworkData::NetworkData::NetworkData(this, a2, a3, a4);
  uint64_t result = this;
  *((unsigned char *)this + 9) = a5;
  return result;
}

uint64_t ot::Utils::HistoryTracker::RecordNetworkInfo(ot::Utils::HistoryTracker *this)
{
  uint64_t v11 = this;
  uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::AddNewEntry((uint64_t)this + 4);
  uint64_t v10 = result;
  if (result)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    unsigned __int8 Role = ot::Mle::Mle::GetRole(v2);
    *(_DWORD *)uint64_t v10 = ot::MapEnum<ot::Mle::DeviceRole>(Role);
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    *(_WORD *)(v10 + 6) = ot::Mle::Mle::GetRloc16(v4);
    uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t LeaderData = (ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v5);
    *(_DWORD *)(v10 + 8) = ot::Mle::LeaderData::GetPartitionId(LeaderData);
    unsigned int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    Deviceunsigned __int8 Mode = ot::Mle::Mle::GetDeviceMode(v7);
    return ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode, (unsigned char *)(v10 + 4));
  }
  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::AddNewEntry(uint64_t a1)
{
  return a1
       + 132
       + 12
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::AddNewEntry(a1);
}

uint64_t ot::MapEnum<ot::Mle::DeviceRole>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::Mle::DeviceRole>(result);
}

uint64_t ot::Mle::Mle::GetRole(ot::Mle::Mle *this)
{
  return *((unsigned __int8 *)this + 73);
}

{
  return ot::Mle::Mle::GetRole(this);
}

uint64_t ot::Mle::LeaderData::GetPartitionId(ot::Mle::LeaderData *this)
{
  return *(unsigned int *)this;
}

{
  return ot::Mle::LeaderData::GetPartitionId(this);
}

uint64_t ot::Mle::Mle::GetDeviceMode(ot::Mle::Mle *this)
{
  return *((unsigned __int8 *)this + 240);
}

{
  return ot::Mle::Mle::GetDeviceMode(this);
}

uint64_t ot::Utils::HistoryTracker::RecordMessage(ot::InstanceLocator *a1, ot::Message *a2, ot::Mac::Address *a3, char a4)
{
  int v29 = a1;
  int v28 = a2;
  int v27 = a3;
  char v26 = a4;
  uint64_t v25 = 0;
  uint64_t result = ot::Message::GetType(a2);
  if (!(_BYTE)result)
  {
    uint64_t result = ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v24, v28);
    if (!result)
    {
      uint64_t result = ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v24);
      if ((result & 1) == 0) {
        goto LABEL_12;
      }
      unsigned __int16 v23 = 0;
      if (v26)
      {
        if (v26 == 1)
        {
          uint64_t result = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v24);
          unsigned __int16 v23 = result;
        }
      }
      else
      {
        uint64_t result = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v24);
        unsigned __int16 v23 = result;
      }
      if (v23 != 19788 && v23 != 61631)
      {
LABEL_12:
        if (v26)
        {
          if (v26 == 1)
          {
            uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry((uint64_t)a1 + 3332);
            uint64_t v25 = result;
          }
        }
        else
        {
          uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry((uint64_t)a1 + 1728);
          uint64_t v25 = result;
        }
        if (v25)
        {
          ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v24);
          Payloadunsigned __int16 Length = ot::Ip6::Header::GetPayloadLength(v5);
          *(_WORD *)uint64_t v25 = PayloadLength;
          if (ot::Mac::Address::IsShort(v27)) {
            __int16 Short = ot::Mac::Address::GetShort(v27);
          }
          else {
            __int16 Short = -2;
          }
          *(_WORD *)(v25 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = Short;
          SourceAddress = (_OWORD *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v24);
          *(_OWORD *)(v25 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *SourceAddress;
          __int16 SourcePort = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v24);
          *(_WORD *)(v25 + 2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = SourcePort;
          DestinationAddress = (_OWORD *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v24);
          *(_OWORD *)(v25 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *DestinationAddress;
          __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v24);
          *(_WORD *)(v25 + 38) = DestinationPort;
          Checksuunsigned __int8 m = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v24);
          *(_WORD *)(v25 + 4ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = Checksum;
          char IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v24);
          *(unsigned char *)(v25 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = IpProto;
          if (ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v24))
          {
            IcmpHeader = (ot::Ip6::Icmp::Header *)ot::Ip6::Headers::GetIcmpHeader((ot::Ip6::Headers *)v24);
            char Type = ot::Ip6::Icmp::Header::GetType(IcmpHeader);
          }
          else
          {
            char Type = 0;
          }
          *(unsigned char *)(v25 + 43) = Type;
          if (v26)
          {
            char Average = 127;
          }
          else
          {
            RssAverager = (ot::RssAverager *)ot::Message::GetRssAverager(v28);
            char Average = ot::RssAverager::GetAverage(RssAverager);
          }
          *(unsigned char *)(v25 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = Average;
          char IsLinkSecurityEnabled = ot::Message::IsLinkSecurityEnabled(v28);
          *(unsigned char *)(v25 + 45) = *(unsigned char *)(v25 + 45) & 0xFE | IsLinkSecurityEnabled & 1;
          if (v26 == 1) {
            char TxSuccess = ot::Message::GetTxSuccess(v28);
          }
          else {
            char TxSuccess = 1;
          }
          *(unsigned char *)(v25 + 45) = *(unsigned char *)(v25 + 45) & 0xFD | (2 * (TxSuccess & 1));
          char Priority = ot::Message::GetPriority(v28);
          *(unsigned char *)(v25 + 45) = *(unsigned char *)(v25 + 45) & 0xF3 | (4 * (Priority & 3));
          uint64_t result = ot::Mac::Address::IsExtended(v27);
          if (result)
          {
            char v17 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
            uint64_t result = ot::NeighborTable::FindNeighbor(v17, v27, 5);
            if (result)
            {
              uint64_t result = ot::Neighbor::GetRloc16((ot::Neighbor *)result);
              *(_WORD *)(v25 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
            }
          }
          *(unsigned char *)(v25 + 45) = *(unsigned char *)(v25 + 45) & 0xEF | 0x10;
        }
      }
    }
  }
  return result;
}

BOOL ot::Ip6::Headers::IsUdp(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 17;
}

{
  return ot::Ip6::Headers::IsUdp(this);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry(uint64_t a1)
{
  return a1
       + 132
       + 46
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::AddNewEntry(a1);
}

uint64_t ot::Ip6::Header::GetPayloadLength(ot::Ip6::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Ip6::Header::GetPayloadLength(this);
}

BOOL ot::Mac::Address::IsShort(ot::Mac::Address *this)
{
  return *((unsigned char *)this + 8) == 1;
}

{
  return ot::Mac::Address::IsShort(this);
}

uint64_t ot::Mac::Address::GetShort(ot::Mac::Address *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::Mac::Address::GetShort(this);
}

uint64_t ot::Ip6::Headers::GetSourceAddress(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetSource(this);
}

{
  return ot::Ip6::Headers::GetSourceAddress(this);
}

uint64_t ot::Ip6::Headers::GetDestinationAddress(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetDestination(this);
}

{
  return ot::Ip6::Headers::GetDestinationAddress(this);
}

uint64_t ot::Ip6::Headers::GetIpProto(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetNextHeader(this);
}

{
  return ot::Ip6::Headers::GetIpProto(this);
}

BOOL ot::Ip6::Headers::IsIcmp6(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 58;
}

{
  return ot::Ip6::Headers::IsIcmp6(this);
}

uint64_t ot::Ip6::Headers::GetIcmpHeader(ot::Ip6::Headers *this)
{
  return (uint64_t)this + 40;
}

{
  return ot::Ip6::Headers::GetIcmpHeader(this);
}

uint64_t ot::Ip6::Icmp::Header::GetType(ot::Ip6::Icmp::Header *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Ip6::Icmp::Header::GetType(this);
}

uint64_t ot::Message::GetRssAverager(ot::Message *this)
{
  return ot::Buffer::GetMetadata(this) + 56;
}

{
  return ot::Message::GetRssAverager(this);
}

uint64_t ot::Message::GetTxSuccess(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 12) & 1;
}

{
  return ot::Message::GetTxSuccess(this);
}

uint64_t ot::Message::GetPriority(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 9) & 3;
}

{
  return ot::Message::GetPriority(this);
}

BOOL ot::Mac::Address::IsExtended(ot::Mac::Address *this)
{
  return *((unsigned char *)this + 8) == 2;
}

{
  return ot::Mac::Address::IsExtended(this);
}

uint64_t ot::Utils::HistoryTracker::RecordNeighborEvent(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::AddNewEntry(a1 + 4936);
  if (result)
  {
    if (a2 <= 2u)
    {
      *(void *)uint64_t result = *(void *)(a3 + 8);
      *(_WORD *)(result + 8) = *(_WORD *)(a3 + 32);
      *(unsigned char *)(result + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = *(unsigned char *)(a3 + 38);
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xFB | (4 * (*(unsigned char *)(a3 + 60) & 1));
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xF7 | (8 * ((*(unsigned char *)(a3 + 60) & 2) != 0));
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xEF | (16 * ((*(unsigned char *)(a3 + 60) & 4) != 0));
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xDF | 0x20;
    }
    else if (a2 == 4 || a2 == 3)
    {
      *(void *)uint64_t result = *(void *)(a3 + 8);
      *(_WORD *)(result + 8) = *(_WORD *)(a3 + 24);
      *(unsigned char *)(result + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = *(unsigned char *)(a3 + 52);
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xFB | (4 * (*(unsigned char *)(a3 + 62) & 1));
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xF7 | (8 * ((*(unsigned char *)(a3 + 62) & 2) != 0));
      *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xEF | (16 * ((*(unsigned char *)(a3 + 62) & 4) != 0));
      *(unsigned char *)(result + 11) &= ~0x20u;
    }
    if (a2)
    {
      uint64_t v6 = a2;
      char v5 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      char v5 = 0;
    }
    if ((v5 & 1) == 0)
    {
      switch(v6)
      {
        case 0:
          if ((*(unsigned char *)(a3 + 60) & 8) == 0) {
            goto LABEL_17;
          }
          *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xFC | 3;
          break;
        case 1:
        case 4:
          *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xFC | 1;
          return result;
        case 2:
          *(unsigned char *)(result + 11) = *(unsigned char *)(result + 11) & 0xFC | 2;
          return result;
        case 3:
LABEL_17:
          *(unsigned char *)(result + 11) &= 0xFCu;
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::AddNewEntry(uint64_t a1)
{
  return a1
       + 260
       + 12
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x40u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::AddNewEntry(a1);
}

uint64_t ot::Utils::HistoryTracker::RecordAddressEvent(uint64_t a1, char a2, ot::Ip6::Netif::UnicastAddress *a3)
{
  char v6 = a2 & 1;
  uint64_t result = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::AddNewEntry(a1 + 520);
  uint64_t v4 = result;
  if (result)
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)ot::Ip6::Netif::UnicastAddress::GetAddress(a3);
    *(unsigned char *)(v4 + 16) = ot::Ip6::Netif::UnicastAddress::GetPrefixLength(a3);
    *(unsigned char *)(v4 + 17) = ot::Ip6::Netif::UnicastAddress::GetOrigin(a3);
    *(_DWORD *)(v4 + 2ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = (v6 & 1) != 1;
    uint64_t result = ot::Ip6::Netif::UnicastAddress::GetScope(a3);
    *(unsigned char *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(unsigned char *)(v4 + 24) & 0xF0 | result & 0xF;
    *(unsigned char *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(unsigned char *)(v4 + 24) & 0xEF | (16 * (*((unsigned char *)a3 + 18) & 1));
    *(unsigned char *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(unsigned char *)(v4 + 24) & 0xDF | (32 * ((*((unsigned char *)a3 + 18) & 2) != 0));
    *(unsigned char *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = *(unsigned char *)(v4 + 24) & 0xBF | (*((unsigned char *)a3 + 18) >> 7 << 6);
  }
  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::AddNewEntry(uint64_t a1)
{
  return a1
       + 84
       + 28
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x14u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::AddNewEntry(a1);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetAddress(ot::Ip6::Netif::UnicastAddress *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::Ip6::Netif::UnicastAddress::GetAddress(this);
}

{
  return ot::Ip6::Netif::UnicastAddress::GetAddress(this);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetPrefixLength(ot::Ip6::Netif::UnicastAddress *this)
{
  return *((unsigned __int8 *)this + 16);
}

{
  return ot::Ip6::Netif::UnicastAddress::GetPrefixLength(this);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetOrigin(ot::Ip6::Netif::UnicastAddress *this)
{
  return *((unsigned __int8 *)this + 17);
}

{
  return ot::Ip6::Netif::UnicastAddress::GetOrigin(this);
}

uint64_t ot::Ip6::Netif::UnicastAddress::GetScope(ot::Ip6::Netif::UnicastAddress *this)
{
  if ((*((unsigned char *)this + 18) & 4) != 0)
  {
    return (*((unsigned char *)this + 18) >> 3) & 0xF;
  }
  else
  {
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(this);
    return ot::Ip6::Address::GetScope(Address);
  }
}

{
  return ot::Ip6::Netif::UnicastAddress::GetScope(this);
}

_OWORD *ot::Utils::HistoryTracker::RecordAddressEvent(uint64_t a1, char a2, ot::Ip6::Netif::MulticastAddress *a3, char a4)
{
  char v8 = a2 & 1;
  uint64_t result = (_OWORD *)ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::AddNewEntry(a1 + 1164);
  char v5 = result;
  if (result)
  {
    uint64_t result = (_OWORD *)ot::Ip6::Netif::MulticastAddress::GetAddress(a3);
    *char v5 = *result;
    *((unsigned char *)v5 + 16) = a4;
    *((_DWORD *)v5 + 5) = (v8 & 1) != 1;
  }
  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::AddNewEntry(uint64_t a1)
{
  return a1
       + 84
       + 24
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x14u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::AddNewEntry(a1);
}

uint64_t ot::Ip6::Netif::MulticastAddress::GetAddress(ot::Ip6::Netif::MulticastAddress *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::Ip6::Netif::MulticastAddress::GetAddress(this);
}

{
  return ot::Ip6::Netif::MulticastAddress::GetAddress(this);
}

uint64_t ot::Utils::HistoryTracker::RecordRouterTableChange(uint64_t this)
{
  uint64_t v14 = this;
  char v6 = (ot::InstanceLocator *)this;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    char v9 = (char *)v6 + 2 * i + 9840;
    char v10 = v10 & 3 | (4 * (i & 0x3F));
    uint64_t v1 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v6);
    this = ot::RouterTable::IsAllocated(v1, i);
    if (this)
    {
      unsigned __int16 v8 = 0;
      unsigned __int8 v7 = 0;
      char v5 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v6);
      unsigned __int16 v2 = ot::Mle::Rloc16FromRouterId((ot::Mle *)i);
      ot::RouterTable::GetNextHopAndPathCost(v5, v2, &v8, &v7);
      if (v8 == 65534)
      {
        this = 63;
        char v4 = 63;
      }
      else
      {
        this = ot::Mle::RouterIdFromRloc16((ot::Mle *)v8);
        char v4 = this;
      }
      char v11 = v4;
      if (v7 >= 0x10u) {
        unsigned __int8 v3 = 0;
      }
      else {
        unsigned __int8 v3 = v7;
      }
      unsigned __int8 v12 = v12 & 0xF | (16 * (v3 & 0xF));
      if ((*v9 & 1) == 0)
      {
        v10 &= 0xFCu;
        v12 &= 0xF0u;
LABEL_18:
        this = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry((uint64_t)v6 + 5964, (uint64_t)&v10);
        *char v9 = *v9 & 0xFE | 1;
        *char v9 = *v9 & 0x81 | (2 * (v11 & 0x3F));
        v9[1] = v9[1] & 0xF0 | (v12 >> 4);
        continue;
      }
      if (v11 != ((*v9 >> 1) & 0x3F))
      {
        char v10 = v10 & 0xFC | 2;
        unsigned __int8 v12 = v12 & 0xF0 | v9[1] & 0xF;
        goto LABEL_18;
      }
      if (v11 != 63 && (v9[1] & 0xF) != v12 >> 4)
      {
        char v10 = v10 & 0xFC | 3;
        unsigned __int8 v12 = v12 & 0xF0 | v9[1] & 0xF;
        goto LABEL_18;
      }
    }
    else if (*v9)
    {
      char v10 = v10 & 0xFC | 1;
      char v11 = 63;
      v12 &= 0xF0u;
      v12 &= 0xFu;
      this = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry((uint64_t)v6 + 5964, (uint64_t)&v10);
      *v9 &= ~1u;
    }
  }
  return this;
}

BOOL ot::RouterTable::IsAllocated(ot::RouterTable *this, unsigned __int8 a2)
{
  return ot::RouterTable::RouterIdMap::IsAllocated((ot::RouterTable *)((char *)this + 4640), a2);
}

{
  return ot::RouterTable::IsAllocated(this, a2);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result = ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x100u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
  uint64_t v3 = a1 + 1028 + 3 * (unsigned __int16)result;
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  *(unsigned char *)(v3 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(unsigned char *)(a2 + 2);
  return result;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::AddNewEntry(a1, a2);
}

uint64_t ot::Utils::HistoryTracker::RecordNetworkDataChange(const unsigned __int8 **this)
{
  char v11 = this;
  unsigned int v10 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix(this + 1246, &v10, (ot::NetworkData::OnMeshPrefixConfig *)&v9))
  {
    uint64_t v1 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if ((ot::NetworkData::NetworkData::ContainsOnMeshPrefix(v1, (const ot::NetworkData::OnMeshPrefixConfig *)&v9) & 1) == 0) {
      ot::Utils::HistoryTracker::RecordOnMeshPrefixEvent((uint64_t)this, 1, &v9);
    }
  }
  unsigned int v10 = 0;
  while (1)
  {
    unsigned __int16 v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v2, &v10, (ot::NetworkData::OnMeshPrefixConfig *)&v9))break; {
    if ((ot::NetworkData::NetworkData::ContainsOnMeshPrefix(this + 1246, (const ot::NetworkData::OnMeshPrefixConfig *)&v9) & 1) == 0)ot::Utils::HistoryTracker::RecordOnMeshPrefixEvent((uint64_t)this, 0, &v9);
    }
  }
  unsigned int v10 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute(this + 1246, &v10, (ot::NetworkData::ExternalRouteConfig *)&v8))
  {
    uint64_t v3 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if ((ot::NetworkData::NetworkData::ContainsExternalRoute(v3, (const ot::NetworkData::ExternalRouteConfig *)&v8) & 1) == 0) {
      ot::Utils::HistoryTracker::RecordExternalRouteEvent((uint64_t)this, 1, &v8);
    }
  }
  unsigned int v10 = 0;
  while (1)
  {
    char v4 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
    if (ot::NetworkData::NetworkData::GetNextExternalRoute(v4, &v10, (ot::NetworkData::ExternalRouteConfig *)&v8))break; {
    if ((ot::NetworkData::NetworkData::ContainsExternalRoute(this + 1246, (const ot::NetworkData::ExternalRouteConfig *)&v8) & 1) == 0)ot::Utils::HistoryTracker::RecordExternalRouteEvent((uint64_t)this, 0, &v8);
    }
  }
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)this);
  uint64_t result = ot::NetworkData::NetworkData::CopyNetworkData(v5, 0, (ot::NetworkData::MutableNetworkData *)(this + 1246));
  if (result) {
    __assert_rtn("RecordNetworkDataChange", "history_tracker.cpp", 407, "false");
  }
  return result;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Leader>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
}

__n128 ot::Utils::HistoryTracker::RecordOnMeshPrefixEvent(uint64_t a1, int a2, __n128 *a3)
{
  uint64_t v4 = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::AddNewEntry(a1 + 7760);
  if (v4)
  {
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    *(_DWORD *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = a2;
  }
  return result;
}

__n128 ot::Utils::HistoryTracker::RecordExternalRouteEvent(uint64_t a1, int a2, __n128 *a3)
{
  uint64_t v4 = ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::AddNewEntry(a1 + 8788);
  if (v4)
  {
    __n128 result = *a3;
    *(__n128 *)uint64_t v4 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    *(_DWORD *)(v4 + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries((uint64_t)this + 4) = a2;
  }
  return result;
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::AddNewEntry(uint64_t a1)
{
  return a1
       + 132
       + 28
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::AddNewEntry(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::AddNewEntry(uint64_t a1)
{
  return a1
       + 132
       + 28
       * (unsigned __int16)ot::Utils::HistoryTracker::List::Add((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::AddNewEntry(a1);
}

uint64_t ot::Utils::HistoryTracker::HandleNotifierEvents(ot::Utils::HistoryTracker *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v4, 228)) {
    ot::Utils::HistoryTracker::RecordNetworkInfo(a1);
  }
  uint64_t result = ot::Events::Contains(&v4, 512);
  if (result) {
    return ot::Utils::HistoryTracker::RecordNetworkDataChange((const unsigned __int8 **)a1);
  }
  return result;
}

BOOL ot::Events::Contains(void *a1, uint64_t a2)
{
  return (*a1 & a2) != 0;
}

{
  return ot::Events::Contains(a1, a2);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::UpdateAgedEntries(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x14u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::UpdateAgedEntries(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x14u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::UpdateAgedEntries(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::UpdateAgedEntries(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x40u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::UpdateAgedEntries(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::UpdateAgedEntries(a1);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::UpdateAgedEntries(uint64_t a1)
{
  return ot::Utils::HistoryTracker::List::UpdateAgedEntries((ot::Utils::HistoryTracker::List *)a1, 0x20u, (ot::Utils::HistoryTracker::Timestamp *)(a1 + 4));
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::UpdateAgedEntries(a1);
}

ot::StringWriter *ot::Utils::HistoryTracker::EntryAgeToString(ot::Utils::HistoryTracker *this, char *a2, char *a3)
{
  unsigned int v9 = this;
  __n128 v8 = a2;
  v7[11] = (_WORD)a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v7, a2, (__int16)a3);
  if (v9 >= 0xFC579C00) {
    return ot::StringWriter::Append((ot::StringWriter *)v7, "more than %u days", 49);
  }
  unsigned int v6 = v9 / 0x5265C00;
  if (v9 / 0x5265C00)
  {
    uint64_t v4 = ot::ToUlong(v6);
    uint64_t v5 = "";
    if (v6 != 1) {
      uint64_t v5 = "s";
    }
    ot::StringWriter::Append((ot::StringWriter *)v7, "%lu day%s ", v4, v5);
    v9 -= 86400000 * v6;
  }
  return ot::StringWriter::Append((ot::StringWriter *)v7, "%02u:%02u:%02u.%03u", v9 / 0x36EE80, v9 % 0x36EE80 / 0xEA60, v9 % 0xEA60 / 0x3E8, v9 % 0x3E8);
}

_DWORD *ot::Utils::HistoryTracker::Timestamp::SetToNow(ot::Utils::HistoryTracker::Timestamp *this)
{
  *(_DWORD *)this = ot::TimerMilli::GetNow(this);
  uint64_t result = (_DWORD *)ot::Time::GetValue(this);
  if (!result)
  {
    int Value = ot::Time::GetValue(this);
    return ot::Time::SetValue(this, Value - 1);
  }
  return result;
}

uint64_t ot::Utils::HistoryTracker::Timestamp::GetDurationTill(ot::Utils::HistoryTracker::Timestamp *a1, int a2)
{
  int v6 = a2;
  if (ot::Utils::HistoryTracker::Timestamp::IsDistantPast(a1))
  {
    return -61367296;
  }
  else
  {
    unsigned int v2 = ot::Time::operator-(&v6, a1);
    return ot::Min<unsigned int>(v2, 0xFC579C00);
  }
}

BOOL ot::Utils::HistoryTracker::Timestamp::IsDistantPast(ot::Utils::HistoryTracker::Timestamp *this)
{
  return ot::Time::GetValue(this) == 0;
}

{
  return ot::Utils::HistoryTracker::Timestamp::IsDistantPast(this);
}

_WORD *ot::Utils::HistoryTracker::List::List(_WORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

ot::Utils::HistoryTracker::List *ot::Utils::HistoryTracker::List::List(ot::Utils::HistoryTracker::List *this)
{
  return this;
}

_WORD *ot::Utils::HistoryTracker::List::Clear(_WORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t ot::Utils::HistoryTracker::List::Add(ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, ot::Utils::HistoryTracker::Timestamp *a3)
{
  if (*(_WORD *)this) {
    __int16 v4 = *(_WORD *)this - 1;
  }
  else {
    __int16 v4 = a2 - 1;
  }
  *(_WORD *)this = v4;
  *((_WORD *)this + 1) += *((unsigned __int16 *)this + 1) != a2;
  ot::Utils::HistoryTracker::Timestamp::SetToNow((ot::Utils::HistoryTracker::Timestamp *)((char *)a3
                                                                                        + 4 * *(unsigned __int16 *)this));
  return *(unsigned __int16 *)this;
}

uint64_t ot::Utils::HistoryTracker::List::Iterate(ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, const ot::Utils::HistoryTracker::Timestamp *a3, ot::Utils::HistoryTracker::Iterator *a4, unsigned __int16 *a5, unsigned int *a6)
{
  unsigned int v11 = 0;
  if (*((unsigned __int16 *)this + 1) > (int)(unsigned __int16)ot::Utils::HistoryTracker::Iterator::GetEntryNumber(a4))
  {
    unsigned __int16 EntryNumber = ot::Utils::HistoryTracker::Iterator::GetEntryNumber(a4);
    *a5 = ot::Utils::HistoryTracker::List::MapEntryNumberToListIndex(this, EntryNumber, a2);
    __n128 v8 = (const ot::Utils::HistoryTracker::Timestamp *)((char *)a3 + 4 * *a5);
    int InitTime = ot::Utils::HistoryTracker::Iterator::GetInitTime(a4);
    *a6 = ot::Utils::HistoryTracker::Timestamp::GetDurationTill(v8, InitTime);
    ot::Utils::HistoryTracker::Iterator::IncrementEntryNumber((uint64_t)a4);
  }
  else
  {
    return 23;
  }
  return v11;
}

uint64_t ot::Utils::HistoryTracker::Iterator::GetEntryNumber(ot::Utils::HistoryTracker::Iterator *this)
{
  return *((unsigned __int16 *)this + 2);
}

{
  return ot::Utils::HistoryTracker::Iterator::GetEntryNumber(this);
}

uint64_t ot::Utils::HistoryTracker::List::MapEntryNumberToListIndex(ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, unsigned __int16 a3)
{
  if (a2 >= (int)*((unsigned __int16 *)this + 1)) {
    __assert_rtn("MapEntryNumberToListIndex", "history_tracker.cpp", 573, "aEntryNumber < mSize");
  }
  unsigned int v5 = a2 + *(unsigned __int16 *)this;
  if (v5 < a3) {
    unsigned __int16 v4 = 0;
  }
  else {
    unsigned __int16 v4 = a3;
  }
  return (unsigned __int16)(v5 - v4);
}

uint64_t ot::Utils::HistoryTracker::Iterator::GetInitTime(ot::Utils::HistoryTracker::Iterator *this)
{
  ot::Time::Time((ot::Time *)&v2, *(_DWORD *)this);
  return v2;
}

{
  return ot::Utils::HistoryTracker::Iterator::GetInitTime(this);
}

uint64_t ot::Utils::HistoryTracker::Iterator::IncrementEntryNumber(uint64_t this)
{
  return this;
}

{
  return ot::Utils::HistoryTracker::Iterator::IncrementEntryNumber(this);
}

uint64_t ot::Utils::HistoryTracker::List::UpdateAgedEntries(ot::Utils::HistoryTracker::List *this, unsigned __int16 a2, ot::Utils::HistoryTracker::Timestamp *a3)
{
  uint64_t result = ot::TimerMilli::GetNow(this);
  int v7 = result;
  for (unsigned __int16 i = *((_WORD *)this + 1) - 1; i < (int)*((unsigned __int16 *)this + 1); --i)
  {
    unsigned __int16 v5 = ot::Utils::HistoryTracker::List::MapEntryNumberToListIndex(this, i, a2);
    uint64_t result = ot::Utils::HistoryTracker::Timestamp::GetDurationTill((ot::Utils::HistoryTracker::Timestamp *)((char *)a3 + 4 * v5), v7);
    if (result < 0xFC579C00) {
      break;
    }
    uint64_t result = (uint64_t)ot::Utils::HistoryTracker::Timestamp::MarkAsDistantPast((ot::Utils::HistoryTracker::Timestamp *)((char *)a3 + 4 * v5));
  }
  return result;
}

_DWORD *ot::Utils::HistoryTracker::Timestamp::MarkAsDistantPast(ot::Utils::HistoryTracker::Timestamp *this)
{
  return ot::Time::SetValue(this, 0);
}

{
  return ot::Utils::HistoryTracker::Timestamp::MarkAsDistantPast(this);
}

ot::NetworkData::NetworkData *ot::NetworkData::NetworkData::NetworkData(ot::NetworkData::NetworkData *this, ot::Instance *a2, const unsigned __int8 *a3, char a4)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *(void *)this = a3;
  *((unsigned char *)this + 8) = a4;
  return result;
}

{
  ot::NetworkData::NetworkData::NetworkData(this, a2, a3, a4);
  return this;
}

uint64_t ot::Ip6::Header::GetSource(ot::Ip6::Header *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return ot::Ip6::Header::GetSource(this);
}

{
  return ot::Ip6::Header::GetSource(this);
}

uint64_t ot::Ip6::Header::GetDestination(ot::Ip6::Header *this)
{
  return (uint64_t)this + 24;
}

{
  return (uint64_t)this + 24;
}

{
  return ot::Ip6::Header::GetDestination(this);
}

{
  return ot::Ip6::Header::GetDestination(this);
}

uint64_t ot::Ip6::Header::GetNextHeader(ot::Ip6::Header *this)
{
  return *((unsigned __int8 *)this + 6);
}

{
  return ot::Ip6::Header::GetNextHeader(this);
}

BOOL ot::RouterTable::RouterIdMap::IsAllocated(ot::RouterTable::RouterIdMap *this, unsigned __int8 a2)
{
  return *((char *)this + a2) < 0;
}

{
  return ot::RouterTable::RouterIdMap::IsAllocated(this, a2);
}

uint64_t ot::TimerMilliIn<ot::Utils::HistoryTracker,&ot::Utils::HistoryTracker::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unsigned int v2 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
  return ot::Utils::HistoryTracker::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::HistoryTracker>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
}

uint64_t ot::Instance::Get<ot::Utils::HistoryTracker>(uint64_t a1)
{
  return a1 + 155968;
}

{
  return ot::Instance::Get<ot::Utils::HistoryTracker>(a1);
}

uint64_t otPingSenderPing(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned __int16 v5 = (ot::Utils::PingSender *)ot::Instance::Get<ot::Utils::PingSender>(v2);
  uint64_t v3 = (const ot::Utils::PingSender::Config *)ot::AsCoreType<otPingSenderConfig>(a2);
  return ot::Utils::PingSender::Ping(v5, v3);
}

uint64_t ot::Instance::Get<ot::Utils::PingSender>(uint64_t a1)
{
  return a1 + 155728;
}

{
  return ot::Instance::Get<ot::Utils::PingSender>(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otPingSenderConfig>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otPingSenderStop(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Utils::PingSender *)ot::Instance::Get<ot::Utils::PingSender>(v1);
  return ot::Utils::PingSender::Stop(v2);
}

uint64_t otServerGetNetDataLocal(uint64_t a1, char a2, unsigned __int8 *a3, char *a4)
{
  char v9 = a2 & 1;
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  unsigned __int16 v5 = (ot::InstanceLocator *)ot::Instance::Get<ot::NetworkData::Local>(v4);
  return ot::NetworkData::NetworkData::CopyNetworkData(v5, (v9 & 1) != 0, a3, a4);
}

uint64_t otServerAddService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v6, a2 + 9, *(unsigned char *)(a2 + 8));
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v5, v7 + 264, *(unsigned char *)(v7 + 263));
  uint64_t v2 = ot::AsCoreType<otInstance>(v8);
  uint64_t v3 = (ot::NetworkData::MutableNetworkData *)ot::Instance::Get<ot::NetworkData::Local>(v2);
  return ot::NetworkData::Local::AddService(v3, *(_DWORD *)(v7 + 4), (uint64_t)v6, *(unsigned char *)(v7 + 262) & 1, (uint64_t)v5);
}

uint64_t ot::Data<(ot::DataLengthType)0>::Init(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3;
  return result;
}

{
  return ot::Data<(ot::DataLengthType)0>::Init(result, a2, a3);
}

uint64_t otServerRemoveService(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v10 = a1;
  int v9 = a2;
  uint64_t v8 = a3;
  v7[23] = a4;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v7, a3, a4);
  uint64_t v4 = ot::AsCoreType<otInstance>(v10);
  unsigned __int16 v5 = (ot::NetworkData::MutableNetworkData *)ot::Instance::Get<ot::NetworkData::Local>(v4);
  return ot::NetworkData::Local::RemoveService(v5, v9, (uint64_t)v7);
}

uint64_t otServerGetNextService(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v3 = ot::AsCoreType<otInstance>(a1);
    int v6 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Local>(v3);
    uint64_t v4 = (ot::NetworkData::ServiceConfig *)ot::AsCoreType<otServiceConfig>(a3);
    return ot::NetworkData::NetworkData::GetNextService(v6, a2, v4);
  }
  else
  {
    return 7;
  }
}

uint64_t otServerRegister(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::Notifier *)ot::Instance::Get<ot::NetworkData::Notifier>(v1);
  ot::NetworkData::Notifier::HandleServerDataUpdated(v2);
  return 0;
}

void *ot::Mle::RouteTlv::Init(ot::Mle::RouteTlv *this)
{
  return memset((char *)this + 11, 0, 0x3FuLL);
}

unsigned char *ot::Mle::Tlv::SetType(unsigned char *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return ot::Mle::Tlv::SetType(a1, a2);
}

uint64_t ot::Tlv::SetLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1) = a2;
  return this;
}

{
  return ot::Tlv::SetLength(this, a2);
}

void *ot::Mle::RouterIdSet::Clear(void *this)
{
  *this = 0;
  return this;
}

{
  return ot::Mle::RouterIdSet::Clear(this);
}

BOOL ot::Mle::RouteTlv::IsValid(ot::Mle::RouteTlv *this)
{
  BOOL v4 = 0;
  if (ot::Tlv::GetLength(this) >= 9uLL)
  {
    unsigned __int8 NumberOfAllocatedIds = ot::Mle::RouterIdSet::GetNumberOfAllocatedIds((ot::Mle::RouteTlv *)((char *)this + 3));
    if (NumberOfAllocatedIds <= 0x20u) {
      return NumberOfAllocatedIds <= (int)ot::Mle::RouteTlv::GetRouteDataLength(this);
    }
  }
  return v4;
}

uint64_t ot::Tlv::GetLength(ot::Tlv *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Tlv::GetLength(this);
}

uint64_t ot::Mle::RouteTlv::GetRouteDataLength(ot::Mle::RouteTlv *this)
{
  return (ot::Tlv::GetLength(this) - 9);
}

{
  return ot::Mle::RouteTlv::GetRouteDataLength(this);
}

unsigned char *ot::Mle::ConnectivityTlv::IncrementLinkQuality(unsigned char *result, unsigned __int8 a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v2 = 0;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        return result;
      case 1:
        ++result[5];
        break;
      case 2:
        ++result[4];
        break;
      case 3:
        ++result[3];
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t ot::Mle::ConnectivityTlv::GetParentPriority(ot::Mle::ConnectivityTlv *this)
{
  return (char)ot::Preference::From2BitUint((ot::Preference *)((int)*((unsigned __int8 *)this + 2) >> 6));
}

uint64_t ot::Mle::ConnectivityTlv::SetParentPriority(ot::Mle::ConnectivityTlv *this, char a2)
{
  uint64_t result = ot::Preference::To2BitUint((ot::Preference *)a2);
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = (_BYTE)result << 6;
  return result;
}

unsigned char *ot::Tlv::SetType(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

{
  return ot::Tlv::SetType(this, a2);
}

uint64_t otTaskletsProcess(uint64_t a1)
{
  uint64_t result = otInstanceIsInitialized(a1);
  if (result)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::Tasklet ***)ot::Instance::Get<ot::Tasklet::Scheduler>(v2);
    return (uint64_t)ot::Tasklet::Scheduler::ProcessQueuedTasklets(v3);
  }
  return result;
}

uint64_t ot::Instance::Get<ot::Tasklet::Scheduler>(uint64_t a1)
{
  return a1 + 8;
}

{
  return ot::Instance::Get<ot::Tasklet::Scheduler>(a1);
}

BOOL otTaskletsArePending(uint64_t a1)
{
  BOOL v4 = 0;
  if (otInstanceIsInitialized(a1))
  {
    uint64_t v1 = ot::AsCoreType<otInstance>(a1);
    uint64_t v2 = (ot::Tasklet::Scheduler *)ot::Instance::Get<ot::Tasklet::Scheduler>(v1);
    return ot::Tasklet::Scheduler::AreTaskletsPending(v2);
  }
  return v4;
}

BOOL ot::Tasklet::Scheduler::AreTaskletsPending(ot::Tasklet::Scheduler *this)
{
  return *(void *)this != 0;
}

{
  return ot::Tasklet::Scheduler::AreTaskletsPending(this);
}

uint64_t otThreadGetChildTimeout(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetTimeout(v2);
}

uint64_t ot::Mle::Mle::GetTimeout(ot::Mle::Mle *this)
{
  return *((unsigned int *)this + 168);
}

{
  return ot::Mle::Mle::GetTimeout(this);
}

void otThreadSetChildTimeout(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::Mle::SetTimeout(v3, a2);
}

void otThreadGetExtendedPanId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::ExtendedPanIdManager *)ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(v1);
  ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v2);
}

uint64_t ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(uint64_t a1)
{
  return a1 + 87960;
}

{
  return ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(a1);
}

uint64_t otThreadSetExtendedPanId(uint64_t a1, uint64_t a2)
{
  unsigned int v9 = 0;
  uint64_t v8 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (ot::MeshCoP::ExtendedPanId *)ot::AsCoreType<otExtendedPanId>(a2);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v8);
  if (ot::Mle::Mle::IsDisabled(v2))
  {
    uint64_t v3 = (ot::MeshCoP::ExtendedPanIdManager *)ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>(v8);
    ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(v3, v7);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v8);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    unsigned __int16 v5 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v5);
  }
  else
  {
    return 13;
  }
  return v9;
}

uint64_t otThreadGetLeaderRloc(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unsigned __int16 v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  uint64_t v3 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Mle::Mle::GetLeaderAddress(v5, v3);
}

uint64_t otThreadGetLinkMode(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  Deviceunsigned __int8 Mode = ot::Mle::Mle::GetDeviceMode(v2);
  ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode, &v6);
  return v6;
}

uint64_t otThreadSetLinkMode(uint64_t a1, char a2)
{
  char v7 = a2;
  uint64_t v6 = a1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  BOOL v4 = (unsigned char *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::DeviceMode::DeviceMode(&v5, v7);
  return ot::Mle::Mle::SetDeviceMode(v4, v5);
}

unsigned char *ot::Mle::DeviceMode::DeviceMode(unsigned char *a1, char a2)
{
  return a1;
}

{
  char v4;

  BOOL v4 = a2;
  ot::Mle::DeviceMode::Set(a1, &v4);
  return a1;
}

double otThreadGetNetworkKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (__n128 *)ot::Instance::Get<ot::KeyManager>(v2);
  uint64_t v3 = (__n128 *)ot::AsCoreType<otNetworkKey>(a2);
  *(void *)&double result = ot::KeyManager::GetNetworkKey(v5, v3).n128_u64[0];
  return result;
}

uint64_t ot::Instance::Get<ot::KeyManager>(uint64_t a1)
{
  return a1 + 88008;
}

{
  return ot::Instance::Get<ot::KeyManager>(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetworkKey>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otThreadSetNetworkKey(uint64_t a1, uint64_t a2)
{
  unsigned int v9 = 0;
  uint64_t v8 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v8);
  if (ot::Mle::Mle::IsDisabled(v2))
  {
    char v7 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v8);
    uint64_t v3 = (const ot::NetworkKey *)ot::AsCoreType<otNetworkKey>(a2);
    ot::KeyManager::SetNetworkKey(v7, v3);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v8);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    char v5 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v5);
  }
  else
  {
    return 13;
  }
  return v9;
}

uint64_t otThreadGetRloc(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetMeshLocal16(v2);
}

uint64_t ot::Mle::Mle::GetMeshLocal16(ot::Mle::Mle *this)
{
  return ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
}

{
  return ot::Mle::Mle::GetMeshLocal16(this);
}

uint64_t otThreadGetMeshLocalEid(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetMeshLocal64(v2);
}

uint64_t ot::Mle::Mle::GetMeshLocal64(ot::Mle::Mle *this)
{
  return ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 928));
}

{
  return ot::Mle::Mle::GetMeshLocal64(this);
}

void otThreadGetMeshLocalPrefix(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  ot::Mle::Mle::GetMeshLocalPrefix(v2);
}

void ot::Mle::Mle::GetMeshLocalPrefix(ot::Mle::Mle *this)
{
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
  ot::Ip6::Address::GetPrefix(Address);
}

{
  ot::Mle::Mle::GetMeshLocalPrefix(this);
}

uint64_t otThreadSetMeshLocalPrefix(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = 0;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    unsigned int v11 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v4);
    char v5 = (const ot::Ip6::NetworkPrefix *)ot::AsCoreType<otIp6NetworkPrefix>(a2);
    ot::Mle::Mle::SetMeshLocalPrefix(v11, v5);
    uint64_t v6 = ot::AsCoreType<otInstance>(a1);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v8 = ot::AsCoreType<otInstance>(a1);
    unsigned int v9 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v9);
  }
  else
  {
    return 13;
  }
  return v12;
}

uint64_t otThreadGetLinkLocalIp6Address(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetLinkLocalAddress(v2);
}

uint64_t ot::Mle::Mle::GetLinkLocalAddress(ot::Mle::Mle *this)
{
  return ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 896));
}

{
  return ot::Mle::Mle::GetLinkLocalAddress(this);
}

uint64_t otThreadGetLinkLocalAllThreadNodesMulticastAddress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(v2);
}

uint64_t ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(ot::Mle::Mle *this)
{
  return ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 992));
}

{
  return ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(this);
}

uint64_t otThreadGetRealmLocalAllThreadNodesMulticastAddress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(v2);
}

uint64_t ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(ot::Mle::Mle *this)
{
  return ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1016));
}

{
  return ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(this);
}

uint64_t otThreadGetServiceAloc(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v3);
  uint64_t v4 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a3);
  return ot::Mle::Mle::GetServiceAloc(v6, a2, v4);
}

void otThreadGetNetworkName(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v1);
  ot::MeshCoP::NetworkNameManager::GetNetworkName(v2);
  ot::MeshCoP::NetworkName::GetAsCString(v3);
}

uint64_t ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(uint64_t a1)
{
  return a1 + 87968;
}

{
  return ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(a1);
}

uint64_t otThreadSetNetworkName(uint64_t a1, ot *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    if (a2 && *(unsigned char *)a2)
    {
      uint64_t v4 = ot::AsCoreType<otInstance>(a1);
      char v5 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v4);
      unsigned int v11 = ot::MeshCoP::NetworkNameManager::SetNetworkName(v5, a2);
      uint64_t v6 = ot::AsCoreType<otInstance>(a1);
      uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
      ot::MeshCoP::ActiveDatasetManager::Clear(active);
      uint64_t v8 = ot::AsCoreType<otInstance>(a1);
      unsigned int v9 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
      ot::MeshCoP::PendingDatasetManager::Clear(v9);
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 13;
  }
  return v11;
}

void otThreadGetDomainName(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v1);
  DomainName = (ot::MeshCoP::NetworkName *)ot::MeshCoP::NetworkNameManager::GetDomainName(v2);
  ot::MeshCoP::NetworkName::GetAsCString(DomainName);
}

uint64_t ot::MeshCoP::NetworkNameManager::GetDomainName(ot::MeshCoP::NetworkNameManager *this)
{
  return (uint64_t)this + 17;
}

{
  return ot::MeshCoP::NetworkNameManager::GetDomainName(this);
}

uint64_t otThreadSetDomainName(uint64_t a1, ot *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    char v5 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>(v4);
    return ot::MeshCoP::NetworkNameManager::SetDomainName(v5, a2);
  }
  else
  {
    return 13;
  }
}

uint64_t otThreadSetFixedDuaInterfaceIdentifier(uint64_t a1, uint64_t a2)
{
  unsigned int v8 = 0;
  if (a2)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    char v7 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v2);
    uint64_t v3 = (const ot::Ip6::InterfaceIdentifier *)ot::AsCoreType<otIp6InterfaceIdentifier>(a2);
    return ot::DuaManager::SetFixedDuaInterfaceIdentifier(v7, v3);
  }
  else
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    char v5 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v4);
    ot::DuaManager::ClearFixedDuaInterfaceIdentifier(v5);
  }
  return v8;
}

uint64_t ot::Instance::Get<ot::DuaManager>(uint64_t a1)
{
  return a1 + 153584;
}

{
  return ot::Instance::Get<ot::DuaManager>(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp6InterfaceIdentifier>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otThreadGetFixedDuaInterfaceIdentifier(uint64_t a1)
{
  uint64_t v5 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = 0;
  uint64_t v1 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v5);
  if (ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(v1))
  {
    uint64_t v2 = (ot::DuaManager *)ot::Instance::Get<ot::DuaManager>(v5);
    return ot::DuaManager::GetFixedDuaInterfaceIdentifier(v2);
  }
  return v4;
}

BOOL ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(ot::DuaManager *this)
{
  return !ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::DuaManager *)((char *)this + 48));
}

{
  return ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(this);
}

uint64_t ot::DuaManager::GetFixedDuaInterfaceIdentifier(ot::DuaManager *this)
{
  return (uint64_t)this + 48;
}

{
  return ot::DuaManager::GetFixedDuaInterfaceIdentifier(this);
}

uint64_t otThreadGetKeySequenceCounter(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v1);
  return ot::KeyManager::GetCurrentKeySequence(v2);
}

uint64_t ot::KeyManager::GetCurrentKeySequence(ot::KeyManager *this)
{
  return *((unsigned int *)this + 4);
}

{
  return ot::KeyManager::GetCurrentKeySequence(this);
}

uint64_t otThreadSetKeySequenceCounter(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v2);
  return ot::KeyManager::SetCurrentKeySequence(v3, a2);
}

uint64_t otThreadGetKeySwitchGuardTime(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>(v1);
  return ot::KeyManager::GetKeySwitchGuardTime(v2);
}

uint64_t ot::KeyManager::GetKeySwitchGuardTime(ot::KeyManager *this)
{
  return *((unsigned int *)this + 18);
}

{
  return ot::KeyManager::GetKeySwitchGuardTime(this);
}

uint64_t otThreadSetKeySwitchGuardTime(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::KeyManager>(v2);
  return ot::KeyManager::SetKeySwitchGuardTime(v3, a2);
}

uint64_t ot::KeyManager::SetKeySwitchGuardTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return ot::KeyManager::SetKeySwitchGuardTime(this, a2);
}

uint64_t otThreadBecomeDetached(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::BecomeDetached(v2);
}

uint64_t otThreadBecomeChild(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::BecomeChild(v2);
}

uint64_t otThreadGetNextNeighborInfo(uint64_t a1, __int16 *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("otThreadGetNextNeighborInfo", "thread_api.cpp", 303, "(aIterator) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::InstanceLocator *)ot::Instance::Get<ot::NeighborTable>(v3);
  uint64_t v4 = (ot::Neighbor::Info *)ot::AsCoreType<otNeighborInfo>(a3);
  return ot::NeighborTable::GetNextNeighborInfo(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNeighborInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otThreadSetNeighborEnhAckSolicitationEnabled(uint64_t a1, uint64_t a2, char a3)
{
  char v8 = a3 & 1;
  unsigned int v7 = 23;
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::NeighborTable *)ot::Instance::Get<ot::NeighborTable>(v3);
  uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v4, a2, 0);
  if (Neighbor)
  {
    ot::Neighbor::SetEnhancedAckEnabled((uint64_t)Neighbor, v8 & 1);
    return 0;
  }
  return v7;
}

uint64_t ot::Neighbor::SetEnhancedAckEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3++*(_WORD *)(this + 4) = *(unsigned char *)(this + 34) & 0xFE | a2 & 1;
  return this;
}

{
  return ot::Neighbor::SetEnhancedAckEnabled(this, a2);
}

uint64_t otThreadGetNeighborEnhAckSolicitationEnabled(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unsigned int v7 = 23;
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::NeighborTable *)ot::Instance::Get<ot::NeighborTable>(v3);
  uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v4, a2, 0);
  if (Neighbor)
  {
    if (!a3) {
      __assert_rtn("otThreadGetNeighborEnhAckSolicitationEnabled", "thread_api.cpp", 335, "aEnabled != nullptr");
    }
    *a3 = ot::Neighbor::IsEnhacedAckEnabled(Neighbor) & 1;
    return 0;
  }
  return v7;
}

uint64_t ot::Neighbor::IsEnhacedAckEnabled(ot::Neighbor *this)
{
  return *((unsigned char *)this + 34) & 1;
}

{
  return ot::Neighbor::IsEnhacedAckEnabled(this);
}

uint64_t otThreadGetDeviceRole(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  unsigned __int8 Role = ot::Mle::Mle::GetRole(v2);
  return ot::MapEnum<ot::Mle::DeviceRole>(Role);
}

const char *otThreadDeviceRoleToString(unsigned int a1)
{
  unsigned __int8 v1 = ot::MapEnum<otDeviceRole>(a1);
  return ot::Mle::RoleToString(v1);
}

uint64_t ot::MapEnum<otDeviceRole>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otDeviceRole>(result);
}

uint64_t otThreadGetLeaderData(uint64_t a1, void *a2)
{
  unsigned int v7 = 0;
  if (!a2) {
    __assert_rtn("otThreadGetLeaderData", "thread_api.cpp", 356, "(aLeaderData) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsAttached(v3))
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    uint64_t v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v4);
    *a2 = *(void *)ot::Mle::Mle::GetLeaderData(v5);
  }
  else
  {
    return 16;
  }
  return v7;
}

uint64_t otThreadGetLeaderRouterId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetLeaderId(v2);
}

uint64_t otThreadGetLeaderWeight(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = (ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetWeighting(LeaderData);
}

uint64_t ot::Mle::LeaderData::GetWeighting(ot::Mle::LeaderData *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return ot::Mle::LeaderData::GetWeighting(this);
}

uint64_t otThreadGetPartitionId(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  uint64_t LeaderData = (ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v2);
  return ot::Mle::LeaderData::GetPartitionId(LeaderData);
}

uint64_t otThreadGetRloc16(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return (unsigned __int16)ot::Mle::Mle::GetRloc16(v2);
}

BOOL otThreadIsDeviceDetached(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::IsDetached(v2);
}

BOOL ot::Mle::Mle::IsDetached(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 73) == 1;
}

{
  return ot::Mle::Mle::IsDetached(this);
}

uint64_t otThreadResetRloc16(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetRloc16(v2);
}

uint64_t ot::Mle::Mle::ResetRloc16(uint64_t this)
{
  *(_WORD *)(this + 68ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = -2;
  return this;
}

{
  return ot::Mle::Mle::ResetRloc16(this);
}

uint64_t otThreadStoreInfoToSettings(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::Store(v2);
}

uint64_t otThreadGetParentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = ot::Instance::Get<ot::Mle::Mle>(v2);
  uint64_t v3 = (ot::Router::Info *)ot::AsCoreType<otRouterInfo>(a2);
  return ot::Mle::Mle::GetParentInfo(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otRouterInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

BOOL otThreadGetParentAverageRssi(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    __assert_rtn("otThreadGetParentAverageRssi", "thread_api.cpp", 405, "(aParentRssi) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  uint64_t Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v3);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Parent);
  *a2 = ot::LinkQualityInfo::GetAverageRss(LinkInfo);
  return *a2 == 127;
}

uint64_t ot::Neighbor::GetLinkInfo(ot::Neighbor *this)
{
  return (uint64_t)this + 38;
}

{
  return (uint64_t)this + 38;
}

{
  return ot::Neighbor::GetLinkInfo(this);
}

{
  return ot::Neighbor::GetLinkInfo(this);
}

uint64_t ot::LinkQualityInfo::GetAverageRss(ot::LinkQualityInfo *this)
{
  return (char)ot::RssAverager::GetAverage(this);
}

{
  return ot::LinkQualityInfo::GetAverageRss(this);
}

BOOL otThreadGetParentLastRssi(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    __assert_rtn("otThreadGetParentLastRssi", "thread_api.cpp", 419, "(aLastRssi) != nullptr");
  }
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  uint64_t Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v3);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Parent);
  *a2 = ot::LinkQualityInfo::GetLastRss(LinkInfo);
  return *a2 == 127;
}

uint64_t ot::LinkQualityInfo::GetLastRss(ot::LinkQualityInfo *this)
{
  return *((char *)this + 3);
}

{
  return ot::LinkQualityInfo::GetLastRss(this);
}

uint64_t otThreadSearchForBetterParent(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::SearchForBetterParent(v2);
}

uint64_t otThreadSetEnabled(uint64_t a1, char a2)
{
  unsigned int v7 = 0;
  if (a2)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
    return ot::Mle::Mle::Start(v3);
  }
  else
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    uint64_t v5 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v4);
    ot::Mle::Mle::Stop(v5);
  }
  return v7;
}

uint64_t ot::Mle::Mle::Start(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::Start(this, 0);
}

{
  return ot::Mle::Mle::Start(this);
}

uint64_t ot::Mle::Mle::Stop(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::Stop(this, 1);
}

{
  return ot::Mle::Mle::Stop(this);
}

uint64_t otThreadGetVersion()
{
  return 4;
}

BOOL otThreadIsSingleton(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::IsSingleton(v2);
}

uint64_t otThreadDiscover(uint64_t a1, int a2, unsigned __int16 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a1;
  int v16 = a2;
  unsigned __int16 v15 = a3;
  char v14 = a4 & 1;
  char v13 = a5 & 1;
  uint64_t v12 = a6;
  uint64_t v11 = a7;
  uint64_t v7 = ot::AsCoreType<otInstance>(a1);
  uint64_t v9 = ot::Instance::Get<ot::Mle::DiscoverScanner>(v7);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v10, v16);
  return ot::Mle::DiscoverScanner::Discover(v9, (ot::Mac::ChannelMask *)v10, v15, v14 & 1, v13 & 1, 0, v12, v11);
}

uint64_t ot::Instance::Get<ot::Mle::DiscoverScanner>(uint64_t a1)
{
  return a1 + 126080;
}

{
  return ot::Instance::Get<ot::Mle::DiscoverScanner>(a1);
}

uint64_t otThreadSetJoinerAdvertisement(uint64_t a1, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Mle::DiscoverScanner *)ot::Instance::Get<ot::Mle::DiscoverScanner>(v4);
  return ot::Mle::DiscoverScanner::SetJoinerAdvertisement(v5, a2, a3, a4);
}

BOOL otThreadIsDiscoverInProgress(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::DiscoverScanner *)ot::Instance::Get<ot::Mle::DiscoverScanner>(v1);
  return ot::Mle::DiscoverScanner::IsInProgress(v2);
}

BOOL ot::Mle::DiscoverScanner::IsInProgress(ot::Mle::DiscoverScanner *this)
{
  return *((unsigned char *)this + 64) != 0;
}

{
  return ot::Mle::DiscoverScanner::IsInProgress(this);
}

uint64_t otThreadGetIp6Counters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::GetCounters(v2);
}

uint64_t ot::MeshForwarder::GetCounters(ot::MeshForwarder *this)
{
  return (uint64_t)this + 136;
}

{
  return ot::MeshForwarder::GetCounters(this);
}

_WORD *otThreadResetIp6Counters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::ResetCounters(v2);
}

uint64_t otThreadGetMleCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetCounters(v2);
}

uint64_t ot::Mle::Mle::GetCounters(ot::Mle::Mle *this)
{
  return (uint64_t)this + 792;
}

{
  return ot::Mle::Mle::GetCounters(this);
}

unint64_t otThreadResetMleCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetCounters(v2);
}

uint64_t otThreadDetachGracefully(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v3);
  return ot::Mle::Mle::DetachGracefully(v4, a2, a3);
}

uint64_t otThreadAttachCslPeripheral(uint64_t a1, uint64_t a2, unsigned __int16 a3, unsigned __int8 a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v4);
  uint64_t v5 = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  return ot::Mle::Mle::AttachCslPeripheral(v7, v5, a3, a4, 0);
}

uint64_t otThreadConfigureWOR(uint64_t a1, unsigned __int16 a2, __int16 a3)
{
  unsigned int Active = otThreadSetLinkMode(a1, 6);
  if (!Active)
  {
    unsigned int Active = otLinkCslSetPeriod(a1, a2);
    if (!Active)
    {
      unsigned int Active = otIp6SetEnabled(a1, 1);
      if (!Active)
      {
        unsigned int Active = otThreadSetEnabled(a1, 1);
        if (!Active)
        {
          unsigned int Active = otPlatVendorSetPriority(a1, 5u, 1u, 0, v3, v4, v5, v6);
          if (!Active)
          {
            unsigned int Active = otDatasetGetActive(a1, (uint64_t)&otThreadConfigureWOR::sDataset);
            if (a3)
            {
              word_100509974 = a3;
              word_100509990 = word_100509990 & 0xEFFF | 0x1000;
              return otDatasetSetActive(a1, (uint64_t)&otThreadConfigureWOR::sDataset);
            }
          }
        }
      }
    }
  }
  return Active;
}

BOOL otThreadIsEnhCslPeerLinking(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::IsCslPeripheralAttaching(v2);
}

BOOL ot::Mle::Mle::IsCslPeripheralAttaching(ot::Mle::Mle *this)
{
  BOOL v2 = 1;
  if (*((unsigned char *)this + 384) != 1) {
    return *((unsigned char *)this + 384) == 2;
  }
  return v2;
}

{
  return ot::Mle::Mle::IsCslPeripheralAttaching(this);
}

uint64_t otThreadSetFirmwareUpdate(uint64_t a1, char a2)
{
  char v11 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v2);
  return ot::Mle::Mle::setFirmwareUpdate(v3, v11 & 1, v4, v5, v6, v7, v8, v9);
}

uint64_t otThreadIsEnhCslPeerUnlinking(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::IsCslPeripheralDetaching(v2) & 1;
}

void otThreadGetCslPeripheralMleID(uint64_t a1, char *a2, __int16 a3)
{
  uint64_t v14 = a1;
  char v13 = a2;
  __int16 v12 = a3;
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v3);
  CslPeripheral = (ot::Neighbor *)ot::Mle::Mle::GetCslPeripheral(v4);
  if (CslPeripheral)
  {
    __int16 Rloc16 = ot::Neighbor::GetRloc16(CslPeripheral);
    uint64_t v5 = ot::AsCoreType<otInstance>(v14);
    uint64_t v6 = (ot::InstanceLocator *)ot::Instance::Get<ot::Mle::Mle>(v5);
    uint64_t v7 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v6);
    ot::ChildTable::FindChild(v7, Rloc16, 0);
    if (v8)
    {
      if (!ot::Child::GetMeshLocalIp6Address(v8, (ot::Ip6::Address *)v10)) {
        otIp6AddressToString((uint64_t)v10, v13, v12);
      }
    }
  }
}

uint64_t ot::Mle::Mle::GetCslPeripheral(ot::Mle::Mle *this)
{
  return *((void *)this + 135);
}

{
  return ot::Mle::Mle::GetCslPeripheral(this);
}

uint64_t otThreadGetCslPeripheralAddr(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  CslPeripheral = (ot::Neighbor *)ot::Mle::Mle::GetCslPeripheral(v2);
  if (!CslPeripheral) {
    return 0;
  }
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      ot::Neighbor::GetExtAddress(CslPeripheral);
      ot::Mac::ExtAddress::ToString(v3, (ot::StringWriter *)v12);
      uint64_t v4 = ot::String<(unsigned short)17>::AsCString((uint64_t)v12);
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v13, (uint64_t)"otThreadGetCslPeripheralAddr", v4);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: CSL peripheral address: %s \n", v13, 0x16u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v11, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v11, 0x16u);
  }
  ot::Neighbor::GetExtAddress(CslPeripheral);
  ot::Mac::ExtAddress::ToString(v5, (ot::StringWriter *)v10);
  return ot::String<(unsigned short)17>::AsCString((uint64_t)v10);
}

uint64_t otThreadWedWakeUpPattern(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::WedWakeUpPattern(v2);
}

uint64_t otThreadWedGetEcslPeriod(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return (unsigned __int16)ot::Mle::Mle::getEcslPeriod(v2);
}

uint64_t otThreadGetWasChild(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::wasChild(v2) & 1;
}

uint64_t ot::Mle::Mle::wasChild(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 322) & 1;
}

{
  return ot::Mle::Mle::wasChild(this);
}

BOOL otThreadIsEnhCslPeerLinked(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::IsCslPeripheralAttached(v2);
}

BOOL ot::Mle::Mle::IsCslPeripheralAttached(ot::Mle::Mle *this)
{
  BOOL v2 = 1;
  if (*((unsigned char *)this + 384) != 3) {
    return *((unsigned char *)this + 384) == 4;
  }
  return v2;
}

{
  return ot::Mle::Mle::IsCslPeripheralAttached(this);
}

uint64_t otThreadDetachEnhCslPeer(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>(v1);
  return ot::Mle::Mle::DetachCslPeripheral(v2);
}

uint64_t otThreadGetTriggerBasedIp6Counters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::GetTriggerBasedCounters(v2);
}

uint64_t ot::MeshForwarder::GetTriggerBasedCounters(ot::MeshForwarder *this)
{
  return (uint64_t)this + 240;
}

{
  return ot::MeshForwarder::GetTriggerBasedCounters(this);
}

void *otThreadResetTriggerBasedIp6Counters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>(v1);
  return ot::MeshForwarder::ResetTriggerBasedCounters(v2);
}

void *ot::MeshForwarder::ResetTriggerBasedCounters(ot::MeshForwarder *this)
{
  return memset((char *)this + 240, 0, 0x38uLL);
}

{
  return ot::MeshForwarder::ResetTriggerBasedCounters(this);
}

uint64_t otThreadGetMleTriggerBasedCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetTriggerBasedCounters(v2);
}

uint64_t ot::Mle::Mle::GetTriggerBasedCounters(ot::Mle::Mle *this)
{
  return (uint64_t)this + 876;
}

{
  return ot::Mle::Mle::GetTriggerBasedCounters(this);
}

uint64_t otThreadResetMleTriggerBasedCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetMleTriggerBasedCounters(v2);
}

uint64_t ot::Mle::Mle::ResetMleTriggerBasedCounters(uint64_t this)
{
  *(void *)(this + 876) = 0;
  *(void *)(this + 88++*(_WORD *)(this + 4) = 0;
  *(_WORD *)(this + 89ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return this;
}

{
  return ot::Mle::Mle::ResetMleTriggerBasedCounters(this);
}

uint64_t otThreadGetBbrCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::BackboneRouter::Local *)ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  return ot::BackboneRouter::Local::GetBbrCounters(v2);
}

uint64_t ot::BackboneRouter::Local::GetBbrCounters(ot::BackboneRouter::Local *this)
{
  return (uint64_t)this + 120;
}

{
  return ot::BackboneRouter::Local::GetBbrCounters(this);
}

uint64_t otThreadResetBbrCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::BackboneRouter::Local>(v1);
  return ot::BackboneRouter::Local::ResetBbrCounters(v2);
}

uint64_t ot::BackboneRouter::Local::ResetBbrCounters(uint64_t this)
{
  *(_DWORD *)(this + 12ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0;
  *(_WORD *)(this + 12++*(_WORD *)(this + 4) = 0;
  return this;
}

{
  return ot::BackboneRouter::Local::ResetBbrCounters(this);
}

uint64_t otThreadGetMleLinkLossCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::GetLinkLossCounters(v2);
}

uint64_t ot::Mle::Mle::GetLinkLossCounters(ot::Mle::Mle *this)
{
  return (uint64_t)this + 872;
}

{
  return ot::Mle::Mle::GetLinkLossCounters(this);
}

uint64_t otThreadResetMleLinkLossCounters(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::Mle::ResetLinkLossCounters(v2);
}

uint64_t ot::Mle::Mle::ResetLinkLossCounters(uint64_t this)
{
  *(_DWORD *)(this + 87ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return this;
}

{
  return ot::Mle::Mle::ResetLinkLossCounters(this);
}

void otThreadGetConnectedRouterNodesHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::MleRouter::GetConnectedRouterNodesHistogram(v3, a2);
}

void *otThreadResetConnectedRouterNodesHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::ClearConnectedRouterNodesHistogram(v2);
}

void otThreadGetConnectedChildNodesHistogram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::MleRouter::GetConnectedChildNodesHistogram(v3, a2);
}

void *otThreadResetConnectedChildNodesHistogram(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::ClearConnectedChildNodesHistogram(v2);
}

ot::StringWriter *otConvertDurationInSecondsToString(unsigned int a1, char *a2, __int16 a3)
{
  unsigned int v8 = a1;
  uint64_t v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  unint64_t v3 = ot::Uptime::SecToMsec((ot::Uptime *)v8);
  return ot::Uptime::UptimeToString(v3, (ot::StringWriter *)v5, 0);
}

uint64_t ot::Uptime::SecToMsec(ot::Uptime *this)
{
  return 1000 * this;
}

{
  return ot::Uptime::SecToMsec(this);
}

uint64_t otThreadGetMaxAllowedChildren(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v1);
  return (unsigned __int16)ot::ChildTable::GetMaxChildrenAllowed(v2);
}

uint64_t ot::ChildTable::GetMaxChildrenAllowed(ot::ChildTable *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::ChildTable::GetMaxChildrenAllowed(this);
}

uint64_t otThreadSetMaxAllowedChildren(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unint64_t v3 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v2);
  return ot::ChildTable::SetMaxChildrenAllowed(v3, a2);
}

uint64_t otThreadGetMaxChildIpAddresses(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetMaxChildIpAddresses(v2);
}

uint64_t otThreadIsRouterEligible(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::IsRouterEligible(v2) & 1;
}

uint64_t otThreadSetRouterEligible(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetRouterEligible(v3, v5 & 1);
}

uint64_t otThreadSetPreferredRouterId(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  unint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetPreferredRouterId(v3, a2);
}

uint64_t otThreadGetDeviceProperties(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetDeviceProperties(v2);
}

uint64_t ot::Mle::MleRouter::GetDeviceProperties(ot::Mle::MleRouter *this)
{
  return (uint64_t)this + 1200;
}

{
  return ot::Mle::MleRouter::GetDeviceProperties(this);
}

uint64_t otThreadSetDeviceProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  unint64_t v3 = (const ot::Mle::DeviceProperties *)ot::AsCoreType<otDeviceProperties>(a2);
  return ot::Mle::MleRouter::SetDeviceProperties(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otDeviceProperties>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t otThreadGetLocalLeaderWeight(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetLeaderWeight(v2);
}

uint64_t ot::Mle::MleRouter::GetLeaderWeight(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35639);
}

{
  return ot::Mle::MleRouter::GetLeaderWeight(this);
}

uint64_t otThreadSetLocalLeaderWeight(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetLeaderWeight(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetLeaderWeight(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3563ot::Mle::Tlv::SetType(this, 9) = a2;
  return this;
}

{
  return ot::Mle::MleRouter::SetLeaderWeight(this, a2);
}

uint64_t otThreadGetJoinerUdpPort(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::MeshCoP::JoinerRouter *)ot::Instance::Get<ot::MeshCoP::JoinerRouter>(v1);
  return (unsigned __int16)ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(v2);
}

uint64_t ot::Instance::Get<ot::MeshCoP::JoinerRouter>(uint64_t a1)
{
  return a1 + 145384;
}

{
  return ot::Instance::Get<ot::MeshCoP::JoinerRouter>(a1);
}

uint64_t otThreadSetJoinerUdpPort(uint64_t a1, __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::MeshCoP::JoinerRouter *)ot::Instance::Get<ot::MeshCoP::JoinerRouter>(v2);
  ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(v3, a2);
  return 0;
}

uint64_t otThreadGetContextIdReuseDelay(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::NetworkData::Leader *)ot::Instance::Get<ot::NetworkData::Leader>(v1);
  return ot::NetworkData::Leader::GetContextIdReuseDelay(v2);
}

uint64_t ot::NetworkData::Leader::GetContextIdReuseDelay(ot::NetworkData::Leader *this)
{
  return ot::NetworkData::Leader::ContextIds::GetReuseDelay((ot::NetworkData::Leader *)((char *)this + 272));
}

{
  return ot::NetworkData::Leader::GetContextIdReuseDelay(this);
}

uint64_t otThreadSetContextIdReuseDelay(uint64_t a1, int a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::NetworkData::Leader *)ot::Instance::Get<ot::NetworkData::Leader>(v2);
  return ot::NetworkData::Leader::SetContextIdReuseDelay(v3, a2);
}

uint64_t ot::NetworkData::Leader::SetContextIdReuseDelay(ot::NetworkData::Leader *this, int a2)
{
  return ot::NetworkData::Leader::ContextIds::SetReuseDelay((uint64_t)this + 272, a2);
}

{
  return ot::NetworkData::Leader::SetContextIdReuseDelay(this, a2);
}

uint64_t otThreadGetNetworkIdTimeout(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetNetworkIdTimeout(v2);
}

uint64_t ot::Mle::MleRouter::GetNetworkIdTimeout(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35636);
}

{
  return ot::Mle::MleRouter::GetNetworkIdTimeout(this);
}

uint64_t otThreadSetNetworkIdTimeout(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetNetworkIdTimeout(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetNetworkIdTimeout(uint64_t this, char a2)
{
  *(unsigned char *)(this + 35636) = a2;
  return this;
}

{
  return ot::Mle::MleRouter::SetNetworkIdTimeout(this, a2);
}

uint64_t otThreadGetRouterUpgradeThreshold(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetRouterUpgradeThreshold(v2);
}

uint64_t ot::Mle::MleRouter::GetRouterUpgradeThreshold(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35637);
}

{
  return ot::Mle::MleRouter::GetRouterUpgradeThreshold(this);
}

uint64_t otThreadSetRouterUpgradeThreshold(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetRouterUpgradeThreshold(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetRouterUpgradeThreshold(uint64_t this, char a2)
{
  *(unsigned char *)(this + 35637) = a2;
  return this;
}

{
  return ot::Mle::MleRouter::SetRouterUpgradeThreshold(this, a2);
}

uint64_t otThreadGetChildRouterLinks(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetChildRouterLinks(v2);
}

uint64_t ot::Mle::MleRouter::GetChildRouterLinks(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35712);
}

{
  return ot::Mle::MleRouter::GetChildRouterLinks(this);
}

uint64_t otThreadSetChildRouterLinks(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetChildRouterLinks(v3, a2);
}

uint64_t otThreadReleaseRouterId(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 0x3Eu)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v2);
    return ot::RouterTable::Release(v3, a2);
  }
  else
  {
    return 7;
  }
}

uint64_t otThreadBecomeRouter(uint64_t a1)
{
  unsigned int v8 = 13;
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  unsigned int Role = ot::Mle::Mle::GetRole(v2);
  if (Role > 1)
  {
    if (Role == 2)
    {
      uint64_t v4 = ot::AsCoreType<otInstance>(a1);
      uint64_t v5 = ot::Instance::Get<ot::Mle::MleRouter>(v4);
      return ot::Mle::MleRouter::BecomeRouter(v5, 3u);
    }
    else if (Role == 4 || Role == 3)
    {
      return 0;
    }
  }
  return v8;
}

uint64_t otThreadBecomeLeader(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::BecomeLeader(v3, v5 & 1);
}

uint64_t otThreadBecomeLeader(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::BecomeLeader(v2, 1);
}

uint64_t otThreadGetRouterDowngradeThreshold(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetRouterDowngradeThreshold(v2);
}

uint64_t ot::Mle::MleRouter::GetRouterDowngradeThreshold(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35638);
}

{
  return ot::Mle::MleRouter::GetRouterDowngradeThreshold(this);
}

uint64_t otThreadSetRouterDowngradeThreshold(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetRouterDowngradeThreshold(v3, a2);
}

uint64_t ot::Mle::MleRouter::SetRouterDowngradeThreshold(uint64_t this, char a2)
{
  *(unsigned char *)(this + 35638) = a2;
  return this;
}

{
  return ot::Mle::MleRouter::SetRouterDowngradeThreshold(this, a2);
}

uint64_t otThreadGetRouterSelectionJitter(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return ot::Mle::MleRouter::GetRouterSelectionJitter(v2);
}

uint64_t ot::Mle::MleRouter::GetRouterSelectionJitter(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35710);
}

{
  return ot::Mle::MleRouter::GetRouterSelectionJitter(this);
}

void otThreadSetRouterSelectionJitter(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  ot::Mle::MleRouter::SetRouterSelectionJitter(v3, a2);
  IgnoreError();
}

uint64_t otThreadGetChildInfoById(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  __int16 v6 = (ot::InstanceLocator *)ot::Instance::Get<ot::ChildTable>(v3);
  uint64_t v4 = (ot::Child::Info *)ot::AsCoreType<otChildInfo>(a3);
  return ot::ChildTable::GetChildInfoById(v6, a2, v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otChildInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otThreadGetChildInfoByIndex(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  __int16 v6 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v3);
  uint64_t v4 = (ot::Child::Info *)ot::AsCoreType<otChildInfo>(a3);
  return ot::ChildTable::GetChildInfoByIndex(v6, a2, v4);
}

uint64_t otThreadGetChildNextIp6Address(uint64_t a1, unsigned __int16 a2, __int16 *a3, _OWORD *a4)
{
  uint64_t v15 = a1;
  unsigned __int16 v14 = a2;
  char v13 = a3;
  __int16 v12 = a4;
  unsigned int v11 = 0;
  ChildAtIndex = 0;
  if (!a3) {
    __assert_rtn("otThreadGetChildNextIp6Address", "thread_ftd_api.cpp", 255, "(aIterator) != nullptr");
  }
  if (!v12) {
    __assert_rtn("otThreadGetChildNextIp6Address", "thread_ftd_api.cpp", 256, "(aAddress) != nullptr");
  }
  uint64_t v4 = ot::AsCoreType<otInstance>(v15);
  char v5 = (ot::ChildTable *)ot::Instance::Get<ot::ChildTable>(v4);
  ChildAtIndex = (ot::Neighbor *)ot::ChildTable::GetChildAtIndex(v5, v14);
  if (ChildAtIndex)
  {
    if (ot::Neighbor::IsStateValidOrRestoring(ChildAtIndex))
    {
      ot::Child::AddressIterator::AddressIterator((uint64_t)v9, (uint64_t)ChildAtIndex, *v13, 0);
      if (ot::Child::AddressIterator::IsDone((ot::Child::AddressIterator *)v9))
      {
        return 23;
      }
      else
      {
        Address = (_OWORD *)ot::Child::AddressIterator::GetAddress((ot::Child::AddressIterator *)v9);
        *__int16 v12 = *Address;
        ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v9);
        __int16 AsIndex = ot::Child::AddressIterator::GetAsIndex((ot::Child::AddressIterator *)v9);
        *char v13 = AsIndex;
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 7;
  }
  return v11;
}

BOOL ot::Neighbor::IsStateValidOrRestoring(ot::Neighbor *this)
{
  BOOL v2 = 1;
  if ((*((unsigned char *)this + 30) & 0xF) != 7) {
    return ot::Neighbor::IsStateRestoring(this);
  }
  return v2;
}

{
  return ot::Neighbor::IsStateValidOrRestoring(this);
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  return a1;
}

{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = a4;
  *(_WORD *)(a1 + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = a3;
  ot::Child::AddressIterator::Update((ot::Child::AddressIterator *)a1);
  return a1;
}

BOOL ot::Child::AddressIterator::IsDone(ot::Child::AddressIterator *this)
{
  return *((unsigned __int16 *)this + 5) >= 0x10u;
}

{
  return ot::Child::AddressIterator::IsDone(this);
}

uint64_t ot::Child::AddressIterator::operator++(ot::Child::AddressIterator *a1)
{
  return ot::Child::AddressIterator::Update(a1);
}

{
  ++*((_WORD *)a1 + 5);
  return ot::Child::AddressIterator::Update(a1);
}

{
  return ot::Child::AddressIterator::operator++(a1);
}

{
  return ot::Child::AddressIterator::operator++(a1);
}

uint64_t ot::Child::AddressIterator::GetAsIndex(ot::Child::AddressIterator *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return ot::Child::AddressIterator::GetAsIndex(this);
}

uint64_t otThreadGetRouterIdSequence(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v1);
  return ot::RouterTable::GetRouterIdSequence(v2);
}

uint64_t ot::RouterTable::GetRouterIdSequence(ot::RouterTable *this)
{
  return *((unsigned __int8 *)this + 4708);
}

{
  return ot::RouterTable::GetRouterIdSequence(this);
}

uint64_t otThreadGetMaxRouterId()
{
  return 62;
}

uint64_t otThreadGetRouterInfo(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  __int16 v6 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v3);
  uint64_t v4 = (ot::Router::Info *)ot::AsCoreType<otRouterInfo>(a3);
  return ot::RouterTable::GetRouterInfo(v6, a2, v4);
}

uint64_t otThreadGetNextCacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v7 = (ot::InstanceLocator *)ot::Instance::Get<ot::AddressResolver>(v3);
  __int16 v6 = (_OWORD *)ot::AsCoreType<otCacheEntryInfo>(a2);
  uint64_t v4 = (ot::AddressResolver::Iterator *)ot::AsCoreType<otCacheEntryIterator>(a3);
  return ot::AddressResolver::GetNextCacheEntry(v7, v6, v4);
}

uint64_t ot::Instance::Get<ot::AddressResolver>(uint64_t a1)
{
  return a1 + 126224;
}

{
  return ot::Instance::Get<ot::AddressResolver>(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCacheEntryInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otCacheEntryIterator>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

ot::AddressResolver::CacheEntry *otThreadClearEidCache(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  BOOL v2 = (ot::AddressResolver::CacheEntry *)ot::Instance::Get<ot::AddressResolver>(v1);
  return ot::AddressResolver::Clear(v2);
}

double otThreadGetPskc(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = ot::Instance::Get<ot::KeyManager>(v2);
  uint64_t v3 = (__n128 *)ot::AsCoreType<otPskc>(a2);
  *(void *)&double result = ot::KeyManager::GetPskc(v5, v3).n128_u64[0];
  return result;
}

uint64_t otThreadSetPskc(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = 0;
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  if (ot::Mle::Mle::IsDisabled(v3))
  {
    uint64_t v4 = ot::AsCoreType<otInstance>(a1);
    uint64_t v11 = ot::Instance::Get<ot::KeyManager>(v4);
    uint64_t v5 = (_OWORD *)ot::AsCoreType<otPskc>(a2);
    ot::KeyManager::SetPskc(v11, v5);
    uint64_t v6 = ot::AsCoreType<otInstance>(a1);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>(v6);
    ot::MeshCoP::ActiveDatasetManager::Clear(active);
    uint64_t v8 = ot::AsCoreType<otInstance>(a1);
    uint64_t v9 = (ot::MeshCoP::PendingDatasetManager *)ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>(v8);
    ot::MeshCoP::PendingDatasetManager::Clear(v9);
  }
  else
  {
    return 13;
  }
  return v12;
}

uint64_t otThreadGetParentPriority(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v1);
  return (char)ot::Mle::MleRouter::GetAssignParentPriority(v2);
}

uint64_t ot::Mle::MleRouter::GetAssignParentPriority(ot::Mle::MleRouter *this)
{
  return *((char *)this + 35713);
}

{
  return ot::Mle::MleRouter::GetAssignParentPriority(this);
}

uint64_t otThreadSetParentPriority(uint64_t a1, char a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Mle::MleRouter *)ot::Instance::Get<ot::Mle::MleRouter>(v2);
  return ot::Mle::MleRouter::SetAssignParentPriority(v3, a2);
}

void *otThreadRegisterNeighborTableCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (void *)ot::Instance::Get<ot::NeighborTable>(v2);
  return ot::NeighborTable::RegisterCallback(v3, a2);
}

void *ot::NeighborTable::RegisterCallback(void *result, uint64_t a2)
{
  *double result = a2;
  return result;
}

{
  return ot::NeighborTable::RegisterCallback(result, a2);
}

void *otThreadSetDiscoveryRequestCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = ot::Instance::Get<ot::Mle::MleRouter>(v3);
  return ot::Mle::MleRouter::SetDiscoveryRequestCallback(v4, a2, a3);
}

void *ot::Mle::MleRouter::SetDiscoveryRequestCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::Set((void *)(a1 + 35720), a2, a3);
}

{
  return ot::Mle::MleRouter::SetDiscoveryRequestCallback(a1, a2, a3);
}

BOOL otThreadIsRouterIdAllocated(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v2);
  return ot::RouterTable::IsAllocated(v3, a2);
}

void otThreadGetNextHopAndPathCost(uint64_t a1, unsigned __int16 a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  uint64_t v12 = a1;
  unsigned __int16 v11 = a2;
  uint64_t v10 = a3;
  uint64_t v9 = a4;
  unsigned __int8 v8 = 0;
  __int16 v7 = 0;
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v6 = (ot::RouterTable *)ot::Instance::Get<ot::RouterTable>(v4);
  if (v10) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (unsigned __int16 *)&v7;
  }
  if (v9) {
    ot::RouterTable::GetNextHopAndPathCost(v6, v11, v5, v9);
  }
  else {
    ot::RouterTable::GetNextHopAndPathCost(v6, v11, v5, &v8);
  }
}

uint64_t ot::NetworkData::Leader::ContextIds::GetReuseDelay(ot::NetworkData::Leader::ContextIds *this)
{
  return *((unsigned int *)this + 15);
}

{
  return ot::NetworkData::Leader::ContextIds::GetReuseDelay(this);
}

uint64_t ot::NetworkData::Leader::ContextIds::SetReuseDelay(uint64_t this, int a2)
{
  *(_DWORD *)(this + 6ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = a2;
  return this;
}

{
  return ot::NetworkData::Leader::ContextIds::SetReuseDelay(this, a2);
}

BOOL ot::Neighbor::IsStateRestoring(ot::Neighbor *this)
{
  BOOL v2 = 1;
  if ((*((unsigned char *)this + 30) & 0xF) != 1) {
    return (*((unsigned char *)this + 30) & 0xF) == 6;
  }
  return v2;
}

{
  return ot::Neighbor::IsStateRestoring(this);
}

void *ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::Set(result, a2, a3);
}

ot::Buffer *otUdpNewMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  uint64_t v3 = (const ot::Message::Settings *)ot::Message::Settings::From(a2);
  return ot::Ip6::Udp::NewMessage(v5, 0, v3);
}

uint64_t ot::Instance::Get<ot::Ip6::Udp>(uint64_t a1)
{
  return a1 + 85328;
}

{
  return ot::Instance::Get<ot::Ip6::Udp>(a1);
}

uint64_t otUdpOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  __int16 v7 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v4);
  uint64_t v5 = (const ot::Ip6::Udp::SocketHandle *)ot::AsCoreType<otUdpSocket>(a2);
  return ot::Ip6::Udp::Open(v7, v5, a3, a4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otUdpSocket>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

BOOL otUdpIsOpen(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  uint64_t v3 = (const ot::Ip6::Udp::SocketHandle *)ot::AsCoreType<otUdpSocket>(a2);
  return ot::Ip6::Udp::IsOpen(v5, v3);
}

BOOL ot::Ip6::Udp::IsOpen(ot::Ip6::Udp *this, const ot::Ip6::Udp::SocketHandle *a2)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains((uint64_t *)this + 2, (uint64_t)a2);
}

{
  return ot::Ip6::Udp::IsOpen(this, a2);
}

uint64_t otUdpClose(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  uint64_t v3 = (ot::Ip6::Udp::SocketHandle *)ot::AsCoreType<otUdpSocket>(a2);
  return ot::Ip6::Udp::Close(v5, v3);
}

uint64_t otUdpBind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v9 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v4);
  __int16 v7 = (ot::Ip6::Udp::SocketHandle *)ot::AsCoreType<otUdpSocket>(a2);
  unsigned __int8 v8 = (ot::Ip6::SockAddr *)ot::AsCoreType<otSockAddr>(a3);
  char v5 = ot::MapEnum<otNetifIdentifier>(a4);
  return ot::Ip6::Udp::Bind(v9, v7, v8, v5);
}

uint64_t ot::MapEnum<otNetifIdentifier>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otNetifIdentifier>(result);
}

uint64_t otUdpConnect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  __int16 v7 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v3);
  uint64_t v6 = (ot::Ip6::Udp::SocketHandle *)ot::AsCoreType<otUdpSocket>(a2);
  uint64_t v4 = (const ot::Ip6::SockAddr *)ot::AsCoreType<otSockAddr>(a3);
  return ot::Ip6::Udp::Connect(v7, v6, v4);
}

uint64_t otUdpSend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v9 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v4);
  __int16 v7 = (ot::Ip6::Udp::SocketHandle *)ot::AsCoreType<otUdpSocket>(a2);
  unsigned __int8 v8 = (ot::Message *)ot::AsCoreType<otMessage>(a3);
  char v5 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a4);
  return ot::Ip6::Udp::SendTo(v9, v7, v8, v5);
}

uint64_t otUdpGetSockets(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v1);
  return ot::Ip6::Udp::GetUdpSockets(v2);
}

uint64_t ot::Ip6::Udp::GetUdpSockets(ot::Ip6::Udp *this)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead((uint64_t)this + 16);
}

{
  return ot::Ip6::Udp::GetUdpSockets(this);
}

uint64_t otUdpAddReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  uint64_t v3 = (ot::Ip6::Udp::Receiver *)ot::AsCoreType<otUdpReceiver>(a2);
  return ot::Ip6::Udp::AddReceiver(v5, v3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otUdpReceiver>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otUdpRemoveReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  char v5 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  uint64_t v3 = (ot::Ip6::Udp::Receiver *)ot::AsCoreType<otUdpReceiver>(a2);
  return ot::Ip6::Udp::RemoveReceiver(v5, v3);
}

uint64_t otUdpSendDatagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  __int16 v7 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v3);
  uint64_t v6 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  uint64_t v4 = (ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  return ot::Ip6::Udp::SendDatagram(v7, v6, v4, 0x11u);
}

uint64_t otUdpIsPortInUse(uint64_t a1, __int16 a2)
{
  uint64_t v2 = ot::AsCoreType<otInstance>(a1);
  uint64_t v3 = (ot::Ip6::Udp *)ot::Instance::Get<ot::Ip6::Udp>(v2);
  return ot::Ip6::Udp::IsPortInUse(v3, a2) & 1;
}

BOOL ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2] = (uint64_t)a1;
  v3[1] = a2;
  v3[0] = 0;
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(a1, a2, v3) == 0;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3 = 0;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3 = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

{
  return *(void *)(a1 + 64);
}

{
  return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead(a1);
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead(a1);
}

ot::BackboneRouter::BackboneTmfAgent *ot::BackboneRouter::BackboneTmfAgent::BackboneTmfAgent(ot::BackboneRouter::BackboneTmfAgent *this, ot::Instance *a2)
{
  return this;
}

{
  ot::BackboneRouter::BackboneTmfAgent::BackboneTmfAgent(this, a2);
  return this;
}

void *ot::Coap::CoapBase::SetInterceptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::Set((void *)(a1 + 56), a2, a3);
}

{
  return ot::Coap::CoapBase::SetInterceptor(a1, a2, a3);
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::Filter(ot::BackboneRouter::BackboneTmfAgent *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, void *a4)
{
  if (ot::BackboneRouter::BackboneTmfAgent::IsBackboneTmfMessage(a3, a2)) {
    return 0;
  }
  else {
    return 31;
  }
}

uint64_t ot::Coap::CoapBase::SetResourceHandler(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = a2;
  return result;
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::HandleResource(ot::BackboneRouter::BackboneTmfAgent *this, ot::Coap::CoapBase *a2, ot::Coap::Message *a3, ot::Coap::Message *a4, const ot::Ip6::MessageInfo *a5, int (*a6)(const void *, const void *))
{
  return ot::BackboneRouter::BackboneTmfAgent::HandleResource(this, a2, a3, a4, (uint64_t)a5, a6) & 1;
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::Start(ot::BackboneRouter::BackboneTmfAgent *this)
{
  unsigned int v11 = ot::Coap::Coap::Start((uint64_t)this, 61631, 2);
  if (!v11)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Bbr", "Start listening on port %u", v1, v2, v3, v4, v5, v6, 191);
    __int16 v7 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
    AllNetworkBackboneRoutersAddress = (const ot::Ip6::Address *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v7);
    ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(this, AllNetworkBackboneRoutersAddress);
  }
  return v11;
}

void ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(ot::BackboneRouter::BackboneTmfAgent *this, const ot::Ip6::Address *a2)
{
  int v3 = ot::Ip6::Udp::Socket::JoinNetifMulticastGroup((uint64_t)this + 144, 2, a2);
  ot::BackboneRouter::BackboneTmfAgent::LogError((uint64_t)this, (char)"Backbone TMF subscribes", a2, v3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::Local>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(a1);
}

uint64_t ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(ot::BackboneRouter::Local *this)
{
  return (uint64_t)this + 72;
}

{
  return ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(this);
}

uint64_t ot::BackboneRouter::BackboneTmfAgent::HandleResource(ot::BackboneRouter::BackboneTmfAgent *this, ot *a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  char v11 = 1;
  int v9 = ot::UriFromPath(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  if (v9 == 7)
  {
    uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
    ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)7>(v7, a3, a4);
  }
  else if (v9 == 9)
  {
    uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
    ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)9>(v6, a3, a4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::Manager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(a1);
}

BOOL ot::BackboneRouter::BackboneTmfAgent::IsBackboneTmfMessage(ot::BackboneRouter::BackboneTmfAgent *this, const ot::Ip6::MessageInfo *a2)
{
  SockAddr = (void *)ot::Ip6::MessageInfo::GetSockAddr(a2);
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
  uint64_t v2 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  BOOL v10 = 0;
  if (ot::BackboneRouter::Local::IsEnabled(v2))
  {
    BOOL v10 = 0;
    if (ot::Ip6::Address::IsLinkLocal(PeerAddr))
    {
      BOOL v8 = 1;
      if (!ot::Ip6::Address::IsLinkLocal((ot::Ip6::Address *)SockAddr))
      {
        int v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
        AllNetworkBackboneRoutersAddress = (const void *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v3);
        BOOL v8 = 1;
        if (!ot::Equatable<ot::Ip6::Address>::operator==(SockAddr, AllNetworkBackboneRoutersAddress))
        {
          uint64_t v5 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
          AllDomainBackboneRoutersAddress = (const void *)ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(v5);
          return ot::Equatable<ot::Ip6::Address>::operator==(SockAddr, AllDomainBackboneRoutersAddress);
        }
      }
      return v8;
    }
  }
  return v10;
}

uint64_t ot::Ip6::MessageInfo::GetSockAddr(ot::Ip6::MessageInfo *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::Ip6::MessageInfo::GetSockAddr(this);
}

{
  return ot::Ip6::MessageInfo::GetSockAddr(this);
}

uint64_t ot::Ip6::MessageInfo::GetPeerAddr(ot::Ip6::MessageInfo *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this + 16);
}

{
  return ot::AsCoreType<otIp6Address>((uint64_t)this + 16);
}

{
  return ot::Ip6::MessageInfo::GetPeerAddr(this);
}

{
  return ot::Ip6::MessageInfo::GetPeerAddr(this);
}

BOOL ot::BackboneRouter::Local::IsEnabled(ot::BackboneRouter::Local *this)
{
  return *(unsigned char *)this != 0;
}

{
  return ot::BackboneRouter::Local::IsEnabled(this);
}

uint64_t ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(ot::BackboneRouter::Local *this)
{
  return (uint64_t)this + 88;
}

{
  return ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(this);
}

void ot::BackboneRouter::BackboneTmfAgent::LogError(uint64_t a1, char a2, ot::Ip6::Address *a3, int a4)
{
  if (a4)
  {
    ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v18);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v18);
    ot::ErrorToString(a4);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Bbr", "%s %s: %s", v10, v11, v12, v13, v14, v15, a2);
  }
  else
  {
    ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v19);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v19);
    ot::ErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Bbr", "%s %s: %s", v4, v5, v6, v7, v8, v9, a2);
  }
}

void ot::BackboneRouter::BackboneTmfAgent::UnsubscribeMulticast(ot::BackboneRouter::BackboneTmfAgent *this, const ot::Ip6::Address *a2)
{
  int v3 = ot::Ip6::Udp::Socket::LeaveNetifMulticastGroup((uint64_t)this + 144, 2, a2);
  ot::BackboneRouter::BackboneTmfAgent::LogError((uint64_t)this, (char)"Backbone TMF unsubscribes", a2, v3);
}

void *ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::Set(result, a2, a3);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::Manager>(uint64_t a1)
{
  return a1 + 145768;
}

{
  return ot::Instance::Get<ot::BackboneRouter::Manager>(a1);
}

ot::BackboneRouter::Leader *ot::BackboneRouter::Leader::Leader(ot::BackboneRouter::Leader *this, ot::Instance *a2)
{
  return this;
}

{
  ot::BackboneRouter::Leader::Leader(this, a2);
  return this;
}

uint64_t ot::BackboneRouter::Leader::Reset(ot::BackboneRouter::Leader *this)
{
  *(_WORD *)this = -2;
  return ot::Ip6::Prefix::SetLength((uint64_t)this + 12, 0);
}

uint64_t ot::Ip6::Prefix::SetLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16) = a2;
  return this;
}

{
  return ot::Ip6::Prefix::SetLength(this, a2);
}

uint64_t ot::BackboneRouter::Leader::GetConfig(ot::BackboneRouter::Leader *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::BackboneRouter::Leader::HasPrimary(a1))
  {
    *(void *)a2 = *(void *)a1;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a1 + 2);
  }
  else
  {
    return 23;
  }
  return v4;
}

BOOL ot::BackboneRouter::Leader::HasPrimary(ot::BackboneRouter::Leader *this)
{
  return *(unsigned __int16 *)this != 65534;
}

{
  return ot::BackboneRouter::Leader::HasPrimary(this);
}

uint64_t ot::BackboneRouter::Leader::GetServiceId(ot::BackboneRouter::Leader *this, unsigned __int8 *a2)
{
  if (ot::BackboneRouter::Leader::HasPrimary(this))
  {
    uint64_t v2 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
    return ot::NetworkData::Service::Manager::GetServiceId<ot::NetworkData::Service::BackboneRouter>(v2, 1, a2);
  }
  else
  {
    return 23;
  }
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Service::Manager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(a1);
}

uint64_t ot::NetworkData::Service::Manager::GetServiceId<ot::NetworkData::Service::BackboneRouter>(ot::NetworkData::Service::Manager *a1, char a2, unsigned __int8 *a3)
{
  return ot::NetworkData::Service::Manager::GetServiceId(a1, (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData, 1, a2 & 1, a3);
}

{
  return ot::NetworkData::Service::Manager::GetServiceId<ot::NetworkData::Service::BackboneRouter>(a1, a2, a3);
}

void ot::BackboneRouter::Leader::LogBackboneRouterPrimary(uint64_t a1, unsigned __int8 a2, __int16 *a3)
{
  char v3 = ot::BackboneRouter::Leader::StateToString(a2);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLeader", "PBBR state: %s", v4, v5, v6, v7, v8, v9, v3);
  if (a2 != 2)
  {
    if (a2)
    {
      __int16 v16 = *a3;
      ot::ToUlong(*((unsigned int *)a3 + 1));
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLeader", "Rloc16:0x%4x, seqno:%u, delay:%u, timeout:%lu", v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

char *ot::BackboneRouter::Leader::StateToString(unsigned __int8 a1)
{
  return ot::BackboneRouter::Leader::StateToString(ot::BackboneRouter::Leader::State)::kStateStrings[a1];
}

void ot::BackboneRouter::Leader::LogDomainPrefix(uint64_t a1, unsigned __int8 a2, ot::Ip6::Prefix *a3)
{
  ot::Ip6::Prefix::ToString(a3, (ot::StringWriter *)v11);
  char v9 = ot::String<(unsigned short)45>::AsCString((uint64_t)v11);
  ot::BackboneRouter::Leader::DomainPrefixStateToString(a2);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLeader", "Domain Prefix: %s, state: %s", v3, v4, v5, v6, v7, v8, v9);
}

char *ot::BackboneRouter::Leader::DomainPrefixStateToString(unsigned __int8 a1)
{
  return ot::BackboneRouter::Leader::DomainPrefixStateToString(ot::BackboneRouter::Leader::DomainPrefixState)::kPrefixStateStrings[a1];
}

uint64_t ot::BackboneRouter::Leader::Update(ot::BackboneRouter::Leader *this)
{
  return ot::BackboneRouter::Leader::UpdateDomainPrefixConfig(this);
}

void ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary(ot::BackboneRouter::Leader *this)
{
  uint64_t v19 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
  ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(v1, (uint64_t)&v17);
  if ((unsigned __int16)v17 == *(unsigned __int16 *)this)
  {
    if ((unsigned __int16)v17 == 65534)
    {
      unsigned __int8 v16 = 0;
    }
    else if (v18 == *((unsigned __int8 *)this + 8))
    {
      if (WORD1(v17) == *((unsigned __int16 *)this + 1) && HIDWORD(v17) == *((_DWORD *)this + 1)) {
        unsigned __int8 v16 = 5;
      }
      else {
        unsigned __int8 v16 = 4;
      }
    }
    else
    {
      unsigned __int8 v16 = 3;
    }
  }
  else if ((unsigned __int16)v17 == 65534)
  {
    unsigned __int8 v16 = 2;
  }
  else if (*(unsigned __int16 *)this == 65534)
  {
    unsigned __int8 v16 = 1;
  }
  else
  {
    unsigned __int8 v16 = 3;
  }
  if ((unsigned __int16)v17 != 65534)
  {
    unsigned int v15 = HIDWORD(v17);
    if (HIDWORD(v17) >= 0x12C) {
      unsigned int v13 = HIDWORD(v17);
    }
    else {
      unsigned int v13 = 300;
    }
    HIDWORD(v17) = v13;
    if (v13 <= 0x20C49B) {
      int v12 = HIDWORD(v17);
    }
    else {
      int v12 = 2147483;
    }
    HIDWORD(v17) = v12;
    if (v12 != v15)
    {
      char v11 = ot::ToUlong(v15);
      ot::ToUlong(HIDWORD(v17));
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"BbrLeader", "Leader MLR Timeout is normalized from %lu to %lu", v2, v3, v4, v5, v6, v7, v11);
    }
  }
  *(void *)this = v17;
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v18;
  ot::BackboneRouter::Leader::LogBackboneRouterPrimary((uint64_t)this, v16, (__int16 *)this);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  ot::BackboneRouter::Local::HandleBackboneRouterPrimaryUpdate(v8, v16, (unsigned __int16 *)this);
  char v9 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
  ot::MlrManager::HandleBackboneRouterPrimaryUpdate(v9, v16);
  uint64_t v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
  ot::DuaManager::HandleBackboneRouterPrimaryUpdate(v10, v16);
}

uint64_t ot::BackboneRouter::Leader::UpdateDomainPrefixConfig(ot::BackboneRouter::Leader *this)
{
  uint64_t v14 = this;
  unsigned int v13 = 0;
  char v9 = 0;
  while (1)
  {
    uint64_t v1 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v1, &v13, (ot::NetworkData::OnMeshPrefixConfig *)v11))break; {
    if ((v12 & 0x400) != 0)
    }
    {
      char v9 = 1;
      break;
    }
  }
  if (v9)
  {
    Prefix = (unsigned __int8 *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v11);
    if (ot::Ip6::Prefix::operator==(Prefix, (unsigned __int8 *)this + 12))
    {
      char v10 = 4;
      ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, 4u, (ot::BackboneRouter::Leader *)((char *)this + 12));
    }
    else
    {
      if (*((unsigned char *)this + 28)) {
        char v10 = 3;
      }
      else {
        char v10 = 1;
      }
      uint64_t v3 = ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v11);
      *(_OWORD *)((char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_OWORD *)v3;
      *((unsigned char *)this + 28) = *(unsigned char *)(v3 + 16);
      ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, v10, (ot::BackboneRouter::Leader *)((char *)this + 12));
    }
  }
  else if (ot::Ip6::Prefix::GetLength((ot::BackboneRouter::Leader *)((char *)this + 12)))
  {
    ot::Ip6::Prefix::SetLength((uint64_t)this + 12, 0);
    char v10 = 2;
    ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, 2u, (ot::BackboneRouter::Leader *)((char *)this + 12));
  }
  else
  {
    char v10 = 0;
    ot::BackboneRouter::Leader::LogDomainPrefix((uint64_t)this, 0, (ot::BackboneRouter::Leader *)((char *)this + 12));
  }
  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  ot::BackboneRouter::Local::HandleDomainPrefixUpdate(v4, v10);
  uint64_t v5 = (ot::BackboneRouter::NdProxyTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::NdProxyTable>(this);
  ot::BackboneRouter::NdProxyTable::HandleDomainPrefixUpdate(v5, v10);
  uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
  return ot::DuaManager::HandleDomainPrefixUpdate(v6, v10);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MlrManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::DuaManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
}

uint64_t ot::Ip6::Prefix::GetLength(ot::Ip6::Prefix *this)
{
  return *((unsigned __int8 *)this + 16);
}

{
  return ot::Ip6::Prefix::GetLength(this);
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::GetPrefix(ot::NetworkData::OnMeshPrefixConfig *this)
{
  return ot::AsCoreType<otIp6Prefix>((uint64_t)this);
}

{
  return ot::AsCoreType<otIp6Prefix>((uint64_t)this);
}

{
  return ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
}

{
  return ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::NdProxyTable>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::NdProxyTable>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::NdProxyTable>(a1);
}

BOOL ot::BackboneRouter::Leader::IsDomainUnicast(ot::BackboneRouter::Leader *this, const ot::Ip6::Address *a2)
{
  BOOL v4 = 0;
  if (ot::BackboneRouter::Leader::HasDomainPrefix(this)) {
    return ot::Ip6::Address::MatchesPrefix(a2, (ot::BackboneRouter::Leader *)((char *)this + 12));
  }
  return v4;
}

uint64_t ot::BackboneRouter::Leader::HasDomainPrefix(ot::BackboneRouter::Leader *this)
{
  char Length = ot::Ip6::Prefix::GetLength((ot::BackboneRouter::Leader *)((char *)this + 12));
  if (v2 | (Length == 0)) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  return v3 & 1;
}

{
  return ot::BackboneRouter::Leader::HasDomainPrefix(this);
}

uint64_t ot::Instance::Get<ot::NetworkData::Service::Manager>(uint64_t a1)
{
  return a1 + 143408;
}

{
  return ot::Instance::Get<ot::NetworkData::Service::Manager>(a1);
}

ot::BackboneRouter::Local *ot::BackboneRouter::Local::Local(ot::BackboneRouter::Local *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 1) = 3600;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 5;
  *((unsigned char *)this + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = ot::Random::NonCrypto::GetUint8(v2) % 127;
  *((unsigned char *)this + 11) = 5;
  *((unsigned char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 13);
  uint64_t Prefix = ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
  ot::Ip6::Prefix::SetLength(Prefix, 0);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::BackboneRouter::Local *)((char *)this + 40));
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::BackboneRouter::Local *)((char *)this + 40));
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
  ot::Ip6::InterfaceIdentifier::SetToLocator(Iid, 0xFC38u);
  ot::Clearable<ot::Ip6::Address>::Clear((void *)this + 9);
  *((unsigned char *)this + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
  *((unsigned char *)this + 73) = 50;
  *((unsigned char *)this + 87) = 3;
  ot::Clearable<ot::Ip6::Address>::Clear((void *)this + 11);
  double result = this;
  *((unsigned char *)this + 88) = -1;
  *((unsigned char *)this + 8ot::Mle::Tlv::SetType(this, 9) = 50;
  *((unsigned char *)this + 103) = 3;
  return result;
}

{
  ot::BackboneRouter::Local::Local(this, a2);
  return this;
}

uint64_t ot::Random::NonCrypto::GetUint8(ot::Random::NonCrypto *this)
{
  return ot::Random::NonCrypto::GetUint32(this);
}

{
  return ot::Random::NonCrypto::GetUint8(this);
}

uint64_t ot::Ip6::Address::GetIid(ot::Ip6::Address *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

{
  return ot::Ip6::Address::GetIid(this);
}

{
  return ot::Ip6::Address::GetIid(this);
}

void ot::BackboneRouter::Local::SetEnabled(ot::BackboneRouter::Local *this, char a2)
{
  char v3 = a2 & 1;
  if ((a2 & 1) != ot::BackboneRouter::Local::IsEnabled(this))
  {
    if (v3)
    {
      ot::BackboneRouter::Local::SetState(this, 1u);
      ot::BackboneRouter::Local::AddDomainPrefixToNetworkData(this);
      ot::BackboneRouter::Local::AddService(this, 0);
      IgnoreError();
    }
    else
    {
      ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(this);
      ot::BackboneRouter::Local::RemoveService(this);
      ot::BackboneRouter::Local::SetState(this, 0);
    }
  }
}

ot::InstanceLocator *ot::BackboneRouter::Local::SetState(ot::InstanceLocator *result, unsigned __int8 a2)
{
  char v10 = result;
  if (*(unsigned __int8 *)result != a2)
  {
    if (!*(unsigned char *)result)
    {
      char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(result);
      ot::Mle::Mle::GetMeshLocalPrefix(v2);
      ot::Ip6::Address::SetMulticastNetworkPrefix((ot::InstanceLocator *)((char *)v10 + 72), v3);
    }
    if (*(unsigned char *)v10 == 2)
    {
      BOOL v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v10);
      ot::Ip6::Netif::RemoveUnicastAddress(v4, (ot::InstanceLocator *)((char *)v10 + 40));
    }
    else if (a2 == 2)
    {
      Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::InstanceLocator *)((char *)v10 + 40));
      uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v10);
      ot::Mle::Mle::GetMeshLocalPrefix(v5);
      ot::Ip6::Address::SetPrefix(Address, v6);
      uint64_t v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v10);
      ot::Ip6::Netif::AddUnicastAddress(v7, (ot::InstanceLocator *)((char *)v10 + 40));
    }
    *(unsigned char *)char v10 = a2;
    if (*(unsigned char *)v10)
    {
      if (*(unsigned char *)v10 == 1) {
        ++*((_WORD *)v10 + 62);
      }
      else {
        ++*((_WORD *)v10 + 60);
      }
    }
    else
    {
      ++*((_WORD *)v10 + 61);
    }
    uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(v10);
    return (ot::InstanceLocator *)ot::Notifier::Signal(v8, 0x2000000);
  }
  return result;
}

void ot::BackboneRouter::Local::AddDomainPrefixToNetworkData(ot::BackboneRouter::Local *this)
{
  int v7 = 23;
  uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
  char Length = ot::Ip6::Prefix::GetLength(Prefix);
  if (v3 | (Length == 0)) {
    char v4 = 1;
  }
  else {
    char v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (ot::NetworkData::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    int v7 = ot::NetworkData::Local::AddOnMeshPrefix(v5, (ot::BackboneRouter::Local *)((char *)this + 16));
  }
  ot::BackboneRouter::Local::LogDomainPrefix((uint64_t)this, (char)"Add", v7);
}

uint64_t ot::BackboneRouter::Local::AddService(ot::BackboneRouter::Local *this, char a2)
{
  uint64_t v14 = this;
  char v13 = a2 & 1;
  unsigned int v12 = 13;
  if (*(unsigned char *)this)
  {
    char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (ot::Mle::Mle::IsAttached(v2))
    {
      if ((v13 & 1) != 0
        || (char v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this),
            !ot::BackboneRouter::Leader::HasPrimary(v3))
        || (char v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this),
            int Server16 = (unsigned __int16)ot::BackboneRouter::Leader::GetServer16(v4),
            uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
            Server16 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v5)))
      {
        ot::NetworkData::Service::BackboneRouter::ServerData::SetSequenceNumber(v11, *((unsigned char *)this + 10));
        ot::NetworkData::Service::BackboneRouter::ServerData::SetReregistrationDelay((ot::NetworkData::Service::BackboneRouter::ServerData *)v11, *((_WORD *)this + 4));
        ot::NetworkData::Service::BackboneRouter::ServerData::SetMlrTimeout((ot::NetworkData::Service::BackboneRouter::ServerData *)v11, *((_DWORD *)this + 1));
        uint64_t v6 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
        unsigned int v12 = ot::NetworkData::Service::Manager::Add<ot::NetworkData::Service::BackboneRouter>(v6, (ot::NetworkData::Service::BackboneRouter::ServerData *)v11, 1);
        if (!v12)
        {
          int v7 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
          ot::NetworkData::Notifier::HandleServerDataUpdated(v7);
          *((unsigned char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
        }
      }
    }
  }
  ot::BackboneRouter::Local::LogBackboneRouterService((uint64_t)this, (char)"Add", v12);
  return v12;
}

void ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(ot::BackboneRouter::Local *this)
{
  int v4 = 23;
  if (*((unsigned char *)this + 32))
  {
    char v2 = (ot::NetworkData::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    uint64_t Prefix = (const ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
    int v4 = ot::NetworkData::Local::RemoveOnMeshPrefix(v2, Prefix);
  }
  ot::BackboneRouter::Local::LogDomainPrefix((uint64_t)this, (char)"Remove", v4);
}

void ot::BackboneRouter::Local::RemoveService(ot::BackboneRouter::Local *this)
{
  uint64_t v1 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
  int v4 = ot::NetworkData::Service::Manager::Remove<ot::NetworkData::Service::BackboneRouter>(v1);
  if (!v4)
  {
    char v2 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    ot::NetworkData::Notifier::HandleServerDataUpdated(v2);
    *((unsigned char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  }
  ot::BackboneRouter::Local::LogBackboneRouterService((uint64_t)this, (char)"Remove", v4);
}

void ot::BackboneRouter::Local::Reset(ot::BackboneRouter::Local *this)
{
  if (*(unsigned char *)this)
  {
    ot::BackboneRouter::Local::RemoveService(this);
    if (*(unsigned char *)this == 2)
    {
      ot::BackboneRouter::Local::SequenceNumberIncrease((uint64_t)this);
      uint64_t v1 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v1, 0x4000000);
      ot::BackboneRouter::Local::SetState(this, 1u);
    }
  }
}

uint64_t ot::BackboneRouter::Local::SequenceNumberIncrease(uint64_t this)
{
  int v3 = *(unsigned __int8 *)(this + 10);
  if (v3 == 127 || v3 == 126)
  {
    *(unsigned char *)(this + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0;
  }
  else if (v3 == 255 || v3 == 254)
  {
    *(unsigned char *)(this + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0x80;
  }
  else
  {
    ++*(unsigned char *)(this + 10);
  }
  return this;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Notifier>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
}

uint64_t ot::BackboneRouter::Local::GetConfig(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 10);
  *(_WORD *)(a2 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_WORD *)(result + 8);
  *(_DWORD *)(a2 + ++*(_WORD *)(this + 4) = *(_DWORD *)(result + 4);
  return result;
}

uint64_t ot::BackboneRouter::Local::SetConfig(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 0;
  char v5 = 0;
  if (*(_DWORD *)(a2 + 4) >= 0x12Cu
    && *(_DWORD *)(a2 + 4) <= 0x20C49Bu
    && *(_WORD *)(a2 + 2)
    && *(_DWORD *)(a2 + 4) > 2 * *(unsigned __int16 *)(a2 + 2))
  {
    if (*(unsigned __int16 *)(a2 + 2) != *(unsigned __int16 *)(a1 + 8))
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 2);
      char v5 = 1;
    }
    if (*(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4))
    {
      *(_DWORD *)(a1 + ++*(_WORD *)(this + 4) = *(_DWORD *)(a2 + 4);
      char v5 = 1;
    }
    if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 10))
    {
      *(unsigned char *)(a1 + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = *(unsigned char *)(a2 + 8);
      char v5 = 1;
    }
    if (v5)
    {
      char v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
      ot::Notifier::Signal(v2, 0x4000000);
      ot::BackboneRouter::Local::AddService((ot::BackboneRouter::Local *)a1, 0);
      IgnoreError();
    }
    ot::BackboneRouter::Local::LogBackboneRouterService(a1, (char)"Set", 0);
  }
  else
  {
    unsigned int v6 = 7;
    ot::BackboneRouter::Local::LogBackboneRouterService(a1, (char)"Set", 7);
  }
  return v6;
}

void ot::BackboneRouter::Local::LogBackboneRouterService(uint64_t a1, char a2, int a3)
{
  ot::ToUlong(*(unsigned int *)(a1 + 4));
  ot::ErrorToString(a3);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLocal", "%s BBR Service: seqno (%u), delay (%us), timeout (%lus), %s", v3, v4, v5, v6, v7, v8, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::Leader>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
}

uint64_t ot::BackboneRouter::Leader::GetServer16(ot::BackboneRouter::Leader *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::BackboneRouter::Leader::GetServer16(this);
}

unsigned char *ot::NetworkData::Service::BackboneRouter::ServerData::SetSequenceNumber(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::SetSequenceNumber(this, a2);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::SetReregistrationDelay(ot::NetworkData::Service::BackboneRouter::ServerData *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 1) = result;
  return result;
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::SetReregistrationDelay(this, a2);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::SetMlrTimeout(ot::NetworkData::Service::BackboneRouter::ServerData *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 3) = result;
  return result;
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::SetMlrTimeout(this, a2);
}

uint64_t ot::NetworkData::Service::Manager::Add<ot::NetworkData::Service::BackboneRouter>(ot::NetworkData::Service::Manager *a1, ot::NetworkData::Service::BackboneRouter::ServerData *a2, char a3)
{
  char v5 = a3 & 1;
  char Length = ot::NetworkData::Service::BackboneRouter::ServerData::GetLength(a2);
  return ot::NetworkData::Service::Manager::AddService(a1, (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData, 1, v5 & 1, (uint64_t)a2, Length);
}

{
  return ot::NetworkData::Service::Manager::Add<ot::NetworkData::Service::BackboneRouter>(a1, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Notifier>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
}

uint64_t ot::NetworkData::Service::Manager::Remove<ot::NetworkData::Service::BackboneRouter>(ot::NetworkData::Service::Manager *a1)
{
  return ot::NetworkData::Service::Manager::RemoveService(a1, (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData, 1);
}

{
  return ot::NetworkData::Service::Manager::Remove<ot::NetworkData::Service::BackboneRouter>(a1);
}

void *ot::Ip6::Address::SetMulticastNetworkPrefix(ot::Ip6::Address *a1, unsigned __int8 *a2)
{
  return ot::Ip6::Address::SetMulticastNetworkPrefix(a1, a2, 0x40u);
}

{
  return ot::Ip6::Address::SetMulticastNetworkPrefix(a1, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::ThreadNetif>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
}

void ot::BackboneRouter::Local::HandleBackboneRouterPrimaryUpdate(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  if (ot::BackboneRouter::Local::IsEnabled((ot::BackboneRouter::Local *)a1))
  {
    uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
    if (ot::Mle::Mle::IsAttached(v3))
    {
      if (*a3 == 65534)
      {
        char v12 = 1;
        uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        if (!ot::Mle::Mle::IsLeader(v4))
        {
          if (*(unsigned __int8 *)(a1 + 11) == 255) {
            char Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0, *(unsigned char *)(a1 + 11));
          }
          else {
            char Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0, *(unsigned char *)(a1 + 11) + 1);
          }
          char v12 = Uint8InRange + 1;
        }
        uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Mle::MleRouter::SetBackboneRouterRegistrationDelay(v6, v12);
      }
      else
      {
        int v10 = *a3;
        uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        if (v10 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v7))
        {
          if (*(unsigned char *)(a1 + 12))
          {
            ot::BackboneRouter::Local::SetState((ot::InstanceLocator *)a1, 2u);
          }
          else
          {
            *(unsigned char *)(a1 + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = *((unsigned char *)a3 + 8);
            *(_WORD *)(a1 + 8) = a3[1];
            *(_DWORD *)(a1 + ++*(_WORD *)(this + 4) = *((_DWORD *)a3 + 1);
            ot::BackboneRouter::Local::SequenceNumberIncrease(a1);
            uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
            ot::Notifier::Signal(v8, 0x4000000);
            if (!ot::BackboneRouter::Local::AddService((ot::BackboneRouter::Local *)a1, 1))
            {
              char v9 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>((ot::InstanceLocator *)a1);
              ot::NetworkData::Notifier::HandleServerDataUpdated(v9);
            }
          }
        }
        else
        {
          ot::BackboneRouter::Local::Reset((ot::BackboneRouter::Local *)a1);
        }
      }
    }
  }
}

BOOL ot::Mle::Mle::IsLeader(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 73) == 4;
}

{
  return ot::Mle::Mle::IsLeader(this);
}

uint64_t ot::Mle::MleRouter::SetBackboneRouterRegistrationDelay(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3571++*(_WORD *)(this + 4) = a2;
  return this;
}

{
  return ot::Mle::MleRouter::SetBackboneRouterRegistrationDelay(this, a2);
}

uint64_t ot::BackboneRouter::Local::GetDomainPrefix(ot::BackboneRouter::Local *this, ot::NetworkData::OnMeshPrefixConfig *a2)
{
  unsigned int v8 = 0;
  uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
  char Length = ot::Ip6::Prefix::GetLength(Prefix);
  if (v4 | (Length == 0)) {
    char v5 = 0;
  }
  else {
    char v5 = 1;
  }
  if (v5)
  {
    *(_OWORD *)a2 = *((_OWORD *)this + 1);
    *((void *)a2 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((void *)this + 4);
  }
  else
  {
    return 23;
  }
  return v8;
}

uint64_t ot::BackboneRouter::Local::RemoveDomainPrefix(ot::BackboneRouter::Local *this, const ot::Ip6::Prefix *a2)
{
  unsigned int v9 = 0;
  char Length = ot::Ip6::Prefix::GetLength(a2);
  if (v3 | (Length == 0)) {
    char v4 = 0;
  }
  else {
    char v4 = 1;
  }
  if (v4)
  {
    uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
    if (ot::Ip6::Prefix::operator==(Prefix, (unsigned __int8 *)a2))
    {
      if (ot::BackboneRouter::Local::IsEnabled(this)) {
        ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(this);
      }
      uint64_t v6 = ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::BackboneRouter::Local *)((char *)this + 16));
      ot::Ip6::Prefix::SetLength(v6, 0);
    }
    else
    {
      return 23;
    }
  }
  else
  {
    return 7;
  }
  return v9;
}

uint64_t ot::BackboneRouter::Local::SetDomainPrefix(ot::BackboneRouter::Local *this, const ot::NetworkData::OnMeshPrefixConfig *a2)
{
  unsigned int v6 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  if (ot::NetworkData::OnMeshPrefixConfig::IsValid(a2, Instance))
  {
    if (ot::BackboneRouter::Local::IsEnabled(this)) {
      ot::BackboneRouter::Local::RemoveDomainPrefixFromNetworkData(this);
    }
    *((_OWORD *)this + 1) = *(_OWORD *)a2;
    *((void *)this + ++*(_WORD *)(this + 4) = *((void *)a2 + 2);
    ot::BackboneRouter::Local::LogDomainPrefix((uint64_t)this, (char)"Set", 0);
    if (ot::BackboneRouter::Local::IsEnabled(this)) {
      ot::BackboneRouter::Local::AddDomainPrefixToNetworkData(this);
    }
  }
  else
  {
    return 7;
  }
  return v6;
}

void ot::BackboneRouter::Local::LogDomainPrefix(uint64_t a1, char a2, int a3)
{
  uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)(a1 + 16));
  ot::Ip6::Prefix::ToString(Prefix, (ot::StringWriter *)v12);
  ot::String<(unsigned short)45>::AsCString((uint64_t)v12);
  ot::ErrorToString(a3);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrLocal", "%s Domain Prefix: %s, %s", v4, v5, v6, v7, v8, v9, a2);
}

uint64_t ot::BackboneRouter::Local::ApplyMeshLocalPrefix(ot::BackboneRouter::Local *this)
{
  uint64_t result = ot::BackboneRouter::Local::IsEnabled(this);
  if (result)
  {
    char v2 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(this);
    ot::BackboneRouter::BackboneTmfAgent::UnsubscribeMulticast(v2, (ot::BackboneRouter::Local *)((char *)this + 72));
    char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::GetMeshLocalPrefix(v3);
    ot::Ip6::Address::SetMulticastNetworkPrefix((ot::BackboneRouter::Local *)((char *)this + 72), v4);
    uint64_t v5 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(this);
    ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(v5, (ot::BackboneRouter::Local *)((char *)this + 72));
    uint64_t result = ot::BackboneRouter::Local::IsPrimary(this);
    if (result)
    {
      uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v6, (ot::BackboneRouter::Local *)((char *)this + 40));
      Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::BackboneRouter::Local *)((char *)this + 40));
      uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::GetMeshLocalPrefix(v7);
      ot::Ip6::Address::SetPrefix(Address, v8);
      uint64_t v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      return ot::Ip6::Netif::AddUnicastAddress(v9, (ot::BackboneRouter::Local *)((char *)this + 40));
    }
  }
  return result;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::BackboneTmfAgent>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(a1);
}

BOOL ot::BackboneRouter::Local::IsPrimary(ot::BackboneRouter::Local *this)
{
  return *(unsigned char *)this == 2;
}

{
  return ot::BackboneRouter::Local::IsPrimary(this);
}

uint64_t ot::BackboneRouter::Local::HandleDomainPrefixUpdate(void *a1, char a2)
{
  int v18 = a1;
  char v17 = a2;
  uint64_t result = ot::BackboneRouter::Local::IsEnabled((ot::BackboneRouter::Local *)a1);
  if (result)
  {
    if (v17 == 2 || v17 == 3)
    {
      char v3 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>((ot::InstanceLocator *)a1);
      ot::BackboneRouter::BackboneTmfAgent::UnsubscribeMulticast(v3, (const ot::Ip6::Address *)(a1 + 11));
    }
    if (v17 == 1 || v17 == 3)
    {
      uint64_t v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
      Domainuint64_t Prefix = (const ot::Ip6::Prefix *)ot::BackboneRouter::Leader::GetDomainPrefix(v4);
      ot::Ip6::Address::SetMulticastNetworkPrefix((ot::Ip6::Address *)(a1 + 11), DomainPrefix);
      uint64_t v6 = (ot::BackboneRouter::BackboneTmfAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>((ot::InstanceLocator *)a1);
      ot::BackboneRouter::BackboneTmfAgent::SubscribeMulticast(v6, (const ot::Ip6::Address *)(a1 + 11));
    }
    uint64_t result = ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::IsSet(a1 + 13);
    if (result)
    {
      switch(v17)
      {
        case 1:
          unsigned int v16 = 0;
          uint64_t v7 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
          uint64_t v15 = ot::BackboneRouter::Leader::GetDomainPrefix(v7);
          return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>((uint64_t)(a1 + 13), &v16, &v15);
        case 2:
          unsigned int v14 = 1;
          uint64_t v8 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
          uint64_t v13 = ot::BackboneRouter::Leader::GetDomainPrefix(v8);
          return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>((uint64_t)(a1 + 13), &v14, &v13);
        case 3:
          unsigned int v12 = 2;
          uint64_t v9 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
          uint64_t v11 = ot::BackboneRouter::Leader::GetDomainPrefix(v9);
          return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>((uint64_t)(a1 + 13), &v12, &v11);
      }
    }
  }
  return result;
}

void *ot::Ip6::Address::SetMulticastNetworkPrefix(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2)
{
  ot::Ip6::Prefix::GetBytes(a2);
  uint64_t v5 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  return ot::Ip6::Address::SetMulticastNetworkPrefix(this, v5, Length);
}

{
  return ot::Ip6::Address::SetMulticastNetworkPrefix(this, a2);
}

uint64_t ot::BackboneRouter::Leader::GetDomainPrefix(ot::BackboneRouter::Leader *this)
{
  if (ot::Ip6::Prefix::GetLength((ot::BackboneRouter::Leader *)((char *)this + 12))) {
    return (uint64_t)this + 12;
  }
  else {
    return 0;
  }
}

{
  return ot::BackboneRouter::Leader::GetDomainPrefix(this);
}

BOOL ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*)>::IsSet(a1);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>(uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterDomainPrefixEvent,otIp6Prefix const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterDomainPrefixEvent,ot::Ip6::Prefix const*>(a1, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkData::Local>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(a1);
}

uint64_t ot::Random::NonCrypto::GetUint32(ot::Random::NonCrypto *this)
{
  return ot::Random::Manager::NonCryptoGetUint32(this);
}

{
  return ot::Random::NonCrypto::GetUint32(this);
}

uint64_t ot::Encoding::BigEndian::HostSwap32(ot::Encoding::BigEndian *this)
{
  return ot::Encoding::Swap32((ot::Encoding *)this);
}

{
  return ot::Encoding::BigEndian::HostSwap32(this);
}

uint64_t ot::Encoding::Swap32(ot::Encoding *this)
{
  return (((unsigned __int16)this & 0xFF00) << 8) | (this << 24) | ((this & 0xFF0000) >> 8) | ((this & 0xFF000000) >> 24);
}

{
  return ot::Encoding::Swap32(this);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetLength(ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return 7;
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::GetLength(this);
}

uint64_t ot::Instance::Get<ot::BackboneRouter::BackboneTmfAgent>(uint64_t a1)
{
  return ot::BackboneRouter::Manager::GetBackboneTmfAgent((ot::BackboneRouter::Manager *)(a1 + 145768));
}

{
  return ot::Instance::Get<ot::BackboneRouter::BackboneTmfAgent>(a1);
}

uint64_t ot::BackboneRouter::Manager::GetBackboneTmfAgent(ot::BackboneRouter::Manager *this)
{
  return (uint64_t)this + 7576;
}

{
  return ot::BackboneRouter::Manager::GetBackboneTmfAgent(this);
}

ot::BackboneRouter::Manager *ot::BackboneRouter::Manager::Manager(ot::BackboneRouter::Manager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::BackboneRouter::Manager::Manager(this, a2);
  return this;
}

uint64_t ot::BackboneRouter::Manager::HandleTimer(ot::BackboneRouter::Manager *this)
{
  return ot::TimerMilli::Start((ot::BackboneRouter::Manager *)((char *)this + 7552), 0x3E8u);
}

ot::BackboneRouter::NdProxyTable *ot::BackboneRouter::NdProxyTable::NdProxyTable(ot::BackboneRouter::NdProxyTable *this, ot::Instance *a2)
{
  return this;
}

{
  BOOL v2;
  ot::BackboneRouter::NdProxyTable *v5;

  ot::InstanceLocator::InstanceLocator();
  uint64_t v5 = this;
  do
  {
    ot::BackboneRouter::NdProxyTable::NdProxy::NdProxy(v5);
    char v2 = (char *)v5 + 24 != (char *)this + 6000;
    uint64_t v5 = (ot::BackboneRouter::NdProxyTable *)((char *)v5 + 24);
  }
  while (v2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 750);
  *((unsigned char *)this + 6016) &= ~1u;
  return this;
}

ot::BackboneRouter::MulticastListenersTable *ot::BackboneRouter::MulticastListenersTable::MulticastListenersTable(ot::BackboneRouter::MulticastListenersTable *this, ot::Instance *a2)
{
  return this;
}

{
  BOOL v2;
  ot::BackboneRouter::MulticastListenersTable *v5;

  ot::InstanceLocator::InstanceLocator();
  uint64_t v5 = this;
  do
  {
    ot::BackboneRouter::MulticastListenersTable::Listener::Listener(v5);
    char v2 = (char *)v5 + 20 != (char *)this + 1500;
    uint64_t v5 = (ot::BackboneRouter::MulticastListenersTable *)((char *)v5 + 20);
  }
  while (v2);
  *((_WORD *)this + 75ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 188);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::BackboneRouter::Manager,&ot::BackboneRouter::Manager::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::BackboneRouter::Manager,&ot::BackboneRouter::Manager::HandleTimer>::HandleTimer);
  return a1;
}

void ot::BackboneRouter::Manager::HandleNotifierEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  if (ot::Events::Contains(&v20, 0x2000000))
  {
    char v2 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>((ot::InstanceLocator *)a1);
    if (ot::BackboneRouter::Local::IsEnabled(v2))
    {
      if (!ot::Timer::IsRunning((ot::Timer *)(a1 + 7552))) {
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 7552), 0x3E8u);
      }
      int v19 = ot::BackboneRouter::BackboneTmfAgent::Start((ot::BackboneRouter::BackboneTmfAgent *)(a1 + 7576));
      ot::BackboneRouter::Manager::LogError(a1, (char)"Start Backbone TMF agent", v19);
    }
    else
    {
      ot::BackboneRouter::MulticastListenersTable::Clear((ot::BackboneRouter::MulticastListenersTable *)(a1 + 6032));
      ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 7552));
      int v18 = ot::Coap::Coap::Stop((ot::Coap::Coap *)(a1 + 7576));
      if (v18)
      {
        char v3 = ot::ErrorToString(v18);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"BbrManager", "Stop Backbone TMF agent: %s", v4, v5, v6, v7, v8, v9, v3);
      }
      else
      {
        char v10 = ot::ErrorToString(0);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Stop Backbone TMF agent: %s", v11, v12, v13, v14, v15, v16, v10);
      }
    }
  }
}

void ot::BackboneRouter::Manager::LogError(uint64_t a1, char a2, int a3)
{
  if (a3)
  {
    ot::ErrorToString(a3);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"BbrManager", "%s: %s", v9, v10, v11, v12, v13, v14, a2);
  }
  else
  {
    ot::ErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "%s: %s", v3, v4, v5, v6, v7, v8, a2);
  }
}

void ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)38>(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(a1);
  if (ot::BackboneRouter::Local::IsEnabled(v3)) {
    ot::BackboneRouter::Manager::HandleMulticastListenerRegistration(a1, a2, a3);
  }
}

void ot::BackboneRouter::Manager::HandleMulticastListenerRegistration(ot::BackboneRouter::Manager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  v54 = this;
  v53 = a2;
  v52 = a3;
  v51[4] = 0;
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  *(_DWORD *)v51 = ot::BackboneRouter::Local::IsPrimary(v3);
  int v50 = 0;
  __int16 v47 = 0;
  unsigned __int16 v46 = 0;
  unsigned __int8 v44 = 0;
  unsigned __int8 v43 = 0;
  unsigned int v41 = 0;
  unsigned __int16 v40 = 0;
  char v39 = 0;
  BOOL v38 = 0;
  if (!ot::Coap::Message::IsConfirmablePostRequest(v53))
  {
    *(_DWORD *)&v51[1] = 6;
    goto LABEL_43;
  }
  if ((v51[0] & 1) == 0)
  {
    int v50 = 5;
    goto LABEL_43;
  }
  if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(v53, &v40, v4, v5))
  {
    uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v9, 0xBu);
    ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
    *(void *)&v37[1] = v10;
    if (!v10
      || (Commissionerunsigned __int16 SessionId = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(*(ot::MeshCoP::CommissionerSessionIdTlv **)&v37[1]),
          v40 != CommissionerSessionId))
    {
      int v50 = 6;
      goto LABEL_43;
    }
    char v39 = 1;
  }
  BOOL v31 = 0;
  if (v39) {
    BOOL v31 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(v53, &v41, v6, v7) == 0;
  }
  BOOL v38 = v31;
  TlvValue__int16 Offset = (ot::TimerMilli *)ot::Tlv::FindTlvValueOffset(v53, (const ot::Message *)0xE, &v47, &v46, v8);
  if (TlvValueOffset)
  {
    *(_DWORD *)&v51[1] = 6;
    goto LABEL_43;
  }
  if (v46 % 0x10uLL)
  {
    int v50 = 6;
    goto LABEL_43;
  }
  if (v46 / 0x10uLL > 0xF)
  {
    int v50 = 6;
    goto LABEL_43;
  }
  if (v38)
  {
    if (v41 == -1)
    {
      int v50 = 3;
      goto LABEL_43;
    }
    if (v41)
    {
      v37[0] = v41;
      TlvValue__int16 Offset = (ot::TimerMilli *)ot::Min<unsigned int>(v41, 0x20C49Bu);
      unsigned int v41 = TlvValueOffset;
      if (TlvValueOffset != v37[0])
      {
        char v30 = ot::ToUlong(v37[0]);
        ot::ToUlong(v41);
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"BbrManager", "MLR.req: MLR timeout is normalized from %lu to %lu", v14, v15, v16, v17, v18, v19, v30);
      }
    }
  }
  else
  {
    uint64_t v13 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    ot::BackboneRouter::Leader::GetConfig(v13, (uint64_t)v48);
    IgnoreError();
    unsigned int v41 = v49;
  }
  int Now = ot::TimerMilli::GetNow(TlvValueOffset);
  int v20 = ot::Time::SecToMsec((ot::Time *)v41);
  int v36 = ot::Time::operator+(&Now, v20);
  int v42 = v36;
  for (unsigned __int16 i = 0; i < (int)v46; i += 16)
  {
    ot::Message::Read<ot::Ip6::Address>(v53, v47 + i, (char *)&v45);
    IgnoreError();
    if (v41)
    {
      char v33 = 1;
      int v29 = ot::BackboneRouter::MulticastListenersTable::Add((uint64_t)this + 6032, (ot::Ip6::Address *)&v45, v42);
      if (v29)
      {
        if (v29 == 3)
        {
          if (!v50) {
            int v50 = 4;
          }
        }
        else
        {
          if (v29 != 7) {
            __assert_rtn("HandleMulticastListenerRegistration", "bbr_manager.cpp", 256, "false");
          }
          if (!v50) {
            int v50 = 2;
          }
        }
      }
      else
      {
        char v33 = 0;
      }
      if (v33)
      {
        uint64_t v21 = v44++;
        v56[v21] = v45;
      }
      else
      {
        ot::Ip6::Address::ToString((ot::Ip6::Address *)&v45, (ot::StringWriter *)v55);
        char v22 = ot::String<(unsigned short)40>::AsCString((uint64_t)v55);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrManager", "Registered address:%s is added to the addresses list successfuly", v23, v24, v25, v26, v27, v28, v22);
        v56[15 - ++v43] = v45;
      }
    }
    else
    {
      ot::BackboneRouter::MulticastListenersTable::Remove((ot::BackboneRouter::Manager *)((char *)this + 6032), (const ot::Ip6::Address *)&v45);
      v56[15 - ++v43] = v45;
    }
  }
LABEL_43:
  if (!*(_DWORD *)&v51[1]) {
    ot::BackboneRouter::Manager::SendMulticastListenerRegistrationResponse(this, v53, v52, v50, (uint64_t)v56, v44);
  }
  if (v43) {
    ot::BackboneRouter::Manager::SendBackboneMulticastListenerRegistration(this, (const ot::Ip6::Address *)&v56[15 - v43], v43, v41);
  }
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0xFu, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(a1, a2, a3, a4);
}

void ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(uint64_t a1, unsigned __int8 a2)
{
  ot::AsConst<ot::NetworkData::LeaderBase>();
  ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v2, a2);
  ot::AsNonConst<ot::MeshCoP::Tlv>();
}

{
  ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(a1, a2);
}

uint64_t ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(ot::MeshCoP::CommissionerSessionIdTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 0xBu, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(a1, a2, a3, a4);
}

void ot::BackboneRouter::Manager::SendMulticastListenerRegistrationResponse(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, int a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v25 = a1;
  uint64_t v24 = a2;
  uint64_t v23 = a3;
  int v22 = a4;
  uint64_t v21 = a5;
  unsigned __int8 v20 = a6;
  int v19 = 0;
  uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v18 = ot::Coap::CoapBase::NewResponseMessage(v6, v24);
  if (v18)
  {
    if (!ot::Tlv::Append<ot::ThreadStatusTlv>(v18, v22))
    {
      if (v20)
      {
        ot::Ip6AddressesTlv::Init((ot::Ip6AddressesTlv *)v17);
        ot::Tlv::SetLength((uint64_t)v17, 16 * v20);
        int v19 = ot::Message::Append<ot::Ip6AddressesTlv>(v18, v17);
        if (v19) {
          goto LABEL_11;
        }
        for (unsigned __int8 i = 0; i < (int)v20; ++i)
        {
          int v19 = ot::Message::Append<ot::Ip6::Address>(v18, (char *)(v21 + 16 * i));
          if (v19) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v19 = ot::Coap::CoapBase::SendMessage(v7, v18, v23);
    }
  }
  else
  {
    int v19 = 3;
  }
LABEL_11:
  if (v19 && v18) {
    ot::Message::Free(v18);
  }
  char v14 = v22;
  ot::ErrorToString(v19);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Sent MLR.rsp (status=%d): %s", v8, v9, v10, v11, v12, v13, v14);
}

void ot::BackboneRouter::Manager::SendBackboneMulticastListenerRegistration(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, unsigned __int8 a3, unsigned int a4)
{
  unsigned int v32 = this;
  BOOL v31 = (char *)a2;
  unsigned __int8 v30 = a3;
  unsigned int v29 = a4;
  int appended = 0;
  uint64_t v27 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v26);
  uint64_t v24 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::BackboneTmfAgent>(this);
  BOOL v23 = 0;
  if (v30) {
    BOOL v23 = v30 <= 0xFu;
  }
  if (!v23) {
    __assert_rtn("SendBackboneMulticastListenerRegistration", "bbr_manager.cpp", 333, "aAddressNum >= Ip6AddressesTlv::kMinAddresses && aAddressNum <= Ip6AddressesTlv::kMaxAddresses");
  }
  uint64_t v27 = ot::Coap::CoapBase::NewNonConfirmablePostMessage(v24, 8u);
  if (v27)
  {
    ot::Ip6AddressesTlv::Init((ot::Ip6AddressesTlv *)v25);
    ot::Tlv::SetLength((uint64_t)v25, 16 * v30);
    int appended = ot::Message::Append<ot::Ip6AddressesTlv>(v27, v25);
    if (!appended)
    {
      int appended = ot::Message::AppendBytes(v27, v31, 16 * v30);
      if (!appended)
      {
        int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(v27, v29);
        if (!appended)
        {
          uint64_t v4 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
          AllNetworkBackboneRoutersAddress = (__n128 *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v4);
          ot::Ip6::MessageInfo::SetPeerAddr(v26, AllNetworkBackboneRoutersAddress);
          ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v26, 61631);
          uint64_t v6 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
          uint64_t v7 = (ot::Ip6::Address *)ot::BackboneRouter::Local::GetAllNetworkBackboneRoutersAddress(v6);
          ot::Ip6::Address::ToString(v7, (ot::StringWriter *)v33);
          char v8 = ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
          ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrManager", "Send BMLR to address:%s port:%d", v9, v10, v11, v12, v13, v14, v8);
          ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v26, 1);
          ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)v26, 1);
          int appended = ot::Coap::CoapBase::SendMessage(v24, v27, (const ot::Ip6::MessageInfo *)v26);
        }
      }
    }
  }
  else
  {
    int appended = 3;
  }
  if (appended && v27) {
    ot::Message::Free(v27);
  }
  char v15 = ot::ErrorToString(appended);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Sent BMLR.ntf: %s", v16, v17, v18, v19, v20, v21, v15);
}

uint64_t ot::Tlv::Append<ot::ThreadStatusTlv>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 4u, a2);
}

{
  return ot::Tlv::Append<ot::ThreadStatusTlv>(a1, a2);
}

unsigned char *ot::Ip6AddressesTlv::Init(ot::Ip6AddressesTlv *this)
{
  return ot::ThreadTlv::SetType(this, 14);
}

{
  return ot::Ip6AddressesTlv::Init(this);
}

uint64_t ot::Message::Append<ot::Ip6AddressesTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::Ip6AddressesTlv>(a1, a2);
}

uint64_t ot::Message::Append<ot::Ip6::Address>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return ot::Message::Append<ot::Ip6::Address>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 0xBu, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(a1, a2);
}

__n128 ot::Ip6::MessageInfo::SetPeerAddr(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  this[1] = *a2;
  return result;
}

uint64_t ot::Ip6::MessageInfo::SetHopLimit(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  return this;
}

{
  return ot::Ip6::MessageInfo::SetHopLimit(this, a2);
}

uint64_t ot::Ip6::MessageInfo::SetIsHostInterface(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4ot::Mle::Tlv::SetType(this, 9) = *(unsigned char *)(this + 49) & 0xFB | (4 * (a2 & 1));
  return this;
}

{
  return ot::Ip6::MessageInfo::SetIsHostInterface(this, a2);
}

void ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)37>(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(a1);
  if (ot::BackboneRouter::Local::IsEnabled(v3)) {
    ot::BackboneRouter::Manager::HandleDuaRegistration(a1, a2, a3);
  }
}

void ot::BackboneRouter::Manager::HandleDuaRegistration(ot::BackboneRouter::Manager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v39 = this;
  BOOL v38 = a2;
  __int16 v37 = a3;
  int v36 = 0;
  unsigned __int8 v35 = 0;
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  BOOL IsPrimary = ot::BackboneRouter::Local::IsPrimary(v3);
  unsigned int v33 = 0;
  BOOL v32 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v37);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
  if (ot::Ip6::InterfaceIdentifier::IsRoutingLocator(Iid))
  {
    if (ot::Coap::Message::IsConfirmablePostRequest(v38))
    {
      int v36 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v38, (uint64_t)v31, v6, v7, v8);
      if (!v36)
      {
        int v36 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v38, (uint64_t)v30, v9, v10, v11);
        if (!v36)
        {
          if (IsPrimary)
          {
            uint64_t v12 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
            if (ot::BackboneRouter::Leader::HasDomainPrefix(v12))
            {
              uint64_t v13 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
              if (ot::BackboneRouter::Leader::IsDomainUnicast(v13, (const ot::Ip6::Address *)v31))
              {
                BOOL v32 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v38, &v33, v14, v15) == 0;
                uint64_t v26 = (ot::BackboneRouter::Manager *)((char *)this + 8);
                uint64_t v27 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid((ot::Ip6::Address *)v31);
                uint64_t v16 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v37);
                uint64_t v17 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v16);
                __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v17);
                if (v32) {
                  int v18 = ot::BackboneRouter::NdProxyTable::Register(v26, v27, (const ot::Ip6::InterfaceIdentifier *)v30, Locator, &v33);
                }
                else {
                  int v18 = ot::BackboneRouter::NdProxyTable::Register(v26, v27, (const ot::Ip6::InterfaceIdentifier *)v30, Locator, 0);
                }
                if (v18)
                {
                  if (v18 == 3)
                  {
                    unsigned __int8 v35 = 4;
                  }
                  else if (v18 == 29)
                  {
                    unsigned __int8 v35 = 3;
                  }
                  else
                  {
                    unsigned __int8 v35 = 6;
                  }
                }
              }
              else
              {
                unsigned __int8 v35 = 2;
              }
            }
            else
            {
              unsigned __int8 v35 = 6;
            }
          }
          else
          {
            unsigned __int8 v35 = 5;
          }
        }
      }
    }
    else
    {
      int v36 = 6;
    }
  }
  else
  {
    int v36 = 2;
  }
  if (IsPrimary) {
    uint64_t v25 = "PBBR";
  }
  else {
    uint64_t v25 = "SBBR";
  }
  ot::ErrorToString(v36);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Received DUA.req on %s: %s", v19, v20, v21, v22, v23, v24, (char)v25);
  if (!v36) {
    ot::BackboneRouter::Manager::SendDuaRegistrationResponse(this, v38, v37, v31, v35);
  }
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, 0, a2, (void *)0x10, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)3, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 6u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(a1, a2, a3, a4);
}

uint64_t ot::Ip6::InterfaceIdentifier::GetLocator(ot::Ip6::InterfaceIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return ot::Ip6::InterfaceIdentifier::GetLocator(this);
}

void ot::BackboneRouter::Manager::SendDuaRegistrationResponse(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, void *a4, unsigned __int8 a5)
{
  int v16 = 0;
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  char v15 = ot::Coap::CoapBase::NewResponseMessage(v5, a2);
  if (v15)
  {
    if (!ot::Tlv::Append<ot::ThreadStatusTlv>(v15, a5)
      && !ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v15, a4))
    {
      uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v16 = ot::Coap::CoapBase::SendMessage(v6, v15, a3);
    }
  }
  else
  {
    int v16 = 3;
  }
  if (v16 && v15) {
    ot::Message::Free(v15);
  }
  ot::Ip6::Address::ToString((ot::Ip6::Address *)a4, (ot::StringWriter *)v21);
  char v13 = ot::String<(unsigned short)40>::AsCString((uint64_t)v21);
  ot::ErrorToString(v16);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Sent DUA.rsp for DUA %s, status %d %s", v7, v8, v9, v10, v11, v12, v13);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, 0, a2, (const void *)0x10);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(a1, a2);
}

uint64_t ot::BackboneRouter::Manager::GetNdProxyTable(ot::BackboneRouter::Manager *this)
{
  return (uint64_t)this + 8;
}

BOOL ot::BackboneRouter::Manager::ShouldForwardDuaToBackbone(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2)
{
  BOOL v11 = 0;
  char v2 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  if (ot::BackboneRouter::Local::IsPrimary(v2))
  {
    uint64_t v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    if (ot::BackboneRouter::Leader::IsDomainUnicast(v3, a2))
    {
      Iid = (const ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
      if (!ot::BackboneRouter::NdProxyTable::IsRegistered((ot::BackboneRouter::Manager *)((char *)this + 8), Iid))
      {
        uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
        if (!ot::NeighborTable::FindNeighbor(v5, a2, 1))
        {
          uint64_t v6 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
          int v9 = (unsigned __int16)ot::AddressResolver::LookUp(v6, a2);
          uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          return v9 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v7);
        }
      }
    }
  }
  return v11;
}

BOOL ot::BackboneRouter::NdProxyTable::IsRegistered(ot::BackboneRouter::NdProxyTable *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  return ot::BackboneRouter::NdProxyTable::FindByAddressIid(this, a2) != 0;
}

{
  return ot::BackboneRouter::NdProxyTable::IsRegistered(this, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::AddressResolver>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(a1);
}

uint64_t ot::BackboneRouter::Manager::SendBackboneQuery(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, unsigned __int16 a3)
{
  uint64_t v20 = this;
  uint64_t v19 = a2;
  unsigned __int16 v18 = a3;
  unsigned int v17 = 0;
  int v16 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v15);
  uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  if (ot::BackboneRouter::Local::IsPrimary(v3))
  {
    int v16 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage((ot::BackboneRouter::Manager *)((char *)this + 7576), 9u);
    if (v16)
    {
      unsigned int v17 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v16, v19);
      if (!v17
        && (v18 == 65534 || (unsigned int v17 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v16, v18)) == 0))
      {
        uint64_t v4 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
        AllDomainBackboneRoutersAddress = (__n128 *)ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(v4);
        ot::Ip6::MessageInfo::SetPeerAddr(v15, AllDomainBackboneRoutersAddress);
        ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v15, 61631);
        ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v15, 1);
        ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)v15, 1);
        unsigned int v17 = ot::Coap::CoapBase::SendMessage((ot::BackboneRouter::Manager *)((char *)this + 7576), v16, (const ot::Ip6::MessageInfo *)v15);
      }
    }
    else
    {
      unsigned int v17 = 3;
    }
  }
  else
  {
    unsigned int v17 = 13;
  }
  ot::Ip6::Address::ToString((ot::Ip6::Address *)v19, (ot::StringWriter *)v21);
  char v13 = ot::String<(unsigned short)40>::AsCString((uint64_t)v21);
  ot::ErrorToString(v17);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "SendBackboneQuery for %s (rloc16=%04x): %s", v6, v7, v8, v9, v10, v11, v13);
  if (v17 && v16) {
    ot::Message::Free(v16);
  }
  return v17;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 2u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(a1, a2);
}

void ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)9>(uint64_t a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v31 = a1;
  unsigned __int8 v30 = a2;
  unsigned int v29 = a3;
  int v28 = 0;
  unsigned __int16 v26 = -2;
  if (ot::Ip6::MessageInfo::IsHostInterface(a3))
  {
    uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>((ot::InstanceLocator *)a1);
    if (ot::BackboneRouter::Local::IsPrimary(v3))
    {
      if (ot::Coap::Message::IsNonConfirmablePostRequest(v30))
      {
        int v28 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v30, (uint64_t)v27, v4, v5, v6);
        if (!v28)
        {
          int v28 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v30, &v26, v7, v8);
          if (!v28 || v28 == 23)
          {
            PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v29);
            ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v33);
            char v23 = ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
            ot::Ip6::Address::ToString((ot::Ip6::Address *)v27, (ot::StringWriter *)v32);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v32);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Received BB.qry from %s for %s (rloc16=%04x)", v10, v11, v12, v13, v14, v15, v23);
            uint64_t v25 = (ot::BackboneRouter::NdProxyTable::NdProxy *)ot::BackboneRouter::NdProxyTable::ResolveDua((ot::BackboneRouter::NdProxyTable *)(a1 + 8), (const ot::Ip6::Address *)v27);
            if (v25 && (ot::BackboneRouter::NdProxyTable::NdProxy::GetDadFlag(v25) & 1) == 0) {
              int v28 = ot::BackboneRouter::Manager::SendBackboneAnswer((ot::BackboneRouter::Manager *)a1, v29, (const ot::Ip6::Address *)v27, v26, v25);
            }
            else {
              int v28 = 23;
            }
          }
        }
      }
      else
      {
        int v28 = 6;
      }
    }
    else
    {
      int v28 = 13;
    }
  }
  else
  {
    int v28 = 2;
  }
  char v16 = ot::ErrorToString(v28);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "HandleBackboneQuery: %s", v17, v18, v19, v20, v21, v22, v16);
}

uint64_t ot::Ip6::MessageInfo::IsHostInterface(ot::Ip6::MessageInfo *this)
{
  return (*((unsigned __int8 *)this + 49) >> 2) & 1;
}

{
  return ot::Ip6::MessageInfo::IsHostInterface(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 2u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::GetDadFlag(ot::BackboneRouter::NdProxyTable::NdProxy *this)
{
  return (*((unsigned __int8 *)this + 22) >> 2) & 1;
}

{
  return ot::BackboneRouter::NdProxyTable::NdProxy::GetDadFlag(this);
}

uint64_t ot::BackboneRouter::Manager::SendBackboneAnswer(ot::BackboneRouter::Manager *this, const ot::Ip6::MessageInfo *a2, const ot::Ip6::Address *a3, unsigned __int16 a4, const ot::BackboneRouter::NdProxyTable::NdProxy *a5)
{
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
  MeshLocalIid = (ot::Ip6::InterfaceIdentifier *)ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(a5);
  TimeSinceLastTransactiounsigned __int8 n = ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(a5);
  return ot::BackboneRouter::Manager::SendBackboneAnswer(this, PeerAddr, a3, MeshLocalIid, TimeSinceLastTransaction, a4);
}

void ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)7>(uint64_t a1, ot::Tlv *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v33 = a1;
  BOOL v32 = a2;
  uint64_t v31 = a3;
  TlvValue__int16 Offset = 0;
  BOOL v29 = 0;
  __int16 v26 = 0;
  unsigned __int16 v25 = 0;
  unsigned int v24 = 0;
  unsigned __int16 v23 = -2;
  if (ot::Ip6::MessageInfo::IsHostInterface(a3))
  {
    uint64_t v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>((ot::InstanceLocator *)a1);
    if (ot::BackboneRouter::Local::IsPrimary(v3))
    {
      if (ot::Coap::Message::IsPostRequest(v32))
      {
        BOOL v29 = !ot::Coap::Message::IsConfirmable(v32);
        TlvValue__int16 Offset = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v32, (uint64_t)v28, v4, v5, v6);
        if (!TlvValueOffset)
        {
          TlvValue__int16 Offset = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v32, (uint64_t)v27, v7, v8, v9);
          if (!TlvValueOffset)
          {
            TlvValue__int16 Offset = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v32, &v24, v10, v11);
            if (!TlvValueOffset)
            {
              TlvValue__int16 Offset = ot::Tlv::FindTlvValueOffset(v32, (const ot::Message *)0xC, &v26, &v25, v12);
              if (!TlvValueOffset)
              {
                TlvValue__int16 Offset = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v32, &v23, v13, v14);
                if (!TlvValueOffset || TlvValueOffset == 23)
                {
                  if (v29)
                  {
                    ot::BackboneRouter::Manager::HandleProactiveBackboneNotification((ot::BackboneRouter::Manager *)a1, (const ot::Ip6::Address *)v28, (const ot::Ip6::InterfaceIdentifier *)v27, v24);
                  }
                  else if (v23 == 65534)
                  {
                    ot::BackboneRouter::Manager::HandleDadBackboneAnswer((ot::BackboneRouter::Manager *)a1, (const ot::Ip6::Address *)v28, (const ot::Ip6::InterfaceIdentifier *)v27);
                  }
                  else
                  {
                    ot::BackboneRouter::Manager::HandleExtendedBackboneAnswer((ot::BackboneRouter::Manager *)a1, (const ot::Ip6::Address *)v28, (const ot::Ip6::InterfaceIdentifier *)v27, v24, v23);
                  }
                  TlvValue__int16 Offset = ot::Coap::CoapBase::SendEmptyAck((ot::Coap::CoapBase *)(a1 + 7576), v32, v31);
                }
              }
            }
          }
        }
      }
      else
      {
        TlvValue__int16 Offset = 6;
      }
    }
    else
    {
      TlvValue__int16 Offset = 13;
    }
  }
  else
  {
    TlvValue__int16 Offset = 2;
  }
  char v15 = ot::ErrorToString(TlvValueOffset);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "HandleBackboneAnswer: %s", v16, v17, v18, v19, v20, v21, v15);
}

BOOL ot::Coap::Message::IsPostRequest(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetCode(this) == 2;
}

{
  return ot::Coap::Message::IsPostRequest(this);
}

BOOL ot::Coap::Message::IsConfirmable(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetType(this) == 0;
}

{
  return ot::Coap::Message::IsConfirmable(this);
}

void ot::BackboneRouter::Manager::HandleProactiveBackboneNotification(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, unsigned int a4)
{
  uint64_t v19 = (ot::BackboneRouter::NdProxyTable::NdProxy *)ot::BackboneRouter::NdProxyTable::ResolveDua((ot::BackboneRouter::Manager *)((char *)this + 8), a2);
  if (v19)
  {
    MeshLocalIid = (const void *)ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(v19);
    if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(MeshLocalIid, a3))
    {
      if (a4 > ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(v19))
      {
        uint64_t v17 = (ot::Ip6::InterfaceIdentifier *)ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(v19);
        TimeSinceLastTransactiounsigned __int8 n = ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(v19);
        ot::BackboneRouter::Manager::SendProactiveBackboneNotification(this, a2, v17, TimeSinceLastTransaction);
        IgnoreError();
      }
      else
      {
        ot::BackboneRouter::NdProxyTable::Erase((uint64_t)v19, v7);
      }
    }
    else
    {
      ot::BackboneRouter::NdProxyTable::Erase((uint64_t)v19, v6);
      uint64_t v9 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
      ot::AddressResolver::SendAddressError(v9, a2, a3, 0);
    }
    unsigned __int8 v4 = ot::ErrorToString(0);
  }
  else
  {
    unsigned __int8 v4 = ot::ErrorToString(23);
  }
  char v16 = v4;
  ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v24);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v24);
  ot::Ip6::InterfaceIdentifier::ToString(a3, (ot::StringWriter *)v23);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v23);
  ot::ToUlong(a4);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "HandleProactiveBackboneNotification: %s, target=%s, mliid=%s, LTT=%lus", v10, v11, v12, v13, v14, v15, v16);
}

void ot::BackboneRouter::Manager::HandleDadBackboneAnswer(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3)
{
  unsigned __int16 v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  int v20 = 0;
  uint64_t v19 = (ot::BackboneRouter::NdProxyTable *)ot::BackboneRouter::NdProxyTable::ResolveDua((ot::BackboneRouter::Manager *)((char *)this + 8), a2);
  BOOL v18 = 0;
  if (v19)
  {
    MeshLocalIid = (const void *)ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(v19);
    BOOL v18 = ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=(MeshLocalIid, v21);
    if (v18)
    {
      unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::GetMeshLocalPrefix(v4);
      uint64_t v15 = v5;
      unsigned __int16 Rloc16 = ot::BackboneRouter::NdProxyTable::NdProxy::GetRloc16(v19);
      ot::Ip6::Address::SetToRoutingLocator((ot::Ip6::Address *)&v17, v15, Rloc16);
      uint64_t v7 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
      ot::AddressResolver::SendAddressError(v7, v22, v21, &v17);
    }
    ot::BackboneRouter::NdProxyTable::NotifyDadComplete((uint64_t)v19, (ot::BackboneRouter::NdProxyTable::NdProxy *)v18);
  }
  else
  {
    int v20 = 23;
  }
  char v14 = ot::ErrorToString(v20);
  ot::Ip6::Address::ToString(v22, (ot::StringWriter *)v25);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v25);
  ot::Ip6::InterfaceIdentifier::ToString(v21, (ot::StringWriter *)v24);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v24);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "HandleDadBackboneAnswer: %s, target=%s, mliid=%s, duplicate=%s", v8, v9, v10, v11, v12, v13, v14);
}

void ot::BackboneRouter::Manager::HandleExtendedBackboneAnswer(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, unsigned int a4, unsigned __int16 a5)
{
  int v20 = this;
  uint64_t v19 = a2;
  *(void *)&v18[1] = a3;
  v18[0] = a4;
  unsigned __int16 v17 = a5;
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::GetMeshLocalPrefix(v5);
  ot::Ip6::Address::SetToRoutingLocator((ot::Ip6::Address *)&v16, v6, v17);
  uint64_t v7 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  ot::AddressResolver::SendAddressQueryResponse(v7, v19, *(const ot::Ip6::InterfaceIdentifier **)&v18[1], v18, &v16);
  ot::Ip6::Address::ToString(v19, (ot::StringWriter *)v22);
  char v15 = ot::String<(unsigned short)40>::AsCString((uint64_t)v22);
  ot::Ip6::InterfaceIdentifier::ToString(*(ot::Ip6::InterfaceIdentifier **)&v18[1], (ot::StringWriter *)v21);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v21);
  ot::ToUlong(v18[0]);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "HandleExtendedBackboneAnswer: target=%s, mliid=%s, LTT=%lus, rloc16=%04x", v8, v9, v10, v11, v12, v13, v15);
}

uint64_t ot::BackboneRouter::Manager::SendProactiveBackboneNotification(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, unsigned int a4)
{
  unsigned __int8 v4 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  AllDomainBackboneRoutersAddress = (const ot::Ip6::Address *)ot::BackboneRouter::Local::GetAllDomainBackboneRoutersAddress(v4);
  return ot::BackboneRouter::Manager::SendBackboneAnswer(this, AllDomainBackboneRoutersAddress, a2, a3, a4, 0xFFFEu);
}

uint64_t ot::BackboneRouter::Manager::SendBackboneAnswer(ot::BackboneRouter::Manager *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, const ot::Ip6::InterfaceIdentifier *a4, unsigned int a5, unsigned __int16 a6)
{
  BOOL v32 = this;
  uint64_t v31 = a2;
  unsigned __int8 v30 = a3;
  BOOL v29 = a4;
  unsigned int v28 = a5;
  unsigned __int16 v27 = a6;
  unsigned int v26 = 0;
  unsigned __int16 v25 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v24);
  BOOL IsMulticast = ot::Ip6::Address::IsMulticast(v31);
  unsigned __int16 v25 = ot::Coap::CoapBase::NewPriorityMessage((ot::BackboneRouter::Manager *)((char *)this + 7576));
  if (v25)
  {
    unsigned int v26 = ot::Coap::Message::Init(v25, IsMulticast, 2, 7u);
    if (!v26)
    {
      unsigned int v26 = ot::Coap::Message::SetPayloadMarker(v25);
      if (!v26)
      {
        unsigned int v26 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v25, v30);
        if (!v26)
        {
          unsigned int v26 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v25, v29);
          if (!v26)
          {
            unsigned int v26 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v25, v28);
            if (!v26)
            {
              uint64_t v21 = v25;
              uint64_t v6 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
              ot::MeshCoP::NetworkNameManager::GetNetworkName(v6);
              ot::MeshCoP::NetworkName::GetAsCString(v7);
              unsigned int v26 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)12,(unsigned char)16>>(v21, v8, v9, v10, v11);
              if (!v26
                && (v27 == 65534
                 || !ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v25, v27)))
              {
                ot::Ip6::MessageInfo::SetPeerAddr(v24, (__n128 *)v31);
                ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v24, 61631);
                ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v24, 1);
                ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)v24, 1);
                unsigned int v26 = ot::Coap::CoapBase::SendMessage((ot::BackboneRouter::Manager *)((char *)this + 7576), v25, (const ot::Ip6::MessageInfo *)v24);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v26 = 3;
  }
  uint64_t v12 = "PRO_BB.ntf";
  if (!IsMulticast) {
    uint64_t v12 = "BB.ans";
  }
  char v20 = (char)v12;
  ot::Ip6::Address::ToString((ot::Ip6::Address *)v30, (ot::StringWriter *)v33);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
  ot::ErrorToString(v26);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrManager", "Send %s for %s (rloc16=%04x): %s", v13, v14, v15, v16, v17, v18, v20);
  if (v26 && v25) {
    ot::Message::Free(v25);
  }
  return v26;
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(ot::BackboneRouter::NdProxyTable::NdProxy *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(this);
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(ot::BackboneRouter::NdProxyTable::NdProxy *this)
{
  uint64_t v5 = this;
  int Now = ot::TimerMilli::GetNow(this);
  uint64_t v1 = (ot::Time *)ot::Time::operator-(&Now, (_DWORD *)this + 4);
  return ot::Time::MsecToSec(v1);
}

{
  return ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(this);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)3, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 6u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)12,(unsigned char)16>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0xC, 0x10u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)12,(unsigned char)16>>(a1, a2, a3, a4, a5);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::NetworkNameManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(a1);
}

BOOL ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=(a1, a2);
}

uint64_t ot::Ip6::Address::SetToRoutingLocator(ot::Ip6::Address *a1, void *a2, unsigned __int16 a3)
{
  return ot::Ip6::Address::SetToLocator(a1, a2, a3);
}

{
  return ot::Ip6::Address::SetToRoutingLocator(a1, a2, a3);
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::GetRloc16(ot::BackboneRouter::NdProxyTable::NdProxy *this)
{
  return *((unsigned __int16 *)this + 10);
}

{
  return ot::BackboneRouter::NdProxyTable::NdProxy::GetRloc16(this);
}

BOOL ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(a1, a2);
}

ot::BackboneRouter::NdProxyTable::NdProxy *ot::BackboneRouter::NdProxyTable::NdProxy::NdProxy(ot::BackboneRouter::NdProxyTable::NdProxy *this)
{
  return this;
}

{
  ot::Clearable<ot::BackboneRouter::NdProxyTable::NdProxy>::Clear(this);
  return this;
}

void *ot::Clearable<ot::BackboneRouter::NdProxyTable::NdProxy>::Clear(void *result)
{
  *__n128 result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  return ot::Clearable<ot::BackboneRouter::NdProxyTable::NdProxy>::Clear(result);
}

ot::BackboneRouter::MulticastListenersTable::Listener *ot::BackboneRouter::MulticastListenersTable::Listener::Listener(ot::BackboneRouter::MulticastListenersTable::Listener *this)
{
  return this;
}

{
  ot::Clearable<ot::BackboneRouter::MulticastListenersTable::Listener>::Clear((uint64_t)this);
  return this;
}

uint64_t ot::Clearable<ot::BackboneRouter::MulticastListenersTable::Listener>::Clear(uint64_t result)
{
  *(void *)__n128 result = 0;
  *(void *)(result + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

{
  return ot::Clearable<ot::BackboneRouter::MulticastListenersTable::Listener>::Clear(result);
}

unsigned char *ot::ThreadTlv::SetType(unsigned char *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return ot::ThreadTlv::SetType(a1, a2);
}

uint64_t ot::Time::MsecToSec(ot::Time *this)
{
  return this / 0x3E8;
}

{
  return ot::Time::MsecToSec(this);
}

uint64_t ot::TimerMilliIn<ot::BackboneRouter::Manager,&ot::BackboneRouter::Manager::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  char v2 = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(a1);
  return ot::BackboneRouter::Manager::HandleTimer(v2);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::Add(uint64_t a1, ot::Ip6::Address *a2, int a3)
{
  unsigned int v15 = a3;
  uint64_t v14 = a1;
  uint64_t v13 = (__n128 *)a2;
  unsigned int v12 = 0;
  if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a2))
  {
    for (unsigned __int16 i = 0; i < (int)*(unsigned __int16 *)(a1 + 1500); ++i)
    {
      uint64_t v10 = (ot::BackboneRouter::MulticastListenersTable::Listener *)(a1 + 20 * i);
      ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(v10);
      if (ot::Equatable<ot::Ip6::Address>::operator==(v3, v13))
      {
        void v9[2] = v15;
        ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime((uint64_t)v10, v15);
        ot::BackboneRouter::MulticastListenersTable::FixHeap((ot::BackboneRouter::MulticastListenersTable *)a1, i);
        goto LABEL_11;
      }
    }
    int v6 = *(unsigned __int16 *)(a1 + 1500);
    if (v6 < (unsigned __int16)ot::GetArrayLength<ot::BackboneRouter::MulticastListenersTable::Listener,(unsigned short)75>())
    {
      ot::BackboneRouter::MulticastListenersTable::Listener::SetAddress((__n128 *)(a1 + 20 * *(unsigned __int16 *)(a1 + 1500)), v13);
      uint64_t v4 = a1 + 20 * *(unsigned __int16 *)(a1 + 1500);
      v9[1] = v15;
      ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime(v4, v15);
      ot::BackboneRouter::MulticastListenersTable::FixHeap((ot::BackboneRouter::MulticastListenersTable *)a1, (*(_WORD *)(a1 + 1500))++);
      v9[0] = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(0);
      uint64_t v8 = v13;
      ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>((void *)(a1 + 1504), v9, &v8);
    }
    else
    {
      unsigned int v12 = 3;
    }
  }
  else
  {
    unsigned int v12 = 7;
  }
LABEL_11:
  ot::BackboneRouter::MulticastListenersTable::Log(a1, 0, (ot::Ip6::Address *)v13, v15, v12);
  ot::BackboneRouter::MulticastListenersTable::CheckInvariants((ot::BackboneRouter::MulticastListenersTable *)a1);
  return v12;
}

void ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(ot::BackboneRouter::MulticastListenersTable::Listener *this)
{
}

{
  ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(this);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16)  = a2;
  return result;
}

{
  return ot::BackboneRouter::MulticastListenersTable::Listener::SetExpireTime(result, a2);
}

double ot::BackboneRouter::MulticastListenersTable::FixHeap(ot::BackboneRouter::MulticastListenersTable *this, unsigned __int16 a2)
{
  if (!ot::BackboneRouter::MulticastListenersTable::SiftHeapElemDown(this, a2)) {
    return ot::BackboneRouter::MulticastListenersTable::SiftHeapElemUp(this, a2);
  }
  return result;
}

uint64_t ot::GetArrayLength<ot::BackboneRouter::MulticastListenersTable::Listener,(unsigned short)75>()
{
  return 75;
}

{
  return ot::GetArrayLength<ot::BackboneRouter::MulticastListenersTable::Listener,(unsigned short)75>();
}

__n128 ot::BackboneRouter::MulticastListenersTable::Listener::SetAddress(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

void *ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>(void *result, unsigned int *a2, void *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>((uint64_t)result, a2, a3);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>(result, a2, a3);
}

uint64_t ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(result);
}

void ot::BackboneRouter::MulticastListenersTable::Log(uint64_t a1, unsigned __int8 a2, ot::Ip6::Address *a3, int a4, int a5)
{
  int v14 = a4;
  unsigned int v12 = ot::BackboneRouter::MulticastListenersTable::Log(ot::BackboneRouter::MulticastListenersTable::Action,ot::Ip6::Address const&,ot::Time,otError)const::kActionStrings[a2];
  ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v15);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
  uint64_t Value = ot::Time::GetValue((ot::Time *)&v14);
  ot::ToUlong(Value);
  ot::ErrorToString(a5);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrMlt", "%s %s expire %lu: %s", v6, v7, v8, v9, v10, v11, (char)v12);
}

void ot::BackboneRouter::MulticastListenersTable::CheckInvariants(ot::BackboneRouter::MulticastListenersTable *this)
{
}

void ot::BackboneRouter::MulticastListenersTable::Remove(ot::BackboneRouter::MulticastListenersTable *this, const ot::Ip6::Address *a2)
{
  int v14 = this;
  uint64_t v13 = a2;
  int v12 = 23;
  for (unsigned __int16 i = 0; i < (int)*((unsigned __int16 *)this + 750); ++i)
  {
    uint64_t v10 = (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * i);
    ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(v10);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v2, v13))
    {
      if (i != (unsigned __int16)--*((_WORD *)this + 750))
      {
        uint64_t v3 = (char *)this + 20 * *((unsigned __int16 *)this + 750);
        uint64_t v4 = v10;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v3;
        *((_DWORD *)v4 + ++*(_WORD *)(this + 4) = *((_DWORD *)v3 + 4);
        ot::BackboneRouter::MulticastListenersTable::FixHeap(this, i);
      }
      unsigned int v9 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(1);
      uint64_t v8 = v13;
      ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>((void *)this + 188, &v9, &v8);
      int v12 = 0;
      break;
    }
  }
  uint64_t v5 = (ot::Ip6::Address *)v13;
  ot::Time::Time((ot::Time *)&v7, 0);
  ot::BackboneRouter::MulticastListenersTable::Log((uint64_t)this, 1u, v5, v7, v12);
  ot::BackboneRouter::MulticastListenersTable::CheckInvariants(this);
}

void ot::BackboneRouter::MulticastListenersTable::Expire(ot::BackboneRouter::MulticastListenersTable *this)
{
  uint64_t v13 = this;
  int Now = ot::TimerMilli::GetNow(this);
  while (1)
  {
    BOOL v5 = 0;
    if (*((_WORD *)this + 750))
    {
      ExpireTime  = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(this);
      BOOL v5 = ot::Time::operator>=(&Now, &ExpireTime);
    }
    if (!v5) {
      break;
    }
    ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(this);
    uint64_t v4 = v1;
    int v9 = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(this);
    ot::BackboneRouter::MulticastListenersTable::Log((uint64_t)this, 2u, v4, v9, 0);
    ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress(this);
    long long v11 = *v2;
    if (--*((_WORD *)this + 750))
    {
      uint64_t v3 = (char *)this + 20 * *((unsigned __int16 *)this + 750);
      *(_OWORD *)this  = *(_OWORD *)v3;
      *((_DWORD *)this + ++*(_WORD *)(this + 4) = *((_DWORD *)v3 + 4);
      ot::BackboneRouter::MulticastListenersTable::FixHeap(this, 0);
    }
    unsigned int v8 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(1);
    int v7 = &v11;
    ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>((void *)this + 188, &v8, &v7);
  }
  ot::BackboneRouter::MulticastListenersTable::CheckInvariants(this);
}

BOOL ot::Time::operator>=(int *a1, int *a2)
{
  return !ot::Time::operator<(a1, a2);
}

{
  return ot::Time::operator>=(a1, a2);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(ot::BackboneRouter::MulticastListenersTable::Listener *this)
{
  return *((unsigned int *)this + 4);
}

{
  return ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(this);
}

void *ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>(void *result, unsigned int *a2, void *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>((uint64_t)result, a2, a3);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>(result, a2, a3);
}

BOOL ot::BackboneRouter::MulticastListenersTable::SiftHeapElemDown(ot::BackboneRouter::MulticastListenersTable *this, unsigned __int16 a2)
{
  uint64_t v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int16 v11 = a2;
  ot::BackboneRouter::MulticastListenersTable::Listener::Listener((ot::BackboneRouter::MulticastListenersTable::Listener *)&v9);
  if (v12 >= (int)*((unsigned __int16 *)this + 750)) {
    __assert_rtn("SiftHeapElemDown", "multicast_listeners_table.cpp", 189, "aIndex < mNumValidListeners");
  }
  uint64_t v2 = 20 * v12;
  long long v9 = *(_OWORD *)((char *)this + v2);
  int v10 = *(_DWORD *)((char *)this + v2 + 16);
  while (1)
  {
    unsigned __int16 v8 = 2 * v11 + 1;
    if (v8 >= (int)*((unsigned __int16 *)this + 750) || v8 <= (int)v11) {
      break;
    }
    if (v8 + 1 < *((unsigned __int16 *)this + 750)
      && ot::BackboneRouter::MulticastListenersTable::Listener::operator<((ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v8 + 20), (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v8)))
    {
      ++v8;
    }
    if (!ot::BackboneRouter::MulticastListenersTable::Listener::operator<((ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v8), (ot::BackboneRouter::MulticastListenersTable::Listener *)&v9))break; {
    uint64_t v3 = (char *)this + 20 * v8;
    }
    uint64_t v4 = (char *)this + 20 * v11;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *((_DWORD *)v4 + ++*(_WORD *)(this + 4) = *((_DWORD *)v3 + 4);
    unsigned __int16 v11 = v8;
  }
  if (v11 > (int)v12)
  {
    BOOL v5 = (char *)this + 20 * v11;
    *(_OWORD *)BOOL v5 = v9;
    *((_DWORD *)v5 + ++*(_WORD *)(this + 4) = v10;
  }
  return v11 > (int)v12;
}

double ot::BackboneRouter::MulticastListenersTable::SiftHeapElemUp(ot::BackboneRouter::MulticastListenersTable *this, unsigned __int16 a2)
{
  int v14 = this;
  unsigned __int16 v13 = a2;
  unsigned __int16 v12 = a2;
  ot::BackboneRouter::MulticastListenersTable::Listener::Listener((ot::BackboneRouter::MulticastListenersTable::Listener *)&v10);
  if (v13 >= (int)*((unsigned __int16 *)this + 750)) {
    __assert_rtn("SiftHeapElemUp", "multicast_listeners_table.cpp", 230, "aIndex < mNumValidListeners");
  }
  uint64_t v2 = 20 * v13;
  long long v3 = *(_OWORD *)((char *)this + v2);
  long long v10 = v3;
  int v11 = *(_DWORD *)((char *)this + v2 + 16);
  while (1)
  {
    unsigned __int16 v9 = (v12 - 1) / 2;
    if (!v12
      || !ot::BackboneRouter::MulticastListenersTable::Listener::operator<((ot::BackboneRouter::MulticastListenersTable::Listener *)&v10, (ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * v9)))
    {
      break;
    }
    uint64_t v4 = (char *)this + 20 * v9;
    BOOL v5 = (char *)this + 20 * v12;
    long long v3 = *(_OWORD *)v4;
    *(_OWORD *)BOOL v5 = *(_OWORD *)v4;
    *((_DWORD *)v5 + ++*(_WORD *)(this + 4) = *((_DWORD *)v4 + 4);
    unsigned __int16 v12 = v9;
  }
  if (v12 < (int)v13)
  {
    uint64_t v6 = (char *)this + 20 * v12;
    *(void *)&long long v3 = v10;
    *(_OWORD *)uint64_t v6 = v10;
    *((_DWORD *)v6 + ++*(_WORD *)(this + 4) = v11;
  }
  return *(double *)&v3;
}

BOOL ot::BackboneRouter::MulticastListenersTable::Listener::operator<(ot::BackboneRouter::MulticastListenersTable::Listener *a1, ot::BackboneRouter::MulticastListenersTable::Listener *a2)
{
  uint64_t v6 = a1;
  BOOL v5 = a2;
  ExpireTime  = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(a1);
  int v3 = ot::BackboneRouter::MulticastListenersTable::Listener::GetExpireTime(v5);
  return ot::Time::operator<(&ExpireTime, &v3);
}

{
  return ot::BackboneRouter::MulticastListenersTable::Listener::operator<(a1, a2);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::IteratorBuilder::begin(ot::BackboneRouter::MulticastListenersTable::IteratorBuilder *this)
{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::BackboneRouter::MulticastListenersTable>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(a1);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::IteratorBuilder::end(ot::BackboneRouter::MulticastListenersTable::IteratorBuilder *this)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(this);
  return v3
       + 20
       * *(unsigned __int16 *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::MulticastListenersTable>(this)
                             + 1500);
}

void ot::BackboneRouter::MulticastListenersTable::Clear(ot::BackboneRouter::MulticastListenersTable *this)
{
  uint64_t v6 = this;
  if (ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet((void *)this + 188))
  {
    for (unsigned __int16 i = 0; i < (int)*((unsigned __int16 *)this + 750); ++i)
    {
      unsigned int v4 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(1);
      ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress((ot::BackboneRouter::MulticastListenersTable *)((char *)this + 20 * i));
      uint64_t v3 = v1;
      ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>((uint64_t)this + 1504, &v4, &v3);
    }
  }
  *((_WORD *)this + 75ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = 0;
  ot::BackboneRouter::MulticastListenersTable::CheckInvariants(this);
}

BOOL ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet(a1);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>(uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>(a1, a2, a3);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::SetCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::Set((void *)(a1 + 1504), a2, a3);
  uint64_t result = ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::IsSet((void *)(a1 + 1504));
  if (result)
  {
    for (unsigned __int16 i = 0; i < (int)*(unsigned __int16 *)(a1 + 1500); ++i)
    {
      unsigned int v7 = ot::MapEnum<ot::BackboneRouter::MulticastListenersTable::Listener::Event>(0);
      ot::BackboneRouter::MulticastListenersTable::Listener::GetAddress((ot::BackboneRouter::MulticastListenersTable::Listener *)(a1 + 20 * i));
      uint64_t v6 = v4;
      uint64_t result = ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address const*>(a1 + 1504, &v7, &v6);
    }
  }
  return result;
}

void *ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*)>::Set(result, a2, a3);
}

uint64_t ot::BackboneRouter::MulticastListenersTable::GetNext(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  unsigned int v7 = 0;
  if (*a2 < (int)a1[750])
  {
    int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)a1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)&a1[10 * (unsigned __int16)*v9];
    if (ot::Time::operator>((int *)&a1[10 * (unsigned __int16)*v9 + 8], &Now)) {
      unsigned int v4 = ot::Time::operator-(&a1[10 * (unsigned __int16)*v9 + 8], &Now);
    }
    else {
      unsigned int v4 = 0;
    }
    *(_DWORD *)(v8 + 16)  = ot::Time::MsecToSec((ot::Time *)v4);
    ++*v9;
  }
  else
  {
    return 23;
  }
  return v7;
}

BOOL ot::Time::operator>(int *a1, int *a2)
{
  return ot::Time::operator<(a2, a1);
}

{
  return ot::Time::operator>(a1, a2);
}

BOOL ot::Time::operator<(int *a1, int *a2)
{
  return ot::SerialNumber::IsLess<unsigned int>(*a1, *a2);
}

{
  return ot::Time::operator<(a1, a2);
}

BOOL ot::SerialNumber::IsLess<unsigned int>(int a1, int a2)
{
  return a1 - a2 < 0;
}

{
  return ot::SerialNumber::IsLess<unsigned int>(a1, a2);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>(uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterMulticastListenerEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterMulticastListenerEvent,ot::Ip6::Address *>(a1, a2, a3);
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::Init(ot::BackboneRouter::NdProxyTable::NdProxy *this, const ot::Ip6::InterfaceIdentifier *a2, const ot::Ip6::InterfaceIdentifier *a3, __int16 a4, unsigned int a5)
{
  if ((*((unsigned char *)this + 22) & 8) != 0) {
    __assert_rtn("Init", "ndproxy_table.cpp", 54, "!mValid");
  }
  ot::Clearable<ot::BackboneRouter::NdProxyTable::NdProxy>::Clear(this);
  *((unsigned char *)this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 22) & 0xF7 | 8;
  *(void *)this  = *(void *)a2;
  *((void *)this + 1)  = *(void *)a3;
  *((unsigned char *)this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 22) & 0xFB | 4;
  return ot::BackboneRouter::NdProxyTable::NdProxy::Update(this, a4, a5);
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::Update(ot::BackboneRouter::NdProxyTable::NdProxy *this, __int16 a2, unsigned int a3)
{
  uint64_t v10 = this;
  __int16 v9 = a2;
  unsigned int v8 = a3;
  if ((*((unsigned char *)this + 22) & 8) == 0) {
    __assert_rtn("Update", "ndproxy_table.cpp", 68, "mValid");
  }
  *((_WORD *)this + 1ot::Cli::Interpreter::OutputResult((uint64_t)this, 0) = v9;
  uint64_t v3 = (ot::TimerMilli *)ot::Min<unsigned int>(v8, 0xD2F00u);
  unsigned int v8 = v3;
  int Now = ot::TimerMilli::GetNow(v3);
  int v4 = ot::Time::SecToMsec((ot::Time *)v8);
  uint64_t result = ot::Time::operator-(&Now, v4);
  *((_DWORD *)this + ++*(_WORD *)(this + 4) = result;
  return result;
}

BOOL ot::BackboneRouter::NdProxyTable::MatchesFilter(uint64_t a1, char a2)
{
  BOOL v4 = 0;
  if (a2)
  {
    if (a2 == 1)
    {
      return (*(unsigned char *)(a1 + 22) & 8) != 0;
    }
    else if (a2 == 2)
    {
      LOBYTE(v3)  = 0;
      if ((*(unsigned char *)(a1 + 22) & 8) != 0) {
        return (*(unsigned __int8 *)(a1 + 22) >> 2) & 1;
      }
      return v3;
    }
  }
  else
  {
    return (*(unsigned char *)(a1 + 22) & 8) == 0;
  }
  return v4;
}

uint64_t ot::BackboneRouter::NdProxyTable::Iterator::Iterator(uint64_t a1, uint64_t a2, char a3)
{
  ot::InstanceLocator::InstanceLocator();
  ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator((void *)a1);
  *(unsigned char *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a3;
  Instance  = ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  *(void *)a1  = ot::Instance::Get<ot::BackboneRouter::NdProxyTable>((uint64_t)Instance);
  if (!ot::BackboneRouter::NdProxyTable::MatchesFilter(*(void *)a1, *(unsigned char *)(a1 + 8))) {
    ot::BackboneRouter::NdProxyTable::Iterator::Advance((ot::BackboneRouter::NdProxyTable::Iterator *)a1);
  }
  return a1;
}

{
  ot::BackboneRouter::NdProxyTable::Iterator::Iterator(a1, a2, a3);
  return a1;
}

unint64_t ot::BackboneRouter::NdProxyTable::Iterator::Advance(ot::BackboneRouter::NdProxyTable::Iterator *this)
{
  Instance  = ot::InstanceLocator::GetInstance(this);
  uint64_t v6 = ot::Instance::Get<ot::BackboneRouter::NdProxyTable>((uint64_t)Instance);
  do
  {
    *(void *)this += 24;
    unint64_t v3 = *(void *)this;
    unint64_t result = ot::GetArrayEnd<ot::BackboneRouter::NdProxyTable::NdProxy,(unsigned short)250>(v6);
    char v4 = 0;
    if (v3 < result)
    {
      unint64_t result = ot::BackboneRouter::NdProxyTable::MatchesFilter(*(void *)this, *((unsigned char *)this + 8));
      char v4 = result ^ 1;
    }
  }
  while ((v4 & 1) != 0);
  return result;
}

uint64_t *ot::BackboneRouter::NdProxyTable::Iterator::Iterator(uint64_t *a1)
{
  ot::InstanceLocator::InstanceLocator();
  ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator(a1);
  Instance  = ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  uint64_t v5 = ot::Instance::Get<ot::BackboneRouter::NdProxyTable>((uint64_t)Instance);
  uint64_t v2 = ot::GetArrayEnd<ot::BackboneRouter::NdProxyTable::NdProxy,(unsigned short)250>(v5);
  unint64_t result = a1;
  *a1  = v2;
  return result;
}

{
  ot::BackboneRouter::NdProxyTable::Iterator::Iterator(a1);
  return a1;
}

uint64_t ot::GetArrayEnd<ot::BackboneRouter::NdProxyTable::NdProxy,(unsigned short)250>(uint64_t a1)
{
  return a1 + 6000;
}

{
  return ot::GetArrayEnd<ot::BackboneRouter::NdProxyTable::NdProxy,(unsigned short)250>(a1);
}

uint64_t ot::BackboneRouter::NdProxyTable::Erase(uint64_t this, ot::BackboneRouter::NdProxyTable::NdProxy *a2)
{
  *(unsigned char *)(this + 22) &= ~8u;
  return this;
}

void ot::BackboneRouter::NdProxyTable::HandleDomainPrefixUpdate(ot::BackboneRouter::NdProxyTable *a1, char a2)
{
  if (a2 == 1 || a2 == 2 || a2 == 3) {
    ot::BackboneRouter::NdProxyTable::Clear(a1);
  }
}

void ot::BackboneRouter::NdProxyTable::Clear(ot::BackboneRouter::NdProxyTable *this)
{
  int v14 = this;
  unsigned __int16 v13 = this;
  unsigned __int16 v12 = this;
  uint64_t v11 = (void *)((char *)this + 6000);
  while (v12 != v11)
  {
    uint64_t v10 = v12;
    ot::Clearable<ot::BackboneRouter::NdProxyTable::NdProxy>::Clear(v12);
    v12 += 3;
  }
  unsigned int v9 = ot::MapEnum<ot::BackboneRouter::NdProxyTable::NdProxy::Event>(3);
  ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterNdProxyEvent,decltype(nullptr)>((void *)this + 750, &v9);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrNdProxy", "NdProxyTable::Clear!", v1, v2, v3, v4, v5, v6, v7);
}

void *ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterNdProxyEvent,decltype(nullptr)>(void *result, unsigned int *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterNdProxyEvent,decltype(nullptr)>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::InvokeIfSet<otBackboneRouterNdProxyEvent,decltype(nullptr)>(result, a2);
}

uint64_t ot::MapEnum<ot::BackboneRouter::NdProxyTable::NdProxy::Event>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::BackboneRouter::NdProxyTable::NdProxy::Event>(result);
}

uint64_t ot::BackboneRouter::NdProxyTable::Register(ot::BackboneRouter::NdProxyTable *this, const ot::Ip6::InterfaceIdentifier *a2, const ot::Ip6::InterfaceIdentifier *a3, __int16 a4, unsigned int *a5)
{
  unsigned int v18 = 0;
  uint64_t v16 = ot::BackboneRouter::NdProxyTable::FindByAddressIid(this, a2);
  if (a5) {
    unsigned int v14 = *a5;
  }
  else {
    unsigned int v14 = 0;
  }
  if (!v16)
  {
    Invalid  = ot::BackboneRouter::NdProxyTable::FindByMeshLocalIid(this, a3);
    if (Invalid)
    {
      ot::BackboneRouter::NdProxyTable::TriggerCallback(this, 1u, Invalid);
      ot::BackboneRouter::NdProxyTable::Erase((uint64_t)Invalid, v5);
    }
    else
    {
      Invalid  = (ot *)ot::BackboneRouter::NdProxyTable::FindInvalid(this);
      if (!Invalid)
      {
        unsigned int v18 = 3;
        goto LABEL_13;
      }
    }
    ot::BackboneRouter::NdProxyTable::NdProxy::Init(Invalid, a2, a3, a4, v14);
    *((unsigned char *)this + 6016)  = *((unsigned char *)this + 6016) & 0xFE | 1;
    goto LABEL_13;
  }
  if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v16 + 8, a3))
  {
    ot::BackboneRouter::NdProxyTable::NdProxy::Update((ot::BackboneRouter::NdProxyTable::NdProxy *)v16, a4, v14);
    ot::BackboneRouter::NdProxyTable::NotifyDuaRegistrationOnBackboneLink(this, (ot::BackboneRouter::NdProxyTable::NdProxy *)v16, 1);
  }
  else
  {
    unsigned int v18 = 29;
  }
LABEL_13:
  ot::Ip6::InterfaceIdentifier::ToString(a2, (ot::StringWriter *)v24);
  char v13 = ot::String<(unsigned short)17>::AsCString((uint64_t)v24);
  ot::Ip6::InterfaceIdentifier::ToString(a3, (ot::StringWriter *)v23);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v23);
  ot::ToUlong(v14);
  ot::ErrorToString(v18);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BbrNdProxy", "NdProxyTable::Register %s MLIID %s RLOC16 %04x LTT %lu => %s", v6, v7, v8, v9, v10, v11, v13);
  return v18;
}

char *ot::BackboneRouter::NdProxyTable::FindByAddressIid(ot::BackboneRouter::NdProxyTable *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  uint64_t v19 = this;
  unsigned int v18 = a2;
  uint64_t v17 = 0;
  char v15 = ot::BackboneRouter::NdProxyTable::Iterate(this, 1);
  uint64_t v16 = (ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v15;
  v14[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin((ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v15);
  v14[1]  = v2;
  v13[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(v16);
  v13[1]  = v3;
  while (ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(v14, v13))
  {
    unsigned __int16 v12 = (char *)ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*((uint64_t)v14);
    if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v12, v18))
    {
      uint64_t v17 = v12;
      break;
    }
    ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator++((ot::BackboneRouter::NdProxyTable::Iterator *)v14);
  }
  ot::Ip6::InterfaceIdentifier::ToString(v18, (ot::StringWriter *)v21);
  char v11 = ot::String<(unsigned short)17>::AsCString((uint64_t)v21);
  if (v17)
  {
    ot::Ip6::InterfaceIdentifier::ToString((ot::Ip6::InterfaceIdentifier *)(v17 + 8), (ot::StringWriter *)v20);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v20);
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrNdProxy", "NdProxyTable::FindByAddressIid(%s) => %s", v4, v5, v6, v7, v8, v9, v11);
  return v17;
}

void ot::BackboneRouter::NdProxyTable::NotifyDuaRegistrationOnBackboneLink(ot::BackboneRouter::NdProxyTable *this, ot::BackboneRouter::NdProxyTable::NdProxy *a2, char a3)
{
  unsigned __int16 v12 = this;
  char v11 = a2;
  char v10 = a3 & 1;
  if ((*((unsigned char *)a2 + 22) & 4) == 0)
  {
    if (v10) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 0;
    }
    ot::BackboneRouter::NdProxyTable::TriggerCallback(this, v3, v11);
    uint64_t v7 = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
    v9[0]  = ot::BackboneRouter::NdProxyTable::GetDua(this, v11);
    v9[1]  = v4;
    MeshLocalIid  = (ot::Ip6::InterfaceIdentifier *)ot::BackboneRouter::NdProxyTable::NdProxy::GetMeshLocalIid(v11);
    TimeSinceLastTransactiounsigned __int8 n = ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(v11);
    ot::BackboneRouter::Manager::SendProactiveBackboneNotification(v7, (const ot::Ip6::Address *)v9, MeshLocalIid, TimeSinceLastTransaction);
    IgnoreError();
  }
}

ot::Ip6::InterfaceIdentifier *ot::BackboneRouter::NdProxyTable::FindByMeshLocalIid(ot::BackboneRouter::NdProxyTable *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  uint64_t v19 = this;
  unsigned int v18 = a2;
  uint64_t v17 = 0;
  char v15 = ot::BackboneRouter::NdProxyTable::Iterate(this, 1);
  uint64_t v16 = (ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v15;
  v14[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin((ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v15);
  v14[1]  = v2;
  v13[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(v16);
  v13[1]  = v3;
  while (ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(v14, v13))
  {
    uint64_t v12 = ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*((uint64_t)v14);
    if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==((const void *)(v12 + 8), v18))
    {
      uint64_t v17 = (ot::Ip6::InterfaceIdentifier *)v12;
      break;
    }
    ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator++((ot::BackboneRouter::NdProxyTable::Iterator *)v14);
  }
  ot::Ip6::InterfaceIdentifier::ToString(v18, (ot::StringWriter *)v21);
  char v11 = ot::String<(unsigned short)17>::AsCString((uint64_t)v21);
  if (v17)
  {
    ot::Ip6::InterfaceIdentifier::ToString(v17, (ot::StringWriter *)v20);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v20);
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrNdProxy", "NdProxyTable::FindByMeshLocalIid(%s) => %s", v4, v5, v6, v7, v8, v9, v11);
  return v17;
}

uint64_t ot::BackboneRouter::NdProxyTable::TriggerCallback(ot::InstanceLocator *a1, unsigned int a2, const ot::Ip6::InterfaceIdentifier *a3)
{
  uint64_t v12 = a1;
  unsigned int v11 = a2;
  char v10 = a3;
  uint64_t v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  Domainuint64_t Prefix = (ot::Ip6::Prefix *)ot::BackboneRouter::Leader::GetDomainPrefix(v3);
  uint64_t result = ot::CallbackBase<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*)>::IsSet((void *)a1 + 750);
  if (result)
  {
    if (!DomainPrefix) {
      __assert_rtn("TriggerCallback", "ndproxy_table.cpp", 275, "prefix != nullptr");
    }
    ot::Ip6::Address::SetPrefix((ot::Ip6::Address *)v9, DomainPrefix);
    ot::Ip6::Address::SetIid((ot::Ip6::Address *)v9, v10);
    unsigned int v7 = ot::MapEnum<ot::BackboneRouter::NdProxyTable::NdProxy::Event>(v11);
    uint64_t v6 = v9;
    return ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterNdProxyEvent,ot::Ip6::Address *>((uint64_t)a1 + 6000, &v7, &v6);
  }
  return result;
}

uint64_t ot::BackboneRouter::NdProxyTable::FindInvalid(ot::BackboneRouter::NdProxyTable *this)
{
  uint64_t v16 = this;
  uint64_t v15 = 0;
  char v13 = ot::BackboneRouter::NdProxyTable::Iterate(this, 0);
  unsigned int v14 = (ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v13;
  v12[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin((ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v13);
  v12[1]  = v1;
  v11[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(v14);
  v11[1]  = v2;
  if (ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(v12, v11))
  {
    uint64_t v15 = ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*((uint64_t)v12);
  }
  uint64_t v9 = "OK";
  if (!v15) {
    uint64_t v9 = "NOT_FOUND";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BbrNdProxy", "NdProxyTable::FindInvalid() => %s", v3, v4, v5, v6, v7, v8, (char)v9);
  return v15;
}

uint64_t ot::BackboneRouter::NdProxyTable::Iterate(ot::InstanceLocator *a1, char a2)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  ot::ChildTable::IteratorBuilder::IteratorBuilder(&v5, (uint64_t)Instance, a2);
  return v5;
}

{
  return ot::BackboneRouter::NdProxyTable::Iterate(a1, a2);
}

uint64_t ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin(ot::BackboneRouter::NdProxyTable::IteratorBuilder *this)
{
  Instance  = ot::InstanceLocator::GetInstance(this);
  ot::BackboneRouter::NdProxyTable::Iterator::Iterator((uint64_t)&v4, (uint64_t)Instance, *(unsigned char *)this);
  return v4;
}

{
  return ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin(this);
}

uint64_t ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(ot::BackboneRouter::NdProxyTable::IteratorBuilder *this)
{
  ot::InstanceLocator::GetInstance(this);
  ot::BackboneRouter::NdProxyTable::Iterator::Iterator(&v2);
  return v2;
}

{
  return ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(this);
}

BOOL ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*(a1);
}

unint64_t ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator++(ot::BackboneRouter::NdProxyTable::Iterator *a1)
{
  return ot::BackboneRouter::NdProxyTable::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator++(a1);
}

uint64_t ot::BackboneRouter::NdProxyTable::HandleTimer(uint64_t this)
{
  uint64_t v12 = this;
  unsigned __int8 v5 = (ot::BackboneRouter::NdProxyTable *)this;
  if (*(unsigned char *)(this + 6016))
  {
    *(unsigned char *)(this + 6016) &= ~1u;
    char v10 = ot::BackboneRouter::NdProxyTable::Iterate((ot::InstanceLocator *)this, 2);
    unsigned int v11 = (ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v10;
    v9[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin((ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v10);
    v9[1]  = v1;
    v8[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(v11);
    v8[1]  = v2;
    while (1)
    {
      this  = ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(v9, v8);
      if ((this & 1) == 0) {
        break;
      }
      uint64_t v7 = (ot::BackboneRouter::NdProxyTable::NdProxy *)ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*((uint64_t)v9);
      if (ot::BackboneRouter::NdProxyTable::NdProxy::IsDadAttemptsComplete(v7))
      {
        *((unsigned char *)v7 + 22) &= ~4u;
        ot::BackboneRouter::NdProxyTable::NotifyDuaRegistrationOnBackboneLink(v5, v7, 0);
      }
      else
      {
        *((unsigned char *)v5 + 6016)  = *((unsigned char *)v5 + 6016) & 0xFE | 1;
        uint64_t v4 = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(v5);
        v6[0]  = ot::BackboneRouter::NdProxyTable::GetDua(v5, v7);
        v6[1]  = v3;
        if (!ot::BackboneRouter::Manager::SendBackboneQuery(v4, (const ot::Ip6::Address *)v6, 0xFFFEu)) {
          ot::BackboneRouter::NdProxyTable::NdProxy::IncreaseDadAttempts((uint64_t)v7);
        }
      }
      ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator++((ot::BackboneRouter::NdProxyTable::Iterator *)v9);
    }
  }
  return this;
}

BOOL ot::BackboneRouter::NdProxyTable::NdProxy::IsDadAttemptsComplete(ot::BackboneRouter::NdProxyTable::NdProxy *this)
{
  return (*((unsigned char *)this + 22) & 3) == 3;
}

{
  return ot::BackboneRouter::NdProxyTable::NdProxy::IsDadAttemptsComplete(this);
}

uint64_t ot::BackboneRouter::NdProxyTable::GetDua(ot::BackboneRouter::NdProxyTable *this, ot::BackboneRouter::NdProxyTable::NdProxy *a2)
{
  uint64_t v2 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  Domainuint64_t Prefix = (ot::Ip6::Prefix *)ot::BackboneRouter::Leader::GetDomainPrefix(v2);
  if (!DomainPrefix) {
    __assert_rtn("GetDua", "ndproxy_table.cpp", 303, "domainPrefix != nullptr");
  }
  ot::Ip6::Address::SetPrefix((ot::Ip6::Address *)&v6, DomainPrefix);
  ot::Ip6::Address::SetIid((ot::Ip6::Address *)&v6, a2);
  return v6;
}

uint64_t ot::BackboneRouter::NdProxyTable::NdProxy::IncreaseDadAttempts(uint64_t this)
{
  *(unsigned char *)(this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(unsigned char *)(this + 22) & 0xFC | ((*(unsigned char *)(this + 22) & 3) + 1) & 3;
  return this;
}

{
  return ot::BackboneRouter::NdProxyTable::NdProxy::IncreaseDadAttempts(this);
}

BOOL ot::CallbackBase<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*)>::IsSet(a1);
}

void *ot::Ip6::Address::SetIid(ot::Ip6::Address *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  uint64_t result = (void *)ot::Ip6::Address::GetIid(this);
  *uint64_t result = *(void *)a2;
  return result;
}

{
  return ot::Ip6::Address::SetIid(this, a2);
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterNdProxyEvent,ot::Ip6::Address *>(uint64_t a1, unsigned int *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterNdProxyEvent,ot::Ip6::Address *>(a1, a2, a3);
}

uint64_t ot::BackboneRouter::NdProxyTable::NotifyDadComplete(uint64_t this, ot::BackboneRouter::NdProxyTable::NdProxy *a2)
{
  if (a2) {
    return ot::BackboneRouter::NdProxyTable::Erase(this, a2);
  }
  *(unsigned char *)(this + 2ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(unsigned char *)(this + 22) & 0xFC | 3;
  return this;
}

char *ot::BackboneRouter::NdProxyTable::ResolveDua(ot::BackboneRouter::NdProxyTable *this, const ot::Ip6::Address *a2)
{
  uint64_t v2 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (!ot::BackboneRouter::Leader::IsDomainUnicast(v2, a2)) {
    return 0;
  }
  Iid  = (const ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
  return ot::BackboneRouter::NdProxyTable::FindByAddressIid(this, Iid);
}

uint64_t ot::BackboneRouter::NdProxyTable::GetInfo(ot::InstanceLocator *a1, ot::Ip6::Address *a2, uint64_t a3)
{
  unsigned int v18 = a1;
  uint64_t v17 = a2;
  uint64_t v16 = a3;
  unsigned int v15 = 23;
  uint64_t v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  if (ot::BackboneRouter::Leader::IsDomainUnicast(v3, v17))
  {
    char v13 = ot::BackboneRouter::NdProxyTable::Iterate(a1, 1);
    unsigned int v14 = (ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v13;
    v12[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::begin((ot::BackboneRouter::NdProxyTable::IteratorBuilder *)&v13);
    v12[1]  = v4;
    v11[0]  = ot::BackboneRouter::NdProxyTable::IteratorBuilder::end(v14);
    v11[1]  = v5;
    while (ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator!=(v12, v11))
    {
      char v10 = (ot::BackboneRouter::NdProxyTable::NdProxy *)ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator*((uint64_t)v12);
      Iid  = (const void *)ot::Ip6::Address::GetIid(v17);
      if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v10, Iid))
      {
        *(void *)uint64_t v16 = (char *)v10 + 8;
        TimeSinceLastTransactiounsigned __int8 n = ot::BackboneRouter::NdProxyTable::NdProxy::GetTimeSinceLastTransaction(v10);
        *(_DWORD *)(v16 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = TimeSinceLastTransaction;
        *(_WORD *)(v16 + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((_WORD *)v10 + 10);
        return 0;
      }
      ot::ItemPtrIterator<ot::BackboneRouter::NdProxyTable::NdProxy,ot::BackboneRouter::NdProxyTable::Iterator>::operator++((ot::BackboneRouter::NdProxyTable::Iterator *)v12);
    }
  }
  else
  {
    return 7;
  }
  return v15;
}

uint64_t ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterNdProxyEvent,decltype(nullptr)>(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, 0);
}

{
  return ot::Callback<void (*)(void *,otBackboneRouterNdProxyEvent,otIp6Address const*),(ot::CallbackContextPosition)0>::Invoke<otBackboneRouterNdProxyEvent,decltype(nullptr)>(a1, a2);
}

uint64_t ot::Coap::CoapBase::CoapBase(uint64_t a1, ot::Instance *a2, uint64_t a3)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t v3 = ot::Coap::MessageQueue::MessageQueue((ot::Coap::MessageQueue *)a1);
  *(_WORD *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = ot::Random::NonCrypto::GetUint16(v3);
  ot::TimerMilliContext::TimerMilliContext((ot::TimerMilliContext *)(a1 + 16), a2, (void (*)(ot::Timer *))ot::Coap::CoapBase::HandleRetransmissionTimer, (void *)a1);
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)(a1 + 48));
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)(a1 + 56));
  ot::Coap::ResponsesQueue::ResponsesQueue((ot::Coap::ResponsesQueue *)(a1 + 72), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)(a1 + 112));
  uint64_t result = a1;
  *(void *)(a1 + 12ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(void *)(a1 + 136)  = a3;
  return result;
}

{
  ot::Coap::CoapBase::CoapBase(a1, a2, a3);
  return a1;
}

ot::Coap::MessageQueue *ot::Coap::MessageQueue::MessageQueue(ot::Coap::MessageQueue *this)
{
  return this;
}

{
  ot::MessageQueue::MessageQueue(this);
  return this;
}

uint64_t ot::Random::NonCrypto::GetUint16(ot::Random::NonCrypto *this)
{
  return (unsigned __int16)ot::Random::NonCrypto::GetUint32(this);
}

{
  return ot::Random::NonCrypto::GetUint16(this);
}

uint64_t ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Coap::CoapBase *this, ot::Timer *a2)
{
  Context  = (ot::Coap::CoapBase *)ot::TimerMilliContext::GetContext(this);
  return ot::Coap::CoapBase::HandleRetransmissionTimer(Context);
}

void *ot::LinkedList<ot::Coap::Resource>::LinkedList(void *a1)
{
  return a1;
}

ot::Coap::ResponsesQueue *ot::Coap::ResponsesQueue::ResponsesQueue(ot::Coap::ResponsesQueue *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Coap::MessageQueue::MessageQueue(this);
  ot::TimerMilliContext::TimerMilliContext((ot::Coap::ResponsesQueue *)((char *)this + 8), a2, (void (*)(ot::Timer *))ot::Coap::ResponsesQueue::HandleTimer, this);
  return this;
}

ot::Message *ot::Coap::CoapBase::ClearRequestsAndResponses(ot::Coap::CoapBase *this)
{
  return ot::Coap::ResponsesQueue::DequeueAllResponses((ot::Coap::CoapBase *)((char *)this + 72));
}

BOOL ot::Coap::CoapBase::ClearRequests(ot::Coap::CoapBase *this, const ot::Ip6::Address *a2)
{
  char v13 = this;
  uint64_t v12 = a2;
  unsigned int v11 = this;
  v10[0]  = ot::Coap::MessageQueue::begin(this);
  v10[1]  = v2;
  v9[0]  = ot::Coap::MessageQueue::end(v11);
  v9[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v10, v9);
    if (!result) {
      break;
    }
    uint64_t v8 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v10);
    ot::Coap::CoapBase::Metadata::ReadFrom((ot::Coap::CoapBase::Metadata *)v7, v8);
    if (!v12 || ot::Equatable<ot::Ip6::Address>::operator==(v7, v12)) {
      ot::Coap::CoapBase::FinalizeCoapTransaction(this, v8, (uint64_t)v7, 0, 0, 0xBu);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v10, v5);
  }
  return result;
}

{
  return ot::Coap::CoapBase::ClearRequests(this, a2);
}

ot::Message *ot::Coap::ResponsesQueue::DequeueAllResponses(ot::Coap::ResponsesQueue *this)
{
  return ot::MessageQueue::DequeueAndFreeAll(this);
}

uint64_t ot::Coap::MessageQueue::end(ot::Coap::MessageQueue *this)
{
  v2[0]  = 0;
  v2[1]  = 0;
  ot::Coap::Message::Iterator::Iterator((ot::Coap::Message::Iterator *)v2);
  return v2[0];
}

{
  uint64_t v2;

  uint64_t v2 = 0;
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)&v2);
  return v2;
}

{
  return ot::Coap::MessageQueue::end(this);
}

{
  return ot::Coap::MessageQueue::end(this);
}

BOOL ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(a1, a2);
}

uint64_t ot::Coap::Message::Iterator::operator*(uint64_t a1)
{
  return ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*(a1);
}

{
  return ot::Coap::Message::Iterator::operator*(a1);
}

void ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::CoapBase::Metadata *this, const ot::Coap::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x48uLL) {
    __assert_rtn("ReadFrom", "coap.cpp", 1518, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Coap::CoapBase::Metadata>(a2, Length - 72, (char *)this);
  IgnoreError();
}

void ot::Coap::CoapBase::FinalizeCoapTransaction(ot::Coap::CoapBase *a1, ot::Coap::Message *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (*(void *)(a3 + 40)) {
    (*(void (**)(void, uint64_t, uint64_t, void))(a3 + 40))(*(void *)(a3 + 48), a4, a5, a6);
  }
}

uint64_t ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++(ot::Message::Iterator *a1, ot::Message *a2)
{
  return ot::Message::Iterator::Advance(a1, a2);
}

{
  return ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++(a1, a2);
}

void ot::Coap::CoapBase::AddResource(ot::Coap::CoapBase *this, ot::Coap::Resource *a2)
{
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Coap::Resource>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Coap::Resource>::Push(a1, a2);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Add(a1, a2);
}

uint64_t ot::Coap::CoapBase::RemoveResource(ot::Coap::CoapBase *this, ot::Coap::Resource *a2)
{
  return ot::LinkedListEntry<ot::Coap::Resource>::SetNext((uint64_t)a2, 0);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Remove(uint64_t *a1, uint64_t a2)
{
  unsigned char v5[2] = (uint64_t)a1;
  v5[1]  = a2;
  v5[0]  = 0;
  unsigned int v4 = ot::LinkedList<ot::Coap::Resource>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Coap::Resource>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Remove(a1, a2);
}

uint64_t ot::LinkedListEntry<ot::Coap::Resource>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 2++*(_WORD *)(this + 4) = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Coap::Resource>::SetNext(result, a2);
}

ot::Message *ot::Coap::CoapBase::NewMessage(ot::Coap::CoapBase *this, const ot::Message::Settings *a2)
{
  uint64_t v2 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  ot::Ip6::Udp::NewMessage(v2, 0, a2);
  ot::AsCoapMessagePtr();
  uint64_t v5 = v3;
  if (v3) {
    ot::Message::SetOffset(v3, 0);
  }
  return v5;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Udp>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1);
}

ot::Message *ot::Coap::CoapBase::NewMessage(ot::Coap::CoapBase *this)
{
  Default  = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Coap::CoapBase::NewMessage(this, Default);
}

void *ot::Message::Settings::GetDefault(ot::Message::Settings *this)
{
  return &ot::Message::Settings::kDefault;
}

{
  return ot::Message::Settings::GetDefault(this);
}

ot::Message *ot::Coap::CoapBase::NewPriorityMessage(ot::Coap::CoapBase *this)
{
  unsigned int v4 = this;
  ot::Message::Settings::Settings(v3, 1, 3);
  return ot::Coap::CoapBase::NewMessage(this, (const ot::Message::Settings *)v3);
}

ot::Coap::Message *ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewPriorityMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 0, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::InitMessage(uint64_t a1, ot::Coap::Message *a2, char a3, unsigned __int8 a4)
{
  uint64_t v6 = a2;
  int v5 = 0;
  if (a2)
  {
    int v5 = ot::Coap::Message::Init(a2, a3, 2, a4);
    if (!v5) {
      int v5 = ot::Coap::Message::SetPayloadMarker(v6);
    }
  }
  if (v5 && v6)
  {
    ot::Message::Free(v6);
    return 0;
  }
  return v6;
}

ot::Coap::Message *ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 0, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewPriorityMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 1, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Coap::CoapBase *a1, unsigned __int8 a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewMessage(a1);
  return ot::Coap::CoapBase::InitMessage((uint64_t)a1, v2, 1, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::CoapBase *this, const ot::Coap::Message *a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewPriorityMessage(this);
  return ot::Coap::CoapBase::InitResponse(this, v2, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::InitResponse(ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Coap::Message *a3)
{
  int v5 = a2;
  int v4 = 0;
  if (a2)
  {
    int v4 = ot::Coap::Message::SetDefaultResponseHeader(a2, a3);
    if (!v4) {
      int v4 = ot::Coap::Message::SetPayloadMarker(v5);
    }
  }
  if (v4 && v5)
  {
    ot::Message::Free(v5);
    return 0;
  }
  return v5;
}

ot::Coap::Message *ot::Coap::CoapBase::NewResponseMessage(ot::Coap::CoapBase *this, const ot::Coap::Message *a2)
{
  uint64_t v2 = ot::Coap::CoapBase::NewMessage(this);
  return ot::Coap::CoapBase::InitResponse(this, v2, a2);
}

uint64_t ot::Coap::CoapBase::Send(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a1 + 136))(a1, a2, a3);
}

uint64_t ot::Coap::CoapBase::SendMessage(_WORD *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3, ot::Coap::TxParameters *a4, uint64_t a5, uint64_t a6)
{
  BOOL v32 = a1;
  uint64_t v31 = a2;
  unsigned __int8 v30 = a3;
  BOOL v29 = a4;
  uint64_t v28 = a5;
  uint64_t v27 = a6;
  unsigned int v26 = 0;
  unsigned __int16 v25 = 0;
  unsigned __int16 Length = 0;
  int Type = ot::Coap::Message::GetType(a2);
  if (Type == 2)
  {
    ot::Coap::ResponsesQueue::EnqueueResponse((ot::Coap::ResponsesQueue *)(a1 + 36), v31, v30, v29);
  }
  else if (Type == 3)
  {
    if (ot::Coap::Message::GetCode(v31)) {
      __assert_rtn("SendMessage", "coap.cpp", 243, "aMessage.GetCode() == kCodeEmpty");
    }
  }
  else
  {
    uint64_t v6 = v31;
    unsigned __int16 v7 = a1[4];
    a1[4]  = v7 + 1;
    ot::Coap::Message::SetMessageId(v6, v7);
  }
  ot::Coap::Message::Finish(v31);
  if (ot::Coap::Message::IsConfirmable(v31))
  {
    unsigned __int16 Length = ot::Message::GetLength(v31);
  }
  else if (ot::Coap::Message::IsNonConfirmable(v31) && v28)
  {
    unsigned __int16 Length = ot::Coap::Message::GetOptionStart(v31);
  }
  if (!Length) {
    goto LABEL_18;
  }
  v15[0]  = *(_OWORD *)ot::Ip6::MessageInfo::GetSockAddr(v30);
  PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v30);
  v15[1]  = *(_OWORD *)ot::Ip6::MessageInfo::GetPeerAddr(v30);
  char v23 = v23 & 0xFB | (4 * (ot::Ip6::MessageInfo::GetMulticastLoop(v30) & 1));
  uint64_t v17 = v28;
  uint64_t v18 = v27;
  char v21 = *((unsigned char *)v29 + 6);
  int v20 = ot::Coap::TxParameters::CalculateInitialRetransmissionTimeout(v29);
  char v23 = v23 & 0xFC | (2 * ot::Coap::Message::IsConfirmable(v31));
  HopLimit  = ot::Ip6::MessageInfo::GetHopLimit(v30);
  IsHostInterface  = (ot::TimerMilli *)ot::Ip6::MessageInfo::IsHostInterface(v30);
  char v23 = v23 & 0xF7 | (8 * (IsHostInterface & 1));
  v14[0]  = ot::TimerMilli::GetNow(IsHostInterface);
  if ((v23 & 2) != 0)
  {
    int v9 = ot::Time::operator+(v14, v20);
  }
  else
  {
    int v11 = ot::Coap::TxParameters::CalculateMaxTransmitWait(v29);
    int v9 = ot::Time::operator+(v14, v11);
  }
  v14[1]  = v9;
  int v19 = v9;
  unsigned __int16 v25 = ot::Coap::CoapBase::CopyAndEnqueueMessage((ot::Coap::CoapBase *)a1, v31, Length, (const ot::Coap::CoapBase::Metadata *)v15);
  if (v25) {
LABEL_18:
  }
    unsigned int v26 = ot::Coap::CoapBase::Send((uint64_t)a1, (uint64_t)v31, (uint64_t)v30);
  else {
    unsigned int v26 = 3;
  }
  if (v26 && v25) {
    ot::Coap::CoapBase::DequeueMessage((ot::Coap::CoapBase *)a1, v25);
  }
  return v26;
}

void ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::ResponsesQueue *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Coap::TxParameters *a4)
{
  unsigned int v15 = this;
  unsigned int v14 = a2;
  char v13 = a3;
  uint64_t v12 = a4;
  int v11 = 0;
  int v4 = ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)&v9);
  int Now = ot::TimerMilli::GetNow(v4);
  int v5 = ot::Coap::TxParameters::CalculateExchangeLifetime(v12);
  int v8 = ot::Time::operator+(&Now, v5);
  int v9 = v8;
  memcpy(v10, v13, sizeof(v10));
  if (!ot::Coap::ResponsesQueue::FindMatchedResponse(this, v14, (const ot::Ip6::MessageInfo *)v13))
  {
    ot::Coap::ResponsesQueue::UpdateQueue(this);
    int v11 = ot::Coap::Message::Clone(v14);
    if (v11)
    {
      if (ot::Coap::ResponsesQueue::ResponseMetadata::AppendTo((ot::Coap::ResponsesQueue::ResponseMetadata *)&v9, v11))
      {
        ot::Message::Free(v11);
      }
      else
      {
        ot::Coap::MessageQueue::Enqueue(this, v11);
        ot::TimerMilli::FireAtIfEarlier((int *)this + 2, v9);
      }
    }
  }
}

BOOL ot::Coap::Message::IsNonConfirmable(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetType(this) == 1;
}

{
  return ot::Coap::Message::IsNonConfirmable(this);
}

uint64_t ot::Coap::Message::GetOptionStart(ot::Coap::Message *this)
{
  return (unsigned __int16)(ot::Coap::Message::GetTokenLength(this) + 4);
}

{
  return ot::Coap::Message::GetOptionStart(this);
}

uint64_t ot::Ip6::MessageInfo::GetPeerPort(ot::Ip6::MessageInfo *this)
{
  return *((unsigned __int16 *)this + 17);
}

{
  return ot::Ip6::MessageInfo::GetPeerPort(this);
}

uint64_t ot::Ip6::MessageInfo::GetMulticastLoop(ot::Ip6::MessageInfo *this)
{
  return (*((unsigned __int8 *)this + 49) >> 4) & 1;
}

{
  return ot::Ip6::MessageInfo::GetMulticastLoop(this);
}

uint64_t ot::Coap::TxParameters::CalculateInitialRetransmissionTimeout(ot::Coap::TxParameters *this)
{
  return ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)*(unsigned int *)this, *(_DWORD *)this * *((unsigned __int8 *)this + 4) / *((unsigned __int8 *)this + 5) + 1);
}

uint64_t ot::Ip6::MessageInfo::GetHopLimit(ot::Ip6::MessageInfo *this)
{
  return *((unsigned __int8 *)this + 48);
}

{
  return ot::Ip6::MessageInfo::GetHopLimit(this);
}

uint64_t ot::Coap::TxParameters::CalculateMaxTransmitWait(ot::Coap::TxParameters *this)
{
  return ot::Coap::TxParameters::CalculateSpan(this, *((unsigned char *)this + 6) + 1);
}

ot::Message *ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::CoapBase *this, const ot::Coap::Message *a2, unsigned __int16 a3, const ot::Coap::CoapBase::Metadata *a4)
{
  uint64_t v6 = ot::Coap::Message::Clone(a2, a3);
  if (v6)
  {
    int v7 = ot::Coap::CoapBase::Metadata::AppendTo(a4, v6);
    if (!v7)
    {
      ot::TimerMilli::FireAtIfEarlier((int *)this + 4, *((_DWORD *)a4 + 14));
      ot::Coap::MessageQueue::Enqueue(this, v6);
    }
  }
  else
  {
    int v7 = 3;
  }
  if (v7 && v6)
  {
    ot::Message::Free(v6);
    return 0;
  }
  return v6;
}

void ot::Coap::CoapBase::DequeueMessage(ot::Coap::CoapBase *this, ot::Coap::Message *a2)
{
  if (ot::Timer::IsRunning((ot::Coap::CoapBase *)((char *)this + 16)) && !ot::Coap::MessageQueue::GetHead(this)) {
    ot::TimerMilli::Stop((ot::Coap::CoapBase *)((char *)this + 16));
  }
  ot::Message::Free(a2);
}

uint64_t ot::Coap::CoapBase::SendMessage(ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Coap::TxParameters *a4)
{
  return ot::Coap::CoapBase::SendMessage(this, a2, a3, a4, 0, 0);
}

uint64_t ot::Coap::CoapBase::SendMessage(ot::Coap::TxParameters *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3, uint64_t a4, uint64_t a5)
{
  Default  = (ot::Coap::TxParameters *)ot::Coap::TxParameters::GetDefault(a1);
  return ot::Coap::CoapBase::SendMessage(a1, a2, a3, Default, a4, a5);
}

uint64_t ot::Coap::CoapBase::SendMessage(ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendMessage(this, a2, a3, 0, 0);
}

uint64_t ot::Coap::CoapBase::SendReset(ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendEmptyMessage(this, 3, a2, (uint64_t)a3);
}

uint64_t ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::CoapBase *a1, char a2, ot::Coap::Message *a3, uint64_t a4)
{
  int v7 = 0;
  if (ot::Coap::Message::IsConfirmable(a3))
  {
    int v7 = ot::Coap::CoapBase::NewMessage(a1);
    if (v7)
    {
      ot::Coap::Message::Init(v7, a2, 0);
      unsigned __int16 MessageId = ot::Coap::Message::GetMessageId(a3);
      ot::Coap::Message::SetMessageId(v7, MessageId);
      ot::Coap::Message::Finish(v7);
      unsigned int v8 = ot::Coap::CoapBase::Send((uint64_t)a1, (uint64_t)v7, a4);
    }
    else
    {
      unsigned int v8 = 3;
    }
  }
  else
  {
    unsigned int v8 = 7;
  }
  if (v8 && v7) {
    ot::Message::Free(v7);
  }
  return v8;
}

uint64_t ot::Coap::CoapBase::SendAck(ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendEmptyMessage(this, 2, a2, (uint64_t)a3);
}

uint64_t ot::Coap::CoapBase::SendEmptyAck(ot::Coap::CoapBase *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, char a4)
{
  if (ot::Coap::Message::IsConfirmable(a2)) {
    return ot::Coap::CoapBase::SendHeaderResponse(a1, a4, a2, a3);
  }
  else {
    return 7;
  }
}

uint64_t ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::CoapBase *a1, char a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  unsigned int v8 = 0;
  if (ot::Coap::Message::IsRequest(a3))
  {
    unsigned int v8 = ot::Coap::CoapBase::NewMessage(a1);
    if (v8)
    {
      int Type = ot::Coap::Message::GetType(a3);
      if (Type)
      {
        if (Type != 1)
        {
          unsigned int v9 = 7;
          goto LABEL_12;
        }
        ot::Coap::Message::Init(v8, 1, a2);
      }
      else
      {
        ot::Coap::Message::Init(v8, 2, a2);
        unsigned __int16 MessageId = ot::Coap::Message::GetMessageId(a3);
        ot::Coap::Message::SetMessageId(v8, MessageId);
      }
      unsigned int v9 = ot::Coap::Message::SetTokenFromMessage(v8, a3);
      if (!v9) {
        unsigned int v9 = ot::Coap::CoapBase::SendMessage(a1, v8, a4);
      }
    }
    else
    {
      unsigned int v9 = 3;
    }
  }
  else
  {
    unsigned int v9 = 7;
  }
LABEL_12:
  if (v9 && v8) {
    ot::Message::Free(v8);
  }
  return v9;
}

uint64_t ot::Coap::CoapBase::SendEmptyAck(ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendEmptyAck(this, a2, a3, 68);
}

uint64_t ot::Coap::CoapBase::SendNotFound(ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::Coap::CoapBase::SendHeaderResponse(this, 132, a2, a3);
}

BOOL ot::Coap::Message::IsRequest(ot::Coap::Message *this)
{
  BOOL v3 = 0;
  if (ot::Coap::Message::GetCode(this)) {
    return ot::Coap::Message::GetCode(this) <= 4u;
  }
  return v3;
}

{
  return ot::Coap::Message::IsRequest(this);
}

uint64_t ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Coap::CoapBase *this)
{
  char v23 = this;
  int Now = 0;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v12);
  v11[2]  = this;
  v11[0]  = ot::Coap::MessageQueue::begin(this);
  v11[1]  = v1;
  v10[0]  = ot::Coap::MessageQueue::end(this);
  v10[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v11, v10))
  {
    unsigned int v9 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v11);
    ot::Coap::CoapBase::Metadata::ReadFrom((ot::Coap::CoapBase::Metadata *)&v13, v9);
    if (ot::Time::operator>=(&Now, &v16))
    {
      if ((v20 & 2) == 0 || !v18)
      {
        ot::Coap::CoapBase::FinalizeCoapTransaction(this, v9, (uint64_t)&v13, 0, 0, 0x1Cu);
        goto LABEL_10;
      }
      --v18;
      v17 *= 2;
      int v8 = ot::Time::operator+(&Now, v17);
      int v16 = v8;
      ot::Coap::CoapBase::Metadata::UpdateIn((ot::Coap::CoapBase::Metadata *)&v13, v9);
      if ((v20 & 1) == 0)
      {
        ot::Ip6::MessageInfo::SetPeerAddr(v12, &v14);
        ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v12, v15);
        ot::Ip6::MessageInfo::SetSockAddr(v12, &v13);
        ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v12, v19);
        ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)v12, (v20 & 8) != 0);
        ot::Ip6::MessageInfo::SetMulticastLoop((uint64_t)v12, (v20 & 4) != 0);
        ot::Coap::CoapBase::SendCopy(this, v9, (const ot::Ip6::MessageInfo *)v12);
      }
    }
    void v6[2] = DistantFuture;
    v6[1]  = v16;
    int v7 = ot::Min<ot::Time>(DistantFuture, v16);
    DistantFuture  = v7;
LABEL_10:
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v11, v3);
  }
  v6[0]  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v6);
  if (result) {
    return ot::TimerMilli::FireAt((ot::Coap::CoapBase *)((char *)this + 16), DistantFuture);
  }
  return result;
}

uint64_t ot::Time::GetDistantFuture(ot::Time *this)
{
  ot::Time::Time((ot::Time *)&v2, *(_DWORD *)this + 0x7FFFFFFF);
  return v2;
}

{
  return ot::Time::GetDistantFuture(this);
}

uint64_t ot::Coap::CoapBase::Metadata::UpdateIn(ot::Coap::CoapBase::Metadata *this, ot::Coap::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  return ot::Message::Write<ot::Coap::CoapBase::Metadata>(a2, Length - 72, (char *)this);
}

__n128 ot::Ip6::MessageInfo::SetSockAddr(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

uint64_t ot::Ip6::MessageInfo::SetMulticastLoop(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4ot::Mle::Tlv::SetType(this, 9) = *(unsigned char *)(this + 49) & 0xEF | (16 * (a2 & 1));
  return this;
}

{
  return ot::Ip6::MessageInfo::SetMulticastLoop(this, a2);
}

void ot::Coap::CoapBase::SendCopy(ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  __int16 Length = ot::Message::GetLength(a2);
  __n128 v13 = ot::Coap::Message::Clone(a2, Length - 72);
  if (v13) {
    int v14 = ot::Coap::CoapBase::Send((uint64_t)this, (uint64_t)v13, (uint64_t)a3);
  }
  else {
    int v14 = 3;
  }
  if (v14)
  {
    char v4 = ot::ErrorToString(v14);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Coap", "Failed to send copy: %s", v5, v6, v7, v8, v9, v10, v4);
    if (v13) {
      ot::Message::Free(v13);
    }
  }
}

uint64_t ot::Min<ot::Time>(int a1, int a2)
{
  int v5 = a1;
  int v4 = a2;
  if (ot::Time::operator<(&v5, &v4)) {
    BOOL v3 = &v5;
  }
  else {
    BOOL v3 = &v4;
  }
  return *v3;
}

{
  return ot::Min<ot::Time>(a1, a2);
}

uint64_t ot::Coap::CoapBase::AbortTransaction(ot::Coap::MessageQueue *a1, uint64_t a2, uint64_t a3)
{
  char v18 = a1;
  uint64_t v17 = a2;
  uint64_t v16 = a3;
  unsigned int v15 = 23;
  int v11 = a1;
  v10[0]  = ot::Coap::MessageQueue::begin(a1);
  v10[1]  = v3;
  v9[0]  = ot::Coap::MessageQueue::end(v11);
  v9[1]  = v4;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v10, v9))
  {
    uint64_t v8 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v10);
    ot::Coap::CoapBase::Metadata::ReadFrom((ot::Coap::CoapBase::Metadata *)v12, v8);
    if (v13 == v17 && v14 == v16)
    {
      ot::Coap::CoapBase::FinalizeCoapTransaction(a1, v8, (uint64_t)v12, 0, 0, 0xBu);
      unsigned int v15 = 0;
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v10, v5);
  }
  return v15;
}

uint64_t ot::Coap::CoapBase::Metadata::AppendTo(ot::Coap::CoapBase::Metadata *this, ot::Coap::Message *a2)
{
  return ot::Message::Append<ot::Coap::CoapBase::Metadata>(a2, (char *)this);
}

{
  return ot::Coap::CoapBase::Metadata::AppendTo(this, a2);
}

ot::Message **ot::Coap::MessageQueue::Enqueue(ot::Coap::MessageQueue *this, ot::Coap::Message *a2)
{
  return ot::Coap::MessageQueue::Enqueue(this, a2, 1);
}

{
  return ot::Coap::MessageQueue::Enqueue(this, a2);
}

uint64_t ot::Coap::CoapBase::EvictMessage(ot::Coap::CoapBase *this)
{
  char v8 = (char)this;
  unsigned int v11 = 0;
  Head  = (ot::Coap::Message *)ot::Coap::MessageQueue::GetHead(this);
  if (Head)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Coap", "Evicting message from head of CoAP pending requests queue", v1, v2, v3, v4, v5, v6, v8);
    ot::Coap::CoapBase::DequeueMessage(v9, Head);
  }
  else
  {
    return 23;
  }
  return v11;
}

uint64_t ot::Coap::MessageQueue::GetHead(ot::Coap::MessageQueue *this)
{
  return ot::MessageQueue::GetHead(this);
}

{
  return ot::MessageQueue::GetHead(this);
}

{
  return ot::Coap::MessageQueue::GetHead(this);
}

{
  return ot::Coap::MessageQueue::GetHead(this);
}

uint64_t ot::Coap::MessageQueue::Dequeue(ot::Coap::MessageQueue *this, ot::Coap::Message *a2)
{
  return ot::MessageQueue::Dequeue(this, a2);
}

{
  return ot::Coap::MessageQueue::Dequeue(this, a2);
}

ot::Coap::Message *ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::CoapBase *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, ot::Coap::CoapBase::Metadata *a4)
{
  char v23 = this;
  uint64_t v22 = a2;
  char v21 = a3;
  char v20 = a4;
  uint64_t v19 = 0;
  char v18 = this;
  v17[0]  = ot::Coap::MessageQueue::begin(this);
  v17[1]  = v4;
  v16[0]  = ot::Coap::MessageQueue::end(v18);
  v16[1]  = v5;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v17, v16))
  {
    unsigned int v15 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v17);
    ot::Coap::CoapBase::Metadata::ReadFrom(v20, v15);
    uint64_t v14 = (char *)v20 + 16;
    PeerAddr  = (const void *)ot::Ip6::MessageInfo::GetPeerAddr(v21);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v14, PeerAddr)
      || ot::Ip6::Address::IsMulticast((ot::Coap::CoapBase::Metadata *)((char *)v20 + 16))
      || (Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid((ot::Coap::CoapBase::Metadata *)((char *)v20 + 16)),
          ot::Ip6::InterfaceIdentifier::IsAnycastLocator(Iid)))
    {
      int v13 = *((unsigned __int16 *)v20 + 16);
      if (v13 == (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort(v21))
      {
        unsigned int Type = ot::Coap::Message::GetType(v22);
        if (Type <= 1)
        {
          if (ot::Coap::Message::IsTokenEqual(v22, v15)) {
            return v15;
          }
        }
        else if (Type == 3 || Type == 2)
        {
          int MessageId = (unsigned __int16)ot::Coap::Message::GetMessageId(v22);
          if (MessageId == (unsigned __int16)ot::Coap::Message::GetMessageId(v15)) {
            return v15;
          }
        }
      }
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v17, v8);
  }
  return (ot::Coap::Message *)v19;
}

void ot::Coap::CoapBase::Receive(ot::Coap::CoapBase *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  ot::AsCoapMessage();
  int v13 = v3;
  if (ot::Coap::Message::ParseHeader(v3))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Coap", "Failed to parse CoAP header", v4, v5, v6, v7, v8, v9, v11);
    SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(a3);
    if (!ot::Ip6::Address::IsMulticast(SockAddr) && ot::Coap::Message::IsConfirmable(v13))
    {
      ot::Coap::CoapBase::SendReset(this, v13, a3);
      IgnoreError();
    }
  }
  else if (ot::Coap::Message::IsRequest(v13))
  {
    ot::Coap::CoapBase::ProcessReceivedRequest(this, v13, a3);
  }
  else
  {
    ot::Coap::CoapBase::ProcessReceivedResponse(this, v13, a3);
  }
}

void ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v30 = this;
  BOOL v29 = a2;
  uint64_t v28 = a3;
  uint64_t v27 = 0;
  UriPathOptions  = 0;
  if (!ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::IsSet((void *)this + 7)
    || (UriPathOptions  = ot::Callback<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Coap::Message&,ot::Ip6::MessageInfo const&>((uint64_t)this + 56, (uint64_t)v29, (uint64_t)v28)) == 0)
  {
    MatchedResponseCopy  = ot::Coap::ResponsesQueue::GetMatchedResponseCopy((ot::Coap::CoapBase *)((char *)this + 72), v29, v28, &v27);
    if (MatchedResponseCopy)
    {
      if (MatchedResponseCopy == 3)
      {
        UriPathOptions  = 3;
      }
      else
      {
        UriPathOptions  = ot::Coap::Message::ReadUriPathOptions(v29, (char (*)[33])__s2);
        if (!UriPathOptions)
        {
          if (*((void *)this + 16)
            && ((*((uint64_t (**)(ot::Coap::CoapBase *, char *, ot::Coap::Message *, ot::Ip6::MessageInfo *))this
                 + 16))(this, __s2, v29, v28) & 1) != 0)
          {
            UriPathOptions  = 0;
          }
          else
          {
            v25[1]  = (uint64_t)this + 48;
            v25[0]  = ot::LinkedList<ot::Coap::Resource>::begin((uint64_t)this + 48);
            uint64_t v24 = ot::LinkedList<ot::Coap::Resource>::end();
            while (ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator!=(v25, &v24))
            {
              char v23 = (ot::Coap::Resource *)ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator*((uint64_t)v25);
              if (!strcmp(*(const char **)v23, __s2))
              {
                ot::Coap::Resource::HandleRequest((uint64_t)v23, (uint64_t)v29, (uint64_t)v28);
                UriPathOptions  = 0;
                goto LABEL_20;
              }
              ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator++(v25);
            }
            if (ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::IsSet((void *)this + 14))
            {
              uint64_t v22 = v29;
              char v21 = v28;
              ot::Callback<void (*)(void *,otMessage *,otMessageInfo const*),(ot::CallbackContextPosition)0>::Invoke<ot::Coap::Message *,ot::Ip6::MessageInfo const*>((uint64_t)this + 112, &v22, &v21);
              UriPathOptions  = 0;
            }
            else
            {
              UriPathOptions  = 23;
            }
          }
        }
      }
    }
    else
    {
      ot::Coap::Message::Finish(v27);
      UriPathOptions  = ot::Coap::CoapBase::Send((uint64_t)this, (uint64_t)v27, (uint64_t)v28);
    }
  }
LABEL_20:
  if (UriPathOptions)
  {
    char v3 = ot::ErrorToString(UriPathOptions);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Coap", "Failed to process request: %s", v4, v5, v6, v7, v8, v9, v3);
    ot::Message::GetLength(v29);
    PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v28);
    ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v32);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v32);
    ot::Ip6::MessageInfo::GetPeerPort(v28);
    SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v28);
    ot::Ip6::Address::ToString(SockAddr, (ot::StringWriter *)v31);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
    ot::Ip6::MessageInfo::GetSockPort(v28);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Coap", "Failed message info: uri \"%s\", length %u, source %s/%u, destination %s/%u", v12, v13, v14, v15, v16, v17, (char)__s2);
    if (UriPathOptions == 23)
    {
      char v18 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v28);
      if (!ot::Ip6::Address::IsMulticast(v18))
      {
        ot::Coap::CoapBase::SendNotFound(this, v29, v28);
        IgnoreError();
      }
    }
    if (v27) {
      ot::Message::Free(v27);
    }
  }
}

void ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::CoapBase *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v31 = this;
  unsigned __int8 v30 = a2;
  BOOL v29 = a3;
  RelatedRequest  = ot::Coap::CoapBase::FindRelatedRequest(this, a2, a3, (ot::Coap::CoapBase::Metadata *)v24);
  if (RelatedRequest)
  {
    unsigned __int8 Type = ot::Coap::Message::GetType(v30);
    if (Type)
    {
      uint64_t v11 = Type;
      char v10 = 1;
    }
    else
    {
      uint64_t v11 = Type;
      char v10 = 0;
    }
    if ((v10 & 1) == 0)
    {
      switch(v11)
      {
        case 0:
          ot::Coap::CoapBase::SendAck(this, v30, v29);
          IgnoreError();
          goto LABEL_21;
        case 1:
LABEL_21:
          if (v26 && ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)&v25)) {
            v26(v27, v30, v29, 0);
          }
          else {
            ot::Coap::CoapBase::FinalizeCoapTransaction(this, RelatedRequest, (uint64_t)v24, (uint64_t)v30, (uint64_t)v29, 0);
          }
          break;
        case 2:
          if (ot::Coap::Message::IsEmpty(v30))
          {
            if ((v28 & 2) != 0)
            {
              char v28 = v28 & 0xFE | 1;
              ot::Coap::CoapBase::Metadata::UpdateIn((ot::Coap::CoapBase::Metadata *)v24, RelatedRequest);
            }
            if (!v26) {
              ot::Coap::CoapBase::DequeueMessage(this, RelatedRequest);
            }
          }
          else if (ot::Coap::Message::IsResponse(v30) && ot::Coap::Message::IsTokenEqual(v30, RelatedRequest))
          {
            ot::Coap::CoapBase::FinalizeCoapTransaction(this, RelatedRequest, (uint64_t)v24, (uint64_t)v30, (uint64_t)v29, 0);
          }
          break;
        case 3:
          if (ot::Coap::Message::IsEmpty(v30)) {
            ot::Coap::CoapBase::FinalizeCoapTransaction(this, RelatedRequest, (uint64_t)v24, 0, 0, 0xBu);
          }
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  if (!RelatedRequest)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Coap", "Failed to process response: no matching request", v3, v4, v5, v6, v7, v8, v20);
    char Length = ot::Message::GetLength(v30);
    PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v29);
    ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v33);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
    ot::Ip6::MessageInfo::GetPeerPort(v29);
    SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v29);
    ot::Ip6::Address::ToString(SockAddr, (ot::StringWriter *)v32);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v32);
    ot::Ip6::MessageInfo::GetSockPort(v29);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Coap", "Failed message info: length %u, source %s/%u, destination %s/%u", v14, v15, v16, v17, v18, v19, Length);
    if (ot::Coap::Message::IsConfirmable(v30) || ot::Coap::Message::IsNonConfirmable(v30))
    {
      ot::Coap::CoapBase::SendReset(this, v30, v29);
      IgnoreError();
    }
  }
}

BOOL ot::Coap::Message::IsEmpty(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetCode(this) == 0;
}

{
  return ot::Coap::Message::IsEmpty(this);
}

BOOL ot::Coap::Message::IsResponse(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetCode(this) >= 0x40u;
}

{
  return ot::Coap::Message::IsResponse(this);
}

uint64_t ot::Ip6::MessageInfo::GetSockPort(ot::Ip6::MessageInfo *this)
{
  return *((unsigned __int16 *)this + 16);
}

{
  return ot::Ip6::MessageInfo::GetSockPort(this);
}

BOOL ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *)>::IsSet(a1);
}

uint64_t ot::Callback<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Coap::Message&,ot::Ip6::MessageInfo const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))a1)(a2, a3, *(void *)(a1 + 8));
}

{
  return ot::Callback<otError (*)(ot::Coap::Message const&,ot::Ip6::MessageInfo const&,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Coap::Message&,ot::Ip6::MessageInfo const&>(a1, a2, a3);
}

uint64_t ot::Coap::ResponsesQueue::GetMatchedResponseCopy(ot::Coap::ResponsesQueue *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, ot::Coap::Message **a4)
{
  unsigned int v7 = 0;
  MatchedResponse  = ot::Coap::ResponsesQueue::FindMatchedResponse(this, a2, a3);
  if (MatchedResponse)
  {
    __int16 Length = ot::Message::GetLength(MatchedResponse);
    *a4  = ot::Coap::Message::Clone(MatchedResponse, Length - 64);
    if (!*a4) {
      return 3;
    }
  }
  else
  {
    return 23;
  }
  return v7;
}

uint64_t ot::LinkedList<ot::Coap::Resource>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Coap::Resource>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::Coap::Resource>::begin(a1);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::Coap::Resource>::end();
}

BOOL ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator*(a1);
}

uint64_t ot::Coap::Resource::HandleRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a2, a3);
}

uint64_t ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Coap::Resource>::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::operator++(a1);
}

BOOL ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(void *,otMessage *,otMessageInfo const*)>::IsSet(a1);
}

uint64_t ot::Callback<void (*)(void *,otMessage *,otMessageInfo const*),(ot::CallbackContextPosition)0>::Invoke<ot::Coap::Message *,ot::Ip6::MessageInfo const*>(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*(void *)(a1 + 8), *a2, *a3);
}

{
  return ot::Callback<void (*)(void *,otMessage *,otMessageInfo const*),(ot::CallbackContextPosition)0>::Invoke<ot::Coap::Message *,ot::Ip6::MessageInfo const*>(a1, a2, a3);
}

uint64_t ot::Message::Read<ot::Coap::CoapBase::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x48u);
}

{
  return ot::Message::Read<ot::Coap::CoapBase::Metadata>(a1, a2, a3);
}

uint64_t ot::Message::Write<ot::Coap::CoapBase::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0x48u);
}

{
  return ot::Message::Write<ot::Coap::CoapBase::Metadata>(a1, a2, a3);
}

uint64_t ot::Coap::ResponsesQueue::HandleTimer(ot::Coap::ResponsesQueue *this, ot::Timer *a2)
{
  Context  = (ot::Coap::ResponsesQueue *)ot::TimerMilliContext::GetContext(this);
  return ot::Coap::ResponsesQueue::HandleTimer(Context);
}

ot::Coap::Message *ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::ResponsesQueue *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = 0;
  uint64_t v13 = this;
  uint64_t v12 = (ot::Message *)ot::Coap::MessageQueue::begin(this);
  uint64_t v11 = ot::Coap::MessageQueue::end(v13);
  while (ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v12, &v11))
  {
    char v10 = (ot::Coap::Message *)ot::Coap::Message::ConstIterator::operator*((uint64_t)&v12);
    int MessageId = (unsigned __int16)ot::Coap::Message::GetMessageId(v10);
    if (MessageId == (unsigned __int16)ot::Coap::Message::GetMessageId(v16))
    {
      ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)v8);
      ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom((ot::Coap::ResponsesQueue::ResponseMetadata *)v8, v10);
      PeerPort  = (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort((ot::Ip6::MessageInfo *)v9);
      if (PeerPort == (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort(v15))
      {
        PeerAddr  = (const void *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v9);
        uint64_t v3 = (const void *)ot::Ip6::MessageInfo::GetPeerAddr(v15);
        if (ot::Equatable<ot::Ip6::Address>::operator==(PeerAddr, v3)) {
          return v10;
        }
      }
    }
    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v12);
  }
  return (ot::Coap::Message *)v14;
}

BOOL ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(a1, a2);
}

uint64_t ot::Coap::Message::ConstIterator::operator*(uint64_t a1)
{
  return ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*(a1);
}

{
  return ot::Coap::Message::ConstIterator::operator*(a1);
}

ot::Coap::ResponsesQueue::ResponseMetadata *ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata(ot::Coap::ResponsesQueue::ResponseMetadata *this)
{
  return this;
}

{
  ot::Ip6::MessageInfo::MessageInfo((ot::Coap::ResponsesQueue::ResponseMetadata *)((char *)this + 8));
  return this;
}

void ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::ResponsesQueue::ResponseMetadata *this, const ot::Coap::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x40uLL) {
    __assert_rtn("ReadFrom", "coap.cpp", 1669, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Coap::ResponsesQueue::ResponseMetadata>(a2, Length - 64, (char *)this);
  IgnoreError();
}

ot::Message *ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(ot::Message **a1)
{
  return ot::Message::ConstIterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(a1);
}

uint64_t ot::Coap::TxParameters::CalculateExchangeLifetime(ot::Coap::TxParameters *this)
{
  return ot::Coap::TxParameters::CalculateSpan(this, *((unsigned char *)this + 6)) + 200000 + *(_DWORD *)this;
}

void ot::Coap::ResponsesQueue::UpdateQueue(ot::Coap::ResponsesQueue *this)
{
  uint64_t v12 = this;
  unsigned __int16 v11 = 0;
  char v10 = 0;
  ot::Time::Time((ot::Time *)&v9, 0);
  void v8[2] = this;
  v8[0]  = ot::Coap::MessageQueue::begin(this);
  v8[1]  = v1;
  v7[0]  = ot::Coap::MessageQueue::end(this);
  v7[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v8, v7))
  {
    uint64_t v6 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v8);
    ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)v5);
    ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom((ot::Coap::ResponsesQueue::ResponseMetadata *)v5, v6);
    if (!v10 || ot::Time::operator<(v5, &v9))
    {
      char v10 = v6;
      int v9 = v5[0];
    }
    ++v11;
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v8, v3);
  }
  if (v11 >= 0xAu) {
    ot::Coap::ResponsesQueue::DequeueResponse(this, v10);
  }
}

ot::Message *ot::Coap::Message::Clone(ot::Coap::Message *this)
{
  unsigned __int16 Length = ot::Message::GetLength(this);
  return ot::Coap::Message::Clone(this, Length);
}

{
  return ot::Coap::Message::Clone(this);
}

uint64_t ot::Coap::ResponsesQueue::ResponseMetadata::AppendTo(ot::Coap::ResponsesQueue::ResponseMetadata *this, ot::Coap::Message *a2)
{
  return ot::Message::Append<ot::Coap::ResponsesQueue::ResponseMetadata>(a2, (char *)this);
}

{
  return ot::Coap::ResponsesQueue::ResponseMetadata::AppendTo(this, a2);
}

void ot::Coap::ResponsesQueue::DequeueResponse(ot::Coap::ResponsesQueue *this, ot::Coap::Message *a2)
{
}

void ot::Coap::MessageQueue::DequeueAndFree(ot::Coap::MessageQueue *this, ot::Coap::Message *a2)
{
}

{
  ot::Coap::MessageQueue::DequeueAndFree(this, a2);
}

uint64_t ot::Coap::ResponsesQueue::HandleTimer(ot::Coap::ResponsesQueue *this)
{
  uint64_t v14 = this;
  int Now = 0;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  v11[2]  = this;
  v11[0]  = ot::Coap::MessageQueue::begin(this);
  v11[1]  = v1;
  v10[0]  = ot::Coap::MessageQueue::end(this);
  v10[1]  = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v11, v10))
  {
    int v9 = (ot::Coap::Message *)ot::Coap::Message::Iterator::operator*((uint64_t)v11);
    ot::Coap::ResponsesQueue::ResponseMetadata::ResponseMetadata((ot::Coap::ResponsesQueue::ResponseMetadata *)v8);
    ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom((ot::Coap::ResponsesQueue::ResponseMetadata *)v8, v9);
    if (ot::Time::operator>=(&Now, v8))
    {
      ot::Coap::ResponsesQueue::DequeueResponse(this, v9);
    }
    else
    {
      void v6[2] = DistantFuture;
      v6[1]  = v8[0];
      int v7 = ot::Min<ot::Time>(DistantFuture, v8[0]);
      DistantFuture  = v7;
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v11, v3);
  }
  v6[0]  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v6);
  if (result) {
    return ot::TimerMilli::FireAt((ot::Coap::ResponsesQueue *)((char *)this + 8), DistantFuture);
  }
  return result;
}

uint64_t ot::Message::Read<ot::Coap::ResponsesQueue::ResponseMetadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x40u);
}

{
  return ot::Message::Read<ot::Coap::ResponsesQueue::ResponseMetadata>(a1, a2, a3);
}

BOOL ot::Coap::TxParameters::IsValid(ot::Coap::TxParameters *this)
{
  BOOL v7 = 0;
  if (*((unsigned char *)this + 5)
    && *((unsigned __int8 *)this + 4) >= (int)*((unsigned __int8 *)this + 5)
    && *(_DWORD *)this >= 0x3E8u
    && *((unsigned __int8 *)this + 6) <= 0x14u)
  {
    unsigned int v1 = ot::Coap::Multiply((ot::Coap *)*(unsigned int *)this, (1 << (*((unsigned char *)this + 6) + 1)) - 1);
    unsigned int v6 = ot::Coap::Multiply((ot::Coap *)v1, *((unsigned __int8 *)this + 4))
       / *((unsigned __int8 *)this + 5);
    BOOL v4 = 0;
    if (v6) {
      return *(_DWORD *)this != -200000 && v6 + *(_DWORD *)this + 200000 >= v6;
    }
    return v4;
  }
  return v7;
}

uint64_t ot::Coap::Multiply(ot::Coap *this, int a2)
{
  unsigned int v4 = 0;
  if (this)
  {
    if ((int)this * a2 / this == a2) {
      return (this * a2);
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t ot::Coap::TxParameters::CalculateSpan(ot::Coap::TxParameters *this, char a2)
{
  return *(_DWORD *)this
       * ((1 << a2) - 1)
       / *((unsigned __int8 *)this + 5)
       * *((unsigned __int8 *)this + 4);
}

void *ot::Coap::Resource::Resource(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = a2;
  result[1]  = a3;
  result[2]  = a4;
  result[3]  = 0;
  return result;
}

void *ot::Coap::Resource::Resource(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void *ot::Coap::Resource::Resource(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = ot::PathForUri(a2);
  ot::Coap::Resource::Resource(a1, (uint64_t)v4, a3, a4);
  return a1;
}

{
  char *v4;

  unsigned int v4 = ot::PathForUri(a2);
  ot::Coap::Resource::Resource(a1, (uint64_t)v4, a3, a4);
  return a1;
}

ot::Coap::Coap *ot::Coap::Coap::Coap(ot::Coap::Coap *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Coap::Coap::Coap(this, a2);
  return this;
}

uint64_t ot::Coap::Coap::Send(ot::Coap::Coap *this, ot::Coap::CoapBase *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  return ot::Coap::Coap::Send(this, a2, a3);
}

uint64_t ot::Coap::Coap::Start(uint64_t a1, __int16 a2, char a3)
{
  unsigned int v6 = 0;
  char v5 = 0;
  if (!ot::Ip6::Udp::SocketHandle::IsBound((ot::Ip6::Udp::SocketHandle *)(a1 + 144)))
  {
    unsigned int v6 = ot::Ip6::Udp::Socket::Open((ot::InstanceLocator *)(a1 + 144), (uint64_t)ot::Coap::Coap::HandleUdpReceive, a1);
    if (!v6)
    {
      char v5 = 1;
      unsigned int v6 = ot::Ip6::Udp::Socket::Bind((ot::InstanceLocator *)(a1 + 144), a2, a3);
    }
  }
  if (v6 && (v5 & 1) != 0)
  {
    ot::Ip6::Udp::Socket::Close((ot::Ip6::Udp::Socket *)(a1 + 144));
    IgnoreError();
  }
  return v6;
}

BOOL ot::Ip6::Udp::SocketHandle::IsBound(ot::Ip6::Udp::SocketHandle *this)
{
  return *((_WORD *)this + 8) != 0;
}

{
  return ot::Ip6::Udp::SocketHandle::IsBound(this);
}

void ot::Coap::Coap::HandleUdpReceive(ot::Coap::CoapBase *a1, uint64_t a2, uint64_t a3)
{
  ot::AsCoapMessage();
  char v5 = v3;
  unsigned int v4 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  ot::Coap::CoapBase::Receive(a1, v5, v4);
}

uint64_t ot::Coap::Coap::Stop(ot::Coap::Coap *this)
{
  unsigned int v3 = 0;
  if (ot::Ip6::Udp::SocketHandle::IsBound((ot::Coap::Coap *)((char *)this + 144)))
  {
    unsigned int v3 = ot::Ip6::Udp::Socket::Close((ot::Coap::Coap *)((char *)this + 144));
    if (!v3) {
      ot::Coap::CoapBase::ClearRequestsAndResponses(this);
    }
  }
  return v3;
}

uint64_t ot::Coap::Coap::Send(ot::Coap::Coap *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  if (ot::Ip6::Udp::SocketHandle::IsBound((ot::Coap::Coap *)((char *)this + 144))) {
    return ot::Ip6::Udp::Socket::SendTo((ot::Coap::Coap *)((char *)this + 144), a2, a3);
  }
  else {
    return 13;
  }
}

ot::MessageQueue *ot::MessageQueue::MessageQueue(ot::MessageQueue *this)
{
  return this;
}

void *ot::MessageQueue::SetTail(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

ot::Coap::Message::Iterator *ot::Coap::Message::Iterator::Iterator(ot::Coap::Message::Iterator *this)
{
  return this;
}

{
  ot::Message::Iterator::Iterator(this);
  return this;
}

ot::Message::Iterator *ot::Message::Iterator::Iterator(ot::Message::Iterator *this)
{
  ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator(this);
  uint64_t result = this;
  *((void *)this + 1)  = 0;
  return result;
}

uint64_t ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*(a1);
}

uint64_t ot::Message::Append<ot::Coap::CoapBase::Metadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x48u);
}

{
  return ot::Message::Append<ot::Coap::CoapBase::Metadata>(a1, a2);
}

ot::Message **ot::Coap::MessageQueue::Enqueue(ot::MessageQueue *a1, ot::Message *a2, char a3)
{
  return ot::MessageQueue::Enqueue(a1, a2, a3);
}

{
  return ot::Coap::MessageQueue::Enqueue(a1, a2, a3);
}

ot::Coap::Message::ConstIterator *ot::Coap::Message::ConstIterator::ConstIterator(ot::Coap::Message::ConstIterator *this)
{
  return this;
}

{
  ot::LinkedList<ot::Coap::Resource>::LinkedList(this);
  return this;
}

uint64_t ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*(a1);
}

uint64_t ot::Message::Append<ot::Coap::ResponsesQueue::ResponseMetadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x40u);
}

{
  return ot::Message::Append<ot::Coap::ResponsesQueue::ResponseMetadata>(a1, a2);
}

BOOL ot::LinkedList<ot::Coap::Resource>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  v3[0]  = 0;
  return ot::LinkedList<ot::Coap::Resource>::Find(a1, a2, v3) == 0;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Contains(a1, a2);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Coap::Resource>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Push(a1, a2);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Find(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Coap::Resource>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

{
  return *(void *)(a1 + 24);
}

{
  return ot::LinkedListEntry<ot::Coap::Resource>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Coap::Resource>::GetNext(a1);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  ot::AsConst<ot::LinkedList<ot::Coap::Resource>>();
  return ot::LinkedList<ot::Coap::Resource>::Find(v3, a2, a3);
}

{
  return ot::LinkedList<ot::Coap::Resource>::Find(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Coap::Resource>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(Next);
    ot::LinkedListEntry<ot::Coap::Resource>::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Coap::Resource>::PopAfter(a1, a2);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Pop(a1);
}

uint64_t ot::LinkedList<ot::Coap::Resource>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Coap::Resource>::GetHead(a1);
}

void *ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator(a1, a2);
  return a1;
}

void *ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t ot::LinkedList<ot::Coap::Resource>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Coap::Resource>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return ot::LinkedList<ot::Coap::Resource>::Iterator::Advance(a1);
}

ot::Message *ot::Message::ConstIterator::Advance(ot::Message **this)
{
  uint64_t result = (ot::Message *)ot::Message::GetNext(*this);
  *this  = result;
  return result;
}

{
  return ot::Message::ConstIterator::Advance(this);
}

void ot::Coap::Message::Init(ot::Coap::Message *this)
{
  ot::Coap::Message::GetHelpData(this);
  ot::Clearable<ot::Coap::Message::HelpData>::Clear(v1);
  ot::Coap::Message::SetVersion(this, 1);
  ot::Message::SetOffset(this, 0);
  ot::Coap::Message::GetHelpData(this);
  *(_WORD *)(v2 + 16)  = 4;
  ot::Coap::Message::GetHelpData(this);
  ot::Message::SetLength(this, *(_WORD *)(v3 + 16));
  IgnoreError();
}

uint64_t ot::Clearable<ot::Coap::Message::HelpData>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(_DWORD *)(result + 16)  = 0;
  return result;
}

{
  return ot::Clearable<ot::Coap::Message::HelpData>::Clear(result);
}

void ot::Coap::Message::SetVersion(ot::Coap::Message *this, char a2)
{
  ot::Coap::Message::GetHelpData(this);
  *v2 &= 0x3Fu;
  ot::Coap::Message::GetHelpData(this);
  *v3 |= a2 << 6;
}

{
  ot::Coap::Message::SetVersion(this, a2);
}

void ot::Coap::Message::Init(ot::Coap::Message *a1, char a2, char a3)
{
}

void ot::Coap::Message::SetType(ot::Coap::Message *a1, char a2)
{
  ot::Coap::Message::GetHelpData(a1);
  *v2 &= 0xCFu;
  ot::Coap::Message::GetHelpData(a1);
  *v3 |= 16 * a2;
}

{
  ot::Coap::Message::SetType(a1, a2);
}

uint64_t ot::Coap::Message::Init(ot::Coap::Message *a1, char a2, char a3, unsigned __int8 a4)
{
  ot::Coap::Message::Init(a1, a2, a3);
  RandomTokeunsigned __int8 n = ot::Coap::Message::GenerateRandomToken(a1, 2u);
  if (!RandomToken)
  {
    unsigned int v4 = ot::PathForUri(a4);
    return ot::Coap::Message::AppendUriPathOptions(a1, (ot *)v4);
  }
  return RandomToken;
}

uint64_t ot::Coap::Message::GenerateRandomToken(ot::Coap::Message *this, unsigned __int8 a2)
{
  if (a2 > 8uLL) {
    __assert_rtn("GenerateRandomToken", "coap_message.cpp", 376, "aTokenLength <= sizeof(token)");
  }
  ot::Random::Crypto::FillBuffer((ot::Random::Crypto *)v5, (unsigned __int8 *)a2);
  IgnoreError();
  return ot::Coap::Message::SetToken(this, v5, a2);
}

uint64_t ot::Coap::Message::AppendUriPathOptions(ot::Coap::Message *this, ot *a2)
{
  unsigned int v6 = (char *)a2;
  for (uint64_t i = ot::StringFind(a2, (const char *)0x2F); ; uint64_t i = ot::StringFind((ot *)((char *)v5 + 1), (const char *)0x2F))
  {
    unsigned int v5 = i;
    if (!i) {
      break;
    }
    unsigned int appended = ot::Coap::Message::AppendOption(this, 0xBu, (unsigned __int16)i - (unsigned __int16)v6, v6);
    if (appended) {
      return appended;
    }
    unsigned int v6 = (char *)v5 + 1;
  }
  return ot::Coap::Message::AppendStringOption(this, 0xBu, v6);
}

uint64_t ot::Coap::Message::InitAsPost(ot::Coap::Message *a1, ot::Ip6::Address *a2, unsigned __int8 a3)
{
  BOOL IsMulticast = ot::Ip6::Address::IsMulticast(a2);
  return ot::Coap::Message::Init(a1, IsMulticast, 2, a3);
}

BOOL ot::Coap::Message::IsConfirmablePostRequest(ot::Coap::Message *this)
{
  BOOL v3 = 0;
  if (ot::Coap::Message::IsConfirmable(this)) {
    return ot::Coap::Message::IsPostRequest(this);
  }
  return v3;
}

BOOL ot::Coap::Message::IsNonConfirmablePostRequest(ot::Coap::Message *this)
{
  BOOL v3 = 0;
  if (ot::Coap::Message::IsNonConfirmable(this)) {
    return ot::Coap::Message::IsPostRequest(this);
  }
  return v3;
}

uint64_t ot::Coap::Message::Finish(ot::Coap::Message *this)
{
  ot::Coap::Message::GetHelpData(this);
  if (*(unsigned char *)(v1 + 18))
  {
    ot::Coap::Message::GetHelpData(this);
    int v8 = *(unsigned __int16 *)(v2 + 16);
    if (v8 == (unsigned __int16)ot::Message::GetLength(this))
    {
      __int16 Length = ot::Message::GetLength(this);
      ot::Message::SetLength(this, Length - 1);
      IgnoreError();
    }
  }
  ot::Coap::Message::GetHelpData(this);
  BOOL v7 = v4;
  OptionStart  = ot::Coap::Message::GetOptionStart(this);
  return ot::Message::WriteBytes(this, 0, v7, OptionStart);
}

uint64_t ot::Coap::Message::WriteExtendedOptionField(ot::Coap::Message *this, unsigned __int16 a2, unsigned __int8 **a3)
{
  if (a2 >= 0xDu)
  {
    if (a2 >= 0x10Du)
    {
      unsigned __int8 v4 = 14;
      ot::Encoding::BigEndian::WriteUint16((unsigned __int16)(a2 - 269), *a3, (unsigned __int8 *)a3);
      *a3 += 2;
    }
    else
    {
      unsigned __int8 v4 = 13;
      *(*a3)++  = a2 - 13;
    }
  }
  else
  {
    return a2;
  }
  return v4;
}

uint64_t ot::Encoding::BigEndian::WriteUint16(uint64_t this, unsigned char *a2, unsigned __int8 *a3)
{
  *a2  = BYTE1(this);
  a2[1]  = this;
  return this;
}

{
  return ot::Encoding::BigEndian::WriteUint16(this, a2, a3);
}

uint64_t ot::Coap::Message::AppendOption(ot::Coap::Message *this, unsigned __int16 a2, unsigned __int16 a3, char *a4)
{
  uint64_t v24 = this;
  unsigned __int16 v23 = a2;
  unsigned __int16 v22 = a3;
  char v21 = a4;
  unsigned int appended = 0;
  unsigned __int16 v19 = 0;
  unsigned __int16 v16 = 0;
  uint64_t v15 = 0;
  int v13 = a2;
  ot::Coap::Message::GetHelpData(this);
  if (v13 >= *(unsigned __int16 *)(v4 + 12))
  {
    ot::Coap::Message::GetHelpData(this);
    unsigned __int16 v19 = v23 - *(_WORD *)(v5 + 12);
    uint64_t v15 = (unsigned __int8 *)&v18;
    char v17 = 16 * ot::Coap::Message::WriteExtendedOptionField(this, v19, &v15);
    char v6 = ot::Coap::Message::WriteExtendedOptionField(this, v22, &v15);
    v17 |= v6;
    unsigned __int16 v16 = (_WORD)v15 - (unsigned __int16)&v17;
    unsigned __int16 Length = ot::Message::GetLength(this);
    if (v16 + Length + v22 < 0x200)
    {
      unsigned int appended = ot::Message::AppendBytes(this, &v17, v16);
      if (!appended)
      {
        unsigned int appended = ot::Message::AppendBytes(this, v21, v22);
        if (!appended)
        {
          unsigned __int16 v11 = v23;
          ot::Coap::Message::GetHelpData(this);
          *(_WORD *)(v8 + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v11;
          __int16 v12 = ot::Message::GetLength(this);
          ot::Coap::Message::GetHelpData(this);
          *(_WORD *)(v9 + 16)  = v12;
        }
      }
    }
    else
    {
      return 3;
    }
  }
  else
  {
    return 7;
  }
  return appended;
}

uint64_t ot::Coap::Message::AppendUintOption(ot::Coap::Message *this, unsigned __int16 a2, unsigned __int8 *a3)
{
  unsigned __int16 v11 = this;
  unsigned __int16 v10 = a2;
  int v9 = (int)a3;
  BOOL v7 = v8;
  unsigned __int16 v6 = 4;
  ot::Encoding::BigEndian::WriteUint32(a3, v8, a3);
  while (1)
  {
    BOOL v4 = 0;
    if (v6) {
      BOOL v4 = *v7 == 0;
    }
    if (!v4) {
      break;
    }
    ++v7;
    --v6;
  }
  return ot::Coap::Message::AppendOption(this, v10, v6, v7);
}

uint64_t ot::Encoding::BigEndian::WriteUint32(uint64_t this, unsigned char *a2, unsigned __int8 *a3)
{
  *a2  = BYTE3(this);
  a2[1]  = BYTE2(this);
  a2[2]  = BYTE1(this);
  a2[3]  = this;
  return this;
}

{
  return ot::Encoding::BigEndian::WriteUint32(this, a2, a3);
}

uint64_t ot::Coap::Message::AppendStringOption(ot::Coap::Message *this, unsigned __int16 a2, char *a3)
{
  unsigned __int16 v3 = strlen(a3);
  return ot::Coap::Message::AppendOption(this, a2, v3, a3);
}

uint64_t ot::Coap::Message::ReadUriPathOptions(ot::Coap::Message *this, char (*a2)[33])
{
  unsigned __int16 v11 = this;
  unsigned __int16 v10 = (char *)a2;
  int v9 = (char *)a2;
  unsigned int v8 = 0;
  unsigned int v8 = ot::Coap::Option::Iterator::Init((ot::Coap::Option::Iterator *)v7, this, 0xBu);
  if (!v8)
  {
    while (!ot::Coap::Option::Iterator::IsDone((ot::Coap::Option::Iterator *)v7))
    {
      Optiounsigned __int8 n = (ot::Coap::Option *)ot::Coap::Option::Iterator::GetOption((ot::Coap::Option::Iterator *)v7);
      unsigned __int16 Length = ot::Coap::Option::GetLength(Option);
      if (v9 != v10)
      {
        unsigned __int16 v3 = v9++;
        *unsigned __int16 v3 = 47;
      }
      uint64_t v5 = &v9[Length];
      if ((unint64_t)v5 >= ot::GetArrayEnd<char,(unsigned short)33>((uint64_t)v10))
      {
        unsigned int v8 = 6;
        break;
      }
      ot::Coap::Option::Iterator::ReadOptionValue((ot::Coap::Option::Iterator *)v7, v9);
      IgnoreError();
      v9 += Length;
      unsigned int v8 = ot::Coap::Option::Iterator::Advance((ot::Coap::Option::Iterator *)v7, 0xBu);
      if (v8) {
        break;
      }
    }
  }
  *int v9 = 0;
  return v8;
}

uint64_t ot::Coap::Option::GetLength(ot::Coap::Option *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return ot::Coap::Option::GetLength(this);
}

uint64_t ot::GetArrayEnd<char,(unsigned short)33>(uint64_t a1)
{
  return a1 + 33;
}

{
  return ot::GetArrayEnd<char,(unsigned short)33>(a1);
}

uint64_t ot::Coap::Option::Iterator::ReadOptionValue(ot::Coap::Option::Iterator *this, char *a2)
{
  unsigned int v5 = 0;
  if (ot::Coap::Option::Iterator::IsDone(this))
  {
    return 23;
  }
  else
  {
    Message  = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this);
    ot::Message::ReadBytes(Message, *((_WORD *)this + 6) - *((_WORD *)this + 5), a2, *((_WORD *)this + 5));
  }
  return v5;
}

uint64_t ot::Coap::Message::AppendBlockOption(ot::Coap::Message *a1, char a2, unsigned int a3, char a4, int a5)
{
  if (a2 == 1 || a2 == 2)
  {
    if (a5 <= 6)
    {
      if (a3 < 0xFFFF)
      {
        if (a2 == 1) {
          unsigned __int16 v5 = 27;
        }
        else {
          unsigned __int16 v5 = 23;
        }
        return ot::Coap::Message::AppendUintOption(a1, v5, (unsigned __int8 *)(a5 | (8 * (a4 & 1)) | (16 * a3)));
      }
      else
      {
        return 7;
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 7;
  }
}

uint64_t ot::Coap::Message::SetPayloadMarker(ot::Coap::Message *this)
{
  int v9 = this;
  unsigned int v8 = 0;
  char v7 = -1;
  if ((unsigned __int16)ot::Message::GetLength(this) < 0x200u)
  {
    unsigned int v8 = ot::Message::Append<unsigned char>(this, &v7);
    if (!v8)
    {
      ot::Coap::Message::GetHelpData(this);
      *(unsigned char *)(v1 + 1ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 1;
      __int16 Length = ot::Message::GetLength(this);
      ot::Coap::Message::GetHelpData(this);
      *(_WORD *)(v2 + 16)  = Length;
      ot::Coap::Message::GetHelpData(this);
      ot::Message::SetOffset(this, *(_WORD *)(v3 + 16));
    }
  }
  else
  {
    return 3;
  }
  return v8;
}

uint64_t ot::Message::Append<unsigned char>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 1u);
}

{
  return ot::Message::Append<unsigned char>(a1, a2);
}

uint64_t ot::Coap::Message::ParseHeader(ot::Coap::Message *this)
{
  __int16 v18 = this;
  unsigned int v17 = 0;
  Reserved  = ot::Message::GetReserved(this);
  ot::Coap::Message::GetHelpData(this);
  if (v1 - ot::Buffer::GetFirstData(this) + 20 > (unint64_t)Reserved) {
    __assert_rtn("ParseHeader", "coap_message.cpp", 338, "GetReserved() >= sizeof(HelpData) + static_cast<size_t>((reinterpret_cast<uint8_t *>(&GetHelpData()) - GetFirstData()))");
  }
  ot::Coap::Message::GetHelpData(this);
  ot::Clearable<ot::Coap::Message::HelpData>::Clear(v2);
  __int16 Offset = ot::Message::GetOffset(this);
  ot::Coap::Message::GetHelpData(this);
  *(_WORD *)(v3 + 1++*(_WORD *)(this + 4) = Offset;
  ot::Coap::Message::GetHelpData(this);
  unsigned __int16 v13 = *(_WORD *)(v4 + 14);
  ot::Coap::Message::GetHelpData(this);
  ot::Message::Read<ot::Coap::Message::Header>(this, v13, v5);
  IgnoreError();
  if (ot::Coap::Message::GetTokenLength(this) <= 8u)
  {
    unsigned int v17 = ot::Coap::Option::Iterator::Init((ot::Coap::Option::Iterator *)v16, this);
    if (!v17)
    {
      while (!ot::Coap::Option::Iterator::IsDone((ot::Coap::Option::Iterator *)v16))
      {
        unsigned int v17 = ot::Coap::Option::Iterator::Advance((ot::Coap::Option::Iterator *)v16);
        if (v17) {
          return v17;
        }
      }
      PayloadMessage__int16 Offset = ot::Coap::Option::Iterator::GetPayloadMessageOffset((ot::Coap::Option::Iterator *)v16);
      ot::Coap::Message::GetHelpData(this);
      __int16 v11 = PayloadMessageOffset - *(_WORD *)(v6 + 14);
      ot::Coap::Message::GetHelpData(this);
      *(_WORD *)(v7 + 16)  = v11;
      ot::Coap::Message::GetHelpData(this);
      ot::Message::MoveOffset(this, *(unsigned __int16 *)(v8 + 16));
    }
  }
  else
  {
    return 6;
  }
  return v17;
}

uint64_t ot::Message::GetReserved(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 44);
}

{
  return ot::Message::GetReserved(this);
}

uint64_t ot::Message::Read<ot::Coap::Message::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xCu);
}

{
  return ot::Message::Read<ot::Coap::Message::Header>(a1, a2, a3);
}

uint64_t ot::Coap::Option::Iterator::Init(ot::Coap::Option::Iterator *this, const ot::Coap::Message *a2)
{
  unsigned int v6 = 6;
  int v4 = *(unsigned __int16 *)(ot::Coap::Message::GetHelpData(a2) + 14);
  unsigned int v5 = v4 + (unsigned __int16)ot::Coap::Message::GetOptionStart(a2);
  if (v5 <= (unsigned __int16)ot::Message::GetLength(a2))
  {
    *((_WORD *)this + ++*(_WORD *)(this + 4) = 0;
    *((_WORD *)this + 5)  = 0;
    *(void *)this  = a2;
    *((_WORD *)this + 6)  = v5;
    return ot::Coap::Option::Iterator::Advance(this);
  }
  else
  {
    ot::Coap::Option::Iterator::MarkAsParseErrored(this);
  }
  return v6;
}

uint64_t ot::Coap::Option::Iterator::Advance(ot::Coap::Option::Iterator *this)
{
  __int16 v11 = this;
  unsigned int v10 = 0;
  unsigned __int8 v9 = 0;
  unsigned __int16 v8 = 0;
  unsigned __int16 v7 = 0;
  if (!ot::Coap::Option::Iterator::IsDone(this))
  {
    unsigned int v10 = ot::Coap::Option::Iterator::Read(this, 1u, (char *)&v9);
    if (v10 || v9 == 255)
    {
      ot::Coap::Option::Iterator::MarkAsDone((uint64_t)this);
      if (v10
        || (int v5 = *((unsigned __int16 *)this + 6),
            Message  = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this),
            v5 < (unsigned __int16)ot::Message::GetLength(Message)))
      {
        unsigned int v10 = 0;
      }
      else
      {
        unsigned int v10 = 6;
      }
    }
    else
    {
      unsigned __int16 v8 = (v9 & 0xF0) >> 4;
      unsigned int v10 = ot::Coap::Option::Iterator::ReadExtendedOptionField(this, &v8);
      if (!v10)
      {
        unsigned __int16 v7 = v9 & 0xF;
        unsigned int v10 = ot::Coap::Option::Iterator::ReadExtendedOptionField(this, &v7);
        if (!v10)
        {
          int v4 = v7;
          uint64_t v2 = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this);
          if (v4 <= (unsigned __int16)ot::Message::GetLength(v2) - *((unsigned __int16 *)this + 6))
          {
            *((_WORD *)this + 6) += v7;
            *((_WORD *)this + 4) += v8;
            *((_WORD *)this + 5)  = v7;
          }
          else
          {
            unsigned int v10 = 6;
          }
        }
      }
    }
  }
  if (v10) {
    ot::Coap::Option::Iterator::MarkAsParseErrored(this);
  }
  return v10;
}

uint64_t ot::Coap::Option::Iterator::GetPayloadMessageOffset(ot::Coap::Option::Iterator *this)
{
  return *((unsigned __int16 *)this + 6);
}

{
  return ot::Coap::Option::Iterator::GetPayloadMessageOffset(this);
}

uint64_t ot::Coap::Message::SetToken(ot::Coap::Message *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  if (a3 > 8u) {
    __assert_rtn("SetToken", "coap_message.cpp", 363, "aTokenLength <= kMaxTokenLength");
  }
  ot::Coap::Message::SetTokenLength(this, a3);
  Tokeunsigned __int8 n = (void *)ot::Coap::Message::GetToken(this);
  memcpy(Token, a2, a3);
  ot::Coap::Message::GetHelpData(this);
  *(_WORD *)(v4 + 16) += a3;
  ot::Coap::Message::GetHelpData(this);
  return ot::Message::SetLength(this, *(_WORD *)(v5 + 16));
}

void ot::Coap::Message::SetTokenLength(ot::Coap::Message *this, char a2)
{
  ot::Coap::Message::GetHelpData(this);
  *v2 &= 0xF0u;
  ot::Coap::Message::GetHelpData(this);
  *v3 |= a2 & 0xF;
}

{
  ot::Coap::Message::SetTokenLength(this, a2);
}

uint64_t ot::Coap::Message::GetToken(ot::Coap::Message *this)
{
  ot::Coap::Message::GetHelpData(this);
  return v1 + 4;
}

{
  return ot::Coap::Message::GetToken(this);
}

uint64_t ot::Random::Crypto::FillBuffer(ot::Random::Crypto *this, unsigned __int8 *a2)
{
  return ot::Random::Manager::CryptoFillBuffer(this, (unsigned __int8 *)(unsigned __int16)a2);
}

{
  return ot::Random::Crypto::FillBuffer(this, a2);
}

uint64_t ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message *this, const ot::Coap::Message *a2)
{
  Tokeunsigned __int8 n = (unsigned __int8 *)ot::Coap::Message::GetToken(a2);
  Token__int16 Length = ot::Coap::Message::GetTokenLength(a2);
  return ot::Coap::Message::SetToken(this, Token, TokenLength);
}

BOOL ot::Coap::Message::IsTokenEqual(ot::Coap::Message *this, const ot::Coap::Message *a2)
{
  Token__int16 Length = ot::Coap::Message::GetTokenLength(this);
  BOOL v6 = 0;
  if (TokenLength == ot::Coap::Message::GetTokenLength(a2))
  {
    __s1  = (void *)ot::Coap::Message::GetToken(this);
    Tokeunsigned __int8 n = (const void *)ot::Coap::Message::GetToken(a2);
    return memcmp(__s1, Token, TokenLength) == 0;
  }
  return v6;
}

uint64_t ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message *this, const ot::Coap::Message *a2)
{
  ot::Coap::Message::Init(this, 2, 68);
  unsigned __int16 MessageId = ot::Coap::Message::GetMessageId(a2);
  ot::Coap::Message::SetMessageId(this, MessageId);
  return ot::Coap::Message::SetTokenFromMessage(this, a2);
}

ot::Message *ot::Coap::Message::Clone(ot::Coap::Message *this, unsigned __int16 a2)
{
  BOOL v6 = ot::Message::Clone(this, a2);
  if (v6)
  {
    unint64_t HelpData = ot::Coap::Message::GetHelpData(this);
    ot::Coap::Message::GetHelpData(v6);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)HelpData;
    *(_DWORD *)(v2 + 16)  = *(_DWORD *)(HelpData + 16);
  }
  return v6;
}

uint64_t ot::Coap::Message::CodeToString(ot::Coap::Message *this)
{
  Code  = ot::Coap::Message::GetCode(this);
  return ot::Stringify::Lookup<(unsigned short)28>(Code, ot::Coap::Message::CodeToString(void)const::kCodeTable, (uint64_t)"Unknown", v2, v3, v4);
}

uint64_t ot::Stringify::Lookup<(unsigned short)28>(__int16 a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  __int16 v10 = a1;
  unsigned __int16 v8 = ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)28>((ot::BinarySearch *)&v10, a2, a3, a4, a5, a6);
  if (v8) {
    return *((void *)v8 + 1);
  }
  else {
    return a3;
  }
}

{
  return ot::Stringify::Lookup<(unsigned short)28>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Coap::MessageQueue::begin(ot::Coap::MessageQueue *this)
{
  Head  = (ot::Message *)ot::Coap::MessageQueue::GetHead(this);
  _ZN2ot4Coap7Message8IteratorCI1NS_7Message8IteratorEEPS3_((ot::Message::Iterator *)&v3, Head);
  return v3;
}

{
  uint64_t Head;
  uint64_t v3;

  Head  = ot::Coap::MessageQueue::GetHead(this);
  _ZN2ot4Coap7Message13ConstIteratorCI1NS_7Message13ConstIteratorEEPKS3_(&v3, Head);
  return v3;
}

ot::Message::Iterator *_ZN2ot4Coap7Message8IteratorCI1NS_7Message8IteratorEEPS3_(ot::Message::Iterator *a1, ot::Message *a2)
{
  return a1;
}

void *_ZN2ot4Coap7Message13ConstIteratorCI1NS_7Message13ConstIteratorEEPKS3_(void *a1, uint64_t a2)
{
  return a1;
}

uint64_t ot::Coap::Option::Iterator::MarkAsParseErrored(ot::Coap::Option::Iterator *this)
{
  uint64_t result = ot::Coap::Option::Iterator::MarkAsDone((uint64_t)this);
  *((_WORD *)this + 6)  = 0;
  return result;
}

{
  return ot::Coap::Option::Iterator::MarkAsParseErrored(this);
}

uint64_t ot::Coap::Option::Iterator::Read(ot::Coap::Option::Iterator *this, unsigned __int16 a2, char *a3)
{
  Message  = (ot::Message *)ot::Coap::Option::Iterator::GetMessage(this);
  unsigned int v6 = ot::Message::Read(Message, *((_WORD *)this + 6), a3, a2);
  if (!v6) {
    *((_WORD *)this + 6) += a2;
  }
  return v6;
}

uint64_t ot::Coap::Option::Iterator::MarkAsDone(uint64_t this)
{
  *(_WORD *)(this + 1ot::MessageQueue::SetTail(this, 0) = -1;
  return this;
}

{
  return ot::Coap::Option::Iterator::MarkAsDone(this);
}

uint64_t ot::Coap::Option::Iterator::ReadExtendedOptionField(ot::Coap::Option::Iterator *this, unsigned __int16 *a2)
{
  unsigned __int16 v7 = this;
  unsigned int v6 = a2;
  unsigned int v5 = 0;
  if (*a2 >= 0xDu)
  {
    if (*v6 == 13)
    {
      unsigned __int8 v4 = 0;
      unsigned int v5 = ot::Coap::Option::Iterator::Read(this, 1u, (char *)&v4);
      if (!v5) {
        *unsigned int v6 = v4 + 13;
      }
    }
    else if (*v6 == 14)
    {
      unsigned __int16 v3 = 0;
      unsigned int v5 = ot::Coap::Option::Iterator::Read(this, 2u, (char *)&v3);
      if (!v5)
      {
        unsigned __int16 v3 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v3);
        *unsigned int v6 = v3 + 269;
      }
    }
    else
    {
      return 6;
    }
  }
  return v5;
}

uint64_t ot::Coap::Option::Iterator::ReadOptionValue(ot::Coap::Option::Iterator *this, unint64_t *a2)
{
  unsigned int v5 = 0;
  if (ot::Coap::Option::Iterator::IsDone(this))
  {
    return 23;
  }
  else if (*((unsigned __int16 *)this + 5) <= 8uLL)
  {
    ot::Coap::Option::Iterator::ReadOptionValue(this, v7);
    IgnoreError();
    *a2  = 0;
    for (unsigned __int16 i = 0; i < (int)*((unsigned __int16 *)this + 5); ++i)
    {
      *a2 <<= 8;
      *a2 |= v7[i];
    }
  }
  else
  {
    return 3;
  }
  return v5;
}

uint64_t ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Option::Iterator *this, const ot::Coap::Message *a2, unsigned __int16 a3)
{
  if (a2) {
    unsigned int v6 = ot::Coap::Option::Iterator::Init(this, a2);
  }
  else {
    unsigned int v6 = ot::Coap::Option::Iterator::Advance(this);
  }
  for (unsigned int i = v6; ; unsigned int i = ot::Coap::Option::Iterator::Advance(this))
  {
    BOOL v5 = 0;
    if (!i)
    {
      BOOL v5 = 0;
      if (!ot::Coap::Option::Iterator::IsDone(this))
      {
        Optiounsigned __int8 n = (ot::Coap::Option *)ot::Coap::Option::Iterator::GetOption(this);
        BOOL v5 = a3 != (unsigned __int16)ot::Coap::Option::GetNumber(Option);
      }
    }
    if (!v5) {
      break;
    }
  }
  return i;
}

uint64_t ot::Coap::Option::GetNumber(ot::Coap::Option *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::Coap::Option::GetNumber(this);
}

uint64_t ot::Random::Manager::CryptoFillBuffer(ot::Random::Manager *this, unsigned __int8 *a2)
{
  return j__otPlatCryptoRandomGet((uint64_t)this, (unsigned __int16)a2);
}

{
  return ot::Random::Manager::CryptoFillBuffer(this, a2);
}

ot::Message::Iterator *_ZN2ot4Coap7Message8IteratorCI2NS_7Message8IteratorEEPS3_(ot::Message::Iterator *a1, ot::Message *a2)
{
  return a1;
}

ot::Message::Iterator *ot::Message::Iterator::Iterator(ot::Message::Iterator *this, ot::Message *a2)
{
  ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator(this, (uint64_t)a2);
  Message  = ot::Message::Iterator::NextMessage(a2, v2);
  uint64_t result = this;
  *((void *)this + 1)  = Message;
  return result;
}

uint64_t ot::Message::Iterator::NextMessage(ot::Message::Iterator *this, ot::Message *a2)
{
  if (this) {
    return ot::Message::GetNext(this);
  }
  else {
    return 0;
  }
}

{
  return ot::Message::Iterator::NextMessage(this, a2);
}

uint64_t ot::Message::NextOf(ot::Message *this, const ot::Message *a2)
{
  if (this) {
    return *(void *)ot::Message::Next(this);
  }
  else {
    return 0;
  }
}

{
  return ot::Message::NextOf(this, a2);
}

char *ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)28>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)0x1C, 0x10u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<unsigned short,ot::Stringify::Entry>, a6);
}

{
  return ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)28>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::BinarySearch::Compare<unsigned short,ot::Stringify::Entry>(unsigned __int16 *a1, ot::Stringify::Entry *a2)
{
  return ot::Stringify::Entry::Compare(a2, *a1);
}

uint64_t ot::Stringify::Entry::Compare(ot::Stringify::Entry *this, unsigned __int16 a2)
{
  return ot::ThreeWayCompare<unsigned short>(a2, *(_WORD *)this);
}

{
  return ot::Stringify::Entry::Compare(this, a2);
}

uint64_t ot::ThreeWayCompare<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  if (a1 == a2)
  {
    return 0;
  }
  else if (a1 > (int)a2)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<unsigned short>(a1, a2);
}

ot::Coap::CoapSecure *ot::Coap::CoapSecure::CoapSecure(ot::Coap::CoapSecure *this, ot::Instance *a2, char a3)
{
  char v5 = a3 & 1;
  ot::Coap::CoapBase::CoapBase((uint64_t)this, a2, (uint64_t)ot::Coap::CoapSecure::Send);
  ot::MeshCoP::Dtls::Dtls((ot::Coap::CoapSecure *)((char *)this + 144), a2, v5 & 1);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 129);
  ot::Coap::MessageQueue::MessageQueue((ot::Coap::CoapSecure *)((char *)this + 1048));
  ot::TaskletContext::TaskletContext((ot::Coap::CoapSecure *)((char *)this + 1056), a2, (void (*)(ot::Tasklet *))ot::Coap::CoapSecure::HandleTransmit, this);
  return this;
}

{
  ot::Coap::CoapSecure::CoapSecure(this, a2, a3 & 1);
  return this;
}

uint64_t ot::Coap::CoapSecure::Send(ot::Coap::CoapSecure *this, ot::Coap::CoapBase *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  return ot::Coap::CoapSecure::Send(this, a2, a3);
}

void ot::Coap::CoapSecure::HandleTransmit(ot::Coap::CoapSecure *this, ot::Tasklet *a2)
{
  Context  = (ot::Coap::CoapSecure *)ot::TaskletContext::GetContext(this);
  ot::Coap::CoapSecure::HandleTransmit(Context);
}

ot::TaskletContext *ot::TaskletContext::TaskletContext(ot::TaskletContext *this, ot::Instance *a2, void (*a3)(ot::Tasklet *), void *a4)
{
  return this;
}

{
  ot::TaskletContext *result;

  ot::Tasklet::Tasklet(this, (uint64_t)a2, (uint64_t)a3);
  uint64_t result = this;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a4;
  return result;
}

uint64_t ot::Coap::CoapSecure::Start(ot::Coap::CoapSecure *this, __int16 a2)
{
  ot::CallbackBase<void (*)(BOOL,void *)>::Clear((void *)this + 129);
  unsigned int v4 = ot::MeshCoP::Dtls::Open((ot::Coap::CoapSecure *)((char *)this + 144), (void (*)(void *, unsigned __int8 *, unsigned __int16))ot::Coap::CoapSecure::HandleDtlsReceive, (void (*)(void *, BOOL))ot::Coap::CoapSecure::HandleDtlsConnected, (uint64_t)this);
  if (!v4) {
    return ot::MeshCoP::Dtls::Bind((ot::Coap::CoapSecure *)((char *)this + 144), a2);
  }
  return v4;
}

void *ot::CallbackBase<void (*)(BOOL,void *)>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::CallbackBase<void (*)(BOOL,void *)>::Clear(result);
}

void ot::Coap::CoapSecure::HandleDtlsReceive(ot::Coap::CoapSecure *this, char *a2, unsigned __int8 *a3)
{
}

void *ot::Coap::CoapSecure::HandleDtlsConnected(ot::Coap::CoapSecure *this, void *a2)
{
  return ot::Coap::CoapSecure::HandleDtlsConnected(this, a2 & 1);
}

uint64_t ot::Coap::CoapSecure::Start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ot::CallbackBase<void (*)(BOOL,void *)>::Clear((void *)(a1 + 1032));
  unsigned int v5 = ot::MeshCoP::Dtls::Open((ot::MeshCoP::Dtls *)(a1 + 144), (void (*)(void *, unsigned __int8 *, unsigned __int16))ot::Coap::CoapSecure::HandleDtlsReceive, (void (*)(void *, BOOL))ot::Coap::CoapSecure::HandleDtlsConnected, a1);
  if (!v5) {
    return ot::MeshCoP::Dtls::Bind(a1 + 144, a2, a3);
  }
  return v5;
}

ot::Message *ot::Coap::CoapSecure::Stop(void **this)
{
  return ot::Coap::CoapBase::ClearRequestsAndResponses((ot::Coap::CoapBase *)this);
}

uint64_t ot::Coap::CoapSecure::Connect(__n128 *this, const ot::Ip6::SockAddr *a2, void (*a3)(BOOL, void *), uint64_t a4)
{
  return ot::MeshCoP::Dtls::Connect(this + 9, a2);
}

void *ot::CallbackBase<void (*)(BOOL,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(BOOL,void *)>::Set(result, a2, a3);
}

uint64_t ot::Coap::CoapSecure::SetPsk(ot::Coap::CoapSecure *this, const ot::MeshCoP::JoinerPskd *a2)
{
  unsigned int v6 = (ot::Coap::CoapSecure *)((char *)this + 144);
  ot::MeshCoP::JoinerPskd::GetAsCString(a2);
  unsigned int v5 = v2;
  unsigned __int8 Length = ot::MeshCoP::JoinerPskd::GetLength(a2);
  uint64_t result = ot::MeshCoP::Dtls::SetPsk(v6, v5, Length);
  if (result) {
    __assert_rtn("SetPsk", "coap_secure.cpp", 104, "false");
  }
  return result;
}

uint64_t ot::MeshCoP::JoinerPskd::GetLength(ot::MeshCoP::JoinerPskd *this)
{
  return ot::StringLength(this, (const char *)0x21);
}

{
  return ot::MeshCoP::JoinerPskd::GetLength(this);
}

uint64_t ot::Coap::CoapSecure::SendMessage(uint64_t a1, ot::Coap::Message *a2, uint64_t a3, uint64_t a4)
{
  if (ot::Coap::CoapSecure::IsConnected((ot::Coap::CoapSecure *)a1))
  {
    MessageInfo  = (ot::Ip6::MessageInfo *)ot::MeshCoP::Dtls::GetMessageInfo((ot::MeshCoP::Dtls *)(a1 + 144));
    return ot::Coap::CoapBase::SendMessage((ot::Coap::TxParameters *)a1, a2, MessageInfo, a3, a4);
  }
  else
  {
    return 13;
  }
}

BOOL ot::Coap::CoapSecure::IsConnected(ot::Coap::CoapSecure *this)
{
  return ot::MeshCoP::Dtls::IsConnected((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return ot::Coap::CoapSecure::IsConnected(this);
}

uint64_t ot::MeshCoP::Dtls::GetMessageInfo(ot::MeshCoP::Dtls *this)
{
  return (uint64_t)this + 736;
}

{
  return ot::MeshCoP::Dtls::GetMessageInfo(this);
}

uint64_t ot::Coap::CoapSecure::SendMessage(ot::Coap::TxParameters *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3, uint64_t a4, uint64_t a5)
{
  return ot::Coap::CoapBase::SendMessage(a1, a2, a3, a4, a5);
}

uint64_t ot::Coap::CoapSecure::Send(ot::Coap::CoapSecure *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return 0;
}

void *ot::Coap::CoapSecure::HandleDtlsConnected(ot::Coap::CoapSecure *this, char a2)
{
  unsigned int v4 = this;
  char v3 = a2 & 1;
  return ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<BOOL &>((void *)this + 129, &v3);
}

void *ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<BOOL &>(void *result, unsigned char *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<BOOL &>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<BOOL &>(result, a2);
}

void ot::Coap::CoapSecure::HandleDtlsReceive(ot::Coap::CoapSecure *this, char *a2, unsigned __int16 a3)
{
  unsigned int v5 = (ot::Coap::Message *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
  HelpDataReserved  = ot::Coap::Message::GetHelpDataReserved(v5);
  unsigned __int16 v7 = ot::MessagePool::Allocate(v5, 0, HelpDataReserved);
  if (v7 && !ot::Message::AppendBytes(v7, a2, a3))
  {
    MessageInfo  = (const ot::Ip6::MessageInfo *)ot::MeshCoP::Dtls::GetMessageInfo((ot::Coap::CoapSecure *)((char *)this + 144));
    ot::Coap::CoapBase::Receive(this, v7, MessageInfo);
  }
  if (v7) {
    ot::Message::Free(v7);
  }
}

uint64_t ot::Coap::Message::GetHelpDataReserved(ot::Coap::Message *this)
{
  return 22;
}

{
  return ot::Coap::Message::GetHelpDataReserved(this);
}

uint64_t ot::TaskletContext::GetContext(ot::TaskletContext *this)
{
  return *((void *)this + 2);
}

{
  return ot::TaskletContext::GetContext(this);
}

void ot::Coap::CoapSecure::HandleTransmit(ot::Coap::CoapSecure *this)
{
  int v18 = 0;
  Head  = (ot::Message *)ot::MessageQueue::GetHead((ot::Coap::CoapSecure *)((char *)this + 1048));
  if (Head)
  {
    ot::MessageQueue::Dequeue((ot::Coap::CoapSecure *)((char *)this + 1048), Head);
    if (ot::MessageQueue::GetHead((ot::Coap::CoapSecure *)((char *)this + 1048))) {
      ot::Tasklet::Post((ot::Coap::CoapSecure *)((char *)this + 1056));
    }
    unsigned __int16 Length = ot::Message::GetLength(Head);
    int v18 = ot::MeshCoP::Dtls::Send((ot::Coap::CoapSecure *)((char *)this + 144), Head, Length);
  }
  if (v18)
  {
    char v2 = ot::ErrorToString(v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"CoapSecure", "Transmit: %s", v3, v4, v5, v6, v7, v8, v2);
    ot::Message::Free(Head);
  }
  else
  {
    char v9 = ot::ErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"CoapSecure", "Transmit: %s", v10, v11, v12, v13, v14, v15, v9);
  }
}

void *ot::Tasklet::Tasklet(void *a1, uint64_t a2, uint64_t a3)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = a1;
  *a1  = a3;
  a1[1]  = 0;
  return result;
}

BOOL ot::MeshCoP::Dtls::IsConnected(ot::MeshCoP::Dtls *this)
{
  return *(unsigned char *)this == 4;
}

{
  return ot::MeshCoP::Dtls::IsConnected(this);
}

uint64_t ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<BOOL &>(uint64_t a1, unsigned char *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2 & 1, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<BOOL &>(a1, a2);
}

_WORD *ot::Crc16::Crc16(_WORD *a1, __int16 a2)
{
  *a1  = a2;
  ot::Crc16::Init((uint64_t)a1);
  return a1;
}

{
  ot::Crc16::Crc16(a1, a2);
  return a1;
}

uint64_t ot::Crc16::Init(uint64_t this)
{
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return this;
}

{
  return ot::Crc16::Init(this);
}

_WORD *ot::Crc16::Update(_WORD *this, unsigned __int8 a2)
{
  this[1] ^= a2 << 8;
  char v2 = 8;
  do
  {
    if ((__int16)this[1] >= 0) {
      this[1] *= 2;
    }
    else {
      this[1]  = (2 * this[1]) ^ *this;
    }
    --v2;
  }
  while (v2);
  return this;
}

const char *ot::ErrorToString(int a1)
{
  if (a1 >= (unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)38>()) {
    return "UnknownErrorType";
  }
  else {
    return ot::ErrorToString(otError)::kErrorStrings[a1];
  }
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)38>()
{
  return 38;
}

{
  return ot::GetArrayLength<char const*,(unsigned short)38>();
}

uint64_t ot::Heap::CAlloc(ot::Heap *this, __int16 a2)
{
  __int16 v5 = (__int16)this;
  Heap  = (ot::Utils::Heap *)ot::Instance::GetHeap(this);
  return ot::Utils::Heap::CAlloc(Heap, v5, a2);
}

unsigned __int16 *ot::Heap::Free(ot::Heap *this, void *a2)
{
  Heap  = (unsigned __int16 *)ot::Instance::GetHeap(this);
  return ot::Utils::Heap::Free(Heap, this);
}

ot::Instance *ot::Instance::Instance(ot::Instance *this)
{
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1);
  ot::TimerMilli::Scheduler::Scheduler((ot::Instance *)((char *)this + 16), this);
  ot::TimerMilli::Scheduler::Scheduler((ot::Instance *)((char *)this + 24), this);
  ot::Crypto::MbedTls::MbedTls((ot::Instance *)((char *)this + 32));
  ot::Random::Manager::Manager((ot::Instance *)((char *)this + 33));
  ot::Radio::Radio((ot::Instance *)((char *)this + 34), this);
  ot::Uptime::Uptime((ot::Instance *)((char *)this + 40), this);
  ot::Notifier::Notifier((ot::Instance *)((char *)this + 72), this);
  ot::TimeTicker::TimeTicker((ot::Instance *)((char *)this + 168), this);
  ot::Settings::Settings((ot::Instance *)((char *)this + 200), this);
  ot::SettingsDriver::SettingsDriver((ot::Instance *)((char *)this + 201), this);
  ot::MessagePool::MessagePool((ot::Instance *)((char *)this + 208), this);
  ot::Ip6::Ip6::Ip6((ot::Instance *)((char *)this + 85224), this);
  ot::ThreadNetif::ThreadNetif ((ot::Instance *)((char *)this + 85536), this);
  ot::Tmf::Agent::Agent((ot::Instance *)((char *)this + 86240), this);
  ot::Dhcp6::Client::Client((ot::Instance *)((char *)this + 86456), this);
  ot::Dhcp6::Server::Server((ot::Instance *)((char *)this + 86808), this);
  ot::Utils::Slaac::Slaac((ot::Instance *)((char *)this + 87120), this);
  ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager((ot::Instance *)((char *)this + 87264), this);
  ot::MeshCoP::PendingDatasetManager::PendingDatasetManager((ot::Instance *)((char *)this + 87600), this);
  ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager((ot::Instance *)((char *)this + 87960), this);
  ot::MeshCoP::NetworkNameManager::NetworkNameManager((ot::Instance *)((char *)this + 87968), this);
  ot::Ip6::Filter::Filter((ot::Instance *)((char *)this + 88002), this);
  ot::KeyManager::KeyManager((ot::Instance *)((char *)this + 88008), this);
  ot::Lowpan::Lowpan::Lowpan((ot::Instance *)((char *)this + 88160), this);
  ot::Mac::Mac::Mac((__n128 *)((char *)this + 88168), this);
  ot::MeshForwarder::MeshForwarder((ot::Instance *)((char *)this + 89864), this);
  ot::Mle::MleRouter::MleRouter((ot::Instance *)((char *)this + 90320), this);
  ot::Mle::DiscoverScanner::DiscoverScanner((ot::Instance *)((char *)this + 126080), this);
  ot::AddressResolver::AddressResolver((ot::AddressResolver::CacheEntry **)this + 15778, this);
  ot::NetworkData::Local::Local((ot::Instance *)((char *)this + 142680), this);
  ot::NetworkData::Leader::Leader((ot::Instance *)((char *)this + 142944), this);
  ot::NetworkData::Notifier::Notifier((ot::Instance *)((char *)this + 143312), this);
  ot::SettingsDriver::SettingsDriver((ot::Instance *)((char *)this + 143408), this);
  ot::NetworkDiagnostic::Server::Server((ot::Instance *)((char *)this + 143409), this);
  ot::NetworkDiagnostic::Client::Client((ot::Instance *)((char *)this + 143416), this);
  ot::MeshCoP::BorderAgent::BorderAgent((ot::Instance *)((char *)this + 143432), this);
  ot::MeshCoP::Commissioner::Commissioner((ot::Instance *)((char *)this + 143592), this);
  ot::Tmf::SecureAgent::SecureAgent((ot::Instance *)((char *)this + 144184), this);
  ot::MeshCoP::Joiner::Joiner((ot::Instance *)((char *)this + 145264), this);
  ot::MeshCoP::JoinerRouter::JoinerRouter((ot::Instance *)((char *)this + 145384), this);
  ot::MeshCoP::Leader::Leader((ot::Instance *)((char *)this + 145504), this);
  ot::BackboneRouter::Leader::Leader((ot::Instance *)((char *)this + 145608), this);
  ot::BackboneRouter::Local::Local((ot::Instance *)((char *)this + 145640), this);
  ot::BackboneRouter::Manager::Manager((ot::Instance *)((char *)this + 145768), this);
  ot::MlrManager::MlrManager((ot::Instance *)((char *)this + 153560), this);
  ot::DuaManager::DuaManager((ot::Instance *)((char *)this + 153584), this);
  ot::ChildSupervisor::ChildSupervisor((ot::Instance *)((char *)this + 153696), this);
  ot::SupervisionListener::SupervisionListener((ot::Instance *)((char *)this + 153728), this);
  ot::AnnounceBeginServer::AnnounceBeginServer((ot::Instance *)((char *)this + 153760), this);
  ot::PanIdQueryServer::PanIdQueryServer((ot::Instance *)((char *)this + 153800), this);
  ot::EnergyScanServer::EnergyScanServer((ot::Instance *)((char *)this + 153848), this);
  ot::LinkMetrics::Initiator::Initiator((ot::Instance *)((char *)this + 153912), this);
  ot::LinkMetrics::Subject::Subject((ot::Instance *)((char *)this + 153960), this);
  ot::Coap::Coap::Coap((ot::Instance *)((char *)this + 155512), this);
  ot::Utils::PingSender::PingSender((ot::Instance *)((char *)this + 155728), this);
  ot::Utils::ChannelManager::ChannelManager((ot::Instance *)((char *)this + 155872), this);
  ot::Utils::MeshDiag::MeshDiag((ot::Instance *)((char *)this + 155920), this);
  ot::Utils::HistoryTracker::HistoryTracker((ot::Instance *)((char *)this + 155968), this);
  ot::MeshCoP::DatasetUpdater::DatasetUpdater((ot::Instance *)((char *)this + 166208), this);
  ot::AnnounceSender::AnnounceSender((ot::Instance *)((char *)this + 166256), this);
  ot::Mac::LinkRaw::LinkRaw((ot::Instance *)((char *)this + 166360), this);
  ot::FactoryDiags::Diags::Diags((ot::Instance *)((char *)this + 166400), this);
  uint64_t result = this;
  *((unsigned char *)this + 16644ot::MessageQueue::SetTail(this, 0) = 0;
  return result;
}

{
  ot::Instance::Instance(this);
  return this;
}

ot::TimerMilli::Scheduler *ot::TimerMilli::Scheduler::Scheduler(ot::TimerMilli::Scheduler *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Timer::Scheduler::Scheduler(this, a2);
  return this;
}

ot::Radio *ot::Radio::Radio(ot::Radio *this, ot::Instance *a2)
{
  return this;
}

{
  ot::InstanceLocator::InstanceLocator();
  ot::SettingsDriver::SettingsDriver((ot::Radio *)((char *)this + 1), a2);
  return this;
}

ot::Settings *ot::Settings::Settings(ot::Settings *this, ot::Instance *a2)
{
  return this;
}

ot::SettingsDriver *ot::SettingsDriver::SettingsDriver(ot::SettingsDriver *this, ot::Instance *a2)
{
  return this;
}

ot::Ip6::Filter *ot::Ip6::Filter::Filter(ot::Ip6::Filter *this, ot::Instance *a2)
{
  return this;
}

{
  ot::InstanceLocator::InstanceLocator();
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::Array((uint64_t)this);
  return this;
}

ot::NetworkData::Local *ot::NetworkData::Local::Local(ot::NetworkData::Local *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkData::MutableNetworkData::MutableNetworkData(this, a2, (unsigned __int8 *)this + 10, 0, 254);
  return this;
}

uint64_t ot::Instance::GetHeap(ot::Instance *this)
{
  if (!ot::Instance::sHeap)
  {
    ot::Utils::Heap::Heap((ot::Utils::Heap *)&ot::sHeapRaw);
    ot::Instance::sHeap  = (uint64_t)&ot::sHeapRaw;
  }
  return ot::Instance::sHeap;
}

unsigned char *ot::Instance::InitSingle(ot::Instance *this)
{
  uint64_t v3 = ot::Instance::Get(this);
  if ((v3[166440] & 1) == 0)
  {
    ot::Instance::Instance((ot::Instance *)&ot::gInstanceRaw);
    uint64_t v3 = &ot::gInstanceRaw;
    ot::Instance::AfterInit((ot::Instance *)&ot::gInstanceRaw);
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(5) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_8_0((uint64_t)v5, 166448);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "INITSINGLE: sz_Instance[0x%lx]\n", v5, 0xCu);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v4, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v4, 0x16u);
    }
  }
  return v3;
}

void *ot::Instance::Get(ot::Instance *this)
{
  return &ot::gInstanceRaw;
}

void ot::Instance::AfterInit(ot::Instance *this)
{
  *((unsigned char *)this + 16644ot::MessageQueue::SetTail(this, 0) = 1;
  uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
  ot::Settings::Init(v1);
  char v2 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)this);
  ot::Mle::Mle::Restore(v2);
}

void ot::Instance::Reset(ot::Instance *this)
{
}

uint64_t ot::Instance::Get<ot::Settings>(uint64_t a1)
{
  return a1 + 200;
}

{
  return ot::Instance::Get<ot::Settings>(a1);
}

void ot::Instance::InitSettings(ot::Instance *this)
{
  uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
  ot::Settings::Init(v1);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(5) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v11, (uint64_t)"InitSettings", 0);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: Setting MLE Frame Counter: %u", v11, 0x12u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v10, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v10, 0x16u);
  }
  uint64_t v2 = ot::Instance::Get<ot::KeyManager>((uint64_t)this);
  ot::KeyManager::SetMleFrameCounter(v2, 0);
  uint64_t v6 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v6 && (syslog_is_the_mask_enabled(5) & 1) != 0)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v9, (uint64_t)"InitSettings", 0);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: Setting All MAC Frame Counter: %u", v9, 0x12u);
    }
  }
  else if (!v6 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v8, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v8, 0x16u);
  }
  uint64_t v3 = (ot::KeyManager *)ot::Instance::Get<ot::KeyManager>((uint64_t)this);
  ot::KeyManager::SetAllMacFrameCounters(v3, 0, 0);
  uint64_t v4 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)this);
  ot::Mle::Mle::Restore(v4);
}

uint64_t ot::KeyManager::SetMleFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56)  = a2;
  return this;
}

{
  return ot::KeyManager::SetMleFrameCounter(this, a2);
}

void ot::Instance::Finalize(ot::Instance *this)
{
  if (*((unsigned char *)this + 166440))
  {
    *((unsigned char *)this + 16644ot::MessageQueue::SetTail(this, 0) = 0;
    otThreadSetEnabled((uint64_t)this, 0);
    IgnoreError();
    otIp6SetEnabled((uint64_t)this, 0);
    IgnoreError();
    otLinkSetEnabled((uint64_t)this, 0);
    IgnoreError();
    uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
    ot::Settings::Deinit(v1);
    uint64_t v2 = (ot::Mac::SubMac *)ot::Instance::Get<ot::Mac::SubMac>((uint64_t)this);
    ot::Mac::SubMac::Disable(v2);
    IgnoreError();
    ot::Instance::~Instance(this);
  }
}

uint64_t ot::Instance::Get<ot::Mac::SubMac>(uint64_t a1)
{
  return a1 + 88232;
}

{
  return ot::Instance::Get<ot::Mac::SubMac>(a1);
}

void ot::Instance::~Instance(ot::Instance *this)
{
}

{
  ot::Random::Manager::~Manager((ot::Instance *)((char *)this + 33));
}

void ot::Instance::FactoryReset(ot::Instance *this)
{
  uint64_t v1 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
  ot::Settings::Wipe(v1);
  otPlatReset(this);
}

uint64_t ot::Instance::ErasePersistentInfo(ot::Instance *this)
{
  unsigned int v5 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)this);
  if (ot::Mle::Mle::IsDisabled(v1))
  {
    uint64_t v2 = (ot::Settings *)ot::Instance::Get<ot::Settings>((uint64_t)this);
    ot::Settings::Wipe(v2);
  }
  else
  {
    return 13;
  }
  return v5;
}

BOOL ot::Instance::GetBufferInfo(ot::Instance *a1, _WORD *a2)
{
  ot::Clearable<ot::Instance::BufferInfo>::Clear(a2);
  uint64_t v2 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>((uint64_t)a1);
  *a2  = ot::MessagePool::GetTotalBufferCount(v2);
  uint64_t v3 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>((uint64_t)a1);
  a2[1]  = ot::MessagePool::GetFreeBufferCount(v3);
  uint64_t v4 = (ot::MessagePool *)ot::Instance::Get<ot::MessagePool>((uint64_t)a1);
  a2[2]  = ot::MessagePool::GetMaxUsedBufferCount(v4);
  unsigned int v5 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>((uint64_t)a1);
  SendQueue  = (ot::PriorityQueue *)ot::MeshForwarder::GetSendQueue(v5);
  ot::PriorityQueue::GetInfo(SendQueue, (uint64_t)(a2 + 4));
  uint64_t v7 = (ot::MeshForwarder *)ot::Instance::Get<ot::MeshForwarder>((uint64_t)a1);
  ReassemblyQueue  = (ot::MessageQueue *)ot::MeshForwarder::GetReassemblyQueue(v7);
  ot::MessageQueue::GetInfo(ReassemblyQueue, (uint64_t)(a2 + 8));
  char v9 = (ot::Ip6::Ip6 *)ot::Instance::Get<ot::Ip6::Ip6>((uint64_t)a1);
  uint64_t v10 = (ot::PriorityQueue *)ot::Ip6::Ip6::GetSendQueue(v9);
  ot::PriorityQueue::GetInfo(v10, (uint64_t)(a2 + 12));
  uint64_t v11 = (ot::Ip6::Mpl *)ot::Instance::Get<ot::Ip6::Mpl>((uint64_t)a1);
  BufferedMessageSet  = (ot::MessageQueue *)ot::Ip6::Mpl::GetBufferedMessageSet(v11);
  ot::MessageQueue::GetInfo(BufferedMessageSet, (uint64_t)(a2 + 16));
  uint64_t v13 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)a1);
  MessageQueue  = (ot::MessageQueue *)ot::Mle::Mle::GetMessageQueue(v13);
  ot::MessageQueue::GetInfo(MessageQueue, (uint64_t)(a2 + 20));
  uint64_t v15 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::Agent>((uint64_t)a1);
  ot::Coap::CoapBase::GetRequestMessages(v15);
  ot::MessageQueue::GetInfo(v16, (uint64_t)(a2 + 24));
  unsigned int v17 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::Agent>((uint64_t)a1);
  ot::Coap::CoapBase::GetCachedResponses(v17);
  ot::MessageQueue::GetInfo(v18, (uint64_t)(a2 + 24));
  unsigned __int16 v19 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::SecureAgent>((uint64_t)a1);
  ot::Coap::CoapBase::GetRequestMessages(v19);
  ot::MessageQueue::GetInfo(v20, (uint64_t)(a2 + 28));
  char v21 = (ot::Coap::CoapBase *)ot::Instance::Get<ot::Tmf::SecureAgent>((uint64_t)a1);
  ot::Coap::CoapBase::GetCachedResponses(v21);
  ot::MessageQueue::GetInfo(v22, (uint64_t)(a2 + 28));
  uint64_t ApplicationCoap = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(a1);
  ot::Coap::CoapBase::GetRequestMessages(ApplicationCoap);
  ot::MessageQueue::GetInfo(v24, (uint64_t)(a2 + 32));
  uint64_t v25 = (ot::Coap::CoapBase *)ot::Instance::GetApplicationCoap(a1);
  ot::Coap::CoapBase::GetCachedResponses(v25);
  return ot::MessageQueue::GetInfo(v26, (uint64_t)(a2 + 32));
}

void *ot::Clearable<ot::Instance::BufferInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x48uLL);
}

{
  return ot::Clearable<ot::Instance::BufferInfo>::Clear(a1);
}

uint64_t ot::MessagePool::GetMaxUsedBufferCount(ot::MessagePool *this)
{
  return *((unsigned __int16 *)this + 32777);
}

{
  return ot::MessagePool::GetMaxUsedBufferCount(this);
}

uint64_t ot::MeshForwarder::GetSendQueue(ot::MeshForwarder *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::MeshForwarder::GetSendQueue(this);
}

uint64_t ot::MeshForwarder::GetReassemblyQueue(ot::MeshForwarder *this)
{
  return (uint64_t)this + 40;
}

{
  return ot::MeshForwarder::GetReassemblyQueue(this);
}

uint64_t ot::Ip6::Ip6::GetSendQueue(ot::Ip6::Ip6 *this)
{
  return (uint64_t)this + 40;
}

{
  return ot::Ip6::Ip6::GetSendQueue(this);
}

uint64_t ot::Instance::Get<ot::Ip6::Mpl>(uint64_t a1)
{
  return a1 + 85360;
}

{
  return ot::Instance::Get<ot::Ip6::Mpl>(a1);
}

uint64_t ot::Ip6::Mpl::GetBufferedMessageSet(ot::Ip6::Mpl *this)
{
  return (uint64_t)this + 144;
}

{
  return ot::Ip6::Mpl::GetBufferedMessageSet(this);
}

uint64_t ot::Mle::Mle::GetMessageQueue(ot::Mle::Mle *this)
{
  return (uint64_t)this + 392;
}

{
  return ot::Mle::Mle::GetMessageQueue(this);
}

void ot::Coap::CoapBase::GetCachedResponses(ot::Coap::CoapBase *this)
{
}

{
  ot::Coap::CoapBase::GetCachedResponses(this);
}

uint64_t ot::Instance::Get<ot::Tmf::SecureAgent>(uint64_t a1)
{
  return a1 + 144184;
}

{
  return ot::Instance::Get<ot::Tmf::SecureAgent>(a1);
}

uint64_t ot::Instance::ResetBufferInfo(ot::Instance *this)
{
  uint64_t v1 = ot::Instance::Get<ot::MessagePool>((uint64_t)this);
  return ot::MessagePool::ResetMaxUsedBufferCount(v1);
}

uint64_t ot::MessagePool::ResetMaxUsedBufferCount(uint64_t this)
{
  *(_WORD *)(this + 6555++*(_WORD *)(this + 4) = *(_WORD *)(this + 65552);
  return this;
}

{
  return ot::MessagePool::ResetMaxUsedBufferCount(this);
}

void ot::Instance::SetLogLevel(unsigned __int8 a1)
{
  if (a1 != ot::Instance::sLogLevel)
  {
    ot::Instance::sLogint Level = a1;
    otPlatLogHandleLevelChanged(a1);
  }
}

ot::Timer::Scheduler *ot::Timer::Scheduler::Scheduler(ot::Timer::Scheduler *this, ot::Instance *a2)
{
  return this;
}

ot::Radio::Callbacks *ot::Radio::Callbacks::Callbacks(ot::Radio::Callbacks *this, ot::Instance *a2)
{
  return this;
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::Array(uint64_t a1)
{
  return a1;
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::Array(uint64_t result)
{
  *(unsigned char *)(result + ++*(_WORD *)(this + 4) = 0;
  return result;
}

ot::MessagePool *ot::MessagePool::MessagePool(ot::MessagePool *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Pool<ot::Buffer,(unsigned short)256>::Pool((uint64_t *)this + 1);
  *((_WORD *)this + 32776)  = 0;
  *((_WORD *)this + 32777)  = 0;
  bzero((char *)this + 65556, 0x4C00uLL);
  uint64_t result = this;
  *((unsigned char *)this + 8501ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
  return result;
}

{
  ot::MessagePool::MessagePool(this, a2);
  return this;
}

uint64_t *ot::Pool<ot::Buffer,(unsigned short)256>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t *i;

  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  for (unsigned int i = a1 + 1; i != a1 + 8193; i += 32)
    ot::LinkedList<ot::Buffer>::Push(a1, i);
  return a1;
}

ot::Buffer *ot::MessagePool::Allocate(ot::InstanceLocator *a1, char a2, __int16 a3, ot::Message::Settings *a4)
{
  int v10 = 0;
  unsigned __int8 Priority = ot::Message::Settings::GetPriority(a4);
  __b  = ot::MessagePool::NewBuffer(a1, Priority);
  if (__b)
  {
    memset(__b, 0, 0x100uLL);
    ot::Message::SetMessagePool(__b, a1);
    ot::Message::SetType(__b, a2);
    ot::Message::SetReserved(__b, a3);
    char IsLinkSecurityEnabled = ot::Message::Settings::IsLinkSecurityEnabled(a4);
    ot::Message::SetLinkSecurityEnabled(__b, IsLinkSecurityEnabled & 1);
    unsigned __int8 v6 = ot::Message::Settings::GetPriority(a4);
    int v10 = ot::Message::SetPriority(__b, v6);
    if (!v10) {
      int v10 = ot::Message::SetLength(__b, 0);
    }
  }
  if (v10)
  {
    ot::MessagePool::Free(a1, __b);
    return 0;
  }
  return __b;
}

ot::Buffer *ot::MessagePool::NewBuffer(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  v78  = a1;
  v77  = a2;
  int v50 = a1;
  v76  = 0;
  while (1)
  {
    v76  = (ot::Buffer *)ot::Pool<ot::Buffer,(unsigned short)256>::Allocate((uint64_t *)v50 + 1);
    if (v76) {
      break;
    }
    if (ot::MessagePool::ReclaimBuffers(v50, v77)) {
      goto LABEL_20;
    }
  }
  if (*((unsigned char *)v50 + 85012)) {
    ot::MessagePool::UpdateBufferStats(v50, v76, 1);
  }
  uint64_t v2 = v50;
  ++*((_WORD *)v50 + 32776);
  uint64_t v49 = 65554;
  *((_WORD *)v50 + 32777)  = ot::Max<unsigned short>(*((_WORD *)v2 + 32777), *((_WORD *)v2 + 32776));
  ot::Buffer::SetNextBuffer(v76, 0);
  FreeBufferCount  = ot::MessagePool::GetFreeBufferCount(v50);
  if (256 - FreeBufferCount >= 230 && FreeBufferCount != 26) {
    handle_ot_buffer_threshold_captureABC();
  }
  if ((rcpBuffersAvailable & 1) == 1)
  {
    unsigned __int16 v5 = ot::MessagePool::GetFreeBufferCount(v50);
    if (256 - v5 >= 192 && v5 != 64)
    {
      v48  = v76;
      unsigned __int16 v7 = ot::MessagePool::GetFreeBufferCount(v50);
      uint64_t v8 = *((unsigned __int16 *)v50 + 32776);
      uint64_t v9 = *((unsigned __int16 *)v50 + 32777);
      uint64_t v21 = 256;
      uint64_t v22 = v7;
      uint64_t v23 = v8;
      uint64_t v24 = v9;
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Message", "HIGH_WATER_MARK: Low message buffer : buffer  = %p,total buffers  = %d, free buffers  = %d, allocated buffers  = %d, max allocated  = %d", v10, v11, v12, v13, v14, v15, (char)v76);
      rcpBuffersAvailable  = 0;
    }
  }
  if ((unsigned __int16)ot::MessagePool::GetFreeBufferCount(v50) <= 2u) {
    update_buff_limit_exceedeed_metric(1);
  }
LABEL_20:
  if (!v76)
  {
    Instance  = ot::InstanceLocator::GetInstance(v50);
    otMessageGetBufferInfo((uint64_t)Instance, (uint64_t)v51);
    unsigned __int16 v17 = ot::MessagePool::GetFreeBufferCount(v50);
    uint64_t v18 = *((unsigned __int16 *)v50 + 32777);
    __int16 v47 = &v20;
    uint64_t v21 = v17;
    uint64_t v22 = v58;
    uint64_t v23 = v59;
    uint64_t v24 = v60;
    uint64_t v25 = v52;
    uint64_t v26 = v53;
    uint64_t v27 = v54;
    uint64_t v28 = v55;
    uint64_t v29 = v56;
    uint64_t v30 = v57;
    uint64_t v31 = v64;
    uint64_t v32 = v65;
    uint64_t v33 = v66;
    uint64_t v34 = v67;
    uint64_t v35 = v68;
    uint64_t v36 = v69;
    uint64_t v37 = v70;
    uint64_t v38 = v71;
    uint64_t v39 = v72;
    uint64_t v40 = v61;
    uint64_t v41 = v62;
    uint64_t v42 = v63;
    uint64_t v43 = v73;
    uint64_t v44 = v74;
    uint64_t v45 = v75;
    uint64_t v46 = v18;
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Message", "No available message buffer : [tot:%d, free:%d], Ip6:[msgs:%u, bufs:%u, totbytes:%u] 6LoSend:[%u, %u, %u] 6LoReas:[%u, %u, %u] mle:[%u, %u, %u,], coap:[%u, %u, %u], coapSec:[%u, %u, %u], mpl:[%u %u %u], applCoap:[%u, %u, %u], max allocated  = %d", v35, v35, v67, v32, v32, v64, 0);
  }
  return v76;
}

uint64_t ot::Message::Settings::GetPriority(ot::Message::Settings *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Message::Settings::GetPriority(this);
}

uint64_t ot::Message::SetMessagePool(ot::Message *this, ot::MessagePool *a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(void *)(result + 16)  = a2;
  return result;
}

{
  return ot::Message::SetMessagePool(this, a2);
}

uint64_t ot::Message::SetType(ot::Buffer *a1, char a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_WORD *)(result + 6ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)(result + 68) & 0xFFF8 | a2 & 7;
  return result;
}

{
  return ot::Message::SetType(a1, a2);
}

uint64_t ot::Message::SetReserved(ot::Message *this, __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 4++*(_WORD *)(this + 4) = a2;
  return result;
}

{
  return ot::Message::SetReserved(this, a2);
}

uint64_t ot::Message::SetLinkSecurityEnabled(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 6ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)(result + 68) & 0xFEFF | ((v3 & 1) << 8);
  return result;
}

{
  return ot::Message::SetLinkSecurityEnabled(this, a2);
}

uint64_t ot::Message::Settings::IsLinkSecurityEnabled(ot::Message::Settings *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::Message::Settings::IsLinkSecurityEnabled(this);
}

uint64_t ot::Message::SetPriority(ot::Message *a1, unsigned __int8 a2)
{
  unsigned int v8 = 0;
  if (a2 < 4u)
  {
    if (ot::Message::IsInAQueue(a1))
    {
      if (a2 != ((*(unsigned __int16 *)(ot::Buffer::GetMetadata(a1) + 68) >> 9) & 3))
      {
        PriorityQueue  = (ot::PriorityQueue *)ot::Message::GetPriorityQueue(a1);
        if (PriorityQueue) {
          ot::PriorityQueue::Dequeue(PriorityQueue, a1);
        }
        uint64_t Metadata = ot::Buffer::GetMetadata(a1);
        *(_WORD *)(Metadata + 6ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)(Metadata + 68) & 0xF9FF | ((a2 & 3) << 9);
        if (PriorityQueue) {
          ot::PriorityQueue::Enqueue(PriorityQueue, a1);
        }
      }
    }
    else
    {
      uint64_t v2 = ot::Buffer::GetMetadata(a1);
      *(_WORD *)(v2 + 6ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)(v2 + 68) & 0xF9FF | ((a2 & 3) << 9);
    }
  }
  else
  {
    return 7;
  }
  return v8;
}

uint64_t ot::Message::SetLength(ot::Message *this, unsigned __int16 a2)
{
  int v4 = (unsigned __int16)(a2 + ot::Message::GetReserved(this));
  if ((unsigned __int16)v4 >= (int)(unsigned __int16)ot::Message::GetReserved(this))
  {
    unsigned int v5 = ot::Message::ResizeMessage(this, v4);
    if (!v5)
    {
      *(_WORD *)(ot::Buffer::GetMetadata(this) + 46)  = a2;
      if (a2 < (int)(unsigned __int16)ot::Message::GetOffset(this)) {
        ot::Message::SetOffset(this, a2);
      }
    }
  }
  else
  {
    return 7;
  }
  return v5;
}

void ot::MessagePool::Free(ot::MessagePool *this, ot::Message *a2)
{
  BOOL v3 = 0;
  if (!*(void *)ot::Message::Next(a2)) {
    BOOL v3 = *(void *)ot::Message::Prev(a2) == 0;
  }
  if (!v3) {
    __assert_rtn("Free", "message.cpp", 126, "aMessage->Next() == nullptr && aMessage->Prev() == nullptr");
  }
  ot::MessagePool::FreeBuffers(this, a2);
}

ot::Buffer *ot::MessagePool::Allocate(ot::Message::Settings *a1, char a2)
{
  Default  = (ot::Message::Settings *)ot::Message::Settings::GetDefault(a1);
  return ot::MessagePool::Allocate(a1, a2, 0, Default);
}

ot::Buffer *ot::MessagePool::Allocate(ot::Message::Settings *a1, char a2, __int16 a3)
{
  Default  = (ot::Message::Settings *)ot::Message::Settings::GetDefault(a1);
  return ot::MessagePool::Allocate(a1, a2, a3, Default);
}

uint64_t ot::Message::Prev(ot::Message *this)
{
  return ot::Buffer::GetMetadata(this) + 8;
}

{
  return ot::Message::Prev(this);
}

void ot::MessagePool::FreeBuffers(ot::MessagePool *this, ot::Buffer *a2)
{
  while (a2)
  {
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(a2);
    ot::Pool<ot::Buffer,(unsigned short)256>::Free((uint64_t *)this + 1, a2);
    if (*((unsigned char *)this + 85012)) {
      ot::MessagePool::UpdateBufferStats(this, a2, 0);
    }
    --*((_WORD *)this + 32776);
    if ((rcpBuffersAvailable & 1) == 0 && 256 - (unsigned __int16)ot::MessagePool::GetFreeBufferCount(this) < 115)
    {
      ot::MessagePool::GetFreeBufferCount(this);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Message", "LOW_WATER_MARK: allocated buffers  = %d, free buffers  = %d, allocated buffers=%d, max allocated=%d", v2, v3, v4, v5, v6, v7, 0);
      rcpBuffersAvailable  = 1;
    }
    a2  = NextBuffer;
  }
}

uint64_t ot::Pool<ot::Buffer,(unsigned short)256>::Allocate(uint64_t *a1)
{
  return ot::LinkedList<ot::Buffer>::Pop(a1);
}

{
  return ot::Pool<ot::Buffer,(unsigned short)256>::Allocate(a1);
}

uint64_t ot::MessagePool::ReclaimBuffers(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  unsigned int v6 = ot::MeshForwarder::EvictMessage(v2, a2);
  if (v6 == 23)
  {
    uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    return ot::Coap::CoapBase::EvictMessage(v3);
  }
  return v6;
}

uint64_t ot::MessagePool::UpdateBufferStats(ot::MessagePool *this, const ot::Buffer *a2, char a3)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  char v10 = a3 & 1;
  IndexOf  = ot::MessagePool::GetIndexOf(this, a2);
  *((unsigned char *)this + 76 * IndexOf + 6556++*(_WORD *)(this + 4) = v10 & 1;
  gettimeofday(&v8, 0);
  tv_sec  = v8.tv_sec;
  tv_usec  = v8.tv_usec;
  memset(v13, 0, sizeof(v13));
  uint64_t v3 = localtime(&tv_sec);
  strftime((char *)v13, 0x20uLL, "%Y-%m-%d %H:%M:%S", v3);
  if (v10)
  {
    ++*((_DWORD *)this + 19 * IndexOf + 16389);
    return snprintf((char *)this + 76 * IndexOf + 65565, 0x20uLL, "%s.%06d", (const char *)v13, tv_usec);
  }
  else
  {
    ++*((_DWORD *)this + 19 * IndexOf + 16390);
    return snprintf((char *)this + 76 * IndexOf + 65597, 0x20uLL, "%s.%06d", (const char *)v13, tv_usec);
  }
}

uint64_t ot::Max<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  if (a1 >= (int)a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return ot::Max<unsigned short>(a1, a2);
}

void *ot::Buffer::SetNextBuffer(ot::Buffer *this, ot::Buffer *a2)
{
  return ot::LinkedListEntry<ot::Buffer>::SetNext(this, (uint64_t)a2);
}

{
  return ot::Buffer::SetNextBuffer(this, a2);
}

uint64_t ot::MessagePool::GetFreeBufferCount(ot::MessagePool *this)
{
  return (unsigned __int16)(256 - *((_WORD *)this + 32776));
}

uint64_t ot::Buffer::GetNextBuffer(ot::Buffer *this)
{
  return ot::LinkedListEntry<ot::Buffer>::GetNext((uint64_t)this);
}

{
  return ot::LinkedListEntry<ot::Buffer>::GetNext((uint64_t)this);
}

{
  return ot::Buffer::GetNextBuffer(this);
}

{
  return ot::Buffer::GetNextBuffer(this);
}

void *ot::Pool<ot::Buffer,(unsigned short)256>::Free(uint64_t *a1, void *a2)
{
  return ot::LinkedList<ot::Buffer>::Push(a1, a2);
}

{
  return ot::Pool<ot::Buffer,(unsigned short)256>::Free(a1, a2);
}

uint64_t ot::MessagePool::GetTotalBufferCount(ot::MessagePool *this)
{
  return 256;
}

uint64_t ot::MessagePool::GetIndexOf(ot::MessagePool *this, const ot::Buffer *a2)
{
  return (unsigned __int16)ot::Pool<ot::Buffer,(unsigned short)256>::GetIndexOf((uint64_t)this + 8, (uint64_t)a2);
}

{
  return ot::MessagePool::GetIndexOf(this, a2);
}

uint64_t ot::MessagePool::ResetBufferStats(uint64_t this)
{
  for (unsigned __int16 i = 0; i < 0x100u; ++i)
  {
    *(_DWORD *)(this + 65556 + 76 * i) -= *(_DWORD *)(this + 65556 + 76 * i + 4);
    *(_DWORD *)(this + 65556 + 76 * i + ++*(_WORD *)(this + 4) = 0;
    uint64_t v1 = this + 65556 + 76 * i;
    *(_OWORD *)(v1 + 41)  = 0u;
    *(_OWORD *)(v1 + 57)  = 0u;
    if (!*(_DWORD *)v1)
    {
      uint64_t v2 = this + 65556 + 76 * i;
      *(_OWORD *)(v2 + ot::Mle::Tlv::SetType(this, 9) = 0u;
      *(_OWORD *)(v2 + 25)  = 0u;
    }
  }
  return this;
}

BOOL *ot::Message::Settings::Settings(BOOL *result, char a2, BOOL a3)
{
  *uint64_t result = (a2 & 1) != 0;
  result[1]  = a3;
  return result;
}

BOOL *ot::Message::Settings::Settings(BOOL *a1, char a2, BOOL a3)
{
  return a1;
}

void *ot::Message::Settings::From(uint64_t a1)
{
  if (a1) {
    return (void *)ot::AsCoreType<otMessageSettings>(a1);
  }
  else {
    return ot::Message::Settings::GetDefault(0);
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMessageSettings>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t ot::Message::Iterator::Advance(ot::Message::Iterator *this, ot::Message *a2)
{
  *(void *)this  = *((void *)this + 1);
  uint64_t result = ot::Message::Iterator::NextMessage(*((ot::Message::Iterator **)this + 1), a2);
  *((void *)this + 1)  = result;
  return result;
}

uint64_t ot::Message::GetBufferIDs(ot::Message *this, unsigned __int16 a2, unsigned __int16 a3, char *a4)
{
  NextBuffer  = this;
  char v10 = 1;
  snprintf(a4, 0x400uLL, ", BufIDs:");
  if (a2 <= 0xB0u || a2 + a3 <= 0xB0)
  {
    uint64_t v4 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
    IndexOf  = ot::MessagePool::GetIndexOf(v4, NextBuffer);
    unsigned __int16 v5 = strlen(a4);
    snprintf(&a4[v5], 1024 - v5, "%u", IndexOf);
    char v10 = 0;
  }
  for (unsigned __int16 i = 176; ; i += 248)
  {
    uint64_t result = ot::Buffer::GetNextBuffer(NextBuffer);
    if (!result) {
      break;
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
    if (a2 >= (int)i && a2 <= i + 248 || a2 + a3 >= i && a2 + a3 <= i + 248)
    {
      uint64_t v7 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
      unsigned __int16 v14 = ot::MessagePool::GetIndexOf(v7, NextBuffer);
      unsigned __int16 v11 = strlen(a4);
      timeval v8 = "";
      if ((v10 & 1) == 0) {
        timeval v8 = ",";
      }
      snprintf(&a4[v11], 1024 - v11, "%s%u", v8, v14);
      char v10 = 0;
    }
  }
  return result;
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::MessagePool>(ot::Message *a1)
{
  Instance  = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::MessagePool>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::MessagePool>(a1);
}

uint64_t ot::Message::GetBufferIDs(ot::Message *this, char *a2)
{
  NextBuffer  = this;
  uint64_t v2 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
  IndexOf  = ot::MessagePool::GetIndexOf(v2, NextBuffer);
  snprintf(a2, 0x400uLL, ", BufIDs:%u", IndexOf);
  while (1)
  {
    uint64_t result = ot::Buffer::GetNextBuffer(NextBuffer);
    if (!result) {
      break;
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
    unsigned __int16 v5 = (ot::MessagePool *)ot::GetProvider<ot::Message>::Get<ot::MessagePool>(this);
    unsigned __int16 v8 = ot::MessagePool::GetIndexOf(v5, NextBuffer);
    unsigned __int16 v6 = strlen(a2);
    snprintf(&a2[v6], 1024 - v6, ",%u", v8);
  }
  return result;
}

uint64_t ot::Message::ResizeMessage(ot::Message *this, unsigned __int16 a2)
{
  unsigned int v12 = 0;
  NextBuffer  = this;
  for (unsigned __int16 i = 176; i < (int)a2; i += 248)
  {
    if (!ot::Buffer::GetNextBuffer(NextBuffer))
    {
      MessagePool  = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
      unsigned __int8 Priority = ot::Message::GetPriority(this);
      uint64_t v3 = ot::MessagePool::NewBuffer(MessagePool, Priority);
      ot::Buffer::SetNextBuffer(NextBuffer, v3);
      if (!ot::Buffer::GetNextBuffer(NextBuffer)) {
        return 3;
      }
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
  }
  uint64_t v9 = NextBuffer;
  unsigned __int16 v11 = (ot::Buffer *)ot::Buffer::GetNextBuffer(NextBuffer);
  ot::Buffer::SetNextBuffer(v9, 0);
  uint64_t v4 = (ot::MessagePool *)ot::Message::GetMessagePool(this);
  ot::MessagePool::FreeBuffers(v4, v11);
  return v12;
}

void ot::Message::Free(ot::Message *this)
{
  MessagePool  = (ot::MessagePool *)ot::Message::GetMessagePool(this);
  ot::MessagePool::Free(MessagePool, this);
}

uint64_t ot::Message::GetNext(ot::Message *this)
{
  if ((*(_WORD *)(ot::Buffer::GetMetadata(this) + 68) & 0x800) != 0)
  {
    PriorityQueue  = (ot::PriorityQueue *)ot::Message::GetPriorityQueue(this);
    if (!PriorityQueue) {
      return 0;
    }
    ot::PriorityQueue::GetTail(PriorityQueue);
    Tail  = v1;
  }
  else
  {
    MessageQueue  = (ot::MessageQueue *)ot::Message::GetMessageQueue(this);
    if (!MessageQueue) {
      return 0;
    }
    Tail  = (ot::Message *)ot::MessageQueue::GetTail(MessageQueue);
  }
  if (this == Tail) {
    return 0;
  }
  else {
    return *(void *)ot::Message::Next(this);
  }
}

uint64_t ot::Message::GetPriorityQueue(ot::Message *this)
{
  if ((*(_WORD *)(ot::Buffer::GetMetadata(this) + 68) & 0x800) != 0) {
    return *(void *)(ot::Buffer::GetMetadata(this) + 24);
  }
  else {
    return 0;
  }
}

{
  return ot::Message::GetPriorityQueue(this);
}

void ot::PriorityQueue::GetTail(ot::PriorityQueue *this)
{
  ot::AsConst<ot::PriorityQueue>();
  ot::PriorityQueue::GetTail(v1);
  ot::AsNonConst<ot::Message>();
}

{
  ot::PriorityQueue::GetTail(this);
}

uint64_t ot::Message::SetOffset(ot::Message *this, unsigned __int16 a2)
{
  if (a2 > (int)(unsigned __int16)ot::Message::GetLength(this)) {
    __assert_rtn("SetOffset", "message.cpp", 512, "aOffset <= GetLength()");
  }
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  return result;
}

uint64_t ot::Message::GetBufferCount(ot::Message *this)
{
  unsigned __int8 v3 = 1;
  for (unsigned __int16 i = (ot::Buffer *)ot::Buffer::GetNextBuffer(this); i; unsigned __int16 i = (ot::Buffer *)ot::Buffer::GetNextBuffer(i))
    ++v3;
  return v3;
}

uint64_t ot::Message::MoveOffset(ot::Message *this, int a2)
{
  __int16 v7 = a2;
  int v6 = a2 + (unsigned __int16)ot::Message::GetOffset(this);
  if (v6 > (unsigned __int16)ot::Message::GetLength(this)) {
    __assert_rtn("MoveOffset", "message.cpp", 505, "GetOffset() + aDelta <= GetLength()");
  }
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  *(_WORD *)(Metadata + 48) += v7;
  int v4 = *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 48);
  uint64_t result = ot::Message::GetLength(this);
  if (v4 > (unsigned __int16)result) {
    __assert_rtn("MoveOffset", "message.cpp", 507, "GetMetadata().mOffset <= GetLength()");
  }
  return result;
}

BOOL ot::Message::IsSubTypeMle(ot::Message *this)
{
  int v2 = (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 3) & 0xF;
  return (v2 - 1) <= 2 || v2 == 6 || (v2 - 8) <= 2 || v2 == 12;
}

BOOL ot::Message::IsInAQueue(ot::Message *this)
{
  return *(void *)(ot::Buffer::GetMetadata(this) + 24) != 0;
}

{
  return ot::Message::IsInAQueue(this);
}

uint64_t ot::PriorityQueue::Dequeue(ot::PriorityQueue *this, ot::Message *a2)
{
  if ((ot::PriorityQueue *)ot::Message::GetPriorityQueue(a2) != this) {
    __assert_rtn("Dequeue", "message.cpp", 1201, "aMessage.GetPriorityQueue() == this");
  }
  unsigned __int8 Priority = ot::Message::GetPriority(a2);
  unsigned __int16 v8 = (ot::Message *)*((void *)this + Priority);
  if (a2 == v8)
  {
    uint64_t v9 = *(ot::Message **)ot::Message::Prev(v8);
    if (a2 == v9 || Priority != ot::Message::GetPriority(v9)) {
      uint64_t v9 = 0;
    }
    *((void *)this + Priority)  = v9;
  }
  uint64_t v5 = *(void *)ot::Message::Prev(a2);
  int v2 = (ot::Message **)ot::Message::Next(a2);
  *(void *)ot::Message::Prev(*vot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v5;
  uint64_t v6 = *(void *)ot::Message::Next(a2);
  unsigned __int8 v3 = (ot::Message **)ot::Message::Prev(a2);
  *(void *)ot::Message::Next(*v3)  = v6;
  *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return ot::Message::SetPriorityQueue(a2, 0);
}

void *ot::PriorityQueue::Enqueue(ot::PriorityQueue *this, ot::Message *a2)
{
  if (ot::Message::IsInAQueue(a2)) {
    __assert_rtn("Enqueue", "message.cpp", 1170, "!aMessage.IsInAQueue()");
  }
  ot::Message::SetPriorityQueue(a2, this);
  unsigned __int8 Priority = ot::Message::GetPriority(a2);
  ot::PriorityQueue::FindFirstNonNullTail((uint64_t)this, Priority);
  uint64_t v6 = v2;
  if (v2)
  {
    int v4 = *(ot::Message **)ot::Message::Next(v2);
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v4;
    *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v6;
    *(void *)ot::Message::Prev(v++*(_WORD *)(this + 4) = a2;
    uint64_t result = (void *)ot::Message::Next(v6);
  }
  else
  {
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
    uint64_t result = (void *)ot::Message::Prev(a2);
  }
  *uint64_t result = a2;
  *((void *)this + Priority)  = a2;
  return result;
}

char *ot::Message::PriorityToString(unsigned __int8 a1)
{
  return ot::Message::PriorityToString(ot::Message::Priority)::kPriorityStrings[a1];
}

uint64_t ot::Message::AppendBytes(ot::Message *this, char *a2, unsigned __int16 a3)
{
  unsigned __int16 Length = ot::Message::GetLength(this);
  __int16 v3 = ot::Message::GetLength(this);
  unsigned int v7 = ot::Message::SetLength(this, a3 + v3);
  if (!v7) {
    ot::Message::WriteBytes(this, Length, a2, a3);
  }
  return v7;
}

uint64_t ot::Message::WriteBytes(ot::Message *this, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  uint64_t v18 = this;
  unsigned __int16 v17 = a2;
  unsigned __int16 v16 = a3;
  unsigned __int16 v15 = a4;
  unsigned __int16 v14 = a3;
  if (a2 + a4 > (unsigned __int16)ot::Message::GetLength(this)) {
    __assert_rtn("WriteBytes", "message.cpp", 891, "aOffset + aLength <= GetLength()");
  }
  ot::Message::GetFirstChunk(this, v17, &v15, (ot::Message::MutableChunk *)v13);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
    char v6 = v5 | ((unsigned __int16)result == 0);
    if (v6) {
      break;
    }
    ot::Message::MutableChunk::GetBytes((ot::Message::MutableChunk *)v13);
    __dst  = v7;
    __src  = v14;
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
    memmove(__dst, __src, Length);
    unsigned __int16 v9 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
    v14 += v9;
    ot::Message::GetNextChunk(this, &v15, (ot::Message::MutableChunk *)v13);
  }
  return result;
}

uint64_t ot::Message::AppendBytesFromMessage(ot::Message *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned __int16 v19 = this;
  uint64_t v18 = a2;
  unsigned __int16 v17 = a3;
  unsigned __int16 v16 = a4;
  *(_WORD *)&v15[4]  = 0;
  *(_DWORD *)unsigned __int16 v15 = (unsigned __int16)ot::Message::GetLength(this);
  if (v17 + v16 <= (unsigned __int16)ot::Message::GetLength(v18))
  {
    __int16 Length = ot::Message::GetLength(this);
    *(_DWORD *)&_OWORD v15[2] = ot::Message::SetLength(this, v16 + Length);
    if (!*(_DWORD *)&v15[2])
    {
      ot::Message::GetFirstChunk(v18, v17, &v16, (ot::Message::Chunk *)v14);
      while (1)
      {
        __int16 v5 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
        char v7 = v6 | (v5 == 0);
        if (v7) {
          break;
        }
        unsigned __int16 v11 = *(_WORD *)v15;
        uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v14);
        unsigned __int16 v8 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
        ot::Message::WriteBytes(this, v11, Bytes, v8);
        __int16 v9 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
        *(_WORD *)v15 += v9;
        ot::Message::GetNextChunk(v18, &v16, (ot::Message::Chunk *)v14);
      }
    }
  }
  else
  {
    *(_DWORD *)&_OWORD v15[2] = 6;
  }
  return *(unsigned int *)&v15[2];
}

uint64_t ot::Message::GetFirstChunk(ot::Message *this, unsigned __int16 a2, unsigned __int16 *a3, ot::Message::Chunk *a4)
{
  if (a2 < (int)(unsigned __int16)ot::Message::GetLength(this))
  {
    int v10 = a2 + *a3;
    if (v10 >= (unsigned __int16)ot::Message::GetLength(this)) {
      *a3  = ot::Message::GetLength(this) - a2;
    }
    unsigned __int16 v15 = a2 + ot::Message::GetReserved(this);
    ot::Message::Chunk::SetBuffer((uint64_t)a4, this);
    if (v15 >= 0xB0u)
    {
      for (unsigned __int16 i = v15 - 176; ; i -= 248)
      {
        Buffer  = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a4);
        NextBuffer  = (const ot::Buffer *)ot::Buffer::GetNextBuffer(Buffer);
        ot::Message::Chunk::SetBuffer((uint64_t)a4, NextBuffer);
        if (!ot::Message::Chunk::GetBuffer(a4)) {
          __assert_rtn("GetFirstChunk", "message.cpp", 774, "aChunk.GetBuffer() != nullptr");
        }
        if (i < 0xF8u) {
          break;
        }
      }
      char v7 = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a4);
      Data  = ot::Buffer::GetData(v7);
      ot::Data<(ot::DataLengthType)1>::Init((uint64_t)a4, Data + i, 248 - i);
    }
    else
    {
      FirstData  = ot::Buffer::GetFirstData(this);
      ot::Data<(ot::DataLengthType)1>::Init((uint64_t)a4, FirstData + v15, 176 - v15);
    }
  }
  else
  {
    ot::Data<(ot::DataLengthType)1>::SetLength((uint64_t)a4, 0);
  }
  if (*a3 < (int)(unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)a4)) {
    ot::Data<(ot::DataLengthType)1>::SetLength((uint64_t)a4, *a3);
  }
  uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)a4);
  *a3 -= result;
  return result;
}

uint64_t ot::Data<(ot::DataLengthType)1>::GetLength(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

{
  return ot::Data<(ot::DataLengthType)1>::GetLength(a1);
}

uint64_t ot::Data<(ot::DataLengthType)1>::GetBytes(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::Data<(ot::DataLengthType)1>::GetBytes(a1);
}

uint64_t ot::Message::GetNextChunk(ot::Message *this, unsigned __int16 *a2, ot::Message::Chunk *a3)
{
  if (!*a2) {
    return ot::Data<(ot::DataLengthType)1>::SetLength((uint64_t)a3, 0);
  }
  Buffer  = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a3);
  NextBuffer  = (const ot::Buffer *)ot::Buffer::GetNextBuffer(Buffer);
  ot::Message::Chunk::SetBuffer((uint64_t)a3, NextBuffer);
  if (!ot::Message::Chunk::GetBuffer(a3)) {
    __assert_rtn("GetNextChunk", "message.cpp", 806, "aChunk.GetBuffer() != nullptr");
  }
  char v6 = (ot::Buffer *)ot::Message::Chunk::GetBuffer(a3);
  Data  = ot::Buffer::GetData(v6);
  ot::Data<(ot::DataLengthType)1>::Init((uint64_t)a3, Data, 248);
  if (*a2 < (int)(unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)a3)) {
    ot::Data<(ot::DataLengthType)1>::SetLength((uint64_t)a3, *a2);
  }
  uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)a3);
  *a2 -= result;
  return result;
}

uint64_t ot::Message::PrependBytes(ot::Message *this, char *a2, unsigned __int16 a3)
{
  unsigned int v16 = 0;
  while (a3 > (int)(unsigned __int16)ot::Message::GetReserved(this))
  {
    MessagePool  = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
    unsigned __int8 Priority = ot::Message::GetPriority(this);
    unsigned __int16 v15 = ot::MessagePool::NewBuffer(MessagePool, Priority);
    if (!v15) {
      return 3;
    }
    NextBuffer  = (ot::Buffer *)ot::Buffer::GetNextBuffer(this);
    ot::Buffer::SetNextBuffer(v15, NextBuffer);
    ot::Buffer::SetNextBuffer(this, v15);
    if ((unsigned __int16)ot::Message::GetReserved(this) < 0xB0uLL)
    {
      __dst  = (char *)v15 + (unsigned __int16)ot::Message::GetReserved(this) + 80;
      __src  = (char *)this + (unsigned __int16)ot::Message::GetReserved(this) + 80;
      Reserved  = ot::Message::GetReserved(this);
      memcpy(__dst, __src, 176 - Reserved);
    }
    __int16 v6 = ot::Message::GetReserved(this);
    ot::Message::SetReserved(this, v6 + 248);
  }
  __int16 v7 = ot::Message::GetReserved(this);
  ot::Message::SetReserved(this, v7 - a3);
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  *(_WORD *)(Metadata + 46) += a3;
  __int16 Offset = ot::Message::GetOffset(this);
  ot::Message::SetOffset(this, a3 + Offset);
  if (a2) {
    ot::Message::WriteBytes(this, 0, a2, a3);
  }
  return v16;
}

uint64_t ot::Message::RemoveHeader(ot::Message *this, unsigned __int16 a2)
{
  if (a2 > (int)*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 46)) {
    __assert_rtn("RemoveHeader", "message.cpp", 662, "aLength <= GetMetadata().mLength");
  }
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  *(_WORD *)(Metadata + 44) += a2;
  uint64_t v3 = ot::Buffer::GetMetadata(this);
  *(_WORD *)(v3 + 46) -= a2;
  if (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 48) <= (int)a2)
  {
    uint64_t result = ot::Buffer::GetMetadata(this);
    *(_WORD *)(result + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  }
  else
  {
    uint64_t result = ot::Buffer::GetMetadata(this);
    *(_WORD *)(result + 48) -= a2;
  }
  return result;
}

uint64_t ot::Message::RemoveHeader(ot::Message *this, unsigned __int16 a2, unsigned __int16 a3)
{
  return ot::Message::RemoveHeader(this, a3);
}

const ot::Message *ot::Message::WriteBytesFromMessage(const ot::Message *this, unsigned __int16 a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5)
{
  uint64_t v18 = this;
  unsigned __int16 v17 = a2;
  unsigned int v16 = a3;
  unsigned __int16 v15 = a4;
  unsigned __int16 v14 = a5;
  unsigned __int16 v11 = this;
  if (a3 == this && v15 < (int)v17)
  {
    v17 += v14;
    v15 += v14;
    while (v14)
    {
      unsigned __int16 v12 = ot::Min<unsigned short>(0x20u, v14);
      v14 -= v12;
      v15 -= v12;
      v17 -= v12;
      ot::Message::ReadBytes(v11, v15, v19, v12);
      this  = (const ot::Message *)ot::Message::WriteBytes(v11, v17, v19, v12);
    }
  }
  else
  {
    ot::Message::GetFirstChunk(v16, v15, &v14, (ot::Message::Chunk *)v13);
    while (1)
    {
      this  = (const ot::Message *)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
      char v6 = v5 | ((unsigned __int16)this == 0);
      if (v6) {
        break;
      }
      unsigned __int16 v9 = v17;
      uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v13);
      unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
      ot::Message::WriteBytes(v11, v9, Bytes, Length);
      __int16 v8 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v13);
      v17 += v8;
      ot::Message::GetNextChunk(v16, &v14, (ot::Message::Chunk *)v13);
    }
  }
  return this;
}

uint64_t ot::Message::InsertHeader(ot::Message *this, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v5 = ot::Message::PrependBytes(this, 0, a3);
  if (!v5) {
    ot::Message::WriteBytesFromMessage(this, 0, this, a3, a2);
  }
  return v5;
}

uint64_t ot::Data<(ot::DataLengthType)1>::SetLength(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  return result;
}

{
  return ot::Data<(ot::DataLengthType)1>::SetLength(result, a2);
}

uint64_t ot::Message::Chunk::SetBuffer(uint64_t this, const ot::Buffer *a2)
{
  *(void *)(this + 16)  = a2;
  return this;
}

{
  return ot::Message::Chunk::SetBuffer(this, a2);
}

uint64_t ot::Data<(ot::DataLengthType)1>::Init(uint64_t result, uint64_t a2, __int16 a3)
{
  *(void *)uint64_t result = a2;
  *(_WORD *)(result + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a3;
  return result;
}

{
  return ot::Data<(ot::DataLengthType)1>::Init(result, a2, a3);
}

uint64_t ot::Message::Chunk::GetBuffer(ot::Message::Chunk *this)
{
  return *((void *)this + 2);
}

{
  return ot::Message::Chunk::GetBuffer(this);
}

uint64_t ot::Buffer::GetData(ot::Buffer *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::Buffer::GetData(this);
}

uint64_t ot::Message::ReadBytes(ot::Message *this, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  unsigned __int16 v15 = this;
  unsigned __int16 v14 = a2;
  uint64_t v13 = a3;
  unsigned __int16 v12 = a4;
  unsigned __int16 v11 = a3;
  ot::Message::GetFirstChunk(this, a2, &v12, (ot::Message::Chunk *)v10);
  while (1)
  {
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    char v6 = v5 | (Length == 0);
    if (v6) {
      break;
    }
    ot::Data<(ot::DataLengthType)1>::CopyBytesTo((uint64_t)v10, v11);
    unsigned __int16 v7 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    v11 += v7;
    ot::Message::GetNextChunk(this, &v12, (ot::Message::Chunk *)v10);
  }
  return (unsigned __int16)((_WORD)v11 - (_WORD)v13);
}

void *ot::Data<(ot::DataLengthType)1>::CopyBytesTo(uint64_t a1, void *a2)
{
  return memcpy(a2, *(const void **)a1, *(unsigned __int16 *)(a1 + 8));
}

{
  return ot::Data<(ot::DataLengthType)1>::CopyBytesTo(a1, a2);
}

uint64_t ot::Message::Read(ot::Message *this, unsigned __int16 a2, char *a3, unsigned __int16 a4)
{
  if (a4 == (unsigned __int16)ot::Message::ReadBytes(this, a2, a3, a4)) {
    return 0;
  }
  else {
    return 6;
  }
}

BOOL ot::Message::CompareBytes(ot::Message *this, unsigned __int16 a2, const unsigned __int8 *a3, unsigned __int16 a4, BOOL (*a5)(unsigned __int8, unsigned __int8))
{
  uint64_t v21 = this;
  unsigned __int16 v20 = a2;
  unsigned __int16 v19 = a3;
  unsigned __int16 v18 = a4;
  unsigned __int16 v17 = a5;
  unsigned __int16 v16 = a4;
  unsigned __int16 v15 = a3;
  ot::Message::GetFirstChunk(this, a2, &v18, (ot::Message::Chunk *)v14);
  while (1)
  {
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    char v9 = v8 | (Length == 0);
    if ((v9 & 1) != 0
      || (ot::Data<(ot::DataLengthType)1>::MatchesBytesIn((uint64_t)v14, v15, (uint64_t)v17, v6, v7) & 1) == 0)
    {
      break;
    }
    unsigned __int16 v10 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    v15 += v10;
    __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    v16 -= v11;
    ot::Message::GetNextChunk(this, &v18, (ot::Message::Chunk *)v14);
  }
  return v16 == 0;
}

uint64_t ot::Data<(ot::DataLengthType)1>::MatchesBytesIn(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, BOOL (*a5)(unsigned __int8, unsigned __int8))
{
  return ot::DataUtils::MatchBytes(*(ot::DataUtils **)a1, a2, (const unsigned __int8 *)*(unsigned __int16 *)(a1 + 8), a3, a5) & 1;
}

{
  return ot::Data<(ot::DataLengthType)1>::MatchesBytesIn(a1, a2, a3, a4, a5);
}

BOOL ot::Message::CompareBytes(ot::Message *this, unsigned __int16 a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5, BOOL (*a6)(unsigned __int8, unsigned __int8))
{
  uint64_t v24 = this;
  unsigned __int16 v23 = a2;
  uint64_t v22 = a3;
  unsigned __int16 v21 = a4;
  unsigned __int16 v20 = a5;
  unsigned __int16 v19 = a6;
  unsigned __int16 v18 = a5;
  ot::Message::GetFirstChunk(this, a2, &v20, (ot::Message::Chunk *)v17);
  while (1)
  {
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    char v8 = v7 | (Length == 0);
    if (v8) {
      break;
    }
    unsigned __int16 v15 = v22;
    unsigned __int16 v13 = v21;
    uint64_t Bytes = (const unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
    unsigned __int16 v9 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    if (!ot::Message::CompareBytes(v15, v13, Bytes, v9, v19)) {
      break;
    }
    __int16 v10 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    v21 += v10;
    __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    v18 -= v11;
    ot::Message::GetNextChunk(this, &v20, (ot::Message::Chunk *)v17);
  }
  return v18 == 0;
}

uint64_t ot::Message::GetFirstChunk(ot::Message *this, unsigned __int16 a2, unsigned __int16 *a3, ot::Message::MutableChunk *a4)
{
  ot::AsConst<ot::Message>();
  return ot::Message::GetFirstChunk(v4, a2, a3, a4);
}

{
  return ot::Message::GetFirstChunk(this, a2, a3, a4);
}

void ot::Message::MutableChunk::GetBytes(ot::Message::MutableChunk *this)
{
}

{
  ot::Message::MutableChunk::GetBytes(this);
}

uint64_t ot::Message::GetNextChunk(ot::Message *this, unsigned __int16 *a2, ot::Message::MutableChunk *a3)
{
  ot::AsConst<ot::Message>();
  return ot::Message::GetNextChunk(v3, a2, a3);
}

{
  return ot::Message::GetNextChunk(this, a2, a3);
}

ot::Message *ot::Message::Clone(ot::Message *this, unsigned __int16 a2)
{
  unsigned __int16 v18 = this;
  unsigned __int16 v17 = a2;
  int appended = 0;
  unsigned __int16 v15 = 0;
  BOOL v9 = (ot::Message::IsLinkSecurityEnabled(this) & 1) != 0;
  char Priority = ot::Message::GetPriority(this);
  ot::Message::Settings::Settings(v14, v9, Priority);
  unsigned __int16 Length = ot::Message::GetLength(this);
  unsigned __int16 v17 = ot::Min<unsigned short>(Length, v17);
  MessagePool  = (ot::InstanceLocator *)ot::Message::GetMessagePool(this);
  char Type = ot::Message::GetType(this);
  Reserved  = ot::Message::GetReserved(this);
  unsigned __int16 v15 = ot::MessagePool::Allocate(MessagePool, Type, Reserved, (ot::Message::Settings *)v14);
  if (v15)
  {
    int appended = ot::Message::AppendBytesFromMessage(v15, this, 0, v17);
    if (!appended)
    {
      unsigned __int16 Offset = ot::Message::GetOffset(this);
      unsigned __int16 v13 = ot::Min<unsigned short>(Offset, v17);
      ot::Message::SetOffset(v15, v13);
      char v8 = v15;
      Subchar Type = ot::Message::GetSubType(this);
      ot::Message::SetSubType(v8, SubType);
    }
  }
  else
  {
    int appended = 3;
  }
  if (appended && v15)
  {
    ot::Message::Free(v15);
    return 0;
  }
  return v15;
}

uint64_t ot::Message::SetSubType(ot::Buffer *a1, char a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_WORD *)(result + 6ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)(result + 68) & 0xFF87 | (8 * (a2 & 0xF));
  return result;
}

{
  return ot::Message::SetSubType(a1, a2);
}

uint64_t ot::Message::GetSubType(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 3) & 0xF;
}

{
  return ot::Message::GetSubType(this);
}

BOOL ot::Message::GetChildMask(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::Get(Metadata + 60, a2);
}

BOOL ot::BitVector<(unsigned short)64>::Get(uint64_t a1, unsigned __int16 a2)
{
  if (a2 >= 0x40u) {
    __assert_rtn("Get", "bit_vector.hpp", 76, "aIndex < N");
  }
  return (*(unsigned __int8 *)(a1 + a2 / 8) & (128 >> (a2 % 8))) != 0;
}

{
  return ot::BitVector<(unsigned short)64>::Get(a1, a2);
}

uint64_t ot::Message::ClearChildMask(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::Set(Metadata + 60, a2, 0);
}

uint64_t ot::BitVector<(unsigned short)64>::Set(uint64_t result, unsigned __int16 a2, char a3)
{
  if (a2 >= 0x40u) {
    __assert_rtn("Set", "bit_vector.hpp", 89, "aIndex < N");
  }
  if (a3) {
    *(unsigned char *)(result + a2 / 8) |= 128 >> (a2 % 8);
  }
  else {
    *(unsigned char *)(result + a2 / 8) &= ~(128 >> (a2 % 8));
  }
  return result;
}

{
  return ot::BitVector<(unsigned short)64>::Set(result, a2, a3);
}

uint64_t ot::Message::SetChildMask(ot::Message *this, unsigned __int16 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::Set(Metadata + 60, a2, 1);
}

uint64_t ot::Message::IsChildPending(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::BitVector<(unsigned short)64>::HasAny((unsigned char *)(Metadata + 60)) & 1;
}

uint64_t ot::BitVector<(unsigned short)64>::HasAny(unsigned char *a1)
{
  char v3 = 0;
  for (unsigned __int16 i = a1; i != a1 + 8; ++i)
  {
    if (*i)
    {
      char v3 = 1;
      return v3 & 1;
    }
  }
  return v3 & 1;
}

{
  return ot::BitVector<(unsigned short)64>::HasAny(a1);
}

uint64_t ot::Message::SetLinkInfo(ot::Message *this, const ot::ThreadLinkInfo *a2)
{
  return ot::Message::AddLqi(this, *((unsigned char *)a2 + 4));
}

uint64_t ot::Message::SetPanId(ot::Message *this, __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 5ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return result;
}

{
  return ot::Message::SetPanId(this, a2);
}

void ot::Message::AddRss(ot::Message *this, char a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  ot::RssAverager::Add((ot::RssAverager *)(Metadata + 56), a2);
  IgnoreError();
}

{
  ot::Message::AddRss(this, a2);
}

uint64_t ot::Message::AddLqi(ot::Message *this, unsigned __int8 a2)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::LqiAverager::Add((ot::LqiAverager *)(Metadata + 58), a2);
}

{
  return ot::Message::AddLqi(this, a2);
}

uint64_t ot::Message::IsTimeSync(ot::Message *this)
{
  return 0;
}

uint64_t ot::Message::SetMessageQueue(ot::Message *this, ot::MessageQueue *a2)
{
  *(void *)(ot::Buffer::GetMetadata(this) + 2++*(_WORD *)(this + 4) = a2;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) &= ~0x800u;
  return result;
}

uint64_t ot::Message::SetPriorityQueue(ot::Message *this, ot::PriorityQueue *a2)
{
  *(void *)(ot::Buffer::GetMetadata(this) + 2++*(_WORD *)(this + 4) = a2;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 6ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)(result + 68) & 0xF7FF | 0x800;
  return result;
}

ot::Message **ot::MessageQueue::Enqueue(ot::MessageQueue *a1, ot::Message *a2, char a3)
{
  if (ot::Message::IsInAQueue(a2)) {
    __assert_rtn("Enqueue", "message.cpp", 1025, "!aMessage.IsInAQueue()");
  }
  BOOL v8 = 0;
  if (!*(void *)ot::Message::Next(a2)) {
    BOOL v8 = *(void *)ot::Message::Prev(a2) == 0;
  }
  if (!v8) {
    __assert_rtn("Enqueue", "message.cpp", 1026, "(aMessage.Next() == nullptr) && (aMessage.Prev() == nullptr)");
  }
  ot::Message::SetMessageQueue(a2, a1);
  if (ot::MessageQueue::GetTail(a1))
  {
    Tail  = (ot::Message *)ot::MessageQueue::GetTail(a1);
    uint64_t v6 = *(ot::Message **)ot::Message::Next(Tail);
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v6;
    uint64_t v7 = ot::MessageQueue::GetTail(a1);
    *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v7;
    *(void *)ot::Message::Prev(v6)  = a2;
    char v5 = (ot::Message *)ot::MessageQueue::GetTail(a1);
    uint64_t result = (ot::Message **)ot::Message::Next(v5);
    *uint64_t result = a2;
    if (a3 == 1) {
      return (ot::Message **)ot::MessageQueue::SetTail(a1, (uint64_t)a2);
    }
  }
  else
  {
    *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
    *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
    return (ot::Message **)ot::MessageQueue::SetTail(a1, (uint64_t)a2);
  }
  return result;
}

uint64_t ot::MessageQueue::Dequeue(ot::MessageQueue *this, ot::Message *a2)
{
  if ((ot::MessageQueue *)ot::Message::GetMessageQueue(a2) != this) {
    __assert_rtn("Dequeue", "message.cpp", 1056, "aMessage.GetMessageQueue() == this");
  }
  BOOL v9 = 0;
  if (*(void *)ot::Message::Next(a2)) {
    BOOL v9 = *(void *)ot::Message::Prev(a2) != 0;
  }
  if (!v9) {
    __assert_rtn("Dequeue", "message.cpp", 1057, "(aMessage.Next() != nullptr) && (aMessage.Prev() != nullptr)");
  }
  if (a2 == (ot::Message *)ot::MessageQueue::GetTail(this))
  {
    Tail  = (ot::Message *)ot::MessageQueue::GetTail(this);
    char v3 = (uint64_t *)ot::Message::Prev(Tail);
    ot::MessageQueue::SetTail(this, *v3);
    if (a2 == (ot::Message *)ot::MessageQueue::GetTail(this)) {
      ot::MessageQueue::SetTail(this, 0);
    }
  }
  uint64_t v7 = *(void *)ot::Message::Next(a2);
  int v4 = (ot::Message **)ot::Message::Prev(a2);
  *(void *)ot::Message::Next(*v++*(_WORD *)(this + 4) = v7;
  uint64_t v8 = *(void *)ot::Message::Prev(a2);
  char v5 = (ot::Message **)ot::Message::Next(a2);
  *(void *)ot::Message::Prev(*v5)  = v8;
  *(void *)ot::Message::Prev(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *(void *)ot::Message::Next(aot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return ot::Message::SetMessageQueue(a2, 0);
}

void ot::MessageQueue::DequeueAndFree(ot::MessageQueue *this, ot::Message *a2)
{
}

ot::Message *ot::MessageQueue::DequeueAndFreeAll(ot::MessageQueue *this)
{
  while (1)
  {
    uint64_t result = (ot::Message *)ot::MessageQueue::GetHead(this);
    if (!result) {
      break;
    }
    ot::MessageQueue::DequeueAndFree(this, result);
  }
  return result;
}

uint64_t ot::MessageQueue::begin(ot::MessageQueue *this)
{
  Head  = (ot::Message *)ot::MessageQueue::GetHead(this);
  _ZN2ot4Coap7Message8IteratorCI2NS_7Message8IteratorEEPS3_((ot::Message::Iterator *)&v3, Head);
  return v3;
}

{
  uint64_t Head;
  uint64_t v3;

  Head  = ot::MessageQueue::GetHead(this);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

BOOL ot::MessageQueue::GetInfo(ot::MessageQueue *a1, uint64_t a2)
{
  __int16 v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a1;
  uint64_t v7 = (ot::Message *)ot::MessageQueue::begin(a1);
  uint64_t v6 = ot::MessageQueue::end(v8);
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v7, &v6);
    if (!result) {
      break;
    }
    char v5 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v7);
    ++*(_WORD *)v9;
    BufferCount  = ot::Message::GetBufferCount(v5);
    *(_WORD *)(v9 + 2) += BufferCount;
    unsigned __int16 Length = ot::Message::GetLength(v5);
    *(_DWORD *)(v9 + 4) += Length;
    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v7);
  }
  return result;
}

uint64_t ot::MessageQueue::end(ot::MessageQueue *this)
{
  uint64_t v2 = 0;
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)&v2);
  return v2;
}

{
  uint64_t v2;

  ot::Coap::Message::Iterator::Iterator((ot::Coap::Message::Iterator *)&v2);
  return v2;
}

{
  return ot::MessageQueue::end(this);
}

{
  return ot::MessageQueue::end(this);
}

uint64_t ot::PriorityQueue::FindFirstNonNullTail(ot::PriorityQueue *a1, unsigned __int8 a2)
{
  uint64_t v5 = 0;
  unsigned __int8 Priority = a2;
  while (!*((void *)a1 + Priority))
  {
    unsigned __int8 Priority = ot::PriorityQueue::PrevPriority(a1, Priority);
    if (Priority == a2) {
      return v5;
    }
  }
  return *((void *)a1 + Priority);
}

uint64_t ot::PriorityQueue::PrevPriority(ot::PriorityQueue *this, char a2)
{
  if (a2 == 3) {
    return 0;
  }
  else {
    return (a2 + 1);
  }
}

{
  return ot::PriorityQueue::PrevPriority(this, a2);
}

uint64_t ot::PriorityQueue::GetHead(ot::PriorityQueue *this)
{
  FirstNonNullTail  = (ot::Message *)ot::PriorityQueue::FindFirstNonNullTail(this, 0);
  return ot::Message::NextOf(FirstNonNullTail, v2);
}

uint64_t ot::PriorityQueue::GetHeadForPriority(ot::PriorityQueue *a1, unsigned __int8 a2)
{
  if (!*((void *)a1 + a2)) {
    return 0;
  }
  unsigned __int8 Priority = ot::PriorityQueue::PrevPriority(a1, a2);
  FirstNonNullTail  = (ot::Message *)ot::PriorityQueue::FindFirstNonNullTail(a1, Priority);
  if (!FirstNonNullTail) {
    __assert_rtn("GetHeadForPriority", "message.cpp", 1150, "previousTail != nullptr");
  }
  return *(void *)ot::Message::Next(FirstNonNullTail);
}

uint64_t ot::PriorityQueue::GetTail(ot::PriorityQueue *this)
{
  return ot::PriorityQueue::FindFirstNonNullTail(this, 0);
}

void ot::PriorityQueue::FindFirstNonNullTail(uint64_t a1, unsigned __int8 a2)
{
  ot::AsConst<ot::PriorityQueue>();
  ot::PriorityQueue::FindFirstNonNullTail(v2, a2);
  ot::AsNonConst<ot::Message>();
}

{
  ot::PriorityQueue::FindFirstNonNullTail(a1, a2);
}

void ot::PriorityQueue::DequeueAndFree(ot::PriorityQueue *this, ot::Message *a2)
{
}

void ot::PriorityQueue::DequeueAndFreeAll(ot::PriorityQueue *this)
{
  while (1)
  {
    ot::PriorityQueue::GetHead(this);
    if (!v1) {
      break;
    }
    ot::PriorityQueue::DequeueAndFree(this, v1);
  }
}

void ot::PriorityQueue::GetHead(ot::PriorityQueue *this)
{
  ot::AsConst<ot::PriorityQueue>();
  ot::PriorityQueue::GetHead(v1);
  ot::AsNonConst<ot::Message>();
}

{
  ot::PriorityQueue::GetHead(this);
}

uint64_t ot::PriorityQueue::begin(ot::PriorityQueue *this)
{
  ot::PriorityQueue::GetHead(this);
  _ZN2ot4Coap7Message8IteratorCI2NS_7Message8IteratorEEPS3_((ot::Message::Iterator *)&v3, v1);
  return v3;
}

{
  uint64_t Head;
  uint64_t v3;

  Head  = ot::PriorityQueue::GetHead(this);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

BOOL ot::PriorityQueue::GetInfo(ot::PriorityQueue *a1, uint64_t a2)
{
  __int16 v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a1;
  uint64_t v7 = (ot::Message *)ot::PriorityQueue::begin(a1);
  uint64_t v6 = ot::PriorityQueue::end(v8);
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v7, &v6);
    if (!result) {
      break;
    }
    uint64_t v5 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v7);
    ++*(_WORD *)v9;
    BufferCount  = ot::Message::GetBufferCount(v5);
    *(_WORD *)(v9 + 2) += BufferCount;
    unsigned __int16 Length = ot::Message::GetLength(v5);
    *(_DWORD *)(v9 + 4) += Length;
    ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v7);
  }
  return result;
}

uint64_t ot::PriorityQueue::end(ot::PriorityQueue *this)
{
  uint64_t v2 = 0;
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)&v2);
  return v2;
}

{
  uint64_t v2;

  ot::Coap::Message::Iterator::Iterator((ot::Coap::Message::Iterator *)&v2);
  return v2;
}

{
  return ot::PriorityQueue::end(this);
}

{
  return ot::PriorityQueue::end(this);
}

void *ot::LinkedListEntry<ot::Buffer>::SetNext(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Buffer>::SetNext(result, a2);
}

uint64_t ot::LinkedListEntry<ot::Buffer>::GetNext(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedListEntry<ot::Buffer>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Buffer>::GetNext(a1);
}

uint64_t ot::Pool<ot::Buffer,(unsigned short)256>::GetIndexOf(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)((a2 - (a1 + 8)) / 256);
}

{
  return ot::Pool<ot::Buffer,(unsigned short)256>::GetIndexOf(a1, a2);
}

void *ot::LinkedList<ot::Buffer>::Push(uint64_t *a1, void *a2)
{
  BOOL result = ot::LinkedListEntry<ot::Buffer>::SetNext(a2, *a1);
  *a1  = (uint64_t)a2;
  return result;
}

{
  return ot::LinkedList<ot::Buffer>::Push(a1, a2);
}

uint64_t ot::LinkedList<ot::Buffer>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Buffer>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::Buffer>::Pop(a1);
}

uint64_t __cxx_global_var_init_5()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_5()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_message_cpp()
{
  return __cxx_global_var_init_1_5();
}

ot::Notifier *ot::Notifier::Notifier(ot::Notifier *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::LinkedList<ot::Coap::Resource>::LinkedList(this);
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1);
  ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::TaskletIn((void *)this + 2, (uint64_t)a2);
  uint64_t v5 = (void *)((char *)this + 32);
  do
  {
    ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(v5);
    BOOL v2 = v5 + 2 != (void *)((char *)this + 96);
    v5 += 2;
  }
  while (v2);
  for (unsigned __int16 i = (void *)((char *)this + 32); i != (void *)((char *)this + 96); i += 2)
    ot::CallbackBase<void (*)(unsigned long long,void *)>::Clear(i);
  return this;
}

{
  ot::Notifier::Notifier(this, a2);
  return this;
}

uint64_t ot::Notifier::EmitEvents(ot::Notifier *this)
{
  v35[1]  = (uint64_t)this;
  ot::LinkedList<ot::Coap::Resource>::LinkedList(v35);
  uint64_t result = ot::Events::IsEmpty(this);
  if ((result & 1) == 0)
  {
    v35[0]  = *(void *)this;
    ot::Events::Clear(this);
    uint64_t v34 = v35[0];
    ot::Notifier::LogEvents((uint64_t)this, v35[0]);
    BOOL v2 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t v33 = v35[0];
    ot::Mle::Mle::HandleNotifierEvents(v2, v35[0]);
    uint64_t v3 = (ot::Message **)ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(this);
    uint64_t v32 = v35[0];
    ot::EnergyScanServer::HandleNotifierEvents(v3, v35[0]);
    int v4 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
    uint64_t v31 = v35[0];
    ot::MeshCoP::JoinerRouter::HandleNotifierEvents(v4, v35[0]);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
    uint64_t v30 = v35[0];
    ot::BackboneRouter::Manager::HandleNotifierEvents(v5, v35[0]);
    uint64_t v6 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(this);
    uint64_t v29 = v35[0];
    ot::ChildSupervisor::HandleNotifierEvents(v6, v35[0]);
    uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(this);
    uint64_t v28 = v35[0];
    ot::MeshCoP::DatasetUpdater::HandleNotifierEvents(v7, v35[0]);
    uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    uint64_t v27 = v35[0];
    ot::NetworkData::Notifier::HandleNotifierEvents(v8, v35[0]);
    uint64_t v9 = (ot::AnnounceSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
    uint64_t v26 = v35[0];
    ot::AnnounceSender::HandleNotifierEvents(v9, v35[0]);
    __int16 v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
    uint64_t v25 = v35[0];
    ot::MeshCoP::BorderAgent::HandleNotifierEvents(v10, v35[0]);
    __int16 v11 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
    uint64_t v24 = v35[0];
    ot::MlrManager::HandleNotifierEvents(v11, v35[0]);
    unsigned __int16 v12 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
    uint64_t v23 = v35[0];
    ot::DuaManager::HandleNotifierEvents(v12, v35[0]);
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(this);
    uint64_t v22 = v35[0];
    ot::Utils::Slaac::HandleNotifierEvents(v13, v35[0]);
    unsigned __int16 v14 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    uint64_t v21 = v35[0];
    uint64_t result = ot::Utils::HistoryTracker::HandleNotifierEvents(v14, v35[0]);
    unsigned __int16 v20 = (char *)this + 32;
    unsigned __int16 v19 = (char *)this + 32;
    unsigned __int16 v18 = (char *)this + 96;
    while (v19 != v18)
    {
      v17[1]  = v19;
      unsigned __int16 v15 = v19;
      v17[0]  = ot::Events::GetAsFlags((ot::Events *)v35);
      uint64_t result = (uint64_t)ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned long long>(v15, v17);
      v19 += 16;
    }
  }
  return result;
}

void *ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::HandleTasklet);
  return a1;
}

void *ot::CallbackBase<void (*)(unsigned long long,void *)>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::CallbackBase<void (*)(unsigned long long,void *)>::Clear(result);
}

uint64_t ot::Notifier::RegisterCallback(ot::Notifier *this, void (*a2)(unint64_t, void *), uint64_t a3)
{
  unsigned int v7 = 0;
  uint64_t v6 = 0;
  if (a2)
  {
    uint64_t v5 = (char *)this + 32;
    int v4 = (char *)this + 96;
    while (v5 != v4)
    {
      if (ot::CallbackBase<void (*)(unsigned long long,void *)>::Matches(v5, (uint64_t)a2, a3)) {
        return 24;
      }
      if (!ot::CallbackBase<void (*)(unsigned long long,void *)>::IsSet(v5) && !v6) {
        uint64_t v6 = v5;
      }
      v5 += 16;
    }
    if (v6) {
      ot::CallbackBase<void (*)(unsigned long long,void *)>::Set(v6, (uint64_t)a2, a3);
    }
    else {
      return 3;
    }
  }
  return v7;
}

BOOL ot::CallbackBase<void (*)(unsigned long long,void *)>::Matches(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = 0;
  if (*a1 == a2) {
    return a1[1] == a3;
  }
  return v4;
}

{
  return ot::CallbackBase<void (*)(unsigned long long,void *)>::Matches(a1, a2, a3);
}

BOOL ot::CallbackBase<void (*)(unsigned long long,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(unsigned long long,void *)>::IsSet(a1);
}

void *ot::CallbackBase<void (*)(unsigned long long,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(unsigned long long,void *)>::Set(result, a2, a3);
}

uint64_t ot::Notifier::RemoveCallback(uint64_t this, void (*a2)(unint64_t, void *), uint64_t a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    for (unsigned __int16 i = (void *)(this + 32); i != (void *)(v3 + 96); i += 2)
    {
      this  = ot::CallbackBase<void (*)(unsigned long long,void *)>::Matches(i, (uint64_t)a2, a3);
      if (this) {
        this  = (uint64_t)ot::CallbackBase<void (*)(unsigned long long,void *)>::Clear(i);
      }
    }
  }
  return this;
}

uint64_t ot::Notifier::Signal(void *a1, uint64_t a2)
{
  return ot::Tasklet::Post((ot::Tasklet *)(a1 + 2));
}

void *ot::Events::Add(void *result, uint64_t a2)
{
  *result |= a2;
  return result;
}

{
  return ot::Events::Add(result, a2);
}

uint64_t ot::Notifier::SignalIfFirst(void *a1, uint64_t a2)
{
  uint64_t result = ot::Notifier::HasSignaled((uint64_t)a1, a2);
  if ((result & 1) == 0) {
    return ot::Notifier::Signal(a1, a2);
  }
  return result;
}

BOOL ot::Notifier::HasSignaled(uint64_t a1, uint64_t a2)
{
  return ot::Events::Contains((void *)(a1 + 8), a2);
}

{
  return ot::Notifier::HasSignaled(a1, a2);
}

BOOL ot::Events::IsEmpty(ot::Events *this)
{
  return *(void *)this == 0;
}

{
  return ot::Events::IsEmpty(this);
}

void *ot::Events::Clear(void *this)
{
  *this  = 0;
  return this;
}

{
  return ot::Events::Clear(this);
}

void ot::Notifier::LogEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  AsFlags  = ot::Events::GetAsFlags((ot::Events *)&v23);
  char v21 = 0;
  ot::String<(unsigned short)95>::String((uint64_t)v24);
  for (unsigned __int8 i = 0; i < 0x40uLL && AsFlags; ++i)
  {
    if ((AsFlags & (1 << i)) != 0)
    {
      if ((unsigned __int16)ot::StringWriter::GetLength((ot::StringWriter *)v24) >= 0x46u)
      {
        char v18 = ot::Events::GetAsFlags((ot::Events *)&v23);
        ot::String<(unsigned short)95>::AsCString((uint64_t)v24);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Notifier", "StateChanged (0x%llx) %s%s ...", v2, v3, v4, v5, v6, v7, v18);
        ot::StringWriter::Clear((uint64_t)v24);
        char v21 = 0;
      }
      uint64_t v8 = " ";
      if ((v21 & 1) == 0) {
        uint64_t v8 = "";
      }
      unsigned __int16 v17 = v8;
      uint64_t v9 = ot::Notifier::EventToString(a1, 1 << i);
      ot::StringWriter::Append((ot::StringWriter *)v24, "%s%s", v17, v9);
      char v21 = 1;
      AsFlags ^= 1 << i;
    }
  }
  char v16 = ot::Events::GetAsFlags((ot::Events *)&v23);
  ot::String<(unsigned short)95>::AsCString((uint64_t)v24);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Notifier", "StateChanged (0x%llx) %s%s]", v10, v11, v12, v13, v14, v15, v16);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::EnergyScanServer>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::JoinerRouter>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::DatasetUpdater>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::AnnounceSender>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::BorderAgent>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::Slaac>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(a1);
}

void *ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned long long>(void *result, void *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned long long>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned long long>(result, a2);
}

uint64_t ot::Events::GetAsFlags(ot::Events *this)
{
  return *(void *)this;
}

{
  return ot::Events::GetAsFlags(this);
}

uint64_t ot::String<(unsigned short)95>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 95);
  return a1;
}

uint64_t ot::StringWriter::GetLength(ot::StringWriter *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::StringWriter::GetLength(this);
}

uint64_t ot::String<(unsigned short)95>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)95>::AsCString(a1);
}

char *ot::Notifier::EventToString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = "(unknown)";
  for (unsigned __int8 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)34>(); ++i)
  {
    if (a2 == 1 << i) {
      return ot::Notifier::EventToString(ot::Event)const::kEventStrings[i];
    }
  }
  return (char *)v4;
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)34>()
{
  return 34;
}

{
  return ot::GetArrayLength<char const*,(unsigned short)34>();
}

uint64_t ot::TaskletIn<ot::Notifier,&ot::Notifier::EmitEvents>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
  return ot::Notifier::EmitEvents(v2);
}

uint64_t ot::Instance::Get<ot::EnergyScanServer>(uint64_t a1)
{
  return a1 + 153848;
}

{
  return ot::Instance::Get<ot::EnergyScanServer>(a1);
}

uint64_t ot::Instance::Get<ot::MeshCoP::DatasetUpdater>(uint64_t a1)
{
  return a1 + 166208;
}

{
  return ot::Instance::Get<ot::MeshCoP::DatasetUpdater>(a1);
}

uint64_t ot::Instance::Get<ot::AnnounceSender>(uint64_t a1)
{
  return a1 + 166256;
}

{
  return ot::Instance::Get<ot::AnnounceSender>(a1);
}

uint64_t ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned long long>(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(unsigned long long,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned long long>(a1, a2);
}

void ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::NetworkInfo *a1, unsigned __int8 a2)
{
  char v21 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::NetworkInfo::GetRloc16(a1);
  ExtAddress  = (ot::Mac::ExtAddress *)ot::SettingsBase::NetworkInfo::GetExtAddress(a1);
  ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v25);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v25);
  unsigned __int8 Role = ot::SettingsBase::NetworkInfo::GetRole(a1);
  ot::Mle::RoleToString(Role);
  ot::SettingsBase::NetworkInfo::GetDeviceMode(a1);
  ot::SettingsBase::NetworkInfo::GetVersion(a1);
  KeySequence  = ot::SettingsBase::NetworkInfo::GetKeySequence(a1);
  ot::ToUlong(KeySequence);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s NetworkInfo {rloc:0x%04x, extaddr:%s, role:%s, mode:0x%02x, version:%u, keyseq:0x%lx, ...", v5, v6, v7, v8, v9, v10, v21);
  Previousuint64_t PartitionId = ot::SettingsBase::NetworkInfo::GetPreviousPartitionId(a1);
  char v23 = ot::ToUlong(PreviousPartitionId);
  MleFrameCounter  = ot::SettingsBase::NetworkInfo::GetMleFrameCounter(a1);
  ot::ToUlong(MleFrameCounter);
  MacFrameCounter  = ot::SettingsBase::NetworkInfo::GetMacFrameCounter(a1);
  ot::ToUlong(MacFrameCounter);
  MeshLocalIid  = (ot::Ip6::InterfaceIdentifier *)ot::SettingsBase::NetworkInfo::GetMeshLocalIid(a1);
  ot::Ip6::InterfaceIdentifier::ToString(MeshLocalIid, (ot::StringWriter *)v24);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v24);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "... pid:0x%lx, mlecntr:0x%lx, maccntr:0x%lx, mliid:%s}", v15, v16, v17, v18, v19, v20, v23);
}

char *ot::SettingsBase::ActionToString(unsigned __int8 a1)
{
  return ot::SettingsBase::ActionToString(ot::SettingsBase::Action)::kActionStrings[a1];
}

uint64_t ot::SettingsBase::NetworkInfo::GetRloc16(ot::SettingsBase::NetworkInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 1));
}

{
  return ot::SettingsBase::NetworkInfo::GetRloc16(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetExtAddress(ot::SettingsBase::NetworkInfo *this)
{
  return (uint64_t)this + 20;
}

{
  return ot::SettingsBase::NetworkInfo::GetExtAddress(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetRole(ot::SettingsBase::NetworkInfo *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::SettingsBase::NetworkInfo::GetRole(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetDeviceMode(ot::SettingsBase::NetworkInfo *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::SettingsBase::NetworkInfo::GetDeviceMode(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetVersion(ot::SettingsBase::NetworkInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 18));
}

{
  return ot::SettingsBase::NetworkInfo::GetVersion(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetKeySequence(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 1));
}

{
  return ot::SettingsBase::NetworkInfo::GetKeySequence(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetPreviousPartitionId(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 4));
}

{
  return ot::SettingsBase::NetworkInfo::GetPreviousPartitionId(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetMleFrameCounter(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 2));
}

{
  return ot::SettingsBase::NetworkInfo::GetMleFrameCounter(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetMacFrameCounter(ot::SettingsBase::NetworkInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 3));
}

{
  return ot::SettingsBase::NetworkInfo::GetMacFrameCounter(this);
}

uint64_t ot::SettingsBase::NetworkInfo::GetMeshLocalIid(ot::SettingsBase::NetworkInfo *this)
{
  return (uint64_t)this + 28;
}

{
  return ot::SettingsBase::NetworkInfo::GetMeshLocalIid(this);
}

void ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::ParentInfo *a1, unsigned __int8 a2)
{
  char v10 = ot::SettingsBase::ActionToString(a2);
  ExtAddress  = (ot::Mac::ExtAddress *)ot::SettingsBase::ParentInfo::GetExtAddress(a1);
  ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v11);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v11);
  ot::SettingsBase::ParentInfo::GetVersion(a1);
  ot::SettingsBase::ParentInfo::GetLastHeardTime(a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s ParentInfo {extaddr:%s, version:%u lastHeard:%llu}", v3, v4, v5, v6, v7, v8, v10);
}

uint64_t ot::SettingsBase::ParentInfo::GetExtAddress(ot::SettingsBase::ParentInfo *this)
{
  return (uint64_t)this + 12;
}

{
  return ot::SettingsBase::ParentInfo::GetExtAddress(this);
}

uint64_t ot::SettingsBase::ParentInfo::GetVersion(ot::SettingsBase::ParentInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 10));
}

{
  return ot::SettingsBase::ParentInfo::GetVersion(this);
}

uint64_t ot::SettingsBase::ParentInfo::GetLastHeardTime(ot::SettingsBase::ParentInfo *this)
{
  return *(void *)((char *)this + 4);
}

{
  return ot::SettingsBase::ParentInfo::GetLastHeardTime(this);
}

void ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::ChildInfo *a1, unsigned __int8 a2)
{
  char v11 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::ChildInfo::GetRloc16(a1);
  ot::SettingsBase::ChildInfo::GetExtAddress(a1);
  ot::Mac::ExtAddress::ToString(v2, (ot::StringWriter *)v12);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v12);
  uint64_t Timeout = ot::SettingsBase::ChildInfo::GetTimeout(a1);
  ot::ToUlong(Timeout);
  ot::SettingsBase::ChildInfo::GetMode(a1);
  ot::SettingsBase::ChildInfo::GetVersion(a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s ChildInfo {rloc:0x%04x, extaddr:%s, timeout:%lu, mode:0x%02x, version:%u}", v4, v5, v6, v7, v8, v9, v11);
}

uint64_t ot::SettingsBase::ChildInfo::GetRloc16(ot::SettingsBase::ChildInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 6));
}

{
  return ot::SettingsBase::ChildInfo::GetRloc16(this);
}

uint64_t ot::SettingsBase::ChildInfo::GetTimeout(ot::SettingsBase::ChildInfo *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*((unsigned int *)this + 2));
}

{
  return ot::SettingsBase::ChildInfo::GetTimeout(this);
}

uint64_t ot::SettingsBase::ChildInfo::GetMode(ot::SettingsBase::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 14);
}

{
  return ot::SettingsBase::ChildInfo::GetMode(this);
}

uint64_t ot::SettingsBase::ChildInfo::GetVersion(ot::SettingsBase::ChildInfo *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)((char *)this + 15));
}

{
  return ot::SettingsBase::ChildInfo::GetVersion(this);
}

void ot::SettingsBase::DadInfo::Log(ot::SettingsBase::DadInfo *a1, unsigned __int8 a2)
{
  char v9 = ot::SettingsBase::ActionToString(a2);
  ot::SettingsBase::DadInfo::GetDadCounter(a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s DadInfo {DadCounter:%2d}", v2, v3, v4, v5, v6, v7, v9);
}

uint64_t ot::SettingsBase::DadInfo::GetDadCounter(ot::SettingsBase::DadInfo *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::SettingsBase::DadInfo::GetDadCounter(this);
}

uint64_t ot::SettingsBase::BorderAgentId::SetId(ot::SettingsBase::BorderAgentId *this, const unsigned __int8 *a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (a3 == 16) {
    memcpy(this, a2, a3);
  }
  else {
    return 7;
  }
  return v4;
}

void ot::SettingsBase::BorderAgentId::Log(ot::SettingsBase::BorderAgentId *a1, unsigned __int8 a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = a2;
  ot::StringWriter::StringWriter((ot::StringWriter *)v11, v14, 33);
  ot::SettingsBase::BorderAgentId::GetId(a1);
  ot::StringWriter::AppendHexBytes((ot::StringWriter *)v11, v2, 16);
  char v3 = ot::SettingsBase::ActionToString(v12);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s BorderAgentId {id:%s}", v4, v5, v6, v7, v8, v9, v3);
}

uint64_t ot::SettingsBase::KeyToString(unsigned __int16 a1)
{
  if (a1 > 0x11u) {
    __assert_rtn("KeyToString", "settings.cpp", 208, "aKey <= kLastKey");
  }
  return *((void *)&ot::SettingsBase::KeyToString(ot::SettingsBase::Key)::kKeyStrings + a1);
}

uint64_t ot::Settings::Init(ot::Settings *this)
{
  char v3 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  Array  = ot::GetArrayLength<unsigned short,(unsigned short)3>();
  return ot::SettingsDriver::Init(v3, ot::Settings::kSensitiveKeys, Array);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::SettingsDriver>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
}

uint64_t ot::GetArrayLength<unsigned short,(unsigned short)3>()
{
  return 3;
}

{
  return ot::GetArrayLength<unsigned short,(unsigned short)3>();
}

uint64_t ot::Settings::Deinit(ot::Settings *this)
{
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  return ot::SettingsDriver::Deinit(v1);
}

void ot::Settings::Wipe(ot::Settings *this)
{
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  ot::SettingsDriver::Wipe(v1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "Wiped all info", v2, v3, v4, v5, v6, v7, v8);
}

uint64_t ot::SettingsDriver::Wipe(ot::SettingsDriver *this)
{
  return otPlatSettingsWipe();
}

{
  return ot::SettingsDriver::Wipe(this);
}

uint64_t ot::Settings::KeyForDatasetType(char a1)
{
  if (a1) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t ot::Settings::SaveOperationalDataset(ot::InstanceLocator *a1, char a2, ot::MeshCoP::Dataset *a3)
{
  __int16 v10 = ot::Settings::KeyForDatasetType(a2);
  char v8 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  ot::MeshCoP::Dataset::GetBytes(a3);
  uint64_t v7 = v3;
  Size  = ot::MeshCoP::Dataset::GetSize(a3);
  unsigned int v9 = ot::SettingsDriver::Set(v8, v10, v7, Size);
  ot::Settings::Log(1u, v9, v10, 0);
  return v9;
}

void ot::Settings::Log(unsigned __int8 a1, int a2, unsigned __int16 a3, ot::SettingsBase::NetworkInfo *a4)
{
  ot::ErrorToString(a2);
  ot::SettingsBase::KeyToString(a3);
  ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Settings", "%s: Error: %s, action: %hhu, key: %s", v4, v5, v6, v7, v8, v9, (char)"Log");
  if (a2)
  {
    if (a1)
    {
      uint64_t v11 = a1;
      char v10 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      char v10 = 0;
    }
    if ((v10 & 1) == 0)
    {
      switch(v11)
      {
        case 0:
          return;
        case 1:
        case 2:
        case 4:
          break;
        case 3:
          if (a2 != 23) {
            break;
          }
          return;
        case 5:
          if (a2 != 23) {
            break;
          }
          return;
        case 6:
          if (a2 != 23) {
            break;
          }
          return;
        default:
          goto LABEL_28;
      }
    }
    char v27 = ot::ErrorToString(a2);
    ot::SettingsBase::KeyToString(a3);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Settings", "Error %s %s %s", v12, v13, v14, v15, v16, v17, v27);
  }
  else
  {
    if (a4)
    {
      if (a3 <= 3u)
      {
        uint64_t v19 = a3 - 3;
        char v18 = 0;
      }
      else
      {
        uint64_t v19 = a3 - 3;
        char v18 = 1;
      }
      if ((v18 & 1) == 0)
      {
        switch(v19)
        {
          case 0:
            ot::SettingsBase::NetworkInfo::Log(a4, a1);
            goto LABEL_25;
          case 1:
            ot::SettingsBase::ParentInfo::Log(a4, a1);
            goto LABEL_25;
          case 2:
            ot::SettingsBase::ChildInfo::Log(a4, a1);
            goto LABEL_25;
          case 3:
          case 4:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            break;
          case 5:
            ot::SettingsBase::DadInfo::Log(a4, a1);
            goto LABEL_25;
          case 14:
            ot::SettingsBase::BorderAgentId::Log(a4, a1);
            goto LABEL_25;
          default:
LABEL_28:
            JUMPOUT(0);
        }
      }
      a4  = 0;
    }
LABEL_25:
    if (!a4)
    {
      char v26 = ot::SettingsBase::ActionToString(a1);
      ot::SettingsBase::KeyToString(a3);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Settings", "%s %s", v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

uint64_t ot::Settings::ReadOperationalDataset(ot::InstanceLocator *a1, char a2, ot::MeshCoP::Dataset *a3)
{
  uint64_t v11 = a1;
  char v10 = a2;
  uint64_t v9 = a3;
  unsigned int v8 = 0;
  unsigned __int16 v7 = 254;
  uint64_t v6 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned __int16 v5 = ot::Settings::KeyForDatasetType(v10);
  ot::MeshCoP::Dataset::GetBytes(v9);
  unsigned int v8 = ot::SettingsDriver::Get(v6, v5, v3, &v7);
  if (!v8)
  {
    if (v7 <= 0xFEu) {
      ot::MeshCoP::Dataset::SetSize((uint64_t)v9, v7);
    }
    else {
      return 23;
    }
  }
  return v8;
}

uint64_t ot::SettingsDriver::Get(ot::SettingsDriver *this, unsigned __int16 a2, void *a3, unsigned __int16 *a4)
{
  return ot::SettingsDriver::Get(this, a2, 0, a3, a4);
}

{
  return ot::SettingsDriver::Get(this, a2, a3, a4);
}

uint64_t ot::MeshCoP::Dataset::SetSize(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 26ot::MessageQueue::SetTail(this, 0) = a2;
  return this;
}

{
  return ot::MeshCoP::Dataset::SetSize(this, a2);
}

uint64_t ot::Settings::DeleteOperationalDataset(ot::InstanceLocator *a1, char a2)
{
  __int16 v6 = ot::Settings::KeyForDatasetType(a2);
  uint64_t v2 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned int v5 = ot::SettingsDriver::Delete(v2, v6, -1);
  ot::Settings::Log(3u, v5, v6, 0);
  return v5;
}

uint64_t ot::SettingsDriver::Delete(ot::SettingsDriver *this, __int16 a2, int a3)
{
  uint64_t InstancePtr = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsDelete((uint64_t)InstancePtr, a2, a3);
}

{
  return ot::SettingsDriver::Delete(this, a2, a3);
}

uint64_t ot::Settings::AddChildInfo(ot::Settings *this, const ot::SettingsBase::ChildInfo *a2)
{
  uint64_t v2 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  unsigned int v4 = ot::SettingsDriver::Add(v2, 5, a2, 0x11u);
  ot::Settings::Log(4u, v4, 5u, a2);
  return v4;
}

uint64_t ot::SettingsDriver::Add(ot::SettingsDriver *this, __int16 a2, const void *a3, unsigned __int16 a4)
{
  uint64_t InstancePtr = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsAdd((uint64_t)InstancePtr, a2, a3, a4);
}

{
  return ot::SettingsDriver::Add(this, a2, a3, a4);
}

uint64_t ot::Settings::DeleteAllChildInfo(ot::Settings *this)
{
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  unsigned int v3 = ot::SettingsDriver::Delete(v1, 5, -1);
  ot::Settings::Log(6u, v3, 5u, 0);
  return v3;
}

ot::Settings::ChildInfoIterator *ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Settings::ChildInfoIterator *this, ot::Instance *a2)
{
  *((_WORD *)this + ot::Mle::Tlv::SetType(this, 9) = 0;
  *((unsigned char *)this + 2ot::MessageQueue::SetTail(this, 0) = 0;
  ot::Settings::ChildInfoIterator::Read(this);
  return this;
}

{
  ot::Settings::ChildInfoIterator::ChildInfoIterator(this, a2);
  return this;
}

void ot::Settings::ChildInfoIterator::Read(ot::Settings::ChildInfoIterator *this)
{
  unsigned int v5 = this;
  unsigned __int16 v4 = 17;
  ot::SettingsBase::ChildInfo::Init(this);
  uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
  int v3 = ot::SettingsDriver::Get(v1, 5u, *((unsigned __int16 *)this + 9), this, &v4);
  ot::Settings::Log(0, v3, 5u, this);
  *((unsigned char *)this + 2ot::MessageQueue::SetTail(this, 0) = v3 != 0;
}

void ot::Settings::ChildInfoIterator::Advance(ot::Settings::ChildInfoIterator *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    ++*((_WORD *)this + 9);
    ot::Settings::ChildInfoIterator::Read(this);
  }
}

uint64_t ot::Settings::ChildInfoIterator::Delete(ot::Settings::ChildInfoIterator *this)
{
  if (*((unsigned char *)this + 20))
  {
    unsigned int v4 = 13;
    ot::Settings::Log(5u, 13, 5u, this);
  }
  else
  {
    uint64_t v1 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(this);
    unsigned int v4 = ot::SettingsDriver::Delete(v1, 5, *((unsigned __int16 *)this + 9));
    ot::Settings::Log(5u, v4, 5u, this);
  }
  return v4;
}

uint64_t ot::SettingsBase::ChildInfo::Init(ot::SettingsBase::ChildInfo *this)
{
  *(void *)this  = 0;
  *((void *)this + 1)  = 0;
  *((unsigned char *)this + 16)  = 0;
  return ot::SettingsBase::ChildInfo::SetVersion(this, 2u);
}

{
  return ot::SettingsBase::ChildInfo::Init(this);
}

uint64_t ot::SettingsDriver::Get(ot::SettingsDriver *this, unsigned __int16 a2, int a3, void *a4, unsigned __int16 *a5)
{
  uint64_t InstancePtr = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsGet((uint64_t)InstancePtr, a2, a3, a4, a5);
}

{
  return ot::SettingsDriver::Get(this, a2, a3, a4, a5);
}

uint64_t ot::Settings::ReadEntry(ot::InstanceLocator *a1, unsigned __int16 a2, void *a3, unsigned __int16 a4)
{
  uint64_t v11 = a1;
  unsigned __int16 v10 = a2;
  uint64_t v9 = a3;
  unsigned __int16 v8 = a4;
  unsigned int v7 = 0;
  unsigned __int16 v6 = a4;
  unsigned int v4 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned int v7 = ot::SettingsDriver::Get(v4, v10, v9, &v6);
  ot::Settings::Log(0, v7, v10, (ot::SettingsBase::NetworkInfo *)v9);
  return v7;
}

uint64_t ot::Settings::SaveEntry(ot::InstanceLocator *a1, __int16 a2, ot::SettingsBase::NetworkInfo *a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t v14 = a1;
  __int16 v13 = a2;
  uint64_t v12 = a3;
  *(void *)&__n[1]  = a4;
  __n[0]  = a5;
  unsigned int v10 = 0;
  unsigned __int16 v9 = a5;
  unsigned int v5 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  if (!ot::SettingsDriver::Get(v5, v13, *(void **)&__n[1], &v9)
    && v9 == __n[0]
    && !memcmp(v12, *(const void **)&__n[1], __n[0]))
  {
    ot::Settings::Log(2u, v10, v13, v12);
  }
  else
  {
    unsigned __int16 v6 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
    unsigned int v10 = ot::SettingsDriver::Set(v6, v13, v12, __n[0]);
    ot::Settings::Log(1u, v10, v13, v12);
  }
  return v10;
}

uint64_t ot::Settings::DeleteEntry(ot::InstanceLocator *a1, __int16 a2)
{
  uint64_t v2 = (ot::SettingsDriver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SettingsDriver>(a1);
  unsigned int v4 = ot::SettingsDriver::Delete(v2, a2, -1);
  ot::Settings::Log(3u, v4, a2, 0);
  return v4;
}

uint64_t ot::Encoding::LittleEndian::HostSwap16(uint64_t this)
{
  return (unsigned __int16)this;
}

{
  return ot::Encoding::LittleEndian::HostSwap16(this);
}

uint64_t ot::Encoding::LittleEndian::HostSwap32(uint64_t this)
{
  return this;
}

{
  return ot::Encoding::LittleEndian::HostSwap32(this);
}

uint64_t ot::SettingsBase::ChildInfo::SetVersion(ot::SettingsBase::ChildInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *(_WORD *)((char *)this + 15)  = result;
  return result;
}

{
  return ot::SettingsBase::ChildInfo::SetVersion(this, a2);
}

uint64_t ot::StringLength(ot *this, const char *a2)
{
  for (unsigned __int16 i = 0; ; ++i)
  {
    BOOL v3 = 0;
    if (i < (int)(unsigned __int16)a2) {
      BOOL v3 = *((unsigned char *)this + i) != 0;
    }
    if (!v3) {
      break;
    }
  }
  return i;
}

ot *ot::StringFind(ot *this, const char *a2)
{
  uint64_t v3 = 0;
  while (*(unsigned char *)this)
  {
    if (*(char *)this == (char)a2) {
      return this;
    }
    this  = (ot *)((char *)this + 1);
  }
  return (ot *)v3;
}

const char *ot::StringFind(const char *a1, char *a2, char a3)
{
  uint64_t v7 = 0;
  size_t v6 = strlen(a1);
  size_t v5 = strlen(a2);
  if (v5 <= v6)
  {
    for (size_t i = 0; i <= v6 - v5; ++i)
    {
        return &a1[i];
    }
  }
  return (const char *)v7;
}

uint64_t ot::anonymous namespace'::Match(char *a1, char *a2, char a3)
{
  unsigned __int8 v10 = 0;
  if (a3)
  {
    if (a3 == 1)
    {
      while (*a2)
      {
        size_t v5 = a1++;
        int v9 = (char)ot::ToLowercase((ot *)*v5);
        size_t v6 = a2++;
        if (v9 != (char)ot::ToLowercase((ot *)*v6)) {
          return v10;
        }
      }
    }
  }
  else
  {
    while (*a2)
    {
      uint64_t v3 = a1++;
      unsigned int v4 = a2++;
      if (*v3 != *v4) {
        return v10;
      }
    }
  }
  if (*a1) {
    return 1;
  }
  else {
    return 2;
  }
}

BOOL ot::StringStartsWith(char *a1, char *a2, char a3)
{
}

BOOL ot::StringEndsWith(ot *this, const char *a2)
{
  char v5 = (char)a2;
  size_t v4 = strlen((const char *)this);
  BOOL v3 = 0;
  if (v4) {
    return *((char *)this + v4 - 1) == v5;
  }
  return v3;
}

BOOL ot::StringEndsWith(const char *a1, char *a2, char a3)
{
  size_t v6 = strlen(a1);
  size_t v5 = strlen(a2);
  BOOL v4 = 0;
  if (v5)
  {
    BOOL v4 = 0;
    if (v6 >= v5) {
  }
    }
  return v4;
}

BOOL ot::StringMatch(char *a1, char *a2, char a3)
{
}

uint64_t ot::StringParseUint8(ot *this, const char **a2, unsigned __int8 *a3)
{
  return ot::StringParseUint8(this, a2, (unsigned __int8 *)0xFF);
}

{
  BOOL v4;
  unsigned __int16 v5;
  unsigned char *v6;
  unsigned int v7;

  uint64_t v7 = 6;
  size_t v6 = *(unsigned char **)this;
  size_t v5 = 0;
  while (1)
  {
    BOOL v4 = 0;
    if ((char)*v6 >= 48) {
      BOOL v4 = (char)*v6 <= 57;
    }
    if (!v4) {
      break;
    }
    size_t v5 = 10 * v5 + (*v6 - 48);
    if (v5 > (int)a3) {
      return 6;
    }
    uint64_t v7 = 0;
    ++v6;
  }
  *(void *)this  = v6;
  *(unsigned char *)a2  = v5;
  return v7;
}

unsigned char *ot::StringConvertToLowercase(unsigned char *this, char *a2)
{
  for (size_t i = this; *i; ++i)
  {
    this  = (unsigned char *)ot::ToLowercase((ot *)(char)*i);
    *size_t i = (_BYTE)this;
  }
  return this;
}

uint64_t ot::ToLowercase(ot *this)
{
  char v2 = (char)this;
  if ((char)this >= 65 && (char)this <= 90) {
    return (char)((_BYTE)this + 32);
  }
  return v2;
}

unsigned char *ot::StringConvertToUppercase(unsigned char *this, char *a2)
{
  for (size_t i = this; *i; ++i)
  {
    this  = (unsigned char *)ot::ToUppercase((ot *)(char)*i);
    *size_t i = (_BYTE)this;
  }
  return this;
}

uint64_t ot::ToUppercase(ot *this)
{
  char v2 = (char)this;
  if ((char)this >= 97 && (char)this <= 122) {
    return (char)((_BYTE)this - 32);
  }
  return v2;
}

char *ot::ToYesNo(ot *this)
{
  return ot::ToYesNo(BOOL)::kYesNoStrings[this & 1];
}

uint64_t ot::StringWriter::StringWriter(uint64_t this, char *a2, __int16 a3)
{
  *(void *)this  = a2;
  *(_WORD *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(_WORD *)(this + 1ot::MessageQueue::SetTail(this, 0) = a3;
  **(unsigned char **)this  = 0;
  return this;
}

ot::StringWriter *ot::StringWriter::StringWriter(ot::StringWriter *this, char *a2, __int16 a3)
{
  return this;
}

uint64_t ot::StringWriter::Clear(uint64_t this)
{
  **(unsigned char **)this  = 0;
  *(_WORD *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  return this;
}

ot::StringWriter *ot::StringWriter::Append(ot::StringWriter *this, const char *a2, ...)
{
  va_start(va, a2);
  ot::StringWriter::AppendVarArgs(this, a2, va);
  return this;
}

ot::StringWriter *ot::StringWriter::AppendVarArgs(ot::StringWriter *this, const char *a2, va_list a3)
{
  if (*((unsigned __int16 *)this + 5) <= (int)*((unsigned __int16 *)this + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *((unsigned __int16 *)this + 5) - *((unsigned __int16 *)this + 4);
  }
  int v6 = vsnprintf((char *)(*(void *)this + *((unsigned __int16 *)this + 4)), v4, a2, a3);
  if (v6 < 0) {
    __assert_rtn("AppendVarArgs", "string.cpp", 262, "len >= 0");
  }
  *((_WORD *)this + 4) += v6;
  if (ot::StringWriter::IsTruncated(this)) {
    *(unsigned char *)(*(void *)this + *((unsigned __int16 *)this + 5) - 1)  = 0;
  }
  return this;
}

BOOL ot::StringWriter::IsTruncated(ot::StringWriter *this)
{
  return *((unsigned __int16 *)this + 4) >= (int)*((unsigned __int16 *)this + 5);
}

{
  return ot::StringWriter::IsTruncated(this);
}

ot::StringWriter *ot::StringWriter::AppendHexBytes(ot::StringWriter *this, unsigned __int8 *a2, __int16 a3)
{
  while (a3--)
  {
    int v4 = a2++;
    ot::StringWriter::Append(this, "%02x", *v4);
  }
  return this;
}

uint64_t ot::IsValidUtf8String(ot *this, const char *a2)
{
  char v2 = (const char *)strlen((const char *)this);
  return ot::IsValidUtf8String(this, v2) & 1;
}

{
  unint64_t v4;
  char v5;
  char _c;
  char _ca;
  char _c_1;

  _c_1  = 1;
  int v4 = 0;
  while (v4 < (unint64_t)a2)
  {
    _c  = *((unsigned char *)this + v4++);
    if (_c < 0)
    {
      if ((_c & 0x40) == 0)
      {
        _c_1  = 0;
        return _c_1 & 1;
      }
      if ((_c & 0x20) == 0)
      {
        size_t v5 = 1;
        goto LABEL_16;
      }
      if ((_c & 0x10) == 0)
      {
        size_t v5 = 2;
        goto LABEL_16;
      }
      if ((_c & 8) != 0)
      {
        _c_1  = 0;
        return _c_1 & 1;
      }
      size_t v5 = 3;
LABEL_16:
      while (v5--)
      {
        if (v4 >= (unint64_t)a2)
        {
          _c_1  = 0;
          return _c_1 & 1;
        }
        _ca  = *((unsigned char *)this + v4++);
        if ((_ca & 0xC0) != 0x80)
        {
          _c_1  = 0;
          return _c_1 & 1;
        }
      }
    }
    else if (iscntrl(_c))
    {
      _c_1  = 0;
      return _c_1 & 1;
    }
  }
  return _c_1 & 1;
}

int iscntrl(int _c)
{
  return __istype(_c, 0x200uLL);
}

{
  return iscntrl(_c);
}

int __istype(__darwin_ct_rune_t _c, unint64_t _f)
{
  if (isascii(_c)) {
    return (_DefaultRuneLocale.__runetype[_c] & _f) != 0;
  }
  else {
    return __maskrune(_c, _f) != 0;
  }
}

{
  return __istype(_c, _f);
}

int isascii(int _c)
{
  return (_c & 0xFFFFFF80) == 0;
}

{
  return isascii(_c);
}

uint64_t ot::Tasklet::Post(ot::Tasklet *this)
{
  uint64_t result = ot::Tasklet::IsPosted(this);
  if ((result & 1) == 0)
  {
    uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Tasklet::Scheduler>(this);
    return ot::Tasklet::Scheduler::PostTasklet(v2, this);
  }
  return result;
}

BOOL ot::Tasklet::IsPosted(ot::Tasklet *this)
{
  return *((void *)this + 1) != 0;
}

{
  return ot::Tasklet::IsPosted(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Tasklet::Scheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Tasklet::Scheduler>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Tasklet::Scheduler>(a1);
}

uint64_t ot::Tasklet::Scheduler::PostTasklet(uint64_t this, ot::Tasklet *a2)
{
  if (*(void *)this)
  {
    *((void *)a2 + 1)  = *(void *)(*(void *)this + 8);
    *(void *)(*(void *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
    *(void *)this  = a2;
  }
  else
  {
    *(void *)this  = a2;
    *(void *)(*(void *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(void *)this;
    Instance  = ot::InstanceLocator::GetInstance(a2);
    return otTaskletsSignalPending(Instance);
  }
  return this;
}

ot::Tasklet ***ot::Tasklet::Scheduler::ProcessQueuedTasklets(ot::Tasklet ***this)
{
  uint64_t v2 = *this;
  *this  = 0;
  while (v2)
  {
    uint64_t v1 = v2[1];
    if (v1 == (ot::Tasklet *)v2) {
      uint64_t v2 = 0;
    }
    else {
      v2[1]  = (ot::Tasklet *)*((void *)v1 + 1);
    }
    *((void *)v1 + 1)  = 0;
    this  = (ot::Tasklet ***)ot::Tasklet::RunTask((uint64_t (**)(void))v1);
  }
  return this;
}

uint64_t ot::Tasklet::RunTask(uint64_t (**this)(void))
{
  return (*this)();
}

{
  return ot::Tasklet::RunTask(this);
}

ot::TimeTicker *ot::TimeTicker::TimeTicker(ot::TimeTicker *this, ot::Instance *a2)
{
  *(_DWORD *)this  = 0;
  ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::TimerMilliIn((ot::TimeTicker *)((char *)this + 8), a2);
  return this;
}

{
  ot::TimeTicker::TimeTicker(this, a2);
  return this;
}

ot::InstanceLocator *ot::TimeTicker::HandleTimer(ot::TimeTicker *this)
{
  uint64_t v34 = this;
  FireTime  = ot::Timer::GetFireTime((ot::TimeTicker *)((char *)this + 8));
  int v1 = ot::Random::NonCrypto::AddJitter((ot::Random::NonCrypto *)0x3E8, 4u);
  int v33 = ot::Time::operator+(&FireTime, v1);
  ot::TimerMilli::FireAt((ot::TimeTicker *)((char *)this + 8), v33);
  int v31 = *(_DWORD *)this;
  if ((v31 & ot::TimeTicker::Mask(0)) != 0)
  {
    uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::HandleTimeTick(v2);
  }
  int v29 = *(_DWORD *)this;
  if ((v29 & ot::TimeTicker::Mask(1)) != 0)
  {
    BOOL v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::HandleTimeTick(v3);
  }
  int v28 = *(_DWORD *)this;
  if ((v28 & ot::TimeTicker::Mask(2)) != 0)
  {
    int v4 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
    ot::AddressResolver::HandleTimeTick(v4);
  }
  int v27 = *(_DWORD *)this;
  if ((v27 & ot::TimeTicker::Mask(6)) != 0)
  {
    size_t v5 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    ot::NetworkData::Notifier::HandleTimeTick(v5);
  }
  int v26 = *(_DWORD *)this;
  if ((v26 & ot::TimeTicker::Mask(4)) != 0)
  {
    int v6 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
    ot::DuaManager::HandleTimeTick(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  int v25 = *(_DWORD *)this;
  if ((v25 & ot::TimeTicker::Mask(5)) != 0)
  {
    uint64_t v14 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
    ot::MlrManager::HandleTimeTick(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  int v24 = *(_DWORD *)this;
  uint64_t result = (ot::InstanceLocator *)ot::TimeTicker::Mask(7);
  if ((v24 & result) != 0)
  {
    uint64_t v23 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(this);
    return ot::Ip6::Mpl::HandleTimeTick(v23);
  }
  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::TimeTicker::RegisterReceiver(_DWORD *a1, char a2)
{
  *a1 |= ot::TimeTicker::Mask(a2);
  uint64_t result = ot::Timer::IsRunning((ot::Timer *)(a1 + 2));
  if ((result & 1) == 0)
  {
    Uint32InRange  = ot::Random::NonCrypto::GetUint32InRange(0, 0x3E9u);
    return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 2), Uint32InRange);
  }
  return result;
}

uint64_t ot::TimeTicker::Mask(char a1)
{
  return (1 << a1);
}

{
  return ot::TimeTicker::Mask(a1);
}

uint64_t ot::TimeTicker::UnregisterReceiver(_DWORD *a1, char a2)
{
  uint64_t result = ot::TimeTicker::Mask(a2);
  *a1 &= ~result;
  if (!*a1) {
    return ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 2));
  }
  return result;
}

uint64_t ot::Timer::GetFireTime(ot::Timer *this)
{
  return *((unsigned int *)this + 2);
}

{
  return ot::Timer::GetFireTime(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Mpl>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(a1);
}

ot::InstanceLocator *ot::TimerMilliIn<ot::TimeTicker,&ot::TimeTicker::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::TimeTicker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(a1);
  return ot::TimeTicker::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::TimeTicker>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(a1);
}

uint64_t ot::Instance::Get<ot::TimeTicker>(uint64_t a1)
{
  return a1 + 168;
}

{
  return ot::Instance::Get<ot::TimeTicker>(a1);
}

BOOL ot::Timer::DoesFireBefore(ot::Timer *a1, ot::Timer *a2, int a3)
{
  int v14 = a3;
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  BOOL v11 = 0;
  BOOL v10 = 0;
  FireTime  = ot::Timer::GetFireTime(a1);
  BOOL v10 = ot::Time::operator<(&FireTime, &v14);
  int v8 = ot::Timer::GetFireTime(v12);
  BOOL v3 = ot::Time::operator<(&v8, &v14);
  if (v3 == v10)
  {
    int v7 = ot::Timer::GetFireTime(a1);
    int v6 = ot::Timer::GetFireTime(v12);
    return ot::Time::operator<(&v7, &v6);
  }
  else
  {
    return v10;
  }
}

uint64_t ot::TimerMilli::Start(ot::TimerMilli *this, unsigned int a2)
{
  int Now = ot::TimerMilli::GetNow(this);
  return ot::TimerMilli::StartAt(this, Now, a2);
}

uint64_t ot::TimerMilli::StartAt(ot::InstanceLocator *a1, int a2, unsigned int a3)
{
  int v6 = a2;
  if (a3 > 0x7FFFFFFF) {
    __assert_rtn("StartAt", "timer.cpp", 84, "aDelay <= kMaxDelay");
  }
  int v5 = ot::Time::operator+(&v6, a3);
  return ot::TimerMilli::FireAt(a1, v5);
}

uint64_t ot::TimerMilli::FireAt(ot::InstanceLocator *a1, int a2)
{
  *((_DWORD *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  uint64_t v2 = (ot::TimerMilli::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(a1);
  return ot::TimerMilli::Scheduler::Add(v2, a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::TimerMilli::Scheduler>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(a1);
}

uint64_t ot::TimerMilli::Scheduler::Add(ot::TimerMilli::Scheduler *this, ot::TimerMilli *a2)
{
  return ot::Timer::Scheduler::Add((uint64_t *)this, a2, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return ot::TimerMilli::Scheduler::Add(this, a2);
}

uint64_t ot::TimerMilli::FireAtIfEarlier(int *a1, int a2)
{
  int v4 = a2;
  if (!ot::Timer::IsRunning((ot::Timer *)a1)) {
    return ot::TimerMilli::FireAt((ot::InstanceLocator *)a1, v4);
  }
  uint64_t result = ot::Time::operator>(a1 + 2, &v4);
  if (result) {
    return ot::TimerMilli::FireAt((ot::InstanceLocator *)a1, v4);
  }
  return result;
}

uint64_t ot::TimerMilli::Stop(ot::TimerMilli *this)
{
  int v1 = (ot::TimerMilli::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMilli::Scheduler>(this);
  return ot::TimerMilli::Scheduler::Remove(v1, this);
}

uint64_t ot::TimerMilli::Scheduler::Remove(ot::TimerMilli::Scheduler *this, ot::TimerMilli *a2)
{
  return ot::Timer::Scheduler::Remove((uint64_t *)this, a2, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return ot::TimerMilli::Scheduler::Remove(this, a2);
}

uint64_t ot::TimerMilli::RemoveAll(ot::TimerMilli *this, ot::Instance *a2)
{
  uint64_t v2 = (ot::TimerMilli::Scheduler *)ot::Instance::Get<ot::TimerMilli::Scheduler>((uint64_t)this);
  return ot::TimerMilli::Scheduler::RemoveAll(v2);
}

uint64_t ot::Instance::Get<ot::TimerMilli::Scheduler>(uint64_t a1)
{
  return a1 + 16;
}

{
  return ot::Instance::Get<ot::TimerMilli::Scheduler>(a1);
}

uint64_t ot::TimerMilli::Scheduler::RemoveAll(ot::TimerMilli::Scheduler *this)
{
  return ot::Timer::Scheduler::RemoveAll((uint64_t *)this, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return ot::TimerMilli::Scheduler::RemoveAll(this);
}

uint64_t ot::Timer::Scheduler::Add(uint64_t *a1, ot::Timer *a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  BOOL v10 = 0;
  int v3 = (*(uint64_t (**)(void))(a3 + 16))();
  ot::Time::Time((ot::Time *)&v9, v3);
  ot::Timer::Scheduler::Remove(a1, v12, v11);
  v8[1]  = (uint64_t)a1;
  v8[0]  = ot::LinkedList<ot::Timer>::begin((uint64_t)a1);
  uint64_t v7 = ot::LinkedList<ot::Timer>::end();
  while (ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator!=(v8, &v7))
  {
    int v6 = (ot::Timer *)ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator*((uint64_t)v8);
    if (ot::Timer::DoesFireBefore(v12, v6, v9)) {
      break;
    }
    BOOL v10 = v6;
    ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator++(v8);
  }
  if (v10) {
    return ot::LinkedList<ot::Timer>::PushAfter((uint64_t)a1, (uint64_t)v12, (uint64_t)v10);
  }
  ot::LinkedList<ot::Timer>::Push(a1, (uint64_t)v12);
  return ot::Timer::Scheduler::SetAlarm((ot::InstanceLocator *)a1, v11);
}

uint64_t ot::Timer::Scheduler::Remove(uint64_t *a1, ot::Timer *a2, uint64_t a3)
{
  uint64_t result = ot::Timer::IsRunning(a2);
  if (result)
  {
    if ((ot::Timer *)ot::LinkedList<ot::Timer>::GetHead((uint64_t)a1) == a2)
    {
      ot::LinkedList<ot::Timer>::Pop(a1);
      ot::Timer::Scheduler::SetAlarm((ot::InstanceLocator *)a1, a3);
    }
    else
    {
      ot::LinkedList<ot::Timer>::Remove(a1, (uint64_t)a2);
      IgnoreError();
    }
    return ot::LinkedListEntry<ot::Timer>::SetNext((uint64_t)a2, (uint64_t)a2);
  }
  return result;
}

uint64_t ot::LinkedList<ot::Timer>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Timer>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::Timer>::begin(a1);
}

uint64_t ot::LinkedList<ot::Timer>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::Timer>::end();
}

BOOL ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator*(a1);
}

uint64_t ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Timer>::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Timer,ot::LinkedList<ot::Timer>::Iterator>::operator++(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Timer>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return ot::LinkedList<ot::Timer>::Push(a1, a2);
}

uint64_t ot::Timer::Scheduler::SetAlarm(ot::InstanceLocator *a1, uint64_t a2)
{
  int v14 = a1;
  uint64_t v13 = a2;
  if (ot::LinkedList<ot::Timer>::IsEmpty(a1))
  {
    int v9 = *(uint64_t (**)(void *))(v13 + 8);
    Instance  = ot::InstanceLocator::GetInstance(a1);
    return v9(Instance);
  }
  else
  {
    Head  = ot::LinkedList<ot::Timer>::GetHead((uint64_t)a1);
    int v4 = (*(uint64_t (**)(void))(v13 + 16))();
    ot::Time::Time((ot::Time *)&v11, v4);
    if (ot::Time::operator<(&v11, (int *)(Head + 8))) {
      unsigned int v8 = ot::Time::operator-((_DWORD *)(Head + 8), &v11);
    }
    else {
      unsigned int v8 = 0;
    }
    int v6 = *(uint64_t (**)(void *, uint64_t, void))v13;
    uint64_t v7 = ot::InstanceLocator::GetInstance(a1);
    uint64_t Value = ot::Time::GetValue((ot::Time *)&v11);
    return v6(v7, Value, v8);
  }
}

uint64_t ot::LinkedList<ot::Timer>::PushAfter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Next  = ot::LinkedListEntry<ot::Timer>::GetNext(a3);
  ot::LinkedListEntry<ot::Timer>::SetNext(a2, Next);
  return ot::LinkedListEntry<ot::Timer>::SetNext(a3, a2);
}

{
  return ot::LinkedList<ot::Timer>::PushAfter(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Timer>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Timer>::GetHead(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1  = ot::LinkedListEntry<ot::Timer>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::Timer>::Pop(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Remove(uint64_t *a1, uint64_t a2)
{
  unsigned char v5[2] = (uint64_t)a1;
  v5[1]  = a2;
  v5[0]  = 0;
  unsigned int v4 = ot::LinkedList<ot::Timer>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Timer>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Timer>::Remove(a1, a2);
}

uint64_t ot::LinkedListEntry<ot::Timer>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16)  = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Timer>::SetNext(result, a2);
}

BOOL ot::LinkedList<ot::Timer>::IsEmpty(void *a1)
{
  return *a1 == 0;
}

{
  return ot::LinkedList<ot::Timer>::IsEmpty(a1);
}

uint64_t ot::Timer::Scheduler::ProcessTimers(ot::InstanceLocator *a1, uint64_t a2)
{
  unsigned int v8 = a1;
  uint64_t v7 = a2;
  Head  = (ot::Timer *)ot::LinkedList<ot::Timer>::GetHead((uint64_t)a1);
  if (!Head) {
    return ot::Timer::Scheduler::SetAlarm(a1, v7);
  }
  int v2 = (*(uint64_t (**)(void))(v7 + 16))();
  ot::Time::Time((ot::Time *)&v5, v2);
  if (!ot::Time::operator>=(&v5, (int *)Head + 2)) {
    return ot::Timer::Scheduler::SetAlarm(a1, v7);
  }
  ot::Timer::Scheduler::Remove((uint64_t *)a1, Head, v7);
  return ot::Timer::Fired((uint64_t (**)(void))Head);
}

uint64_t ot::Timer::Fired(uint64_t (**this)(void))
{
  return (*this)();
}

{
  return ot::Timer::Fired(this);
}

uint64_t ot::Timer::Scheduler::RemoveAll(uint64_t *a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = ot::LinkedList<ot::Timer>::Pop(a1);
    if (!v4) {
      break;
    }
    ot::LinkedListEntry<ot::Timer>::SetNext(v4, v4);
  }
  return ot::Timer::Scheduler::SetAlarm((ot::InstanceLocator *)a1, a2);
}

uint64_t otPlatAlarmMilliFired(uint64_t a1)
{
  uint64_t result = otInstanceIsInitialized(a1);
  if (result)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::TimerMilli::Scheduler *)ot::Instance::Get<ot::TimerMilli::Scheduler>(v2);
    return ot::TimerMilli::Scheduler::ProcessTimers(v3);
  }
  return result;
}

uint64_t ot::TimerMilli::Scheduler::ProcessTimers(ot::TimerMilli::Scheduler *this)
{
  return ot::Timer::Scheduler::ProcessTimers(this, (uint64_t)ot::TimerMilli::Scheduler::sAlarmMilliApi);
}

{
  return ot::TimerMilli::Scheduler::ProcessTimers(this);
}

uint64_t ot::TimerMicro::Start(ot::TimerMicro *this, unsigned int a2)
{
  int Now = ot::TimerMicro::GetNow(this);
  return ot::TimerMicro::StartAt(this, Now, a2);
}

uint64_t ot::TimerMicro::StartAt(ot::InstanceLocator *a1, int a2, unsigned int a3)
{
  int v6 = a2;
  if (a3 > 0x7FFFFFFF) {
    __assert_rtn("StartAt", "timer.cpp", 226, "aDelay <= kMaxDelay");
  }
  int v5 = ot::Time::operator+(&v6, a3);
  return ot::TimerMicro::FireAt(a1, v5);
}

uint64_t ot::TimerMicro::FireAt(ot::InstanceLocator *a1, int a2)
{
  *((_DWORD *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  uint64_t v2 = (ot::TimerMicro::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(a1);
  return ot::TimerMicro::Scheduler::Add(v2, a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::TimerMicro::Scheduler>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(a1);
}

uint64_t ot::TimerMicro::Scheduler::Add(ot::TimerMicro::Scheduler *this, ot::TimerMicro *a2)
{
  return ot::Timer::Scheduler::Add((uint64_t *)this, a2, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return ot::TimerMicro::Scheduler::Add(this, a2);
}

uint64_t ot::TimerMicro::Stop(ot::TimerMicro *this)
{
  uint64_t v1 = (ot::TimerMicro::Scheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimerMicro::Scheduler>(this);
  return ot::TimerMicro::Scheduler::Remove(v1, this);
}

uint64_t ot::TimerMicro::Scheduler::Remove(ot::TimerMicro::Scheduler *this, ot::TimerMicro *a2)
{
  return ot::Timer::Scheduler::Remove((uint64_t *)this, a2, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return ot::TimerMicro::Scheduler::Remove(this, a2);
}

uint64_t ot::TimerMicro::RemoveAll(ot::TimerMicro *this, ot::Instance *a2)
{
  uint64_t v2 = (ot::TimerMicro::Scheduler *)ot::Instance::Get<ot::TimerMicro::Scheduler>((uint64_t)this);
  return ot::TimerMicro::Scheduler::RemoveAll(v2);
}

uint64_t ot::Instance::Get<ot::TimerMicro::Scheduler>(uint64_t a1)
{
  return a1 + 24;
}

{
  return ot::Instance::Get<ot::TimerMicro::Scheduler>(a1);
}

uint64_t ot::TimerMicro::Scheduler::RemoveAll(ot::TimerMicro::Scheduler *this)
{
  return ot::Timer::Scheduler::RemoveAll((uint64_t *)this, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return ot::TimerMicro::Scheduler::RemoveAll(this);
}

uint64_t otPlatAlarmMicroFired(uint64_t a1)
{
  uint64_t result = otInstanceIsInitialized(a1);
  if (result)
  {
    uint64_t v2 = ot::AsCoreType<otInstance>(a1);
    uint64_t v3 = (ot::TimerMicro::Scheduler *)ot::Instance::Get<ot::TimerMicro::Scheduler>(v2);
    return ot::TimerMicro::Scheduler::ProcessTimers(v3);
  }
  return result;
}

uint64_t ot::TimerMicro::Scheduler::ProcessTimers(ot::TimerMicro::Scheduler *this)
{
  return ot::Timer::Scheduler::ProcessTimers(this, (uint64_t)ot::TimerMicro::Scheduler::sAlarmMicroApi);
}

{
  return ot::TimerMicro::Scheduler::ProcessTimers(this);
}

uint64_t ot::LinkedList<ot::Timer>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Timer>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return ot::LinkedList<ot::Timer>::Iterator::Advance(a1);
}

uint64_t ot::LinkedListEntry<ot::Timer>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

{
  return *(void *)(a1 + 16);
}

{
  return ot::LinkedListEntry<ot::Timer>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Timer>::GetNext(a1);
}

uint64_t ot::LinkedList<ot::Timer>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  ot::AsConst<ot::LinkedList<ot::Timer>>();
  return ot::LinkedList<ot::Timer>::Find(v3, a2, a3);
}

{
  return ot::LinkedList<ot::Timer>::Find(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Timer>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Timer>::Pop(a1);
  }
  Next  = ot::LinkedListEntry<ot::Timer>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Timer>::GetNext(Next);
    ot::LinkedListEntry<ot::Timer>::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Timer>::PopAfter(a1, a2);
}

uint64_t ot::LinkedList<ot::Timer>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Timer>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Timer>::Find(a1, a2, a3);
}

uint64_t ot::Tlv::ReadUintTlv<unsigned char>(ot::Tlv *a1, unsigned __int16 a2, unsigned char *a3)
{
  Tlvuint64_t Value = ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, (uint64_t)a3, (void *)1);
  if (!TlvValue) {
    *a3  = ot::Encoding::BigEndian::HostSwap<unsigned char>(*a3);
  }
  return TlvValue;
}

{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

uint64_t ot::Tlv::ReadTlvValue(ot::Tlv *this, const ot::Message *a2, uint64_t a3, void *a4)
{
  int v11 = this;
  __int16 v10 = (__int16)a2;
  *(void *)&v9[1]  = a3;
  v9[0]  = (_BYTE)a4;
  unsigned int v8 = 0;
  unsigned int v8 = ot::Tlv::ParsedInfo::ParseFrom((ot::Tlv::ParsedInfo *)v5, this, (unsigned __int16)a2);
  if (!v8)
  {
    if (v6 >= (int)v9[0]) {
      ot::Message::ReadBytes(v11, v7, *(char **)&v9[1], v9[0]);
    }
    else {
      return 6;
    }
  }
  return v8;
}

uint64_t ot::Encoding::BigEndian::HostSwap<unsigned char>(uint64_t result)
{
  return result;
}

{
  return ot::Encoding::BigEndian::HostSwap<unsigned char>(result);
}

uint64_t ot::Tlv::ReadUintTlv<unsigned short>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  Tlvuint64_t Value = ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, (uint64_t)a3, (void *)2);
  if (!TlvValue) {
    *a3  = ot::Encoding::BigEndian::HostSwap<unsigned short>(*a3);
  }
  return TlvValue;
}

{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

uint64_t ot::Encoding::BigEndian::HostSwap<unsigned short>(unsigned __int16 a1)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a1);
}

{
  return ot::Encoding::BigEndian::HostSwap<unsigned short>(a1);
}

uint64_t ot::Tlv::ReadUintTlv<unsigned int>(ot::Tlv *a1, unsigned __int16 a2, unsigned int *a3)
{
  Tlvuint64_t Value = ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, (uint64_t)a3, (void *)4);
  if (!TlvValue) {
    *a3  = ot::Encoding::BigEndian::HostSwap<unsigned int>(*a3);
  }
  return TlvValue;
}

{
  return ot::Tlv::ReadUintTlv<unsigned int>(a1, a2, a3);
}

uint64_t ot::Encoding::BigEndian::HostSwap<unsigned int>(unsigned int a1)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a1);
}

{
  return ot::Encoding::BigEndian::HostSwap<unsigned int>(a1);
}

uint64_t ot::Tlv::FindUintTlv<unsigned char>(ot::Tlv *a1, unsigned __int8 a2, unsigned char *a3, unsigned __int16 *a4)
{
  int v9 = a1;
  unsigned __int8 v8 = a2;
  unsigned __int16 v7 = a3;
  Tlvunsigned __int16 Offset = 0;
  unsigned __int16 v5 = 0;
  Tlvunsigned __int16 Offset = ot::Tlv::FindTlvOffset(a1, (const ot::Message *)a2, &v5, a4);
  if (!TlvOffset) {
    return ot::Tlv::ReadUintTlv<unsigned char>(v9, v5, v7);
  }
  return TlvOffset;
}

{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlvOffset(ot::Tlv *this, const ot::Message *a2, _WORD *a3, unsigned __int16 *a4)
{
  __int16 v10 = this;
  char v9 = (char)a2;
  unsigned __int8 v8 = a3;
  unsigned int v7 = 0;
  unsigned int v7 = ot::Tlv::ParsedInfo::FindIn((ot::Tlv::ParsedInfo *)v5, this, a2);
  if (!v7) {
    *unsigned __int8 v8 = v6;
  }
  return v7;
}

uint64_t ot::Tlv::FindUintTlv<unsigned short>(ot::Tlv *a1, unsigned __int8 a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  char v9 = a1;
  unsigned __int8 v8 = a2;
  unsigned int v7 = a3;
  Tlvunsigned __int16 Offset = 0;
  unsigned __int16 v5 = 0;
  Tlvunsigned __int16 Offset = ot::Tlv::FindTlvOffset(a1, (const ot::Message *)a2, &v5, a4);
  if (!TlvOffset) {
    return ot::Tlv::ReadUintTlv<unsigned short>(v9, v5, v7);
  }
  return TlvOffset;
}

{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindUintTlv<unsigned int>(ot::Tlv *a1, unsigned __int8 a2, unsigned int *a3, unsigned __int16 *a4)
{
  char v9 = a1;
  unsigned __int8 v8 = a2;
  unsigned int v7 = a3;
  Tlvunsigned __int16 Offset = 0;
  unsigned __int16 v5 = 0;
  Tlvunsigned __int16 Offset = ot::Tlv::FindTlvOffset(a1, (const ot::Message *)a2, &v5, a4);
  if (!TlvOffset) {
    return ot::Tlv::ReadUintTlv<unsigned int>(v9, v5, v7);
  }
  return TlvOffset;
}

{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::AppendUintTlv<unsigned char>(ot::Tlv *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  __int16 v6 = a1;
  unsigned __int8 v5 = a2;
  v4[1]  = a3;
  v4[0]  = 0;
  v4[0]  = ot::Encoding::BigEndian::HostSwap<unsigned char>(a3);
  return ot::Tlv::AppendTlv(v6, (ot::Message *)v5, v4, (const void *)1);
}

{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, a2, a3);
}

uint64_t ot::Tlv::AppendTlv(ot::Tlv *this, ot::Message *a2, void *a3, const void *a4)
{
  __int16 v10 = this;
  char v9 = (char)a2;
  unsigned __int8 v8 = a3;
  unsigned __int8 v7 = a4;
  unsigned int v6 = 0;
  if (a4 == 255) {
    __assert_rtn("AppendTlv", "tlvs.cpp", 300, "aLength <= Tlv::kBaseTlvMaxLength");
  }
  ot::Tlv::SetType(v5, v9);
  ot::Tlv::SetLength((uint64_t)v5, v7);
  unsigned int v6 = ot::Message::Append<ot::Tlv>(v10, v5);
  if (!v6 && v7) {
    return ot::Message::AppendBytes(v10, (char *)v8, v7);
  }
  return v6;
}

uint64_t ot::Tlv::AppendUintTlv<unsigned short>(ot::Tlv *a1, unsigned __int8 a2, unsigned __int16 a3)
{
  unsigned int v6 = a1;
  unsigned __int8 v5 = a2;
  v4[1]  = a3;
  v4[0]  = 0;
  v4[0]  = ot::Encoding::BigEndian::HostSwap<unsigned short>(a3);
  return ot::Tlv::AppendTlv(v6, (ot::Message *)v5, v4, (const void *)2);
}

{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, a2, a3);
}

uint64_t ot::Tlv::AppendUintTlv<unsigned int>(ot::Tlv *a1, unsigned __int8 a2, unsigned int a3)
{
  unsigned int v6 = a1;
  unsigned __int8 v5 = a2;
  v4[1]  = a3;
  v4[0]  = 0;
  v4[0]  = ot::Encoding::BigEndian::HostSwap<unsigned int>(a3);
  return ot::Tlv::AppendTlv(v6, (ot::Message *)v5, v4, (const void *)4);
}

{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, a2, a3);
}

uint64_t ot::Tlv::GetSize(ot::Tlv *this)
{
  if (!ot::Tlv::IsExtended(this)) {
    return ot::Tlv::GetLength(this) + 2;
  }
  ot::As<ot::ExtendedTlv>();
  return (unsigned __int16)ot::ExtendedTlv::GetLength(v1) + 4;
}

BOOL ot::Tlv::IsExtended(ot::Tlv *this)
{
  return *((unsigned __int8 *)this + 1) == 255;
}

{
  return ot::Tlv::IsExtended(this);
}

uint64_t ot::ExtendedTlv::GetLength(ot::ExtendedTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::ExtendedTlv::GetLength(this);
}

uint64_t ot::Tlv::GetValue(ot::Tlv *this)
{
  IsExtended  = ot::Tlv::IsExtended(this);
  uint64_t v2 = 4;
  if (!IsExtended) {
    uint64_t v2 = 2;
  }
  return (uint64_t)this + v2;
}

{
  BOOL IsExtended;
  uint64_t v2;

  IsExtended  = ot::Tlv::IsExtended(this);
  uint64_t v2 = 4;
  if (!IsExtended) {
    uint64_t v2 = 2;
  }
  return (uint64_t)this + v2;
}

uint64_t ot::Tlv::AppendTo(ot::Tlv *this, ot::Message *a2)
{
  Size  = ot::Tlv::GetSize(this);
  return ot::Message::AppendBytes(a2, (char *)this, Size);
}

uint64_t ot::Tlv::FindTlv(ot::Tlv *this, const ot::Message *a2, unsigned __int16 a3, void *a4, ot::Tlv *a5)
{
  uint64_t v13 = this;
  char v12 = (char)a2;
  unsigned __int16 v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = 0;
  unsigned int v9 = ot::Tlv::ParsedInfo::FindIn((ot::Tlv::ParsedInfo *)v6, this, a2);
  if (!v9)
  {
    if (v11 > (int)v8) {
      unsigned __int16 v11 = v8;
    }
    ot::Message::ReadBytes(v13, v7, (char *)v10, v11);
  }
  return v9;
}

uint64_t ot::Tlv::ParsedInfo::FindIn(ot::Tlv::ParsedInfo *this, const ot::Message *a2, unsigned __int8 a3)
{
  unsigned int v7 = 23;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  for (int i = ot::Tlv::ParsedInfo::ParseFrom(this, a2, Offset); !i; int i = ot::Tlv::ParsedInfo::ParseFrom(this, a2, Offset))
  {
    if (*(unsigned __int8 *)this == a3) {
      return 0;
    }
    Offset += *((_WORD *)this + 4);
  }
  return v7;
}

uint64_t ot::Tlv::FindTlvValueOffset(ot::Tlv *this, const ot::Message *a2, _WORD *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v13 = this;
  char v12 = (char)a2;
  unsigned __int16 v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = 0;
  unsigned int v9 = ot::Tlv::ParsedInfo::FindIn((ot::Tlv::ParsedInfo *)v6, this, a2);
  if (!v9)
  {
    *unsigned __int16 v11 = v8;
    *__int16 v10 = v7;
  }
  return v9;
}

uint64_t ot::Tlv::ParsedInfo::ParseFrom(ot::Tlv::ParsedInfo *this, const ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v13 = this;
  char v12 = a2;
  unsigned __int16 v11 = a3;
  unsigned int v10 = 0;
  unsigned int v10 = ot::Message::Read<ot::Tlv>(a2, a3, v9);
  if (!v10)
  {
    if (ot::Tlv::IsExtended((ot::Tlv *)v9))
    {
      unsigned int v10 = ot::Message::Read<ot::ExtendedTlv>(v12, v11, v8);
      if (v10) {
        return v10;
      }
      *(unsigned char *)this  = ot::Tlv::GetType((ot::Tlv *)v8);
      *((_WORD *)this + 1)  = ot::ExtendedTlv::GetLength((ot::ExtendedTlv *)v8);
      unsigned __int16 v7 = 4;
    }
    else
    {
      *(unsigned char *)this  = ot::Tlv::GetType((ot::Tlv *)v9);
      *((_WORD *)this + 1)  = ot::Tlv::GetLength((ot::Tlv *)v9);
      unsigned __int16 v7 = 2;
    }
    int v5 = *((unsigned __int16 *)this + 1);
    unsigned __int16 Length = ot::Message::GetLength(v12);
    if (v5 <= Length - v11 - v7)
    {
      *(unsigned char *)this  = ot::Tlv::GetType((ot::Tlv *)v9);
      *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v11;
      *((_WORD *)this + 3)  = v11 + v7;
      *((_WORD *)this + ++*(_WORD *)(this + 4) = *((_WORD *)this + 1) + v7;
    }
    else
    {
      return 6;
    }
  }
  return v10;
}

uint64_t ot::Message::Read<ot::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<ot::Tlv>(a1, a2, a3);
}

uint64_t ot::Tlv::GetType(ot::Tlv *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Tlv::GetType(this);
}

uint64_t ot::Message::Read<ot::ExtendedTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<ot::ExtendedTlv>(a1, a2, a3);
}

uint64_t ot::Tlv::ReadStringTlv(ot::Tlv *this, const ot::Message *a2, unsigned __int8 a3, void *a4, char *a5)
{
  int v14 = this;
  __int16 v13 = (__int16)a2;
  unsigned __int8 v12 = a3;
  unsigned __int16 v11 = a4;
  unsigned int v10 = 0;
  unsigned int v10 = ot::Tlv::ParsedInfo::ParseFrom((ot::Tlv::ParsedInfo *)v7, this, (unsigned __int16)a2);
  if (!v10)
  {
    unsigned __int16 v6 = ot::Min<unsigned short>(v8, v12);
    ot::Message::ReadBytes(v14, v9, (char *)v11, v6);
    *((unsigned char *)v11 + v6)  = 0;
  }
  return v10;
}

uint64_t ot::Tlv::FindStringTlv(ot::Tlv *this, const ot::Message *a2, unsigned __int8 a3, unsigned __int16 *a4, char *a5)
{
  unsigned int v10 = this;
  char v9 = (char)a2;
  unsigned __int8 v8 = a3;
  *(void *)&v7[3]  = a4;
  *(_DWORD *)&v7[1]  = 0;
  v7[0]  = 0;
  *(_DWORD *)&v7[1]  = ot::Tlv::FindTlvOffset(this, (const ot::Message *)a2, v7, a4);
  if (!*(_DWORD *)&v7[1]) {
    *(_DWORD *)&v7[1]  = ot::Tlv::ReadStringTlv(v10, (const ot::Message *)v7[0], v8, *(void **)&v7[3], v5);
  }
  return *(unsigned int *)&v7[1];
}

uint64_t ot::Tlv::FindTlv(ot::Tlv *this, const ot::Message *a2, uint64_t a3, void *a4, unsigned __int16 *a5)
{
  unsigned int v10 = this;
  unsigned char v9[16] = (_BYTE)a2;
  *(void *)&v9[1]  = a3;
  v9[0]  = (_BYTE)a4;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v7 = 0;
  unsigned __int16 v6 = 0;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)a2, &v7, &v6, a5);
  if (!TlvValueOffset)
  {
    if (v6 >= (int)v9[0]) {
      ot::Message::ReadBytes(v10, v7, *(char **)&v9[1], v9[0]);
    }
    else {
      return 6;
    }
  }
  return TlvValueOffset;
}

uint64_t ot::Tlv::AppendStringTlv(ot::Tlv *this, ot::Message *a2, unsigned __int8 a3, ot *a4, const char *a5)
{
  unsigned __int8 v8 = a2;
  if (a4) {
    unsigned __int8 v6 = ot::StringLength(a4, (const char *)a3);
  }
  else {
    unsigned __int8 v6 = 0;
  }
  return ot::Tlv::AppendTlv(this, (ot::Message *)v8, a4, (const void *)v6);
}

uint64_t ot::Message::Append<ot::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::Tlv>(a1, a2);
}

ot::TrickleTimer *ot::TrickleTimer::TrickleTimer(ot::TrickleTimer *this, ot::Instance *a2, void (*a3)(ot::TrickleTimer *))
{
  ot::TimerMilli::TimerMilli(this, a2, (void (*)(ot::Timer *))ot::TrickleTimer::HandleTimer);
  uint64_t result = this;
  *((_DWORD *)this + 6)  = 0;
  *((_DWORD *)this + 7)  = 0;
  *((_DWORD *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = 0;
  *((_WORD *)this + 2ot::MessageQueue::SetTail(this, 0) = 0;
  *((_WORD *)this + 21)  = 0;
  *((void *)this + 6)  = a3;
  *((unsigned char *)this + 56)  = 0;
  *((unsigned char *)this + 57)  = 0;
  return result;
}

{
  ot::TrickleTimer::TrickleTimer(this, a2, a3);
  return this;
}

uint64_t ot::TrickleTimer::HandleTimer(ot::TrickleTimer *this, ot::Timer *a2)
{
  return ot::TrickleTimer::HandleTimer(this);
}

uint64_t ot::TrickleTimer::Start(uint64_t a1, char a2, unsigned int a3, unsigned int a4, __int16 a5)
{
  BOOL v7 = 0;
  if (a4 >= a3) {
    BOOL v7 = a3 != 0;
  }
  if (!v7) {
    __assert_rtn("Start", "trickle_timer.cpp", 58, "(aIntervalMax >= aIntervalMin) && (aIntervalMin > 0)");
  }
  *(_DWORD *)(a1 + 2++*(_WORD *)(this + 4) = a3;
  *(_DWORD *)(a1 + 2ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a4;
  *(_WORD *)(a1 + 4ot::MessageQueue::SetTail(this, 0) = a5;
  *(unsigned char *)(a1 + 56)  = a2;
  *(_DWORD *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)*(unsigned int *)(a1 + 24), *(_DWORD *)(a1 + 28) + 1);
  return ot::TrickleTimer::StartNewInterval((ot::TrickleTimer *)a1);
}

uint64_t ot::TrickleTimer::StartNewInterval(ot::TrickleTimer *this)
{
  if (*((unsigned char *)this + 56))
  {
    if (*((unsigned char *)this + 56) == 1) {
      *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = *((_DWORD *)this + 8);
    }
  }
  else
  {
    if (*((_DWORD *)this + 8) / 2u >= *((_DWORD *)this + 8)) {
      Uint32InRange  = *((_DWORD *)this + 8) / 2u;
    }
    else {
      Uint32InRange  = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)(*((_DWORD *)this + 8) / 2u), *((_DWORD *)this + 8));
    }
    *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 9) = Uint32InRange;
    *((_WORD *)this + 21)  = 0;
    *((unsigned char *)this + 57)  = 0;
  }
  return ot::TimerMilli::Start(this, *((_DWORD *)this + 9));
}

uint64_t ot::TrickleTimer::IndicateConsistent(uint64_t this)
{
  if (*(unsigned __int16 *)(this + 42) != 0xFFFF) {
    ++*(_WORD *)(this + 42);
  }
  return this;
}

uint64_t ot::TrickleTimer::IndicateInconsistent(uint64_t this)
{
  uint64_t v1 = (ot::TrickleTimer *)this;
  if (!*(unsigned char *)(this + 56))
  {
    this  = ot::TrickleTimer::IsRunning((ot::TrickleTimer *)this);
    if ((this & 1) != 0 && *((_DWORD *)v1 + 8) != *((_DWORD *)v1 + 6))
    {
      *((_DWORD *)v1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *((_DWORD *)v1 + 6);
      return ot::TrickleTimer::StartNewInterval(v1);
    }
  }
  return this;
}

BOOL ot::TrickleTimer::IsRunning(ot::TrickleTimer *this)
{
  return ot::Timer::IsRunning(this);
}

{
  return ot::TrickleTimer::IsRunning(this);
}

uint64_t ot::TrickleTimer::HandleTimer(ot::TrickleTimer *this)
{
  if (*((unsigned char *)this + 56))
  {
    if (*((unsigned char *)this + 56) == 1)
    {
      *((_DWORD *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)*((unsigned int *)this + 6), *((_DWORD *)this + 7) + 1);
      ot::TrickleTimer::StartNewInterval(this);
    }
    return (*((uint64_t (**)(void))this + 6))();
  }
  if (!*((unsigned char *)this + 57))
  {
    *((unsigned char *)this + 57)  = 1;
    uint64_t result = ot::TimerMilli::Start(this, *((_DWORD *)this + 8) - *((_DWORD *)this + 9));
    if (*((unsigned __int16 *)this + 21) >= (int)*((unsigned __int16 *)this + 20)) {
      return result;
    }
    return (*((uint64_t (**)(void))this + 6))();
  }
  if (*((unsigned char *)this + 57) != 1) {
    return (*((uint64_t (**)(void))this + 6))();
  }
  if (*((_DWORD *)this + 8))
  {
    if (*((_DWORD *)this + 8) > (*((_DWORD *)this + 7) - *((_DWORD *)this + 8))) {
      *((_DWORD *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *((_DWORD *)this + 7);
    }
    else {
      *((_DWORD *)this + 8) *= 2;
    }
  }
  else
  {
    *((_DWORD *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 1;
  }
  return ot::TrickleTimer::StartNewInterval(this);
}

uint64_t ot::Crypto::AesCcm::SetKey(ot::Crypto::AesCcm *this, const unsigned __int8 *a2, __int16 a3)
{
  unsigned __int8 v8 = this;
  BOOL v7 = a2;
  __int16 v6 = a3;
  ot::Crypto::Key::Set((uint64_t)v5, a2, a3);
  return ot::Crypto::AesCcm::SetKey(this, (const ot::Crypto::Key *)v5);
}

uint64_t ot::Crypto::AesCcm::SetKey(ot::Crypto::AesCcm *this, const ot::Crypto::Key *a2)
{
  return ot::Crypto::AesEcb::SetKey(this, a2);
}

{
  return ot::Crypto::AesCcm::SetKey(this, a2);
}

uint64_t ot::Crypto::AesCcm::SetKey(ot::Crypto::AesCcm *this, const ot::Mac::KeyMaterial *a2)
{
  __int16 v6 = this;
  int v5 = a2;
  ot::Mac::KeyMaterial::ConvertToCryptoKey(a2, (ot::Crypto::Key *)v4);
  return ot::Crypto::AesCcm::SetKey(this, (const ot::Crypto::Key *)v4);
}

void ot::Crypto::AesCcm::Init(ot::Crypto::AesCcm *this, unsigned int a2, unsigned int a3, unsigned __int8 a4, const void *a5, unsigned __int8 a6)
{
  unsigned __int8 v17 = a6;
  unsigned __int8 v14 = 0;
  BOOL v9 = 0;
  if ((a4 & 1) == 0)
  {
    BOOL v9 = 0;
    if (a4 >= 4u) {
      BOOL v9 = a4 <= 0x10u;
    }
  }
  if (!v9) {
    __assert_rtn("Init", "aes_ccm.cpp", 74, "((aTagLength & 0x1) == 0) && (kMinTagLength <= aTagLength) && (aTagLength <= kMaxTagLength)");
  }
  unsigned __int8 v11 = 0;
  for (unsigned int i = a3; i; i >>= 8)
    ++v11;
  if (v11 <= 1u) {
    unsigned __int8 v11 = 2;
  }
  if (a6 > 0xDu) {
    unsigned __int8 v17 = 13;
  }
  if (v11 < 15 - v17) {
    unsigned __int8 v11 = 15 - v17;
  }
  if (v17 > 15 - v11) {
    unsigned __int8 v17 = 15 - v11;
  }
  *((unsigned char *)this + 30++*(_WORD *)(this + 4) = ((a2 != 0) << 6) | (8 * ((a4 - 2) >> 1)) | (v11 - 1);
  memcpy((char *)this + 305, a5, v17);
  unsigned int v13 = a3;
  for (unsigned __int8 j = 15; j > (int)v17; --j)
  {
    *((unsigned char *)this + j + 30++*(_WORD *)(this + 4) = v13;
    v13 >>= 8;
  }
  ot::Crypto::AesEcb::Encrypt(this, (unsigned __int8 *)this + 304, (unsigned __int8 *)this + 304);
  if (a2)
  {
    if (a2 >= 0xFF00)
    {
      *((unsigned char *)this + 30++*(_WORD *)(this + 4) = ~*((unsigned char *)this + 304);
      *((unsigned char *)this + 305) ^= 0xFEu;
      *((unsigned char *)this + 306) ^= HIBYTE(a2);
      unsigned __int8 v14 = 4;
      *((unsigned char *)this + 307) ^= BYTE2(a2);
    }
    uint64_t v6 = v14;
    unsigned __int8 v15 = v14 + 1;
    *((unsigned char *)this + v6 + 304) ^= BYTE1(a2);
    uint64_t v7 = v15;
    unsigned __int8 v14 = v15 + 1;
    *((unsigned char *)this + v7 + 304) ^= a2;
  }
  *((unsigned char *)this + 32ot::MessageQueue::SetTail(this, 0) = v11 - 1;
  memcpy((char *)this + 321, a5, v17);
  bzero((char *)this + v17 + 321, 15 - v17);
  *((unsigned char *)this + 37ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v17;
  *((_DWORD *)this + 8ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  *((_DWORD *)this + 8ot::Mle::Tlv::SetType(this, 9) = 0;
  *((_DWORD *)this + 9ot::MessageQueue::SetTail(this, 0) = a3;
  *((_DWORD *)this + 91)  = 0;
  *((_WORD *)this + 18++*(_WORD *)(this + 4) = v14;
  *((_WORD *)this + 185)  = 16;
  *((unsigned char *)this + 373)  = a4;
}

ot::Crypto::AesEcb *ot::Crypto::AesCcm::Header(ot::Crypto::AesEcb *this, unsigned char *a2, unsigned int a3)
{
  int v5 = this;
  if (*((_DWORD *)this + 89) + a3 > *((_DWORD *)this + 88)) {
    __assert_rtn("Header", "aes_ccm.cpp", 165, "mHeaderCur + aHeaderLength <= mHeaderLength");
  }
  for (unsigned int i = 0; i < a3; ++i)
  {
    if (*((_WORD *)v5 + 184) == 16)
    {
      this  = (ot::Crypto::AesEcb *)ot::Crypto::AesEcb::Encrypt(v5, (unsigned __int8 *)v5 + 304, (unsigned __int8 *)v5 + 304);
      *((_WORD *)v5 + 18++*(_WORD *)(this + 4) = 0;
    }
    char v3 = a2[i];
    uint64_t v4 = (unsigned __int16)(*((_WORD *)v5 + 184))++;
    *((unsigned char *)v5 + v4 + 304) ^= v3;
  }
  *((_DWORD *)v5 + 89) += a3;
  if (*((_DWORD *)v5 + 89) == *((_DWORD *)v5 + 88))
  {
    if (*((_WORD *)v5 + 184)) {
      this  = (ot::Crypto::AesEcb *)ot::Crypto::AesEcb::Encrypt(v5, (unsigned __int8 *)v5 + 304, (unsigned __int8 *)v5 + 304);
    }
    *((_WORD *)v5 + 18++*(_WORD *)(this + 4) = 0;
  }
  return this;
}

void ot::Crypto::AesCcm::Payload(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  if (*(_DWORD *)(a1 + 364) + a4 > *(_DWORD *)(a1 + 360)) {
    __assert_rtn("Payload", "aes_ccm.cpp", 199, "mPlainTextCur + aLength <= mPlainTextLength");
  }
  for (unsigned int i = 0; i < a4; ++i)
  {
    if (*(_WORD *)(a1 + 370) == 16)
    {
      for (int j = 15; j > *(unsigned __int8 *)(a1 + 372); --j)
      {
        int v5 = (unsigned char *)(a1 + 320 + j);
        char v6 = *v5 + 1;
        *int v5 = v6;
        if (v6) {
          break;
        }
      }
      ot::Crypto::AesEcb::Encrypt((ot::Crypto::AesEcb *)a1, (unsigned __int8 *)(a1 + 320), (unsigned __int8 *)(a1 + 336));
      *(_WORD *)(a1 + 37ot::MessageQueue::SetTail(this, 0) = 0;
    }
    if (a5)
    {
      char v8 = *(unsigned char *)(a3 + i);
      uint64_t v9 = (unsigned __int16)(*(_WORD *)(a1 + 370))++;
      char v14 = v8 ^ *(unsigned char *)(a1 + 336 + v9);
      *(unsigned char *)(a2 + i)  = v14;
    }
    else
    {
      char v14 = *(unsigned char *)(a2 + i);
      uint64_t v7 = (unsigned __int16)(*(_WORD *)(a1 + 370))++;
      *(unsigned char *)(a3 + i)  = v14 ^ *(unsigned char *)(a1 + 336 + v7);
    }
    if (*(_WORD *)(a1 + 368) == 16)
    {
      ot::Crypto::AesEcb::Encrypt((ot::Crypto::AesEcb *)a1, (unsigned __int8 *)(a1 + 304), (unsigned __int8 *)(a1 + 304));
      *(_WORD *)(a1 + 36ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
    }
    uint64_t v10 = (unsigned __int16)(*(_WORD *)(a1 + 368))++;
    *(unsigned char *)(a1 + 304 + v10) ^= v14;
  }
  *(_DWORD *)(a1 + 364) += a4;
  if (*(_DWORD *)(a1 + 364) >= *(_DWORD *)(a1 + 360))
  {
    if (*(_WORD *)(a1 + 368)) {
      ot::Crypto::AesEcb::Encrypt((ot::Crypto::AesEcb *)a1, (unsigned __int8 *)(a1 + 304), (unsigned __int8 *)(a1 + 304));
    }
    bzero((void *)(a1 + 320 + *(unsigned __int8 *)(a1 + 372) + 1), 15 - *(unsigned __int8 *)(a1 + 372));
  }
}

uint64_t ot::Crypto::AesCcm::Payload(uint64_t a1, ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4, char a5)
{
  uint64_t v18 = a1;
  unsigned __int8 v17 = a2;
  v16[1]  = a3;
  v16[0]  = a4;
  char v15 = a5;
  ot::Message::GetFirstChunk(a2, a3, v16, (ot::Message::MutableChunk *)v14);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    char v7 = v6 | ((unsigned __int16)result == 0);
    if (v7) {
      break;
    }
    ot::Message::MutableChunk::GetBytes((ot::Message::MutableChunk *)v14);
    uint64_t v11 = v8;
    ot::Message::MutableChunk::GetBytes((ot::Message::MutableChunk *)v14);
    uint64_t v12 = v9;
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v14);
    ot::Crypto::AesCcm::Payload(a1, v11, v12, Length, v15);
    ot::Message::GetNextChunk(v17, v16, (ot::Message::MutableChunk *)v14);
  }
  return result;
}

uint64_t ot::Crypto::AesCcm::Finalize(ot::Crypto::AesCcm *this, unsigned char *a2)
{
  if (*((_DWORD *)this + 91) != *((_DWORD *)this + 90)) {
    __assert_rtn("Finalize", "aes_ccm.cpp", 270, "mPlainTextCur == mPlainTextLength");
  }
  uint64_t result = ot::Crypto::AesEcb::Encrypt(this, (unsigned __int8 *)this + 320, (unsigned __int8 *)this + 336);
  for (int i = 0; i < *((unsigned __int8 *)this + 373); ++i)
    a2[i]  = *((unsigned char *)this + i + 304) ^ *((unsigned char *)this + i + 336);
  return result;
}

uint64_t ot::Crypto::AesCcm::GenerateNonce(ot::Crypto::AesCcm *this, const ot::Mac::ExtAddress *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  char v7 = (char)a3;
  *(void *)a4  = *(void *)this;
  *(void *)char v6 = a4 + 8;
  uint64_t result = ot::Encoding::BigEndian::WriteUint32(a2, (unsigned char *)(a4 + 8), a3);
  *(unsigned char *)(*(void *)v6 + ++*(_WORD *)(this + 4) = v7;
  return result;
}

ot::Crypto::AesEcb *ot::Crypto::AesEcb::AesEcb(ot::Crypto::AesEcb *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 288;
  if (j__otPlatCryptoAesInit((uint64_t)this)) {
    __assert_rtn("AesEcb", "aes_ecb.cpp", 45, "false");
  }
  return this;
}

{
  ot::Crypto::AesEcb::AesEcb(this);
  return this;
}

uint64_t ot::Crypto::AesEcb::SetKey(ot::Crypto::AesEcb *this, const ot::Crypto::Key *a2)
{
  uint64_t result = j__otPlatCryptoAesSetKey((uint64_t)this, a2);
  if (result) {
    __assert_rtn("SetKey", "aes_ecb.cpp", 48, "false");
  }
  return result;
}

uint64_t ot::Crypto::AesEcb::Encrypt(ot::Crypto::AesEcb *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = j__otPlatCryptoAesEncrypt((uint64_t)this, a2, a3);
  if (result) {
    __assert_rtn("Encrypt", "aes_ecb.cpp", 52, "false");
  }
  return result;
}

void ot::Crypto::AesEcb::~AesEcb(ot::Crypto::AesEcb *this)
{
  if (j__otPlatCryptoAesFree((uint64_t)this)) {
    __assert_rtn("~AesEcb", "aes_ecb.cpp", 55, "false");
  }
}

{
  ot::Crypto::AesEcb::~AesEcb(this);
}

ot::Crypto::HmacSha256 *ot::Crypto::HmacSha256::HmacSha256(ot::Crypto::HmacSha256 *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 24;
  if (j__otPlatCryptoHmacSha256Init((uint64_t)this)) {
    __assert_rtn("HmacSha256", "hmac_sha256.cpp", 47, "false");
  }
  return this;
}

{
  ot::Crypto::HmacSha256::HmacSha256(this);
  return this;
}

void ot::Crypto::HmacSha256::~HmacSha256(ot::Crypto::HmacSha256 *this)
{
  if (j__otPlatCryptoHmacSha256Deinit((uint64_t)this)) {
    __assert_rtn("~HmacSha256", "hmac_sha256.cpp", 50, "false");
  }
}

{
  ot::Crypto::HmacSha256::~HmacSha256(this);
}

uint64_t ot::Crypto::HmacSha256::Start(ot::Crypto::HmacSha256 *this, const ot::Crypto::Key *a2)
{
  uint64_t result = j__otPlatCryptoHmacSha256Start((uint64_t)this, a2);
  if (result) {
    __assert_rtn("Start", "hmac_sha256.cpp", 52, "false");
  }
  return result;
}

uint64_t ot::Crypto::HmacSha256::Update(ot::Crypto::HmacSha256 *this, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result = j__otPlatCryptoHmacSha256Update((uint64_t)this, a2, a3);
  if (result) {
    __assert_rtn("Update", "hmac_sha256.cpp", 56, "false");
  }
  return result;
}

uint64_t ot::Crypto::HmacSha256::Finish(ot::Crypto::HmacSha256 *this, ot::Crypto::Sha256::Hash *a2)
{
  uint64_t result = j__otPlatCryptoHmacSha256Finish((uint64_t)this, a2);
  if (result) {
    __assert_rtn("Finish", "hmac_sha256.cpp", 61, "false");
  }
  return result;
}

uint64_t ot::Crypto::HmacSha256::Update(ot::Crypto::HmacSha256 *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v13 = this;
  uint64_t v12 = a2;
  v11[1]  = a3;
  v11[0]  = a4;
  ot::Message::GetFirstChunk(a2, a3, v11, (ot::Message::Chunk *)v10);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    char v6 = v5 | ((unsigned __int16)result == 0);
    if (v6) {
      break;
    }
    uint64_t Bytes = (void *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v10);
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    ot::Crypto::HmacSha256::Update(this, (uint64_t)Bytes, Length);
    ot::Message::GetNextChunk(v12, v11, (ot::Message::Chunk *)v10);
  }
  return result;
}

ot::Crypto::MbedTls *ot::Crypto::MbedTls::MbedTls(ot::Crypto::MbedTls *this)
{
  return this;
}

{
  ot::Crypto::MbedTls::MbedTls(this);
  return this;
}

uint64_t ot::Crypto::MbedTls::MapError(ot::Crypto::MbedTls *this)
{
  unsigned int v3 = 0;
  switch(this)
  {
    case 0xFFFF8100:
      return 3;
    case 0xFFFF8800:
      return 8;
    case 0xFFFF8F00:
      return 7;
    case 0xFFFF9700:
      return 5;
    case 0xFFFF9780:
      return 3;
    case 0xFFFF9800:
      return 5;
    case 0xFFFFFFC0:
      return 8;
    case 0xFFFFFFC2:
      return 3;
  }
  if (this == -60 || this == -61) {
    return 8;
  }
  if (this == -56 || this == -54) {
    return 7;
  }
  if (this == -52 || this == -30 || this == -28) {
    return 8;
  }
  if ((int)this < 0) {
    return 1;
  }
  return v3;
}

uint64_t ot::Crypto::MbedTls::CryptoSecurePrng(ot::Crypto::MbedTls *this, ot::Random::Crypto *a2, unsigned __int8 *a3)
{
  return 0;
}

ot::Crypto::Sha256 *ot::Crypto::Sha256::Sha256(ot::Crypto::Sha256 *this)
{
  *(void *)this  = (char *)this + 16;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 112;
  if (j__otPlatCryptoSha256Init((uint64_t)this)) {
    __assert_rtn("Sha256", "sha256.cpp", 47, "false");
  }
  return this;
}

{
  ot::Crypto::Sha256::Sha256(this);
  return this;
}

void ot::Crypto::Sha256::~Sha256(ot::Crypto::Sha256 *this)
{
  if (j__otPlatCryptoSha256Deinit((uint64_t)this)) {
    __assert_rtn("~Sha256", "sha256.cpp", 50, "false");
  }
}

{
  ot::Crypto::Sha256::~Sha256(this);
}

uint64_t ot::Crypto::Sha256::Start(ot::Crypto::Sha256 *this)
{
  uint64_t result = j__otPlatCryptoSha256Start((uint64_t)this);
  if (result) {
    __assert_rtn("Start", "sha256.cpp", 52, "false");
  }
  return result;
}

uint64_t ot::Crypto::Sha256::Update(ot::Crypto::Sha256 *this, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result = j__otPlatCryptoSha256Update((uint64_t)this, a2, a3);
  if (result) {
    __assert_rtn("Update", "sha256.cpp", 56, "false");
  }
  return result;
}

uint64_t ot::Crypto::Sha256::Update(ot::Crypto::Sha256 *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v13 = this;
  uint64_t v12 = a2;
  v11[1]  = a3;
  v11[0]  = a4;
  ot::Message::GetFirstChunk(a2, a3, v11, (ot::Message::Chunk *)v10);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    char v6 = v5 | ((unsigned __int16)result == 0);
    if (v6) {
      break;
    }
    uint64_t Bytes = (void *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v10);
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v10);
    ot::Crypto::Sha256::Update(this, (uint64_t)Bytes, Length);
    ot::Message::GetNextChunk(v12, v11, (ot::Message::Chunk *)v10);
  }
  return result;
}

uint64_t ot::Crypto::Sha256::Finish(ot::Crypto::Sha256 *this, ot::Crypto::Sha256::Hash *a2)
{
  uint64_t result = j__otPlatCryptoSha256Finish((uint64_t)this, a2);
  if (result) {
    __assert_rtn("Finish", "sha256.cpp", 72, "false");
  }
  return result;
}

uint64_t ot::FactoryDiags::Diags::ProcessChannel(ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  char v15 = this;
  char v14 = a2;
  unsigned int v13 = a3;
  uint64_t v12 = a4;
  __unint64_t size = a5;
  unsigned int v10 = 0;
  if (otPlatDiagModeGet())
  {
    if (v14)
    {
      *(void *)uint64_t v9 = 0;
      unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(*v13, v9, v5);
      if (!v10)
      {
        if (*(uint64_t *)v9 >= 11 && *(uint64_t *)v9 <= 25)
        {
          *((unsigned char *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v9[0];
          char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
          ot::Radio::Receive(v6, *((unsigned char *)this + 32));
          IgnoreError();
          otPlatDiagChannelSet(*((unsigned char *)this + 32));
          snprintf(v12, __size, "set channel to %d\r\nstatus 0x%02x\r\n", *((unsigned __int8 *)this + 32), v10);
        }
        else
        {
          unsigned int v10 = 7;
        }
      }
    }
    else
    {
      snprintf(v12, __size, "channel: %d\r\n", *((unsigned __int8 *)this + 32));
    }
  }
  else
  {
    unsigned int v10 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v10, v12, __size);
  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessPower(ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  char v15 = this;
  char v14 = a2;
  unsigned int v13 = a3;
  uint64_t v12 = a4;
  __unint64_t size = a5;
  unsigned int v10 = 0;
  if (otPlatDiagModeGet())
  {
    if (v14)
    {
      *(void *)uint64_t v9 = 0;
      unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(*v13, v9, v5);
      if (!v10)
      {
        *((unsigned char *)this + 33)  = v9[0];
        char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v10 = ot::Radio::SetTransmitPower(v6, *((unsigned char *)this + 33));
        if (!v10)
        {
          otPlatDiagTxPowerSet(*((unsigned char *)this + 33));
          snprintf(v12, __size, "set tx power to %d dBm\r\nstatus 0x%02x\r\n", *((char *)this + 33), v10);
        }
      }
    }
    else
    {
      snprintf(v12, __size, "tx power: %d dBm\r\n", *((char *)this + 33));
    }
  }
  else
  {
    unsigned int v10 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v10, v12, __size);
  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessRadio(ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v14 = 7;
  if (otPlatDiagModeGet())
  {
    if (a2)
    {
      if (!strcmp(*a3, "sleep"))
      {
        char v5 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v14 = ot::Radio::Sleep(v5);
        if (!v14) {
          snprintf(a4, a5, "set radio from receive to sleep \r\nstatus 0x%02x\r\n", 0);
        }
      }
      else if (!strcmp(*a3, "receive"))
      {
        char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int v14 = ot::Radio::Receive(v6, *((unsigned char *)this + 32));
        if (!v14)
        {
          char v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
          unsigned int v14 = ot::Radio::SetTransmitPower(v7, *((unsigned char *)this + 33));
          if (!v14)
          {
            otPlatDiagChannelSet(*((unsigned char *)this + 32));
            otPlatDiagTxPowerSet(*((unsigned char *)this + 33));
            snprintf(a4, a5, "set radio from sleep to receive on channel %d\r\nstatus 0x%02x\r\n", *((unsigned __int8 *)this + 32), 0);
          }
        }
      }
      else if (!strcmp(*a3, "state"))
      {
        uint64_t v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
        unsigned int State = ot::Radio::GetState(v8);
        unsigned int v14 = 0;
        if (State)
        {
          uint64_t v11 = State;
          char v10 = 1;
        }
        else
        {
          uint64_t v11 = 0;
          char v10 = 0;
        }
        if (v10)
        {
          snprintf(a4, a5, "invalid\r\n");
        }
        else
        {
          switch(v11)
          {
            case 0:
              snprintf(a4, a5, "disabled\r\n");
              break;
            case 1:
              snprintf(a4, a5, "sleep\r\n");
              break;
            case 2:
              snprintf(a4, a5, "receive\r\n");
              break;
            case 3:
              snprintf(a4, a5, "transmit\r\n");
              break;
            default:
              JUMPOUT(0);
          }
        }
      }
    }
    else
    {
      unsigned int v14 = 7;
    }
  }
  else
  {
    unsigned int v14 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v14, a4, a5);
  return v14;
}

uint64_t ot::FactoryDiags::Diags::ProcessLinkRaw(ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v18 = 0;
  if (a2)
  {
    if (!strcmp(*a3, "start"))
    {
      Instance  = ot::InstanceLocator::GetInstance(this);
      unsigned int v18 = otPlatRadioEnable((uint64_t)Instance);
      if (!v18) {
        snprintf(a4, a5, "raw link started\r\n");
      }
    }
    else if (!strcmp(*a3, "stop"))
    {
      uint64_t v8 = ot::InstanceLocator::GetInstance(this);
      unsigned int v18 = otPlatRadioDisable((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
      if (!v18) {
        snprintf(a4, a5, "raw link stopped\r\n");
      }
    }
    else
    {
      return 35;
    }
  }
  else
  {
    ot::InstanceLocator::GetInstance(this);
    IsEnabled  = otPlatRadioIsEnabled();
    char v6 = "enabled";
    if (!IsEnabled) {
      char v6 = "disabled";
    }
    snprintf(a4, a5, "raw link is %s\r\n", v6);
  }
  return v18;
}

uint64_t ot::FactoryDiags::Diags::ProcessRcp(ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, uint64_t a5)
{
  Instance  = ot::InstanceLocator::GetInstance(this);
  return otPlatDiagProcess((uint64_t)Instance, a2, (uint64_t)a3, (uint64_t)a4, a5);
}

uint64_t ot::FactoryDiags::Diags::ProcessRepeat(ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  unsigned __int8 v17 = this;
  char v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  size_t v13 = a5;
  unsigned int v12 = 0;
  if (otPlatDiagModeGet())
  {
    if (v16)
    {
      if (!strcmp((const char *)*v15, "stop"))
      {
        ot::InstanceLocator::GetInstance(this);
        otPlatAlarmMilliStop();
        *((unsigned char *)this + 35)  = 0;
        snprintf(v14, v13, "repeated packet transmission is stopped\r\nstatus 0x%02x\r\n", v12);
      }
      else
      {
        *(void *)uint64_t v11 = 0;
        if (v16 == 2)
        {
          unsigned int v12 = ot::FactoryDiags::Diags::ParseLong(*v15, v11, v5);
          if (!v12)
          {
            *((_DWORD *)this + 6)  = *(_DWORD *)v11;
            unsigned int v12 = ot::FactoryDiags::Diags::ParseLong(v15[1], v11, v6);
            if (!v12)
            {
              if (*(uint64_t *)v11 <= 127)
              {
                if (*(uint64_t *)v11 >= 3)
                {
                  *((unsigned char *)this + 3++*(_WORD *)(this + 4) = v11[0];
                  *((unsigned char *)this + 35)  = 1;
                  int Now = otPlatAlarmMilliGetNow();
                  Instance  = ot::InstanceLocator::GetInstance(this);
                  otPlatAlarmMilliStartAt((uint64_t)Instance, Now, *((_DWORD *)this + 6));
                  snprintf(v14, v13, "sending packets of length %#x at the delay of %#x ms\r\nstatus 0x%02x\r\n", *((unsigned __int8 *)this + 34), *((_DWORD *)this + 6), v12);
                }
                else
                {
                  unsigned int v12 = 7;
                }
              }
              else
              {
                unsigned int v12 = 7;
              }
            }
          }
        }
        else
        {
          unsigned int v12 = 7;
        }
      }
    }
    else
    {
      unsigned int v12 = 7;
    }
  }
  else
  {
    unsigned int v12 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v12, v14, v13);
  return v12;
}

uint64_t ot::FactoryDiags::Diags::ProcessSend(ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  uint64_t v15 = this;
  char v14 = a2;
  size_t v13 = a3;
  unsigned int v12 = a4;
  size_t v11 = a5;
  unsigned int v10 = 0;
  *(void *)uint64_t v9 = 0;
  if (otPlatDiagModeGet())
  {
    if (v14 == 2)
    {
      unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(*v13, v9, v5);
      if (!v10)
      {
        *((_DWORD *)this + 7)  = *(_DWORD *)v9;
        unsigned int v10 = ot::FactoryDiags::Diags::ParseLong(v13[1], v9, v6);
        if (!v10)
        {
          if (*(uint64_t *)v9 <= 127)
          {
            if (*(uint64_t *)v9 >= 3)
            {
              *((unsigned char *)this + 3++*(_WORD *)(this + 4) = v9[0];
              snprintf(v12, v11, "sending %#x packet(s), length %#x\r\nstatus 0x%02x\r\n", *((_DWORD *)this + 7), *((unsigned __int8 *)this + 34), v10);
              ot::FactoryDiags::Diags::TransmitPacket(this);
            }
            else
            {
              unsigned int v10 = 7;
            }
          }
          else
          {
            unsigned int v10 = 7;
          }
        }
      }
    }
    else
    {
      unsigned int v10 = 7;
    }
  }
  else
  {
    unsigned int v10 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v10, v12, v11);
  return v10;
}

uint64_t ot::FactoryDiags::Diags::ProcessStart(ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, size_t a5)
{
  char v5 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  if (ot::ThreadNetif::IsUp(v5))
  {
    unsigned int v19 = 13;
  }
  else
  {
    otPlatDiagChannelSet(*((unsigned char *)this + 32));
    otPlatDiagTxPowerSet(*((unsigned char *)this + 33));
    char v6 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::Enable(v6);
    IgnoreError();
    char v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::SetPromiscuous(v7, 1);
    ot::InstanceLocator::GetInstance(this);
    otPlatAlarmMilliStop();
    uint64_t v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v19 = ot::Radio::Receive(v8, *((unsigned char *)this + 32));
    if (!v19)
    {
      uint64_t v9 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned int v19 = ot::Radio::SetTransmitPower(v9, *((unsigned char *)this + 33));
      if (!v19)
      {
        otPlatDiagModeSet(1, v10, v11, v12, v13, v14, v15, v16);
        ot::FactoryDiags::Diags::Stats::Clear((uint64_t)this);
        snprintf(a4, a5, "start diagnostics mode\r\nstatus 0x%02x\r\n", 0);
      }
    }
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v19, a4, a5);
  return v19;
}

uint64_t ot::FactoryDiags::Diags::ProcessStats(ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v7 = 0;
  if (otPlatDiagModeGet())
  {
    if (a2 == 1 && !strcmp(*a3, "clear"))
    {
      ot::FactoryDiags::Diags::Stats::Clear((uint64_t)this);
      snprintf(a4, a5, "stats cleared\r\n");
    }
    else if (a2)
    {
      unsigned int v7 = 7;
    }
    else
    {
      snprintf(a4, a5, "received packets: %d\r\nsent packets: %d\r\nfirst received packet: rssi=%d, lqi=%d\r\nlast received packet: rssi=%d, lqi=%d\r\n", *(_DWORD *)this, *((_DWORD *)this + 1), *((char *)this + 8), *((unsigned __int8 *)this + 9), *((char *)this + 10), *((unsigned __int8 *)this + 11));
    }
  }
  else
  {
    unsigned int v7 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v7, a4, a5);
  return v7;
}

uint64_t ot::FactoryDiags::Diags::ProcessStop(ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, size_t a5)
{
  unsigned int v15 = 0;
  if (otPlatDiagModeGet())
  {
    ot::InstanceLocator::GetInstance(this);
    otPlatAlarmMilliStop();
    otPlatDiagModeSet(0, v5, v6, v7, v8, v9, v10, v11);
    uint64_t v12 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::SetPromiscuous(v12, 0);
    snprintf(a4, a5, "received packets: %d\r\nsent packets: %d\r\nfirst received packet: rssi=%d, lqi=%d\r\nlast received packet: rssi=%d, lqi=%d\r\n\nstop diagnostics mode\r\nstatus 0x%02x\r\n", *(_DWORD *)this, *((_DWORD *)this + 1), *((char *)this + 8), *((unsigned __int8 *)this + 9), *((char *)this + 10), *((unsigned __int8 *)this + 11), 0);
  }
  else
  {
    unsigned int v15 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v15, a4, a5);
  return v15;
}

uint64_t ot::FactoryDiags::Diags::ProcessUartDisable(ot::FactoryDiags::Diags *this, char a2, ot::FactoryDiags::Diags **a3, char *a4, size_t a5)
{
  uint64_t v22 = this;
  char v21 = a2;
  uint64_t v20 = a3;
  unsigned int v19 = a4;
  __unint64_t size = a5;
  unsigned int v17 = 0;
  if (otPlatDiagModeGet())
  {
    if (v21)
    {
      *(void *)uint64_t v16 = 0;
      unsigned int v17 = ot::FactoryDiags::Diags::ParseLong(*v20, v16, v5);
      if (!v17)
      {
        unsigned int v15 = *(_DWORD *)v16;
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v17 = otPlatVendorUartDisableStart((uint64_t)Instance, v15, v7, v8, v9, v10, v11, v12);
        if (!v17) {
          snprintf(v19, __size, " Uart disabled for %d mSec\r\n", v15);
        }
      }
    }
    else
    {
      snprintf(v19, __size, "missing argument for uart renable time in mSec:");
    }
  }
  else
  {
    unsigned int v17 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v17, v19, __size);
  return v17;
}

ot::FactoryDiags::Diags *ot::FactoryDiags::Diags::Diags(ot::FactoryDiags::Diags *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Radio::GetTransmitBuffer(v2);
  *((_DWORD *)this + 6)  = 0;
  *((_DWORD *)this + 7)  = 0;
  *((unsigned char *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 20;
  *((unsigned char *)this + 33)  = 0;
  *((unsigned char *)this + 3++*(_WORD *)(this + 4) = 0;
  *((unsigned char *)this + 35)  = 0;
  *((unsigned char *)this + 36)  = 0;
  ot::FactoryDiags::Diags::Stats::Clear((uint64_t)this);
  return this;
}

{
  ot::FactoryDiags::Diags::Diags(this, a2);
  return this;
}

uint64_t ot::Radio::GetTransmitBuffer(ot::Radio *this)
{
  return otPlatRadioGetTransmitBuffer();
}

{
  return ot::Radio::GetTransmitBuffer(this);
}

uint64_t ot::FactoryDiags::Diags::Stats::Clear(uint64_t this)
{
  *(void *)this  = 0;
  *(_DWORD *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  return this;
}

{
  return ot::FactoryDiags::Diags::Stats::Clear(this);
}

uint64_t ot::FactoryDiags::Diags::ParseLong(ot::FactoryDiags::Diags *this, char *a2, uint64_t *a3)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  __endptr  = 0;
  uint64_t v3 = strtol((const char *)this, &__endptr, 0);
  *(void *)uint64_t v6 = v3;
  if (*__endptr) {
    return 6;
  }
  else {
    return 0;
  }
}

uint64_t ot::Radio::Receive(ot::Radio *this, unsigned __int8 a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioReceive((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::Receive(this, a2);
}

uint64_t ot::FactoryDiags::Diags::AppendErrorResult(uint64_t result, char *a2, size_t a3)
{
  if (result) {
    return snprintf(a2, a3, "failed\r\nstatus %#x\r\n", result);
  }
  return result;
}

uint64_t ot::Radio::SetTransmitPower(ot::Radio *this, char a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetTransmitPower((uint64_t)InstancePtr, a2);
}

{
  return ot::Radio::SetTransmitPower(this, a2);
}

void ot::FactoryDiags::Diags::TransmitPacket(ot::FactoryDiags::Diags *this)
{
  *(_WORD *)(*((void *)this + 2) + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *((unsigned __int8 *)this + 34);
  *(unsigned char *)(*((void *)this + 2) + 1ot::MessageQueue::SetTail(this, 0) = *((unsigned char *)this + 32);
  for (unsigned __int8 i = 0; i < (int)*((unsigned __int8 *)this + 34); ++i)
    *(unsigned char *)(**((void **)this + 2) + i)  = i;
  *((unsigned char *)this + 36)  = 1;
  uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::Transmit(v1, *((ot::Mac::TxFrame **)this + 2));
  IgnoreError();
}

uint64_t ot::Radio::Enable(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioEnable((uint64_t)InstancePtr);
}

{
  return ot::Radio::Enable(this);
}

uint64_t ot::Radio::SetPromiscuous(ot::Radio *this, char a2)
{
  char v10 = a2 & 1;
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetPromiscuous((uint64_t)InstancePtr, v10 & 1, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::SetPromiscuous(this, a2);
}

uint64_t ot::Radio::Sleep(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSleep((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::Sleep(this);
}

uint64_t ot::Radio::GetState(ot::Radio *this)
{
  return otPlatRadioGetState();
}

{
  return ot::Radio::GetState(this);
}

void otPlatDiagAlarmFired(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  uint64_t v2 = (ot::FactoryDiags::Diags *)ot::Instance::Get<ot::FactoryDiags::Diags>(v1);
  ot::FactoryDiags::Diags::AlarmFired(v2);
}

void ot::FactoryDiags::Diags::AlarmFired(ot::FactoryDiags::Diags *this)
{
  if (*((unsigned char *)this + 35))
  {
    int Now = otPlatAlarmMilliGetNow();
    ot::FactoryDiags::Diags::TransmitPacket(this);
    Instance  = ot::InstanceLocator::GetInstance(this);
    otPlatAlarmMilliStartAt((uint64_t)Instance, Now, *((_DWORD *)this + 6));
  }
  else
  {
    ot::InstanceLocator::GetInstance(this);
    otPlatDiagAlarmCallback();
  }
}

void ot::FactoryDiags::Diags::ReceiveDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    if (!*(_DWORD *)a1)
    {
      *((unsigned char *)a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(unsigned char *)(a2 + 29);
      *((unsigned char *)a1 + ot::Mle::Tlv::SetType(this, 9) = *(unsigned char *)(a2 + 30);
    }
    *((unsigned char *)a1 + 1ot::MessageQueue::SetTail(this, 0) = *(unsigned char *)(a2 + 29);
    *((unsigned char *)a1 + 11)  = *(unsigned char *)(a2 + 30);
    ++*(_DWORD *)a1;
  }
  ot::InstanceLocator::GetInstance(a1);
  otPlatDiagRadioReceived();
}

void ot::FactoryDiags::Diags::TransmitDone(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    *(unsigned char *)(a1 + 36)  = 0;
    if (!a2)
    {
      ++*(_DWORD *)(a1 + 4);
      if (*(_DWORD *)(a1 + 28) <= 1u) {
        return;
      }
      --*(_DWORD *)(a1 + 28);
    }
    if ((*(unsigned char *)(a1 + 35) & 1) == 0) {
      ot::FactoryDiags::Diags::TransmitPacket((ot::FactoryDiags::Diags *)a1);
    }
  }
}

uint64_t ot::FactoryDiags::Diags::ProcessContinuousWave(ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v9 = 7;
  if (otPlatDiagModeGet())
  {
    if (a2)
    {
      if (!strcmp(*a3, "start"))
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitCarrier((uint64_t)Instance, 1);
      }
      else if (!strcmp(*a3, "stop"))
      {
        uint64_t v6 = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitCarrier((uint64_t)v6, 0);
      }
    }
    else
    {
      unsigned int v9 = 7;
    }
  }
  else
  {
    unsigned int v9 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v9, a4, a5);
  return v9;
}

uint64_t ot::FactoryDiags::Diags::ProcessStream(ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v9 = 7;
  if (otPlatDiagModeGet())
  {
    if (a2)
    {
      if (!strcmp(*a3, "start"))
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitStream((uint64_t)Instance, 1);
      }
      else if (!strcmp(*a3, "stop"))
      {
        uint64_t v6 = ot::InstanceLocator::GetInstance(this);
        unsigned int v9 = otPlatDiagRadioTransmitStream((uint64_t)v6, 0);
      }
    }
    else
    {
      unsigned int v9 = 7;
    }
  }
  else
  {
    unsigned int v9 = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(v9, a4, a5);
  return v9;
}

uint64_t ot::FactoryDiags::Diags::GetPowerSettings(ot::InstanceLocator *a1, unsigned __int8 a2, uint64_t a3)
{
  *(_WORD *)(a3 + 2ot::MessageQueue::SetTail(this, 0) = 16;
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return otPlatDiagRadioGetPowerSettings((uint64_t)Instance, a2, (_WORD *)a3, (_WORD *)(a3 + 2), (unsigned __int16 *)(a3 + 4), (char *)(a3 + 20));
}

uint64_t ot::FactoryDiags::Diags::ProcessPowerSettings(ot::FactoryDiags::Diags *this, char a2, ot::Utils::CmdLineParser **a3, char *a4, size_t a5)
{
  int v27 = this;
  char v26 = a2;
  int v25 = a3;
  __str  = a4;
  __unint64_t size = a5;
  PowerSettings  = 7;
  char i = 0;
  if (otPlatDiagModeGet())
  {
    if (v26)
    {
      if (v26 == 1)
      {
        PowerSettings  = ot::Utils::CmdLineParser::ParseAsUint8(*v25, &i, v5);
        if (!PowerSettings)
        {
          if (i >= 0xBu && i <= 0x19u)
          {
            PowerSettings  = ot::FactoryDiags::Diags::GetPowerSettings(this, i, (uint64_t)v31);
            if (!PowerSettings)
            {
              uint64_t v12 = __str;
              size_t v11 = __size;
              int v9 = *(__int16 *)v31;
              int v10 = *(__int16 *)&v31[2];
              ot::FactoryDiags::Diags::RawPowerSetting::ToString((ot::FactoryDiags::Diags::RawPowerSetting *)&v31[4], (ot::StringWriter *)v28);
              uint64_t v7 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v28);
              snprintf(v12, v11, "TargetPower(0.01dBm): %d\r\nActualPower(0.01dBm): %d\r\nRawPowerSetting: %s\r\n", v9, v10, v7);
            }
          }
          else
          {
            PowerSettings  = 7;
          }
        }
      }
    }
    else
    {
      char v20 = 0;
      unsigned __int8 v19 = 0;
      int v17 = snprintf(__str, __size, "| StartCh | EndCh | TargetPower | ActualPower | RawPowerSetting |\r\n+---------+-------+-------------+-------------+-----------------+\r\n");
      if (v17 > 0 && v17 < (int)__size)
      {
        __str += v17;
        __size -= v17;
        for (char i = 11; i <= 0x1Au; ++i)
        {
          if (i == 26) {
            int v15 = 23;
          }
          else {
            int v15 = ot::FactoryDiags::Diags::GetPowerSettings(this, i, (uint64_t)v31);
          }
          PowerSettings  = v15;
          if ((v20 & 1) != 0
            && (ot::FactoryDiags::Diags::PowerSettings::operator!=((unsigned __int16 *)v31, (unsigned __int16 *)v30)
             || PowerSettings))
          {
            int v13 = *(__int16 *)v30;
            int v14 = *(__int16 *)&v30[2];
            ot::FactoryDiags::Diags::RawPowerSetting::ToString((ot::FactoryDiags::Diags::RawPowerSetting *)&v30[4], (ot::StringWriter *)v29);
            uint64_t v6 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v29);
            int v18 = snprintf(__str, __size, "| %7u | %5u | %11d | %11d | %15s |\r\n", v19, i - 1, v13, v14, v6);
            if (v18 <= 0 || v18 >= (int)__size)
            {
              PowerSettings  = 3;
              goto LABEL_31;
            }
            __str += v18;
            __size -= v18;
            char v20 = 0;
          }
          if (!PowerSettings && (v20 & 1) == 0)
          {
            unsigned __int8 v19 = i;
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            *(void *)&v30[14]  = *(void *)&v31[14];
            char v20 = 1;
          }
        }
        PowerSettings  = 0;
      }
      else
      {
        PowerSettings  = 3;
      }
    }
  }
  else
  {
    PowerSettings  = 13;
  }
LABEL_31:
  ot::FactoryDiags::Diags::AppendErrorResult(PowerSettings, __str, __size);
  return PowerSettings;
}

BOOL ot::FactoryDiags::Diags::PowerSettings::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BOOL v3 = 1;
  if (*a1 == *a2)
  {
    BOOL v3 = 1;
    if (a1[1] == a2[1]) {
      return ot::FactoryDiags::Diags::RawPowerSetting::operator!=(a1 + 2, a2 + 2);
    }
  }
  return v3;
}

{
  return ot::FactoryDiags::Diags::PowerSettings::operator!=(a1, a2);
}

ot::StringWriter *ot::FactoryDiags::Diags::RawPowerSetting::ToString@<X0>(ot::FactoryDiags::Diags::RawPowerSetting *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, *((_WORD *)this + 8));
}

{
  return ot::FactoryDiags::Diags::RawPowerSetting::ToString(this, a2);
}

uint64_t ot::FactoryDiags::Diags::GetRawPowerSetting(ot::FactoryDiags::Diags *this, ot::FactoryDiags::Diags::RawPowerSetting *a2)
{
  *((_WORD *)a2 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 16;
  Instance  = ot::InstanceLocator::GetInstance(this);
  return otPlatDiagRadioGetRawPowerSetting((uint64_t)Instance, (unsigned __int16 *)a2, (char *)a2 + 16);
}

uint64_t ot::FactoryDiags::Diags::ProcessRawPowerSetting(ot::FactoryDiags::Diags *this, char a2, const char **a3, char *a4, size_t a5)
{
  if (otPlatDiagModeGet())
  {
    if (a2)
    {
      if (!strcmp(*a3, "enable"))
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        RawPowerSetting  = otPlatDiagRadioRawPowerSettingEnable((uint64_t)Instance, 1);
      }
      else if (!strcmp(*a3, "disable"))
      {
        uint64_t v8 = ot::InstanceLocator::GetInstance(this);
        RawPowerSetting  = otPlatDiagRadioRawPowerSettingEnable((uint64_t)v8, 0);
      }
      else
      {
        unsigned __int16 v19 = 16;
        RawPowerSetting  = ot::Utils::CmdLineParser::ParseAsHexString((ot::Utils::CmdLineParser *)*a3, (char *)&v19, v18, v7);
        if (!RawPowerSetting)
        {
          int v9 = ot::InstanceLocator::GetInstance(this);
          RawPowerSetting  = otPlatDiagRadioSetRawPowerSetting((uint64_t)v9, (uint64_t)v18, v19);
        }
      }
    }
    else
    {
      RawPowerSetting  = ot::FactoryDiags::Diags::GetRawPowerSetting(this, (ot::FactoryDiags::Diags::RawPowerSetting *)v18);
      if (!RawPowerSetting)
      {
        ot::FactoryDiags::Diags::RawPowerSetting::ToString((ot::FactoryDiags::Diags::RawPowerSetting *)v18, (ot::StringWriter *)v17);
        uint64_t v5 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v17);
        snprintf(a4, a5, "%s\r\n", v5);
      }
    }
  }
  else
  {
    RawPowerSetting  = 13;
  }
  ot::FactoryDiags::Diags::AppendErrorResult(RawPowerSetting, a4, a5);
  return RawPowerSetting;
}

uint64_t ot::FactoryDiags::Diags::ProcessGpio(ot::FactoryDiags::Diags *this, unsigned __int8 a2, char **a3, char *a4, size_t a5)
{
  unsigned __int16 v19 = this;
  unsigned __int8 v18 = a2;
  int v17 = a3;
  uint64_t v16 = a4;
  __unint64_t size = a5;
  unsigned int Mode = 7;
  *(void *)int v13 = 0;
  int v12 = 0;
  char v11 = 0;
  int v10 = 0;
  if (a2 == 2 && !strcmp(*v17, "get"))
  {
    unsigned int Mode = ot::FactoryDiags::Diags::ParseLong((ot::FactoryDiags::Diags *)v17[1], (char *)v13, v5);
    if (!Mode)
    {
      int v12 = v13[0];
      unsigned int Mode = otPlatDiagGpioGet(v13[0], (BOOL *)&v11);
      if (!Mode) {
        snprintf(v16, __size, "%d\r\n", v11 & 1);
      }
    }
  }
  else if (v18 == 3 && !strcmp(*v17, "set"))
  {
    unsigned int Mode = ot::FactoryDiags::Diags::ParseLong((ot::FactoryDiags::Diags *)v17[1], (char *)v13, v6);
    if (!Mode)
    {
      int v12 = v13[0];
      unsigned int Mode = ot::FactoryDiags::Diags::ParseBool((ot::FactoryDiags::Diags *)v17[2], &v11, v7);
      if (!Mode) {
        unsigned int Mode = otPlatDiagGpioSet(v12, v11 & 1);
      }
    }
  }
  else if (v18 >= 2u && !strcmp(*v17, "mode"))
  {
    unsigned int Mode = ot::FactoryDiags::Diags::ParseLong((ot::FactoryDiags::Diags *)v17[1], (char *)v13, v8);
    if (!Mode)
    {
      int v12 = v13[0];
      if (v18 == 2)
      {
        unsigned int Mode = otPlatDiagGpioGetMode(v12, &v10);
        if (!Mode)
        {
          if (v10)
          {
            if (v10 == 1) {
              snprintf(v16, __size, "out\r\n");
            }
          }
          else
          {
            snprintf(v16, __size, "in\r\n");
          }
        }
      }
      else if (v18 == 3 && !strcmp(v17[2], "in"))
      {
        unsigned int Mode = otPlatDiagGpioSetMode(v12, 0);
      }
      else if (v18 == 3 && !strcmp(v17[2], "out"))
      {
        unsigned int Mode = otPlatDiagGpioSetMode(v12, 1);
      }
    }
  }
  ot::FactoryDiags::Diags::AppendErrorResult(Mode, v16, __size);
  return Mode;
}

uint64_t ot::FactoryDiags::Diags::ParseBool(ot::FactoryDiags::Diags *this, char *a2, BOOL *a3)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  unsigned int v5 = 0;
  unint64_t v4 = 0;
  unsigned int v5 = ot::FactoryDiags::Diags::ParseLong(this, (char *)&v4, (uint64_t *)a3);
  if (!v5)
  {
    if (v4 < 2) {
      *uint64_t v6 = v4 != 0;
    }
    else {
      return 6;
    }
  }
  return v5;
}

uint64_t ot::FactoryDiags::Diags::ParseCmd(ot::FactoryDiags::Diags *this, ot::Utils::CmdLineParser *a2, unsigned __int8 *a3, char **a4)
{
  unsigned int v7 = ot::Utils::CmdLineParser::ParseCmd<(unsigned char)33>(a2, v10);
  if (!v7)
  {
    *a3  = ot::Utils::CmdLineParser::Arg::GetArgsLength((ot::Utils::CmdLineParser::Arg *)v10, v4);
    ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray((ot::Utils::CmdLineParser::Arg *)v10, (ot::Utils::CmdLineParser::Arg *)a4, v5);
  }
  return v7;
}

uint64_t ot::Utils::CmdLineParser::ParseCmd<(unsigned char)33>(ot::Utils::CmdLineParser *a1, char *a2)
{
  return ot::Utils::CmdLineParser::ParseCmd(a1, a2, (ot::Utils::CmdLineParser::Arg *)0x21);
}

{
  return ot::Utils::CmdLineParser::ParseCmd<(unsigned char)33>(a1, a2);
}

uint64_t ot::FactoryDiags::Diags::ProcessLine(ot::FactoryDiags::Diags *this, char *a2, char *a3, size_t a4)
{
  int v12 = this;
  __src  = a2;
  __str  = a3;
  __unint64_t size = a4;
  __int16 v8 = 256;
  unsigned int v7 = 0;
  memset(__b, 0, sizeof(__b));
  unsigned __int8 v6 = 0;
  if ((unsigned __int16)ot::StringLength((ot *)__src, (const char *)0x100) < 0x100u)
  {
    strcpy(__dst, __src);
    unsigned int v7 = ot::FactoryDiags::Diags::ParseCmd(this, (ot::Utils::CmdLineParser *)__dst, &v6, (char **)__b);
  }
  else
  {
    unsigned int v7 = 3;
  }
  if (v7)
  {
    if (v7 == 3)
    {
      snprintf(__str, __size, "failed: command string too long\r\n");
    }
    else if (v7 == 7)
    {
      snprintf(__str, __size, "failed: command string contains too many arguments\r\n");
    }
    else
    {
      snprintf(__str, __size, "failed to parse command string\r\n");
    }
  }
  else
  {
    *__str  = 0;
    return ot::FactoryDiags::Diags::ProcessCmd(this, v6, __b, __str, __size);
  }
  return v7;
}

uint64_t ot::FactoryDiags::Diags::ProcessCmd(ot::FactoryDiags::Diags *this, unsigned __int8 a2, const char **a3, char *a4, size_t a5)
{
  unsigned int v15 = 0;
  if (a2)
  {
    *a4  = 0;
    for (char i = &ot::FactoryDiags::Diags::sCommands; ; i += 3)
    {
      if (i == ot::Mac::Mac::OperationToString(ot::Mac::Mac::Operation)::kOperationStrings)
      {
        Instance  = ot::InstanceLocator::GetInstance(this);
        unsigned int v15 = otPlatDiagProcess((uint64_t)Instance, a2, (uint64_t)a3, (uint64_t)a4, a5);
        goto LABEL_17;
      }
      if (!strcmp(*a3, *i)) {
        break;
      }
    }
    uint64_t v7 = (uint64_t)i[2];
    int v12 = (void *)((char *)this + (v7 >> 1));
    if (v7) {
      char v11 = *(char **)(*v12 + i[1]);
    }
    else {
      char v11 = i[1];
    }
    if (a2 <= 1u) {
      unsigned int v8 = ((uint64_t (*)(void *, void, void, char *, size_t))v11)(v12, (a2 - 1), 0, a4, a5);
    }
    else {
      unsigned int v8 = ((uint64_t (*)(void *, void, const char **, char *, size_t))v11)(v12, (a2 - 1), a3 + 1, a4, a5);
    }
    unsigned int v15 = v8;
  }
  else
  {
    char v5 = otPlatDiagModeGet();
    unsigned __int8 v6 = "enabled";
    if ((v5 & 1) == 0) {
      unsigned __int8 v6 = "disabled";
    }
    snprintf(a4, a5, "diagnostics mode is %s\r\n", v6);
  }
LABEL_17:
  if (v15 == 35 && a2 > 1u) {
    snprintf(a4, a5, "diag feature '%s' is not supported\r\n", *a3);
  }
  return v15;
}

uint64_t ot::FactoryDiags::Diags::IsEnabled(ot::FactoryDiags::Diags *this)
{
  return otPlatDiagModeGet() & 1;
}

BOOL ot::FactoryDiags::Diags::RawPowerSetting::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BOOL v3 = 1;
  if (a1[8] == a2[8]) {
    return memcmp(a1, a2, a1[8]) != 0;
  }
  return v3;
}

{
  return ot::FactoryDiags::Diags::RawPowerSetting::operator!=(a1, a2);
}

uint64_t ot::Mac::ChannelMask::GetNumberOfChannels(ot::Mac::ChannelMask *this)
{
  char v5 = this;
  unsigned __int8 v4 = 0;
  unsigned __int8 v3 = -1;
  while (!ot::Mac::ChannelMask::GetNextChannel(this, &v3))
    ++v4;
  return v4;
}

uint64_t ot::Mac::ChannelMask::GetNextChannel(ot::Mac::ChannelMask *this, unsigned __int8 *a2)
{
  unsigned int v4 = 23;
  if (*a2 == 255) {
    *a2  = 10;
  }
  ++*a2;
  while (*a2 <= 0x19u)
  {
    if (ot::Mac::ChannelMask::ContainsChannel(this, *a2)) {
      return 0;
    }
    ++*a2;
  }
  return v4;
}

BOOL ot::Mac::ChannelMask::ContainsChannel(ot::Mac::ChannelMask *this, unsigned __int8 a2)
{
  return a2 < 0x20uLL && ((1 << a2) & *(unsigned int *)this) != 0;
}

{
  return ot::Mac::ChannelMask::ContainsChannel(this, a2);
}

uint64_t ot::Mac::ChannelMask::GetNextChannelWithRollOver(ot::Mac::ChannelMask *this, unsigned __int8 a2)
{
  char v5 = this;
  v4[1]  = a2;
  v4[0]  = a2;
  if (ot::Mac::ChannelMask::IsEmpty(this))
  {
    if (++v4[0] > 0x19u) {
      v4[0]  = 11;
    }
  }
  else if (ot::Mac::ChannelMask::GetNextChannel(this, v4) == 23)
  {
    v4[0]  = -1;
    ot::Mac::ChannelMask::GetNextChannel(this, v4);
    IgnoreError();
  }
  return v4[0];
}

BOOL ot::Mac::ChannelMask::IsEmpty(ot::Mac::ChannelMask *this)
{
  return *(_DWORD *)this == 0;
}

{
  return ot::Mac::ChannelMask::IsEmpty(this);
}

uint64_t ot::Mac::ChannelMask::GetWakeupChannel(ot::Mac::ChannelMask *this)
{
  return 11;
}

uint64_t ot::Mac::ChannelMask::ChooseRandomChannel(ot::Mac::ChannelMask *this)
{
  uint64_t v7 = this;
  unsigned __int8 v6 = -1;
  if (!ot::Mac::ChannelMask::IsEmpty(this))
  {
    NumberOfChannels  = ot::Mac::ChannelMask::GetNumberOfChannels(this);
    unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0, NumberOfChannels);
    if (!ot::Mac::ChannelMask::GetNextChannel(this, &v6))
    {
      do
        int v2 = Uint8InRange--;
      while (v2 && !ot::Mac::ChannelMask::GetNextChannel(this, &v6));
    }
  }
  return v6;
}

ot::StringWriter *ot::Mac::ChannelMask::ToString@<X0>(ot::Mac::ChannelMask *this@<X0>, ot::StringWriter *a2@<X8>)
{
  int v12 = this;
  ot::String<(unsigned short)45>::String((uint64_t)a2);
  unsigned __int8 v11 = -1;
  char v10 = 0;
  ot::StringWriter::Append(a2, "{");
  Nextunsigned __int8 Channel = ot::Mac::ChannelMask::GetNextChannel(this, &v11);
  while (!NextChannel)
  {
    unsigned __int8 v8 = v11;
    for (unsigned __int8 i = v11; ; unsigned __int8 i = v11)
    {
      Nextunsigned __int8 Channel = ot::Mac::ChannelMask::GetNextChannel(this, &v11);
      if (NextChannel || v11 != i + 1) {
        break;
      }
    }
    int v2 = ", ";
    if ((v10 & 1) == 0) {
      int v2 = " ";
    }
    ot::StringWriter::Append(a2, "%s%d", v2, v8);
    char v10 = 1;
    if (v8 < (int)i)
    {
      unsigned __int8 v3 = ", ";
      if (i != v8 + 1) {
        unsigned __int8 v3 = "-";
      }
      ot::StringWriter::Append(a2, "%s%d", v3, i);
    }
  }
  return ot::StringWriter::Append(a2, " }");
}

uint64_t ot::String<(unsigned short)45>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 45);
  return a1;
}

ot::DataPollHandler::Callbacks *ot::DataPollHandler::Callbacks::Callbacks(ot::DataPollHandler::Callbacks *this, ot::Instance *a2)
{
  return this;
}

{
  ot::DataPollHandler::Callbacks::Callbacks(this, a2);
  return this;
}

ot::DataPollHandler *ot::DataPollHandler::DataPollHandler(ot::DataPollHandler *this, ot::Instance *a2)
{
  *(void *)this  = 0;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 0;
  ot::DataPollHandler::Callbacks::Callbacks((ot::DataPollHandler *)((char *)this + 10), a2);
  return this;
}

{
  ot::DataPollHandler::DataPollHandler(this, a2);
  return this;
}

BOOL ot::DataPollHandler::Clear(ot::DataPollHandler *this)
{
  unsigned __int8 v11 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 5);
  char v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1]  = v2;
  v7[0]  = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1]  = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    ot::DataPollHandler::ChildInfo::SetDataPollPending(v6 + 160, 0);
    ot::DataPollHandler::ChildInfo::SetFrameReplacePending(v6 + 160, 0);
    ot::DataPollHandler::ChildInfo::SetFramePurgePending(v6 + 160, 0);
    ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts(v6 + 160);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }
  *(void *)this  = 0;
  return result;
}

uint64_t ot::DataPollHandler::ChildInfo::SetDataPollPending(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6)  = *(unsigned char *)(this + 6) & 0xDF | (32 * (a2 & 1));
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::SetDataPollPending(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::SetFrameReplacePending(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6)  = *(unsigned char *)(this + 6) & 0x7F | ((a2 & 1) << 7);
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::SetFrameReplacePending(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::SetFramePurgePending(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6)  = *(unsigned char *)(this + 6) & 0xBF | ((a2 & 1) << 6);
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::SetFramePurgePending(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts(uint64_t this)
{
  *(unsigned char *)(this + 6) &= 0xE0u;
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts(this);
}

void ot::DataPollHandler::RequestFrameChange(uint64_t a1, char a2, ot::Child *a3)
{
  if (*(ot::Child **)a1 == a3
    && (uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1),
        ot::Mac::Mac::IsPerformingIndirectTransmit(v3)))
  {
    if (a2)
    {
      if (a2 == 1) {
        ot::DataPollHandler::ChildInfo::SetFrameReplacePending((uint64_t)a3 + 160, 1);
      }
    }
    else
    {
      ot::DataPollHandler::ChildInfo::SetFramePurgePending((uint64_t)a3 + 160, 1);
    }
  }
  else
  {
    ot::DataPollHandler::ResetTxAttempts((ot::DataPollHandler *)a1, a3);
    ot::DataPollHandler::Callbacks::HandleFrameChangeDone((ot::DataPollHandler::Callbacks *)(a1 + 10), a3);
  }
}

BOOL ot::Mac::Mac::IsPerformingIndirectTransmit(ot::Mac::Mac *this)
{
  return *((unsigned char *)this + 1) == 7;
}

{
  return ot::Mac::Mac::IsPerformingIndirectTransmit(this);
}

unsigned char *ot::DataPollHandler::ResetTxAttempts(ot::DataPollHandler *this, ot::Child *a2)
{
  return ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((unsigned char *)a2 + 168);
}

void ot::DataPollHandler::Callbacks::HandleFrameChangeDone(ot::DataPollHandler::Callbacks *this, ot::Child *a2)
{
  uint64_t v2 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
  ot::IndirectSender::HandleFrameChangeDone(v2, a2);
}

{
  ot::DataPollHandler::Callbacks::HandleFrameChangeDone(this, a2);
}

void ot::DataPollHandler::HandleDataPoll(ot::DataPollHandler *this, ot::Mac::RxFrame *a2)
{
  int v27 = this;
  char v26 = a2;
  ot::Mac::Address::Address((ot::Mac::Address *)v25);
  if (ot::Mac::Frame::GetSecurityEnabled(v26))
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (!ot::Mle::Mle::IsDetached(v2) && !ot::Mac::Frame::GetSrcAddr(v26, (ot::Mac::Address *)v25))
    {
      uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      ot::ChildTable::FindChild(v3, (ot::Mac::Address *)v25, 1);
      uint64_t v24 = (uint64_t)v4;
      if (v4)
      {
        int Now = ot::TimerMilli::GetNow(v4);
        ot::Neighbor::SetLastHeard(v24, Now);
        ot::Neighbor::ResetLinkFailures(v24);
        IndirectMessageCount  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::IndirectSender::ChildInfo *)(v24 + 144));
        ot::IndirectSender::ChildInfo::GetApplicationMessageCount((ot::IndirectSender::ChildInfo *)(v24 + 144));
        char Rloc16 = ot::Neighbor::GetRloc16((ot::Neighbor *)v24);
        ot::Mac::RxFrame::GetRssi(v26);
        ot::Mac::RxFrame::IsAckedWithFramePending(v26);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollHandlr", "Rx data poll, src:0x%04x, qed_msgs:%d, app_msgs:%d, rss:%d, ack-fp:%d", v12, v13, v14, v15, v16, v17, Rloc16);
        if (ot::Mac::RxFrame::IsAckedWithFramePending(v26))
        {
          if (*(void *)this)
          {
            ot::DataPollHandler::ChildInfo::SetDataPollPending(v24 + 160, 1);
          }
          else
          {
            *(void *)this  = v24;
            unsigned __int16 v19 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ot::Mac::Mac::RequestIndirectFrameTransmission(v19);
          }
        }
        else if (IndirectMessageCount)
        {
          if (ot::Mac::Address::IsShort((ot::Mac::Address *)v25))
          {
            matched  = (ot::SourceMatchController *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SourceMatchController>(this);
            ot::SourceMatchController::SetSrcMatchAsShort(matched, (ot::Child *)v24, 1);
          }
        }
      }
      else
      {
        ot::Mac::Address::ToString((ot::Mac::Address *)v25, (ot::StringWriter *)v28);
        char v5 = ot::String<(unsigned short)17>::AsCString((uint64_t)v28);
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"DataPollHandlr", "Rx data poll, child:%s not found", v6, v7, v8, v9, v10, v11, v5);
      }
    }
  }
}

uint64_t ot::Neighbor::ResetLinkFailures(uint64_t this)
{
  *(unsigned char *)(this + 35)  = 0;
  return this;
}

{
  return ot::Neighbor::ResetLinkFailures(this);
}

uint64_t ot::IndirectSender::ChildInfo::GetApplicationMessageCount(ot::IndirectSender::ChildInfo *this)
{
  return HIDWORD(*((void *)this + 1)) & 0x3FFF;
}

{
  return ot::IndirectSender::ChildInfo::GetApplicationMessageCount(this);
}

uint64_t ot::Mac::RxFrame::GetRssi(ot::Mac::RxFrame *this)
{
  return *((char *)this + 29);
}

{
  return ot::Mac::RxFrame::GetRssi(this);
}

uint64_t ot::Mac::RxFrame::IsAckedWithFramePending(ot::Mac::RxFrame *this)
{
  return *((unsigned char *)this + 31) & 1;
}

{
  return ot::Mac::RxFrame::IsAckedWithFramePending(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::SourceMatchController>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::SourceMatchController>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::SourceMatchController>(a1);
}

ot::Mac::Frame *ot::DataPollHandler::HandleFrameRequest(ot::DataPollHandler *this, ot::Mac::TxFrames *a2)
{
  TxFrame  = 0;
  if (*(void *)this)
  {
    TxFrame  = (ot::Mac::Frame *)ot::Mac::TxFrames::GetTxFrame(a2);
    if (ot::DataPollHandler::Callbacks::PrepareFrameForChild((ot::DataPollHandler *)((char *)this + 10), TxFrame, (_WORD *)this + 4, *(void *)this))
    {
      return 0;
    }
    else
    {
      IndirectTxAttempts  = ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts((ot::DataPollHandler::ChildInfo *)(*(void *)this + 160));
      if (v3 | (IndirectTxAttempts == 0)) {
        char v4 = 0;
      }
      else {
        char v4 = 1;
      }
      if ((v4 & 1) == 0
        && ((CslTxAttempts  = ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((ot::CslTxScheduler::ChildInfo *)(*(void *)this + 168)),
             !(v3 | (CslTxAttempts == 0)))
          ? (char v6 = 0)
          : (char v6 = 1),
            (v6 & 1) != 0))
      {
        ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 0);
      }
      else
      {
        ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 1);
        IndirectDataSequenceNumber  = ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber((ot::DataPollHandler::ChildInfo *)(*(void *)this + 160));
        ot::Mac::Frame::SetSequence(TxFrame, IndirectDataSequenceNumber);
        if (ot::Mac::Frame::GetSecurityEnabled(TxFrame))
        {
          IndirectFrameCounter  = ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter((ot::DataPollHandler::ChildInfo *)(*(void *)this + 160));
          ot::Mac::Frame::SetFrameCounter(TxFrame, IndirectFrameCounter);
          IndirectKeyId  = ot::DataPollHandler::ChildInfo::GetIndirectKeyId((ot::DataPollHandler::ChildInfo *)(*(void *)this + 160));
          ot::Mac::Frame::SetKeyId(TxFrame, IndirectKeyId);
        }
      }
    }
  }
  return TxFrame;
}

uint64_t ot::DataPollHandler::Callbacks::PrepareFrameForChild(ot::InstanceLocator *a1, ot::Mac::TxFrame *a2, _WORD *a3, uint64_t a4)
{
  char v4 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  return ot::IndirectSender::PrepareFrameForChild(v4, a2, a3, a4);
}

{
  return ot::DataPollHandler::Callbacks::PrepareFrameForChild(a1, a2, a3, a4);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts(ot::DataPollHandler::ChildInfo *this)
{
  return *((unsigned char *)this + 6) & 0x1F;
}

{
  return ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslTxAttempts(ot::CslTxScheduler::ChildInfo *this)
{
  return *(unsigned char *)this & 0x3F;
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslTxAttempts(this);
}

uint64_t ot::Mac::TxFrame::SetIsARetransmission(uint64_t this, char a2)
{
  *(unsigned char *)(this + 45)  = *(unsigned char *)(this + 45) & 0xFD | (2 * (a2 & 1));
  return this;
}

{
  return ot::Mac::TxFrame::SetIsARetransmission(this, a2);
}

uint64_t ot::Mac::Frame::SetSequence(ot::Mac::Frame *this, char a2)
{
  Psdu  = ot::Mac::Frame::GetPsdu(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  FcfSize  = ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)FrameControlField);
  uint64_t result = Psdu;
  *(unsigned char *)(Psdu + FcfSize)  = a2;
  return result;
}

{
  return ot::Mac::Frame::SetSequence(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber(ot::DataPollHandler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 5);
}

{
  return ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber(this);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter(ot::DataPollHandler::ChildInfo *this)
{
  return *(unsigned int *)this;
}

{
  return ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter(this);
}

uint64_t ot::DataPollHandler::ChildInfo::GetIndirectKeyId(ot::DataPollHandler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return ot::DataPollHandler::ChildInfo::GetIndirectKeyId(this);
}

void ot::DataPollHandler::HandleSentFrame(unsigned __int16 *a1, ot::Mac::TxFrame *a2, unsigned int a3)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)a1  = 0;
    ot::DataPollHandler::HandleSentFrame(a1, a2, a3, v4);
  }
  ot::DataPollHandler::ProcessPendingPolls((ot::DataPollHandler *)a1);
}

void ot::DataPollHandler::HandleSentFrame(unsigned __int16 *a1, ot::Mac::TxFrame *a2, unsigned int a3, uint64_t a4)
{
  char v21 = a1;
  char v20 = a2;
  unsigned int v19 = a3;
  unsigned __int8 v18 = (ot::Neighbor *)a4;
  if (ot::DataPollHandler::ChildInfo::IsFramePurgePending((ot::DataPollHandler::ChildInfo *)(a4 + 160)))
  {
    ot::DataPollHandler::ChildInfo::SetFramePurgePending((uint64_t)v18 + 160, 0);
    ot::DataPollHandler::ChildInfo::SetFrameReplacePending((uint64_t)v18 + 160, 0);
    ot::DataPollHandler::ResetTxAttempts((ot::DataPollHandler *)a1, v18);
    ot::DataPollHandler::Callbacks::HandleFrameChangeDone((ot::DataPollHandler::Callbacks *)(a1 + 5), v18);
  }
  else
  {
    if (v19)
    {
      uint64_t v5 = v19;
      char v4 = 1;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 0;
    }
    if (v4) {
LABEL_27:
    }
      __assert_rtn("HandleSentFrame", "data_poll_handler.cpp", 347, "false");
    switch(v5)
    {
      case 0:
        ot::DataPollHandler::ResetTxAttempts((ot::DataPollHandler *)a1, v18);
        ot::DataPollHandler::ChildInfo::SetFrameReplacePending((uint64_t)v18 + 160, 0);
        goto LABEL_28;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
        goto LABEL_27;
      case 11:
      case 15:
      case 29:
        goto LABEL_14;
      case 14:
        IsHeaderUpdated  = 1;
        if (ot::Mac::Frame::GetSecurityEnabled(v20)) {
          IsHeaderUpdated  = ot::Mac::TxFrame::IsHeaderUpdated(v20);
        }
        if ((IsHeaderUpdated & 1) == 0) {
          __assert_rtn("HandleSentFrame", "data_poll_handler.cpp", 300, "!aFrame.GetSecurityEnabled() || aFrame.IsHeaderUpdated()");
        }
        ot::DataPollHandler::ChildInfo::IncrementIndirectTxAttempts((uint64_t)v18 + 160);
        char Rloc16 = ot::Neighbor::GetRloc16(v18);
        ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts((ot::Neighbor *)((char *)v18 + 160));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollHandlr", "Indirect tx to child %04x failed, attempt %d/%d", v6, v7, v8, v9, v10, v11, Rloc16);
LABEL_14:
        if (ot::DataPollHandler::ChildInfo::IsFrameReplacePending((ot::Neighbor *)((char *)v18 + 160)))
        {
          ot::DataPollHandler::ChildInfo::SetFrameReplacePending((uint64_t)v18 + 160, 0);
          ot::DataPollHandler::ResetTxAttempts((ot::DataPollHandler *)a1, v18);
          ot::DataPollHandler::Callbacks::HandleFrameChangeDone((ot::DataPollHandler::Callbacks *)(a1 + 5), v18);
        }
        else if (ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts((ot::Neighbor *)((char *)v18 + 160)) >= 4u {
               || ot::Mac::Frame::IsEmpty(v20))
        }
        {
          ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts((uint64_t)v18 + 160);
LABEL_28:
          ot::DataPollHandler::Callbacks::HandleSentFrameToChild((ot::InstanceLocator *)(a1 + 5), v20, a1 + 4, v19, (uint64_t)v18);
        }
        else
        {
          Sequence  = ot::Mac::Frame::GetSequence(v20);
          ot::DataPollHandler::ChildInfo::SetIndirectDataSequenceNumber((uint64_t)v18 + 160, Sequence);
          if (ot::Mac::Frame::GetSecurityEnabled(v20) && (ot::Mac::TxFrame::IsHeaderUpdated(v20) & 1) != 0)
          {
            unsigned int v17 = 0;
            unsigned __int8 v16 = 0;
            if (ot::Mac::Frame::GetFrameCounter(v20, &v17)) {
              __assert_rtn("HandleSentFrame", "data_poll_handler.cpp", 333, "false");
            }
            ot::DataPollHandler::ChildInfo::SetIndirectFrameCounter((_DWORD *)v18 + 40, v17);
            if (ot::Mac::Frame::GetKeyId(v20, &v16)) {
              __assert_rtn("HandleSentFrame", "data_poll_handler.cpp", 336, "false");
            }
            ot::DataPollHandler::ChildInfo::SetIndirectKeyId((uint64_t)v18 + 160, v16);
          }
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void ot::DataPollHandler::ProcessPendingPolls(ot::DataPollHandler *this)
{
  uint64_t v14 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v12 = ot::ChildTable::Iterate(v1, 1);
  uint64_t v13 = (ot::ChildTable::IteratorBuilder *)&v12;
  v11[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v12);
  v11[1]  = v2;
  v10[0]  = ot::ChildTable::IteratorBuilder::end(v13);
  v10[1]  = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v11, v10))
  {
    uint64_t v9 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v11);
    if (ot::DataPollHandler::ChildInfo::IsDataPollPending((ot::Neighbor *)((char *)v9 + 160)))
    {
      BOOL v5 = 1;
      if (*(void *)this)
      {
        LastHeard  = ot::Neighbor::GetLastHeard(v9);
        int v7 = ot::Neighbor::GetLastHeard(*(ot::Neighbor **)this);
        BOOL v5 = ot::Time::operator<(&LastHeard, &v7);
      }
      if (v5) {
        *(void *)this  = v9;
      }
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v11);
  }
  if (*(void *)this)
  {
    ot::DataPollHandler::ChildInfo::SetDataPollPending(*(void *)this + 160, 0);
    char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::RequestIndirectFrameTransmission(v4);
  }
}

uint64_t ot::DataPollHandler::ChildInfo::IsFramePurgePending(ot::DataPollHandler::ChildInfo *this)
{
  return (*((unsigned __int8 *)this + 6) >> 6) & 1;
}

{
  return ot::DataPollHandler::ChildInfo::IsFramePurgePending(this);
}

uint64_t ot::Mac::TxFrame::IsHeaderUpdated(ot::Mac::TxFrame *this)
{
  return *((unsigned char *)this + 45) & 1;
}

{
  return ot::Mac::TxFrame::IsHeaderUpdated(this);
}

uint64_t ot::DataPollHandler::ChildInfo::IncrementIndirectTxAttempts(uint64_t this)
{
  *(unsigned char *)(this + 6)  = *(unsigned char *)(this + 6) & 0xE0 | ((*(unsigned char *)(this + 6) & 0x1F) + 1) & 0x1F;
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::IncrementIndirectTxAttempts(this);
}

uint64_t ot::DataPollHandler::ChildInfo::IsFrameReplacePending(ot::DataPollHandler::ChildInfo *this)
{
  return (*((unsigned __int8 *)this + 6) >> 7) & 1;
}

{
  return ot::DataPollHandler::ChildInfo::IsFrameReplacePending(this);
}

BOOL ot::Mac::Frame::IsEmpty(ot::Mac::Frame *this)
{
  return *((_WORD *)this + 4) == 0;
}

{
  return ot::Mac::Frame::IsEmpty(this);
}

uint64_t ot::DataPollHandler::ChildInfo::SetIndirectDataSequenceNumber(uint64_t this, char a2)
{
  *(unsigned char *)(this + 5)  = a2;
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::SetIndirectDataSequenceNumber(this, a2);
}

uint64_t ot::Mac::Frame::GetSequence(ot::Mac::Frame *this)
{
  Psdu  = ot::Mac::Frame::GetPsdu(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return *(unsigned __int8 *)(Psdu + ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)FrameControlField));
}

{
  return ot::Mac::Frame::GetSequence(this);
}

_DWORD *ot::DataPollHandler::ChildInfo::SetIndirectFrameCounter(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::SetIndirectFrameCounter(this, a2);
}

uint64_t ot::DataPollHandler::ChildInfo::SetIndirectKeyId(uint64_t this, char a2)
{
  *(unsigned char *)(this + ++*(_WORD *)(this + 4) = a2;
  return this;
}

{
  return ot::DataPollHandler::ChildInfo::SetIndirectKeyId(this, a2);
}

void ot::DataPollHandler::Callbacks::HandleSentFrameToChild(ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  ot::IndirectSender::HandleSentFrameToChild(v5, a2, a3, a4, a5);
}

{
  ot::DataPollHandler::Callbacks::HandleSentFrameToChild(a1, a2, a3, a4, a5);
}

uint64_t ot::DataPollHandler::ChildInfo::IsDataPollPending(ot::DataPollHandler::ChildInfo *this)
{
  return (*((unsigned __int8 *)this + 6) >> 5) & 1;
}

{
  return ot::DataPollHandler::ChildInfo::IsDataPollPending(this);
}

uint64_t ot::Neighbor::GetLastHeard(ot::Neighbor *this)
{
  return *((unsigned int *)this + 2);
}

{
  return ot::Neighbor::GetLastHeard(this);
}

unsigned char *ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts(unsigned char *this)
{
  *this &= 0xC0u;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::IndirectSender>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
}

uint64_t ot::Instance::Get<ot::IndirectSender>(uint64_t a1)
{
  return a1 + 90208;
}

{
  return ot::Instance::Get<ot::IndirectSender>(a1);
}

uint64_t ot::Mac::Frame::GetPsdu(ot::Mac::Frame *this)
{
  return *(void *)this;
}

{
  return *(void *)this;
}

{
  return ot::Mac::Frame::GetPsdu(this);
}

{
  return ot::Mac::Frame::GetPsdu(this);
}

uint64_t ot::Mac::Frame::GetFcfSize(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::IsShortFcf((ot::Mac::Frame *)(unsigned __int16)this)) {
    return 1;
  }
  else {
    return 2;
  }
}

{
  return ot::Mac::Frame::GetFcfSize(this);
}

uint64_t ot::Instance::Get<ot::SourceMatchController>(uint64_t a1)
{
  return a1 + 90209;
}

{
  return ot::Instance::Get<ot::SourceMatchController>(a1);
}

ot::DataPollSender *ot::DataPollSender::DataPollSender(ot::DataPollSender *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Time::Time(this, 0);
  ot::Time::Time((ot::DataPollSender *)((char *)this + 4), 0);
  ot::Time::Time((ot::DataPollSender *)((char *)this + 8), 0);
  *((_DWORD *)this + ++*(_WORD *)(this + 4) = 0;
  *((_DWORD *)this + 5) &= 0xFC000000;
  *((_DWORD *)this + 5) &= 0x3FFFFFFu;
  ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::TimerMilliIn((ot::DataPollSender *)((char *)this + 24), a2);
  uint64_t result = this;
  *((unsigned char *)this + 48) &= ~1u;
  *((unsigned char *)this + 48) &= ~2u;
  *((unsigned char *)this + 48) &= ~4u;
  *((unsigned char *)this + 48) &= 0x87u;
  *((unsigned char *)this + 49) &= 0xF0u;
  *((unsigned char *)this + 49) &= 0xFu;
  return result;
}

{
  ot::DataPollSender::DataPollSender(this, a2);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::HandleTimer);
  return a1;
}

ot::Neighbor *ot::DataPollSender::GetParent(ot::DataPollSender *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ParentCandidate  = (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v1);
  if (ot::Neighbor::IsStateValid(ParentCandidate)) {
    return ParentCandidate;
  }
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  return (ot::Neighbor *)ot::Mle::Mle::GetParent(v2);
}

uint64_t ot::Mle::Mle::GetParentCandidate(ot::Mle::Mle *this)
{
  return (uint64_t)this + 416;
}

{
  return ot::Mle::Mle::GetParentCandidate(this);
}

BOOL ot::Neighbor::IsStateValid(ot::Neighbor *this)
{
  return (*((unsigned char *)this + 30) & 0xF) == 7;
}

{
  return ot::Neighbor::IsStateValid(this);
}

void ot::DataPollSender::StartPolling(ot::DataPollSender *this)
{
  if ((*((unsigned char *)this + 48) & 1) == 0)
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsRxOnWhenIdle(v1)) {
      __assert_rtn("StartPolling", "data_poll_sender.cpp", 86, "!Get<Mle::MleRouter>().IsRxOnWhenIdle()");
    }
    *((unsigned char *)this + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *((unsigned char *)this + 48) & 0xFE | 1;
    ot::DataPollSender::ScheduleNextPoll(this, 1);
  }
}

BOOL ot::Mle::Mle::IsRxOnWhenIdle(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::Mle *)((char *)this + 240));
}

{
  return ot::Mle::Mle::IsRxOnWhenIdle(this);
}

void ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender *a1, char a2)
{
  uint64_t v15 = a1;
  char v14 = a2;
  uint64_t v8 = a1;
  int v12 = 0;
  int v12 = *((_DWORD *)a1 + 4);
  if (a2 == 1)
  {
    a1  = (ot::DataPollSender *)ot::DataPollSender::CalculatePollPeriod(a1);
    *((_DWORD *)v8 + ++*(_WORD *)(this + 4) = a1;
  }
  int Now = ot::TimerMilli::GetNow(a1);
  int v13 = Now;
  if (ot::Timer::IsRunning((ot::DataPollSender *)((char *)v8 + 24)))
  {
    if (v12 != *((_DWORD *)v8 + 4))
    {
      int v10 = ot::Time::operator+(v8, *((_DWORD *)v8 + 4));
      int v9 = ot::Time::operator+(&v13, 10);
      if (ot::Time::operator<(&v10, &v9)) {
        ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)v8 + 24), v13, 0xAu);
      }
      else {
        ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)v8 + 24), *(_DWORD *)v8, *((_DWORD *)v8 + 4));
      }
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = v13;
    ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)v8 + 24), *(_DWORD *)v8, *((_DWORD *)v8 + 4));
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: oldPeriod: %d, mPollPeriod: %d", v2, v3, v4, v5, v6, v7, (char)"ScheduleNextPoll");
}

uint64_t ot::DataPollSender::StopPolling(ot::DataPollSender *this)
{
  uint64_t result = ot::TimerMilli::Stop((ot::DataPollSender *)((char *)this + 24));
  *((unsigned char *)this + 48) &= ~2u;
  *((unsigned char *)this + 48) &= ~4u;
  *((unsigned char *)this + 48) &= 0x87u;
  *((unsigned char *)this + 49) &= 0xF0u;
  *((unsigned char *)this + 49) &= 0xFu;
  *((_DWORD *)this + 5) &= 0x3FFFFFFu;
  *((unsigned char *)this + 48) &= ~1u;
  return result;
}

uint64_t ot::DataPollSender::SendDataPoll(ot::DataPollSender *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if (ot::Mac::Mac::GetRxOnWhenIdle(v8))
    {
      unsigned int v21 = 13;
    }
    else
    {
      uint64_t Parent = ot::DataPollSender::GetParent(this);
      if (ot::Neighbor::IsStateValidOrRestoring(Parent))
      {
        ot::TimerMilli::Stop((ot::DataPollSender *)((char *)this + 24));
        int v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned int v21 = ot::Mac::Mac::RequestDataPollTransmission(v10);
      }
      else
      {
        unsigned int v21 = 13;
      }
    }
  }
  else
  {
    unsigned int v21 = 13;
  }
  if (v21)
  {
    if (v21 == 13)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"DataPollSender", "Data poll tx requested while data polling was not enabled!", a3, a4, a5, a6, a7, a8, v19);
      ot::DataPollSender::StopPolling(this);
    }
    else
    {
      char v11 = ot::ErrorToString(v21);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"DataPollSender", "Unexpected error %s requesting data poll", v12, v13, v14, v15, v16, v17, v11);
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DataPollSender", "Sending data poll", a3, a4, a5, a6, a7, a8, v19);
    ot::DataPollSender::ScheduleNextPoll(this, 0);
  }
  return v21;
}

uint64_t ot::Mac::Mac::GetRxOnWhenIdle(ot::Mac::Mac *this)
{
  return (*(unsigned __int8 *)this >> 2) & 1;
}

{
  return ot::Mac::Mac::GetRxOnWhenIdle(this);
}

uint64_t ot::DataPollSender::GetPollDestinationAddress(ot::DataPollSender *this, ot::Mac::Address *a2)
{
  unsigned int v9 = 0;
  uint64_t Parent = ot::DataPollSender::GetParent(this);
  if (ot::Neighbor::IsStateValidOrRestoring(Parent))
  {
    uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if ((unsigned __int16)ot::Mac::Mac::GetShortAddress(v2) == 65534
      || (uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
          Parent == (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v3)))
    {
      ot::Neighbor::GetExtAddress(Parent);
      ot::Mac::Address::SetExtended((uint64_t)a2, v4);
    }
    else
    {
      __int16 Rloc16 = ot::Neighbor::GetRloc16(Parent);
      ot::Mac::Address::SetShort((uint64_t)a2, Rloc16);
    }
  }
  else
  {
    return 11;
  }
  return v9;
}

uint64_t ot::Mac::Address::SetShort(uint64_t this, __int16 a2)
{
  *(_WORD *)this  = a2;
  *(unsigned char *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 1;
  return this;
}

{
  return ot::Mac::Address::SetShort(this, a2);
}

uint64_t ot::DataPollSender::SetExternalPollPeriod(ot::DataPollSender *this, unsigned int a2)
{
  int v4 = a2;
  unsigned int v3 = 0;
  if (a2)
  {
    if (a2 < 0xA) {
      return 7;
    }
    if (a2 > 0x3FFFFFF) {
      int v4 = 0x3FFFFFF;
    }
  }
  if ((*((_DWORD *)this + 5) & 0x3FFFFFF) != v4)
  {
    *((_DWORD *)this + 5)  = *((_DWORD *)this + 5) & 0xFC000000 | v4 & 0x3FFFFFF;
    if (*((unsigned char *)this + 48)) {
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }
  return v3;
}

uint64_t ot::DataPollSender::GetKeepAlivePollPeriod(ot::DataPollSender *this)
{
  DefaultPollunsigned __int16 Period = ot::DataPollSender::GetDefaultPollPeriod(this);
  if ((*((_DWORD *)this + 5) & 0x3FFFFFF) != 0) {
    return ot::Min<unsigned int>(DefaultPollPeriod, *((_DWORD *)this + 5) & 0x3FFFFFF);
  }
  return DefaultPollPeriod;
}

uint64_t ot::DataPollSender::GetDefaultPollPeriod(ot::DataPollSender *this)
{
  unsigned int v19 = 4000;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned int Timeout = ot::Mle::Mle::GetTimeout(v1);
  unsigned int v2 = ot::Time::MsecToSec((ot::Time *)0x7FFFFFFF);
  unsigned int v3 = (ot::Time *)ot::Min<unsigned int>(Timeout, v2);
  unsigned int v18 = ot::Time::SecToMsec(v3);
  int v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  if (ot::Mac::Mac::IsCslEnabled(v4))
  {
    uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    Cslunsigned int Timeout = (ot::Time *)ot::Mle::Mle::GetCslTimeout(v5);
    unsigned int v7 = ot::Time::SecToMsec(CslTimeout);
    unsigned int v18 = ot::Min<unsigned int>(v18, v7);
    unsigned int v19 = 1000;
  }
  if (v18 > v19) {
    v18 -= v19;
  }
  uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::GetTimeout(v8);
  ot::Time::MsecToSec((ot::Time *)0x7FFFFFFF);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: period - %u, timeout - %u, pollAhead - %u, delay  = %u", v9, v10, v11, v12, v13, v14, (char)"GetDefaultPollPeriod");
  return v18;
}

void ot::DataPollSender::HandlePollSent(uint64_t a1, ot::Mac::Frame *a2, unsigned int a3)
{
  uint64_t v34 = a1;
  int v33 = a2;
  unsigned int v32 = a3;
  ot::Mac::Address::Address((ot::Mac::Address *)v31);
  char v30 = 0;
  unsigned __int8 v29 = 4;
  ot::Time::Time((ot::Time *)&v28, 0);
  unsigned int v27 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    if (!ot::Mac::Frame::IsEmpty(v33))
    {
      ot::Mac::Frame::GetDstAddr(v33, (ot::Mac::Address *)v31);
      IgnoreError();
      unsigned int v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
      ot::MeshForwarder::UpdateNeighborOnSentFrame(v3, v33, v32, (ot::Mac::Address *)v31, 1);
    }
    uint64_t Parent = ot::DataPollSender::GetParent((ot::DataPollSender *)a1);
    if (ot::Neighbor::IsStateInvalid(Parent))
    {
      ot::DataPollSender::StopPolling((ot::DataPollSender *)a1);
      uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      ot::Mle::Mle::BecomeDetached(v5);
      IgnoreError();
    }
    else
    {
      if (v32)
      {
        uint64_t v7 = v32;
        char v6 = 1;
      }
      else
      {
        uint64_t v7 = 0;
        char v6 = 0;
      }
      if ((v6 & 1) == 0)
      {
        switch(v7)
        {
          case 0:
            if (*(unsigned char *)(a1 + 49) >> 4)
            {
              *(unsigned char *)(a1 + 4ot::Mle::Tlv::SetType(this, 9) = *(unsigned char *)(a1 + 49) & 0xF | (16 * (((*(unsigned char *)(a1 + 49) >> 4) - 1) & 0xF));
              if (!(*(unsigned char *)(a1 + 49) >> 4))
              {
                char v30 = 1;
                *(_DWORD *)(a1 + 20) &= 0x3FFFFFFu;
              }
            }
            if ((*(unsigned char *)(a1 + 48) & 4) != 0)
            {
              *(unsigned char *)(a1 + 48) &= ~4u;
              *(unsigned char *)(a1 + 49) &= 0xF0u;
              char v30 = 1;
            }
            isThreadAlwaysOnFeatureEnabled  = ot::DataPollSender::isThreadAlwaysOnFeatureEnabled((ot::DataPollSender *)a1);
            if (isThreadAlwaysOnFeatureEnabled)
            {
              int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)isThreadAlwaysOnFeatureEnabled);
              int v28 = Now;
              ot::Time::Time((ot::Time *)&v25, 0);
              if (ot::Time::operator==((_DWORD *)(a1 + 8), &v25)) {
                *(_DWORD *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = v28;
              }
              unsigned int v27 = ot::Time::operator-(&v28, (_DWORD *)(a1 + 8));
              if (v27 > 0x2710)
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: time since last successful TX: %u, switching to slow poll period from %d to %d", v9, v10, v11, v12, v13, v14, (char)"HandlePollSent");
                ot::DataPollSender::SetExternalPollPeriod((ot::DataPollSender *)a1, 0x2710u);
              }
            }
            goto LABEL_30;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 12:
          case 13:
          case 14:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
            break;
          case 11:
          case 15:
          case 29:
            *(unsigned char *)(a1 + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(unsigned char *)(a1 + 48) & 0xFB | 4;
            char v30 = 1;
            goto LABEL_30;
          default:
            JUMPOUT(0);
        }
      }
      *(unsigned char *)(a1 + 4ot::Mle::Tlv::SetType(this, 9) = *(unsigned char *)(a1 + 49) & 0xF0 | ((*(unsigned char *)(a1 + 49) & 0xF) + 1) & 0xF;
      ot::Mac::Frame::GetHeaderIe(v33, 0x1Au);
      char v15 = 15;
      if (!v16) {
        char v15 = 4;
      }
      unsigned __int8 v29 = v15;
      char v17 = ot::ErrorToString(v32);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "Failed to send data poll, error:%s, retx:%d/%d", v18, v19, v20, v21, v22, v23, v17);
      if (v29 <= (*(unsigned char *)(a1 + 49) & 0xF))
      {
        *(unsigned char *)(a1 + 48) &= ~4u;
        *(unsigned char *)(a1 + 49) &= 0xF0u;
        char v30 = 1;
      }
      else if ((*(unsigned char *)(a1 + 48) & 4) == 0)
      {
        *(unsigned char *)(a1 + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(unsigned char *)(a1 + 48) & 0xFB | 4;
        char v30 = 1;
      }
LABEL_30:
      if (v30) {
        ot::DataPollSender::ScheduleNextPoll((ot::DataPollSender *)a1, 1);
      }
    }
  }
}

BOOL ot::Neighbor::IsStateInvalid(ot::Neighbor *this)
{
  return (*((unsigned char *)this + 30) & 0xF) == 0;
}

{
  return ot::Neighbor::IsStateInvalid(this);
}

BOOL ot::DataPollSender::isThreadAlwaysOnFeatureEnabled(ot::DataPollSender *this)
{
  RcpHostContext  = (RcpHostContext *)RcpHostContext::GetRcpHostContext(this);
  return RcpHostContext::isThreadAlwaysOnFeatureEnabled(RcpHostContext);
}

BOOL ot::Time::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

{
  return ot::Time::operator==(a1, a2);
}

void ot::Mac::Frame::GetHeaderIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
  ot::AsConst<ot::Mac::Frame>();
  ot::Mac::Frame::GetHeaderIe(v2, a2);
  ot::AsNonConst<unsigned char>();
}

{
  ot::Mac::Frame::GetHeaderIe(this, a2);
}

void ot::DataPollSender::HandlePollTimeout(ot::DataPollSender *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 48))
  {
    *((unsigned char *)this + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *((unsigned char *)this + 48) & 0x87 | (8 * ((((*((unsigned char *)this + 48) >> 3) & 0xF) + 1) & 0xF));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "Data poll timeout, retry:%d/%d", a3, a4, a5, a6, a7, a8, (*((unsigned char *)this + 48) >> 3) & 0xF);
    if (((*((unsigned char *)this + 48) >> 3) & 0xFu) >= 5) {
      *((unsigned char *)this + 48) &= 0x87u;
    }
    else {
      ot::DataPollSender::addB2BDataPollDelay(this, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void ot::DataPollSender::addB2BDataPollDelay(ot::DataPollSender *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = this;
  if (*((unsigned char *)this + 48))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: Add delay %d, session priority %d", a3, a4, a5, a6, a7, a8, (char)"addB2BDataPollDelay");
    int Now = ot::TimerMilli::GetNow(v8);
    int v20 = Now;
    ot::TimerMilli::Stop((ot::DataPollSender *)((char *)this + 24));
    if (*((unsigned char *)this + 12))
    {
      int v18 = ot::Time::operator+((_DWORD *)this + 1, *((unsigned __int8 *)this + 12));
      int v17 = ot::Time::operator+(&v20, 10);
      if (ot::Time::operator<(&v18, &v17)) {
        ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)this + 24), v20, 0xAu);
      }
      else {
        ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)this + 24), *((_DWORD *)this + 1), *((unsigned __int8 *)this + 12));
      }
    }
    else
    {
      ot::DataPollSender::SendDataPoll(this, v9, v10, v11, v12, v13, v14, v15);
      IgnoreError();
    }
  }
}

void ot::DataPollSender::ProcessRxFrame(ot::DataPollSender *this, const ot::Mac::RxFrame *a2)
{
  if (*((unsigned char *)this + 48))
  {
    *((unsigned char *)this + 48) &= 0x87u;
    if (ot::Mac::Frame::GetFramePending(a2))
    {
      unsigned int v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      if (ot::Mac::Mac::IsCslEnabled(v2))
      {
        uint64_t v16 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ot::Mac::Mac::IsCslEnabled(v16);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: DataPollSender::ProcessRxFrame FramePending bit set in Rx Frame, but suppressing as CSL is enabled %d", v17, v18, v19, v20, v21, v22, (char)"ProcessRxFrame");
      }
      else
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: DataPollSender::ProcessRxFrame FramePending bit set in Rx Frame", v3, v4, v5, v6, v7, v8, (char)"ProcessRxFrame");
        ot::DataPollSender::addB2BDataPollDelay(this, v9, v10, v11, v12, v13, v14, v15);
      }
    }
  }
}

BOOL ot::Mac::Frame::GetFramePending(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsFramePending((ot::Mac::Frame *)FrameControlField);
}

{
  return ot::Mac::Frame::GetFramePending(this);
}

void ot::DataPollSender::ProcessTxDone(uint64_t a1, ot::Mac::Frame *a2, ot::Mac::Frame *a3, int a4)
{
  uint64_t v43 = a1;
  uint64_t v42 = a2;
  uint64_t v41 = a3;
  int v40 = a4;
  char v39 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
    uint64_t Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v4);
    if (ot::Neighbor::IsEnhancedKeepAliveSupported(Parent) && ot::Mac::Frame::GetSecurityEnabled(v42))
    {
      if ((*((unsigned char *)v42 + 45) & 2) != 0 && ot::Mac::Frame::GetHeaderIe(v42, 0x1Au))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: For retransmission frame, use a data poll to resync its parent with correct CSL phase", v7, v8, v9, v10, v11, v12, (char)"ProcessTxDone");
        char v39 = 1;
      }
      if (!v40 && v41)
      {
        *(unsigned char *)(a1 + 48) &= 0x87u;
        if (ot::Mac::Frame::GetFramePending(v41))
        {
          uint64_t v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
          if (ot::Mac::Mac::IsCslEnabled(v13))
          {
            uint64_t v20 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
            ot::Mac::Mac::IsCslEnabled(v20);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: FramePending bit set in ACK, but suppressing as CSL is enabled %d", v21, v22, v23, v24, v25, v26, (char)"ProcessTxDone");
          }
          else
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: FramePending bit set in ACK", v14, v15, v16, v17, v18, v19, (char)"ProcessTxDone");
            char v39 = 1;
          }
        }
        else
        {
          unsigned int v27 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
          if (!ot::Mac::Mac::IsCslEnabled(v27)) {
            ot::DataPollSender::SendFastPolls((ot::DataPollSender *)a1, 0xAu);
          }
          ot::DataPollSender::ResetKeepAliveTimer((ot::DataPollSender *)a1);
        }
        isThreadAlwaysOnFeatureEnabled  = ot::DataPollSender::isThreadAlwaysOnFeatureEnabled((ot::DataPollSender *)a1);
        if (isThreadAlwaysOnFeatureEnabled)
        {
          int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)isThreadAlwaysOnFeatureEnabled);
          ot::Time::Time((ot::Time *)&v37, 0);
          if (ot::Time::operator==((_DWORD *)(a1 + 8), &v37)) {
            *(_DWORD *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = Now;
          }
          unsigned __int8 v29 = (ot::TimerMilli *)ot::Time::operator-(&Now, (_DWORD *)(a1 + 8));
          if ((*(_DWORD *)(a1 + 20) & 0x3FFFFFFu) > 0x1C2)
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: time since last successful TX: %u, switching to poll period from %d to %d", v30, v31, v32, v33, v34, v35, (char)"ProcessTxDone");
            unsigned __int8 v29 = (ot::TimerMilli *)ot::DataPollSender::SetExternalPollPeriod((ot::DataPollSender *)a1, 0x1C2u);
          }
          *(_DWORD *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = ot::TimerMilli::GetNow(v29);
        }
      }
      if (v39) {
        ot::DataPollSender::addB2BDataPollDelay((ot::DataPollSender *)a1, v6, v7, v8, v9, v10, v11, v12);
      }
    }
  }
}

BOOL ot::Neighbor::IsEnhancedKeepAliveSupported(ot::Neighbor *this)
{
  BOOL v2 = 0;
  if ((*((unsigned char *)this + 30) & 0xF) != 0) {
    return *((unsigned __int16 *)this + 18) >= 3u;
  }
  return v2;
}

{
  return ot::Neighbor::IsEnhancedKeepAliveSupported(this);
}

void ot::DataPollSender::SendFastPolls(ot::DataPollSender *this, unsigned __int8 a2)
{
  BOOL v4 = *((unsigned char *)this + 49) >> 4 == 0;
  BOOL v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (!ot::Mle::Mle::IsSleepyRouter(v2))
  {
    if ((*((_DWORD *)this + 5) >> 26) < 0x3Fu) {
      *((_DWORD *)this + 5)  = *((_DWORD *)this + 5) & 0x3FFFFFF | ((((*((_DWORD *)this + 5) >> 26) + 1) & 0x3F) << 26);
    }
    if (!a2) {
      a2  = 8;
    }
    if (a2 > 0xFu) {
      a2  = 15;
    }
    if (a2 > *((unsigned char *)this + 49) >> 4) {
      *((unsigned char *)this + 4ot::Mle::Tlv::SetType(this, 9) = *((unsigned char *)this + 49) & 0xF | (16 * (a2 & 0xF));
    }
    if ((*((unsigned char *)this + 48) & 1) != 0 && v4) {
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }
}

uint64_t ot::DataPollSender::ResetKeepAliveTimer(ot::DataPollSender *this)
{
  uint64_t result = ot::Timer::IsRunning((ot::DataPollSender *)((char *)this + 24));
  if (result)
  {
    int v2 = *((_DWORD *)this + 4);
    uint64_t result = ot::DataPollSender::GetDefaultPollPeriod(this);
    if (v2 == result)
    {
      *(_DWORD *)this  = ot::TimerMilli::GetNow((ot::TimerMilli *)result);
      return ot::TimerMilli::StartAt((ot::DataPollSender *)((char *)this + 24), *(_DWORD *)this, *((_DWORD *)this + 4));
    }
  }
  return result;
}

void ot::DataPollSender::RecalculatePollPeriod(ot::DataPollSender *this)
{
  if (*((unsigned char *)this + 48)) {
    ot::DataPollSender::ScheduleNextPoll(this, 1);
  }
}

void ot::DataPollSender::SetAttachMode(ot::DataPollSender *this, char a2)
{
  if (((*((unsigned char *)this + 48) & 2) != 0) != (a2 & 1))
  {
    *((unsigned char *)this + 4ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *((unsigned char *)this + 48) & 0xFD | (2 * (a2 & 1));
    if (*((unsigned char *)this + 48)) {
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }
}

BOOL ot::Mle::Mle::IsSleepyRouter(ot::Mle::Mle *this)
{
  return !ot::Mle::Mle::IsRxOnWhenIdle(this) && ot::Mle::Mle::IsFullThreadDevice(this);
}

{
  return ot::Mle::Mle::IsSleepyRouter(this);
}

void ot::DataPollSender::StopFastPolls(ot::DataPollSender *this)
{
  if (*((_DWORD *)this + 5) >> 26 && (*((_DWORD *)this + 5) >> 26) < 0x3Fu)
  {
    *((_DWORD *)this + 5)  = *((_DWORD *)this + 5) & 0x3FFFFFF | ((((*((_DWORD *)this + 5) >> 26) - 1) & 0x3F) << 26);
    if (!(*((_DWORD *)this + 5) >> 26))
    {
      *((unsigned char *)this + 49) &= 0xFu;
      ot::DataPollSender::ScheduleNextPoll(this, 1);
    }
  }
}

uint64_t ot::DataPollSender::CalculatePollPeriod(ot::DataPollSender *this)
{
  DefaultPollunsigned __int16 Period = ot::DataPollSender::GetDefaultPollPeriod(this);
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    DefaultPollunsigned __int16 Period = ot::Min<unsigned int>(DefaultPollPeriod, 0x64u);
  }
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
    DefaultPollunsigned __int16 Period = ot::Min<unsigned int>(DefaultPollPeriod, 0x3E8u);
    uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if (ot::Mac::Mac::GetCslPeriodMs(v7))
    {
      uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      CslPeriodMs  = ot::Mac::Mac::GetCslPeriodMs(v8);
      DefaultPollunsigned __int16 Period = ot::Min<unsigned int>(DefaultPollPeriod, CslPeriodMs);
    }
  }
  if (*((unsigned char *)this + 49) >> 4) {
    DefaultPollunsigned __int16 Period = ot::Min<unsigned int>(DefaultPollPeriod, 0x64u);
  }
  if ((*((_DWORD *)this + 5) & 0x3FFFFFF) != 0) {
    DefaultPollunsigned __int16 Period = ot::Min<unsigned int>(DefaultPollPeriod, *((_DWORD *)this + 5) & 0x3FFFFFF);
  }
  if (!DefaultPollPeriod) {
    DefaultPollunsigned __int16 Period = 10;
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: period: %d, mAttachMode:%d/ kAttachDataPollPeriod: %d, mRetxMode:%d/ kRetxPollPeriod: %d, mRemainingFastPolls:%d/ kFastPollPeriod: %d, mExternalPollPeriod: %d, kMinPollPeriod: %d", v1, v2, v3, v4, v5, v6, (char)"CalculatePollPeriod");
  return DefaultPollPeriod;
}

uint64_t ot::Mac::Mac::GetCslPeriodMs(ot::Mac::Mac *this)
{
  return 160 * *((unsigned __int16 *)this + 17) / 0x3E8;
}

{
  return ot::Mac::Mac::GetCslPeriodMs(this);
}

ot::Mac::Frame *ot::DataPollSender::PrepareDataRequest(ot::DataPollSender *this, ot::Mac::TxFrames *a2)
{
  uint64_t v18 = this;
  uint64_t v17 = a2;
  TxFrame  = 0;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v14);
  if (!ot::DataPollSender::GetPollDestinationAddress(this, (ot::Mac::Address *)v15))
  {
    TxFrame  = (ot::Mac::Frame *)ot::Mac::TxFrames::GetTxFrame(v17);
    if (ot::Mac::Address::IsExtended((ot::Mac::Address *)v15))
    {
      uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress  = (void *)ot::Mac::Mac::GetExtAddress(v2);
      ot::Mac::Address::SetExtended((uint64_t)v14, ExtAddress);
    }
    else
    {
      uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ShortAddress  = ot::Mac::Mac::GetShortAddress(v4);
      ot::Mac::Address::SetShort((uint64_t)v14, ShortAddress);
    }
    uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    v13[0]  = ot::Mac::Mac::GetPanId(v6);
    uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    v13[1]  = ot::Mac::Mac::GetPanId(v7);
    uint64_t v8 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::PrepareMacHeaders(v8, TxFrame, 3, (uint64_t)v14, v13, 5, 8, 0);
    ot::Mac::Frame::GetHeaderIe(TxFrame, 0x1Au);
    if (v9) {
      ot::Mac::TxFrames::SetMaxFrameRetries(v17, 0);
    }
    ot::Mac::Frame::SetCommandId(TxFrame, 4);
    IgnoreError();
    *((_DWORD *)this + 1)  = ot::TimerMilli::GetNow(v10);
  }
  return TxFrame;
}

ot::Mac::Addresses *ot::Mac::Addresses::Addresses(ot::Mac::Addresses *this)
{
  return this;
}

{
  ot::Mac::Address::Address(this);
  ot::Mac::Address::Address((ot::Mac::Addresses *)((char *)this + 10));
  return this;
}

uint64_t ot::Mac::TxFrames::SetMaxFrameRetries(ot::Mac::TxFrames *this, char a2)
{
  return ot::Mac::TxFrame::SetMaxFrameRetries(*(void *)this, a2);
}

{
  return ot::Mac::TxFrames::SetMaxFrameRetries(this, a2);
}

void ot::DataPollSender::SetB2BDataPollDelay(ot::DataPollSender *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: Set B2BDataPollDelay as %d, %d", a3, a4, a5, a6, a7, a8, (char)"SetB2BDataPollDelay");
}

void ot::DataPollSender::SetSessionPriority(ot::DataPollSender *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 13)  = a2;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DataPollSender", "%s: Set SetSessionPriority as %d, %d", a3, a4, a5, a6, a7, a8, (char)"SetSessionPriority");
}

BOOL ot::Mac::Frame::IsFramePending(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 16, 2048) != 0;
}

{
  return ot::Mac::Frame::IsFramePending(this);
}

BOOL ot::Mle::Mle::IsFullThreadDevice(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::Mle *)((char *)this + 240));
}

{
  return ot::Mle::Mle::IsFullThreadDevice(this);
}

BOOL ot::Mle::DeviceMode::IsFullThreadDevice(ot::Mle::DeviceMode *this)
{
  return (*(unsigned char *)this & 2) != 0;
}

{
  return ot::Mle::DeviceMode::IsFullThreadDevice(this);
}

uint64_t ot::TimerMilliIn<ot::DataPollSender,&ot::DataPollSender::HandlePollTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
  return ((uint64_t (*)(uint64_t))ot::DataPollSender::HandlePollTimer)(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::DataPollSender>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
}

uint64_t __cxx_global_var_init_6()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_6()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_data_poll_sender_cpp()
{
  return __cxx_global_var_init_1_6();
}

ot::Mac::LinkRaw *ot::Mac::LinkRaw::LinkRaw(ot::Mac::LinkRaw *this, ot::Instance *a2)
{
  *(unsigned char *)this  = 11;
  *((_WORD *)this + 1)  = -1;
  *((void *)this + 1)  = 0;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((void *)this + 3)  = 0;
  *((void *)this + ++*(_WORD *)(this + 4) = ot::Instance::Get<ot::Mac::SubMac>((uint64_t)a2);
  ot::Mac::LinkRaw::Init((uint64_t)this);
  return this;
}

{
  ot::Mac::LinkRaw::LinkRaw(this, a2);
  return this;
}

uint64_t ot::Mac::LinkRaw::Init(uint64_t this)
{
  *(void *)(this + 2++*(_WORD *)(this + 4) = 0;
  *(void *)(this + 16)  = 0;
  *(void *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(unsigned char *)this  = 11;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = -1;
  *(void *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  return this;
}

uint64_t ot::Mac::LinkRaw::SetReceiveDone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v13[4]  = 0;
  *(_DWORD *)uint64_t v13 = a2 != 0;
  uint64_t v8 = "true";
  if (!a2) {
    uint64_t v8 = "false";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkRaw", "Enabled(%s)", a3, a4, a5, a6, a7, a8, (char)v8);
  uint64_t v9 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  if (ot::ThreadNetif::IsUp(v9))
  {
    *(_DWORD *)&v13[1]  = 13;
  }
  else if ((v13[0] & 1) != 0 || !ot::Mac::SubMac::IsTransmittingOrScanning(*(ot::Mac::SubMac **)(a1 + 32)))
  {
    uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
    ot::Mac::Mac::SetEnabled(v10, (v13[0] ^ 1) & 1);
    *(void *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  }
  else
  {
    *(_DWORD *)&v13[1]  = 5;
  }
  return *(unsigned int *)&v13[1];
}

BOOL ot::Mac::SubMac::IsTransmittingOrScanning(ot::Mac::SubMac *this)
{
  BOOL v2 = 1;
  if (*((unsigned char *)this + 1) != 4) {
    return *((unsigned char *)this + 1) == 5;
  }
  return v2;
}

{
  return ot::Mac::SubMac::IsTransmittingOrScanning(this);
}

uint64_t ot::Mac::LinkRaw::SetPanId(ot::Mac::SubMac **this, __int16 a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this))
  {
    ot::Mac::SubMac::SetPanId(this[4], a2);
    *((_WORD *)this + 1)  = a2;
  }
  else
  {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::SetChannel(ot::Mac::LinkRaw *this, char a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled(this)) {
    *(unsigned char *)this  = a2;
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::SetExtAddress(ot::Mac::SubMac **this, const ot::Mac::ExtAddress *a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    ot::Mac::SubMac::SetExtAddress(this[4], a2);
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::SetShortAddress(ot::Mac::SubMac **this, __int16 a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    ot::Mac::SubMac::SetShortAddress(this[4], a2);
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mac::LinkRaw::Receive(ot::Mac::SubMac **this)
{
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    return ot::Mac::SubMac::Receive(this[4], *(unsigned char *)this);
  }
  else {
    return 13;
  }
}

void ot::Mac::LinkRaw::InvokeReceiveDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  if (a2) {
    __int16 v11 = *(_WORD *)(a2 + 8);
  }
  else {
    LOBYTE(v11)  = 0;
  }
  ot::ErrorToString(a3);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkRaw", "ReceiveDone(%d bytes), error:%s", v3, v4, v5, v6, v7, v8, v11);
  if (*((void *)a1 + 1))
  {
    if (!a3)
    {
      uint64_t v10 = (void (*)(void *, uint64_t, void))*((void *)a1 + 1);
      Instance  = ot::InstanceLocator::GetInstance(a1);
      v10(Instance, a2, 0);
    }
  }
}

uint64_t ot::Mac::LinkRaw::Transmit(uint64_t a1, uint64_t a2)
{
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)a1))
  {
    unsigned int v4 = ot::Mac::SubMac::Send(*(ot::Mac::SubMac **)(a1 + 32));
    if (!v4) {
      *(void *)(a1 + 16)  = a2;
    }
  }
  else
  {
    return 13;
  }
  return v4;
}

void ot::Mac::LinkRaw::InvokeTransmitDone(ot::InstanceLocator *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __int16 v12 = *(_WORD *)(a2 + 8);
  ot::ErrorToString(a4);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkRaw", "LinkRaw::TransmitDone(%d bytes), error:%s", v4, v5, v6, v7, v8, v9, v12);
  if (*((void *)a1 + 2))
  {
    __int16 v11 = (void (*)(void *, uint64_t, uint64_t, void))*((void *)a1 + 2);
    Instance  = ot::InstanceLocator::GetInstance(a1);
    v11(Instance, a2, a3, a4);
    *((void *)a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  }
}

uint64_t ot::Mac::LinkRaw::EnergyScan(uint64_t a1, unsigned __int8 a2, unsigned __int16 a3, uint64_t a4)
{
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)a1))
  {
    unsigned int v6 = ot::Mac::SubMac::EnergyScan(*(ot::Mac::SubMac **)(a1 + 32), a2, a3);
    if (!v6) {
      *(void *)(a1 + 2++*(_WORD *)(this + 4) = a4;
    }
  }
  else
  {
    return 13;
  }
  return v6;
}

uint64_t ot::Mac::LinkRaw::InvokeEnergyScanDone(ot::Mac::LinkRaw *this, char a2)
{
  uint64_t result = ot::Mac::LinkRaw::IsEnabled(this);
  if (result)
  {
    if (*((void *)this + 3))
    {
      uint64_t v4 = (uint64_t (*)(void *, void))*((void *)this + 3);
      Instance  = ot::InstanceLocator::GetInstance(this);
      uint64_t result = v4(Instance, a2);
      *((void *)this + 3)  = 0;
    }
  }
  return result;
}

uint64_t ot::Mac::LinkRaw::SetMacKey(ot::Mac::SubMac **this, unsigned __int8 a2, unsigned __int8 a3, __n128 *a4, __n128 *a5, __n128 *a6)
{
  unsigned int v8 = 0;
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v16);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v15);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v14);
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this))
  {
    ot::Mac::KeyMaterial::SetFrom(&v16, a4);
    ot::Mac::KeyMaterial::SetFrom(&v15, a5);
    ot::Mac::KeyMaterial::SetFrom(&v14, a6);
    ot::Mac::SubMac::SetMacKey(this[4], a2, a3, (const ot::Mac::KeyMaterial *)&v16, (const ot::Mac::KeyMaterial *)&v15, (const ot::Mac::KeyMaterial *)&v14);
  }
  else
  {
    return 13;
  }
  return v8;
}

ot::Mac::KeyMaterial *ot::Mac::KeyMaterial::KeyMaterial(ot::Mac::KeyMaterial *this)
{
  return this;
}

{
  void *v1;

  ot::Mac::KeyMaterial::GetKey(this);
  ot::Clearable<ot::Mac::Key>::Clear(v1);
  return this;
}

uint64_t ot::Mac::LinkRaw::SetMacFrameCounter(ot::Mac::SubMac **this, unsigned int a2, char a3)
{
  char v6 = a3 & 1;
  unsigned int v5 = 0;
  if (ot::Mac::LinkRaw::IsEnabled((ot::Mac::LinkRaw *)this)) {
    ot::Mac::SubMac::SetFrameCounter(this[4], a2, v6 & 1);
  }
  else {
    return 13;
  }
  return v5;
}

void ot::Mac::LinkRaw::RecordFrameTransmitStatus(uint64_t a1, ot::Mac::TxFrame *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    char v10 = ot::ErrorToString(a4);
    ot::Mac::TxFrame::GetMaxFrameRetries(a2);
    ot::Mac::Frame::ToInfoString(a2, (ot::StringWriter *)v12);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"LinkRaw", "Frame tx failed, error:%s, retries:%d/%d, %s", v4, v5, v6, v7, v8, v9, v10);
  }
}

uint64_t ot::Mac::TxFrame::GetMaxFrameRetries(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 41);
}

{
  return ot::Mac::TxFrame::GetMaxFrameRetries(this);
}

void *ot::Clearable<ot::Mac::Key>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1]  = 0;
  return result;
}

{
  return ot::Clearable<ot::Mac::Key>::Clear(result);
}

void ot::Mac::Mac::RequestWakeupFrameTransmission(ot::Mac::Mac *this)
{
  if (ot::Mac::Mac::IsEnabled(this)) {
    ot::Mac::Mac::StartOperation((uint64_t)this, 9);
  }
}

void ot::Mac::Mac::PerformNextOperation(ot::Mac::Mac *this)
{
  if (!*((unsigned char *)this + 1))
  {
    if (ot::Mac::Mac::IsEnabled(this))
    {
      if (ot::Mac::Mac::IsPending((uint64_t)this, 6))
      {
        *((unsigned char *)this + 1)  = 6;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 9))
      {
        *((unsigned char *)this + 1)  = 9;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 8))
      {
        *((unsigned char *)this + 1)  = 8;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 1))
      {
        *((unsigned char *)this + 1)  = 1;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 2))
      {
        *((unsigned char *)this + 1)  = 2;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 3))
      {
        *((unsigned char *)this + 1)  = 3;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 7))
      {
        *((unsigned char *)this + 1)  = 7;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 5) {
             && (!ot::Mac::Mac::IsPending((uint64_t)this, 4) || (*(unsigned char *)this & 2) != 0))
      }
      {
        *((unsigned char *)this + 1)  = 5;
      }
      else if (ot::Mac::Mac::IsPending((uint64_t)this, 4))
      {
        *((unsigned char *)this + 1)  = 4;
        if (ot::Mac::Mac::IsPending((uint64_t)this, 5)) {
          *(unsigned char *)this  = *(unsigned char *)this & 0xFD | 2;
        }
      }
      if (*((unsigned char *)this + 1))
      {
        ot::Mac::Mac::ClearPending((uint64_t)this, *((unsigned char *)this + 1));
        char v1 = ot::Mac::Mac::OperationToString(*((unsigned char *)this + 1));
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Starting operation \"%s\" pendOp:0x%x", v2, v3, v4, v5, v6, v7, v1);
        ot::TimerMilli::Stop((ot::Mac::Mac *)((char *)this + 304));
      }
      if (*((unsigned char *)this + 1))
      {
        uint64_t v9 = *((unsigned __int8 *)this + 1);
        char v8 = 1;
      }
      else
      {
        uint64_t v9 = *((unsigned __int8 *)this + 1);
        char v8 = 0;
      }
      if ((v8 & 1) == 0)
      {
        switch(v9)
        {
          case 0:
            ot::Mac::Mac::UpdateIdleMode(this);
            break;
          case 1:
            ot::Mac::Mac::PerformActiveScan(this);
            break;
          case 2:
            ot::Mac::Mac::PerformEnergyScan(this);
            break;
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            ot::Mac::Mac::BeginTransmit(this);
            break;
          case 6:
            ot::Mac::Links::Receive((ot::Mac::Mac *)((char *)this + 56), *((unsigned char *)this + 11));
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mac::kLogModuleName, "DataPollTimeout:%d Timer start", v10, v11, v12, v13, v14, v15, ot::Mac::kDataPollTimeoutCoex);
            ot::TimerMilli::Start((ot::Mac::Mac *)((char *)this + 304), ot::Mac::kDataPollTimeoutCoex);
            break;
          default:
            JUMPOUT(0);
        }
      }
    }
    else
    {
      *((_WORD *)this + 1)  = 0;
      ot::TimerMilli::Stop((ot::Mac::Mac *)((char *)this + 304));
    }
  }
}

void ot::Mac::Mac::HandleTimer(ot::Mac::Mac *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v18 = *((unsigned __int8 *)this + 1);
  if (*((unsigned char *)this + 1))
  {
    if (v18 == 1)
    {
      ot::Mac::Mac::PerformActiveScan(this);
    }
    else
    {
      if (v18 != 6) {
        __assert_rtn("HandleTimer", "mac.cpp", 2046, "false");
      }
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Data poll timeout", a3, a4, a5, a6, a7, a8, v16);
      ot::Mac::Mac::FinishOperation(this);
      char v8 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
      ot::DataPollSender::HandlePollTimeout(v8, v9, v10, v11, v12, v13, v14, v15);
      ot::Mac::Mac::PerformNextOperation(this);
    }
  }
  else if (ot::Mac::Mac::IsPending((uint64_t)this, 8))
  {
    ot::Mac::Mac::PerformNextOperation(this);
  }
}

__n128 *ot::Mac::Mac::Mac(__n128 *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  this->n128_u8[0] &= ~1u;
  this->n128_u8[0] &= ~2u;
  this->n128_u8[0] &= ~4u;
  this->n128_u8[0] &= ~8u;
  this->n128_u8[0] &= ~0x10u;
  this->n128_u8[0] &= ~0x20u;
  this->n128_u8[1]  = 0;
  this->n128_u16[1]  = 0;
  Uint8  = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint8(v2);
  this->n128_u8[4]  = Uint8;
  this->n128_u8[5]  = ot::Random::NonCrypto::GetUint8(Uint8);
  this->n128_u8[6]  = 0;
  this->n128_u16[4]  = -1;
  this->n128_u8[10]  = 11;
  this->n128_u8[11]  = 11;
  uint64_t v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
  int SupportedChannelMask = ot::Radio::GetSupportedChannelMask(v4);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)((char *)&this->n128_f64[1] + 4), SupportedChannelMask);
  this[1].n128_u8[0]  = 11;
  this[1].n128_u16[1]  = 0;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&this[1].n128_u8[4]);
  this[1].n128_u8[8]  = 15;
  this[1].n128_u8[9]  = 0;
  this[1].n128_u8[10]  = 1;
  ot::Time::Time((ot::Time *)((char *)&this[1].n128_f64[1] + 4), -1);
  this[2].n128_u8[0]  = 0;
  this[2].n128_u16[1]  = 0;
  this[2].n128_u8[4]  = 11;
  this[2].n128_u64[1]  = 0;
  this[3].n128_u64[0]  = 0;
  ot::Mac::Links::Links((ot::Mac::Links *)&this[3].n128_i8[8], a2);
  ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::TaskletIn((__n128 *)this[18].n128_u64, (uint64_t)a2);
  ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::TimerMilliIn((ot::TimerMilli *)&this[19], a2);
  this[32].n128_u32[0]  = 0;
  this[32].n128_u16[3]  = 0;
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::CountHistogram(&this[45].n128_u8[4]);
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::CountHistogram((char *)&this[51].n128_f64[1] + 4);
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::CountHistogram(&this[58].n128_u8[4]);
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram(&this[74].n128_u8[4]);
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram((char *)&this[77].n128_f64[1] + 4);
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram(&this[81].n128_u8[4]);
  ot::Mac::Filter::Filter((ot::Mac::Filter *)((char *)&this[84].n128_f64[1] + 4));
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&this[105]);
  v20[7]  = 21;
  v20[6]  = -95;
  unsigned char v20[5] = 87;
  v20[4]  = -19;
  v20[3]  = 94;
  _OWORD v20[2] = -18;
  v20[1]  = -1;
  v20[0]  = -64;
  ot::Mac::ExtAddress::SetGroup(v20, 0);
  ot::Mac::ExtAddress::SetLocal(v20, 1);
  ot::Clearable<ot::SuccessRateTracker>::Clear(&this[32].n128_u16[2]);
  ot::Mac::Mac::ResetCounters((ot::Mac::Mac *)this);
  ot::Mac::Mac::SetEnabled((ot::Mac::Mac *)this, 1);
  uint64_t v6 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>((ot::InstanceLocator *)this);
  ot::KeyManager::UpdateKeyMaterial(v6);
  ot::Mac::Mac::SetPanId((ot::Mac::Mac *)this, this->n128_i16[4]);
  ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)v20, (ot::StringWriter *)v19);
  char v7 = ot::String<(unsigned short)17>::AsCString((uint64_t)v19);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Random Generated RadioExtAddress: %s", v8, v9, v10, v11, v12, v13, v7);
  ot::Mac::Mac::SetExtAddress((ot::Mac::Mac *)this, (const ot::Mac::ExtAddress *)v20);
  ShortAddress  = ot::Mac::Mac::GetShortAddress((ot::Mac::Mac *)this);
  ot::Mac::Mac::SetShortAddress((ot::Mac::Mac *)this, ShortAddress);
  uint64_t v15 = (__n128 *)ot::AsCoreType<otMacKey>((uint64_t)&ot::Mac::Mac::Mac(ot::Instance &)::sMode2Key);
  ot::Mac::KeyMaterial::SetFrom(this + 105, v15);
  return this;
}

{
  ot::Mac::Mac::Mac(this, a2);
  return this;
}

uint64_t ot::Radio::GetSupportedChannelMask(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetSupportedChannelMask((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::GetSupportedChannelMask(this);
}

ot::Mac::ChannelMask *ot::Mac::ChannelMask::ChannelMask(ot::Mac::ChannelMask *this)
{
  return this;
}

void *ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::HandleTasklet);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::HandleTimer);
  return a1;
}

void *ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::CountHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear(a1);
  return a1;
}

void *ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::CountHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear(a1);
  return a1;
}

void *ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::CountHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear(a1);
  return a1;
}

unsigned char *ot::Mac::ExtAddress::SetGroup(unsigned char *this, char a2)
{
  if (a2) {
    *this |= 1u;
  }
  else {
    *this &= ~1u;
  }
  return this;
}

{
  return ot::Mac::ExtAddress::SetGroup(this, a2);
}

unsigned char *ot::Mac::ExtAddress::SetLocal(unsigned char *this, char a2)
{
  if (a2) {
    *this |= 2u;
  }
  else {
    *this &= ~2u;
  }
  return this;
}

{
  return ot::Mac::ExtAddress::SetLocal(this, a2);
}

_WORD *ot::Clearable<ot::SuccessRateTracker>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::SuccessRateTracker>::Clear(result);
}

void ot::Mac::Mac::SetEnabled(ot::Mac::Mac *this, char a2)
{
  *(unsigned char *)this  = *(unsigned char *)this & 0xFE | a2 & 1;
  if (a2) {
    ot::Mac::Links::Enable((ot::Mac::Mac *)((char *)this + 56));
  }
  else {
    ot::Mac::Links::Disable((ot::Mac::Mac *)((char *)this + 56));
  }
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::KeyManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
}

void ot::Mac::Mac::SetPanId(ot::Mac::Mac *this, __int16 a2)
{
  uint64_t v5 = this;
  __int16 v4 = a2;
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  if (!ot::Notifier::Update<unsigned short>(v2, (_WORD *)this + 4, &v4, 0x8000)) {
    ot::Mac::Links::SetPanId((ot::Mac::Mac *)((char *)this + 56), *((_WORD *)this + 4));
  }
}

void ot::Mac::Mac::SetShortAddress(ot::Mac::Mac *this, __int16 a2)
{
}

{
  ot::Mac::Mac::SetShortAddress(this, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMacKey>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

void ot::Mac::Links::Enable(ot::Mac::Links *this)
{
}

{
  ot::Mac::Links::Enable(this);
}

void ot::Mac::Links::Disable(ot::Mac::Links *this)
{
}

{
  ot::Mac::Links::Disable(this);
}

void ot::Mac::Mac::RegenerateExtAddr(ot::Mac::Mac *this)
{
  ot::Mac::ExtAddress::GenerateRandom((ot::Mac::ExtAddress *)v10);
  ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)v10, (ot::StringWriter *)v9);
  char v1 = ot::String<(unsigned short)17>::AsCString((uint64_t)v9);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Random Regenerated RadioExtAddress: %s", v2, v3, v4, v5, v6, v7, v1);
  ot::Mac::Mac::SetExtAddress(this, (const ot::Mac::ExtAddress *)v10);
}

uint64_t ot::Mac::Mac::ActiveScan(ot::Mac::Mac *a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = 0;
  if (ot::Mac::Mac::IsEnabled(a1))
  {
    if (ot::Mac::Mac::IsActiveScanInProgress(a1) || ot::Mac::Mac::IsEnergyScanInProgress(a1))
    {
      return 5;
    }
    else
    {
      *((void *)a1 + 5)  = a4;
      *((void *)a1 + 6)  = a5;
      if (!a3) {
        a3  = 300;
      }
      ot::Mac::Mac::Scan((uint64_t)a1, 1, a2, a3);
    }
  }
  else
  {
    return 13;
  }
  return v7;
}

void ot::Mac::Mac::Scan(uint64_t a1, char a2, unsigned int a3, __int16 a4)
{
  Masunsigned int k = a3;
  *(_WORD *)(a1 + 1ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a4;
  *(unsigned char *)(a1 + 16)  = -1;
  if (!a3)
  {
    int SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask((ot::Mac::Mac *)a1);
    Masunsigned int k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
  }
  ot::Mac::ChannelMask::SetMask((_DWORD *)(a1 + 20), Mask);
  ot::Mac::ChannelMask::Intersect((_DWORD *)(a1 + 20), (const ot::Mac::ChannelMask *)(a1 + 12));
  ot::Mac::Mac::StartOperation(a1, a2);
}

uint64_t ot::Mac::Mac::EnergyScan(ot::Mac::Mac *a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = 0;
  if (ot::Mac::Mac::IsEnabled(a1))
  {
    if (ot::Mac::Mac::IsActiveScanInProgress(a1) || ot::Mac::Mac::IsEnergyScanInProgress(a1))
    {
      return 5;
    }
    else
    {
      *((void *)a1 + 5)  = a4;
      *((void *)a1 + 6)  = a5;
      ot::Mac::Mac::Scan((uint64_t)a1, 2, a2, a3);
    }
  }
  else
  {
    return 13;
  }
  return v7;
}

_DWORD *ot::Mac::ChannelMask::SetMask(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

{
  return ot::Mac::ChannelMask::SetMask(this, a2);
}

_DWORD *ot::Mac::ChannelMask::Intersect(_DWORD *this, const ot::Mac::ChannelMask *a2)
{
  *this &= *(_DWORD *)a2;
  return this;
}

{
  return ot::Mac::ChannelMask::Intersect(this, a2);
}

void ot::Mac::Mac::StartOperation(uint64_t a1, char a2)
{
  if (a2)
  {
    ot::Mac::Mac::SetPending(a1, a2);
    char v2 = ot::Mac::Mac::OperationToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Requesting operation \"%s\" pendOp:0x%x", v3, v4, v5, v6, v7, v8, v2);
  }
  if (!*(unsigned char *)(a1 + 1)) {
    ot::Tasklet::Post((ot::Tasklet *)(a1 + 288));
  }
}

uint64_t ot::Mac::Mac::IsInTransmitState(ot::Mac::Mac *this)
{
  char v3 = 0;
  unsigned int v2 = *((unsigned __int8 *)this + 1);
  if (v2 <= 2) {
    goto LABEL_6;
  }
  if (v2 - 3 <= 2)
  {
LABEL_5:
    char v3 = 1;
    return v3 & 1;
  }
  if (v2 == 6)
  {
LABEL_6:
    char v3 = 0;
    return v3 & 1;
  }
  if (v2 - 7 <= 2) {
    goto LABEL_5;
  }
  return v3 & 1;
}

uint64_t ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::Mac *a1, ot::Mac::Frame *a2, char *a3)
{
  uint64_t v30 = a1;
  unsigned __int8 v29 = a2;
  int v28 = a3;
  SrcAddr  = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v26);
  uint64_t v25 = 0;
  Payload  = 0;
  Payloadunsigned __int16 Length = 0;
  memset(v28, 0, 0x3CuLL);
  if (v29)
  {
    if (ot::Mac::Frame::GetType(v29))
    {
      return 6;
    }
    else
    {
      SrcAddr  = ot::Mac::Frame::GetSrcAddr(v29, (ot::Mac::Address *)v26);
      if (!SrcAddr)
      {
        if (ot::Mac::Address::IsExtended((ot::Mac::Address *)v26))
        {
          ot::Mac::Address::GetExtended((ot::Mac::Address *)v26);
          *(void *)int v28 = *v3;
          if (ot::Mac::Frame::GetSrcPanId(v29, (unsigned __int16 *)v28 + 25))
          {
            ot::Mac::Frame::GetDstPanId(v29, (unsigned __int16 *)v28 + 25);
            IgnoreError();
          }
          char Channel = ot::Mac::Frame::GetChannel(v29);
          v28[54]  = Channel;
          Rssunsigned __int8 i = ot::Mac::RxFrame::GetRssi(v29);
          v28[55]  = Rssi;
          Lqunsigned __int8 i = ot::Mac::RxFrame::GetLqi(v29);
          v28[56]  = Lqi;
          Payloadunsigned __int16 Length = ot::Mac::Frame::GetPayloadLength(v29);
          Payload  = (ot::Mac::Beacon *)ot::Mac::Frame::GetPayload(v29);
          uint64_t v25 = (ot::Mac::BeaconPayload *)ot::Mac::Beacon::GetPayload(Payload);
          if (PayloadLength >= 0x1EuLL && ot::Mac::Beacon::IsValid(Payload) && ot::Mac::BeaconPayload::IsValid(v25))
          {
            ProtocolVersiounsigned __int8 n = ot::Mac::BeaconPayload::GetProtocolVersion(v25);
            v28[57]  = v28[57] & 0xF0 | ProtocolVersion & 0xF;
            IsJoiningPermitted  = ot::Mac::BeaconPayload::IsJoiningPermitted(v25);
            v28[57]  = v28[57] & 0xBF | (IsJoiningPermitted << 6);
            IsNative  = ot::Mac::BeaconPayload::IsNative(v25);
            v28[57]  = v28[57] & 0xEF | (16 * IsNative);
            uint64_t v20 = (ot::MeshCoP::NetworkName *)ot::AsCoreType<otNetworkName>((uint64_t)(v28 + 8));
            v22[0]  = ot::Mac::BeaconPayload::GetNetworkName(v25);
            v22[1]  = v16;
            ot::MeshCoP::NetworkName::Set(v20, (const ot::MeshCoP::NameData *)v22);
            IgnoreError();
            if ((ot::IsValidUtf8String((ot *)(v28 + 8), v17) & 1) == 0) {
              return 6;
            }
            Extendedunsigned __int16 PanId = (void *)ot::Mac::BeaconPayload::GetExtendedPanId(v25);
            *(void *)(v28 + 25)  = *ExtendedPanId;
          }
          ot::Mac::Mac::LogBeacon(a1, "Received", v7, v8, v9, v10, v11, v12);
          return SrcAddr;
        }
        return 6;
      }
    }
  }
  else
  {
    return 7;
  }
  return SrcAddr;
}

uint64_t ot::Mac::Frame::GetType(ot::Mac::Frame *this)
{
  return *(unsigned char *)ot::Mac::Frame::GetPsdu(this) & 7;
}

{
  return ot::Mac::Frame::GetType(this);
}

uint64_t ot::Mac::Frame::GetChannel(ot::Mac::Frame *this)
{
  return *((unsigned __int8 *)this + 10);
}

{
  return ot::Mac::Frame::GetChannel(this);
}

uint64_t ot::Mac::RxFrame::GetLqi(ot::Mac::RxFrame *this)
{
  return *((unsigned __int8 *)this + 30);
}

{
  return ot::Mac::RxFrame::GetLqi(this);
}

uint64_t ot::Mac::Beacon::GetPayload(ot::Mac::Beacon *this)
{
  return (uint64_t)this + 4;
}

{
  return (uint64_t)this + 4;
}

{
  return ot::Mac::Beacon::GetPayload(this);
}

{
  return ot::Mac::Beacon::GetPayload(this);
}

BOOL ot::Mac::Beacon::IsValid(ot::Mac::Beacon *this)
{
  int v3 = *(unsigned __int16 *)this;
  BOOL v4 = 0;
  if (v3 == (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(4095))
  {
    BOOL v4 = 0;
    if (!*((unsigned char *)this + 2)) {
      return *((unsigned char *)this + 3) == 0;
    }
  }
  return v4;
}

{
  return ot::Mac::Beacon::IsValid(this);
}

BOOL ot::Mac::BeaconPayload::IsValid(ot::Mac::BeaconPayload *this)
{
  return *(unsigned char *)this == 3;
}

{
  return ot::Mac::BeaconPayload::IsValid(this);
}

uint64_t ot::Mac::BeaconPayload::GetProtocolVersion(ot::Mac::BeaconPayload *this)
{
  return (int)*((unsigned __int8 *)this + 1) >> 4;
}

{
  return ot::Mac::BeaconPayload::GetProtocolVersion(this);
}

BOOL ot::Mac::BeaconPayload::IsJoiningPermitted(ot::Mac::BeaconPayload *this)
{
  return (*((unsigned char *)this + 1) & 1) != 0;
}

{
  return ot::Mac::BeaconPayload::IsJoiningPermitted(this);
}

BOOL ot::Mac::BeaconPayload::IsNative(ot::Mac::BeaconPayload *this)
{
  return (*((unsigned char *)this + 1) & 8) != 0;
}

{
  return ot::Mac::BeaconPayload::IsNative(this);
}

uint64_t ot::Mac::BeaconPayload::GetNetworkName(ot::Mac::BeaconPayload *this)
{
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)&v2, (const char *)this + 2, 16);
  return v2;
}

{
  return ot::Mac::BeaconPayload::GetNetworkName(this);
}

uint64_t ot::Mac::BeaconPayload::GetExtendedPanId(ot::Mac::BeaconPayload *this)
{
  return (uint64_t)this + 18;
}

{
  return ot::Mac::BeaconPayload::GetExtendedPanId(this);
}

void ot::Mac::Mac::LogBeacon(ot::Mac::Mac *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ot::Mac::Mac::UpdateScanChannel(ot::Mac::Mac *this)
{
  if (ot::Mac::Mac::IsEnabled(this)) {
    return ot::Mac::ChannelMask::GetNextChannel((ot::Mac::Mac *)((char *)this + 20), (unsigned __int8 *)this + 16);
  }
  else {
    return 11;
  }
}

uint64_t ot::Mac::Mac::PerformActiveScan(ot::Mac::Mac *this)
{
  if (!ot::Mac::Mac::UpdateScanChannel(this)) {
    return ot::Mac::Mac::BeginTransmit(this);
  }
  ot::Mac::Links::SetPanId((ot::Mac::Mac *)((char *)this + 56), *((_WORD *)this + 4));
  ot::Mac::Mac::FinishOperation(this);
  ot::Mac::Mac::ReportActiveScanResult((uint64_t)this, 0);
  return ot::Mac::Mac::PerformNextOperation(this);
}

uint64_t ot::Mac::Mac::BeginTransmit(ot::Mac::Mac *this)
{
  __int16 v47 = this;
  BroadcastTxFrame  = 0;
  TxFrames  = (ot::Mac::TxFrame **)ot::Mac::Links::GetTxFrames((ot::Mac::Mac *)((char *)this + 56));
  ot::Mac::Address::Address((ot::Mac::Address *)v44);
  ot::Mac::Address::Address((ot::Mac::Address *)v43);
  uint64_t v42 = 0;
  int v41 = 0;
  v40[11]  = 0;
  v40[10]  = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v40);
  ot::Mac::TxFrames::Clear((ot::Mac::TxFrames *)TxFrames);
  uint64_t result = ot::Mac::Mac::IsEnabled(this);
  if (result)
  {
    unsigned int v2 = *((unsigned __int8 *)this + 1);
    BOOL v3 = v2 > 1;
    uint64_t v4 = v2 - 1;
    if (v3)
    {
      uint64_t v6 = v4;
      char v5 = 1;
    }
    else
    {
      uint64_t v6 = v4;
      char v5 = 0;
    }
    if (v5) {
LABEL_44:
    }
      __assert_rtn("BeginTransmit", "mac.cpp", 1364, "false");
    switch(v6)
    {
      case 0:
        ot::Mac::Links::SetPanId((ot::Mac::Mac *)((char *)this + 56), 0xFFFF);
        uint64_t result = (uint64_t)ot::Mac::Mac::PrepareBeaconRequest(this);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        ot::Mac::TxFrame::SetChannel(BroadcastTxFrame, *((unsigned char *)this + 16));
        ot::Mac::Frame::SetSequence(BroadcastTxFrame, 0);
        ot::Mac::TxFrame::SetMaxCsmaBackoffs((uint64_t)BroadcastTxFrame, 4);
        ot::Mac::TxFrame::SetMaxFrameRetries((uint64_t)BroadcastTxFrame, *((unsigned char *)this + 24));
        break;
      case 1:
      case 5:
        goto LABEL_44;
      case 2:
        uint64_t result = (uint64_t)ot::Mac::Mac::PrepareBeacon(this);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        ot::Mac::TxFrame::SetChannel(BroadcastTxFrame, *((unsigned char *)this + 11));
        uint64_t v7 = BroadcastTxFrame;
        char v8 = *((unsigned char *)this + 4);
        *((unsigned char *)this + ++*(_WORD *)(this + 4) = v8 + 1;
        ot::Mac::Frame::SetSequence(v7, v8);
        ot::Mac::TxFrame::SetMaxCsmaBackoffs((uint64_t)BroadcastTxFrame, 4);
        ot::Mac::TxFrame::SetMaxFrameRetries((uint64_t)BroadcastTxFrame, *((unsigned char *)this + 24));
        break;
      case 3:
        ot::Mac::TxFrames::SetChannel(TxFrames, *((unsigned char *)this + 11));
        if (enablebackoff) {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 4);
        }
        else {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 0);
        }
        ot::Mac::TxFrames::SetMaxFrameRetries((ot::Mac::TxFrames *)TxFrames, *((unsigned char *)this + 24));
        uint64_t v12 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        uint64_t result = (uint64_t)ot::MeshForwarder::HandleFrameRequest(v12, (ot::Mac::TxFrames *)TxFrames);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        uint64_t v13 = BroadcastTxFrame;
        char v14 = *((unsigned char *)this + 5);
        *((unsigned char *)this + 5)  = v14 + 1;
        ot::Mac::Frame::SetSequence(v13, v14);
        ot::Mac::Frame::GetDstAddr(BroadcastTxFrame, (ot::Mac::Address *)v44);
        IgnoreError();
        ot::Mac::Frame::GetSrcAddr(BroadcastTxFrame, (ot::Mac::Address *)v43);
        IgnoreError();
        uint64_t v15 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        ot::ChildTable::FindChild(v15, (ot::Mac::Address *)v44, 0);
        uint64_t v42 = v16;
        if (v16)
        {
          Deviceunsigned int Mode = ot::Neighbor::GetDeviceMode(v42);
          IsMinimalEndDevice  = 1;
          if (ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&DeviceMode))
          {
            char v38 = ot::Neighbor::GetDeviceMode(v42);
            IsMinimalEndDevice  = ot::Mle::DeviceMode::IsMinimalEndDevice((ot::Mle::DeviceMode *)&v38);
          }
          if (IsMinimalEndDevice)
          {
            uint64_t v17 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
            SendMessage  = (ot::Message *)ot::MeshForwarder::GetSendMessage(v17);
            if (SendMessage)
            {
              if (ot::Message::GetSubType(SendMessage) != 13)
              {
                ot::Mac::Address::ToString((ot::Mac::Address *)v43, (ot::StringWriter *)v49);
                char v32 = ot::String<(unsigned short)17>::AsCString((uint64_t)v49);
                ot::Mac::Address::ToString((ot::Mac::Address *)v44, (ot::StringWriter *)v48);
                ot::String<(unsigned short)17>::AsCString((uint64_t)v48);
                char v36 = ot::Neighbor::GetDeviceMode(v42);
                ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v36);
                char v35 = ot::Neighbor::GetDeviceMode(v42);
                ot::Mle::DeviceMode::IsMinimalEndDevice((ot::Mle::DeviceMode *)&v35);
                ot::Neighbor::GetVersion(v42);
                unsigned __int8 State = ot::Neighbor::GetState(v42);
                ot::Neighbor::StateToString(State);
                ot::Message::GetSubType(SendMessage);
                ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mac::kLogModuleName, "Tx frame to SED as direct transmission src:%s dst:%s isRxOnWhenIdle:%d isMinimalEndDevice:%d child_ver:%d child_state:%s msgType:%d", v19, v20, v21, v22, v23, v24, v32);
              }
            }
          }
        }
        break;
      case 4:
        ot::Mac::TxFrames::SetChannel(TxFrames, *((unsigned char *)this + 11));
        if (enablebackoff) {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 4);
        }
        else {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 0);
        }
        ot::Mac::TxFrames::SetMaxFrameRetries((ot::Mac::TxFrames *)TxFrames, *((unsigned char *)this + 24));
        uint64_t v9 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
        uint64_t result = (uint64_t)ot::DataPollSender::PrepareDataRequest(v9, (ot::Mac::TxFrames *)TxFrames);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        uint64_t v10 = BroadcastTxFrame;
        char v11 = *((unsigned char *)this + 5);
        *((unsigned char *)this + 5)  = v11 + 1;
        ot::Mac::Frame::SetSequence(v10, v11);
        break;
      case 6:
        ot::Mac::TxFrames::SetChannel(TxFrames, *((unsigned char *)this + 11));
        if (enablebackoff) {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 4);
        }
        else {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 0);
        }
        ot::Mac::TxFrames::SetMaxFrameRetries((ot::Mac::TxFrames *)TxFrames, *((unsigned char *)this + 25));
        uint64_t v25 = (ot::DataPollHandler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>(this);
        uint64_t result = (uint64_t)ot::DataPollHandler::HandleFrameRequest(v25, (ot::Mac::TxFrames *)TxFrames);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        if ((ot::Mac::TxFrame::IsARetransmission(BroadcastTxFrame) & 1) == 0)
        {
          uint64_t v26 = BroadcastTxFrame;
          char v27 = *((unsigned char *)this + 5);
          *((unsigned char *)this + 5)  = v27 + 1;
          ot::Mac::Frame::SetSequence(v26, v27);
        }
        break;
      case 7:
        ot::Mac::TxFrames::SetChannel(TxFrames, *((unsigned char *)this + 11));
        if (enablebackoff) {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 2);
        }
        else {
          ot::Mac::TxFrames::SetMaxCsmaBackoffs((ot::Mac::TxFrames *)TxFrames, 0);
        }
        ot::Mac::TxFrames::SetMaxFrameRetries((ot::Mac::TxFrames *)TxFrames, 0);
        int v28 = (const ot::Child **)ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(this);
        uint64_t result = (uint64_t)ot::CslTxScheduler::HandleFrameRequest(v28, (ot::Mac::TxFrames *)TxFrames);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        if ((ot::Mac::TxFrame::IsARetransmission(BroadcastTxFrame) & 1) == 0)
        {
          unsigned __int8 v29 = BroadcastTxFrame;
          char v30 = *((unsigned char *)this + 5);
          *((unsigned char *)this + 5)  = v30 + 1;
          ot::Mac::Frame::SetSequence(v29, v30);
        }
        break;
      case 8:
        uint64_t v31 = (ot::WakeupTxScheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::WakeupTxScheduler>(this);
        uint64_t result = (uint64_t)ot::WakeupTxScheduler::PrepareWakeupFrame(v31, (ot::Mac::TxFrames *)TxFrames);
        BroadcastTxFrame  = (ot::Mac::TxFrame *)result;
        if (!result) {
          goto LABEL_48;
        }
        ot::Mac::TxFrame::SetChannel(BroadcastTxFrame, *((unsigned char *)this + 36));
        ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)BroadcastTxFrame, *((unsigned char *)this + 11));
        break;
      default:
        JUMPOUT(0);
    }
    if ((ot::Mac::TxFrame::IsSecurityProcessed(BroadcastTxFrame) & 1) == 0) {
      ot::Mac::Mac::ProcessTransmitSecurity(this, BroadcastTxFrame);
    }
    *((unsigned char *)this + 6)  = 0;
    uint64_t result = ot::Mac::Links::Send((ot::Mac::Mac *)((char *)this + 56));
  }
LABEL_48:
  if (!BroadcastTxFrame)
  {
    BroadcastTxFrame  = (ot::Mac::TxFrame *)ot::Mac::TxFrames::GetBroadcastTxFrame((ot::Mac::TxFrames *)TxFrames);
    ot::Mac::Frame::SetLength((uint64_t)BroadcastTxFrame, 0);
    return ot::Mac::Mac::HandleTransmitDone((uint64_t)this, BroadcastTxFrame, 0, 0xBu);
  }
  return result;
}

void ot::Mac::Links::SetPanId(ot::Mac::Links *this, __int16 a2)
{
}

{
  ot::Mac::Links::SetPanId(this, a2);
}

void ot::Mac::Mac::FinishOperation(ot::Mac::Mac *this)
{
  char v1 = ot::Mac::Mac::OperationToString(*((unsigned char *)this + 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Finishing operation \"%s\" pendOp:0x%x", v2, v3, v4, v5, v6, v7, v1);
  *((unsigned char *)this + 1)  = 0;
}

uint64_t ot::Mac::Mac::ReportActiveScanResult(uint64_t this, const ot::Mac::RxFrame *a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 40))
  {
    if (a2)
    {
      this  = ot::Mac::Mac::ConvertBeaconToActiveScanResult((ot::Mac::Mac *)this, a2, v3);
      if (!this) {
        return (*(uint64_t (**)(char *, void))(v2 + 40))(v3, *(void *)(v2 + 48));
      }
    }
    else
    {
      return (*(uint64_t (**)(void, void))(this + 40))(0, *(void *)(this + 48));
    }
  }
  return this;
}

void ot::Mac::Mac::PerformEnergyScan(ot::Mac::Mac *this)
{
  updated  = ot::Mac::Mac::UpdateScanChannel(this);
  if (!updated)
  {
    if (*((_WORD *)this + 9))
    {
      updated  = ot::Mac::Links::EnergyScan((ot::Mac::Mac *)((char *)this + 56), *((unsigned char *)this + 16), *((_WORD *)this + 9));
    }
    else
    {
      do
      {
        ot::Mac::Links::Receive((ot::Mac::Mac *)((char *)this + 56), *((unsigned char *)this + 16));
        Rssunsigned __int8 i = ot::Mac::Links::GetRssi((ot::Mac::Mac *)((char *)this + 56));
        ot::Mac::Mac::ReportEnergyScanResult((uint64_t)this, Rssi);
        updated  = ot::Mac::Mac::UpdateScanChannel(this);
      }
      while (!updated);
    }
  }
  if (updated)
  {
    ot::Mac::Mac::FinishOperation(this);
    if (*((void *)this + 5)) {
      (*((void (**)(void, void))this + 5))(0, *((void *)this + 6));
    }
    ot::Mac::Mac::PerformNextOperation(this);
  }
}

void ot::Mac::Links::Receive(ot::Mac::Links *this, unsigned __int8 a2)
{
}

{
  ot::Mac::Links::Receive(this, a2);
}

uint64_t ot::Mac::Mac::ReportEnergyScanResult(uint64_t this, char a2)
{
  uint64_t v4 = this;
  char v3 = a2;
  if (*(void *)(this + 40))
  {
    if (v3 != 127)
    {
      v2[0]  = *(unsigned char *)(this + 16);
      v2[1]  = v3;
      return (*(uint64_t (**)(unsigned char *, void))(this + 40))(v2, *(void *)(this + 48));
    }
  }
  return this;
}

uint64_t ot::Mac::Links::GetRssi(ot::Mac::Links *this)
{
  return (char)ot::Mac::SubMac::GetRssi((ot::Mac::Links *)((char *)this + 8));
}

{
  return ot::Mac::Links::GetRssi(this);
}

uint64_t ot::Mac::Links::EnergyScan(ot::Mac::Links *this, unsigned __int8 a2, unsigned __int16 a3)
{
  return ot::Mac::SubMac::EnergyScan((ot::Mac::Links *)((char *)this + 8), a2, a3);
}

{
  return ot::Mac::Links::EnergyScan(this, a2, a3);
}

void ot::Mac::Mac::EnergyScanDone(ot::Mac::Mac *this, char a2)
{
}

void ot::Mac::Mac::SetRxOnWhenIdle(ot::Mac::Mac *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10 = a2 & 1;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mac::kLogModuleName, "%s: aRxOnWhenIdle  = %d, mRxOnWhenIdle  = %d", a3, a4, a5, a6, a7, a8, (char)"SetRxOnWhenIdle");
  if (((*(unsigned char *)this & 4) != 0) != (v10 & 1))
  {
    *(unsigned char *)this  = *(unsigned char *)this & 0xFB | (4 * (v10 & 1));
    if ((*(unsigned char *)this & 4) != 0)
    {
      if (ot::Mac::Mac::IsPending((uint64_t)this, 6))
      {
        ot::TimerMilli::Stop((ot::Mac::Mac *)((char *)this + 304));
        ot::Mac::Mac::ClearPending((uint64_t)this, 6);
      }
      if (*((unsigned char *)this + 1) == 6)
      {
        ot::TimerMilli::Stop((ot::Mac::Mac *)((char *)this + 304));
        ot::Mac::Mac::FinishOperation(this);
        ot::Tasklet::Post((ot::Mac::Mac *)((char *)this + 288));
      }
    }
    LOBYTE(vot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 1;
    if ((*(unsigned char *)this & 4) == 0) {
      int v8 = (*(unsigned __int8 *)this >> 3) & 1;
    }
    ot::Mac::Links::SetRxOnWhenBackoff((ot::Mac::Mac *)((char *)this + 56), v8 & 1);
    ot::Mac::Mac::UpdateIdleMode(this);
  }
}

BOOL ot::Mac::Mac::IsPending(uint64_t a1, char a2)
{
  return (*(unsigned __int16 *)(a1 + 2) & (1 << a2)) != 0;
}

{
  return ot::Mac::Mac::IsPending(a1, a2);
}

uint64_t ot::Mac::Mac::ClearPending(uint64_t result, char a2)
{
  *(_WORD *)(result + 2) &= ~(unsigned __int16)(1 << a2);
  return result;
}

{
  return ot::Mac::Mac::ClearPending(result, a2);
}

uint64_t ot::Mac::Links::SetRxOnWhenBackoff(ot::Mac::Links *this, char a2)
{
  return ot::Mac::SubMac::SetRxOnWhenBackoff((uint64_t)this + 8, a2 & 1);
}

{
  return ot::Mac::Links::SetRxOnWhenBackoff(this, a2);
}

void ot::Mac::Mac::UpdateIdleMode(ot::Mac::Mac *this)
{
  BOOL v14 = 0;
  if ((*(unsigned char *)this & 4) == 0) {
    BOOL v14 = (*(unsigned char *)this & 8) == 0;
  }
  if (!*((unsigned char *)this + 1))
  {
    if (ot::Mac::Mac::IsPending((uint64_t)this, 8)) {
      ot::TimerMilli::FireAt((ot::Mac::Mac *)((char *)this + 304), *((_DWORD *)this + 7));
    }
    if (v14)
    {
      ot::Mac::Links::Sleep((ot::Mac::Mac *)((char *)this + 56));
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Idle mode: Radio sleeping pendOp:0x%x", v1, v2, v3, v4, v5, v6, *((_WORD *)this + 1));
    }
    else
    {
      ot::Mac::Links::Receive((ot::Mac::Mac *)((char *)this + 56), *((unsigned char *)this + 11));
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Idle mode: Radio receiving on channel %u pendOp:0x%x", v7, v8, v9, v10, v11, v12, *((unsigned char *)this + 11));
    }
  }
}

uint64_t ot::Mac::Mac::SetPanChannel(ot::Mac::Mac *this, unsigned __int8 a2)
{
  uint64_t v7 = this;
  unsigned __int8 v6 = a2;
  unsigned int v5 = 0;
  if (ot::Mac::ChannelMask::ContainsChannel((ot::Mac::Mac *)((char *)this + 12), a2))
  {
    uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    if (!ot::Notifier::Update<unsigned char>(v2, (unsigned char *)this + 10, &v6, 0x4000))
    {
      ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 258);
      if ((*(unsigned char *)this & 0x20) == 0)
      {
        *((unsigned char *)this + 11)  = *((unsigned char *)this + 10);
        ot::Mac::Mac::UpdateCsl(this, 0);
        ot::Mac::Mac::UpdateIdleMode(this);
      }
    }
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::Notifier::Update<unsigned char>(void *a1, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v5;
}

{
  return ot::Notifier::Update<unsigned char>(a1, a2, a3, a4);
}

void ot::Mac::Mac::UpdateCsl(ot::Mac::Mac *this, ot::Neighbor *a2)
{
  char v32 = this;
  uint64_t v31 = a2;
  unsigned __int16 v30 = 0;
  CslPeripheral  = a2;
  Ecslunsigned __int16 Period = 0;
  if (ot::Mac::Mac::IsCslEnabled(this)) {
    Cslunsigned __int16 Period = ot::Mac::Mac::GetCslPeriod(this);
  }
  else {
    Cslunsigned __int16 Period = 0;
  }
  Ecslunsigned __int16 Period = CslPeriod;
  unsigned __int8 v27 = 0;
  if (ot::Mac::Mac::GetCslChannel(this)) {
    Cslchar Channel = ot::Mac::Mac::GetCslChannel(this);
  }
  else {
    Cslchar Channel = *((unsigned char *)this + 11);
  }
  unsigned __int8 v27 = CslChannel;
  int v26 = 0;
  if (!CslPeripheral)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    CslPeripheral  = (ot::Neighbor *)ot::Mle::Mle::GetCslPeripheral(v2);
    ot::Mac::Links::WedPresent((ot::Mac::Mac *)((char *)this + 56), CslPeripheral != 0);
  }
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsSleepyRouter(v3))
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsCslPeripheralDetached(v4))
    {
      Ecslunsigned __int16 Period = 0;
    }
    else
    {
      Instance  = ot::InstanceLocator::GetInstance(this);
      Ecslunsigned __int16 Period = otThreadWedGetEcslPeriod((uint64_t)Instance);
    }
    *((_WORD *)this + 17)  = EcslPeriod;
  }
  if (CslPeripheral)
  {
    uint64_t Parent = CslPeripheral;
  }
  else
  {
    unsigned __int8 v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v6);
  }
  CslPeripheral  = Parent;
  if ((unsigned __int16)ot::Neighbor::GetRloc16(Parent)) {
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(CslPeripheral);
  }
  else {
    unsigned __int16 Rloc16 = -2;
  }
  unsigned __int16 v30 = Rloc16;
  ot::Neighbor::GetExtAddress(CslPeripheral);
  if (ot::Mac::Links::UpdateCsl((uint64_t)this + 56, EcslPeriod, v27, Rloc16, v7, &v26))
  {
    uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (ot::Mle::Mle::IsChild(v8))
    {
      uint64_t v9 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
      ot::DataPollSender::RecalculatePollPeriod(v9);
      if (EcslPeriod)
      {
        uint64_t v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        ot::Mle::Mle::ScheduleChildUpdateRequest(v10);
      }
    }
    BOOL v14 = CslPeripheral;
    uint64_t v11 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (v14 == (ot::Neighbor *)ot::Mle::Mle::GetCslPeripheral(v11))
    {
      uint64_t v25 = CslPeripheral;
      ot::InstanceLocator::GetInstance(this);
      unint64_t Now = otPlatRadioGetNow();
      int v23 = 0;
      ot::Time::Time((ot::Time *)&v23, Now);
      int v22 = 0;
      ot::Time::Time((ot::Time *)&v20, v26);
      int v21 = ot::Time::operator-(&v20, 240 * EcslPeriod);
      int v22 = ot::Time::operator-(&v21, 32);
      if (ot::Time::operator>(&v23, &v22))
      {
        unsigned int v12 = ot::Time::operator-(&v23, &v22);
        Now -= v12;
      }
      else
      {
        unsigned int v13 = ot::Time::operator-(&v22, &v23);
        Now += v13;
      }
      ot::CslTxScheduler::ChildInfo::SetCslPeriod((uint64_t)v25 + 168, EcslPeriod);
      ot::CslTxScheduler::ChildInfo::SetCslPhase((uint64_t)v25 + 168, 0);
      ot::CslTxScheduler::ChildInfo::SetLastRxTimestamp((uint64_t)v25 + 168, Now);
      ot::CslTxScheduler::ChildInfo::SetCslChannel((uint64_t)v25 + 168, v27);
      ot::CslTxScheduler::ChildInfo::SetCslSynchronized((unsigned char *)v25 + 168, 1);
    }
    ot::Mac::Mac::UpdateIdleMode(this);
  }
}

uint64_t ot::Mac::Mac::SetTemporaryChannel(ot::Mac::Mac *this, unsigned __int8 a2)
{
  unsigned int v4 = 0;
  if (ot::Mac::ChannelMask::ContainsChannel((ot::Mac::Mac *)((char *)this + 12), a2))
  {
    *(unsigned char *)this  = *(unsigned char *)this & 0xDF | 0x20;
    *((unsigned char *)this + 11)  = a2;
    ot::Mac::Mac::UpdateIdleMode(this);
  }
  else
  {
    return 7;
  }
  return v4;
}

void ot::Mac::Mac::ClearTemporaryChannel(ot::Mac::Mac *this)
{
  if ((*(unsigned char *)this & 0x20) != 0)
  {
    *(unsigned char *)this &= ~0x20u;
    *((unsigned char *)this + 11)  = *((unsigned char *)this + 10);
    ot::Mac::Mac::UpdateIdleMode(this);
  }
}

void ot::Mac::Mac::SetSupportedChannelMask(ot::Mac::Mac *this, const ot::Mac::ChannelMask *a2)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  int v7 = *(_DWORD *)a2;
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  int SupportedChannelMask = ot::Radio::GetSupportedChannelMask(v2);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v6, SupportedChannelMask);
  ot::Mac::ChannelMask::Intersect(&v7, (const ot::Mac::ChannelMask *)v6);
  unsigned int v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  ot::Notifier::Update<ot::Mac::ChannelMask>(v4, (_DWORD *)this + 3, &v7, 0x400000);
  IgnoreError();
}

uint64_t ot::Notifier::Update<ot::Mac::ChannelMask>(void *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Mac::ChannelMask::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v6;
}

{
  return ot::Notifier::Update<ot::Mac::ChannelMask>(a1, a2, a3, a4);
}

uint64_t ot::Notifier::Update<unsigned short>(void *a1, _WORD *a2, _WORD *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v5;
}

{
  return ot::Notifier::Update<unsigned short>(a1, a2, a3, a4);
}

void ot::Mac::Mac::RequestDirectFrameTransmission(ot::Mac::Mac *this)
{
  if ((ot::Mac::Mac::IsEnabled(this) & 1) != 0 && !ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 4u)) {
    ot::Mac::Mac::StartOperation((uint64_t)this, 4);
  }
}

BOOL ot::Mac::Mac::IsActiveOrPending(uint64_t a1, unsigned __int8 a2)
{
  BOOL v3 = 1;
  if (*(unsigned __int8 *)(a1 + 1) != a2) {
    return ot::Mac::Mac::IsPending(a1, a2);
  }
  return v3;
}

void ot::Mac::Mac::RequestIndirectFrameTransmission(ot::Mac::Mac *this)
{
  if ((ot::Mac::Mac::IsEnabled(this) & 1) != 0 && !ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 7u)) {
    ot::Mac::Mac::StartOperation((uint64_t)this, 7);
  }
}

void ot::Mac::Mac::RequestCslFrameTransmission(ot::Mac::Mac *this, int a2)
{
  unsigned int v6 = this;
  int v5 = a2;
  if (*(unsigned char *)this)
  {
    int Now = ot::TimerMilli::GetNow(this);
    int v4 = ot::Time::operator+(&Now, v5);
    *((_DWORD *)this + 7)  = v4;
    ot::Mac::Mac::StartOperation((uint64_t)this, 8);
  }
}

uint64_t ot::Mac::Mac::RequestDataPollTransmission(ot::Mac::Mac *this)
{
  unsigned int v3 = 0;
  if (ot::Mac::Mac::IsEnabled(this))
  {
    if (!ot::Mac::Mac::IsActiveOrPending((uint64_t)this, 5u))
    {
      *(unsigned char *)this  = *(unsigned char *)this & 0xFD | (2 * !ot::Mac::Mac::IsPending((uint64_t)this, 4));
      ot::Mac::Mac::StartOperation((uint64_t)this, 5);
    }
  }
  else
  {
    return 13;
  }
  return v3;
}

void ot::Mac::Links::Sleep(ot::Mac::Links *this)
{
}

{
  ot::Mac::Links::Sleep(this);
}

uint64_t ot::Mac::Mac::SetPending(uint64_t result, char a2)
{
  *(_WORD *)(result + 2) |= 1 << a2;
  return result;
}

{
  return ot::Mac::Mac::SetPending(result, a2);
}

char *ot::Mac::Mac::OperationToString(unsigned __int8 a1)
{
  return ot::Mac::Mac::OperationToString(ot::Mac::Mac::Operation)::kOperationStrings[a1];
}

ot::Mac::Frame *ot::Mac::Mac::PrepareBeaconRequest(ot::Mac::Mac *this)
{
  BOOL v14 = this;
  TxFrames  = (ot::Mac::TxFrames *)ot::Mac::Links::GetTxFrames((ot::Mac::Mac *)((char *)this + 56));
  BroadcastTxFrame  = (ot::Mac::Frame *)ot::Mac::TxFrames::GetBroadcastTxFrame(TxFrames);
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v11);
  ot::Mac::Address::SetNone((uint64_t)v11);
  ot::Mac::Address::SetShort((uint64_t)&v12, 0xFFFF);
  v10[1]  = -1;
  ot::Mac::Frame::InitMacHeader(BroadcastTxFrame, 3, 0, (ot::Mac::Address *)v11, v10, 0, 0);
  ot::Mac::Frame::SetCommandId(BroadcastTxFrame, 7);
  IgnoreError();
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mac::kLogModuleName, "Sending Beacon Request", v2, v3, v4, v5, v6, v7, v9);
  return BroadcastTxFrame;
}

uint64_t ot::Mac::Links::GetTxFrames(ot::Mac::Links *this)
{
  return (uint64_t)this + 224;
}

{
  return ot::Mac::Links::GetTxFrames(this);
}

uint64_t ot::Mac::TxFrames::GetBroadcastTxFrame(ot::Mac::TxFrames *this)
{
  return ot::Mac::TxFrames::GetTxFrame(this);
}

{
  return ot::Mac::TxFrames::GetBroadcastTxFrame(this);
}

uint64_t ot::Mac::Address::SetNone(uint64_t this)
{
  *(unsigned char *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  return this;
}

{
  return ot::Mac::Address::SetNone(this);
}

ot::Mac::Frame *ot::Mac::Mac::PrepareBeacon(ot::Mac::Mac *this)
{
  int v26 = this;
  BroadcastTxFrame  = 0;
  uint64_t v24 = 0;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v22);
  unsigned __int8 v20 = 0;
  Payload  = 0;
  TxFrames  = (ot::Mac::TxFrames *)ot::Mac::Links::GetTxFrames((ot::Mac::Mac *)((char *)this + 56));
  BroadcastTxFrame  = (ot::Mac::Frame *)ot::Mac::TxFrames::GetBroadcastTxFrame(TxFrames);
  ExtAddress  = (void *)ot::Mac::Mac::GetExtAddress(this);
  ot::Mac::Address::SetExtended((uint64_t)v22, ExtAddress);
  v21[0]  = *((_WORD *)this + 4);
  ot::Mac::Address::SetNone((uint64_t)&v23);
  ot::Mac::Frame::InitMacHeader(BroadcastTxFrame, 0, 0, (ot::Mac::Address *)v22, v21, 0, 0);
  ot::Mac::Frame::GetPayload(BroadcastTxFrame);
  uint64_t v24 = v3;
  ot::Mac::Beacon::Init(v3);
  unsigned __int8 v20 = 4;
  Payload  = (ot::Mac::BeaconPayload *)ot::Mac::Beacon::GetPayload(v24);
  ot::Mac::BeaconPayload::Init(Payload);
  if (ot::Mac::Mac::IsJoinable(this)) {
    ot::Mac::BeaconPayload::SetJoiningPermitted((uint64_t)Payload);
  }
  else {
    ot::Mac::BeaconPayload::ClearJoiningPermitted((uint64_t)Payload);
  }
  uint64_t v4 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
  ot::MeshCoP::NetworkNameManager::GetNetworkName(v4);
  v18[0]  = ot::MeshCoP::NetworkName::GetAsData(v5);
  v18[1]  = v6;
  ot::Mac::BeaconPayload::SetNetworkName(Payload, (const ot::MeshCoP::NameData *)v18);
  uint64_t v16 = Payload;
  uint64_t v7 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
  ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v7);
  ot::Mac::BeaconPayload::SetExtendedPanId((uint64_t)v16, v8);
  v20 += 26;
  ot::Mac::Frame::SetPayloadLength(BroadcastTxFrame, v20);
  ot::Mac::Mac::LogBeacon(this, "Sending", v9, v10, v11, v12, v13, v14);
  return BroadcastTxFrame;
}

void ot::Mac::Frame::GetPayload(ot::Mac::Frame *this)
{
  ot::AsConst<ot::Mac::Frame>();
  ot::Mac::Frame::GetPayload(v1);
  ot::AsNonConst<unsigned char>();
}

{
  ot::Mac::Frame::GetPayload(this);
}

uint64_t ot::Mac::Beacon::Init(ot::Mac::Beacon *this)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(4095);
  *(_WORD *)this  = result;
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 3)  = 0;
  return result;
}

{
  return ot::Mac::Beacon::Init(this);
}

unsigned char *ot::Mac::BeaconPayload::Init(unsigned char *this)
{
  *this  = 3;
  this[1]  = 32;
  return this;
}

{
  return ot::Mac::BeaconPayload::Init(this);
}

BOOL ot::Mac::Mac::IsJoinable(ot::Mac::Mac *this)
{
  uint64_t v4 = this;
  unsigned __int8 v3 = 0;
  uint64_t v1 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
  ot::Ip6::Filter::GetUnsecurePorts(v1, &v3);
  return v3 != 0;
}

uint64_t ot::Mac::BeaconPayload::SetJoiningPermitted(uint64_t this)
{
  *(unsigned char *)(this + 1) |= 1u;
  *(unsigned char *)(this + 1) &= 0xFu;
  *(unsigned char *)(this + 1) |= 0x40u;
  return this;
}

{
  return ot::Mac::BeaconPayload::SetJoiningPermitted(this);
}

uint64_t ot::Mac::BeaconPayload::ClearJoiningPermitted(uint64_t this)
{
  *(unsigned char *)(this + 1) &= ~1u;
  return this;
}

{
  return ot::Mac::BeaconPayload::ClearJoiningPermitted(this);
}

uint64_t ot::Mac::BeaconPayload::SetNetworkName(ot::Mac::BeaconPayload *this, const ot::MeshCoP::NameData *a2)
{
  return ot::MeshCoP::NameData::CopyTo(a2, (char *)this + 2, 16);
}

{
  return ot::Mac::BeaconPayload::SetNetworkName(this, a2);
}

uint64_t ot::Mac::BeaconPayload::SetExtendedPanId(uint64_t result, void *a2)
{
  *(void *)(result + 1ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *a2;
  return result;
}

{
  return ot::Mac::BeaconPayload::SetExtendedPanId(result, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(a1);
}

uint64_t ot::Mac::Mac::ShouldSendBeacon(ot::Mac::Mac *this)
{
  char v3 = 0;
  if (ot::Mac::Mac::IsEnabled(this)) {
    char v3 = ot::Mac::Mac::IsBeaconEnabled(this) & 1;
  }
  return v3 & 1;
}

uint64_t ot::Mac::Mac::IsBeaconEnabled(ot::Mac::Mac *this)
{
  return (*(unsigned __int8 *)this >> 4) & 1;
}

{
  return ot::Mac::Mac::IsBeaconEnabled(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Filter>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(a1);
}

void ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::Mac *this, ot::Mac::TxFrame *a2)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  uint64_t v12 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  unsigned __int8 v11 = 0;
  ExtAddress  = 0;
  if (ot::Mac::Frame::GetSecurityEnabled(v13))
  {
    ot::Mac::Frame::GetKeyIdMode(v13, &v11);
    IgnoreError();
    if (v11)
    {
      if (v11 == 8) {
        return;
      }
      if (v11 != 16) {
        __assert_rtn("ProcessTransmitSecurity", "mac.cpp", 1157, "false");
      }
      *(_DWORD *)uint64_t v9 = -1;
      if (ot::Mac::Frame::IsWakeupFrame(v13))
      {
        CurrentKeySequence  = ot::KeyManager::GetCurrentKeySequence(v12);
        ot::Encoding::BigEndian::WriteUint32(CurrentKeySequence, v9, v5);
        ot::Mac::Frame::SetKeySource(v13, v9);
        return;
      }
      ot::Mac::TxFrame::SetAesKey((uint64_t)v13, (ot::Mac::Mac *)((char *)this + 1680));
      ot::Mac::Frame::SetFrameCounter(v13, ++*((_DWORD *)this + 128));
      ot::Mac::Frame::SetKeySource(v13, v9);
      ot::Mac::Frame::SetKeyId(v13, 255);
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>((uint64_t)&ot::Mac::Mac::sMode2ExtAddress);
    }
    else
    {
      uint64_t v7 = v13;
      Keunsigned int k = (const ot::Mac::KeyMaterial *)ot::KeyManager::GetKek(v12);
      ot::Mac::TxFrame::SetAesKey((uint64_t)v7, Kek);
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(this);
      if ((ot::Mac::TxFrame::IsHeaderUpdated(v13) & 1) == 0)
      {
        uint64_t v6 = v13;
        KekFrameCounter  = ot::KeyManager::GetKekFrameCounter(v12);
        ot::Mac::Frame::SetFrameCounter(v6, KekFrameCounter);
        ot::KeyManager::IncrementKekFrameCounter((uint64_t)v12);
      }
    }
    if ((ot::Mac::TxFrame::IsCslIePresent(v13) & 1) == 0) {
      ot::Mac::TxFrame::ProcessTransmitAesCcm(v13, ExtAddress);
    }
  }
}

uint64_t ot::Mac::TxFrame::SetAesKey(uint64_t this, const ot::Mac::KeyMaterial *a2)
{
  *(void *)(this + 16)  = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetAesKey(this, a2);
}

uint64_t ot::KeyManager::GetKek(ot::KeyManager *this)
{
  return (uint64_t)this + 120;
}

{
  return ot::KeyManager::GetKek(this);
}

uint64_t ot::KeyManager::GetKekFrameCounter(ot::KeyManager *this)
{
  return *((unsigned int *)this + 34);
}

{
  return ot::KeyManager::GetKekFrameCounter(this);
}

uint64_t ot::KeyManager::IncrementKekFrameCounter(uint64_t this)
{
  return this;
}

{
  return ot::KeyManager::IncrementKekFrameCounter(this);
}

uint64_t ot::Mac::TxFrame::IsCslIePresent(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 3) & 1;
}

{
  return ot::Mac::TxFrame::IsCslIePresent(this);
}

uint64_t ot::Mac::TxFrames::Clear(ot::Mac::TxFrames *this)
{
  return ot::Mac::TxFrame::SetCslIePresent(*(void *)this, 0);
}

{
  return ot::Mac::TxFrames::Clear(this);
}

uint64_t ot::Mac::TxFrame::SetChannel(ot::Mac::TxFrame *this, char a2)
{
  *((unsigned char *)this + 1ot::Mac::TxFrame::SetTxDelayBaseTime(*(void *)this, 0) = a2;
  return ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)this, a2);
}

{
  return ot::Mac::TxFrame::SetChannel(this, a2);
}

uint64_t ot::Mac::TxFrames::SetChannel(ot::Mac::TxFrame **this, char a2)
{
  return ot::Mac::TxFrame::SetChannel(*this, a2);
}

{
  return ot::Mac::TxFrames::SetChannel(this, a2);
}

uint64_t ot::Mac::TxFrames::SetMaxCsmaBackoffs(ot::Mac::TxFrames *this, char a2)
{
  return ot::Mac::TxFrame::SetMaxCsmaBackoffs(*(void *)this, a2);
}

{
  return ot::Mac::TxFrames::SetMaxCsmaBackoffs(this, a2);
}

BOOL ot::Mle::DeviceMode::IsMinimalEndDevice(ot::Mle::DeviceMode *this)
{
  return !ot::Mle::DeviceMode::IsFullThreadDevice(this);
}

{
  return ot::Mle::DeviceMode::IsMinimalEndDevice(this);
}

uint64_t ot::MeshForwarder::GetSendMessage(ot::MeshForwarder *this)
{
  return *((void *)this + 7);
}

{
  return ot::MeshForwarder::GetSendMessage(this);
}

uint64_t ot::Neighbor::GetVersion(ot::Neighbor *this)
{
  return *((unsigned __int16 *)this + 18);
}

{
  return ot::Neighbor::GetVersion(this);
}

uint64_t ot::Neighbor::GetState(ot::Neighbor *this)
{
  return *((unsigned char *)this + 30) & 0xF;
}

{
  return ot::Neighbor::GetState(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::DataPollHandler>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>(a1);
}

uint64_t ot::Mac::TxFrame::IsARetransmission(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 1) & 1;
}

{
  return ot::Mac::TxFrame::IsARetransmission(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::CslTxScheduler>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::WakeupTxScheduler>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::WakeupTxScheduler>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::WakeupTxScheduler>(a1);
}

uint64_t ot::Mac::TxFrame::SetRxChannelAfterTxDone(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4++*(_WORD *)(this + 4) = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetRxChannelAfterTxDone(this, a2);
}

uint64_t ot::Mac::TxFrame::IsSecurityProcessed(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 4) & 1;
}

{
  return ot::Mac::TxFrame::IsSecurityProcessed(this);
}

uint64_t ot::Mac::Links::Send(ot::Mac::Links *this)
{
  uint64_t result = ot::Mac::SubMac::Send((ot::Mac::Links *)((char *)this + 8));
  if (result) {
    __assert_rtn("Send", "mac_links.hpp", 579, "false");
  }
  return result;
}

{
  return ot::Mac::Links::Send(this);
}

uint64_t ot::Mac::Frame::SetLength(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  return this;
}

{
  return ot::Mac::Frame::SetLength(this, a2);
}

uint64_t ot::Mac::Mac::HandleTransmitDone(uint64_t a1, ot::Mac::TxFrame *a2, ot::Mac::Frame *a3, unsigned int a4)
{
  uint64_t v46 = a1;
  uint64_t v45 = a2;
  uint64_t v44 = a3;
  unsigned int v43 = a4;
  if (!a4)
  {
    __int16 Length = ot::Mac::Frame::GetLength(v45);
    ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Update(a1 + 828, Length);
  }
  if (ot::Mac::Frame::IsEmpty(v45))
  {
LABEL_17:
    unsigned int v13 = *(unsigned __int8 *)(a1 + 1);
    BOOL v14 = v13 > 1;
    uint64_t v15 = v13 - 1;
    if (v14)
    {
      uint64_t v17 = v15;
      char v16 = 1;
    }
    else
    {
      uint64_t v17 = v15;
      char v16 = 0;
    }
    if ((v16 & 1) == 0)
    {
      switch(v17)
      {
        case 0:
          ++*(_DWORD *)(a1 + 364);
          return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), *(unsigned __int16 *)(a1 + 18));
        case 1:
        case 5:
          break;
        case 2:
          ++*(_DWORD *)(a1 + 360);
          ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
          return ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
        case 3:
          ++*(_DWORD *)(a1 + 352);
          if (v43)
          {
            ++*(_DWORD *)(a1 + 376);
          }
          else if (ot::Mac::Links::GetTransmitRetries((ot::Mac::Links *)(a1 + 56)) < 0x10u)
          {
            TransmitRetries  = ot::Mac::Links::GetTransmitRetries((ot::Mac::Links *)(a1 + 56));
            ++*(_DWORD *)(a1 + 520 + 4 * TransmitRetries);
          }
          SubMac  = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Links *)(a1 + 56));
          if (ot::Mac::SubMac::GetTransmitErrorsNoAck(SubMac) < 0x11u)
          {
            int v28 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Links *)(a1 + 56));
            TransmitErrorsNoAcunsigned int k = ot::Mac::SubMac::GetTransmitErrorsNoAck(v28);
            ++*(_DWORD *)(a1 + 588 + 4 * TransmitErrorsNoAck);
          }
          unsigned __int16 v30 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Links *)(a1 + 56));
          if (ot::Mac::SubMac::GetTransmitErrorsChannelAccessFailure(v30) < 0x11u)
          {
            uint64_t v31 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Links *)(a1 + 56));
            TransmitErrorsChannelAccessFailure  = ot::Mac::SubMac::GetTransmitErrorsChannelAccessFailure(v31);
            ++*(_DWORD *)(a1 + 656 + 4 * TransmitErrorsChannelAccessFailure);
          }
          ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
          uint64_t v33 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
          ot::MeshForwarder::HandleSentFrame(v33, v45, v43);
          uint64_t v34 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)a1);
          ot::DataPollSender::ProcessTxDone(v34, v45, v44, v43);
          return ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
        case 4:
          AckRequest  = 1;
          if (!ot::Mac::Frame::IsEmpty(v45)) {
            AckRequest  = ot::Mac::Frame::GetAckRequest(v45);
          }
          if (!AckRequest) {
            __assert_rtn("HandleTransmitDone", "mac.cpp", 1838, "aFrame.IsEmpty() || aFrame.GetAckRequest()");
          }
          if (!v43 && v44)
          {
            FramePending  = ot::Mac::Frame::GetFramePending(v44);
            if ((ot::Mac::Mac::IsEnabled((ot::Mac::Mac *)a1) & 1) != 0 && FramePending) {
              ot::Mac::Mac::StartOperation(a1, 6);
            }
            char v18 = ot::ToYesNo((ot *)FramePending);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mac::kLogModuleName, "Sent data poll, fp:%s", v19, v20, v21, v22, v23, v24, v18);
          }
          ++*(_DWORD *)(a1 + 356);
          ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
          uint64_t v25 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)a1);
          ot::DataPollSender::HandlePollSent(v25, v45, v43);
          return ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
        case 6:
          ++*(_DWORD *)(a1 + 352);
          if (v43)
          {
            ++*(_DWORD *)(a1 + 380);
          }
          else if (!ot::Mac::Links::GetTransmitRetries((ot::Mac::Links *)(a1 + 56)))
          {
            unsigned __int8 v36 = ot::Mac::Links::GetTransmitRetries((ot::Mac::Links *)(a1 + 56));
            ++*(_DWORD *)(a1 + 584 + 4 * v36);
          }
          ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
          int v37 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>((ot::InstanceLocator *)a1);
          ot::DataPollHandler::HandleSentFrame(v37, v45, v43);
          return ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
        case 7:
          ++*(_DWORD *)(a1 + 352);
          ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
          uint64_t v35 = ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>((ot::InstanceLocator *)a1);
          ot::CslTxScheduler::HandleSentFrame(v35, v45, v43);
          return ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
        case 8:
          ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
          return ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
        default:
          JUMPOUT(0);
      }
    }
    __assert_rtn("HandleTransmitDone", "mac.cpp", 1957, "false");
  }
  ot::Mac::Address::Address((ot::Mac::Address *)v42);
  ot::Mac::Frame::GetDstAddr(v45, (ot::Mac::Address *)v42);
  IgnoreError();
  if (!ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v42))
  {
LABEL_13:
    if (!v43 && v44 && ot::Mac::Mac::ProcessEnhAckSecurity((ot::Mac::Mac *)a1, v45, v44)) {
      unsigned int v43 = 14;
    }
    goto LABEL_17;
  }
  ++*(unsigned char *)(a1 + 6);
  uint64_t v5 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
  SendMessage  = (ot::Message *)ot::MeshForwarder::GetSendMessage(v5);
  if (SendMessage && ot::Message::GetSubType(SendMessage) == 12)
  {
    if (*(unsigned __int8 *)(a1 + 6) < (int)*(unsigned __int8 *)(a1 + 26))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "ReTx MLE Advertisement, current tx count=%d", v6, v7, v8, v9, v10, v11, *(unsigned char *)(a1 + 6));
      return ot::Mac::Links::Send((ot::Mac::Links *)(a1 + 56));
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 6))
  {
LABEL_12:
    *(unsigned char *)(a1 + 6)  = 0;
    goto LABEL_13;
  }
  return ot::Mac::Links::Send((ot::Mac::Links *)(a1 + 56));
}

uint64_t ot::Mac::Mac::RecordCcaStatus(uint64_t this, char a2, char a3)
{
  char v5 = a2 & 1;
  char v3 = (ot::Mac::Mac *)this;
  if ((a2 & 1) == 0)
  {
    ++*(_DWORD *)(this + 384);
    this  = ot::Mac::Mac::IsPerformingCslTransmit((ot::Mac::Mac *)this);
    if (this) {
      ++*((_DWORD *)v3 + 101);
    }
  }
  if (a3 == *((unsigned char *)v3 + 10))
  {
    if (*((unsigned __int16 *)v3 + 259) < 0x200u) {
      ++*((_WORD *)v3 + 259);
    }
    return (uint64_t)ot::SuccessRateTracker::AddSample((_WORD *)v3 + 258, v5 & 1, *((_WORD *)v3 + 259));
  }
  return this;
}

BOOL ot::Mac::Mac::IsPerformingCslTransmit(ot::Mac::Mac *this)
{
  return *((unsigned char *)this + 1) == 8;
}

{
  return ot::Mac::Mac::IsPerformingCslTransmit(this);
}

void ot::Mac::Mac::RecordFrameTransmitStatus(_DWORD *a1, ot::Mac::Frame *a2, ot::Mac::RxFrame *a3, int a4, char a5, char a6)
{
  int v28 = a1;
  unsigned __int8 v27 = a2;
  int v26 = a3;
  int v25 = a4;
  char v24 = a5;
  char v23 = a6 & 1;
  AckRequest  = ot::Mac::Frame::GetAckRequest(a2);
  ot::Mac::Address::Address((ot::Mac::Address *)v21);
  uint64_t v19 = "";
  if (ot::Mac::Frame::IsEmpty(v27)) {
    return;
  }
  ot::Mac::Frame::GetDstAddr(v27, (ot::Mac::Address *)v21);
  IgnoreError();
  uint64_t v6 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
  uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v6, (ot::Mac::Address *)v21, 1);
  if (Neighbor && AckRequest)
  {
    char v18 = 1;
    if (!v25)
    {
LABEL_7:
      LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Neighbor);
      ot::LinkQualityInfo::AddFrameTxStatus(LinkInfo, v18 & 1);
      goto LABEL_8;
    }
    if (v25 == 14)
    {
      char v18 = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  if (Neighbor)
  {
    uint64_t v8 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Neighbor);
    ot::LinkQualityInfo::ToErrorRateInfoString(v8, (ot::StringWriter *)v29);
    uint64_t v19 = (char *)ot::String<(unsigned short)128>::AsCString((uint64_t)v29);
  }
  if (v25)
  {
    ot::Mac::Mac::LogFrameTxFailure((ot::Mac::Mac *)a1, v27, v25, v24, v23 & 1, (uint64_t)v19);
    Header  = ot::Mac::Frame::GetHeader(v27);
    ot::Logger::Dump<(ot::LogLevel)5,&ot::Mac::kLogModuleName>((ot *)"TX ERR", Header, 0x10u);
    if (v23)
    {
      ++a1[93];
      return;
    }
  }
  else
  {
    ot::Mac::Mac::LogFrameTx((ot::Mac::Mac *)a1, v27, v19);
  }
  if (!v25 && AckRequest && v26 && Neighbor)
  {
    char v16 = v26;
    ot::Neighbor::GetExtAddress(Neighbor);
    if (ot::Mac::Filter::ApplyToRxFrame((ot::Mac::Filter *)(a1 + 339), v16, v10, Neighbor)) {
      return;
    }
    unsigned int v13 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(Neighbor);
    Rssunsigned __int8 i = ot::Mac::RxFrame::GetRssi(v26);
    ot::LinkQualityInfo::AddRss(v13, Rssi);
    unsigned __int8 Type = ot::Mac::Frame::GetType(v26);
    Lqunsigned __int8 i = ot::Mac::RxFrame::GetLqi(v26);
    char v12 = ot::Mac::RxFrame::GetRssi(v26);
    ot::Neighbor::AggregateLinkMetrics(Neighbor, 0, Type, Lqi, v12);
    ot::Mac::Mac::ProcessEnhAckProbing((ot::Mac::Mac *)a1, v26, Neighbor);
    if ((unsigned __int16)ot::Mac::Frame::GetVersion(v26) == 0x2000)
    {
      ot::Mac::Mac::ProcessCsl((ot::Mac::Mac *)a1, v26, (const ot::Mac::Address *)v21);
      IgnoreError();
    }
  }
  ++a1[82];
  if (v25 == 11) {
    ++a1[97];
  }
  if (v25 == 15) {
    ++a1[98];
  }
  if (AckRequest)
  {
    ++a1[85];
    if (!v25) {
      ++a1[86];
    }
  }
  else
  {
    ++a1[87];
  }
  if (ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v21)) {
    ++a1[84];
  }
  else {
    ++a1[83];
  }
}

BOOL ot::Mac::Frame::GetAckRequest(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsAckRequest((ot::Mac::Frame *)FrameControlField);
}

{
  return ot::Mac::Frame::GetAckRequest(this);
}

_WORD *ot::LinkQualityInfo::AddFrameTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 2, a2 & 1, 0x80u);
}

{
  return ot::LinkQualityInfo::AddFrameTxStatus(this, a2);
}

uint64_t ot::String<(unsigned short)128>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)128>::AsCString(a1);
}

void ot::Mac::Mac::LogFrameTx(ot::Mac::Mac *this, const ot::Mac::TxFrame *a2, const char *a3)
{
  v113  = this;
  v112  = a2;
  v111  = a3;
  v107  = this;
  Airtime  = ot::Mac::TxFrame::GetAirtime(a2);
  v105  = ot::Mac::TxFrame::GetAirtime(v112);
  v109  = v105 + ot::Mac::TxFrame::GetIFS(v112);
  *(double *)&unint64_t v3 = (double)Airtime;
  LODWORD(v3)  = v109;
  float v4 = 100.0 * (double)Airtime / (double)v3;
  v108  = v4;
  Rcp2FrameVersiounsigned __int8 n = ot::Mac::TxFrame::GetRcp2FrameVersion(v112);
  v106  = (Rcp2FrameVersion - 1);
  if (Rcp2FrameVersion <= 1)
  {
    uint64_t v7 = (Rcp2FrameVersion - 1);
    char v6 = 0;
  }
  else
  {
    uint64_t v7 = (Rcp2FrameVersion - 1);
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    switch(v7)
    {
      case 0:
        break;
      case 1:
        int Channel = ot::Mac::Frame::GetChannel(v112);
        v97  = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v112);
        TxRetryCount  = ot::Mac::TxFrame::GetTxRetryCount(v112);
        v94  = v118;
        ot::Mac::Frame::ToInfoString(v112, (ot::StringWriter *)v118);
        v99  = ot::String<(unsigned short)150>::AsCString((uint64_t)v118);
        v95  = 100;
        v100  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) / 0x64;
        v101  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) % 0x64;
        v102  = v111;
        int Antenna = ot::Mac::TxFrame::GetAntenna(v112);
        v104  = &v37;
        double v38 = v97;
        uint64_t v39 = TxRetryCount;
        uint64_t v40 = v99;
        uint64_t v41 = v100;
        uint64_t v42 = v101;
        unsigned int v43 = v111;
        uint64_t v44 = (char)Antenna;
        IFS  = ot::Mac::TxFrame::GetIFS(v112);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame tx on channel %d, txPower=%f, retryCount=%d, %s, ccaFailureRate:%d.%02d%%%s antenna=%d, ifs=%d microSec", v8, v9, v10, v11, v12, v13, Channel);
        return;
      case 2:
      case 3:
        v84  = ot::Mac::Frame::GetChannel(v112);
        v85  = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v112);
        v86  = ot::Mac::TxFrame::GetTxRetryCount(v112);
        v82  = v117;
        ot::Mac::Frame::ToInfoString(v112, (ot::StringWriter *)v117);
        v87  = ot::String<(unsigned short)150>::AsCString((uint64_t)v117);
        v83  = 100;
        v88  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) / 0x64;
        v89  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) % 0x64;
        v90  = v111;
        v91  = ot::Mac::TxFrame::GetAntenna(v112);
        v92  = ot::Mac::TxFrame::GetIFS(v112);
        v93  = &v37;
        double v38 = v85;
        uint64_t v39 = v86;
        uint64_t v40 = v87;
        uint64_t v41 = v88;
        uint64_t v42 = v89;
        unsigned int v43 = v111;
        uint64_t v44 = (char)v91;
        IFS  = v92;
        uint64_t v46 = ot::Mac::TxFrame::GetAirtime(v112);
        double v47 = v108;
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame tx on channel %d, txPower=%f, retryCount=%d, %s, ccaFailureRate:%d.%02d%%%s antenna=%d, ifs=%d microSec, airtime=%d microSec, DutyCycle=%2.3f%%", v14, v15, v16, v17, v18, v19, v84);
        return;
      case 4:
        v70  = ot::Mac::Frame::GetChannel(v112);
        v71  = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v112);
        v72  = ot::Mac::TxFrame::GetTxRetryCount(v112);
        v68  = v116;
        ot::Mac::Frame::ToInfoString(v112, (ot::StringWriter *)v116);
        v73  = ot::String<(unsigned short)150>::AsCString((uint64_t)v116);
        v69  = 100;
        v74  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) / 0x64;
        v75  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) % 0x64;
        v76  = v111;
        v77  = ot::Mac::TxFrame::GetAntenna(v112);
        v78  = ot::Mac::TxFrame::GetIFS(v112);
        v79  = ot::Mac::TxFrame::GetAirtime(v112);
        v80  = v108;
        v81  = &v37;
        double v38 = v71;
        uint64_t v39 = v72;
        uint64_t v40 = v73;
        uint64_t v41 = v74;
        uint64_t v42 = v75;
        unsigned int v43 = v111;
        uint64_t v44 = (char)v77;
        IFS  = v78;
        uint64_t v46 = v79;
        double v47 = v108;
        Pcapunsigned int Mode = ot::Mac::TxFrame::GetPcapMode(v112);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame tx on channel %d, txPower=%f, retryCount=%d, %s, ccaFailureRate:%d.%02d%%%s antenna=%d, ifs=%d microSec, airtime=%d microSec, DutyCycle=%2.3f%%, pcap mode=%d", v20, v21, v22, v23, v24, v25, v70);
        return;
      case 5:
        v55  = ot::Mac::Frame::GetChannel(v112);
        v56  = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v112);
        v57  = ot::Mac::TxFrame::GetTxRetryCount(v112);
        v53  = v115;
        ot::Mac::Frame::ToInfoString(v112, (ot::StringWriter *)v115);
        v58  = ot::String<(unsigned short)150>::AsCString((uint64_t)v115);
        v54  = 100;
        v59  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) / 0x64;
        v60  = ot::Mac::Mac::GetCcaFailureRatePercent(v107) % 0x64;
        v61  = v111;
        v62  = ot::Mac::TxFrame::GetAntenna(v112);
        v63  = ot::Mac::TxFrame::GetIFS(v112);
        v64  = ot::Mac::TxFrame::GetAirtime(v112);
        v65  = v108;
        v66  = ot::Mac::TxFrame::GetPcapMode(v112);
        v67  = &v37;
        double v38 = v56;
        uint64_t v39 = v57;
        uint64_t v40 = v58;
        uint64_t v41 = v59;
        uint64_t v42 = v60;
        unsigned int v43 = v111;
        uint64_t v44 = (char)v62;
        IFS  = v63;
        uint64_t v46 = v64;
        double v47 = v108;
        Pcapunsigned int Mode = v66;
        RCPTimeStamp  = ot::Mac::TxFrame::GetRCPTimeStamp(v112);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame tx on channel %d, txPower=%f, retryCount=%d, %s, ccaFailureRate:%d.%02d%%%s antenna=%d, ifs=%d microSec, airtime=%d microSec, DutyCycle=%2.3f%%, pcap mode=%d, RCP timestamp=%u", v55, v26, v27, v28, v29, v30, v55);
        return;
      default:
        JUMPOUT(0);
    }
  }
  int v50 = ot::Mac::Frame::GetChannel(v112);
  v51  = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v112);
  v52  = ot::Mac::TxFrame::GetTxRetryCount(v112);
  ot::Mac::Frame::ToInfoString(v112, (ot::StringWriter *)v114);
  double v38 = v51;
  uint64_t v39 = v52;
  uint64_t v40 = ot::String<(unsigned short)150>::AsCString((uint64_t)v114);
  uint64_t v41 = ot::Mac::Mac::GetCcaFailureRatePercent(v107) / 0x64;
  uint64_t v42 = ot::Mac::Mac::GetCcaFailureRatePercent(v107) % 0x64;
  unsigned int v43 = v111;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame tx on channel %d, txPower=%f, retryCount=%d, %s, ccaFailureRate:%d.%02d%%%s", v31, v32, v33, v34, v35, v36, v50);
}

void ot::Mac::Mac::LogFrameTxFailure(ot::Mac::Mac *a1, ot::Mac::TxFrame *a2, int a3, char a4, char a5, uint64_t a6)
{
  char v10 = a5 & 1;
  unsigned __int8 v8 = ot::Mac::TxFrame::GetMaxFrameRetries(a2) + 1;
  if (v10) {
    unsigned __int8 v6 = a4 + 1;
  }
  else {
    unsigned __int8 v6 = v8;
  }
  ot::Mac::Mac::LogVendorRCP2(a1, a2, a6, v6, v8, a3);
}

void ot::Logger::Dump<(ot::LogLevel)5,&ot::Mac::kLogModuleName>(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

uint64_t ot::Mac::Frame::GetHeader(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetPsdu(this);
}

{
  return ot::Mac::Frame::GetPsdu(this);
}

{
  return ot::Mac::Frame::GetHeader(this);
}

{
  return ot::Mac::Frame::GetHeader(this);
}

ot::Mac::HeaderIe *ot::Mac::Mac::ProcessEnhAckProbing(ot::Mac::Mac *this, const ot::Mac::RxFrame *a2, const ot::Neighbor *a3)
{
  uint64_t result = (ot::Mac::HeaderIe *)ot::Mac::Frame::GetThreadIe(a2, 0);
  uint64_t v7 = (unsigned __int8 *)result + 6;
  if (result)
  {
    uint64_t result = (ot::Mac::HeaderIe *)ot::Mac::HeaderIe::GetLength(result);
    unsigned __int8 v6 = (_BYTE)result - 4;
    if (((_BYTE)result - 4) <= 2u)
    {
      float v4 = (ot::LinkMetrics::Initiator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(this);
      return (ot::Mac::HeaderIe *)ot::LinkMetrics::Initiator::ProcessEnhAckIeData(v4, v7, v6, a3);
    }
  }
  return result;
}

uint64_t ot::Mac::Frame::GetVersion(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetFrameControlField(this) & 0x3000;
}

{
  return ot::Mac::Frame::GetVersion(this);
}

uint64_t ot::Mac::Mac::ProcessCsl(ot::Mac::Mac *this, const ot::Mac::RxFrame *a2, const ot::Mac::Address *a3)
{
  unsigned int v45 = 0;
  unint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  ot::ChildTable::FindChild(v3, a3, 5);
  uint64_t v44 = v4;
  uint64_t v42 = 0;
  if (v4)
  {
    HeaderIe  = ot::Mac::Frame::GetHeaderIe(a2, 0x1Au);
    if (HeaderIe)
    {
      uint64_t v42 = (ot::Mac::CslIe *)(HeaderIe + 2);
      char v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (ot::Mle::Mle::IsCslPeripheralPresent(v5))
      {
        if ((unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::CslTxScheduler::ChildInfo *)(v44 + 168)))
        {
          Csl__int16 Period = (unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::CslTxScheduler::ChildInfo *)(v44 + 168));
          if (CslPeriod != (unsigned __int16)ot::Mac::CslIe::GetPeriod(v42))
          {
            char Short = ot::Mac::Address::GetShort(a3);
            ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::CslTxScheduler::ChildInfo *)(v44 + 168));
            ot::Mac::CslIe::GetPeriod(v42);
            ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Child %x sent CSL period with error %d", v6, v7, v8, v9, v10, v11, Short);
          }
        }
        uint64_t v33 = *(void *)ot::Mac::RxFrame::GetTimestamp(a2);
        uint64_t v34 = v33 - ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((ot::CslTxScheduler::ChildInfo *)(v44 + 168));
        unsigned int v35 = v34 + 160 * (unsigned __int16)ot::Mac::CslIe::GetPhase(v42);
        signed int v41 = v35
            % (160
             * (unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::CslTxScheduler::ChildInfo *)(v44 + 168)));
        if (v41 > (int)(160
                       * (unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::CslTxScheduler::ChildInfo *)(v44 + 168))
                       / 2))
          ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::CslTxScheduler::ChildInfo *)(v44 + 168));
        char v12 = ot::Mac::Address::GetShort(a3);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Child %x sent CSL phase with error %d us", v13, v14, v15, v16, v17, v18, v12);
      }
      else
      {
        if (!ot::Mac::Frame::GetSecurityEnabled(a2)) {
          return v45;
        }
        if ((unsigned __int16)ot::Mac::CslIe::GetPeriod(v42) >= 0xAu)
        {
          __int16 Period = ot::Mac::CslIe::GetPeriod(v42);
          ot::CslTxScheduler::ChildInfo::SetCslPeriod(v44 + 168, Period);
          Phase  = ot::Mac::CslIe::GetPhase(v42);
          ot::CslTxScheduler::ChildInfo::SetCslPhase(v44 + 168, Phase);
          uint64_t v21 = (ot::TimerMilli *)ot::CslTxScheduler::ChildInfo::SetCslSynchronized((unsigned char *)(v44 + 168), 1);
          int Now = ot::TimerMilli::GetNow(v21);
          ot::CslTxScheduler::ChildInfo::SetCslLastHeard(v44 + 168, Now);
          Timestamp  = (uint64_t *)ot::Mac::RxFrame::GetTimestamp(a2);
          ot::CslTxScheduler::ChildInfo::SetLastRxTimestamp(v44 + 168, *Timestamp);
          uint64_t v23 = (uint64_t *)ot::Mac::RxFrame::GetTimestamp(a2);
          char v32 = ot::ToUlong(*v23);
          ot::Mac::Frame::GetSequence(a2);
          ot::Mac::CslIe::GetPeriod(v42);
          ot::Mac::CslIe::GetPhase(v42);
          ot::CslTxScheduler::ChildInfo::GetCslPhase((ot::CslTxScheduler::ChildInfo *)(v44 + 168));
          ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Timestamp=%lu Sequence=%u CslPeriod=%u CslPhase=%u TransmitPhase=%u", v24, v25, v26, v27, v28, v29, v32);
          uint64_t v30 = (ot::CslTxScheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(this);
          ot::CslTxScheduler::Update(v30);
        }
      }
    }
    if (!ot::Mac::Frame::IsAck(a2) && ot::Mac::Frame::GetSecurityEnabled(a2))
    {
      if (ot::Mac::Frame::GetType(a2) == 1 && v42)
      {
        Sequence  = ot::Mac::Frame::GetSequence(a2);
        if ((ot::CslTxScheduler::ChildInfo::IsCslPrevSnValid((ot::CslTxScheduler::ChildInfo *)(v44 + 168)) & 1) != 0
          && Sequence == ot::CslTxScheduler::ChildInfo::GetCslPrevSn((ot::CslTxScheduler::ChildInfo *)(v44 + 168)))
        {
          return 29;
        }
        else
        {
          ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((unsigned char *)(v44 + 168), 1);
          ot::CslTxScheduler::ChildInfo::SetCslPrevSn(v44 + 168, Sequence);
        }
      }
      else
      {
        ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((unsigned char *)(v44 + 168), 0);
      }
    }
  }
  return v45;
}

BOOL ot::Mac::Address::IsBroadcast(ot::Mac::Address *this)
{
  BOOL v2 = 0;
  if (*((unsigned char *)this + 8) == 1) {
    return (unsigned __int16)ot::Mac::Address::GetShort(this) == 0xFFFF;
  }
  return v2;
}

{
  return ot::Mac::Address::IsBroadcast(this);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Update(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = 0;
  if (a2 > 0) {
    unsigned __int16 v3 = a2 / 5;
  }
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::IncrementRange(a1, v3);
}

{
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Update(a1, a2);
}

uint64_t ot::Mac::Frame::GetLength(ot::Mac::Frame *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Mac::Frame::GetLength(this);
}

uint64_t ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::Mac *this, ot::Mac::TxFrame *a2, ot::Mac::RxFrame *a3)
{
  uint64_t v44 = this;
  unsigned int v43 = a2;
  uint64_t v42 = a3;
  unsigned int v41 = 8;
  unsigned __int8 v40 = 0;
  unsigned __int8 v39 = 0;
  unsigned __int8 v38 = 0;
  unsigned __int8 v37 = 0;
  unsigned int v36 = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v35);
  ot::Mac::Address::Address((ot::Mac::Address *)v34);
  uint64_t Neighbor = 0;
  char v32 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  if (!ot::Mac::Frame::GetSecurityEnabled(v42))
  {
    unsigned int v41 = 0;
    goto LABEL_31;
  }
  if (ot::Mac::Frame::IsVersion2015(v42) && !ot::Mac::Frame::ValidatePsdu(v42))
  {
    ot::Mac::Frame::GetSecurityLevel(v42, &v40);
    IgnoreError();
    if (v40 == 5)
    {
      ot::Mac::Frame::GetKeyIdMode(v42, &v37);
      IgnoreError();
      if (v37 != 8)
      {
        unsigned int v41 = 0;
        goto LABEL_31;
      }
      ot::Mac::Frame::GetKeyId(v43, &v39);
      IgnoreError();
      ot::Mac::Frame::GetKeyId(v42, &v38);
      IgnoreError();
      if (v39 == v38)
      {
        ot::Mac::Frame::GetFrameCounter(v42, &v36);
        IgnoreError();
        char v9 = ot::ToUlong(v36);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx security - Ack frame counter %lu", v10, v11, v12, v13, v14, v15, v9);
        ot::Mac::Frame::GetSrcAddr(v42, (ot::Mac::Address *)v35);
        IgnoreError();
        if (ot::Mac::Address::IsNone((ot::Mac::Address *)v35))
        {
          ot::Mac::Frame::GetDstAddr(v43, (ot::Mac::Address *)v34);
          IgnoreError();
          if (!ot::Mac::Address::IsNone((ot::Mac::Address *)v34))
          {
            uint64_t v17 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
            uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v17, (ot::Mac::Address *)v34, 1);
          }
        }
        else
        {
          uint64_t v16 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
          uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v16, (ot::Mac::Address *)v35, 1);
        }
        if (!ot::Mac::Address::IsExtended((ot::Mac::Address *)v35) && Neighbor)
        {
          ot::Neighbor::GetExtAddress(Neighbor);
          ot::Mac::Address::SetExtended((uint64_t)v35, v18);
        }
        if (ot::Mac::Address::IsExtended((ot::Mac::Address *)v35) && Neighbor)
        {
          int v29 = --v38;
          if (v29 == (ot::KeyManager::GetCurrentKeySequence(v32) & 0x7F))
          {
            SubMac  = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
            CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetCurrentMacKey(SubMac);
          }
          else
          {
            int v28 = v38;
            if (v28 == ((ot::KeyManager::GetCurrentKeySequence(v32) - 1) & 0x7F))
            {
              uint64_t v20 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetPreviousMacKey(v20);
            }
            else
            {
              int v27 = v38;
              if (v27 != ((ot::KeyManager::GetCurrentKeySequence(v32) + 1) & 0x7F)) {
                goto LABEL_31;
              }
              uint64_t v21 = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetNextMacKey(v21);
            }
          }
          if (!ot::Neighbor::IsStateValid(Neighbor)
            || (unsigned int v26 = v36, v26 >= ot::Neighbor::GetLinkAckFrameCounter(Neighbor)))
          {
            uint64_t v25 = v42;
            ot::Mac::Address::GetExtended((ot::Mac::Address *)v35);
            unsigned int v41 = ot::Mac::RxFrame::ProcessReceiveAesCcm(v25, v22, CurrentMacKey);
            if (!v41 && ot::Neighbor::IsStateValid(Neighbor)) {
              ot::Neighbor::SetLinkAckFrameCounter((uint64_t)Neighbor, v36 + 1);
            }
          }
        }
      }
    }
  }
LABEL_31:
  if (v41) {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mac::kLogModuleName, "Frame tx attempt failed, error: Enh-ACK security check fail", v3, v4, v5, v6, v7, v8, v24);
  }
  return v41;
}

uint64_t ot::Mac::Links::GetTransmitRetries(ot::Mac::Links *this)
{
  return ot::Mac::SubMac::GetTransmitRetries((ot::Mac::Links *)((char *)this + 8));
}

{
  return ot::Mac::Links::GetTransmitRetries(this);
}

uint64_t ot::Mac::SubMac::GetTransmitErrorsNoAck(ot::Mac::SubMac *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::Mac::SubMac::GetTransmitErrorsNoAck(this);
}

uint64_t ot::Mac::SubMac::GetTransmitErrorsChannelAccessFailure(ot::Mac::SubMac *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return ot::Mac::SubMac::GetTransmitErrorsChannelAccessFailure(this);
}

uint64_t ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::Mac *this, ot::Mac::RxFrame *a2, const ot::Mac::Address *a3, ot::Neighbor *a4)
{
  v160  = this;
  v159  = a2;
  v158  = a3;
  v157  = a4;
  v146  = this;
  v156  = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  v155  = 8;
  v154  = 0;
  v153  = 0;
  v152  = 0;
  v151  = 0;
  CurrentMacKey  = 0;
  v149  = 0;
  v148  = 0;
  if (ot::Mac::Frame::GetSecurityEnabled(v159))
  {
    ot::Mac::Frame::GetSecurityLevel(v159, (unsigned __int8 *)&v154 + 1);
    IgnoreError();
    if (HIBYTE(v154) == 5)
    {
      ot::Mac::Frame::GetFrameCounter(v159, &v153);
      IgnoreError();
      ot::Mac::Frame::GetKeyIdMode(v159, (unsigned __int8 *)&v154);
      IgnoreError();
      if (v157)
      {
        v138  = ot::ToUlong(v153);
        v139  = v154;
        v140  = HIBYTE(v154);
        int Rloc16 = ot::Neighbor::GetRloc16(v157);
        ot::Neighbor::GetExtAddress(v157);
        v137  = v167;
        ot::Mac::ExtAddress::ToString(v10, (ot::StringWriter *)v167);
        v142  = ot::String<(unsigned short)17>::AsCString((uint64_t)v167);
        int State = ot::Neighbor::GetState(v157);
        IsStateValid  = ot::Neighbor::IsStateValid(v157);
        v145  = &v86;
        v87  = v139;
        v88  = v140;
        v89  = (unsigned __int16)Rloc16;
        v90  = v142;
        v91  = State;
        v92  = IsStateValid;
        KeySequence  = ot::Neighbor::GetKeySequence(v157);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx security - frame counter %lu keyIdMode:%u securityLevel:%d nbr.rloc:0x%x nbr.ext:%s nbr.state:%d nbr.isStateValid:%d nbr.keSeq:%d", v11, v12, v13, v14, v15, v16, v138);
      }
      else
      {
        v87  = v154;
        v88  = HIBYTE(v154);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx security - frame counter %u keyIdMode:%u securityLevel:%d", v4, v5, v6, v7, v8, v9, v153);
      }
      v136  = v154;
      if ((_BYTE)v154)
      {
        if (v136 == 8)
        {
          if (!v157) {
            goto LABEL_45;
          }
          v148  = ot::Neighbor::IsStateValid(v157);
          ot::Mac::Frame::GetKeyId(v159, &v152);
          IgnoreError();
          v135  = --v152;
          CurrentKeySequence  = ot::KeyManager::GetCurrentKeySequence(v156);
          if (v135 == (CurrentKeySequence & 0x7F))
          {
            v151  = ot::KeyManager::GetCurrentKeySequence(v156);
            CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::Links::GetCurrentMacKey((ot::Mac::Mac *)((char *)v146 + 56), v159);
          }
          else
          {
            v134  = v152;
            char v19 = ot::KeyManager::GetCurrentKeySequence(v156);
            if (v134 == ((v19 - 1) & 0x7F))
            {
              v151  = ot::KeyManager::GetCurrentKeySequence(v156) - 1;
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::Links::GetTemporaryMacKey((ot::Mac::Mac *)((char *)v146 + 56), v159, v151);
            }
            else
            {
              v133  = v152;
              char v20 = ot::KeyManager::GetCurrentKeySequence(v156);
              if (v133 != ((v20 + 1) & 0x7F))
              {
                v129  = ot::ErrorToString(v155);
                v130  = v151;
                v131  = CurrentMacKey;
                v132  = v152;
                uint64_t v21 = ot::KeyManager::GetCurrentKeySequence(v156);
                v87  = v130;
                v88  = (uint64_t)v131;
                v89  = v132;
                v90  = v21;
                v91  = v153;
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx security error exit:%s keySequence(%d) macKey(%d) keyId(%d) keyManager.CurrentKeySeq:%d frameCounter:%u", v22, v23, v24, v25, v26, v27, (char)v129);
                goto LABEL_45;
              }
              v151  = ot::KeyManager::GetCurrentKeySequence(v156) + 1;
              CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::Mac::Links::GetTemporaryMacKey((ot::Mac::Mac *)((char *)v146 + 56), v159, v151);
            }
          }
          if (v148)
          {
            v128  = v151;
            unsigned int v28 = ot::Neighbor::GetKeySequence(v157);
            if (v128 < v28)
            {
              v123  = ot::ErrorToString(v155);
              v124  = v154;
              v125  = v151;
              v126  = ot::Neighbor::GetKeySequence(v157);
              v127  = ot::Neighbor::GetRloc16(v157);
              ot::Neighbor::GetExtAddress(v157);
              v122  = v166;
              ot::Mac::ExtAddress::ToString(v29, (ot::StringWriter *)v166);
              uint64_t v30 = ot::String<(unsigned short)17>::AsCString((uint64_t)v122);
              v87  = v124;
              v88  = v125;
              v89  = v126;
              v90  = (unsigned __int16)v127;
              v91  = v30;
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx security error exit seqnum mismatch error:%s keyIdMode:%d keySequence:%u nbr.keySequence:%u nbr.rloc16:0x%x nbr.extAddr:%s", v31, v32, v33, v34, v35, v36, (char)v123);
              goto LABEL_45;
            }
            v121  = v151;
            int v37 = ot::Neighbor::GetKeySequence(v157);
            if (v121 == v37)
            {
              v147  = 0;
              LinkFrameCounters  = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v157);
              v147  = ot::Mac::LinkFrameCounters::Get(LinkFrameCounters);
              if (v153 + 1 == v147)
              {
                v116  = ot::ErrorToString(29);
                v117  = v154;
                v118  = v153;
                v119  = v147;
                v120  = ot::Neighbor::GetRloc16(v157);
                ot::Neighbor::GetExtAddress(v157);
                v115  = v165;
                ot::Mac::ExtAddress::ToString(v39, (ot::StringWriter *)v165);
                uint64_t v40 = ot::String<(unsigned short)17>::AsCString((uint64_t)v115);
                v87  = v117;
                v88  = v118;
                v89  = v119;
                v90  = (unsigned __int16)v120;
                v91  = v40;
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx error: %s keyIdMode:%d frameCounter:%u nbr.FrameCounter:%u nbr.rloc16:0x%x nbr.extAddr:%s", v41, v42, v43, v44, v45, v46, (char)v116);
              }
              else if (v153 < v147)
              {
                v110  = ot::ErrorToString(8);
                v111  = v154;
                v112  = v153;
                v113  = v147;
                v114  = ot::Neighbor::GetRloc16(v157);
                ot::Neighbor::GetExtAddress(v157);
                v109  = v164;
                ot::Mac::ExtAddress::ToString(v47, (ot::StringWriter *)v164);
                v48  = ot::String<(unsigned short)17>::AsCString((uint64_t)v109);
                v87  = v111;
                v88  = v112;
                v89  = v113;
                v90  = (unsigned __int16)v114;
                v91  = v48;
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Rx error: %s frame counter mismatch, keyIdMode:%d frameCounter:%u nbr.FrameCounter:%u nbr.rloc16:0x%x nbr.extAddr:%s", v49, v50, v51, v52, v53, v54, (char)v110);
              }
              if (v153 + 1 == v147)
              {
                v155  = 29;
                goto LABEL_45;
              }
              if (v153 < v147) {
                goto LABEL_45;
              }
            }
          }
          ot::Mac::Address::GetExtended(v158);
          v149  = v55;
        }
        else
        {
          if (v136 != 16) {
            goto LABEL_45;
          }
          CurrentMacKey  = (ot::Mac::Mac *)((char *)v146 + 1680);
          v149  = (ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>((uint64_t)&ot::Mac::Mac::sMode2ExtAddress);
        }
      }
      else
      {
        CurrentMacKey  = (ot::Mac::KeyMaterial *)ot::KeyManager::GetKek(v156);
        ot::Mac::Address::GetExtended(v158);
        v149  = v17;
      }
      if (!ot::Mac::RxFrame::ProcessReceiveAesCcm(v159, v149, CurrentMacKey))
      {
        if (v154 == 8 && v148)
        {
          v56  = ot::Neighbor::GetKeySequence(v157);
          if (v56 != v151)
          {
            v108  = v151;
            v57  = ot::Neighbor::GetKeySequence(v157);
            if (v108 < v57)
            {
              v104  = ot::Neighbor::GetRloc16(v157);
              ot::Neighbor::GetExtAddress(v157);
              v103  = v163;
              ot::Mac::ExtAddress::ToString(v58, (ot::StringWriter *)v163);
              v105  = ot::String<(unsigned short)17>::AsCString((uint64_t)v103);
              v106  = ot::KeyManager::GetCurrentKeySequence(v156);
              v107  = v151;
              v59  = ot::Neighbor::GetKeySequence(v157);
              v87  = (unsigned __int16)v104;
              v88  = v105;
              v89  = v106;
              v90  = v107;
              v91  = v59;
              ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mac::kLogModuleName, "%s Neighbor KeySequence is lower than previous RLOC16: 0x%x, ExtAddr: %s, ourKeySeq:%u, nbrCurKeySeq:%u, nbrPrevKeySeq:%u", v60, v61, v62, v63, v64, v65, (char)"ProcessReceiveSecurity");
            }
            ot::Neighbor::SetKeySequence((uint64_t)v157, v151);
            ot::Neighbor::SetMleFrameCounter((uint64_t)v157, 0);
            v66  = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v157);
            ot::Mac::LinkFrameCounters::Reset(v66);
          }
          v67  = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(v157);
          ot::Mac::LinkFrameCounters::Set(v67, v153 + 1);
          v102  = v153 + 1;
          LinkAckFrameCounter  = ot::Neighbor::GetLinkAckFrameCounter(v157);
          if (v102 > LinkAckFrameCounter) {
            ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v157, v153 + 1);
          }
          v101  = v151;
          v69  = ot::KeyManager::GetCurrentKeySequence(v156);
          if (v101 > v69)
          {
            v97  = ot::Neighbor::GetRloc16(v157);
            ot::Neighbor::GetExtAddress(v157);
            v96  = v162;
            ot::Mac::ExtAddress::ToString(v70, (ot::StringWriter *)v162);
            v98  = ot::String<(unsigned short)17>::AsCString((uint64_t)v96);
            v99  = ot::KeyManager::GetCurrentKeySequence(v156);
            v100  = v151;
            v71  = ot::Neighbor::GetKeySequence(v157);
            v87  = (unsigned __int16)v97;
            v88  = v98;
            v89  = v99;
            v90  = v100;
            v91  = v71;
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mac::kLogModuleName, "%s Neighbor KeySequence changed RLOC16: 0x%x, ExtAddr: %s, ourKeySeq:%u, nbrCurKeySeq:%u, nbrTableKeySeq:%u", v72, v73, v74, v75, v76, v77, (char)"ProcessReceiveSecurity");
            ot::KeyManager::SetCurrentKeySequence(v156, v151);
          }
        }
        v155  = 0;
      }
    }
  }
  else
  {
    v155  = 0;
  }
LABEL_45:
  if (v155 && v157)
  {
    v95  = ot::Neighbor::GetRloc16(v157);
    ot::Neighbor::GetExtAddress(v157);
    v94  = v161;
    ot::Mac::ExtAddress::ToString(v78, (ot::StringWriter *)v161);
    v87  = ot::String<(unsigned short)17>::AsCString((uint64_t)v94);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "RX security error: Neighbor's RLOC16: 0x%x, ExtAddr: %s", v79, v80, v81, v82, v83, v84, v95);
  }
  return v155;
}

uint64_t ot::Neighbor::GetKeySequence(ot::Neighbor *this)
{
  return *((unsigned int *)this + 6);
}

{
  return ot::Neighbor::GetKeySequence(this);
}

uint64_t ot::Neighbor::GetLinkFrameCounters(ot::Neighbor *this)
{
  return (uint64_t)this + 12;
}

{
  return (uint64_t)this + 12;
}

{
  return ot::Neighbor::GetLinkFrameCounters(this);
}

{
  return ot::Neighbor::GetLinkFrameCounters(this);
}

uint64_t ot::Mac::LinkFrameCounters::Get(ot::Mac::LinkFrameCounters *this)
{
  return *(unsigned int *)this;
}

{
  return ot::Mac::LinkFrameCounters::Get(this);
}

uint64_t ot::Neighbor::SetKeySequence(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2++*(_WORD *)(this + 4) = a2;
  return this;
}

{
  return ot::Neighbor::SetKeySequence(this, a2);
}

uint64_t ot::Neighbor::SetMleFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16)  = a2;
  return this;
}

{
  return ot::Neighbor::SetMleFrameCounter(this, a2);
}

_DWORD *ot::Mac::LinkFrameCounters::Reset(ot::Mac::LinkFrameCounters *this)
{
  return ot::Mac::LinkFrameCounters::SetAll(this, 0);
}

{
  return ot::Mac::LinkFrameCounters::Reset(this);
}

_DWORD *ot::Mac::LinkFrameCounters::Set(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

{
  return ot::Mac::LinkFrameCounters::Set(this, a2);
}

uint64_t ot::Neighbor::GetLinkAckFrameCounter(ot::Neighbor *this)
{
  return *((unsigned int *)this + 5);
}

{
  return ot::Neighbor::GetLinkAckFrameCounter(this);
}

uint64_t ot::Neighbor::SetLinkAckFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2ot::Mac::TxFrame::SetTxDelayBaseTime(*(void *)this, 0) = a2;
  return this;
}

{
  return ot::Neighbor::SetLinkAckFrameCounter(this, a2);
}

BOOL ot::Mac::Frame::IsVersion2015(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsVersion2015((ot::Mac::Frame *)FrameControlField);
}

{
  return ((unsigned __int16)this & 0x3000) == 0x2000;
}

{
  return ot::Mac::Frame::IsVersion2015(this);
}

{
  return ot::Mac::Frame::IsVersion2015(this);
}

BOOL ot::Mac::Address::IsNone(ot::Mac::Address *this)
{
  return *((unsigned char *)this + 8) == 0;
}

{
  return ot::Mac::Address::IsNone(this);
}

uint64_t ot::Mac::SubMac::GetCurrentMacKey(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 72;
}

{
  return ot::Mac::SubMac::GetCurrentMacKey(this);
}

uint64_t ot::Mac::SubMac::GetPreviousMacKey(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 56;
}

{
  return ot::Mac::SubMac::GetPreviousMacKey(this);
}

uint64_t ot::Mac::SubMac::GetNextMacKey(ot::Mac::SubMac *this)
{
  return (uint64_t)this + 88;
}

{
  return ot::Mac::SubMac::GetNextMacKey(this);
}

void ot::Mac::Mac::HandleReceivedFrame(uint64_t a1, ot::Mac::Frame *a2, unsigned int a3)
{
  v69  = a1;
  v68  = a2;
  v67  = a3;
  ot::Mac::Address::Address((ot::Mac::Address *)v66);
  ot::Mac::Address::Address((ot::Mac::Address *)v65);
  v64  = 0;
  RxOnlyNeighborRouter  = 0;
  v62  = v67;
  ++*(_DWORD *)(a1 + 424);
  if (v62) {
    goto LABEL_103;
  }
  if (!v68)
  {
    v62  = 18;
    goto LABEL_103;
  }
  if ((ot::Mac::Mac::IsEnabled((ot::Mac::Mac *)a1) & 1) == 0)
  {
    v62  = 13;
    goto LABEL_103;
  }
  v62  = ot::Mac::Frame::ValidatePsdu(v68);
  if (v62) {
    goto LABEL_103;
  }
  ot::Mac::Frame::GetSrcAddr(v68, (ot::Mac::Address *)v66);
  IgnoreError();
  ot::Mac::Frame::GetDstAddr(v68, (ot::Mac::Address *)v65);
  IgnoreError();
  if (ot::Mac::Address::IsNone((ot::Mac::Address *)v66))
  {
    uint64_t Neighbor = 0;
  }
  else
  {
    uint64_t v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
    uint64_t Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v3, (ot::Mac::Address *)v66, 1);
  }
  RxOnlyNeighborRouter  = Neighbor;
  int Type = ot::Mac::Address::GetType((ot::Mac::Address *)v65);
  if (Type)
  {
    if (Type == 1)
    {
      uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
      if (ot::Mle::Mle::IsSleepyRouter(v4))
      {
        uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        IsSleepyRouter  = ot::Mle::Mle::IsSleepyRouter(v5);
        ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v65);
        ot::Mac::Address::GetShort((ot::Mac::Address *)v66);
        ot::Mac::Address::GetShort((ot::Mac::Address *)v65);
        ot::Mac::Mac::GetShortAddress((ot::Mac::Mac *)a1);
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Received frame , isSleepyRouter  = [%d], isBroadcast  = [%d], srcaddr  = [0x%04x], dstaddr  = [0x%04x], GetShortAddress  = [0x%04x]", v6, v7, v8, v9, v10, v11, IsSleepyRouter);
        if ((*(unsigned char *)a1 & 4) == 0 || !ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v65))
        {
          int Short = (unsigned __int16)ot::Mac::Address::GetShort((ot::Mac::Address *)v65);
          if (Short != (unsigned __int16)ot::Mac::Mac::GetShortAddress((ot::Mac::Mac *)a1))
          {
            uint64_t v12 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
            if (!ot::Mle::Mle::IsFullThreadDevice(v12))
            {
              v62  = 22;
              goto LABEL_103;
            }
          }
        }
      }
      else if ((*(unsigned char *)a1 & 4) == 0 || !ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v65))
      {
        v52  = (unsigned __int16)ot::Mac::Address::GetShort((ot::Mac::Address *)v65);
        if (v52 != (unsigned __int16)ot::Mac::Mac::GetShortAddress((ot::Mac::Mac *)a1))
        {
          v62  = 22;
          goto LABEL_103;
        }
      }
      if (!RxOnlyNeighborRouter && ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v65))
      {
        uint64_t v13 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        if (ot::Mle::Mle::IsFullThreadDevice(v13))
        {
          uint64_t v14 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
          RxOnlyNeighborRouter  = (ot::Neighbor *)ot::NeighborTable::FindRxOnlyNeighborRouter(v14, (const ot::Mac::Address *)v66);
        }
      }
    }
    else if (Type == 2)
    {
      ot::Mac::Address::GetExtended((ot::Mac::Address *)v65);
      v51  = v15;
      ExtAddress  = (const void *)ot::Mac::Mac::GetExtAddress((ot::Mac::Mac *)a1);
      if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(v51, ExtAddress))
      {
        v62  = 22;
        goto LABEL_103;
      }
    }
  }
  if (!ot::Mac::Frame::GetDstPanId(v68, &v64) && v64 != 0xFFFF && v64 != *(unsigned __int16 *)(a1 + 8))
  {
    v62  = 22;
    goto LABEL_103;
  }
  int v50 = ot::Mac::Address::GetType((ot::Mac::Address *)v66);
  if (v50)
  {
    if (v50 == 1)
    {
      char v17 = ot::Mac::Address::GetShort((ot::Mac::Address *)v66);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Received frame from short address 0x%04x", v18, v19, v20, v21, v22, v23, v17);
      if (!RxOnlyNeighborRouter)
      {
        v62  = 19;
        goto LABEL_103;
      }
      ot::Neighbor::GetExtAddress(RxOnlyNeighborRouter);
      ot::Mac::Address::SetExtended((uint64_t)v66, v24);
    }
    else if (v50 != 2)
    {
      goto LABEL_48;
    }
    ot::Mac::Address::GetExtended((ot::Mac::Address *)v66);
    uint64_t v49 = v25;
    uint64_t v26 = (const void *)ot::Mac::Mac::GetExtAddress((ot::Mac::Mac *)a1);
    if (!ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v49, v26))
    {
      v62  = 20;
      goto LABEL_103;
    }
    v48  = v68;
    ot::Mac::Address::GetExtended((ot::Mac::Address *)v66);
    v62  = ot::Mac::Filter::ApplyToRxFrame((ot::Mac::Filter *)(a1 + 1356), v48, v27, RxOnlyNeighborRouter);
    if (v62) {
      goto LABEL_103;
    }
  }
LABEL_48:
  __int16 Length = ot::Mac::Frame::GetLength(v68);
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Update(a1 + 724, Length);
  Lqunsigned __int8 i = ot::Mac::RxFrame::GetLqi(v68);
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Update(a1 + 932, Lqi);
  if (ot::Mac::Address::IsBroadcast((ot::Mac::Address *)v65)) {
    ++*(_DWORD *)(a1 + 432);
  }
  else {
    ++*(_DWORD *)(a1 + 428);
  }
  v62  = ot::Mac::Mac::ProcessReceiveSecurity((ot::Mac::Mac *)a1, v68, (const ot::Mac::Address *)v66, RxOnlyNeighborRouter);
  if (v62 && (v62 != 29 || *(unsigned char *)(a1 + 1) != 6)) {
    goto LABEL_103;
  }
  if (!*(unsigned char *)(a1 + 1) && ot::Mac::Mac::IsCslEnabled((ot::Mac::Mac *)a1))
  {
    v61  = 0;
    v61  = *(void *)ot::Mac::RxFrame::GetTimestamp(v68) + 32;
    SubMac  = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Links *)(a1 + 56));
    v60  = v61 - ot::Mac::SubMac::GetLastCslSampleTime(SubMac);
    if (*(_DWORD *)(a1 + 500)) {
      signed int v47 = ot::Min<int>(*(_DWORD *)(a1 + 492), v60);
    }
    else {
      signed int v47 = v60;
    }
    *(_DWORD *)(a1 + 49ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v47;
    *(_DWORD *)(a1 + 496)  = ot::Max<int>(*(_DWORD *)(a1 + 496), v60);
    *(void *)(a1 + 504) += v60;
    ++*(_DWORD *)(a1 + 500);
  }
  if ((unsigned __int16)ot::Mac::Frame::GetVersion(v68) == 0x2000)
  {
    v62  = ot::Mac::Mac::ProcessCsl((ot::Mac::Mac *)a1, v68, (const ot::Mac::Address *)v66);
    if (v62) {
      goto LABEL_103;
    }
  }
  uint64_t v31 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)a1);
  ot::DataPollSender::ProcessRxFrame(v31, v68);
  if (RxOnlyNeighborRouter)
  {
    LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(RxOnlyNeighborRouter);
    Rssunsigned __int8 i = ot::Mac::RxFrame::GetRssi(v68);
    ot::LinkQualityInfo::AddRss(LinkInfo, Rssi);
    unsigned __int8 v45 = ot::Mac::Frame::GetType(v68);
    unsigned __int8 v46 = ot::Mac::RxFrame::GetLqi(v68);
    char v33 = ot::Mac::RxFrame::GetRssi(v68);
    ot::Neighbor::AggregateLinkMetrics(RxOnlyNeighborRouter, 0, v45, v46, v33);
    if (ot::Mac::Frame::GetSecurityEnabled(v68))
    {
      v59  = 0;
      ot::Mac::Frame::GetKeyIdMode(v68, &v59);
      IgnoreError();
      if (v59 == 8)
      {
        int State = ot::Neighbor::GetState(RxOnlyNeighborRouter);
        if (State == 1 || State == 6)
        {
          if (!ot::Mac::Frame::IsDataRequestCommand(v68))
          {
            v62  = 2;
            goto LABEL_103;
          }
        }
        else
        {
          if (State != 7)
          {
            v62  = 19;
            goto LABEL_103;
          }
          if ((ot::Neighbor::GetRloc16(RxOnlyNeighborRouter) & 0x3FF) != 0)
          {
            char v34 = ot::Mac::RxFrame::GetRssi(v68);
            ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update(a1 + 1244, v34);
          }
          else
          {
            char v35 = ot::Mac::RxFrame::GetRssi(v68);
            ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update(a1 + 1188, v35);
          }
        }
        if (ot::Mac::Frame::GetType(v68) == 1 && !ot::Neighbor::IsRxOnWhenIdle(RxOnlyNeighborRouter))
        {
          IsEnhancedKeepAliveSupported  = ot::Neighbor::IsEnhancedKeepAliveSupported(RxOnlyNeighborRouter);
          if (IsEnhancedKeepAliveSupported)
          {
            uint64_t v42 = RxOnlyNeighborRouter;
            int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsEnhancedKeepAliveSupported);
            ot::Neighbor::SetLastHeard((uint64_t)v42, Now);
          }
        }
      }
    }
  }
  int v41 = *(unsigned __int8 *)(a1 + 1);
  if (v41 == 1)
  {
    if (!ot::Mac::Frame::GetType(v68))
    {
      ++*(_DWORD *)(a1 + 444);
      ot::Mac::Mac::ReportActiveScanResult(a1, v68);
      goto LABEL_103;
    }
  }
  else if (v41 != 2)
  {
    if (v41 == 6)
    {
      if (!ot::Mac::Address::IsNone((ot::Mac::Address *)v65))
      {
        ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 304));
        ot::Mac::Mac::FinishOperation((ot::Mac::Mac *)a1);
        ot::Mac::Mac::PerformNextOperation((ot::Mac::Mac *)a1);
      }
      if (v62) {
        goto LABEL_103;
      }
    }
    goto LABEL_93;
  }
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a1 + 10))
  {
    ++*(_DWORD *)(a1 + 452);
    goto LABEL_103;
  }
LABEL_93:
  int v40 = ot::Mac::Frame::GetType(v68);
  if (v40)
  {
    if (v40 == 1)
    {
      ++*(_DWORD *)(a1 + 436);
    }
    else
    {
      if (v40 != 3)
      {
        ++*(_DWORD *)(a1 + 452);
        goto LABEL_103;
      }
      if (ot::Mac::Mac::HandleMacCommand((ot::Mac::Mac *)a1, v68))
      {
        v62  = 0;
        goto LABEL_103;
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 444);
  }
  ot::Mac::Mac::LogFrameRx((ot::Mac::Mac *)a1, v68);
  int v37 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
  ot::MeshForwarder::HandleReceivedFrame(v37, v68);
  ot::Mac::Mac::UpdateIdleMode((ot::Mac::Mac *)a1);
LABEL_103:
  if (v62)
  {
    ot::Mac::Mac::LogFrameRxFailure(a1, v68, v62);
    if (v62 <= 8)
    {
      uint64_t v39 = v62 - 8;
      char v38 = 0;
    }
    else
    {
      uint64_t v39 = v62 - 8;
      char v38 = 1;
    }
    if ((v38 & 1) == 0)
    {
      switch(v39)
      {
        case 0:
          ++*(_DWORD *)(a1 + 480);
          return;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
          break;
        case 9:
          ++*(_DWORD *)(a1 + 484);
          return;
        case 10:
          ++*(_DWORD *)(a1 + 468);
          return;
        case 11:
          ++*(_DWORD *)(a1 + 472);
          return;
        case 12:
          ++*(_DWORD *)(a1 + 476);
          return;
        case 13:
          ++*(_DWORD *)(a1 + 456);
          return;
        case 14:
          ++*(_DWORD *)(a1 + 460);
          return;
        case 21:
          ++*(_DWORD *)(a1 + 464);
          return;
        default:
          JUMPOUT(0);
      }
    }
    ++*(_DWORD *)(a1 + 488);
  }
}

uint64_t ot::Mac::Address::GetType(ot::Mac::Address *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return ot::Mac::Address::GetType(this);
}

BOOL ot::Equatable<ot::Mac::ExtAddress>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return ot::Equatable<ot::Mac::ExtAddress>::operator==(a1, a2);
}

BOOL ot::Unequatable<ot::Mac::ExtAddress>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Mac::ExtAddress>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Mac::ExtAddress>::operator!=(a1, a2);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Update(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = 0;
  if (a2 > 0) {
    unsigned __int16 v3 = a2 / 4;
  }
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::IncrementRange(a1, v3);
}

{
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Update(a1, a2);
}

BOOL ot::Mac::Mac::IsCslEnabled(ot::Mac::Mac *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  BOOL v4 = 0;
  if (!ot::Mle::Mle::IsRxOnWhenIdle(v1)) {
    return ot::Mac::Mac::IsCslCapable(this);
  }
  return v4;
}

uint64_t ot::Mac::RxFrame::GetTimestamp(ot::Mac::RxFrame *this)
{
  return (uint64_t)this + 16;
}

{
  return ot::Mac::RxFrame::GetTimestamp(this);
}

uint64_t ot::Mac::SubMac::GetLastCslSampleTime(ot::Mac::SubMac *this)
{
  return ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 168))
       - 160 * *((unsigned __int16 *)this + 76);
}

{
  return ot::Mac::SubMac::GetLastCslSampleTime(this);
}

uint64_t ot::Min<int>(unsigned int a1, unsigned int a2)
{
  if ((int)a1 >= (int)a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return ot::Min<int>(a1, a2);
}

uint64_t ot::Max<int>(unsigned int a1, unsigned int a2)
{
  if ((int)a1 >= (int)a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return ot::Max<int>(a1, a2);
}

uint64_t ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = 0;
  if (a2 < -41) {
    unsigned __int16 v3 = -(a2 + 41) / 5;
  }
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::IncrementRange(a1, v3);
}

{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update(a1, a2);
}

uint64_t ot::Mac::Mac::HandleMacCommand(ot::Mac::Mac *this, ot::Mac::RxFrame *a2)
{
  uint64_t v15 = this;
  uint64_t v14 = a2;
  char v13 = 0;
  unsigned __int8 v12 = 0;
  ot::Mac::Frame::GetCommandId(a2, &v12);
  IgnoreError();
  if (v12 == 4)
  {
    ++*((_DWORD *)this + 110);
    uint64_t v8 = (ot::DataPollHandler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollHandler>(this);
    ot::DataPollHandler::HandleDataPoll(v8, v14);
    char v13 = 1;
  }
  else if (v12 == 7)
  {
    ++*((_DWORD *)this + 112);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mac::kLogModuleName, "Received Beacon Request", v2, v3, v4, v5, v6, v7, (char)this);
    if (ot::Mac::Mac::ShouldSendBeacon(v11)) {
      ot::Mac::Mac::StartOperation((uint64_t)v11, 3);
    }
    char v13 = 1;
  }
  else
  {
    ++*((_DWORD *)this + 113);
  }
  return v13 & 1;
}

void ot::Mac::Mac::LogFrameRx(ot::Mac::Mac *this, const ot::Mac::RxFrame *a2)
{
  ot::Mac::Frame::ToInfoString(a2, (ot::StringWriter *)v9);
  char v2 = ot::String<(unsigned short)150>::AsCString((uint64_t)v9);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mac::kLogModuleName, "Frame rx, %s", v3, v4, v5, v6, v7, v8, v2);
}

void ot::Mac::Mac::LogFrameRxFailure(uint64_t a1, ot::Mac::Frame *a2, int a3)
{
  if (a3 == 11 || a3 == 18 || (a3 == 22 || a3 == 21 ? (char v3 = 0) : (char v3 = 1), (v3 & 1) == 0)) {
    unsigned __int8 v16 = 5;
  }
  else {
    unsigned __int8 v16 = 4;
  }
  if (a3 != 17)
  {
    if (a2)
    {
      char v15 = ot::ErrorToString(a3);
      ot::Mac::Frame::ToInfoString(a2, (ot::StringWriter *)v18);
      ot::String<(unsigned short)150>::AsCString((uint64_t)v18);
      ot::Logger::LogInModule((ot *)&ot::Mac::kLogModuleName, v16, "Frame rx failed, error:%s, %s", v10, v11, v12, v13, v14, v15);
    }
    else
    {
      char v4 = ot::ErrorToString(a3);
      ot::Logger::LogInModule((ot *)&ot::Mac::kLogModuleName, v16, "Frame rx failed, error:%s", v5, v6, v7, v8, v9, v4);
    }
  }
}

void ot::Mac::Mac::SetPromiscuous(ot::Mac::Mac *this, char a2)
{
  char v5 = a2 & 1;
  *(unsigned char *)this  = *(unsigned char *)this & 0xF7 | (8 * (a2 & 1));
  char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::SetPromiscuous(v2, v5 & 1);
  LOBYTE(v++*(_WORD *)(this + 4) = 1;
  if ((*(unsigned char *)this & 4) == 0) {
    int v4 = (*(unsigned __int8 *)this >> 3) & 1;
  }
  ot::Mac::Links::SetRxOnWhenBackoff((ot::Mac::Mac *)((char *)this + 56), v4 & 1);
  ot::Mac::Mac::UpdateIdleMode(this);
}

uint64_t ot::Mac::Mac::GetDirectRetrySuccessHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)this + 24) < 0x10u) {
    *a2  = *((unsigned char *)this + 24) + 1;
  }
  else {
    *a2  = 16;
  }
  return (uint64_t)this + 520;
}

uint64_t ot::Mac::Mac::GetIndirectRetrySuccessHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  if (*((unsigned char *)this + 25)) {
    *a2  = 1;
  }
  else {
    *a2  = *((unsigned char *)this + 25) + 1;
  }
  return (uint64_t)this + 584;
}

void *ot::Mac::Mac::ResetRetrySuccessHistogram(ot::Mac::Mac *this)
{
  return memset((char *)this + 520, 0, 0x44uLL);
}

uint64_t ot::Mac::Mac::ComputeLinkMargin(ot::Mac::Mac *this, char a2)
{
  char NoiseFloor = ot::Mac::Mac::GetNoiseFloor(this);
  return ot::ComputeLinkMargin((ot *)NoiseFloor, a2);
}

uint64_t ot::Mac::Mac::GetDirectErrorNoAckHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)this + 24) < 0x11u) {
    *a2  = *((unsigned char *)this + 24) + 2;
  }
  else {
    *a2  = 17;
  }
  return (uint64_t)this + 588;
}

uint64_t ot::Mac::Mac::GetDirectErrorChannelAccessFailureHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)this + 24) < 0x11u) {
    *a2  = *((unsigned char *)this + 24) + 2;
  }
  else {
    *a2  = 17;
  }
  return (uint64_t)this + 656;
}

void *ot::Mac::Mac::ResetTxErrorHistogram(ot::Mac::Mac *this)
{
  return memset((char *)this + 588, 0, 0x88uLL);
}

void ot::Mac::Mac::GetTxSizeHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetData();
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount()
{
  return 26;
}

{
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount();
}

void ot::Mac::Mac::GetRxSizeHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetData();
}

void ot::Mac::Mac::GetRxLqiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetCount();
  ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetData();
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetCount()
{
  return 64;
}

{
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetCount();
}

void ot::Mac::Mac::GetRouterRssiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData();
}

uint64_t ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount()
{
  return 14;
}

{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
}

void ot::Mac::Mac::GetEndDeviceRssiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData();
}

uint64_t ot::Mac::Mac::UpdateJoinerRssiHistogram(ot::Mac::Mac *this, char a2)
{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Update((uint64_t)this + 1300, a2);
}

void ot::Mac::Mac::GetJoinerRssiHistogram(ot::Mac::Mac *this, unsigned __int8 *a2)
{
  *a2  = ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetCount();
  ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData();
}

void *ot::Mac::Mac::ClearJoinerRssiHistograms(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear((char *)this + 1300);
}

void *ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear(void *a1)
{
  return memset(a1, 0, 0x38uLL);
}

{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear(a1);
}

void *ot::Mac::Mac::ClearNeighborRssiHistograms(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::Clear((char *)this + 1244);
}

void *ot::Mac::Mac::ClearSizeHistograms(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear((char *)this + 828);
}

void *ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear(void *a1)
{
  return memset(a1, 0, 0x68uLL);
}

{
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::Clear(a1);
}

void *ot::Mac::Mac::ClearLqiHistogram(ot::Mac::Mac *this)
{
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear((char *)this + 932);
}

void *ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear(void *a1)
{
  return memset(a1, 0, 0x100uLL);
}

{
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::Clear(a1);
}

uint64_t ot::Mac::TxFrame::GetAirtime(ot::Mac::TxFrame *this)
{
  return *((unsigned int *)this + 13);
}

{
  return ot::Mac::TxFrame::GetAirtime(this);
}

uint64_t ot::Mac::TxFrame::GetIFS(ot::Mac::TxFrame *this)
{
  return *((unsigned int *)this + 12);
}

{
  return ot::Mac::TxFrame::GetIFS(this);
}

uint64_t ot::Mac::TxFrame::GetRCPTimeStamp(ot::Mac::TxFrame *this)
{
  return *((unsigned int *)this + 15);
}

{
  return ot::Mac::TxFrame::GetRCPTimeStamp(this);
}

uint64_t ot::Mac::Mac::SetMleAdvTxNum(ot::Mac::Mac *this, unsigned __int8 a2)
{
  unsigned int v3 = 0;
  if (a2)
  {
    if (a2 <= 0xFu) {
      *((unsigned char *)this + 26)  = a2;
    }
    else {
      return 7;
    }
  }
  else
  {
    return 7;
  }
  return v3;
}

uint64_t ot::Mac::Links::WedPresent(ot::Mac::Links *this, char a2)
{
  return ot::Mac::SubMac::WedPresent((uint64_t)this + 8, a2 & 1);
}

{
  return ot::Mac::Links::WedPresent(this, a2);
}

BOOL ot::Mle::Mle::IsCslPeripheralDetached(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 384) == 0;
}

{
  return ot::Mle::Mle::IsCslPeripheralDetached(this);
}

BOOL ot::Mac::Links::UpdateCsl(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3, unsigned __int16 a4, uint64_t a5, _DWORD *a6)
{
  return ot::Mac::SubMac::UpdateCsl(a1 + 8, a2, a3, a4, a5, a6);
}

{
  return ot::Mac::Links::UpdateCsl(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslPeriod(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslPeriod(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslPhase(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 1ot::Mac::TxFrame::SetTxDelayBaseTime(*(void *)this, 0) = a2;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslPhase(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetLastRxTimestamp(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16)  = a2;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetLastRxTimestamp(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslChannel(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslChannel(this, a2);
}

unsigned char *ot::CslTxScheduler::ChildInfo::SetCslSynchronized(unsigned char *this, char a2)
{
  *this  = *this & 0xBF | ((a2 & 1) << 6);
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslSynchronized(this, a2);
}

void ot::Mac::Mac::SetCslChannel(ot::Mac::Mac *this, char a2)
{
  *((unsigned char *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  ot::Mac::Mac::UpdateCsl(this, 0);
}

void ot::Mac::Mac::SetCslPeriod(ot::Mac::Mac *this, __int16 a2)
{
  *((_WORD *)this + 17)  = a2;
  ot::Mac::Mac::UpdateCsl(this, 0);
}

void ot::Mac::Mac::SetDataPollTimeoutCoex(ot::Mac::Mac *this, int a2)
{
  ot::Mac::kDataPollTimeoutCoex  = a2;
}

void ot::Mac::Mac::SetCslParentAccuracy(ot::Mac::Mac *this, const ot::Mac::CslAccuracy *a2)
{
  SubMac  = (ot::Mac::SubMac *)ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
  ot::Mac::SubMac::SetCslParentAccuracy(SubMac, a2);
  ot::Mac::Mac::UpdateCsl(this, 0);
}

uint64_t ot::Mac::SubMac::SetCslParentAccuracy(ot::Mac::SubMac *this, const ot::Mac::CslAccuracy *a2)
{
  *((_WORD *)this + 8ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_WORD *)a2;
  Instance  = ot::InstanceLocator::GetInstance(this);
  ClockAccuracy  = ot::Mac::CslAccuracy::GetClockAccuracy((ot::Mac::SubMac *)((char *)this + 176));
  otPlatRadioBrcmSetCslParentClockAccuracy((uint64_t)Instance, ClockAccuracy, v3, v4, v5, v6, v7, v8);
  uint64_t v19 = ot::InstanceLocator::GetInstance(this);
  Uncertainty  = ot::Mac::CslAccuracy::GetUncertainty((ot::Mac::SubMac *)((char *)this + 176));
  return otPlatRadioBrcmSetCslParentUncertainty((uint64_t)v19, Uncertainty, v10, v11, v12, v13, v14, v15);
}

{
  return ot::Mac::SubMac::SetCslParentAccuracy(this, a2);
}

BOOL ot::Mac::Mac::IsCslCapable(ot::Mac::Mac *this)
{
  Csl__int16 Period = ot::Mac::Mac::GetCslPeriod(this);
  if (v2 | (CslPeriod == 0)) {
    char v3 = 1;
  }
  else {
    char v3 = 0;
  }
  BOOL v6 = 0;
  if ((v3 & 1) == 0) {
    return ot::Mac::Mac::IsCslSupported(this);
  }
  return v6;
}

BOOL ot::Mac::Mac::IsCslSupported(ot::Mac::Mac *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsChild(v1))
  {
    char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v2);
    return ot::Neighbor::IsEnhancedKeepAliveSupported(Parent);
  }
  else
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    return ot::Mle::Mle::IsCslPeripheralAttached(v4);
  }
}

BOOL ot::Mac::Mac::IsCstEnabled(ot::Mac::Mac *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  BOOL v4 = 0;
  if (ot::Mle::Mle::IsRouterOrLeader(v1)) {
    return ot::Mac::Mac::IsCslEnabled(this);
  }
  return v4;
}

uint64_t ot::Mac::Mac::SetWorChannel(uint64_t this, char a2)
{
  *(unsigned char *)(this + 36)  = a2;
  return this;
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslPeriod(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslPeriod(this);
}

uint64_t ot::Mac::CslIe::GetPeriod(ot::Mac::CslIe *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*((unsigned __int16 *)this + 1));
}

{
  return ot::Mac::CslIe::GetPeriod(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp(ot::CslTxScheduler::ChildInfo *this)
{
  return *((void *)this + 2);
}

{
  return ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp(this);
}

uint64_t ot::Mac::CslIe::GetPhase(ot::Mac::CslIe *this)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)this);
}

{
  return ot::Mac::CslIe::GetPhase(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslLastHeard(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return result;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslLastHeard(result, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslPhase(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslPhase(this);
}

BOOL ot::Mac::Frame::IsAck(ot::Mac::Frame *this)
{
  return ot::Mac::Frame::GetType(this) == 2;
}

{
  return ot::Mac::Frame::IsAck(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::IsCslPrevSnValid(ot::CslTxScheduler::ChildInfo *this)
{
  return (*(unsigned __int8 *)this >> 7) & 1;
}

{
  return ot::CslTxScheduler::ChildInfo::IsCslPrevSnValid(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslPrevSn(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslPrevSn(this);
}

unsigned char *ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid(unsigned char *this, char a2)
{
  *this  = *this & 0x7F | ((a2 & 1) << 7);
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid(this, a2);
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslPrevSn(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1)  = a2;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslPrevSn(this, a2);
}

uint64_t ot::Mac::HeaderIe::GetLength(ot::Mac::HeaderIe *this)
{
  return *(unsigned char *)this & 0x7F;
}

{
  return ot::Mac::HeaderIe::GetLength(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::LinkMetrics::Initiator>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(a1);
}

void ot::Mac::Mac::SetRadioFilterEnabled(ot::Mac::Mac *this, char a2)
{
  char v4 = a2 & 1;
  SubMac  = ot::Mac::Links::GetSubMac((ot::Mac::Mac *)((char *)this + 56));
  ot::Mac::SubMac::SetRadioFilterEnabled(SubMac, v4 & 1);
  ot::Mac::Mac::UpdateIdleMode(this);
}

uint64_t ot::Mac::SubMac::SetRadioFilterEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16)  = *(unsigned char *)(this + 16) & 0xFD | (2 * (a2 & 1));
  return this;
}

{
  return ot::Mac::SubMac::SetRadioFilterEnabled(this, a2);
}

_DWORD *ot::Mac::ChannelMask::ChannelMask(_DWORD *this)
{
  *this  = 0;
  return this;
}

void ot::Mac::Links::SetShortAddress(ot::Mac::Links *this, __int16 a2)
{
}

{
  ot::Mac::Links::SetShortAddress(this, a2);
}

ot::MeshCoP::NameData *ot::MeshCoP::NameData::NameData(ot::MeshCoP::NameData *this, const char *a2, char a3)
{
  return this;
}

{
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)this, (uint64_t)a2, a3);
  return this;
}

uint64_t ot::Mac::SubMac::SetRxOnWhenBackoff(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16)  = *(unsigned char *)(this + 16) & 0xFE | a2 & 1;
  return this;
}

{
  return ot::Mac::SubMac::SetRxOnWhenBackoff(this, a2);
}

uint64_t ot::Mac::TxFrame::SetIsSecurityProcessed(uint64_t this, char a2)
{
  *(unsigned char *)(this + 45)  = *(unsigned char *)(this + 45) & 0xEF | (16 * (a2 & 1));
  return this;
}

{
  return ot::Mac::TxFrame::SetIsSecurityProcessed(this, a2);
}

uint64_t ot::Mac::TxFrame::SetCslIePresent(uint64_t this, char a2)
{
  *(unsigned char *)(this + 45)  = *(unsigned char *)(this + 45) & 0xF7 | (8 * (a2 & 1));
  return this;
}

{
  return ot::Mac::TxFrame::SetCslIePresent(this, a2);
}

BOOL ot::Mac::Frame::IsAckRequest(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 32, 0x4000) != 0;
}

{
  return ot::Mac::Frame::IsAckRequest(this);
}

uint64_t ot::Mac::SubMac::GetTransmitRetries(ot::Mac::SubMac *this)
{
  return *((unsigned __int8 *)this + 5);
}

{
  return ot::Mac::SubMac::GetTransmitRetries(this);
}

uint64_t ot::Mac::CslAccuracy::GetClockAccuracy(ot::Mac::CslAccuracy *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Mac::CslAccuracy::GetClockAccuracy(this);
}

uint64_t ot::Mac::CslAccuracy::GetUncertainty(ot::Mac::CslAccuracy *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Mac::CslAccuracy::GetUncertainty(this);
}

uint64_t ot::TaskletIn<ot::Mac::Mac,&ot::Mac::Mac::PerformNextOperation>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mac::Mac::PerformNextOperation)(v2);
}

uint64_t ot::TimerMilliIn<ot::Mac::Mac,&ot::Mac::Mac::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mac::Mac::HandleTimer)(v2);
}

BOOL ot::Mac::ChannelMask::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

{
  return ot::Mac::ChannelMask::operator==(a1, a2);
}

uint64_t ot::Instance::Get<ot::DataPollHandler>(uint64_t a1)
{
  return a1 + 90216;
}

{
  return ot::Instance::Get<ot::DataPollHandler>(a1);
}

uint64_t ot::Instance::Get<ot::WakeupTxScheduler>(uint64_t a1)
{
  return a1 + 90648;
}

{
  return ot::Instance::Get<ot::WakeupTxScheduler>(a1);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::IncrementRange(uint64_t result, unsigned __int16 a2)
{
  if (a2 >= 0x1Au) {
    int v2 = 25;
  }
  else {
    int v2 = a2;
  }
  ++*(_DWORD *)(result + 4 * v2);
  return result;
}

{
  return ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::IncrementRange(result, a2);
}

uint64_t ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::IncrementRange(uint64_t result, unsigned __int16 a2)
{
  if (a2 >= 0x40u) {
    int v2 = 63;
  }
  else {
    int v2 = a2;
  }
  ++*(_DWORD *)(result + 4 * v2);
  return result;
}

{
  return ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::IncrementRange(result, a2);
}

uint64_t ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::IncrementRange(uint64_t result, unsigned __int16 a2)
{
  if (a2 >= 0xEu) {
    int v2 = 13;
  }
  else {
    int v2 = a2;
  }
  ++*(_DWORD *)(result + 4 * v2);
  return result;
}

{
  return ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::IncrementRange(result, a2);
}

uint64_t otMeshDiagDiscoverTopology(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    __assert_rtn("otMeshDiagDiscoverTopology", "mesh_diag_api.cpp", 51, "(aConfig) != nullptr");
  }
  uint64_t v4 = ot::AsCoreType<otInstance>(a1);
  uint64_t v5 = ot::Instance::Get<ot::Utils::MeshDiag>(v4);
  return ot::Utils::MeshDiag::DiscoverTopology(v5, a2, a3, a4);
}

void otMeshDiagCancel(uint64_t a1)
{
  uint64_t v1 = ot::AsCoreType<otInstance>(a1);
  int v2 = (ot::Utils::MeshDiag *)ot::Instance::Get<ot::Utils::MeshDiag>(v1);
  ot::Utils::MeshDiag::Cancel(v2);
}

uint64_t otMeshDiagGetNextIp6Address(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ot::Utils::MeshDiag::Ip6AddrIterator *)ot::AsCoreType<otMeshDiagIp6AddrIterator>(a1);
  int v2 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  return ot::Utils::MeshDiag::Ip6AddrIterator::GetNextAddress(v4, v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMeshDiagIp6AddrIterator>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t otMeshDiagGetNextChildInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ot::AsCoreType<otMeshDiagChildIterator>(a1);
  int v2 = (unsigned __int16 *)ot::AsCoreType<otMeshDiagChildInfo>(a2);
  return ot::Utils::MeshDiag::ChildIterator::GetNextChildInfo(v4, v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMeshDiagChildIterator>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otMeshDiagChildInfo>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

unsigned char *ot::Mac::Filter::Filter(unsigned char *this)
{
  *this  = 0;
  this[1]  = 127;
  for (unsigned __int8 i = this + 2; i != this + 322; i += 10)
  {
    *unsigned __int8 i = 0;
    i[1]  = 127;
  }
  return this;
}

ot::Mac::Filter *ot::Mac::Filter::Filter(ot::Mac::Filter *this)
{
  return this;
}

char *ot::Mac::Filter::FindEntry(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v5 = 0;
  uint64_t v4 = (char *)this + 2;
  char v3 = (char *)this + 322;
  while (v4 != v3)
  {
    if (ot::Mac::Filter::FilterEntry::IsInUse((ot::Mac::Filter::FilterEntry *)v4)
      && ot::Equatable<ot::Mac::ExtAddress>::operator==(a2, v4 + 2))
    {
      return v4;
    }
    v4 += 10;
  }
  return (char *)v5;
}

BOOL ot::Mac::Filter::FilterEntry::IsInUse(ot::Mac::Filter::FilterEntry *this)
{
  BOOL v2 = 1;
  if ((*(unsigned char *)this & 1) == 0) {
    return *((unsigned char *)this + 1) != 127;
  }
  return v2;
}

{
  return ot::Mac::Filter::FilterEntry::IsInUse(this);
}

ot::Mac::Filter::FilterEntry *ot::Mac::Filter::FindAvailableEntry(ot::Mac::Filter *this)
{
  uint64_t v4 = 0;
  char v3 = (ot::Mac::Filter *)((char *)this + 2);
  BOOL v2 = (ot::Mac::Filter *)((char *)this + 322);
  while (v3 != v2)
  {
    if (!ot::Mac::Filter::FilterEntry::IsInUse(v3)) {
      return v3;
    }
    char v3 = (ot::Mac::Filter::FilterEntry *)((char *)v3 + 10);
  }
  return (ot::Mac::Filter::FilterEntry *)v4;
}

uint64_t ot::Mac::Filter::AddAddress(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  unsigned int v6 = 0;
  ot::Mac::Filter::FindEntry(this, a2);
  AvailableEntry  = v2;
  if (v2) {
    goto LABEL_5;
  }
  AvailableEntry  = ot::Mac::Filter::FindAvailableEntry(this);
  if (AvailableEntry)
  {
    *(void *)((char *)AvailableEntry + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(void *)a2;
LABEL_5:
    *(unsigned char *)AvailableEntry  = 1;
    return v6;
  }
  return 3;
}

void ot::Mac::Filter::FindEntry(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  ot::AsConst<ot::Mac::Filter>();
  ot::Mac::Filter::FindEntry(v2, a2);
  ot::AsNonConst<ot::Mac::Filter::FilterEntry>();
}

{
  ot::Mac::Filter::FindEntry(this, a2);
}

void ot::Mac::Filter::RemoveAddress(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  ot::Mac::Filter::FindEntry(this, a2);
  if (v2) {
    *BOOL v2 = 0;
  }
}

uint64_t ot::Mac::Filter::ClearAddresses(uint64_t this)
{
  for (unsigned __int8 i = (unsigned char *)(this + 2); i != (unsigned char *)(this + 322); i += 10)
    *unsigned __int8 i = 0;
  return this;
}

uint64_t ot::Mac::Filter::GetNextAddress(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 23;
  while (1)
  {
    int v4 = *a2;
    if (v4 >= (unsigned __int16)ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>()) {
      break;
    }
    uint64_t v6 = a1 + 2 + 10 * *a2;
    if (*(unsigned char *)v6)
    {
      *(void *)a3  = *(void *)(v6 + 2);
      *(unsigned char *)(a3 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(unsigned char *)(v6 + 1);
      unsigned int v7 = 0;
      ++*a2;
      return v7;
    }
    ++*a2;
  }
  return v7;
}

uint64_t ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>()
{
  return 32;
}

{
  return ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>();
}

uint64_t ot::Mac::Filter::AddRssIn(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2, char a3)
{
  unsigned int v7 = 0;
  ot::Mac::Filter::FindEntry(this, a2);
  AvailableEntry  = v3;
  if (v3) {
    goto LABEL_5;
  }
  AvailableEntry  = ot::Mac::Filter::FindAvailableEntry(this);
  if (AvailableEntry)
  {
    *(void *)((char *)AvailableEntry + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(void *)a2;
LABEL_5:
    *((unsigned char *)AvailableEntry + 1)  = a3;
    return v7;
  }
  return 3;
}

void ot::Mac::Filter::RemoveRssIn(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2)
{
  ot::Mac::Filter::FindEntry(this, a2);
  if (v2) {
    *(unsigned char *)(v2 + 1)  = 127;
  }
}

uint64_t ot::Mac::Filter::ClearAllRssIn(uint64_t this)
{
  for (uint64_t i = this + 2; i != this + 322; i += 10)
    *(unsigned char *)(i + 1)  = 127;
  *(unsigned char *)(this + 1)  = 127;
  return this;
}

uint64_t ot::Mac::Filter::GetNextRssIn(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v9 = 23;
  while (1)
  {
    int v6 = *a2;
    if (v6 >= (unsigned __int16)ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>()) {
      break;
    }
    uint64_t v8 = a1 + 2 + 10 * *a2;
    if (*(unsigned char *)(v8 + 1) != 127)
    {
      *(void *)a3  = *(void *)(v8 + 2);
      *(unsigned char *)(a3 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(unsigned char *)(v8 + 1);
      unsigned int v9 = 0;
      ++*a2;
      return v9;
    }
    ++*a2;
  }
  int v5 = *a2;
  if (v5 == (unsigned __int16)ot::GetArrayLength<ot::Mac::Filter::FilterEntry,(unsigned short)32>()
    && *(unsigned char *)(a1 + 1) != 127)
  {
    char v3 = (void *)ot::AsCoreType<otExtAddress>(a3);
    ot::Mac::ExtAddress::Fill(v3, 0xFFu);
    *(unsigned char *)(a3 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(unsigned char *)(a1 + 1);
    unsigned int v9 = 0;
    ++*a2;
  }
  return v9;
}

void *ot::Mac::ExtAddress::Fill(void *this, unsigned __int8 a2)
{
  *this  = 0x101010101010101 * a2;
  return this;
}

{
  return ot::Mac::ExtAddress::Fill(this, a2);
}

uint64_t ot::Mac::Filter::Apply(ot::Mac::Filter *this, const ot::Mac::ExtAddress *a2, signed __int8 *a3)
{
  unsigned int v8 = 0;
  Entry  = ot::Mac::Filter::FindEntry(this, a2);
  *a3  = *((unsigned char *)this + 1);
  char v6 = 0;
  if (Entry) {
    char v6 = *Entry;
  }
  int v4 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    if (v4 == 1)
    {
      if ((v6 & 1) == 0) {
        return 21;
      }
    }
    else if (v4 == 2 && (v6 & 1) != 0)
    {
      return 21;
    }
  }
  if (Entry && Entry[1] != 127) {
    *a3  = Entry[1];
  }
  return v8;
}

uint64_t ot::Mac::Filter::ApplyToRxFrame(ot::Mac::Filter *this, ot::Mac::RxFrame *a2, const ot::Mac::ExtAddress *a3, ot::Neighbor *a4)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned int v9 = a3;
  unsigned int v8 = a4;
  unsigned int v7 = 0;
  signed __int8 v6 = 0;
  unsigned int v7 = ot::Mac::Filter::Apply(this, a3, &v6);
  if (!v7 && v6 != 127)
  {
    ot::Mac::RxFrame::SetRssi((uint64_t)v10, v6);
    if (v8)
    {
      LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v8);
      ot::LinkQualityInfo::ClearAverageRss(LinkInfo);
    }
  }
  return v7;
}

uint64_t ot::Mac::RxFrame::SetRssi(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2ot::Mle::Tlv::SetType(this, 9) = a2;
  return this;
}

{
  return ot::Mac::RxFrame::SetRssi(this, a2);
}

_WORD *ot::LinkQualityInfo::ClearAverageRss(ot::LinkQualityInfo *this)
{
  return ot::Clearable<ot::RssAverager>::Clear(this);
}

{
  return ot::LinkQualityInfo::ClearAverageRss(this);
}

_WORD *ot::Clearable<ot::RssAverager>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::RssAverager>::Clear(result);
}

ot::StringWriter *ot::MeshCoP::ExtendedPanId::ToString@<X0>(ot::MeshCoP::ExtendedPanId *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, 8);
}

uint64_t ot::String<(unsigned short)17>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 17);
  return a1;
}

ot::MeshCoP::ExtendedPanIdManager *ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager(ot::MeshCoP::ExtendedPanIdManager *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Clearable<ot::MeshCoP::ExtendedPanId>::Clear(this);
  uint64_t v2 = (const ot::MeshCoP::ExtendedPanId *)ot::AsCoreType<otExtendedPanId>((uint64_t)&ot::MeshCoP::ExtendedPanIdManager::sExtendedPanidInit);
  ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(this, v2);
  return this;
}

{
  ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager(this, a2);
  return this;
}

void *ot::Clearable<ot::MeshCoP::ExtendedPanId>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::MeshCoP::ExtendedPanId>::Clear(result);
}

void ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(ot::MeshCoP::ExtendedPanIdManager *this, const ot::MeshCoP::ExtendedPanId *a2)
{
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  ot::Notifier::Update<ot::MeshCoP::ExtendedPanId>(v2, this, a2, 0x20000);
  IgnoreError();
}

uint64_t ot::Notifier::Update<ot::MeshCoP::ExtendedPanId>(void *a1, void *a2, void *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v6;
}

{
  return ot::Notifier::Update<ot::MeshCoP::ExtendedPanId>(a1, a2, a3, a4);
}

BOOL ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(a1, a2);
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CstIe>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0, 8u);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::CstIe>(a1, a2, v2);
  }
  return inited;
}

{
  return ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CstIe>(a1, a2);
}

uint64_t ot::Mac::Frame::InitIeHeaderAt(ot::Mac::Frame *this, unsigned __int8 *a2, unsigned __int8 a3, unsigned __int8 a4)
{
  unsigned int v8 = 0;
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  ot::Encoding::LittleEndian::WriteUint16(FrameControlField | 0x200u, *(_WORD **)this, v5);
  if (!*a2) {
    *a2  = ot::Mac::Frame::FindHeaderIeIndex(this);
  }
  if (*a2 == 255)
  {
    return 23;
  }
  else
  {
    ot::Mac::HeaderIe::Init((ot::Mac::HeaderIe *)(*(void *)this + *a2), a3, a4);
    *a2 += 2;
    *((_WORD *)this + 4) += a4 + 2;
  }
  return v8;
}

uint64_t ot::Mac::Frame::InitIeContentAt<ot::Mac::CstIe>(void *a1, unsigned char *a2, unsigned __int8 *a3)
{
  int v4 = (ot::Mac::VendorIeHeader *)(*a1 + *a2);
  ot::Mac::VendorIeHeader::SetVendorOui(v4, 0xEAB89Bu, a3);
  uint64_t result = ot::Mac::VendorIeHeader::SetSubType((uint64_t)v4, 2);
  *a2 += 8;
  return result;
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::RendezvousTimeIe>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0x1Du, 2u);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::RendezvousTimeIe>((uint64_t)a1, a2);
  }
  return inited;
}

{
  return ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::RendezvousTimeIe>(a1, a2);
}

void ot::Mac::Frame::InitIeContentAt<ot::Mac::RendezvousTimeIe>(uint64_t a1, unsigned char *a2)
{
  *a2 += 2;
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::ConnectionIe>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0, 5u);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::ConnectionIe>(a1, a2, v2);
  }
  return inited;
}

{
  return ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::ConnectionIe>(a1, a2);
}

uint64_t ot::Mac::Frame::InitIeContentAt<ot::Mac::ConnectionIe>(void *a1, unsigned char *a2, unsigned __int8 *a3)
{
  uint64_t result = ot::Mac::ConnectionIe::Init((ot::Mac::ConnectionIe *)(*a1 + *a2), (uint64_t)a2, a3);
  *a2 += 5;
  return result;
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CslIe>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0x1Au, 4u);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::CslIe>((uint64_t)a1, a2);
  }
  return inited;
}

{
  return ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CslIe>(a1, a2);
}

void ot::Mac::Frame::InitIeContentAt<ot::Mac::CslIe>(uint64_t a1, unsigned char *a2)
{
  *a2 += 4;
}

uint64_t ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::Termination2Ie>(ot::Mac::Frame *a1, unsigned __int8 *a2)
{
  inited  = ot::Mac::Frame::InitIeHeaderAt(a1, a2, 0x7Fu, 0);
  if (!inited) {
    ot::Mac::Frame::InitIeContentAt<ot::Mac::Termination2Ie>();
  }
  return inited;
}

{
  return ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::Termination2Ie>(a1, a2);
}

unsigned char *ot::Mac::HeaderIe::Init(ot::Mac::HeaderIe *this, __int16 a2, char a3)
{
  return ot::Mac::HeaderIe::SetLength(this, a3);
}

_WORD *ot::Mac::HeaderIe::Init(_WORD *this)
{
  *this  = 0;
  return this;
}

{
  return ot::Mac::HeaderIe::Init(this);
}

uint64_t ot::Mac::HeaderIe::SetId(ot::Mac::HeaderIe *this, __int16 a2)
{
  __int16 v2 = ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)this);
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(v2 & 0x807F | (a2 << 7) & 0x7F80u);
  *(_WORD *)this  = result;
  return result;
}

{
  return ot::Mac::HeaderIe::SetId(this, a2);
}

unsigned char *ot::Mac::HeaderIe::SetLength(unsigned char *this, char a2)
{
  *this  = *this & 0x80 | a2 & 0x7F;
  return this;
}

{
  return ot::Mac::HeaderIe::SetLength(this, a2);
}

uint64_t ot::Mac::Frame::InitMacHeader(ot::Mac::Frame *a1, __int16 a2, __int16 a3, ot::Mac::Address *a4, unsigned __int16 *a5, char a6, char a7)
{
  uint64_t v24 = a1;
  __int16 v23 = a2;
  __int16 v22 = a3;
  uint64_t v21 = a4;
  uint64_t v20 = a5;
  char v19 = a6;
  char v18 = a7;
  unsigned __int16 v17 = a2 | a3;
  int Type = ot::Mac::Address::GetType(a4);
  if (Type)
  {
    if (Type == 1)
    {
      v17 |= 0x8000u;
    }
    else if (Type == 2)
    {
      v17 |= 0xC000u;
    }
  }
  int v12 = ot::Mac::Address::GetType((ot::Mac::Address *)((char *)v21 + 10));
  if (v12)
  {
    if (v12 == 1)
    {
      v17 |= 0x800u;
      if ((unsigned __int16)ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v21 + 10)) == 0xFFFF) {
        __int16 v7 = 0;
      }
      else {
        __int16 v7 = 32;
      }
      v17 |= v7;
    }
    else if (v12 == 2)
    {
      v17 |= 0xC20u;
    }
  }
  if (v19) {
    __int16 v8 = 8;
  }
  else {
    __int16 v8 = 0;
  }
  v17 |= v8;
  if (!ot::Mac::Address::IsNone(v21)
    && !ot::Mac::Address::IsNone((ot::Mac::Address *)((char *)v21 + 10))
    && *v20 == v20[1]
    && (!v22
     || v22 == 4096
     || v22 == 0x2000
     && (!ot::Mac::Address::IsExtended(v21) || !ot::Mac::Address::IsExtended((ot::Mac::Address *)((char *)v21 + 10)))))
  {
    v17 |= 0x40u;
  }
  uint64_t v11 = *(void **)a1;
  Mtu  = ot::Mac::Frame::GetMtu(a1);
  ot::FrameBuilder::Init((uint64_t)v16, v11, Mtu);
  ot::FrameBuilder::AppendLittleEndianUint16((ot::FrameBuilder *)v16, v17);
  IgnoreError();
  ot::FrameBuilder::AppendUint8((ot::FrameBuilder *)v16, 0);
  IgnoreError();
  if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)v17))
  {
    ot::FrameBuilder::AppendLittleEndianUint16((ot::FrameBuilder *)v16, v20[1]);
    IgnoreError();
  }
  ot::FrameBuilder::AppendMacAddress((ot::FrameBuilder *)v16, (ot::Mac::Address *)((char *)v21 + 10));
  IgnoreError();
  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)v17))
  {
    ot::FrameBuilder::AppendLittleEndianUint16((ot::FrameBuilder *)v16, *v20);
    IgnoreError();
  }
  ot::FrameBuilder::AppendMacAddress((ot::FrameBuilder *)v16, v21);
  IgnoreError();
  *((_WORD *)a1 + ++*(_WORD *)(this + 4) = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v16);
  if (v19)
  {
    unsigned __int8 v15 = v19 | v18;
    ot::FrameBuilder::AppendUint8((ot::FrameBuilder *)v16, v19 | v18);
    IgnoreError();
    *((_WORD *)a1 + 4) += ot::Mac::Frame::CalculateSecurityHeaderSize((ot::Mac::Frame *)v15);
    *((_WORD *)a1 + 4) += ot::Mac::Frame::CalculateMicSize((ot::Mac::Frame *)v15);
  }
  if (v23 == 3) {
    ++*((_WORD *)a1 + 4);
  }
  uint64_t result = ot::Mac::Frame::GetFcsSize(a1);
  *((_WORD *)a1 + 4) += result;
  return result;
}

uint64_t ot::Mac::Frame::GetMtu(ot::Mac::Frame *this)
{
  return 127;
}

{
  return ot::Mac::Frame::GetMtu(this);
}

BOOL ot::Mac::Frame::IsDstPanIdPresent(ot::Mac::Frame *this)
{
  unsigned __int16 v4 = (unsigned __int16)this;
  BOOL v3 = 1;
  if (ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)(unsigned __int16)this))
  {
    return (v4 & 0x100) != 0;
  }
  else if (ot::Mac::Frame::IsVersion2015((ot::Mac::Frame *)v4))
  {
    int v2 = v4 & 0xCC40;
    if ((v4 & 0xCC40) == 0
      || v2 == 2112
      || v2 == 3136
      || v2 == 0x8000
      || v2 == 32832
      || v2 == 49152
      || v2 == 49216
      || v2 == 52288)
    {
      return 0;
    }
  }
  else
  {
    return ot::Mac::Frame::IsDstAddrPresent((ot::Mac::Frame *)v4);
  }
  return v3;
}

{
  unsigned __int16 FrameControlField;

  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)FrameControlField);
}

{
  return ot::Mac::Frame::IsDstPanIdPresent(this);
}

BOOL ot::Mac::Frame::IsSrcPanIdPresent(ot::Mac::Frame *this)
{
  unsigned __int16 v4 = (unsigned __int16)this;
  BOOL v2 = 0;
  if (ot::Mac::Frame::IsSrcAddrPresent((ot::Mac::Frame *)(unsigned __int16)this)) {
    BOOL v2 = (v4 & 0x40) == 0;
  }
  BOOL v3 = v2;
  if (ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)v4))
  {
    return 0;
  }
  else if (ot::Mac::Frame::IsVersion2015((ot::Mac::Frame *)v4) && (v4 & 0xCC00) == 0xCC00)
  {
    return 0;
  }
  return v3;
}

{
  unsigned __int16 FrameControlField;

  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)FrameControlField);
}

{
  return ot::Mac::Frame::IsSrcPanIdPresent(this);
}

uint64_t ot::FrameBuilder::GetLength(ot::FrameBuilder *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::FrameBuilder::GetLength(this);
}

uint64_t ot::Mac::Frame::CalculateSecurityHeaderSize(ot::Mac::Frame *this)
{
  unsigned __int8 v4 = 5;
  if ((this & 7) != 0)
  {
    if ((this & 0x18) != 0)
    {
      uint64_t v2 = this & 0x18;
      char v1 = 1;
    }
    else
    {
      uint64_t v2 = this & 0x18;
      char v1 = 0;
    }
    if ((v1 & 1) == 0)
    {
      switch(v2)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          return v4;
        case 8:
          unsigned __int8 v4 = 6;
          break;
        case 16:
          unsigned __int8 v4 = 10;
          break;
        case 24:
          unsigned __int8 v4 = 14;
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  else
  {
    return -1;
  }
  return v4;
}

uint64_t ot::Mac::Frame::CalculateMicSize(ot::Mac::Frame *this)
{
  unsigned __int8 v4 = 0;
  if ((this & 7) != 0)
  {
    uint64_t v2 = this & 7;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = this & 7;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
      case 4:
        unsigned __int8 v4 = 0;
        break;
      case 1:
      case 5:
        unsigned __int8 v4 = 4;
        break;
      case 2:
      case 6:
        unsigned __int8 v4 = 8;
        break;
      case 3:
      case 7:
        unsigned __int8 v4 = 16;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

uint64_t ot::Mac::Frame::GetFcsSize(ot::Mac::Frame *this)
{
  return 2;
}

{
  return ot::Mac::Frame::GetFcsSize(this);
}

uint64_t ot::Mac::Frame::ValidatePsdu(ot::Mac::Frame *this)
{
  v3[4]  = 0;
  *(_DWORD *)BOOL v3 = ot::Mac::Frame::FindPayloadIndex(this);
  if (v3[0] == 255)
  {
    *(_DWORD *)&v3[1]  = 6;
  }
  else if (v3[0] + ot::Mac::Frame::GetFooterLength(this) > *((unsigned __int16 *)this + 4))
  {
    *(_DWORD *)&v3[1]  = 6;
  }
  return *(unsigned int *)&v3[1];
}

uint64_t ot::Mac::Frame::FindPayloadIndex(ot::Mac::Frame *this)
{
  unsigned __int16 v5 = ot::Mac::Frame::SkipSecurityHeaderIndex(this);
  if (v5 != 255)
  {
    if (ot::Mac::Frame::IsIePresent(this))
    {
      Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
      while (1)
      {
        BOOL v3 = (ot::Mac::HeaderIe *)(*(void *)this + v5);
        unsigned __int16 v6 = v5 + 2;
        if (v6 + FooterLength > *((unsigned __int16 *)this + 4))
        {
          LOBYTE(v5)  = -1;
          return v5;
        }
        unsigned __int16 v5 = v6 + ot::Mac::HeaderIe::GetLength(v3);
        if (v5 + FooterLength > *((unsigned __int16 *)this + 4)) {
          break;
        }
        if ((unsigned __int16)ot::Mac::HeaderIe::GetId(v3) == 127
          || v5 + FooterLength >= *((unsigned __int16 *)this + 4))
        {
          goto LABEL_10;
        }
      }
      LOBYTE(v5)  = -1;
    }
    else
    {
LABEL_10:
      if (!ot::Mac::Frame::IsVersion2015(this) && (ot::Mac::Frame::GetFrameControlField(this) & 7) == 3) {
        LOBYTE(v5)  = v5 + 1;
      }
    }
  }
  return v5;
}

uint64_t ot::Mac::Frame::GetFooterLength(ot::Mac::Frame *this)
{
  FcsSize  = ot::Mac::Frame::GetFcsSize(this);
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex != 255) {
    FcsSize += ot::Mac::Frame::CalculateMicSize((ot::Mac::Frame *)*(unsigned __int8 *)(*(void *)this
  }
                                                                                     + SecurityHeaderIndex));
  return FcsSize;
}

uint64_t ot::Mac::Frame::IsWakeupFrame(ot::Mac::Frame *this)
{
  uint64_t v11 = this;
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  char v9 = 0;
  unsigned __int8 v8 = 0;
  HeaderIeIndex  = 0;
  HeaderIe  = 0;
  ThreadIe  = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v4);
  if (!ot::Mac::Frame::GetKeyIdMode(this, &v8)
    && v8 == 16
    && (FrameControlField & 7) == 5
    && (FrameControlField & 0x4000) == 0)
  {
    HeaderIe  = ot::Mac::Frame::GetHeaderIe(this, 0x1Du);
    if (HeaderIe)
    {
      ThreadIe  = ot::Mac::Frame::GetThreadIe(this, 1u);
      if (ThreadIe)
      {
        HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
        uint64_t v2 = *(void *)this + HeaderIeIndex + 11;
        if (v2 == ot::Mac::Frame::GetFooter(this)
          && !ot::Mac::Frame::GetSrcAddr(this, (ot::Mac::Address *)v4)
          && ot::Mac::Address::IsExtended((ot::Mac::Address *)v4))
        {
          char v9 = 1;
        }
      }
    }
  }
  return v9 & 1;
}

uint64_t ot::Mac::Frame::GetKeyIdMode(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v4[4]  = 0;
  *(_DWORD *)unsigned __int8 v4 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v4[0] == 255) {
    *(_DWORD *)&v4[1]  = 6;
  }
  else {
    *a2  = *(unsigned char *)(*(void *)this + v4[0]) & 0x18;
  }
  return *(unsigned int *)&v4[1];
}

uint64_t ot::Mac::Frame::GetHeaderIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
  HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
  PayloadIndex  = ot::Mac::Frame::FindPayloadIndex(this);
  uint64_t v5 = 0;
  if (HeaderIeIndex != 255 && PayloadIndex != 255)
  {
    while (HeaderIeIndex <= (int)PayloadIndex)
    {
      unsigned __int8 v4 = (ot::Mac::HeaderIe *)(*(void *)this + HeaderIeIndex);
      if (a2 == (unsigned __int16)ot::Mac::HeaderIe::GetId(v4)) {
        return *(void *)this + HeaderIeIndex;
      }
      HeaderIeIndex += ot::Mac::HeaderIe::GetLength(v4) + 2;
    }
  }
  return v5;
}

uint64_t ot::Mac::Frame::GetThreadIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
  HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
  PayloadIndex  = ot::Mac::Frame::FindPayloadIndex(this);
  uint64_t v6 = 0;
  if (HeaderIeIndex != 255 && PayloadIndex != 255)
  {
    while (HeaderIeIndex <= (int)PayloadIndex)
    {
      uint64_t v5 = (ot::Mac::HeaderIe *)(*(void *)this + HeaderIeIndex);
      if (!(unsigned __int16)ot::Mac::HeaderIe::GetId(v5)
        && ot::Mac::VendorIeHeader::GetVendorOui((ot::Mac::HeaderIe *)((char *)v5 + 2), v2) == 15382683
        && a2 == ot::Mac::VendorIeHeader::GetSubType((ot::Mac::HeaderIe *)((char *)v5 + 2)))
      {
        return *(void *)this + HeaderIeIndex;
      }
      HeaderIeIndex += ot::Mac::HeaderIe::GetLength(v5) + 2;
    }
  }
  return v6;
}

uint64_t ot::Mac::Frame::FindHeaderIeIndex(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::IsIePresent(this)) {
    return ot::Mac::Frame::SkipSecurityHeaderIndex(this);
  }
  else {
    return -1;
  }
}

uint64_t ot::Mac::Frame::GetFooter(ot::Mac::Frame *this)
{
  uint64_t v2 = *(void *)this;
  int v3 = *((unsigned __int16 *)this + 4);
  return v2 + v3 - ot::Mac::Frame::GetFooterLength(this);
}

uint64_t ot::Mac::Frame::GetSrcAddr(ot::Mac::Frame *this, ot::Mac::Address *a2)
{
  char v8[4] = 0;
  *(_DWORD *)unsigned __int8 v8 = ot::Mac::Frame::FindSrcAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (v8[0] == 255)
  {
    *(_DWORD *)&v8[1]  = 6;
  }
  else
  {
    FcfSrcAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfSrcAddr((ot::Mac::Frame *)FrameControlField);
    if (FcfSrcAddr)
    {
      if (FcfSrcAddr == 2)
      {
        Uint16  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v8[0]), v2);
        ot::Mac::Address::SetShort((uint64_t)a2, Uint16);
      }
      else if (FcfSrcAddr == 3)
      {
        ot::Mac::Address::SetExtended((char *)a2, (void *)(*(void *)this + v8[0]), 1);
      }
      else
      {
        *(_DWORD *)&v8[1]  = 6;
      }
    }
    else
    {
      ot::Mac::Address::SetNone((uint64_t)a2);
    }
  }
  return *(unsigned int *)&v8[1];
}

BOOL ot::Mac::Frame::SetAckRequest(ot::Mac::Frame *this, char a2)
{
  char v4 = a2 & 1;
  BOOL result = ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)**(unsigned __int8 **)this);
  if (result)
  {
    if ((**(unsigned char **)this & 8) == 0) {
      __assert_rtn("SetAckRequest", "mac_frame.cpp", 230, "mPsdu[0] & kMpFcfLongFrame");
    }
    if (v4) {
      *(unsigned char *)(*(void *)this + 1) |= 0x40u;
    }
    else {
      *(unsigned char *)(*(void *)this + 1) &= ~0x40u;
    }
  }
  else if (v4)
  {
    **(unsigned char **)this |= 0x20u;
  }
  else
  {
    **(unsigned char **)this &= ~0x20u;
  }
  return result;
}

BOOL ot::Mac::Frame::SetFramePending(ot::Mac::Frame *this, char a2)
{
  char v4 = a2 & 1;
  BOOL result = ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)**(unsigned __int8 **)this);
  if (result)
  {
    if ((**(unsigned char **)this & 8) == 0) {
      __assert_rtn("SetFramePending", "mac_frame.cpp", 260, "mPsdu[0] & kMpFcfLongFrame");
    }
    if (v4) {
      *(unsigned char *)(*(void *)this + 1) |= 8u;
    }
    else {
      *(unsigned char *)(*(void *)this + 1) &= ~8u;
    }
  }
  else if (v4)
  {
    **(unsigned char **)this |= 0x10u;
  }
  else
  {
    **(unsigned char **)this &= ~0x10u;
  }
  return result;
}

uint64_t ot::Mac::Frame::SkipDsnIndex(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  FcfSize  = ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)FrameControlField);
  if (ot::Mac::Frame::IsDsnPresent((ot::Mac::Frame *)FrameControlField)) {
    ++FcfSize;
  }
  return FcfSize;
}

BOOL ot::Mac::Frame::IsDsnPresent(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 256, 1024) == 0;
}

{
  return ot::Mac::Frame::IsDsnPresent(this);
}

uint64_t ot::Mac::Frame::FindDstPanIdIndex(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::IsDstPanIdPresent(this)) {
    return ot::Mac::Frame::SkipDsnIndex(this);
  }
  else {
    return -1;
  }
}

BOOL ot::Mac::Frame::IsDstAddrPresent(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 3072, 48) != 0;
}

{
  return ot::Mac::Frame::IsDstAddrPresent(this);
}

uint64_t ot::Mac::Frame::GetDstPanId(ot::Mac::Frame *this, unsigned __int16 *a2)
{
  unsigned char v5[4] = 0;
  *(_DWORD *)uint64_t v5 = ot::Mac::Frame::FindDstPanIdIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    *a2  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v5[0]), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Mac::Frame::SetDstPanId(ot::Mac::Frame *this, unsigned __int16 a2)
{
  DstPanIdIndex  = ot::Mac::Frame::FindDstPanIdIndex(this);
  if (DstPanIdIndex == 255) {
    __assert_rtn("SetDstPanId", "mac_frame.cpp", 363, "index != kInvalidIndex");
  }
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)this + DstPanIdIndex), v2);
}

uint64_t ot::Mac::Frame::FindDstAddrIndex(ot::Mac::Frame *this)
{
  char v5 = ot::Mac::Frame::SkipDsnIndex(this);
  IsDstPanIdPresent  = ot::Mac::Frame::IsDstPanIdPresent(this);
  char v2 = 2;
  if (!IsDstPanIdPresent) {
    char v2 = 0;
  }
  return (v2 + v5);
}

uint64_t ot::Mac::Frame::GetDstAddr(ot::Mac::Frame *this, ot::Mac::Address *a2)
{
  char v8[4] = 0;
  *(_DWORD *)unsigned __int8 v8 = ot::Mac::Frame::FindDstAddrIndex(this);
  if (v8[0] == 255)
  {
    *(_DWORD *)&v8[1]  = 6;
  }
  else
  {
    FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
    FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField);
    if (FcfDstAddr == 2)
    {
      Uint16  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v8[0]), v3);
      ot::Mac::Address::SetShort((uint64_t)a2, Uint16);
    }
    else if (FcfDstAddr == 3)
    {
      ot::Mac::Address::SetExtended((char *)a2, (void *)(*(void *)this + v8[0]), 1);
    }
    else
    {
      ot::Mac::Address::SetNone((uint64_t)a2);
    }
  }
  return *(unsigned int *)&v8[1];
}

uint64_t ot::Mac::Frame::GetFcfDstAddr(ot::Mac::Frame *this)
{
  __int16 v2 = (__int16)this;
  if (ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)(unsigned __int16)this)) {
    return (v2 & 0x30) >> 4;
  }
  else {
    return (v2 & 0xC00) >> 10;
  }
}

{
  return ot::Mac::Frame::GetFcfDstAddr(this);
}

char *ot::Mac::Address::SetExtended(char *a1, void *a2, char a3)
{
  BOOL result = ot::Mac::ExtAddress::Set(a1, a2, a3);
  a1[8]  = 2;
  return result;
}

{
  return ot::Mac::Address::SetExtended(a1, a2, a3);
}

uint64_t ot::Mac::Frame::SetDstAddr(ot::Mac::Frame *this, unsigned __int16 a2)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if ((unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField) != 2) {
    __assert_rtn("SetDstAddr", "mac_frame.cpp", 397, "GetFcfDstAddr(GetFrameControlField()) == kFcfAddrShort");
  }
  uint64_t v6 = *(void *)this;
  DstAddrIndex  = ot::Mac::Frame::FindDstAddrIndex(this);
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(v6 + DstAddrIndex), v4);
}

char *ot::Mac::Frame::SetDstAddr(ot::Mac::Frame *this, const ot::Mac::ExtAddress *a2)
{
  DstAddrIndex  = ot::Mac::Frame::FindDstAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if ((unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField) != 3) {
    __assert_rtn("SetDstAddr", "mac_frame.cpp", 405, "GetFcfDstAddr(GetFrameControlField()) == kFcfAddrExt");
  }
  if (DstAddrIndex == 255) {
    __assert_rtn("SetDstAddr", "mac_frame.cpp", 406, "index != kInvalidIndex");
  }
  return ot::Mac::ExtAddress::CopyTo(a2, (char *)(*(void *)this + DstAddrIndex), 1);
}

char *ot::Mac::ExtAddress::CopyTo(void *a1, char *a2, char a3)
{
  return ot::Mac::ExtAddress::CopyAddress(a2, a1, a3);
}

{
  return ot::Mac::ExtAddress::CopyTo(a1, a2, a3);
}

char *ot::Mac::Frame::SetDstAddr(ot::Mac::Frame *this, const ot::Mac::Address *a2)
{
  int Type = ot::Mac::Address::GetType(a2);
  if (Type == 1)
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(a2);
    return (char *)ot::Mac::Frame::SetDstAddr(this, Short);
  }
  else
  {
    if (Type != 2) {
      __assert_rtn("SetDstAddr", "mac_frame.cpp", 424, "false");
    }
    ot::Mac::Address::GetExtended(a2);
    return ot::Mac::Frame::SetDstAddr(this, v4);
  }
}

uint64_t ot::Mac::Frame::FindSrcPanIdIndex(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)FrameControlField))
  {
    unsigned __int8 v4 = ot::Mac::Frame::SkipDsnIndex(this);
    if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)FrameControlField)) {
      v4 += 2;
    }
    FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField);
    if (FcfDstAddr == 2)
    {
      v4 += 2;
    }
    else if (FcfDstAddr == 3)
    {
      v4 += 8;
    }
  }
  else
  {
    return -1;
  }
  return v4;
}

BOOL ot::Mac::Frame::IsSrcAddrPresent(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 49152, 192) != 0;
}

{
  unsigned __int16 FrameControlField;

  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsSrcAddrPresent((ot::Mac::Frame *)FrameControlField);
}

{
  return ot::Mac::Frame::IsSrcAddrPresent(this);
}

{
  return ot::Mac::Frame::IsSrcAddrPresent(this);
}

uint64_t ot::Mac::Frame::GetSrcPanId(ot::Mac::Frame *this, unsigned __int16 *a2)
{
  unsigned char v5[4] = 0;
  *(_DWORD *)char v5 = ot::Mac::Frame::FindSrcPanIdIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    *a2  = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)this + v5[0]), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Mac::Frame::SetSrcPanId(ot::Mac::Frame *this, unsigned __int16 a2)
{
  unsigned char v5[4] = 0;
  *(_DWORD *)char v5 = ot::Mac::Frame::FindSrcPanIdIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)this + v5[0]), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Mac::Frame::FindSrcAddrIndex(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  unsigned __int8 v4 = ot::Mac::Frame::SkipDsnIndex(this);
  if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)FrameControlField)) {
    v4 += 2;
  }
  FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)FrameControlField);
  if (FcfDstAddr == 2)
  {
    v4 += 2;
  }
  else if (FcfDstAddr == 3)
  {
    v4 += 8;
  }
  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)FrameControlField)) {
    v4 += 2;
  }
  return v4;
}

uint64_t ot::Mac::Frame::GetFcfSrcAddr(ot::Mac::Frame *this)
{
  __int16 v2 = (__int16)this;
  if (ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)(unsigned __int16)this)) {
    return (v2 & 0xC0) >> 6;
  }
  else {
    return (v2 & 0xC000) >> 14;
  }
}

{
  return ot::Mac::Frame::GetFcfSrcAddr(this);
}

uint64_t ot::Mac::Frame::SetSrcAddr(ot::Mac::Frame *this, unsigned __int16 a2)
{
  SrcAddrIndex  = ot::Mac::Frame::FindSrcAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if ((unsigned __int16)ot::Mac::Frame::GetFcfSrcAddr((ot::Mac::Frame *)FrameControlField) != 2) {
    __assert_rtn("SetSrcAddr", "mac_frame.cpp", 575, "GetFcfSrcAddr(GetFrameControlField()) == kFcfAddrShort");
  }
  if (SrcAddrIndex == 255) {
    __assert_rtn("SetSrcAddr", "mac_frame.cpp", 576, "index != kInvalidIndex");
  }
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)this + SrcAddrIndex), v3);
}

char *ot::Mac::Frame::SetSrcAddr(ot::Mac::Frame *this, const ot::Mac::ExtAddress *a2)
{
  SrcAddrIndex  = ot::Mac::Frame::FindSrcAddrIndex(this);
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  if ((unsigned __int16)ot::Mac::Frame::GetFcfSrcAddr((ot::Mac::Frame *)FrameControlField) != 3) {
    __assert_rtn("SetSrcAddr", "mac_frame.cpp", 585, "GetFcfSrcAddr(GetFrameControlField()) == kFcfAddrExt");
  }
  if (SrcAddrIndex == 255) {
    __assert_rtn("SetSrcAddr", "mac_frame.cpp", 586, "index != kInvalidIndex");
  }
  return ot::Mac::ExtAddress::CopyTo(a2, (char *)(*(void *)this + SrcAddrIndex), 1);
}

char *ot::Mac::Frame::SetSrcAddr(ot::Mac::Frame *this, const ot::Mac::Address *a2)
{
  int Type = ot::Mac::Address::GetType(a2);
  if (Type == 1)
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(a2);
    return (char *)ot::Mac::Frame::SetSrcAddr(this, Short);
  }
  else
  {
    if (Type != 2) {
      __assert_rtn("SetSrcAddr", "mac_frame.cpp", 604, "false");
    }
    ot::Mac::Address::GetExtended(a2);
    return ot::Mac::Frame::SetSrcAddr(this, v4);
  }
}

uint64_t ot::Mac::Frame::GetSecurityControlField(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v4[4]  = 0;
  *(_DWORD *)unsigned __int8 v4 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v4[0] == 255) {
    *(_DWORD *)&v4[1]  = 6;
  }
  else {
    *a2  = *(unsigned char *)(*(void *)this + v4[0]);
  }
  return *(unsigned int *)&v4[1];
}

uint64_t ot::Mac::Frame::FindSecurityHeaderIndex(ot::Mac::Frame *this)
{
  if (*((unsigned __int16 *)this + 4) > 2u)
  {
    if (ot::Mac::Frame::GetSecurityEnabled(this)) {
      return ot::Mac::Frame::SkipAddrFieldIndex(this);
    }
    else {
      return -1;
    }
  }
  else
  {
    return -1;
  }
}

uint64_t ot::Mac::Frame::SetSecurityControlField(ot::Mac::Frame *this, char a2)
{
  uint64_t result = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (result == 255) {
    __assert_rtn("SetSecurityControlField", "mac_frame.cpp", 625, "index != kInvalidIndex");
  }
  *(unsigned char *)(*(void *)this + result)  = a2;
  return result;
}

uint64_t ot::Mac::Frame::SkipAddrFieldIndex(ot::Mac::Frame *this)
{
  if (ot::Mac::Frame::GetFcsSize(this) + 2 <= *((unsigned __int16 *)this + 4))
  {
    FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
    return ot::Mac::Frame::CalculateAddrFieldSize((ot::Mac::Frame *)FrameControlField);
  }
  else
  {
    return -1;
  }
}

uint64_t ot::Mac::Frame::GetSecurityLevel(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v4[4]  = 0;
  *(_DWORD *)unsigned __int8 v4 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v4[0] == 255) {
    *(_DWORD *)&v4[1]  = 6;
  }
  else {
    *a2  = *(unsigned char *)(*(void *)this + v4[0]) & 7;
  }
  return *(unsigned int *)&v4[1];
}

uint64_t ot::Mac::Frame::GetFrameCounter(ot::Mac::Frame *this, unsigned int *a2)
{
  unsigned char v5[4] = 0;
  *(_DWORD *)char v5 = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (v5[0] == 255) {
    *(_DWORD *)&v5[1]  = 6;
  }
  else {
    *a2  = ot::Encoding::LittleEndian::ReadUint32((ot::Encoding::LittleEndian *)(*(void *)this + (v5[0] + 1)), v2);
  }
  return *(unsigned int *)&v5[1];
}

uint64_t ot::Encoding::LittleEndian::ReadUint32(ot::Encoding::LittleEndian *this, const unsigned __int8 *a2)
{
  return (*((unsigned __int8 *)this + 1) << 8) | *(unsigned __int8 *)this | (*((unsigned __int8 *)this + 2) << 16) | (*((unsigned __int8 *)this + 3) << 24);
}

{
  return ot::Encoding::LittleEndian::ReadUint32(this, a2);
}

uint64_t ot::Mac::Frame::SetFrameCounter(ot::Mac::Frame *this, unsigned int a2)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("SetFrameCounter", "mac_frame.cpp", 688, "index != kInvalidIndex");
  }
  ot::Encoding::LittleEndian::WriteUint32(a2, *(void *)this + (SecurityHeaderIndex + 1), v2);
  return ot::Mac::TxFrame::SetIsHeaderUpdated((uint64_t)this, 1);
}

uint64_t ot::Encoding::LittleEndian::WriteUint32(uint64_t this, uint64_t a2, unsigned __int8 *a3)
{
  *(unsigned char *)a2  = this;
  *(_WORD *)(a2 + 1)  = this >> 8;
  *(unsigned char *)(a2 + 3)  = BYTE3(this);
  return this;
}

{
  return ot::Encoding::LittleEndian::WriteUint32(this, a2, a3);
}

uint64_t ot::Mac::Frame::GetKeySource(ot::Mac::Frame *this)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("GetKeySource", "mac_frame.cpp", 702, "index != kInvalidIndex");
  }
  return *(void *)this + SecurityHeaderIndex + 5;
}

uint64_t ot::Mac::Frame::GetKeySourceLength(ot::Mac::Frame *this)
{
  unsigned __int8 v4 = 0;
  if ((_BYTE)this)
  {
    uint64_t v2 = this;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        unsigned __int8 v4 = 0;
        break;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        return v4;
      case 8:
        unsigned __int8 v4 = 0;
        break;
      case 16:
        unsigned __int8 v4 = 4;
        break;
      case 24:
        unsigned __int8 v4 = 8;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

void *ot::Mac::Frame::SetKeySource(ot::Mac::Frame *this, const unsigned __int8 *a2)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("SetKeySource", "mac_frame.cpp", 738, "index != kInvalidIndex");
  }
  KeySource__int16 Length = ot::Mac::Frame::GetKeySourceLength((ot::Mac::Frame *)(*(unsigned char *)(*(void *)this
                                                                                   + SecurityHeaderIndex) & 0x18));
  return memcpy((void *)(*(void *)this + SecurityHeaderIndex + 5), a2, KeySourceLength);
}

uint64_t ot::Mac::Frame::GetKeyId(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  unsigned int v5 = 0;
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    return 6;
  }
  else {
    *a2  = *(unsigned char *)(*(void *)this
  }
                   + SecurityHeaderIndex
                   + 5
                   + ot::Mac::Frame::GetKeySourceLength((ot::Mac::Frame *)(*(unsigned char *)(*(void *)this + SecurityHeaderIndex) & 0x18)));
  return v5;
}

uint64_t ot::Mac::Frame::SetKeyId(ot::Mac::Frame *this, char a2)
{
  SecurityHeaderIndex  = ot::Mac::Frame::FindSecurityHeaderIndex(this);
  if (SecurityHeaderIndex == 255) {
    __assert_rtn("SetKeyId", "mac_frame.cpp", 766, "index != kInvalidIndex");
  }
  uint64_t result = ot::Mac::Frame::GetKeySourceLength((ot::Mac::Frame *)(*(unsigned char *)(*(void *)this + SecurityHeaderIndex) & 0x18));
  *(unsigned char *)(*(void *)this + SecurityHeaderIndex + 5 + result)  = a2;
  return result;
}

uint64_t ot::Mac::Frame::GetCommandId(ot::Mac::Frame *this, unsigned __int8 *a2)
{
  v6[4]  = 0;
  *(_DWORD *)uint64_t v6 = ot::Mac::Frame::FindPayloadIndex(this);
  if (v6[0] == 255)
  {
    *(_DWORD *)&v6[1]  = 6;
  }
  else
  {
    uint64_t v4 = *(void *)this;
    if (ot::Mac::Frame::IsVersion2015(this)) {
      int v3 = v6[0];
    }
    else {
      int v3 = v6[0] - 1;
    }
    *a2  = *(unsigned char *)(v4 + v3);
  }
  return *(unsigned int *)&v6[1];
}

uint64_t ot::Mac::Frame::SetCommandId(ot::Mac::Frame *this, char a2)
{
  v6[4]  = 0;
  *(_DWORD *)uint64_t v6 = ot::Mac::Frame::FindPayloadIndex(this);
  if (v6[0] == 255)
  {
    *(_DWORD *)&v6[1]  = 6;
  }
  else
  {
    uint64_t v4 = *(void *)this;
    if (ot::Mac::Frame::IsVersion2015(this)) {
      int v3 = v6[0];
    }
    else {
      int v3 = v6[0] - 1;
    }
    *(unsigned char *)(v4 + v3)  = a2;
  }
  return *(unsigned int *)&v6[1];
}

BOOL ot::Mac::Frame::IsDataRequestCommand(ot::Mac::Frame *this)
{
  unsigned int v5 = this;
  BOOL v4 = 0;
  unsigned __int8 v3 = 0;
  if (ot::Mac::Frame::GetType(this) == 3 && !ot::Mac::Frame::GetCommandId(this, &v3)) {
    return v3 == 4;
  }
  return v4;
}

uint64_t ot::Mac::Frame::GetHeaderLength(ot::Mac::Frame *this)
{
  return (ot::Mac::Frame::GetPayload(this) - *(unsigned char *)this);
}

uint64_t ot::Mac::Frame::GetPayload(ot::Mac::Frame *this)
{
  PayloadIndex  = ot::Mac::Frame::FindPayloadIndex(this);
  if (PayloadIndex == 255) {
    return 0;
  }
  else {
    return *(void *)this + PayloadIndex;
  }
}

uint64_t ot::Mac::Frame::GetMaxPayloadLength(ot::Mac::Frame *this)
{
  Mtu  = ot::Mac::Frame::GetMtu(this);
  Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
  return (unsigned __int16)(Mtu - (ot::Mac::Frame::GetFooterLength(this) + HeaderLength));
}

uint64_t ot::Mac::Frame::GetPayloadLength(ot::Mac::Frame *this)
{
  __int16 v3 = *((_WORD *)this + 4);
  Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
  return (unsigned __int16)(v3 - (ot::Mac::Frame::GetFooterLength(this) + HeaderLength));
}

uint64_t ot::Mac::Frame::SetPayloadLength(ot::Mac::Frame *this, __int16 a2)
{
  Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
  Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
  uint64_t result = HeaderLength;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = FooterLength + HeaderLength + a2;
  return result;
}

uint64_t ot::Mac::Frame::SkipSecurityHeaderIndex(ot::Mac::Frame *this)
{
  unsigned __int8 v4 = ot::Mac::Frame::SkipAddrFieldIndex(this);
  if (v4 != 255 && ot::Mac::Frame::GetSecurityEnabled(this))
  {
    if (v4 < (int)*((unsigned __int16 *)this + 4))
    {
      unsigned __int8 v3 = ot::Mac::Frame::CalculateSecurityHeaderSize((ot::Mac::Frame *)*(unsigned __int8 *)(*(void *)this + v4));
      if (v3 == 255)
      {
        return -1;
      }
      else
      {
        v4 += v3;
        if (v4 > (int)*((unsigned __int16 *)this + 4)) {
          return -1;
        }
      }
    }
    else
    {
      return -1;
    }
  }
  return v4;
}

uint64_t ot::Mac::Frame::CalculateAddrFieldSize(ot::Mac::Frame *this)
{
  unsigned __int16 v6 = (unsigned __int16)this;
  FcfSize  = ot::Mac::Frame::GetFcfSize((ot::Mac::Frame *)(unsigned __int16)this);
  unsigned __int8 v5 = ot::Mac::Frame::IsDsnPresent((ot::Mac::Frame *)v6) + FcfSize;
  if (ot::Mac::Frame::IsDstPanIdPresent((ot::Mac::Frame *)v6)) {
    v5 += 2;
  }
  FcfDstAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfDstAddr((ot::Mac::Frame *)v6);
  if (FcfDstAddr)
  {
    if (FcfDstAddr == 2)
    {
      v5 += 2;
    }
    else
    {
      if (FcfDstAddr != 3) {
        return -1;
      }
      v5 += 8;
    }
  }
  if (ot::Mac::Frame::IsSrcPanIdPresent((ot::Mac::Frame *)v6)) {
    v5 += 2;
  }
  FcfSrcAddr  = (unsigned __int16)ot::Mac::Frame::GetFcfSrcAddr((ot::Mac::Frame *)v6);
  if (FcfSrcAddr)
  {
    if (FcfSrcAddr == 2)
    {
      v5 += 2;
    }
    else if (FcfSrcAddr == 3)
    {
      v5 += 8;
    }
    else
    {
      return -1;
    }
  }
  return v5;
}

BOOL ot::Mac::Frame::IsIePresent(ot::Mac::Frame *this)
{
  FrameControlField  = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsIePresent((ot::Mac::Frame *)FrameControlField);
}

{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 512, 0x8000) != 0;
}

{
  return ot::Mac::Frame::IsIePresent(this);
}

{
  return ot::Mac::Frame::IsIePresent(this);
}

uint64_t ot::Mac::HeaderIe::GetId(ot::Mac::HeaderIe *this)
{
  return (int)(ot::Encoding::LittleEndian::HostSwap16(*(unsigned __int16 *)this) & 0x7F80) >> 7;
}

{
  return ot::Mac::HeaderIe::GetId(this);
}

uint64_t ot::Mac::VendorIeHeader::SetVendorOui(ot::Mac::VendorIeHeader *this, unsigned int a2, unsigned __int8 *a3)
{
  return ot::Encoding::LittleEndian::WriteUint24(a2, (uint64_t)this, a3);
}

{
  return ot::Mac::VendorIeHeader::SetVendorOui(this, a2, a3);
}

uint64_t ot::Mac::VendorIeHeader::SetSubType(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3)  = a2;
  return this;
}

{
  return ot::Mac::VendorIeHeader::SetSubType(this, a2);
}

uint64_t ot::Mac::ConnectionIe::Init(ot::Mac::ConnectionIe *this, uint64_t a2, unsigned __int8 *a3)
{
  ot::Mac::VendorIeHeader::SetVendorOui(this, 0xEAB89Bu, a3);
  uint64_t result = ot::Mac::VendorIeHeader::SetSubType((uint64_t)this, 1);
  *((unsigned char *)this + ++*(_WORD *)(this + 4) = 0;
  return result;
}

{
  return ot::Mac::ConnectionIe::Init(this, a2, a3);
}

uint64_t ot::Mac::VendorIeHeader::GetVendorOui(ot::Mac::VendorIeHeader *this, const unsigned __int8 *a2)
{
  return ot::Encoding::LittleEndian::ReadUint24(this, a2);
}

{
  return ot::Mac::VendorIeHeader::GetVendorOui(this, a2);
}

uint64_t ot::Mac::VendorIeHeader::GetSubType(ot::Mac::VendorIeHeader *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::Mac::VendorIeHeader::GetSubType(this);
}

void ot::Mac::Frame::SetCslIe(ot::Mac::Frame *this, unsigned __int16 a2, unsigned __int16 a3)
{
  ot::Mac::Frame::GetHeaderIe(this, 0x1Au);
  uint64_t v4 = v3;
  if (v3)
  {
    ot::Mac::CslIe::SetPeriod((ot::Mac::CslIe *)(v3 + 2), a2);
    ot::Mac::CslIe::SetPhase((ot::Mac::CslIe *)(v4 + 2), a3);
  }
}

uint64_t ot::Mac::CslIe::SetPeriod(ot::Mac::CslIe *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::Mac::CslIe::SetPeriod(this, a2);
}

uint64_t ot::Mac::CslIe::SetPhase(ot::Mac::CslIe *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return ot::Mac::CslIe::SetPhase(this, a2);
}

void *ot::Mac::Frame::SetEnhAckProbingIe(ot::Mac::Frame *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  ot::Mac::Frame::GetThreadIe(this, 0);
  if (!v3) {
    __assert_rtn("SetEnhAckProbingIe", "mac_frame.cpp", 1223, "cur != nullptr");
  }
  return memcpy((void *)(v3 + 6), a2, a3);
}

void *ot::Mac::TxFrame::CopyFrom(ot::Mac::TxFrame *this, const void **a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 3);
  memcpy(this, a2, 0x40uLL);
  *(void *)this  = v5;
  *((void *)this + 3)  = v4;
  return memcpy(*(void **)this, *a2, *((unsigned __int16 *)a2 + 4));
}

void ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::TxFrame *this, const ot::Mac::ExtAddress *a2)
{
  char v18 = this;
  *(void *)&v17[5]  = a2;
  *(_DWORD *)&v17[1]  = 0;
  v17[0]  = 0;
  ot::Crypto::AesCcm::AesCcm((ot::Crypto::AesCcm *)v19);
  if (ot::Mac::Frame::GetSecurityEnabled(this)
    && !ot::Mac::Frame::GetSecurityLevel(this, v17)
    && !ot::Mac::Frame::GetFrameCounter(this, (unsigned int *)&v17[1]))
  {
    ot::Crypto::AesCcm::GenerateNonce(*(ot::Crypto::AesCcm **)&v17[5], (const ot::Mac::ExtAddress *)*(unsigned int *)&v17[1], (unsigned __int8 *)v17[0], (uint64_t)v20, v2);
    AesKey  = (const ot::Mac::KeyMaterial *)ot::Mac::TxFrame::GetAesKey(this);
    ot::Crypto::AesCcm::SetKey((ot::Crypto::AesCcm *)v19, AesKey);
    Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
    unsigned __int8 v16 = FooterLength - ot::Mac::Frame::GetFcsSize(this);
    Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
    Payload__int16 Length = ot::Mac::Frame::GetPayloadLength(this);
    ot::Crypto::AesCcm::Init((ot::Crypto::AesCcm *)v19, HeaderLength, PayloadLength, v16, v20, 0xDu);
    Header  = (unsigned char *)ot::Mac::Frame::GetHeader(this);
    unsigned __int8 v5 = ot::Mac::Frame::GetHeaderLength(this);
    ot::Crypto::AesCcm::Header((ot::Crypto::AesEcb *)v19, Header, v5);
    ot::Mac::Frame::GetPayload(this);
    uint64_t v13 = v6;
    ot::Mac::Frame::GetPayload(this);
    uint64_t v14 = v7;
    unsigned __int16 v8 = ot::Mac::Frame::GetPayloadLength(this);
    ot::Crypto::AesCcm::Payload((uint64_t)v19, v13, v14, v8, 0);
    ot::Mac::Frame::GetFooter(this);
    ot::Crypto::AesCcm::Finalize((ot::Crypto::AesCcm *)v19, v9);
    ot::Mac::TxFrame::SetIsSecurityProcessed((uint64_t)this, 1);
  }
  ot::Crypto::AesCcm::~AesCcm((ot::Crypto::AesCcm *)v19);
}

ot::Crypto::AesCcm *ot::Crypto::AesCcm::AesCcm(ot::Crypto::AesCcm *this)
{
  return this;
}

{
  ot::Crypto::AesEcb::AesEcb(this);
  return this;
}

uint64_t ot::Mac::TxFrame::GetAesKey(ot::Mac::TxFrame *this)
{
  return *((void *)this + 2);
}

{
  return ot::Mac::TxFrame::GetAesKey(this);
}

void ot::Mac::Frame::GetFooter(ot::Mac::Frame *this)
{
  ot::AsConst<ot::Mac::Frame>();
  ot::Mac::Frame::GetFooter(v1);
  ot::AsNonConst<unsigned char>();
}

{
  ot::Mac::Frame::GetFooter(this);
}

void ot::Crypto::AesCcm::~AesCcm(ot::Crypto::AesCcm *this)
{
}

{
  ot::Crypto::AesEcb::~AesEcb(this);
}

uint64_t ot::Mac::TxFrame::GenerateImmAck(ot::Mac::TxFrame *this, const ot::Mac::RxFrame *a2, char a3)
{
  char v7 = a3 & 1;
  unsigned __int16 v6 = ot::Mac::Frame::GetVersion(a2) | 2;
  *((unsigned char *)this + 1ot::Mac::TxFrame::SetTxDelayBaseTime(*(void *)this, 0) = *((unsigned char *)a2 + 10);
  memset((char *)this + 16, 0, 0x30uLL);
  if (v7) {
    v6 |= 0x10u;
  }
  ot::Encoding::LittleEndian::WriteUint16(v6, *(_WORD **)this, v3);
  uint64_t result = ot::Mac::Frame::GetSequence(a2);
  *(unsigned char *)(*(void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 5;
  return result;
}

uint64_t ot::Mac::TxFrame::GenerateEnhAck(ot::Mac::TxFrame *this, const ot::Mac::RxFrame *a2, char a3, const unsigned __int8 *a4, unsigned __int8 a5)
{
  __int16 v22 = this;
  uint64_t v21 = a2;
  char v20 = a3 & 1;
  char v19 = a4;
  unsigned __int8 v18 = a5;
  Srcunsigned __int16 PanId = 0;
  unsigned __int16 v16 = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v15);
  unsigned __int16 v14 = 0;
  Footer__int16 Length = 0;
  unsigned __int8 v12 = 0;
  unsigned __int8 v11 = 0;
  unsigned __int16 v16 = 8194;
  *((unsigned char *)this + 1ot::Mac::TxFrame::SetTxDelayBaseTime(*(void *)this, 0) = *((unsigned char *)v21 + 10);
  memset((char *)this + 16, 0, 0x30uLL);
  if (v20) {
    v16 |= 0x10u;
  }
  if (ot::Mac::Frame::GetSecurityEnabled(v21)) {
    v16 |= 8u;
  }
  if (ot::Mac::Frame::IsPanIdCompressed(v21)) {
    v16 |= 0x40u;
  }
  if ((ot::Mac::Frame::GetFrameControlField(v21) & 0xC000) == 0xC000)
  {
    v16 |= 0xC00u;
  }
  else if ((ot::Mac::Frame::GetFrameControlField(v21) & 0xC000) == 0x8000)
  {
    v16 |= 0x800u;
  }
  if (v18) {
    v16 |= 0x200u;
  }
  ot::Encoding::LittleEndian::WriteUint16(v16, *(_WORD **)this, v5);
  *(unsigned char *)(*(void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::Mac::Frame::GetSequence(v21);
  if (ot::Mac::Frame::IsDstPanIdPresent(this))
  {
    if (ot::Mac::Frame::IsSrcPanIdPresent(v21))
    {
      Srcunsigned __int16 PanId = ot::Mac::Frame::GetSrcPanId(v21, &v14);
      if (SrcPanId) {
        return SrcPanId;
      }
    }
    else
    {
      if (!ot::Mac::Frame::IsDstPanIdPresent(v21)) {
        return 6;
      }
      Srcunsigned __int16 PanId = ot::Mac::Frame::GetDstPanId(v21, &v14);
      if (SrcPanId) {
        return SrcPanId;
      }
    }
    ot::Mac::Frame::SetDstPanId(this, v14);
  }
  if (ot::Mac::Frame::IsSrcAddrPresent(v21))
  {
    Srcunsigned __int16 PanId = ot::Mac::Frame::GetSrcAddr(v21, (ot::Mac::Address *)v15);
    if (SrcPanId) {
      return SrcPanId;
    }
    ot::Mac::Frame::SetDstAddr(this, (const ot::Mac::Address *)v15);
  }
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 254;
  if (ot::Mac::Frame::GetSecurityEnabled(v21))
  {
    Srcunsigned __int16 PanId = ot::Mac::Frame::GetSecurityControlField(v21, &v12);
    if (SrcPanId) {
      return SrcPanId;
    }
    Srcunsigned __int16 PanId = ot::Mac::Frame::GetKeyId(v21, &v11);
    if (SrcPanId) {
      return SrcPanId;
    }
    if ((v12 & 7) != 5) {
      return 6;
    }
    ot::Mac::Frame::SetSecurityControlField(this, v12);
    ot::Mac::Frame::SetKeyId(this, v11);
  }
  if (v18)
  {
    if (!v19) {
      __assert_rtn("GenerateEnhAck", "mac_frame.cpp", 1507, "aIeData != nullptr");
    }
    uint64_t v9 = *(void *)this;
    HeaderIeIndex  = ot::Mac::Frame::FindHeaderIeIndex(this);
    memcpy((void *)(v9 + HeaderIeIndex), v19, v18);
  }
  Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
  if (FooterLength == 255) {
    __assert_rtn("GenerateEnhAck", "mac_frame.cpp", 1513, "footerLength != kInvalidIndex");
  }
  unsigned __int8 v7 = ot::Mac::Frame::SkipSecurityHeaderIndex(this);
  *((_WORD *)this + ++*(_WORD *)(this + 4) = v18 + v7 + FooterLength;
  return SrcPanId;
}

BOOL ot::Mac::Frame::IsPanIdCompressed(ot::Mac::Frame *this)
{
  return (ot::Mac::Frame::GetFrameControlField(this) & 0x40) != 0;
}

{
  return ot::Mac::Frame::IsPanIdCompressed(this);
}

uint64_t ot::Mac::TxFrame::GenerateWakeupFrame(ot::Mac::TxFrame *this, unsigned __int16 a2, const ot::Mac::Address *a3, const ot::Mac::Address *a4)
{
  uint64_t v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int8 v11 = a3;
  *(void *)&unsigned char v10[3] = a4;
  *(_DWORD *)&v10[1]  = 0;
  v10[0]  = -30963;
  unsigned __int8 v9 = 0;
  int Type = ot::Mac::Address::GetType(a3);
  if (Type == 1)
  {
    v10[0] |= 0x20u;
  }
  else
  {
    if (Type != 2)
    {
      *(_DWORD *)&v10[1]  = 7;
      return *(unsigned int *)&v10[1];
    }
    v10[0] |= 0x30u;
  }
  int v6 = ot::Mac::Address::GetType(*(ot::Mac::Address **)&v10[3]);
  if (v6 == 1)
  {
    v10[0] |= 0x80u;
  }
  else
  {
    if (v6 != 2)
    {
      *(_DWORD *)&v10[1]  = 7;
      return *(unsigned int *)&v10[1];
    }
    v10[0] |= 0xC0u;
  }
  *((_WORD *)this + ++*(_WORD *)(this + 4) = ot::Mac::Frame::CalculateAddrFieldSize((ot::Mac::Frame *)v10[0]);
  if (*((_WORD *)this + 4) == 255) {
    __assert_rtn("GenerateWakeupFrame", "mac_frame.cpp", 1557, "mLength != kInvalidSize");
  }
  ot::Encoding::LittleEndian::WriteUint16(v10[0], *(_WORD **)this, v4);
  *(unsigned char *)(*(void *)this + *((unsigned __int16 *)this + 4))  = 21;
  *((_WORD *)this + 4) += ot::Mac::Frame::CalculateSecurityHeaderSize((ot::Mac::Frame *)0x15);
  *((_WORD *)this + 4) += ot::Mac::Frame::CalculateMicSize((ot::Mac::Frame *)0x15);
  *((_WORD *)this + 4) += ot::Mac::Frame::GetFcsSize(this);
  ot::Mac::Frame::SetDstPanId(this, v12);
  ot::Mac::Frame::SetDstAddr(this, v11);
  ot::Mac::Frame::SetSrcAddr(this, *(const ot::Mac::Address **)&v10[3]);
  *(_DWORD *)&v10[1]  = ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::RendezvousTimeIe>(this, &v9);
  if (!*(_DWORD *)&v10[1]) {
    *(_DWORD *)&v10[1]  = ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::ConnectionIe>(this, &v9);
  }
  return *(unsigned int *)&v10[1];
}

uint64_t ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::RxFrame *this, const ot::Mac::ExtAddress *a2, const ot::Mac::KeyMaterial *a3)
{
  uint64_t v43 = this;
  uint64_t v42 = a2;
  int v41 = a3;
  *(void *)&__n[1]  = 0x800000000;
  HIBYTE(__n[0])  = 0;
  ot::Crypto::AesCcm::AesCcm((ot::Crypto::AesCcm *)v45);
  if (ot::Mac::Frame::GetSecurityEnabled(this))
  {
    if (ot::Mac::Frame::GetSecurityLevel(this, (unsigned __int8 *)__n + 1))
    {
      otLogDebgPlat("RxFrame::ProcessReceiveAesCcm Security error could not get securityLevel", v3, v4, v5, v6, v7, v8, v9, v31);
    }
    else if (ot::Mac::Frame::GetFrameCounter(this, (unsigned int *)&__n[1]))
    {
      otLogDebgPlat("RxFrame:ProcessReceiveAesCsm Security error could not get frameCounter", v10, v11, v12, (uint64_t)v13, v14, v15, v16, v31);
    }
    else
    {
      ot::Crypto::AesCcm::GenerateNonce(v42, (const ot::Mac::ExtAddress *)*(unsigned int *)&__n[1], (unsigned __int8 *)HIBYTE(__n[0]), (uint64_t)v47, v13);
      ot::Crypto::AesCcm::SetKey((ot::Crypto::AesCcm *)v45, v41);
      Footer__int16 Length = ot::Mac::Frame::GetFooterLength(this);
      LOBYTE(__n[0])  = FooterLength - ot::Mac::Frame::GetFcsSize(this);
      Header__int16 Length = ot::Mac::Frame::GetHeaderLength(this);
      Payload__int16 Length = ot::Mac::Frame::GetPayloadLength(this);
      ot::Crypto::AesCcm::Init((ot::Crypto::AesCcm *)v45, HeaderLength, PayloadLength, __n[0], v47, 0xDu);
      Header  = (unsigned char *)ot::Mac::Frame::GetHeader(this);
      unsigned __int8 v18 = ot::Mac::Frame::GetHeaderLength(this);
      ot::Crypto::AesCcm::Header((ot::Crypto::AesEcb *)v45, Header, v18);
      ot::Mac::Frame::GetPayload(this);
      uint64_t v37 = v19;
      ot::Mac::Frame::GetPayload(this);
      uint64_t v38 = v20;
      unsigned __int16 v21 = ot::Mac::Frame::GetPayloadLength(this);
      ot::Crypto::AesCcm::Payload((uint64_t)v45, v37, v38, v21, 1);
      ot::Crypto::AesCcm::Finalize((ot::Crypto::AesCcm *)v45, v46);
      ot::Mac::Frame::GetFooter(this);
      if (!memcmp(v46, v22, LOBYTE(__n[0])))
      {
        *(_DWORD *)&__n[3]  = 0;
      }
      else
      {
        char v33 = ot::ErrorToString(*(int *)&__n[3]);
        ot::Mac::ExtAddress::ToString(v42, (ot::StringWriter *)v44);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v44);
        ot::Mac::Frame::GetPayloadLength(this);
        ot::Mac::Frame::GetFooterLength(this);
        otLogDebgPlat("RxFrame::ProcessReceiveAesCcm Security error tag and GetFooter() mismatch: error:%s extAddr:%s frameCounter:%u tagLen:%d payloadLen:%d footerLen:%d secLevel:%d ", v23, v24, v25, v26, v27, v28, v29, v33);
      }
    }
  }
  else
  {
    *(_DWORD *)&__n[3]  = 0;
  }
  unsigned int v32 = *(_DWORD *)&__n[3];
  ot::Crypto::AesCcm::~AesCcm((ot::Crypto::AesCcm *)v45);
  return v32;
}

ot::StringWriter *ot::Mac::Frame::ToInfoString@<X0>(ot::Mac::Frame *this@<X0>, ot::StringWriter *a2@<X8>)
{
  __int16 v22 = this;
  ot::String<(unsigned short)150>::String((uint64_t)a2);
  unsigned __int8 v21 = 0;
  unsigned __int8 Type = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v19);
  ot::Mac::Address::Address((ot::Mac::Address *)v18);
  unsigned int v17 = 0;
  int v14 = *((unsigned __int16 *)this + 4);
  Sequence  = ot::Mac::Frame::GetSequence(this);
  ot::StringWriter::Append(a2, "len:%d, seqnum:%d, type:", v14, Sequence);
  unsigned __int8 Type = ot::Mac::Frame::GetType(this);
  if (Type)
  {
    uint64_t v4 = Type;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        ot::StringWriter::Append(a2, "Beacon");
        goto LABEL_18;
      case 1:
        ot::StringWriter::Append(a2, "Data");
        goto LABEL_18;
      case 2:
        ot::StringWriter::Append(a2, "Ack");
        goto LABEL_18;
      case 3:
        if (ot::Mac::Frame::GetCommandId(this, &v21)) {
          unsigned __int8 v21 = -1;
        }
        if (v21 == 4)
        {
          ot::StringWriter::Append(a2, "Cmd(DataReq)");
        }
        else if (v21 == 7)
        {
          ot::StringWriter::Append(a2, "Cmd(BeaconReq)");
        }
        else
        {
          ot::StringWriter::Append(a2, "Cmd(%d)", v21);
        }
        goto LABEL_18;
      case 4:
        break;
      case 5:
        ot::StringWriter::Append(a2, "MP");
        goto LABEL_18;
      default:
        JUMPOUT(0);
    }
  }
  ot::StringWriter::Append(a2, "%d", Type);
LABEL_18:
  ot::Mac::Frame::GetSrcAddr(this, (ot::Mac::Address *)v19);
  IgnoreError();
  ot::Mac::Frame::GetDstAddr(this, (ot::Mac::Address *)v18);
  IgnoreError();
  ot::Mac::Address::ToString((ot::Mac::Address *)v19, (ot::StringWriter *)v24);
  uint64_t v10 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v24);
  ot::Mac::Address::ToString((ot::Mac::Address *)v18, (ot::StringWriter *)v23);
  uint64_t v11 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v23);
  SecurityEnabled  = ot::Mac::Frame::GetSecurityEnabled(this);
  uint64_t v12 = ot::ToYesNo((ot *)SecurityEnabled);
  AckRequest  = ot::Mac::Frame::GetAckRequest(this);
  uint64_t v13 = ot::ToYesNo((ot *)AckRequest);
  FramePending  = ot::Mac::Frame::GetFramePending(this);
  uint64_t v8 = "yes";
  if (!FramePending) {
    uint64_t v8 = "no";
  }
  ot::StringWriter::Append(a2, ", src:%s, dst:%s, sec:%s, ackreq:%s, fp:%s", v10, v11, v12, v13, v8);
  uint64_t result = (ot::StringWriter *)ot::Mac::Frame::GetSecurityEnabled(this);
  if (result)
  {
    ot::Mac::Frame::GetFrameCounter(this, &v17);
    return ot::StringWriter::Append(a2, ", fc:%u", v17);
  }
  return result;
}

uint64_t ot::String<(unsigned short)150>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 150);
  return a1;
}

char *ot::Mac::ExtAddress::Set(char *a1, void *a2, char a3)
{
  return ot::Mac::ExtAddress::CopyAddress(a1, a2, a3);
}

{
  return ot::Mac::ExtAddress::Set(a1, a2, a3);
}

uint64_t ot::Encoding::LittleEndian::WriteUint24(uint64_t this, uint64_t a2, unsigned __int8 *a3)
{
  *(_WORD *)a2  = this;
  *(unsigned char *)(a2 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = BYTE2(this);
  return this;
}

{
  return ot::Encoding::LittleEndian::WriteUint24(this, a2, a3);
}

uint64_t ot::Encoding::LittleEndian::ReadUint24(ot::Encoding::LittleEndian *this, const unsigned __int8 *a2)
{
  return (*((unsigned __int8 *)this + 1) << 8) | *(unsigned __int8 *)this | (*((unsigned __int8 *)this + 2) << 16);
}

{
  return ot::Encoding::LittleEndian::ReadUint24(this, a2);
}

ot::Mac::TxFrames *ot::Mac::TxFrames::TxFrames(ot::Mac::TxFrames *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t v2 = (ot::Mac::SubMac *)ot::Instance::Get<ot::Mac::SubMac>((uint64_t)a2);
  TransmitFrame  = ot::Mac::SubMac::GetTransmitFrame(v2);
  uint64_t result = this;
  *(void *)this  = TransmitFrame;
  return result;
}

{
  ot::Mac::TxFrames::TxFrames(this, a2);
  return this;
}

uint64_t ot::Mac::SubMac::GetTransmitFrame(ot::Mac::SubMac *this)
{
  return *((void *)this + 3);
}

{
  return ot::Mac::SubMac::GetTransmitFrame(this);
}

ot::Mac::Links *ot::Mac::Links::Links(ot::Mac::Links *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Mac::Links::Links(this, a2);
  return this;
}

uint64_t ot::Mac::Links::GetCurrentMacKey(ot::Mac::Links *this, const ot::Mac::Frame *a2)
{
  uint64_t v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::GetCurrentMacKey(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::SubMac>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
}

uint64_t ot::Mac::Links::GetTemporaryMacKey(ot::Mac::Links *this, const ot::Mac::Frame *a2, int a3)
{
  char v3 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  if (a3 == ot::KeyManager::GetCurrentKeySequence(v3) - 1)
  {
    uint64_t v4 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
    return ot::Mac::SubMac::GetPreviousMacKey(v4);
  }
  else
  {
    uint64_t v5 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    if (a3 != ot::KeyManager::GetCurrentKeySequence(v5) + 1) {
      __assert_rtn("GetTemporaryMacKey", "mac_links.cpp", 230, "false");
    }
    uint64_t v6 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
    return ot::Mac::SubMac::GetNextMacKey(v6);
  }
}

uint64_t ot::Mac::Links::SetMacFrameCounter(ot::Mac::Links *this, ot::Mac::TxFrame *a2)
{
  uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  int v3 = ot::KeyManager::Get154MacFrameCounter(v2);
  return ot::Mac::Frame::SetFrameCounter(a2, v3 + 5);
}

uint64_t ot::KeyManager::Get154MacFrameCounter(ot::KeyManager *this)
{
  return ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 52));
}

{
  return ot::KeyManager::Get154MacFrameCounter(this);
}

uint64_t ot::Mac::LinkFrameCounters::Get154(ot::Mac::LinkFrameCounters *this)
{
  return *(unsigned int *)this;
}

{
  return ot::Mac::LinkFrameCounters::Get154(this);
}

uint64_t ot::FrameBuilder::Init(uint64_t this, void *a2, __int16 a3)
{
  *(void *)this  = a2;
  *(_WORD *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(_WORD *)(this + 1ot::Mac::TxFrame::SetTxDelayBaseTime(*(void *)this, 0) = a3;
  return this;
}

uint64_t ot::FrameBuilder::AppendUint8(ot::FrameBuilder *this, char a2)
{
  uint64_t v4 = this;
  char v3 = a2;
  return ot::FrameBuilder::Append<unsigned char>(this, &v3);
}

uint64_t ot::FrameBuilder::Append<unsigned char>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 1u);
}

{
  return ot::FrameBuilder::Append<unsigned char>(a1, a2);
}

uint64_t ot::FrameBuilder::AppendBigEndianUint16(ot::FrameBuilder *this, unsigned __int16 a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  return ot::FrameBuilder::Append<unsigned short>(this, v4);
}

uint64_t ot::FrameBuilder::Append<unsigned short>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 2u);
}

{
  return ot::FrameBuilder::Append<unsigned short>(a1, a2);
}

uint64_t ot::FrameBuilder::AppendBigEndianUint32(ot::FrameBuilder *this, unsigned int a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  return ot::FrameBuilder::Append<unsigned int>(this, v4);
}

uint64_t ot::FrameBuilder::Append<unsigned int>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 4u);
}

{
  return ot::FrameBuilder::Append<unsigned int>(a1, a2);
}

uint64_t ot::FrameBuilder::AppendLittleEndianUint16(ot::FrameBuilder *this, unsigned __int16 a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::LittleEndian::HostSwap16(a2);
  return ot::FrameBuilder::Append<unsigned short>(this, v4);
}

uint64_t ot::FrameBuilder::AppendLittleEndianUint32(ot::FrameBuilder *this, unsigned int a2)
{
  uint64_t v5 = this;
  v4[1]  = a2;
  v4[0]  = ot::Encoding::LittleEndian::HostSwap32(a2);
  return ot::FrameBuilder::Append<unsigned int>(this, v4);
}

uint64_t ot::FrameBuilder::AppendBytes(ot::FrameBuilder *this, const void *a2, unsigned __int16 a3)
{
  unsigned int v5 = 0;
  if (ot::FrameBuilder::CanAppend(this, a3))
  {
    memcpy((void *)(*(void *)this + *((unsigned __int16 *)this + 4)), a2, a3);
    *((_WORD *)this + 4) += a3;
  }
  else
  {
    return 3;
  }
  return v5;
}

BOOL ot::FrameBuilder::CanAppend(ot::FrameBuilder *this, unsigned __int16 a2)
{
  return *((unsigned __int16 *)this + 4) + a2 <= *((unsigned __int16 *)this + 5);
}

{
  return ot::FrameBuilder::CanAppend(this, a2);
}

uint64_t ot::FrameBuilder::AppendMacAddress(ot::FrameBuilder *this, const ot::Mac::Address *a2)
{
  unsigned int v7 = 0;
  int Type = ot::Mac::Address::GetType(a2);
  if (Type)
  {
    if (Type == 1)
    {
      unsigned __int16 Short = ot::Mac::Address::GetShort(a2);
      return ot::FrameBuilder::AppendLittleEndianUint16(this, Short);
    }
    else if (Type == 2)
    {
      if (ot::FrameBuilder::CanAppend(this, 8u))
      {
        ot::Mac::Address::GetExtended(a2);
        ot::Mac::ExtAddress::CopyTo(v3, (char *)(*(void *)this + *((unsigned __int16 *)this + 4)), 1);
        *((_WORD *)this + 4) += 8;
      }
      else
      {
        return 3;
      }
    }
  }
  return v7;
}

uint64_t ot::FrameBuilder::AppendBytesFromMessage(ot::FrameBuilder *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (ot::FrameBuilder::CanAppend(this, a4))
  {
    unsigned int v6 = ot::Message::Read(a2, a3, (char *)(*(void *)this + *((unsigned __int16 *)this + 4)), a4);
    if (!v6) {
      *((_WORD *)this + 4) += a4;
    }
  }
  else
  {
    return 3;
  }
  return v6;
}

void *ot::FrameBuilder::WriteBytes(ot::FrameBuilder *this, unsigned __int16 a2, const void *a3, unsigned __int16 a4)
{
  return memcpy((void *)(*(void *)this + a2), a3, a4);
}

uint64_t ot::FrameBuilder::InsertBytes(ot::FrameBuilder *this, unsigned __int16 a2, const void *a3, unsigned __int16 a4)
{
  unsigned int v6 = 0;
  if (a2 > (int)*((unsigned __int16 *)this + 4)) {
    __assert_rtn("InsertBytes", "frame_builder.cpp", 136, "aOffset <= mLength");
  }
  if (ot::FrameBuilder::CanAppend(this, a4))
  {
    memmove((void *)(*(void *)this + a2 + a4), (const void *)(*(void *)this + a2), *((unsigned __int16 *)this + 4) - a2);
    memcpy((void *)(*(void *)this + a2), a3, a4);
    *((_WORD *)this + 4) += a4;
  }
  else
  {
    return 3;
  }
  return v6;
}

void *ot::FrameBuilder::RemoveBytes(ot::FrameBuilder *this, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t result = memmove((void *)(*(void *)this + a2), (const void *)(*(void *)this + a2 + a3), *((unsigned __int16 *)this + 4) - a2 - a3);
  *((_WORD *)this + 4) -= a3;
  return result;
}

uint64_t ot::MeshCoP::NameData::CopyTo(ot::MeshCoP::NameData *this, char *a2, char a3)
{
  unsigned int v7 = this;
  unsigned int v6 = a2;
  v5[23]  = a3;
  ot::MutableData<(ot::DataLengthType)0>::Init((uint64_t)v5, (uint64_t)a2, a3);
  ot::MutableData<(ot::DataLengthType)0>::ClearBytes((uint64_t)v5);
  ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom((uint64_t)v5, (uint64_t)this);
  IgnoreError();
  return ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v5);
}

uint64_t ot::MutableData<(ot::DataLengthType)0>::Init(uint64_t a1, uint64_t a2, char a3)
{
  return ot::Data<(ot::DataLengthType)0>::Init(a1, a2, a3);
}

{
  return ot::MutableData<(ot::DataLengthType)0>::Init(a1, a2, a3);
}

void ot::MutableData<(ot::DataLengthType)0>::ClearBytes(uint64_t a1)
{
  ot::MutableData<(ot::DataLengthType)0>::GetBytes(a1);
  bzero(v1, *(unsigned __int8 *)(a1 + 8));
}

{
  ot::MutableData<(ot::DataLengthType)0>::ClearBytes(a1);
}

uint64_t ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(uint64_t a1, uint64_t a2)
{
  uint64_t Bytes = (const void *)ot::Data<(ot::DataLengthType)0>::GetBytes(a2);
  unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength(a2);
  return ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(a1, Bytes, Length);
}

{
  return ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(a1, a2);
}

uint64_t ot::Data<(ot::DataLengthType)0>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

{
  return ot::Data<(ot::DataLengthType)0>::GetLength(a1);
}

uint64_t ot::MeshCoP::NetworkName::GetAsData(ot::MeshCoP::NetworkName *this)
{
  char v1 = ot::StringLength(this, (const char *)0x11);
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)&v4, (const char *)this, v1);
  return v4;
}

uint64_t ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NetworkName *this, ot *a2)
{
  uint64_t v8 = this;
  unsigned int v7 = a2;
  int v6 = 0;
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)v5, (const char *)a2, 17);
  if (ot::IsValidUtf8String(v7, v2)) {
    return ot::MeshCoP::NetworkName::Set(this, (const ot::MeshCoP::NameData *)v5);
  }
  else {
    return 7;
  }
}

uint64_t ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NetworkName *this, const ot::MeshCoP::NameData *a2)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  unsigned int v8 = 0;
  long long v7 = *(_OWORD *)a2;
  Buffer  = (ot *)ot::MeshCoP::NameData::GetBuffer((ot::MeshCoP::NameData *)&v7);
  unsigned __int8 Length = ot::MeshCoP::NameData::GetLength((ot::MeshCoP::NameData *)&v7);
  unsigned __int8 v6 = ot::StringLength(Buffer, (const char *)Length);
  if (v6 <= 0x10u)
  {
    ot::Data<(ot::DataLengthType)0>::SetLength((uint64_t)&v7, v6);
    if (!ot::Data<(ot::DataLengthType)0>::MatchesBytesIn((uint64_t)&v7, this) || *((unsigned char *)this + v6))
    {
      ot::Data<(ot::DataLengthType)0>::CopyBytesTo((uint64_t)&v7, this);
      *((unsigned char *)this + v6)  = 0;
    }
    else
    {
      return 24;
    }
  }
  else
  {
    return 7;
  }
  return v8;
}

uint64_t ot::MeshCoP::NameData::GetBuffer(ot::MeshCoP::NameData *this)
{
  return ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)this);
}

{
  return ot::MeshCoP::NameData::GetBuffer(this);
}

uint64_t ot::MeshCoP::NameData::GetLength(ot::MeshCoP::NameData *this)
{
  return ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)this);
}

{
  return ot::MeshCoP::NameData::GetLength(this);
}

uint64_t ot::Data<(ot::DataLengthType)0>::SetLength(uint64_t result, char a2)
{
  *(unsigned char *)(result + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  return result;
}

{
  return ot::Data<(ot::DataLengthType)0>::SetLength(result, a2);
}

BOOL ot::Data<(ot::DataLengthType)0>::MatchesBytesIn(uint64_t a1, const void *a2)
{
  return memcmp(*(const void **)a1, a2, *(unsigned __int8 *)(a1 + 8)) == 0;
}

{
  return ot::Data<(ot::DataLengthType)0>::MatchesBytesIn(a1, a2);
}

void *ot::Data<(ot::DataLengthType)0>::CopyBytesTo(uint64_t a1, void *a2)
{
  return memcpy(a2, *(const void **)a1, *(unsigned __int8 *)(a1 + 8));
}

{
  return ot::Data<(ot::DataLengthType)0>::CopyBytesTo(a1, a2);
}

BOOL ot::MeshCoP::NetworkName::operator==(ot::MeshCoP::NetworkName *a1, ot::MeshCoP::NetworkName *a2)
{
  unsigned int v8 = a1;
  long long v7 = a2;
  v6[0]  = ot::MeshCoP::NetworkName::GetAsData(a1);
  v6[1]  = v2;
  v5[0]  = ot::MeshCoP::NetworkName::GetAsData(v7);
  v5[1]  = v3;
  return ot::Data<(ot::DataLengthType)0>::operator==((uint64_t)v6, (uint64_t)v5);
}

BOOL ot::Data<(ot::DataLengthType)0>::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v3 = 0;
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)) {
    return ot::Data<(ot::DataLengthType)0>::MatchesBytesIn(a1, *(const void **)a2);
  }
  return v3;
}

{
  return ot::Data<(ot::DataLengthType)0>::operator==(a1, a2);
}

ot::MeshCoP::NetworkNameManager *ot::MeshCoP::NetworkNameManager::NetworkNameManager(ot::MeshCoP::NetworkNameManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::NetworkNameManager::NetworkNameManager(this, a2);
  return this;
}

uint64_t ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NetworkNameManager *this, ot *a2)
{
  unsigned int v2 = ot::MeshCoP::NetworkName::Set(this, a2);
  return ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(this, v2);
}

uint64_t ot::MeshCoP::NetworkNameManager::SetDomainName(ot::MeshCoP::NetworkNameManager *this, ot *a2)
{
  unsigned int v4 = ot::MeshCoP::NetworkName::Set((ot::MeshCoP::NetworkNameManager *)((char *)this + 17), a2);
  if (v4 == 24) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(ot::InstanceLocator *a1, unsigned int a2)
{
  unsigned int v5 = a2;
  if (a2)
  {
    if (a2 == 24)
    {
      BOOL v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
      ot::Notifier::SignalIfFirst(v3, 0x10000);
      return 0;
    }
  }
  else
  {
    unsigned int v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
    ot::Notifier::Signal(v2, 0x10000);
  }
  return v5;
}

uint64_t ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NetworkNameManager *this, const ot::MeshCoP::NameData *a2)
{
  unsigned int v2 = ot::MeshCoP::NetworkName::Set(this, a2);
  return ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(this, v2);
}

uint64_t ot::MeshCoP::NetworkNameManager::SetDomainName(ot::MeshCoP::NetworkNameManager *this, const ot::MeshCoP::NameData *a2)
{
  unsigned int v4 = ot::MeshCoP::NetworkName::Set((ot::MeshCoP::NetworkNameManager *)((char *)this + 17), a2);
  if (v4 == 24) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t ot::Data<(ot::DataLengthType)0>::GetBytes(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::Data<(ot::DataLengthType)0>::GetBytes(a1);
}

void ot::MutableData<(ot::DataLengthType)0>::GetBytes(uint64_t a1)
{
}

{
  ot::MutableData<(ot::DataLengthType)0>::GetBytes(a1);
}

uint64_t ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(uint64_t a1, const void *a2, unsigned __int8 a3)
{
  if (*(unsigned __int8 *)(a1 + 8) < (int)a3) {
    int v3 = 3;
  }
  else {
    int v3 = 0;
  }
  unsigned int v7 = v3;
  *(unsigned char *)(a1 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = ot::Min<unsigned char>(*(unsigned char *)(a1 + 8), a3);
  ot::AsNonConst<unsigned char>();
  memcpy(v4, a2, *(unsigned __int8 *)(a1 + 8));
  return v7;
}

{
  return ot::MutableData<(ot::DataLengthType)0>::CopyBytesFrom(a1, a2, a3);
}

uint64_t ot::Min<unsigned char>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 >= (int)a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return ot::Min<unsigned char>(a1, a2);
}

ot::Random::NonCrypto *ot::Mac::GenerateRandomPanId(ot::Random::NonCrypto *this)
{
  do
    this  = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint16(this);
  while ((unsigned __int16)this == 0xFFFF);
  return (ot::Random::NonCrypto *)(unsigned __int16)this;
}

unsigned char *ot::Mac::ExtAddress::GenerateRandom(ot::Mac::ExtAddress *this)
{
  return ot::Mac::ExtAddress::SetLocal(this, 1);
}

ot::StringWriter *ot::Mac::ExtAddress::ToString@<X0>(ot::Mac::ExtAddress *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, 8);
}

char *ot::Mac::ExtAddress::CopyAddress(char *result, void *a2, char a3)
{
  unsigned int v7 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      unsigned __int8 v6 = (char *)a2 + 7;
      for (char i = 8; i; --i)
      {
        int v3 = v6--;
        unsigned int v4 = v7++;
        *unsigned int v4 = *v3;
      }
    }
  }
  else
  {
    *(void *)uint64_t result = *a2;
  }
  return result;
}

ot::StringWriter *ot::Mac::Address::ToString@<X0>(ot::Mac::Address *this@<X0>, ot::StringWriter *a2@<X8>)
{
  ot::String<(unsigned short)17>::String((uint64_t)a2);
  if (*((unsigned char *)this + 8) == 2)
  {
    ot::Mac::Address::GetExtended(this);
    return ot::StringWriter::AppendHexBytes(a2, v2, 8);
  }
  else if (*((unsigned char *)this + 8))
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(this);
    return ot::StringWriter::Append(a2, "0x%04x", Short);
  }
  else
  {
    return ot::StringWriter::Append(a2, "None");
  }
}

uint64_t ot::Mac::LinkFrameCounters::GetMaximum(ot::Mac::LinkFrameCounters *this)
{
  unsigned int v2 = 0;
  if (*(_DWORD *)this) {
    return *(unsigned int *)this;
  }
  return v2;
}

_DWORD *ot::Mac::LinkFrameCounters::SetAll(_DWORD *this, int a2)
{
  *this  = a2;
  return this;
}

void *ot::Mac::KeyMaterial::Clear(ot::Mac::KeyMaterial *this)
{
  ot::Mac::KeyMaterial::GetKey(this);
  return ot::Clearable<ot::Mac::Key>::Clear(v1);
}

double ot::Mac::KeyMaterial::SetFrom(__n128 *this, __n128 *a2)
{
  return ot::Mac::KeyMaterial::SetKey(this, a2);
}

__n128 ot::Mac::KeyMaterial::SetKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1  = *a2;
  return result;
}

__n128 ot::Mac::KeyMaterial::ExtractKey(ot::Mac::KeyMaterial *this, __n128 *a2)
{
  ot::Mac::KeyMaterial::GetKey(this);
  __n128 result = *v2;
  *a2  = *v2;
  return result;
}

uint64_t ot::Mac::KeyMaterial::ConvertToCryptoKey(ot::Mac::KeyMaterial *this, ot::Crypto::Key *a2)
{
  ot::Mac::KeyMaterial::GetKey(this);
  ot::Mac::Key::GetBytes(v2);
  return ot::Crypto::Key::Set((uint64_t)a2, v3, 16);
}

BOOL ot::Mac::KeyMaterial::operator==(ot::Mac::KeyMaterial *a1, ot::Mac::KeyMaterial *a2)
{
  ot::Mac::KeyMaterial::GetKey(a1);
  unsigned int v5 = v2;
  ot::Mac::KeyMaterial::GetKey(a2);
  return ot::Equatable<ot::Mac::Key>::operator==(v5, v3);
}

BOOL ot::Equatable<ot::Mac::Key>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return ot::Equatable<ot::Mac::Key>::operator==(a1, a2);
}

ot::Mac::SubMac *ot::Mac::SubMac::SubMac(ot::Mac::SubMac *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  unsigned int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  *(unsigned char *)this  = ot::Radio::GetCaps(v2);
  int v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  *((void *)this + 3)  = ot::Radio::GetTransmitBuffer(v3);
  ot::Mac::SubMac::Callbacks::Callbacks((ot::Mac::SubMac *)((char *)this + 32), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 5);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::SubMac *)((char *)this + 56));
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::SubMac *)((char *)this + 72));
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::SubMac *)((char *)this + 88));
  ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::TimerMicroIn((ot::Mac::SubMac *)((char *)this + 128), a2);
  ot::TimerMicro::TimerMicro((ot::Mac::SubMac *)((char *)this + 192), a2, (void (*)(ot::Timer *))ot::Mac::SubMac::HandleCslTimer);
  ot::Mac::CslAccuracy::Init((unsigned char *)this + 176);
  ot::Mac::SubMac::Init(this);
  return this;
}

{
  ot::Mac::SubMac::SubMac(this, a2);
  return this;
}

void ot::Mac::SubMac::HandleTimer(ot::Mac::Frame **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *((unsigned __int8 *)this + 1);
  BOOL v9 = v8 > 3;
  uint64_t v10 = v8 - 3;
  if (v9)
  {
    uint64_t v12 = v10;
    char v11 = 1;
  }
  else
  {
    uint64_t v12 = v10;
    char v11 = 0;
  }
  if ((v11 & 1) == 0)
  {
    switch(v12)
    {
      case 0:
      case 4:
        ot::Mac::SubMac::BeginTransmit(this);
        break;
      case 1:
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "Ack timer timed out", a3, a4, a5, a6, a7, a8, v14);
        uint64_t v15 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
        unsigned __int8 Channel = ot::Mac::Frame::GetChannel(this[3]);
        ot::Radio::Receive(v15, Channel);
        IgnoreError();
        ot::Mac::SubMac::HandleTransmitDone((uint64_t)this, this[3], 0, 0xEu);
        break;
      case 2:
        ot::Mac::SubMac::SampleRssi((ot::Mac::SubMac *)this);
        break;
      case 3:
        ot::Mac::SubMac::StartCsmaBackoff((ot::Mac::SubMac *)this);
        break;
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
        return;
      case 26:
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "Duplicated frame counter detected.", a3, a4, a5, a6, a7, a8, v14);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t ot::Radio::GetCaps(ot::Radio *this)
{
  return otPlatRadioGetCaps();
}

{
  return ot::Radio::GetCaps(this);
}

ot::TimerMilli *ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::TimerMicroIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Mac::SubMac::HandleCslTimer(ot::Mac::SubMac *this, ot::Timer *a2)
{
  unsigned int v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::HandleCslTimer(v2);
}

ot::TimerMicro *ot::TimerMicro::TimerMicro(ot::TimerMicro *this, ot::Instance *a2, void (*a3)(ot::Timer *))
{
  return this;
}

unsigned char *ot::Mac::CslAccuracy::Init(unsigned char *this)
{
  *this  = -1;
  this[1]  = -1;
  return this;
}

{
  return ot::Mac::CslAccuracy::Init(this);
}

uint64_t ot::Mac::SubMac::Init(ot::Mac::SubMac *this)
{
  unsigned __int8 v6 = this;
  *((unsigned char *)this + 1)  = 0;
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 5)  = 0;
  *((_WORD *)this + 3)  = -2;
  ot::Clearable<ot::Mac::ExtAddress>::Clear((void *)this + 1);
  *((unsigned char *)this + 16)  = *((unsigned char *)this + 16) & 0xFE | 1;
  *((unsigned char *)this + 17)  = 127;
  ot::Time::Time((ot::Time *)&v5, 0);
  *((_DWORD *)this + 5)  = v5;
  *((unsigned char *)this + 10ot::Mle::Tlv::SetType(this, 9) = 0;
  *((unsigned char *)this + 16) &= ~2u;
  ot::Mac::KeyMaterial::Clear((ot::Mac::SubMac *)((char *)this + 56));
  ot::Mac::KeyMaterial::Clear((ot::Mac::SubMac *)((char *)this + 72));
  ot::Mac::KeyMaterial::Clear((ot::Mac::SubMac *)((char *)this + 88));
  *((_DWORD *)this + 26)  = 0;
  *((unsigned char *)this + 10ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  ot::TimerMicro::Stop((ot::Mac::SubMac *)((char *)this + 128));
  *((_WORD *)this + 76)  = 0;
  *((unsigned char *)this + 154) &= 0xC0u;
  *((_WORD *)this + 7ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  ot::Clearable<ot::Mac::ExtAddress>::Clear((ot::Mac::SubMac *)((char *)this + 158));
  *((unsigned char *)this + 154) &= ~0x40u;
  *((unsigned char *)this + 154) &= ~0x80u;
  ot::Time::Time((ot::Time *)&v4, 0);
  *((_DWORD *)this + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v4;
  ot::Time::Time((ot::Time *)&v3, 0);
  *((_DWORD *)this + 43)  = v3;
  return ot::TimerMicro::Stop((ot::Mac::SubMac *)((char *)this + 192));
}

void *ot::Clearable<ot::Mac::ExtAddress>::Clear(void *result)
{
  *__n128 result = 0;
  return result;
}

{
  return ot::Clearable<ot::Mac::ExtAddress>::Clear(result);
}

uint64_t ot::Mac::SubMac::GetCaps(ot::Mac::SubMac *this)
{
  return *(unsigned __int8 *)this;
}

void ot::Mac::SubMac::SetPanId(ot::Mac::SubMac *this, __int16 a2)
{
  unsigned int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::SetPanId(v2, a2);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "RadioPanId: 0x%04x", v3, v4, v5, v6, v7, v8, a2);
}

uint64_t ot::Radio::SetPanId(ot::Radio *this, unsigned __int16 a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetPanId((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::SetPanId(this, a2);
}

void ot::Mac::SubMac::SetShortAddress(ot::Mac::SubMac *this, __int16 a2)
{
  *((_WORD *)this + 3)  = a2;
  unsigned int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::SetShortAddress(v2, *((_WORD *)this + 3));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "RadioShortAddress: 0x%04x", v3, v4, v5, v6, v7, v8, *((_WORD *)this + 3));
}

void ot::Mac::SubMac::SetExtAddress(ot::Mac::SubMac *this, const ot::Mac::ExtAddress *a2)
{
  char v31 = this;
  uint64_t v30 = a2;
  uint64_t v27 = this;
  *((void *)this + 1)  = *(void *)a2;
  uint64_t v26 = (ot::Mac::ExtAddress *)v34;
  ot::Mac::ExtAddress::Set(v34, v30, 1);
  v25[10]  = (ot::Mac::ExtAddress *)v33;
  ot::Mac::ExtAddress::ToString((ot::InstanceLocator *)((char *)v27 + 8), (ot::StringWriter *)v33);
  char v2 = ot::String<(unsigned short)17>::AsCString((uint64_t)v33);
  uint64_t v3 = (ot::Mac::ExtAddress *)*(unsigned __int8 *)v30;
  uint64_t v4 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 1);
  uint64_t v5 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 2);
  uint64_t v6 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 3);
  uint64_t v7 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 4);
  uint64_t v8 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 5);
  BOOL v9 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 6);
  uint64_t v10 = (ot::Mac::ExtAddress *)*((unsigned __int8 *)v30 + 7);
  v25[11]  = (ot::Mac::ExtAddress *)v25;
  v25[1]  = v3;
  uint64_t v25[2] = v4;
  v25[3]  = v5;
  v25[4]  = v6;
  v25[5]  = v7;
  v25[6]  = v8;
  v25[7]  = v9;
  char v25[8] = v10;
  uint64_t v29 = (ot *)"SubMac";
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "RadioExtAddress1: %s 0[%d] 1[%d] 2[%d] 3[%d] 4[%d] 5[%d] 6[%d] 7[%d]", v11, v12, v13, v14, v15, v16, v2);
  unsigned int v17 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(v27);
  ot::Radio::SetExtendedAddress(v17, v26);
  uint64_t v28 = v32;
  ot::Mac::ExtAddress::ToString((ot::InstanceLocator *)((char *)v27 + 8), (ot::StringWriter *)v32);
  char v18 = ot::String<(unsigned short)17>::AsCString((uint64_t)v28);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>(v29, "RadioExtAddress: %s", v19, v20, v21, v22, v23, v24, v18);
}

uint64_t ot::Mac::SubMac::Enable(ot::Mac::SubMac *this)
{
  int v5 = 0;
  if (!*((unsigned char *)this + 1))
  {
    char v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    int v5 = ot::Radio::Enable(v1);
    if (!v5)
    {
      char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      int v5 = ot::Radio::Sleep(v2);
      if (!v5) {
        ot::Mac::SubMac::SetState((uint64_t)this, 1u);
      }
    }
  }
  if (v5) {
    __assert_rtn("Enable", "sub_mac.cpp", 237, "false");
  }
  return 0;
}

void ot::Mac::SubMac::SetState(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned __int8 *)(a1 + 1) != a2)
  {
    char v8 = ot::Mac::SubMac::StateToString(*(unsigned char *)(a1 + 1));
    ot::Mac::SubMac::StateToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "RadioState: %s -> %s", v2, v3, v4, v5, v6, v7, v8);
    *(unsigned char *)(a1 + 1)  = a2;
  }
}

uint64_t ot::Mac::SubMac::Disable(ot::Mac::SubMac *this)
{
  ot::TimerMicro::Stop((ot::Mac::SubMac *)((char *)this + 192));
  ot::TimerMicro::Stop((ot::Mac::SubMac *)((char *)this + 128));
  char v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  unsigned int v5 = ot::Radio::Sleep(v1);
  if (!v5)
  {
    uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v5 = ot::Radio::Disable(v2);
    if (!v5) {
      ot::Mac::SubMac::SetState((uint64_t)this, 0);
    }
  }
  return v5;
}

uint64_t ot::Radio::Disable(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioDisable((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::Disable(this);
}

uint64_t ot::Mac::SubMac::Sleep(ot::Mac::SubMac *this)
{
  char v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  unsigned int v11 = ot::Radio::Sleep(v1);
  if (v11)
  {
    char v2 = ot::ErrorToString(v11);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "RadioSleep() failed, error: %s", v3, v4, v5, v6, v7, v8, v2);
  }
  else
  {
    ot::Mac::SubMac::SetState((uint64_t)this, 1u);
  }
  return v11;
}

uint64_t ot::Mac::SubMac::Receive(ot::Mac::SubMac *this, unsigned __int8 a2)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v13 = ot::Radio::Sleep(v2);
  }
  else
  {
    uint64_t v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int v13 = ot::Radio::Receive(v3, a2);
  }
  if (v13)
  {
    char v4 = ot::ErrorToString(v13);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "RadioReceive() failed, error: %s", v5, v6, v7, v8, v9, v10, v4);
  }
  else
  {
    ot::Mac::SubMac::SetState((uint64_t)this, 2u);
  }
  return v13;
}

void ot::Mac::SubMac::CslSample(ot::Mac::SubMac *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0
    || (ot::Mac::SubMac::SetState((uint64_t)this, 8u), (*((unsigned char *)this + 154) & 0x40) == 0)
    || ot::Mac::SubMac::RadioSupportsReceiveTiming(this))
  {
    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::Sleep(v2);
    IgnoreError();
  }
  else
  {
    char v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::Receive(v1, *((unsigned char *)this + 154) & 0x3F);
    IgnoreError();
  }
}

BOOL ot::Mac::SubMac::RadioSupportsReceiveTiming(ot::Mac::SubMac *this)
{
  return *(char *)this < 0;
}

{
  return ot::Mac::SubMac::RadioSupportsReceiveTiming(this);
}

uint64_t ot::Mac::SubMac::WedPresent(uint64_t this, char a2)
{
  *(unsigned char *)(this + 15++*(_WORD *)(this + 4) = *(unsigned char *)(this + 154) & 0x7F | ((a2 & 1) << 7);
  return this;
}

void ot::Mac::SubMac::HandleReceiveDone(uint64_t a1, ot::Mac::Frame *a2, unsigned int a3)
{
  v9[1]  = (ot::Mac::Frame *)a1;
  v9[0]  = a2;
  unsigned int v8 = a3;
  if (ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet((void *)(a1 + 40)) && v9[0] && !v8)
  {
    char v7 = 0;
    ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::RxFrame *&,BOOL>(a1 + 40, v9, &v7);
  }
  if (!ot::Mac::SubMac::ShouldHandleTransmitSecurity((ot::Mac::SubMac *)a1)
    && v9[0]
    && (*((unsigned char *)v9[0] + 31) & 2) != 0)
  {
    ot::Mac::SubMac::SignalFrameCounterUsed((ot::Mac::SubMac *)a1, *((_DWORD *)v9[0] + 6), *((unsigned char *)v9[0] + 28));
  }
  if (v9[0] && !v8)
  {
    char v6 = 0;
    LOBYTE(v3)  = 0;
    if (*(_WORD *)(a1 + 152)) {
      int v3 = (*((unsigned __int8 *)v9[0] + 31) >> 1) & 1;
    }
    char v6 = v3;
    if (v3)
    {
      ot::Time::Time((ot::Time *)&v5, *((void *)v9[0] + 2));
      *(_DWORD *)(a1 + 17ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v5;
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    ot::Mac::SubMac::Callbacks::ReceiveDone((ot::InstanceLocator *)(a1 + 32), v9[0], v8);
  }
}

BOOL ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet(a1);
}

uint64_t ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::RxFrame *&,BOOL>(uint64_t a1, void *a2, unsigned char *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3 & 1, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::RxFrame *&,BOOL>(a1, a2, a3);
}

BOOL ot::Mac::SubMac::ShouldHandleTransmitSecurity(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsTransmitSecurity(this))
  {
    return 0;
  }
  else
  {
    char v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }
}

void ot::Mac::SubMac::SignalFrameCounterUsed(ot::Mac::SubMac *this, unsigned int a2, char a3)
{
  if (a3 == *((unsigned char *)this + 108))
  {
    ot::Mac::SubMac::Callbacks::FrameCounterUsed((ot::Mac::SubMac *)((char *)this + 32), a2);
    if (*((_DWORD *)this + 26) <= a2) {
      *((_DWORD *)this + 26)  = a2 + 1;
    }
  }
}

uint64_t ot::Mac::SubMac::Send(ot::Mac::SubMac *this)
{
  unsigned int v5 = 0;
  if (*((unsigned char *)this + 1) == 5)
  {
    return 13;
  }
  else if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    int v3 = (ot::Mac::Frame *)*((void *)this + 3);
    if (ot::Mac::Frame::GetAckRequest(v3)) {
      unsigned int v1 = 14;
    }
    else {
      unsigned int v1 = 0;
    }
    ot::Mac::SubMac::Callbacks::TransmitDone((ot::Mac::SubMac *)((char *)this + 32), (uint64_t)v3, 0, v1);
  }
  else
  {
    ot::Mac::SubMac::ProcessTransmitSecurity(this);
    *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
    *((unsigned char *)this + 5)  = 0;
    *((unsigned char *)this + 10ot::Mle::Tlv::SetType(this, 9) = 0;
    *((unsigned char *)this + ++*(_WORD *)(this + 4) = 0;
    *((unsigned char *)this + 3)  = 0;
    ot::Mac::SubMac::StartCsmaBackoff(this);
  }
  return v5;
}

void ot::Mac::SubMac::ProcessTransmitSecurity(ot::Mac::SubMac *this)
{
  char v7 = this;
  ExtAddress  = 0;
  unsigned __int8 v5 = 0;
  if (ot::Mac::Frame::GetSecurityEnabled(*((ot::Mac::Frame **)this + 3))
    && (ot::Mac::TxFrame::IsSecurityProcessed(*((ot::Mac::TxFrame **)this + 3)) & 1) == 0
    && !ot::Mac::Frame::GetKeyIdMode(*((ot::Mac::Frame **)this + 3), &v5))
  {
    if ((ot::Mac::TxFrame::IsHeaderUpdated(*((ot::Mac::TxFrame **)this + 3)) & 1) == 0) {
      ot::Mac::Frame::SetKeyId(*((ot::Mac::Frame **)this + 3), *((unsigned char *)this + 108));
    }
    if (ot::Mac::SubMac::ShouldHandleTransmitSecurity(this))
    {
      if (ot::Mac::Frame::IsWakeupFrame(*((ot::Mac::Frame **)this + 3)))
      {
        if (v5 != 16) {
          return;
        }
      }
      else if (v5 != 8)
      {
        return;
      }
      char v2 = (ot::Mac::TxFrame *)*((void *)this + 3);
      CurrentMacKey  = (const ot::Mac::KeyMaterial *)ot::Mac::SubMac::GetCurrentMacKey(this);
      ot::Mac::TxFrame::SetAesKey((uint64_t)v2, CurrentMacKey);
      if ((ot::Mac::TxFrame::IsHeaderUpdated(*((ot::Mac::TxFrame **)this + 3)) & 1) == 0)
      {
        FrameCounter  = ot::Mac::SubMac::GetFrameCounter(this);
        ot::Mac::Frame::SetFrameCounter(*((ot::Mac::Frame **)this + 3), FrameCounter);
        ot::Mac::SubMac::SignalFrameCounterUsed(this, FrameCounter, *((unsigned char *)this + 108));
      }
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::SubMac::GetExtAddress(this);
      ot::Mac::TxFrame::ProcessTransmitAesCcm(*((ot::Mac::TxFrame **)this + 3), ExtAddress);
    }
  }
}

void ot::Mac::SubMac::StartCsmaBackoff(ot::Mac::SubMac *this)
{
  uint64_t v12 = this;
  unsigned __int8 v11 = 0;
  unsigned __int8 v11 = *((unsigned char *)this + 2) + 3;
  if (*(_DWORD *)(*((void *)this + 3) + 32))
  {
    ot::Mac::SubMac::SetState((uint64_t)this, 7u);
    if (ot::Mac::SubMac::ShouldHandleTransmitTargetTime(this))
    {
      ot::InstanceLocator::GetInstance(this);
      int Now = otPlatRadioGetNow();
      ot::Time::Time((ot::Time *)&v10, Now);
      ot::Time::Time((ot::Time *)&v6, *(_DWORD *)(*((void *)this + 3) + 36));
      int v7 = ot::Time::operator+(&v6, *(_DWORD *)(*((void *)this + 3) + 32));
      int v8 = ot::Time::operator-(&v7, 128);
      int v9 = ot::Time::operator-(&v8, 40);
      if (ot::Time::operator<(&v10, &v9))
      {
        ot::Time::Time((ot::Time *)&v3, *(_DWORD *)(*((void *)this + 3) + 36));
        int v4 = ot::Time::operator-(&v3, 128);
        int v5 = ot::Time::operator-(&v4, 40);
        ot::TimerMicro::StartAt((ot::Mac::SubMac *)((char *)this + 128), v5, *(_DWORD *)(*((void *)this + 3) + 32));
      }
      else
      {
        ot::Mac::SubMac::BeginTransmit(this);
      }
      return;
    }
LABEL_8:
    ot::Mac::SubMac::BeginTransmit(this);
    return;
  }
  ot::Mac::SubMac::SetState((uint64_t)this, 3u);
  if (!ot::Mac::SubMac::ShouldHandleCsmaBackOff(this)) {
    goto LABEL_8;
  }
  if (v11 > 5u) {
    unsigned __int8 v11 = 5;
  }
  ot::Mac::SubMac::StartTimerForBackoff((ot::Mac::Frame **)this, v11);
}

uint64_t ot::Mac::SubMac::GetFrameCounter(ot::Mac::SubMac *this)
{
  return *((unsigned int *)this + 26);
}

{
  return ot::Mac::SubMac::GetFrameCounter(this);
}

BOOL ot::Mac::SubMac::ShouldHandleTransmitTargetTime(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsTransmitTiming(this))
  {
    return 0;
  }
  else
  {
    unsigned int v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }
}

unsigned char *ot::Mac::SubMac::BeginTransmit(unsigned char *this)
{
  int v9 = this;
  int v5 = (ot::Mac::SubMac *)this;
  int v8 = 0;
  if (this[1] == 3 || this[1] == 7)
  {
    if ((*this & 0x10) == 0)
    {
      int v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
      unsigned __int8 Channel = ot::Mac::Frame::GetChannel(*((ot::Mac::Frame **)v5 + 3));
      if (ot::Radio::Receive(v4, Channel)) {
        __assert_rtn("BeginTransmit", "sub_mac.cpp", 636, "false");
      }
    }
    ot::Mac::SubMac::SetState((uint64_t)v5, 4u);
    if (ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet((void *)v5 + 5))
    {
      uint64_t v7 = *((void *)v5 + 3);
      char v6 = 1;
      ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::TxFrame *,BOOL>((uint64_t)v5 + 40, &v7, &v6);
    }
    ot::Mac::SubMac::InitializeCSTPhase((ot::Mac::Frame **)v5);
    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(v5);
    this  = (unsigned char *)ot::Radio::Transmit(v2, *((ot::Mac::TxFrame **)v5 + 3));
    int v8 = (int)this;
    if (this == 13 && *(_DWORD *)(*((void *)v5 + 3) + 32))
    {
      *(_DWORD *)(*((void *)v5 + 3) + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
      *(_DWORD *)(*((void *)v5 + 3) + 36)  = 0;
      int v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(v5);
      this  = (unsigned char *)ot::Radio::Transmit(v3, *((ot::Mac::TxFrame **)v5 + 3));
      int v8 = (int)this;
    }
    if (v8) {
      __assert_rtn("BeginTransmit", "sub_mac.cpp", 664, "false");
    }
  }
  return this;
}

BOOL ot::Mac::SubMac::ShouldHandleCsmaBackOff(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsCsmaBackoff(this))
  {
    return 0;
  }
  else
  {
    unsigned int v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }
}

void ot::Mac::SubMac::StartTimerForBackoff(ot::Mac::Frame **this, char a2)
{
  unsigned int v13 = 320 * ot::Random::NonCrypto::GetUint32InRange(0, 1 << a2);
  if ((_BYTE)this[2])
  {
    unsigned __int8 v11 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
    unsigned __int8 Channel = ot::Mac::Frame::GetChannel(this[3]);
    ot::Radio::Receive(v11, Channel);
  }
  else
  {
    int v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)this);
    ot::Radio::Sleep(v3);
  }
  IgnoreError();
  ot::TimerMicro::Start((ot::TimerMicro *)(this + 16), v13);
  if (*((unsigned char *)this + 1) == 6)
  {
    char v4 = ot::ToUlong(v13);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "Delaying retx for %lu usec (be=%u)", v5, v6, v7, v8, v9, v10, v4);
  }
}

uint64_t ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::TxFrame *,BOOL>(uint64_t a1, void *a2, unsigned char *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3 & 1, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::TxFrame *,BOOL>(a1, a2, a3);
}

uint64_t ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::SubMac *this, ot::Mac::TxFrame *a2)
{
  uint64_t result = ot::Mac::SubMac::ShouldHandleAckTimeout(this);
  if (result)
  {
    uint64_t result = ot::Mac::Frame::GetAckRequest(a2);
    if (result) {
      return ot::TimerMicro::Start((ot::Mac::SubMac *)((char *)this + 128), 0x3E80u);
    }
  }
  return result;
}

BOOL ot::Mac::SubMac::ShouldHandleAckTimeout(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsAckTimeout(this))
  {
    return 0;
  }
  else
  {
    unsigned int v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }
}

void ot::Mac::SubMac::HandleTransmitDone(uint64_t a1, ot::Mac::TxFrame *a2, ot::Mac::RxFrame *a3, unsigned int a4)
{
  uint64_t v43 = a1;
  uint64_t v42 = a2;
  int v41 = a3;
  unsigned int v40 = a4;
  char v39 = 1;
  BOOL v38 = 0;
  char v37 = 0;
  unsigned __int8 v36 = -1;
  ot::TimerMicro::Stop((ot::TimerMicro *)(a1 + 128));
  if (v40)
  {
    uint64_t v11 = v40;
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 0;
  }
  if (v10)
  {
LABEL_18:
    char v15 = ot::ErrorToString(v40);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "SubMac::HandleTransmitDone Unhandled error=%s", v16, v17, v18, v19, v20, v21, v15);
    __assert_rtn("HandleTransmitDone", "sub_mac.cpp", 795, "false");
  }
  switch(v11)
  {
    case 0:
    case 14:
      goto LABEL_7;
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      goto LABEL_18;
    case 5:
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "Radio access not granted by the external device.", v4, v5, v6, v7, v8, v9, v28);
      if (ot::Mac::Frame::GetKeyIdMode(v42, &v36) || v36) {
        char v37 = 1;
      }
      unsigned int v40 = 15;
      break;
    case 11:
      break;
    case 15:
      char v39 = 0;
LABEL_7:
      if (ot::Mac::TxFrame::IsCsmaCaEnabled(v42))
      {
        char Channel = ot::Mac::Frame::GetChannel(v42);
        ot::Mac::SubMac::Callbacks::RecordCcaStatus((ot::Mac::SubMac::Callbacks *)(a1 + 32), v39 & 1, Channel);
      }
      if (v41)
      {
        ot::Mac::Frame::GetHeaderIe(v42, 0x1Au);
        if (v13)
        {
          ot::Time::Time((ot::Time *)&v35, *((void *)v41 + 2));
          *(_DWORD *)(a1 + 17ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v35;
          ot::Time::operator-=((_DWORD *)(a1 + 172), 192);
          unsigned __int16 Length = ot::Mac::Frame::GetLength(v42);
          ot::Time::operator-=((_DWORD *)(a1 + 172), 32 * Length);
        }
      }
      break;
    case 29:
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "Duplicated frame counter detected.", v4, v5, v6, v7, v8, v9, v28);
      break;
    default:
      JUMPOUT(0);
  }
  if (ot::CallbackBase<void (*)(otRadioFrame const*,BOOL,void *)>::IsSet((void *)(a1 + 40)))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "%s:%d: mPcapCallback", v22, v23, v24, v25, v26, v27, (char)"void ot::Mac::SubMac::HandleTransmitDone(TxFrame &, RxFrame *, Error)");
    char v34 = v42;
    char v33 = 0;
    ot::Callback<void (*)(otRadioFrame const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Mac::TxFrame *,BOOL>(a1 + 40, &v34, &v33);
  }
  ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone((ot::Mac::SubMac *)a1, v42);
  if ((v39 & 1) != 0
    || !ot::Mac::SubMac::ShouldHandleCsmaBackOff((ot::Mac::SubMac *)a1)
    || (int v31 = *(unsigned __int8 *)(a1 + 2), v31 >= ot::Mac::TxFrame::GetMaxCsmaBackoffs(v42))
    || (v37 & 1) != 0)
  {
    *(unsigned char *)(a1 + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
    if (v40 == 14)
    {
      ++*(unsigned char *)(a1 + 3);
    }
    else if (v40 == 15)
    {
      ++*(unsigned char *)(a1 + 4);
    }
    BOOL v30 = 0;
    if (v40)
    {
      BOOL v30 = 0;
      if (ot::Mac::SubMac::ShouldHandleRetries((ot::Mac::SubMac *)a1))
      {
        int v29 = *(unsigned __int8 *)(a1 + 5);
        BOOL v30 = v29 < ot::Mac::TxFrame::GetMaxFrameRetries(v42);
      }
    }
    BOOL v38 = v30;
    ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus((ot::InstanceLocator *)(a1 + 32), v42, v41, v40, *(unsigned char *)(a1 + 5), v30);
    if (v38)
    {
      ++*(unsigned char *)(a1 + 5);
      ot::Mac::TxFrame::SetIsARetransmission((uint64_t)v42, 1);
      if (v40 == 14)
      {
        ot::Mac::SubMac::SetState(a1, 6u);
        ot::Mac::SubMac::StartTimerForBackoff((ot::Mac::Frame **)a1, *(unsigned char *)(a1 + 109));
        *(unsigned char *)(a1 + 10ot::Mle::Tlv::SetType(this, 9) = ot::Min<unsigned char>(*(unsigned char *)(a1 + 109) + 1, 5u);
      }
      else
      {
        ot::Mac::SubMac::StartCsmaBackoff((ot::Mac::SubMac *)a1);
      }
    }
    else
    {
      if (ot::Mac::SubMac::ShouldHandleRetries((ot::Mac::SubMac *)a1)) {
        ot::Mac::TxFrame::SetTxRetryCount((uint64_t)v42, *(unsigned char *)(a1 + 5));
      }
      ot::Mac::SubMac::SetState(a1, 2u);
      ot::Mac::SubMac::Callbacks::TransmitDone((ot::InstanceLocator *)(a1 + 32), (uint64_t)v42, (uint64_t)v41, v40);
    }
  }
  else
  {
    ++*(unsigned char *)(a1 + 2);
    ot::Mac::SubMac::StartCsmaBackoff((ot::Mac::SubMac *)a1);
  }
}

uint64_t ot::Mac::TxFrame::IsCsmaCaEnabled(ot::Mac::TxFrame *this)
{
  return (*((unsigned __int8 *)this + 45) >> 2) & 1;
}

{
  return ot::Mac::TxFrame::IsCsmaCaEnabled(this);
}

_DWORD *ot::Time::operator-=(_DWORD *result, int a2)
{
  *result -= a2;
  return result;
}

{
  return ot::Time::operator-=(result, a2);
}

void ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::SubMac *this, const ot::Mac::TxFrame *a2)
{
  char v10 = this;
  uint64_t v9 = a2;
  unsigned __int8 v8 = 0;
  unsigned __int8 v7 = 0;
  unsigned int v6 = 0;
  if (ot::Mac::Frame::GetType(a2) == 5 && !ot::Mac::Frame::GetFrameCounter(v9, &v6))
  {
    char v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Radio::SetMacFrameCounter(v2, v6 + 1);
  }
  if (!ot::Mac::SubMac::ShouldHandleTransmitSecurity(this)
    && ot::Mac::Frame::GetSecurityEnabled(v9)
    && (ot::Mac::TxFrame::IsHeaderUpdated(v9) & 1) != 0)
  {
    int v3 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    IsEnabled  = ot::Mac::LinkRaw::IsEnabled(v3);
    if (ot::Mac::Frame::GetKeyIdMode(v9, &v8))
    {
      if (!IsEnabled) {
        __assert_rtn("SignalFrameCounterUsedOnTxDone", "sub_mac.cpp", 919, "allowError");
      }
    }
    else
    {
      if (ot::Mac::Frame::GetType(v9) == 5)
      {
        if (v8 != 16) {
          return;
        }
      }
      else if (v8 != 8)
      {
        return;
      }
      if (ot::Mac::Frame::GetFrameCounter(v9, &v6))
      {
        if (!IsEnabled) {
          __assert_rtn("SignalFrameCounterUsedOnTxDone", "sub_mac.cpp", 934, "allowError");
        }
      }
      else if (ot::Mac::Frame::GetKeyId(v9, &v7))
      {
        if (!IsEnabled) {
          __assert_rtn("SignalFrameCounterUsedOnTxDone", "sub_mac.cpp", 935, "allowError");
        }
      }
      else
      {
        ot::Mac::SubMac::SignalFrameCounterUsed(this, v6, v7);
      }
    }
  }
}

uint64_t ot::Mac::TxFrame::GetMaxCsmaBackoffs(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 40);
}

{
  return ot::Mac::TxFrame::GetMaxCsmaBackoffs(this);
}

BOOL ot::Mac::SubMac::ShouldHandleRetries(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsRetries(this))
  {
    return 0;
  }
  else
  {
    unsigned int v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }
}

uint64_t ot::Mac::TxFrame::SetTxRetryCount(uint64_t this, char a2)
{
  *(unsigned char *)(this + 43)  = a2;
  return this;
}

{
  return ot::Mac::TxFrame::SetTxRetryCount(this, a2);
}

uint64_t ot::Radio::SetMacFrameCounter(ot::Radio *this, unsigned int a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetMacFrameCounter((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::SetMacFrameCounter(this, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::LinkRaw>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
}

uint64_t ot::Mac::SubMac::GetRssi(ot::Mac::SubMac *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    return 127;
  }
  else
  {
    unsigned int v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    return (char)ot::Radio::GetRssi(v1);
  }
}

uint64_t ot::Radio::GetRssi(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return (char)otPlatRadioGetRssi((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::GetRssi(this);
}

uint64_t ot::Mac::SubMac::GetNoiseFloor(ot::Mac::SubMac *this)
{
  unsigned int v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  return (char)ot::Radio::GetReceiveSensitivity(v1);
}

uint64_t ot::Radio::GetReceiveSensitivity(ot::Radio *this)
{
  return (char)otPlatRadioGetReceiveSensitivity();
}

{
  return ot::Radio::GetReceiveSensitivity(this);
}

uint64_t ot::Mac::SubMac::EnergyScan(ot::Mac::SubMac *this, unsigned __int8 a2, unsigned __int16 a3)
{
  char v15 = this;
  unsigned __int8 v14 = a2;
  unsigned __int16 v13 = a3;
  unsigned int v12 = 0;
  int v9 = *((unsigned __int8 *)this + 1);
  if (*((unsigned char *)this + 1) && (v9 != 2 && v9 != 1 ? (char v3 = 0) : (char v3 = 1), (v3 & 1) != 0 || (v9 - 3) > 4))
  {
    if ((*((unsigned char *)this + 16) & 2) != 0)
    {
      ot::Mac::SubMac::HandleEnergyScanDone(this, 127);
    }
    else if (ot::Mac::SubMac::RadioSupportsEnergyScan(this))
    {
      uint64_t v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::EnergyScan(v4, v14, v13);
      IgnoreError();
      ot::Mac::SubMac::SetState((uint64_t)this, 5u);
    }
    else if (ot::Mac::SubMac::ShouldHandleEnergyScan(this))
    {
      uint64_t v5 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      if (ot::Radio::Receive(v5, v14)) {
        __assert_rtn("EnergyScan", "sub_mac.cpp", 1004, "false");
      }
      ot::Mac::SubMac::SetState((uint64_t)this, 5u);
      *((unsigned char *)this + 17)  = 127;
      int Now = ot::TimerMilli::GetNow(v6);
      int v11 = ot::Time::operator+(&Now, v13);
      *((_DWORD *)this + 5)  = v11;
      ot::TimerMicro::Start((ot::Mac::SubMac *)((char *)this + 128), 0);
    }
    else
    {
      return 12;
    }
  }
  else
  {
    return 13;
  }
  return v12;
}

void ot::Mac::SubMac::HandleEnergyScanDone(ot::Mac::SubMac *this, char a2)
{
}

BOOL ot::Mac::SubMac::RadioSupportsEnergyScan(ot::Mac::SubMac *this)
{
  return (*(unsigned char *)this & 2) != 0;
}

{
  return ot::Mac::SubMac::RadioSupportsEnergyScan(this);
}

uint64_t ot::Radio::EnergyScan(ot::Radio *this, char a2, __int16 a3)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioEnergyScan((uint64_t)InstancePtr, a2, a3);
}

{
  return ot::Radio::EnergyScan(this, a2, a3);
}

BOOL ot::Mac::SubMac::ShouldHandleEnergyScan(ot::Mac::SubMac *this)
{
  if (ot::Mac::SubMac::RadioSupportsEnergyScan(this))
  {
    return 0;
  }
  else
  {
    unsigned int v1 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    return !ot::Mac::LinkRaw::IsEnabled(v1);
  }
}

void ot::Mac::SubMac::SampleRssi(ot::Mac::SubMac *this)
{
  uint64_t v6 = this;
  if (ot::Mac::SubMac::RadioSupportsEnergyScan(this)) {
    __assert_rtn("SampleRssi", "sub_mac.cpp", 1022, "!RadioSupportsEnergyScan()");
  }
  Rsschar i = (ot::TimerMilli *)ot::Mac::SubMac::GetRssi(this);
  char v5 = (char)Rssi;
  if ((char)Rssi != 127 && (*((unsigned char *)this + 17) == 127 || v5 > *((char *)this + 17))) {
    *((unsigned char *)this + 17)  = v5;
  }
  int Now = ot::TimerMilli::GetNow(Rssi);
  if (ot::Time::operator<(&Now, (int *)this + 5))
  {
    FireTime  = ot::Timer::GetFireTime((ot::Mac::SubMac *)((char *)this + 128));
    ot::TimerMicro::StartAt((ot::Mac::SubMac *)((char *)this + 128), FireTime, 0x1F400u);
  }
  else
  {
    ot::Mac::SubMac::HandleEnergyScanDone(this, *((unsigned char *)this + 17));
  }
}

BOOL ot::Mac::SubMac::RadioSupportsTransmitSecurity(ot::Mac::SubMac *this)
{
  return (*(unsigned char *)this & 0x20) != 0;
}

{
  return ot::Mac::SubMac::RadioSupportsTransmitSecurity(this);
}

BOOL ot::Mac::SubMac::RadioSupportsCsmaBackoff(ot::Mac::SubMac *this)
{
  return (*(unsigned char *)this & 0xC) != 0;
}

{
  return ot::Mac::SubMac::RadioSupportsCsmaBackoff(this);
}

BOOL ot::Mac::SubMac::RadioSupportsAckTimeout(ot::Mac::SubMac *this)
{
  return (*(unsigned char *)this & 1) != 0;
}

{
  return ot::Mac::SubMac::RadioSupportsAckTimeout(this);
}

BOOL ot::Mac::SubMac::RadioSupportsRetries(ot::Mac::SubMac *this)
{
  return (*(unsigned char *)this & 4) != 0;
}

{
  return ot::Mac::SubMac::RadioSupportsRetries(this);
}

BOOL ot::Mac::SubMac::RadioSupportsTransmitTiming(ot::Mac::SubMac *this)
{
  return (*(unsigned char *)this & 0x40) != 0;
}

{
  return ot::Mac::SubMac::RadioSupportsTransmitTiming(this);
}

char *ot::Mac::SubMac::StateToString(unsigned __int8 a1)
{
  return ot::Mac::SubMac::StateToString(ot::Mac::SubMac::State)::kStateStrings[a1];
}

uint64_t ot::Mac::SubMac::SetMacKey(ot::Mac::SubMac *this, unsigned __int8 a2, unsigned __int8 a3, const ot::Mac::KeyMaterial *a4, const ot::Mac::KeyMaterial *a5, const ot::Mac::KeyMaterial *a6)
{
  if (a2)
  {
    if (a2 == 8)
    {
      *((unsigned char *)this + 10ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a3;
      *(_OWORD *)((char *)this + 56)  = *(_OWORD *)a4;
      *(_OWORD *)((char *)this + 7ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_OWORD *)a5;
      *(_OWORD *)((char *)this + 8ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_OWORD *)a6;
    }
    else if (a2 != 16)
    {
      __assert_rtn("SetMacKey", "sub_mac.cpp", 1237, "false");
    }
  }
  uint64_t result = ot::Mac::SubMac::ShouldHandleTransmitSecurity(this);
  if ((result & 1) == 0)
  {
    uint64_t v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    return ot::Radio::SetMacKey(v7, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t ot::Radio::SetMacKey(ot::Radio *this, unsigned __int8 a2, unsigned __int8 a3, const ot::Mac::KeyMaterial *a4, const ot::Mac::KeyMaterial *a5, const ot::Mac::KeyMaterial *a6)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetMacKey((uint64_t)InstancePtr, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, 0, v7);
}

{
  return ot::Radio::SetMacKey(this, a2, a3, a4, a5, a6);
}

uint64_t ot::Mac::SubMac::SetFrameCounter(ot::Mac::SubMac *this, unsigned int a2, char a3)
{
  char v6 = a3 & 1;
  if ((a3 & 1) == 0 || a2 > *((_DWORD *)this + 26)) {
    *((_DWORD *)this + 26)  = a2;
  }
  uint64_t result = ot::Mac::SubMac::ShouldHandleTransmitSecurity(this);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    if (v6) {
      return ot::Radio::SetMacFrameCounterIfLarger(v4, a2);
    }
    else {
      return ot::Radio::SetMacFrameCounter(v4, a2);
    }
  }
  return result;
}

uint64_t ot::Radio::SetMacFrameCounterIfLarger(ot::Radio *this, unsigned int a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetMacFrameCounterIfLarger((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::SetMacFrameCounterIfLarger(this, a2);
}

BOOL ot::Mac::SubMac::UpdateCsl(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3, unsigned __int16 a4, uint64_t a5, _DWORD *a6)
{
  BOOL v24 = a2 != *(unsigned __int16 *)(a1 + 152);
  BOOL v23 = a3 != (*(unsigned char *)(a1 + 154) & 0x3F);
  BOOL v22 = a4 != *(unsigned __int16 *)(a1 + 156);
  uint64_t v6 = (const void *)ot::AsCoreType<otExtAddress>(a5);
  BOOL v21 = ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v6, (const void *)(a1 + 158));
  BOOL v20 = *a6 != 0;
  BOOL v19 = 1;
  if (!v24)
  {
    BOOL v19 = 1;
    if (!v23)
    {
      BOOL v19 = 1;
      if (!v22)
      {
        BOOL v19 = 1;
        if (!v21) {
          BOOL v19 = *a6 != 0;
        }
      }
    }
  }
  if (v19)
  {
    *(unsigned char *)(a1 + 15++*(_WORD *)(this + 4) = *(unsigned char *)(a1 + 154) & 0xC0 | a3 & 0x3F;
    if (v23)
    {
      uint64_t v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)a1);
      if (ot::Radio::UpdateCslChannel(v7, a3)) {
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SubMac", "Note: running legacy RCP firmware - PAN channel change not supported while in SSED mode", v8, v9, v10, v11, v12, v13, v17);
      }
    }
    if (v24 || v22 || v21 || v20)
    {
      *(_WORD *)(a1 + 15ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
      *(_WORD *)(a1 + 156)  = a4;
      *(void *)(a1 + 15ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(void *)ot::AsCoreType<otExtAddress>(a5);
      unsigned __int8 v14 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)a1);
      ot::Radio::EnableCsl(v14, a2, a4, a5);
      IgnoreError();
      if ((*(unsigned char *)(a1 + 154) & 0x80) != 0)
      {
        char v15 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)a1);
        ot::Radio::EnableCst(v15, a2, a4, a5);
        IgnoreError();
      }
      if (v24 || v20)
      {
        ot::TimerMicro::Stop((ot::TimerMicro *)(a1 + 192));
        *(unsigned char *)(a1 + 154) &= ~0x40u;
      }
    }
  }
  *a6  = ot::Time::GetValue((ot::Time *)(a1 + 168));
  return v19;
}

uint64_t ot::Radio::UpdateCslChannel(ot::Radio *this, unsigned __int8 a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioUpdateCslChannel((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::UpdateCslChannel(this, a2);
}

uint64_t ot::Radio::EnableCsl(ot::Radio *a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(a1);
  return otPlatRadioEnableCsl((uint64_t)InstancePtr, a2, a3, a4, v5, v6, v7, v8);
}

{
  return ot::Radio::EnableCsl(a1, a2, a3, a4);
}

uint64_t ot::Radio::EnableCst(ot::Radio *a1, unsigned int a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(a1);
  return otPlatRadioEnableCst((uint64_t)InstancePtr, a2, a3, a4, v5, v6, v7, v8);
}

{
  return ot::Radio::EnableCst(a1, a2, a3, a4);
}

uint64_t ot::Mac::SubMac::HandleCslTimer(ot::Mac::SubMac *this)
{
  uint64_t v44 = this;
  unsigned int v43 = 0;
  unsigned int v43 = 160 * *((unsigned __int16 *)this + 76);
  unsigned int v42 = 0;
  unsigned int v41 = 0;
  ot::Mac::SubMac::GetCslWindowEdges(this, &v42, &v41);
  if ((*((unsigned char *)this + 154) & 0x40) != 0)
  {
    *((unsigned char *)this + 154) &= ~0x40u;
    int v37 = ot::Time::operator-((_DWORD *)this + 42, v42);
    int v40 = v37;
    if (*((unsigned char *)this + 1) == 8)
    {
      unsigned int v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::Sleep(v1);
      IgnoreError();
      int Now = ot::TimerMicro::GetNow(v2);
      uint64_t Value = ot::Time::GetValue((ot::Time *)&Now);
      char v4 = ot::ToUlong(Value);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "CSL sleep %lu", v5, v6, v7, v8, v9, v10, v4);
    }
  }
  else
  {
    if (ot::Mac::SubMac::RadioSupportsReceiveTiming(this))
    {
      ot::Time::operator+=((_DWORD *)this + 42, v43);
      int v35 = ot::Time::operator-((_DWORD *)this + 42, v42);
      int v40 = v35;
      v42 -= 10000;
    }
    else
    {
      int v34 = ot::Time::operator+((_DWORD *)this + 42, v41);
      int v40 = v34;
      *((unsigned char *)this + 15++*(_WORD *)(this + 4) = *((unsigned char *)this + 154) & 0xBF | 0x40;
      ot::Time::operator+=((_DWORD *)this + 42, v43);
    }
    *((_WORD *)this + 9ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v42 + v41;
    int v29 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 168));
    ot::Radio::UpdateCslSampleTime(v29);
    if ((*((unsigned char *)this + 154) & 0x80) != 0)
    {
      char v28 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      int v11 = ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 168));
      ot::Radio::UpdateCstSampleTime(v28, v11 + v43 / 2);
    }
    if (ot::Mac::SubMac::RadioSupportsReceiveTiming(this) && *((unsigned char *)this + 1) && *((unsigned char *)this + 1) != 2)
    {
      int v12 = ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 168));
      *((_DWORD *)this + 45)  = v12 - v43 - v42;
      uint64_t v13 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::ReceiveAt(v13, *((unsigned char *)this + 154) & 0x3F, *((_DWORD *)this + 45), *((unsigned __int16 *)this + 92), 0);
      IgnoreError();
    }
    else if (*((unsigned char *)this + 1) == 8)
    {
      unsigned __int8 v14 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      ot::Radio::Receive(v14, *((unsigned char *)this + 154) & 0x3F);
      IgnoreError();
      int v33 = ot::TimerMicro::GetNow(v15);
      uint64_t v16 = ot::Time::GetValue((ot::Time *)&v33);
      char v27 = ot::ToUlong(v16);
      ot::ToUlong(*((unsigned __int16 *)this + 92));
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SubMac", "CSL sample %lu, duration %lu", v17, v18, v19, v20, v21, v22, v27);
    }
  }
  ot::InstanceLocator::GetInstance(this);
  int v23 = otPlatRadioGetNow();
  BOOL v24 = ot::Time::Time((ot::Time *)&v32, v23);
  int v38 = v32;
  int v39 = ot::TimerMicro::GetNow(v24);
  if (ot::Time::operator>=(&v40, &v38))
  {
    int v25 = ot::Time::operator-(&v40, &v38);
    int v31 = ot::Time::operator+(&v39, v25);
  }
  else
  {
    int v31 = v39;
  }
  int v40 = v31;
  return ot::TimerMicro::FireAt((ot::Mac::SubMac *)((char *)this + 192), v31);
}

uint64_t ot::Mac::SubMac::GetCslWindowEdges(ot::Mac::SubMac *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v13 = 160 * *((unsigned __int16 *)this + 76) / 2;
  ot::InstanceLocator::GetInstance(this);
  int Now = otPlatRadioGetNow();
  uint64_t v7 = Now - ot::Time::GetValue((ot::Mac::SubMac *)((char *)this + 172));
  uint64_t v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  unsigned __int8 CslAccuracy = ot::Radio::GetCslAccuracy(v3);
  int v11 = v7
      * (ot::Mac::CslAccuracy::GetClockAccuracy((ot::Mac::SubMac *)((char *)this + 176)) + CslAccuracy)
      / 0xF4240uLL;
  UncertaintyInMicrosec  = ot::Mac::CslAccuracy::GetUncertaintyInMicrosec((ot::Mac::SubMac *)((char *)this + 176));
  char v4 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  int v12 = v11 + 10 * ot::Radio::GetCslUncertainty(v4) + UncertaintyInMicrosec;
  *a2  = ot::Min<unsigned int>(v13, v12 + 10192);
  uint64_t result = ot::Min<unsigned int>(v13, v12 + 5504);
  *a3  = result;
  return result;
}

_DWORD *ot::Time::operator+=(_DWORD *result, int a2)
{
  *result += a2;
  return result;
}

{
  return ot::Time::operator+=(result, a2);
}

void ot::Radio::UpdateCslSampleTime(ot::Radio *this)
{
}

{
  ot::Radio::UpdateCslSampleTime(this);
}

uint64_t ot::Radio::UpdateCstSampleTime(ot::Radio *this, unsigned int a2)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioUpdateCstSampleTime((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::UpdateCstSampleTime(this, a2);
}

uint64_t ot::Radio::ReceiveAt(ot::Radio *this, unsigned __int8 a2, unsigned int a3, unsigned int a4, unsigned __int8 a5)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioReceiveAt((uint64_t)InstancePtr, a2, a3, a4, a5, v6, v7, v8);
}

{
  return ot::Radio::ReceiveAt(this, a2, a3, a4, a5);
}

uint64_t ot::Radio::GetCslAccuracy(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetCslAccuracy((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::GetCslAccuracy(this);
}

uint64_t ot::Mac::CslAccuracy::GetUncertaintyInMicrosec(ot::Mac::CslAccuracy *this)
{
  return (unsigned __int16)(10 * *((unsigned __int8 *)this + 1));
}

{
  return ot::Mac::CslAccuracy::GetUncertaintyInMicrosec(this);
}

uint64_t ot::Radio::GetCslUncertainty(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetCslUncertainty((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::GetCslUncertainty(this);
}

uint64_t ot::TimerMicroIn<ot::Mac::SubMac,&ot::Mac::SubMac::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mac::SubMac::HandleTimer)(v2);
}

ot::Appender *ot::Appender::Appender(ot::Appender *this, ot::Message *a2)
{
  *(unsigned char *)this  = 0;
  *((void *)this + 1)  = a2;
  __int16 Length = ot::Message::GetLength(a2);
  uint64_t result = this;
  *((_WORD *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = Length;
  return result;
}

{
  ot::Appender::Appender(this, a2);
  return this;
}

ot::Appender *ot::Appender::Appender(ot::Appender *this, unsigned __int8 *a2, __int16 a3)
{
  *(unsigned char *)this  = 1;
  ot::FrameBuilder::Init((uint64_t)this + 8, a2, a3);
  return this;
}

{
  ot::Appender::Appender(this, a2, a3);
  return this;
}

uint64_t ot::Appender::AppendBytes(ot::Message **this, void *a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (*(unsigned char *)this)
  {
    if (*(unsigned char *)this == 1) {
      return ot::FrameBuilder::AppendBytes((ot::FrameBuilder *)(this + 1), a2, a3);
    }
  }
  else
  {
    return ot::Message::AppendBytes(this[1], (char *)a2, a3);
  }
  return v4;
}

uint64_t ot::Appender::GetAppendedLength(ot::Message **this)
{
  unsigned __int16 v2 = 0;
  if (*(unsigned char *)this)
  {
    if (*(unsigned char *)this == 1) {
      return (unsigned __int16)ot::FrameBuilder::GetLength((ot::FrameBuilder *)(this + 1));
    }
  }
  else
  {
    return (unsigned __int16)(ot::Message::GetLength(this[1]) - *((_WORD *)this + 8));
  }
  return v2;
}

uint64_t ot::Appender::GetAsData(uint64_t a1, uint64_t a2)
{
  uint64_t Bytes = ot::FrameBuilder::GetBytes((ot::FrameBuilder *)(a1 + 8));
  __int16 Length = ot::FrameBuilder::GetLength((ot::FrameBuilder *)(a1 + 8));
  return ot::Data<(ot::DataLengthType)1>::Init(a2, Bytes, Length);
}

uint64_t ot::FrameBuilder::GetBytes(ot::FrameBuilder *this)
{
  return *(void *)this;
}

{
  return ot::FrameBuilder::GetBytes(this);
}

ot::Mac::SubMac::Callbacks *ot::Mac::SubMac::Callbacks::Callbacks(ot::Mac::SubMac::Callbacks *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Mac::SubMac::Callbacks::Callbacks(this, a2);
  return this;
}

void ot::Mac::SubMac::Callbacks::ReceiveDone(ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned int a3)
{
  uint64_t v3 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
  if (ot::Mac::LinkRaw::IsEnabled(v3))
  {
    unsigned int v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
    ot::Mac::LinkRaw::InvokeReceiveDone(v4, (uint64_t)a2, a3);
  }
  else
  {
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    ot::Mac::Mac::HandleReceivedFrame(v5, a2, a3);
  }
}

uint64_t ot::Mac::SubMac::Callbacks::RecordCcaStatus(ot::Mac::SubMac::Callbacks *this, char a2, char a3)
{
  char v6 = a2 & 1;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  return ot::Mac::Mac::RecordCcaStatus(v3, v6 & 1, a3);
}

void ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus(ot::InstanceLocator *a1, ot::Mac::Frame *a2, ot::Mac::RxFrame *a3, int a4, char a5, char a6)
{
  char v7 = a6 & 1;
  char v6 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  ot::Mac::Mac::RecordFrameTransmitStatus(v6, a2, a3, a4, a5, v7 & 1);
}

void ot::Mac::SubMac::Callbacks::TransmitDone(ot::InstanceLocator *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
  if (ot::Mac::LinkRaw::IsEnabled(v4))
  {
    uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(a1);
    ot::Mac::LinkRaw::InvokeTransmitDone(v5, a2, a3, a4);
  }
  else
  {
    uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    ot::Mac::Mac::HandleTransmitDone(v6, a2, a3, a4);
  }
}

void ot::Mac::SubMac::Callbacks::EnergyScanDone(ot::Mac::SubMac::Callbacks *this, char a2)
{
  unsigned __int16 v2 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
  if (ot::Mac::LinkRaw::IsEnabled(v2))
  {
    uint64_t v3 = (ot::Mac::LinkRaw *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::LinkRaw>(this);
    ot::Mac::LinkRaw::InvokeEnergyScanDone(v3, a2);
  }
  else
  {
    unsigned int v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::EnergyScanDone(v4, a2);
  }
}

void ot::Mac::SubMac::Callbacks::FrameCounterUsed(ot::Mac::SubMac::Callbacks *this, unsigned int a2)
{
  unsigned __int16 v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ot::KeyManager::MacFrameCounterUsed(v2, a2);
}

ot::AnnounceBeginClient *ot::AnnounceBeginClient::AnnounceBeginClient(ot::AnnounceBeginClient *this, ot::Instance *a2)
{
  return this;
}

{
  ot::AnnounceBeginClient::AnnounceBeginClient(this, a2);
  return this;
}

uint64_t ot::AnnounceBeginClient::SendRequest(ot::AnnounceBeginClient *this, int a2, unsigned __int8 a3, unsigned __int16 a4, const ot::Ip6::Address *a5)
{
  char v28 = this;
  int v27 = a2;
  unsigned __int8 v26 = a3;
  unsigned __int16 v25 = a4;
  BOOL v24 = a5;
  inited  = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v21, Instance);
  uint64_t v20 = 0;
  uint64_t v6 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
  if (ot::MeshCoP::Commissioner::IsActive(v6))
  {
    char v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v20 = ot::Coap::CoapBase::NewPriorityMessage(v7);
    if (v20)
    {
      inited  = ot::Coap::Message::InitAsPost(v20, v24, 0xAu);
      if (!inited)
      {
        inited  = ot::Coap::Message::SetPayloadMarker(v20);
        if (!inited)
        {
          uint64_t v8 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
          unsigned __int16 SessionId = ot::MeshCoP::Commissioner::GetSessionId(v8);
          inited  = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v20, SessionId);
          if (!inited)
          {
            ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v22);
            ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v22, v27);
            inited  = ot::Tlv::AppendTo((ot::Tlv *)v22, v20);
            if (!inited)
            {
              inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(v20, v26);
              if (!inited)
              {
                inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(v20, v25);
                if (!inited)
                {
                  ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v21, (__n128 *)v24);
                  uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                  inited  = ot::Coap::CoapBase::SendMessage(v10, v20, (const ot::Ip6::MessageInfo *)v21);
                  if (!inited)
                  {
                    char v11 = ot::UriToString<(ot::Uri)10>();
                    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoP", "Sent %s", v12, v13, v14, v15, v16, v17, v11);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      inited  = 3;
    }
  }
  else
  {
    inited  = 13;
  }
  if (inited && v20) {
    ot::Message::Free(v20);
  }
  return inited;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::Commissioner>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
}

BOOL ot::MeshCoP::Commissioner::IsActive(ot::MeshCoP::Commissioner *this)
{
  return *((unsigned char *)this + 554) == 2;
}

{
  return ot::MeshCoP::Commissioner::IsActive(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0xBu, a2);
}

{
  return ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(a1, a2);
}

uint64_t ot::MeshCoP::ChannelMaskTlv::Init(ot::MeshCoP::ChannelMaskTlv *this)
{
  ot::MeshCoP::Tlv::SetType(this, 53);
  uint64_t result = ot::Tlv::SetLength((uint64_t)this, 6);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_WORD *)this + 3)  = 0;
  return result;
}

{
  return ot::MeshCoP::ChannelMaskTlv::Init(this);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 0x36u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x37u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(a1, a2);
}

unsigned char *ot::MeshCoP::Tlv::SetType(unsigned char *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return ot::MeshCoP::Tlv::SetType(a1, a2);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)0>(ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void ot::Logger::LogVarArgs(ot *a1, unsigned __int8 a2, const char *a3, va_list a4)
{
  ot::String<(unsigned short)1024>::String((uint64_t)v22);
  if (*(unsigned char *)a1 == 82 && *((unsigned char *)a1 + 1) == 99 && *((unsigned char *)a1 + 2) == 112)
  {
    os_log_t logging_obg = (ot::Instance *)log_get_logging_obg("com.apple.rcp", "default");
    uint64_t v14 = logging_obg;
  }
  else
  {
    os_log_t logging_obg = (ot::Instance *)log_get_logging_obg("com.apple.openthread", "default");
    uint64_t v14 = logging_obg;
  }
  uint64_t v5 = ot::Instance::Get(logging_obg);
  uint64_t v6 = (ot::Uptime *)ot::Instance::Get<ot::Uptime>((uint64_t)v5);
  unint64_t Uptime = ot::Uptime::GetUptime(v6);
  ot::Uptime::UptimeToString(Uptime, (ot::StringWriter *)v22, (ot::StringWriter *)1);
  uint64_t v8 = ot::StringWriter::Append((ot::StringWriter *)v22, " ");
  if (a2 <= (int)ot::Instance::GetLogLevel(v8))
  {
    ot::StringWriter::Append((ot::StringWriter *)v22, "[%c] ", ot::Logger::LogVarArgs(char const*,ot::LogLevel,char const*,char *)::kLevelChars[a2]);
    unsigned __int16 v9 = ot::StringLength(a1, (const char *)0xE);
    ot::StringWriter::Append((ot::StringWriter *)v22, "%.*s%s: ", 14, (const char *)a1, &ot::Logger::LogVarArgs(char const*,ot::LogLevel,char const*,char *)::kModuleNamePadding[v9]);
    ot::StringWriter::AppendVarArgs((ot::StringWriter *)v22, a3, a4);
    ot::StringWriter::Append((ot::StringWriter *)v22, "%s", "");
    if (a2 <= 2u)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = ot::String<(unsigned short)1024>::AsCString((uint64_t)v22);
        __os_log_helper_16_3_1_8_33((uint64_t)v21, v11);
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{private}s", v21, 0xCu);
      }
    }
    else if (a2 == 4 || a2 == 3)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = ot::String<(unsigned short)1024>::AsCString((uint64_t)v22);
        __os_log_helper_16_3_1_8_33((uint64_t)v20, v12);
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%{private}s", v20, 0xCu);
      }
    }
    else
    {
      if (a2 != 5) {
        __assert_rtn("LogVarArgs", "log.cpp", 181, "false");
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = ot::String<(unsigned short)1024>::AsCString((uint64_t)v22);
        __os_log_helper_16_3_1_8_33((uint64_t)v19, v13);
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%{private}s", v19, 0xCu);
      }
    }
  }
}

void ot::Logger::LogAtLevel<(ot::LogLevel)1>(ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  ot::Logger::LogAtLevel<(ot::LogLevel)1>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)2>(ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  ot::Logger::LogAtLevel<(ot::LogLevel)2>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)3>(ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  ot::Logger::LogAtLevel<(ot::LogLevel)3>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)4>(ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  ot::Logger::LogAtLevel<(ot::LogLevel)4>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::LogAtLevel<(ot::LogLevel)5>(ot *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

{
  ot::Logger::LogAtLevel<(ot::LogLevel)5>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)0>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpInModule(ot *a1, unsigned __int8 a2, ot *a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v23 = ot::StringLength(a3, (const char *)0x3E) + 10;
  uint64_t v5 = (ot::Instance *)ot::String<(unsigned short)80>::String((uint64_t)v29);
  if ((int)otLoggingGetLevel(v5) >= a2)
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)((72 - v23) / 2); ++i)
      ot::StringWriter::Append((ot::StringWriter *)v29, "=");
    ot::StringWriter::Append((ot::StringWriter *)v29, "[%s len=%03u]", (const char *)a3, a5);
    for (unsigned __int16 j = 0; j < (int)(unsigned __int16)(72 - v23 - (72 - v23) / 2); ++j)
      ot::StringWriter::Append((ot::StringWriter *)v29, "=");
    char v6 = ot::String<(unsigned short)80>::AsCString((uint64_t)v29);
    ot::Logger::LogInModule(a1, a2, "%s", v7, v8, v9, v10, v11, v6);
    for (unsigned __int16 k = 0; k < (int)a5; k += 16)
    {
      unsigned __int8 v12 = ot::Min<unsigned char>(a5 - k, 0x10u);
      ot::Logger::DumpLine(a1, a2, a4 + k, v12);
    }
    ot::StringWriter::Clear((uint64_t)v29);
    for (unsigned __int16 m = 0; m < 0x48u; ++m)
      ot::StringWriter::Append((ot::StringWriter *)v29, "-");
    char v13 = ot::String<(unsigned short)80>::AsCString((uint64_t)v29);
    ot::Logger::LogInModule(a1, a2, "%s", v14, v15, v16, v17, v18, v13);
  }
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)1>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)2>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)3>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)4>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

void ot::Logger::DumpAtLevel<(ot::LogLevel)5>(ot *a1, ot *a2, uint64_t a3, unsigned __int16 a4)
{
}

{
  ot::Logger::DumpAtLevel<(ot::LogLevel)5>(a1, a2, a3, a4);
}

void ot::Logger::LogInModule(ot *a1, unsigned __int8 a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t ot::String<(unsigned short)1024>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 1024);
  return a1;
}

uint64_t ot::String<(unsigned short)1024>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)1024>::AsCString(a1);
}

uint64_t __os_log_helper_16_3_1_8_33(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 3;
  *(unsigned char *)(result + 1)  = 1;
  *(unsigned char *)(result + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 33;
  *(unsigned char *)(result + 3)  = 8;
  *(void *)(result + ++*(_WORD *)(this + 4) = a2;
  return result;
}

void ot::Logger::DumpLine(ot *a1, unsigned __int8 a2, uint64_t a3, unsigned __int16 a4)
{
  ot::String<(unsigned short)80>::String((uint64_t)v18);
  ot::StringWriter::Append((ot::StringWriter *)v18, "|");
  for (_c_3  = 0; _c_3 < 0x10u; ++_c_3)
  {
    if (_c_3 >= (int)a4) {
      ot::StringWriter::Append((ot::StringWriter *)v18, " ..");
    }
    else {
      ot::StringWriter::Append((ot::StringWriter *)v18, " %02X", *(unsigned __int8 *)(a3 + _c_3));
    }
    if (!((_c_3 + 1) % 8)) {
      ot::StringWriter::Append((ot::StringWriter *)v18, " |");
    }
  }
  ot::StringWriter::Append((ot::StringWriter *)v18, " ");
  for (_c_2  = 0; _c_2 < 0x10u; ++_c_2)
  {
    _c_1  = 46;
    if (_c_2 < (int)a4)
    {
      _c  = *(unsigned char *)(a3 + _c_2) & 0x7F;
      if (isprint(_c)) {
        _c_1  = _c;
      }
    }
    ot::StringWriter::Append((ot::StringWriter *)v18, "%c", _c_1);
  }
  char v4 = ot::String<(unsigned short)80>::AsCString((uint64_t)v18);
  ot::Logger::LogInModule(a1, a2, "%s", v5, v6, v7, v8, v9, v4);
}

uint64_t ot::String<(unsigned short)80>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 80);
  return a1;
}

int isprint(int _c)
{
  return __istype(_c, 0x40000uLL);
}

{
  return isprint(_c);
}

uint64_t ot::String<(unsigned short)80>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)80>::AsCString(a1);
}

void *ot::MeshCoP::BorderAgent::ForwardContext::Init(ot::MeshCoP::BorderAgent::ForwardContext *this, ot::Instance *a2, const ot::Coap::Message *a3, char a4, char a5)
{
  char v9 = a4 & 1;
  char v8 = a5 & 1;
  ot::InstanceLocatorInit::Init(this, a2);
  *(_WORD *)this  = ot::Coap::Message::GetMessageId(a3);
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 2) & 0xFE | v9 & 1;
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 2) & 0xFD | (2 * (v8 & 1));
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 2) & 0x3F | ((ot::Coap::Message::GetType(a3) & 3) << 6);
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 2) & 0xC3 | (4 * (ot::Coap::Message::GetTokenLength(a3) & 0xF));
  Tokeunsigned __int8 n = (const void *)ot::Coap::Message::GetToken(a3);
  return memcpy((char *)this + 3, Token, (*((unsigned char *)this + 2) >> 2) & 0xF);
}

void ot::MeshCoP::BorderAgent::HandleTimeout(ot::MeshCoP::BorderAgent *this)
{
  unsigned int v1 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  if (ot::Coap::CoapSecure::IsConnected(v1))
  {
    unsigned __int16 v2 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    ot::Coap::CoapSecure::Disconnect(v2);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"BorderAgent", "Reset commissioner session", v3, v4, v5, v6, v7, v8, (char)this);
  }
}

uint64_t ot::MeshCoP::BorderAgent::ForwardContext::ToHeader(ot::MeshCoP::BorderAgent::ForwardContext *this, ot::Coap::Message *a2, char a3)
{
  if (*((unsigned char *)this + 2) >> 6 == 1 || (*((unsigned char *)this + 2) & 2) != 0) {
    ot::Coap::Message::Init(a2, 1, a3);
  }
  else {
    ot::Coap::Message::Init(a2, 2, a3);
  }
  if ((*((unsigned char *)this + 2) & 2) == 0) {
    ot::Coap::Message::SetMessageId(a2, *(_WORD *)this);
  }
  return ot::Coap::Message::SetToken(a2, (const unsigned __int8 *)this + 3, (*((unsigned char *)this + 2) >> 2) & 0xF);
}

uint64_t ot::MeshCoP::BorderAgent::CoapCodeFromError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 6) {
      return 0x80;
    }
    else {
      return -96;
    }
  }
  else
  {
    return 68;
  }
}

void ot::MeshCoP::BorderAgent::SendErrorMessage(ot::InstanceLocator *a1, ot::MeshCoP::BorderAgent::ForwardContext *a2, int a3)
{
  uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
  char v9 = ot::Coap::CoapBase::NewPriorityMessage(v3);
  if (v9)
  {
    char v4 = ot::MeshCoP::BorderAgent::CoapCodeFromError((uint64_t)a1, a3);
    int v10 = ot::MeshCoP::BorderAgent::ForwardContext::ToHeader(a2, v9, v4);
    if (!v10)
    {
      uint64_t v7 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      uint64_t v5 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v5);
      int v10 = ot::Coap::CoapSecure::SendMessage(v7, v9, MessageInfo, 0, 0);
    }
  }
  else
  {
    int v10 = 3;
  }
  if (v10 && v9) {
    ot::Message::Free(v9);
  }
  ot::MeshCoP::LogError((char)"send error CoAP message", v10);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Tmf::SecureAgent>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
}

uint64_t ot::Coap::CoapSecure::GetMessageInfo(ot::Coap::CoapSecure *this)
{
  return ot::MeshCoP::Dtls::GetMessageInfo((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return ot::Coap::CoapSecure::GetMessageInfo(this);
}

void ot::MeshCoP::BorderAgent::SendErrorMessage(ot::InstanceLocator *a1, ot::Coap::Message *a2, char a3, int a4)
{
  char v15 = a3 & 1;
  char v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
  unsigned __int8 v12 = ot::Coap::CoapBase::NewPriorityMessage(v4);
  if (v12)
  {
    if (ot::Coap::Message::IsNonConfirmable(a2) || (v15 & 1) != 0)
    {
      char v5 = ot::MeshCoP::BorderAgent::CoapCodeFromError((uint64_t)a1, a4);
      ot::Coap::Message::Init(v12, 1, v5);
    }
    else
    {
      char v6 = ot::MeshCoP::BorderAgent::CoapCodeFromError((uint64_t)a1, a4);
      ot::Coap::Message::Init(v12, 2, v6);
    }
    if ((v15 & 1) == 0)
    {
      unsigned __int16 MessageId = ot::Coap::Message::GetMessageId(a2);
      ot::Coap::Message::SetMessageId(v12, MessageId);
    }
    int v13 = ot::Coap::Message::SetTokenFromMessage(v12, a2);
    if (!v13)
    {
      int v10 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      uint64_t v8 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v8);
      int v13 = ot::Coap::CoapSecure::SendMessage(v10, v12, MessageInfo, 0, 0);
    }
  }
  else
  {
    int v13 = 3;
  }
  if (v13 && v12) {
    ot::Message::Free(v12);
  }
  ot::MeshCoP::LogError((char)"send error CoAP message", v13);
}

unsigned __int16 *ot::MeshCoP::BorderAgent::HandleCoapResponse(ot::InstanceLocator *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
  ot::AsCoapMessagePtr();
  return ot::MeshCoP::BorderAgent::HandleCoapResponse(v6, a1, v4, a4);
}

unsigned __int16 *ot::MeshCoP::BorderAgent::HandleCoapResponse(uint64_t a1, ot::MeshCoP::BorderAgent::ForwardContext *a2, ot::Tlv *a3, int a4)
{
  uint64_t v41 = a1;
  int v40 = a2;
  int v39 = a3;
  int v38 = a4;
  int v37 = 0;
  int v36 = a4;
  if (!a4)
  {
    char v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
    int v37 = ot::Coap::CoapBase::NewPriorityMessage(v4);
    if (!v37)
    {
      int v36 = 3;
      goto LABEL_14;
    }
    if ((ot::MeshCoP::BorderAgent::ForwardContext::IsPetition(v40) & 1) != 0
      && ot::Coap::Message::GetCode(v39) == 68)
    {
      char v35 = 0;
      int v36 = ot::Tlv::Find<ot::MeshCoP::StateTlv>(v39, &v35, v5, v6);
      if (v36) {
        goto LABEL_14;
      }
      if (v35 == 1)
      {
        unsigned __int16 v34 = 0;
        int v36 = ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v39, &v34, v7, v8);
        if (v36) {
          goto LABEL_14;
        }
        int v31 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
        ot::Mle::Mle::GetCommissionerAloc(v31, Address, v34);
        IgnoreError();
        int v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
        ot::Ip6::Netif::AddUnicastAddress(v10, (ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
        uint64_t v11 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>((ot::InstanceLocator *)a1);
        ot::Ip6::Udp::AddReceiver(v11, (ot::Ip6::Udp::Receiver *)(a1 + 56));
        IgnoreError();
        char v32 = v34;
        unsigned __int8 v12 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
        ot::Ip6::Address::ToString(v12, (ot::StringWriter *)v42);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v42);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "commissioner accepted: session ID=%d, ALOC=%s", v13, v14, v15, v16, v17, v18, v32);
      }
    }
    BOOL v30 = v40;
    int v29 = v37;
    Code  = ot::Coap::Message::GetCode(v39);
    int v36 = ot::MeshCoP::BorderAgent::ForwardContext::ToHeader(v30, v29, Code);
    if (!v36)
    {
      int Length = (unsigned __int16)ot::Message::GetLength(v39);
      if (Length <= (unsigned __int16)ot::Message::GetOffset(v39)
        || (int v36 = ot::Coap::Message::SetPayloadMarker(v37)) == 0)
      {
        int v36 = ot::MeshCoP::BorderAgent::ForwardToCommissioner((ot::MeshCoP::BorderAgent *)a1, v37, v39);
      }
    }
  }
LABEL_14:
  if (v36)
  {
    if (v37) {
      ot::Message::Free(v37);
    }
    char MessageId = ot::MeshCoP::BorderAgent::ForwardContext::GetMessageId(v40);
    ot::ErrorToString(v36);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"BorderAgent", "Commissioner request[%u] failed: %s", v20, v21, v22, v23, v24, v25, MessageId);
    ot::MeshCoP::BorderAgent::SendErrorMessage((ot::InstanceLocator *)a1, v40, v36);
  }
  return ot::Heap::Free(v40, a2);
}

uint64_t ot::MeshCoP::BorderAgent::ForwardContext::IsPetition(ot::MeshCoP::BorderAgent::ForwardContext *this)
{
  return *((unsigned char *)this + 2) & 1;
}

{
  return ot::MeshCoP::BorderAgent::ForwardContext::IsPetition(this);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::StateTlv>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x10u, a2, a4);
}

{
  return ot::Tlv::Find<ot::MeshCoP::StateTlv>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0xBu, a2, a4);
}

{
  return ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(a1, a2, a3, a4);
}

uint64_t ot::Mle::Mle::GetCommissionerAloc(ot::Mle::Mle *this, ot::Ip6::Address *a2, unsigned __int16 a3)
{
  unsigned __int16 v3 = ot::Mle::CommissionerAloc16FromId((ot::Mle *)a3);
  return ot::Mle::Mle::GetLocatorAddress(this, a2, v3);
}

{
  return ot::Mle::Mle::GetCommissionerAloc(this, a2, a3);
}

uint64_t ot::MeshCoP::BorderAgent::ForwardToCommissioner(ot::MeshCoP::BorderAgent *this, ot::Coap::Message *a2, const ot::Message *a3)
{
  unsigned __int16 Offset = ot::Message::GetOffset(a3);
  __int16 Length = ot::Message::GetLength(a3);
  __int16 v3 = ot::Message::GetOffset(a3);
  unsigned int appended = ot::Message::AppendBytesFromMessage(a2, a3, Offset, Length - v3);
  if (!appended)
  {
    uint64_t v14 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    char v4 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v4);
    unsigned int appended = ot::Coap::CoapSecure::SendMessage(v14, a2, MessageInfo, 0, 0);
    if (!appended) {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Sent to commissioner", v6, v7, v8, v9, v10, v11, v13);
    }
  }
  ot::MeshCoP::LogError((char)"send to commissioner", appended);
  return appended;
}

uint64_t ot::MeshCoP::BorderAgent::ForwardContext::GetMessageId(ot::MeshCoP::BorderAgent::ForwardContext *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::MeshCoP::BorderAgent::ForwardContext::GetMessageId(this);
}

ot::MeshCoP::BorderAgent *ot::MeshCoP::BorderAgent::BorderAgent(ot::MeshCoP::BorderAgent *this, ot::Instance *a2)
{
  *((unsigned char *)this + 136)  = 0;
  *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
  *((unsigned char *)this + 156)  = 0;
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::MeshCoP::BorderAgent *)((char *)this + 80));
  return this;
}

{
  ot::MeshCoP::BorderAgent::BorderAgent(this, a2);
  return this;
}

BOOL ot::MeshCoP::BorderAgent::HandleUdpReceive(ot::MeshCoP::BorderAgent *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  __int16 v3 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  return ot::MeshCoP::BorderAgent::HandleUdpReceive(a1, v5, v3);
}

void *ot::Ip6::Udp::Receiver::Receiver(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::BorderAgent,&ot::MeshCoP::BorderAgent::HandleTimeout>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::BorderAgent,&ot::MeshCoP::BorderAgent::HandleTimeout>::HandleTimer);
  return a1;
}

uint64_t ot::MeshCoP::BorderAgent::GetId(ot::MeshCoP::BorderAgent *this, unsigned __int8 *a2, unsigned __int16 *a3)
{
  unsigned int v9 = 0;
  if (*a3 >= 0x10uLL)
  {
    if (*((unsigned char *)this + 156))
    {
      unsigned int v9 = 0;
    }
    else
    {
      __int16 v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
      if (!ot::Settings::Read<ot::SettingsBase::BorderAgentId>(v3, (ot::MeshCoP::BorderAgent *)((char *)this + 140))|| (ot::SettingsBase::BorderAgentId::GetId((ot::MeshCoP::BorderAgent *)((char *)this + 140)), ot::Random::NonCrypto::FillBuffer(v4, (unsigned __int8 *)0x10), uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this), (v9 = ot::Settings::Save<ot::SettingsBase::BorderAgentId>(v5, (ot::MeshCoP::BorderAgent *)((char *)this + 140))) == 0))
      {
        *((unsigned char *)this + 156)  = 1;
      }
    }
  }
  else
  {
    unsigned int v9 = 7;
  }
  if (!v9)
  {
    ot::SettingsBase::BorderAgentId::GetId((ot::MeshCoP::BorderAgent *)((char *)this + 140));
    *(_OWORD *)a2  = *v6;
    *a3  = 16;
  }
  return v9;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Settings>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(a1);
}

uint64_t ot::Settings::Read<ot::SettingsBase::BorderAgentId>(ot::InstanceLocator *a1, ot::SettingsBase::BorderAgentId *a2)
{
  return ot::Settings::ReadEntry(a1, 0x11u, a2, 0x10u);
}

{
  return ot::Settings::Read<ot::SettingsBase::BorderAgentId>(a1, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::BorderAgentId>(ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  return ot::Settings::SaveEntry(a1, 17, a2, (uint64_t)v3, 0x10u);
}

{
  return ot::Settings::Save<ot::SettingsBase::BorderAgentId>(a1, a2);
}

void ot::MeshCoP::BorderAgent::HandleNotifierEvents(ot::InstanceLocator *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v5, 8388612))
  {
    unsigned __int16 v2 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
    if (ot::MeshCoP::Commissioner::IsDisabled(v2))
    {
      __int16 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      if (ot::Mle::Mle::IsAttached(v3)) {
        ot::MeshCoP::BorderAgent::Start(a1);
      }
      else {
        ot::MeshCoP::BorderAgent::Stop(a1);
      }
    }
  }
}

BOOL ot::MeshCoP::Commissioner::IsDisabled(ot::MeshCoP::Commissioner *this)
{
  return *((unsigned char *)this + 554) == 0;
}

{
  return ot::MeshCoP::Commissioner::IsDisabled(this);
}

void ot::MeshCoP::BorderAgent::Start(ot::MeshCoP::BorderAgent *this)
{
  if (*((unsigned char *)this + 136))
  {
    int v19 = 0;
  }
  else
  {
    uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::KeyManager::GetPskc(v1, &v20);
    unsigned __int16 v2 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    int v19 = ot::Coap::CoapSecure::Start(v2, 0);
    if (!v19)
    {
      __int16 v3 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
      int v19 = ot::Coap::CoapSecure::SetPsk(v3, (const unsigned __int8 *)&v20, 0x10u);
      if (!v19)
      {
        ot::Clearable<ot::Pskc>::Clear(&v20);
        char v4 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
        ot::Coap::CoapSecure::SetConnectedCallback(v4, (void (*)(BOOL, void *))ot::MeshCoP::BorderAgent::HandleConnected, (uint64_t)this);
        *((unsigned char *)this + 136)  = 1;
        *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
        char UdpPort = ot::MeshCoP::BorderAgent::GetUdpPort(this);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Border Agent start listening on port %u", v6, v7, v8, v9, v10, v11, UdpPort);
      }
    }
  }
  if (v19)
  {
    ot::ErrorToString(v19);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"BorderAgent", "failed to start Border Agent on port %d: %s", v12, v13, v14, v15, v16, v17, 0);
  }
}

void ot::MeshCoP::BorderAgent::Stop(ot::MeshCoP::BorderAgent *this)
{
  if (*((unsigned char *)this + 136))
  {
    ot::TimerMilli::Stop((ot::MeshCoP::BorderAgent *)((char *)this + 112));
    uint64_t v1 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
    ot::Coap::CoapSecure::Stop(v1);
    *((unsigned char *)this + 136)  = 0;
    *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Border Agent stopped", v2, v3, v4, v5, v6, v7, (char)this);
  }
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)31>(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v36 = a1;
  char v35 = a2;
  uint64_t v34 = a3;
  TlvValueunsigned __int16 Offset = 0;
  char v32 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v31);
  unsigned __int16 v30 = 0;
  unsigned __int16 v29 = 0;
  if (*(unsigned char *)(a1 + 136))
  {
    TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(v35, (const ot::Message *)0x30, &v30, &v29, v3);
    if (!TlvValueOffset)
    {
      TlvValueunsigned __int16 Offset = ot::Message::Read<ot::MeshCoP::UdpEncapsulationTlvHeader>(v35, v30, v28);
      if (!TlvValueOffset)
      {
        v30 += 4;
        v29 -= 4;
        __int16 SourcePort = ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
        if (v5 | (SourcePort == 0)) {
          char v6 = 1;
        }
        else {
          char v6 = 0;
        }
        if ((v6 & 1) == 0
          && ((__int16 v7 = ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28),
               v5 | (v7 == 0))
            ? (char v8 = 0)
            : (char v8 = 1),
              (v8 & 1) != 0))
        {
          uint64_t v9 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>((ot::InstanceLocator *)a1);
          char v32 = ot::Ip6::Udp::NewMessage(v9);
          if (v32)
          {
            TlvValueunsigned __int16 Offset = ot::Message::AppendBytesFromMessage(v32, v35, v30, v29);
            if (!TlvValueOffset)
            {
              __int16 v10 = ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
              ot::Ip6::MessageInfo::SetSockPort((uint64_t)v31, v10);
              Address  = (__n128 *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 80));
              ot::Ip6::MessageInfo::SetSockAddr(v31, Address);
              __int16 DestinationPort = ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
              ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v31, DestinationPort);
              unsigned __int8 v26 = v35;
              PeerAddr  = ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v31);
              TlvValueunsigned __int16 Offset = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(v26, PeerAddr, v14, v15, v16);
              if (!TlvValueOffset)
              {
                uint64_t v17 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>((ot::InstanceLocator *)a1);
                TlvValueunsigned __int16 Offset = ot::Ip6::Udp::SendDatagram(v17, v32, (ot::Ip6::MessageInfo *)v31, 0x11u);
                if (!TlvValueOffset)
                {
                  *(_WORD *)(a1 + 13ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v28);
                  uint64_t v18 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v31);
                  ot::Ip6::Address::ToString(v18, (ot::StringWriter *)v37);
                  char v19 = ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Proxy transmit sent to %s", v20, v21, v22, v23, v24, v25, v19);
                }
              }
            }
          }
          else
          {
            TlvValueunsigned __int16 Offset = 3;
          }
        }
        else
        {
          TlvValueunsigned __int16 Offset = 2;
        }
      }
    }
  }
  if (TlvValueOffset && v32) {
    ot::Message::Free(v32);
  }
  ot::MeshCoP::LogError((char)"send proxy stream", TlvValueOffset);
}

uint64_t ot::Message::Read<ot::MeshCoP::UdpEncapsulationTlvHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<ot::MeshCoP::UdpEncapsulationTlvHeader>(a1, a2, a3);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort(ot::MeshCoP::UdpEncapsulationTlvHeader *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::MeshCoP::UdpEncapsulationTlvHeader::GetSourcePort(this);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort(ot::MeshCoP::UdpEncapsulationTlvHeader *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::MeshCoP::UdpEncapsulationTlvHeader::GetDestinationPort(this);
}

uint64_t ot::Ip6::MessageInfo::SetSockPort(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return ot::Ip6::MessageInfo::SetSockPort(this, a2);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x31, a2, (void *)0x10, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(a1, a2, a3, a4, a5);
}

BOOL ot::MeshCoP::BorderAgent::HandleUdpReceive(ot::MeshCoP::BorderAgent *this, const ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v46 = this;
  unsigned __int8 v45 = a2;
  uint64_t v44 = a3;
  int appended = 0;
  unsigned int v42 = 0;
  SockAddr  = (const void *)ot::Ip6::MessageInfo::GetSockAddr(a3);
  Address  = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::MeshCoP::BorderAgent *)((char *)this + 80));
  if (ot::Unequatable<ot::Ip6::Address>::operator!=(SockAddr, Address))
  {
    uint64_t v4 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v44);
    ot::Ip6::Address::ToString(v4, (ot::StringWriter *)v48);
    char v36 = ot::String<(unsigned short)40>::AsCString((uint64_t)v48);
    char v5 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::MeshCoP::BorderAgent *)((char *)this + 80));
    ot::Ip6::Address::ToString(v5, (ot::StringWriter *)v47);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v47);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"BorderAgent", "Filtered out message for commissioner: dest %s != %s (ALOC)", v6, v7, v8, v9, v10, v11, v36);
    int appended = 22;
  }
  else
  {
    __int16 Length = ot::Message::GetLength(v45);
    if (v13 | (Length == 0)) {
      char v14 = 0;
    }
    else {
      char v14 = 1;
    }
    if (v14)
    {
      uint64_t v15 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
      unsigned int v42 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v15, 0x1Eu);
      if (v42)
      {
        __int16 v35 = ot::Message::GetLength(v45);
        unsigned __int16 v39 = v35 - ot::Message::GetOffset(v45);
        ot::MeshCoP::ExtendedTlv::SetType(v41, 48);
        ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v41, v39 + 4);
        int appended = ot::Message::Append<ot::MeshCoP::ExtendedTlv>(v42, v41);
        if (!appended)
        {
          PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v44);
          ot::MeshCoP::UdpEncapsulationTlvHeader::SetSourcePort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v40, PeerPort);
          SockPort  = ot::Ip6::MessageInfo::GetSockPort(v44);
          ot::MeshCoP::UdpEncapsulationTlvHeader::SetDestinationPort((ot::MeshCoP::UdpEncapsulationTlvHeader *)v40, SockPort);
          int appended = ot::Message::Append<ot::MeshCoP::UdpEncapsulationTlvHeader>(v42, v40);
          if (!appended)
          {
            uint64_t v34 = v42;
            int v33 = v45;
            unsigned __int16 Offset = ot::Message::GetOffset(v45);
            int appended = ot::Message::AppendBytesFromMessage(v34, v33, Offset, v39);
            if (!appended)
            {
              char v32 = v42;
              PeerAddr  = (void *)ot::Ip6::MessageInfo::GetPeerAddr(v44);
              int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(v32, PeerAddr);
              if (!appended)
              {
                int v31 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
                unsigned __int16 v30 = v42;
                uint64_t v20 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
                MessageInfo  = (ot::Ip6::MessageInfo *)ot::Coap::CoapSecure::GetMessageInfo(v20);
                int appended = ot::Coap::CoapSecure::SendMessage(v31, v30, MessageInfo, 0, 0);
                if (!appended) {
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Sent to commissioner on ProxyRx (c/ur)", v22, v23, v24, v25, v26, v27, v29);
                }
              }
            }
          }
        }
      }
      else
      {
        int appended = 3;
      }
    }
    else
    {
      int appended = 0;
    }
  }
  if (appended && v42) {
    ot::Message::Free(v42);
  }
  if (appended != 22) {
    ot::MeshCoP::LogError((char)"Notify commissioner on ProxyRx (c/ur)", appended);
  }
  return appended != 22;
}

unsigned char *ot::MeshCoP::ExtendedTlv::SetType(unsigned char *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return ot::MeshCoP::ExtendedTlv::SetType(a1, a2);
}

uint64_t ot::ExtendedTlv::SetLength(ot::ExtendedTlv *this, unsigned __int16 a2)
{
  ot::Tlv::SetLength((uint64_t)this, 255);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::ExtendedTlv::SetLength(this, a2);
}

uint64_t ot::Message::Append<ot::MeshCoP::ExtendedTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<ot::MeshCoP::ExtendedTlv>(a1, a2);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::SetSourcePort(ot::MeshCoP::UdpEncapsulationTlvHeader *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return ot::MeshCoP::UdpEncapsulationTlvHeader::SetSourcePort(this, a2);
}

uint64_t ot::MeshCoP::UdpEncapsulationTlvHeader::SetDestinationPort(ot::MeshCoP::UdpEncapsulationTlvHeader *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::MeshCoP::UdpEncapsulationTlvHeader::SetDestinationPort(this, a2);
}

uint64_t ot::Message::Append<ot::MeshCoP::UdpEncapsulationTlvHeader>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<ot::MeshCoP::UdpEncapsulationTlvHeader>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x31, a2, (const void *)0x10);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)49,ot::Ip6::Address>>(a1, a2);
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)28>(ot::InstanceLocator *a1, const ot::Message *a2)
{
  uint64_t v11 = 0;
  int v10 = 0;
  if (*((unsigned char *)a1 + 136))
  {
    if (ot::Coap::Message::IsNonConfirmablePostRequest(a2))
    {
      uint64_t v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      uint64_t v11 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v2, 0x1Cu);
      if (v11)
      {
        int v10 = ot::MeshCoP::BorderAgent::ForwardToCommissioner(a1, v11, a2);
        if (!v10) {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Sent to commissioner on RelayRx (c/rx)", v3, v4, v5, v6, v7, v8, (char)a1);
        }
      }
      else
      {
        int v10 = 3;
      }
    }
    else
    {
      int v10 = 2;
    }
  }
  if (v10)
  {
    if (v11) {
      ot::Message::Free(v11);
    }
  }
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)15>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

uint64_t ot::MeshCoP::BorderAgent::ForwardToLeader(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  int v33 = a1;
  char v32 = a2;
  int v31 = a3;
  unsigned __int8 v30 = a4;
  unsigned int appended = 0;
  char v28 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v27, Instance);
  uint64_t v26 = 0;
  char v25 = 0;
  char v24 = 0;
  if (*((unsigned char *)a1 + 136))
  {
    if (v30 == 22)
    {
      char v24 = 1;
    }
    else if (v30 == 23)
    {
      char v25 = 1;
      char v24 = 1;
    }
    if ((v24 & 1) == 0
      || (uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1),
          (unsigned int appended = ot::Coap::CoapBase::SendAck(v5, v32, v31)) == 0))
    {
      char v28 = (ot::Heap *)ot::Heap::CAlloc((ot::Heap *)1, 12);
      if (v28)
      {
        uint64_t v22 = v28;
        uint64_t v6 = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
        ot::MeshCoP::BorderAgent::ForwardContext::Init(v22, v6, v32, v25 & 1, v24 & 1);
        uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        uint64_t v26 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v7, v30);
        if (v26)
        {
          uint64_t v20 = v32;
          unsigned __int16 Offset = ot::Message::GetOffset(v32);
          __int16 Length = ot::Message::GetLength(v32);
          __int16 v8 = ot::Message::GetOffset(v32);
          unsigned int appended = ot::Message::AppendBytesFromMessage(v26, v20, Offset, Length - v8);
          if (!appended)
          {
            unsigned int appended = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v27);
            if (!appended)
            {
              ot::Tmf::MessageInfo::SetSockPortToTmf((ot::Tmf::MessageInfo *)v27);
              uint64_t v9 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
              unsigned int appended = ot::Coap::CoapBase::SendMessage(v9, v26, (ot::Ip6::MessageInfo *)v27, (uint64_t)ot::MeshCoP::BorderAgent::HandleCoapResponse, (uint64_t)v28);
              if (!appended)
              {
                char v28 = 0;
                char v10 = ot::PathForUri(v30);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Forwarded request to leader on %s", v11, v12, v13, v14, v15, v16, v10);
              }
            }
          }
        }
        else
        {
          unsigned int appended = 3;
        }
      }
      else
      {
        unsigned int appended = 3;
      }
    }
  }
  ot::MeshCoP::LogError((char)"forward to leader", appended);
  if (appended)
  {
    if (v28) {
      ot::Heap::Free(v28, v17);
    }
    if (v26) {
      ot::Message::Free(v26);
    }
    ot::MeshCoP::BorderAgent::SendErrorMessage(a1, v32, v24 & 1, appended);
  }
  return appended;
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)14>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)16>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)11>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)12>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)25>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)27>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

ot::InstanceLocator *ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)13>(ot::InstanceLocator *result, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = result;
  if (*((unsigned char *)result + 136))
  {
    uint64_t result = (ot::InstanceLocator *)ot::MeshCoP::BorderAgent::ForwardToLeader(result, a2, a3, 0x16u);
    if (!result) {
      return (ot::InstanceLocator *)ot::TimerMilli::Start((ot::InstanceLocator *)((char *)v3 + 112), 0xC350u);
    }
  }
  return result;
}

void ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)29>(ot::InstanceLocator *a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v26 = a1;
  char v25 = a2;
  uint64_t v24 = a3;
  int appended = 0;
  unsigned __int16 v22 = 0;
  uint64_t v21 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v20, Instance);
  if (*((unsigned char *)a1 + 136))
  {
    if (ot::Coap::Message::IsNonConfirmablePostRequest(v25))
    {
      int appended = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(v25, &v22, v4, v5);
      if (!appended)
      {
        uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        uint64_t v21 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v6, 0x1Du);
        if (v21)
        {
          uint64_t v18 = v21;
          uint64_t v16 = v25;
          unsigned __int16 Offset = ot::Message::GetOffset(v25);
          __int16 Length = ot::Message::GetLength(v25);
          __int16 v7 = ot::Message::GetOffset(v25);
          int appended = ot::Message::AppendBytesFromMessage(v18, v16, Offset, Length - v7);
          if (!appended)
          {
            ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v20, v22);
            ot::Tmf::MessageInfo::SetSockPortToTmf((ot::Tmf::MessageInfo *)v20);
            __int16 v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
            int appended = ot::Coap::CoapBase::SendMessage(v8, v21, (const ot::Ip6::MessageInfo *)v20);
            if (!appended) {
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Sent to joiner router request on RelayTx (c/tx)", v9, v10, v11, v12, v13, v14, (char)v20);
            }
          }
        }
        else
        {
          int appended = 3;
        }
      }
    }
  }
  if (appended && v21) {
    ot::Message::Free(v21);
  }
  ot::MeshCoP::LogError((char)"send to joiner router request RelayTx (c/tx)", appended);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x14u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::Tmf::MessageInfo::SetSockPortToTmf(ot::Tmf::MessageInfo *this)
{
  return ot::Ip6::MessageInfo::SetSockPort((uint64_t)this, 61631);
}

{
  return ot::Tmf::MessageInfo::SetSockPortToTmf(this);
}

uint64_t ot::MeshCoP::BorderAgent::HandleConnected(ot::MeshCoP::BorderAgent *this, ot::MeshCoP::BorderAgent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::BorderAgent::HandleConnected(a2, this & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::BorderAgent::HandleConnected(ot::MeshCoP::BorderAgent *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Commissioner connected", a3, a4, a5, a6, a7, a8, v11);
    *((unsigned char *)this + 136)  = 2;
    return ot::TimerMilli::Start((ot::MeshCoP::BorderAgent *)((char *)this + 112), 0xC350u);
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"BorderAgent", "Commissioner disconnected", a3, a4, a5, a6, a7, a8, v11);
    uint64_t v9 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
    ot::Ip6::Udp::RemoveReceiver(v9, (ot::MeshCoP::BorderAgent *)((char *)this + 56));
    IgnoreError();
    uint64_t v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    uint64_t result = ot::Ip6::Netif::RemoveUnicastAddress(v10, (ot::MeshCoP::BorderAgent *)((char *)this + 80));
    *((unsigned char *)this + 136)  = 1;
    *((_WORD *)this + 6ot::Mle::Tlv::SetType(this, 9) = 0;
  }
  return result;
}

uint64_t ot::MeshCoP::BorderAgent::GetUdpPort(ot::MeshCoP::BorderAgent *this)
{
  uint64_t v1 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  return (unsigned __int16)ot::Coap::CoapSecure::GetUdpPort(v1);
}

uint64_t ot::Coap::CoapSecure::GetUdpPort(ot::Coap::CoapSecure *this)
{
  return (unsigned __int16)ot::MeshCoP::Dtls::GetUdpPort((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return ot::Coap::CoapSecure::GetUdpPort(this);
}

uint64_t ot::Coap::CoapSecure::SetPsk(ot::Coap::CoapSecure *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::MeshCoP::Dtls::SetPsk((ot::Coap::CoapSecure *)((char *)this + 144), a2, a3);
}

{
  return ot::Coap::CoapSecure::SetPsk(this, a2, a3);
}

void *ot::Clearable<ot::Pskc>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1]  = 0;
  return result;
}

{
  return ot::Clearable<ot::Pskc>::Clear(result);
}

void *ot::Coap::CoapSecure::SetConnectedCallback(ot::Coap::CoapSecure *this, void (*a2)(BOOL, void *), uint64_t a3)
{
  return ot::CallbackBase<void (*)(BOOL,void *)>::Set((void *)this + 129, (uint64_t)a2, a3);
}

{
  return ot::Coap::CoapSecure::SetConnectedCallback(this, a2, a3);
}

void **ot::Coap::CoapSecure::Disconnect(void **this)
{
  return ot::MeshCoP::Dtls::Disconnect(this + 18);
}

{
  return ot::Coap::CoapSecure::Disconnect(this);
}

uint64_t ot::MeshCoP::BorderAgent::ApplyMeshLocalPrefix(uint64_t this)
{
  uint64_t v7 = this;
  if (*(unsigned char *)(this + 136) == 2)
  {
    uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)this);
    this  = ot::Ip6::Netif::HasUnicastAddress(v1, (const ot::Ip6::Netif::UnicastAddress *)(v7 + 80));
    if (this)
    {
      uint64_t v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)v7);
      ot::Ip6::Netif::RemoveUnicastAddress(v2, (const ot::Ip6::Netif::UnicastAddress *)(v7 + 80));
      Address  = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(v7 + 80));
      uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)v7);
      ot::Mle::Mle::GetMeshLocalPrefix(v3);
      ot::Ip6::Address::SetPrefix(Address, v4);
      uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)v7);
      return ot::Ip6::Netif::AddUnicastAddress(v5, (ot::Ip6::Netif::UnicastAddress *)(v7 + 80));
    }
  }
  return this;
}

BOOL ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains((uint64_t *)this, (uint64_t)a2);
}

{
  return ot::Ip6::Netif::HasUnicastAddress(this, a2);
}

uint64_t ot::Mle::CommissionerAloc16FromId(ot::Mle *this)
{
  return (unsigned __int16)((this & 7) - 976);
}

{
  return ot::Mle::CommissionerAloc16FromId(this);
}

void *ot::Ip6::Udp::Receiver::Receiver(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = 0;
  result[1]  = a2;
  result[2]  = a3;
  return result;
}

BOOL ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  v3[0]  = 0;
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(a1, a2, v3) == 0;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

{
  return *(void *)(a1 + 24);
}

{
  return ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(a1);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::BorderAgent,&ot::MeshCoP::BorderAgent::HandleTimeout>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::BorderAgent::HandleTimeout)(v2);
}

void *ot::SettingsBase::BorderAgentId::Init(ot::SettingsBase::BorderAgentId *this)
{
  return ot::Clearable<ot::SettingsBase::BorderAgentId>::Clear(this);
}

{
  return ot::SettingsBase::BorderAgentId::Init(this);
}

void *ot::Clearable<ot::SettingsBase::BorderAgentId>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1]  = 0;
  return result;
}

{
  return ot::Clearable<ot::SettingsBase::BorderAgentId>::Clear(result);
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::Commissioner(ot::MeshCoP::Commissioner *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *((void *)this + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((_WORD *)this + 136)  = 0;
  *((_WORD *)this + 137)  = 0;
  *((_WORD *)this + 13ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 27ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::TimerMilliIn((ot::MeshCoP::Commissioner *)((char *)this + 280), a2);
  ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::TimerMilliIn((ot::MeshCoP::Commissioner *)((char *)this + 304), a2);
  ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::TimerMilliIn((ot::MeshCoP::Commissioner *)((char *)this + 328), a2);
  ot::AnnounceBeginClient::AnnounceBeginClient((ot::MeshCoP::Commissioner *)((char *)this + 352), a2);
  ot::EnergyScanClient::EnergyScanClient((ot::MeshCoP::Commissioner *)((char *)this + 360), a2);
  ot::PanIdQueryClient::PanIdQueryClient((ot::MeshCoP::Commissioner *)((char *)this + 376), a2);
  *((unsigned char *)this + 55++*(_WORD *)(this + 4) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 70);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 72);
  memset(this, 0, 0x100uLL);
  ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear((ot::MeshCoP::Commissioner *)((char *)this + 392));
  *((unsigned char *)this + 40ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 64;
  *((unsigned char *)this + 410) &= ~1u;
  *((unsigned char *)this + 41ot::Mac::ExtAddress::SetGroup(this, 0) = *((unsigned char *)this + 410) & 0xFD | 2;
  *((unsigned char *)this + 41ot::Mac::ExtAddress::SetGroup(this, 0) = *((unsigned char *)this + 410) & 0x87 | 0x18;
  *((unsigned char *)this + 41ot::Mac::ExtAddress::SetGroup(this, 0) = *((unsigned char *)this + 410) & 0xFB | 4;
  ot::MeshCoP::Commissioner::SetId(this, (ot *)"OpenThread Commissioner");
  IgnoreError();
  uint64_t result = this;
  *((unsigned char *)this + 42++*(_WORD *)(this + 4) = 0;
  return result;
}

{
  ot::MeshCoP::Commissioner::Commissioner(this, a2);
  return this;
}

uint64_t ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer(ot::MeshCoP::Commissioner *this)
{
  uint64_t v12 = this;
  int Now = ot::TimerMilli::GetNow(this);
  for (uint64_t i = this; i != (ot::MeshCoP::Commissioner *)((char *)this + 256); uint64_t i = (ot::MeshCoP::Commissioner *)((char *)i + 64))
  {
    if (*((unsigned char *)i + 57))
    {
      if (ot::Time::operator<=((int *)i, &Now))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Commissioner", "removing joiner due to timeout or successfully joined", v1, v2, v3, v4, v5, v6, v8);
        ot::MeshCoP::Commissioner::RemoveJoinerEntry(this, i);
      }
    }
  }
  return ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(this);
}

void ot::MeshCoP::Commissioner::HandleTimer(ot::MeshCoP::Commissioner *this)
{
  int v1 = *((unsigned __int8 *)this + 554);
  if (*((unsigned char *)this + 554))
  {
    if (v1 == 1)
    {
      ot::MeshCoP::Commissioner::SendPetition(this);
      IgnoreError();
    }
    else if (v1 == 2)
    {
      ot::MeshCoP::Commissioner::SendKeepAlive(this);
    }
  }
}

void **ot::MeshCoP::Commissioner::HandleJoinerSessionTimer(unsigned __int8 **this)
{
  if (this[32]) {
    ot::MeshCoP::Commissioner::LogJoinerEntry((uint64_t)this, (char)"Timed out session with", this[32]);
  }
  int v1 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)this);
  return ot::Coap::CoapSecure::Disconnect(v1);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::HandleTimer);
  return a1;
}

double ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(_OWORD *a1)
{
  double result = 0.0;
  *a1  = 0u;
  a1[1]  = 0u;
  return result;
}

{
  return ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(a1);
}

uint64_t ot::MeshCoP::Commissioner::SetId(ot::MeshCoP::Commissioner *this, ot *a2)
{
  __n_1  = 0;
  if (ot::MeshCoP::Commissioner::IsDisabled(this))
  {
    if (a2)
    {
      if (ot::IsValidUtf8String(a2, v2))
      {
        __unsigned __int8 n = ot::StringLength(a2, (const char *)0x41);
        if (__n < 0x40u)
        {
          memcpy((char *)this + 489, a2, __n);
          *((unsigned char *)this + __n + 48ot::Mle::Tlv::SetType(this, 9) = 0;
        }
        else
        {
          return 7;
        }
      }
      else
      {
        return 7;
      }
    }
  }
  else
  {
    return 13;
  }
  return __n_1;
}

void *ot::MeshCoP::Commissioner::SetState(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v15 = a1;
  unsigned __int8 v14 = a2;
  unsigned __int8 v13 = 0;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 554);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
  double result = (void *)ot::Notifier::Update<ot::MeshCoP::Commissioner::State>(v2, (unsigned char *)(a1 + 554), &v14, 0x800000);
  if (!result)
  {
    char v10 = ot::MeshCoP::Commissioner::StateToString(v13);
    ot::MeshCoP::Commissioner::StateToString(v14);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "State: %s -> %s", v4, v5, v6, v7, v8, v9, v10);
    unsigned int v12 = ot::MapEnum<ot::MeshCoP::Commissioner::State>(*(unsigned __int8 *)(a1 + 554));
    return ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otCommissionerState>((void *)(a1 + 560), &v12);
  }
  return result;
}

uint64_t ot::Notifier::Update<ot::MeshCoP::Commissioner::State>(void *a1, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v5;
}

{
  return ot::Notifier::Update<ot::MeshCoP::Commissioner::State>(a1, a2, a3, a4);
}

char *ot::MeshCoP::Commissioner::StateToString(unsigned __int8 a1)
{
  return ot::MeshCoP::Commissioner::StateToString(ot::MeshCoP::Commissioner::State)::kStateStrings[a1];
}

void *ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otCommissionerState>(void *result, unsigned int *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerState>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otCommissionerState>(result, a2);
}

uint64_t ot::MeshCoP::Commissioner::SignalJoinerEvent(void *a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 v13 = a1;
  unsigned __int8 v12 = a2;
  uint64_t v11 = a3;
  char v10 = 0;
  uint64_t result = ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::IsSet(a1 + 72);
  if ((result & 1) != 0 && v11)
  {
    ot::MeshCoP::Commissioner::Joiner::CopyToJoinerInfo(v11, v15);
    if (*(unsigned char *)(v11 + 57) == 2)
    {
      ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)(v11 + 8), (const ot::Mac::ExtAddress *)v14, v4);
    }
    else if (v11 == a1[32])
    {
      ot::Ip6::InterfaceIdentifier::ConvertToExtAddress((ot::Ip6::InterfaceIdentifier *)(a1 + 33), (ot::Mac::ExtAddress *)v14);
    }
    else
    {
      char v10 = 1;
    }
    unsigned int v9 = ot::MapEnum<ot::MeshCoP::Commissioner::JoinerEvent>(v12);
    uint64_t v8 = v15;
    if (v10) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = v14;
    }
    uint64_t v7 = v5;
    return ot::Callback<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerJoinerEvent,otJoinerInfo*,ot::Mac::ExtAddress *>((uint64_t)(a1 + 72), &v9, &v8, &v7);
  }
  return result;
}

BOOL ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::IsSet(a1);
}

uint64_t ot::MeshCoP::Commissioner::Joiner::CopyToJoinerInfo(uint64_t a1, char *a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t result = (uint64_t)memset(a2, 0, 0x40uLL);
  if (*(unsigned char *)(a1 + 57))
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 57);
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 57);
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        return result;
      case 1:
        *(_DWORD *)uint64_t v8 = 0;
        break;
      case 2:
        *(_DWORD *)uint64_t v8 = 1;
        *((void *)v8 + 1)  = *(void *)(a1 + 8);
        break;
      case 3:
        *(_DWORD *)uint64_t v8 = 2;
        *(_OWORD *)(v8 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
        break;
      default:
        JUMPOUT(0);
    }
  }
  unsigned int v5 = (ot::TimerMilli *)memcpy(v8 + 24, (const void *)(a1 + 24), 0x21uLL);
  int Now = ot::TimerMilli::GetNow(v5);
  uint64_t result = ot::Time::operator-((_DWORD *)a1, &Now);
  *((_DWORD *)v8 + 15)  = result;
  return result;
}

uint64_t ot::Callback<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerJoinerEvent,otJoinerInfo*,ot::Mac::ExtAddress *>(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerJoinerEvent,otJoinerInfo*,ot::Mac::ExtAddress *>(a1, a2, a3, a4);
}

uint64_t ot::MapEnum<ot::MeshCoP::Commissioner::JoinerEvent>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::MeshCoP::Commissioner::JoinerEvent>(result);
}

uint64_t ot::MeshCoP::Commissioner::HandleSecureAgentConnected(ot::MeshCoP::Commissioner *this, ot::MeshCoP::Commissioner *a2, void *a3)
{
  return ot::MeshCoP::Commissioner::HandleSecureAgentConnected(a2, this & 1);
}

uint64_t ot::MeshCoP::Commissioner::HandleSecureAgentConnected(ot::MeshCoP::Commissioner *this, char a2)
{
  char v5 = a2 & 1;
  if ((a2 & 1) == 0) {
    ot::TimerMilli::Stop((ot::MeshCoP::Commissioner *)((char *)this + 328));
  }
  if (v5) {
    unsigned __int8 v2 = 1;
  }
  else {
    unsigned __int8 v2 = 3;
  }
  return ot::MeshCoP::Commissioner::SignalJoinerEvent(this, v2, *((void *)this + 32));
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::GetUnusedJoinerEntry(ot::MeshCoP::Commissioner *this)
{
  uint64_t v3 = 0;
  for (uint64_t i = this; i != (ot::MeshCoP::Commissioner *)((char *)this + 256); uint64_t i = (ot::MeshCoP::Commissioner *)((char *)i + 64))
  {
    if (!*((unsigned char *)i + 57)) {
      return i;
    }
  }
  return (ot::MeshCoP::Commissioner *)v3;
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::FindJoinerEntry(ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v7 = 0;
  uint64_t v6 = this;
  char v5 = (ot::MeshCoP::Commissioner *)((char *)this + 256);
  while (v6 != v5)
  {
    if (*((unsigned char *)v6 + 57))
    {
      uint64_t v3 = *((unsigned __int8 *)v6 + 57);
      char v2 = 1;
    }
    else
    {
      uint64_t v3 = *((unsigned __int8 *)v6 + 57);
      char v2 = 0;
    }
    if ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 0:
        case 3:
          goto LABEL_14;
        case 1:
          if (a2) {
            goto LABEL_14;
          }
          uint64_t v7 = v6;
          break;
        case 2:
          if (!a2 || !ot::Equatable<ot::Mac::ExtAddress>::operator==((char *)v6 + 8, a2)) {
            goto LABEL_14;
          }
          uint64_t v7 = v6;
          break;
        default:
          JUMPOUT(0);
      }
      return v7;
    }
LABEL_14:
    uint64_t v6 = (ot::MeshCoP::Commissioner *)((char *)v6 + 64);
  }
  return v7;
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::FindJoinerEntry(ot::MeshCoP::Commissioner *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  uint64_t v5 = 0;
  uint64_t v4 = this;
  uint64_t v3 = (ot::MeshCoP::Commissioner *)((char *)this + 256);
  while (v4 != v3)
  {
    if (*((unsigned char *)v4 + 57) == 3 && ot::MeshCoP::JoinerDiscerner::operator==((unsigned __int8 *)a2, (uint64_t)v4 + 8)) {
      return v4;
    }
    uint64_t v4 = (ot::MeshCoP::Commissioner *)((char *)v4 + 64);
  }
  return (ot::MeshCoP::Commissioner *)v5;
}

ot::MeshCoP::Commissioner *ot::MeshCoP::Commissioner::FindBestMatchingJoinerEntry(ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, ot::Mac::ExtAddress *a3)
{
  uint64_t v9 = 0;
  uint64_t v8 = this;
  uint64_t v7 = (ot::MeshCoP::Commissioner *)((char *)this + 256);
  while (v8 != v7)
  {
    if (*((unsigned char *)v8 + 57))
    {
      uint64_t v4 = *((unsigned __int8 *)v8 + 57);
      char v3 = 1;
    }
    else
    {
      uint64_t v4 = *((unsigned __int8 *)v8 + 57);
      char v3 = 0;
    }
    if ((v3 & 1) == 0)
    {
      switch(v4)
      {
        case 0:
          goto LABEL_19;
        case 1:
          if (!v9) {
            uint64_t v9 = v8;
          }
          goto LABEL_19;
        case 2:
          ot::MeshCoP::ComputeJoinerId((ot::MeshCoP::Commissioner *)((char *)v8 + 8), (const ot::Mac::ExtAddress *)v11, a3);
          if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(v11, a2)) {
            goto LABEL_19;
          }
          uint64_t v9 = v8;
          break;
        case 3:
          if (ot::MeshCoP::JoinerDiscerner::Matches((ot::MeshCoP::Commissioner *)((char *)v8 + 8), a2))
          {
            if (!v9
              || *((unsigned char *)v9 + 57) == 3
              && (int Length = ot::MeshCoP::JoinerDiscerner::GetLength((ot::MeshCoP::Commissioner *)((char *)v9 + 8)),
                  Length < ot::MeshCoP::JoinerDiscerner::GetLength((ot::MeshCoP::Commissioner *)((char *)v8 + 8))))
            {
              uint64_t v9 = v8;
            }
          }
          goto LABEL_19;
        default:
          JUMPOUT(0);
      }
      return v9;
    }
LABEL_19:
    uint64_t v8 = (ot::MeshCoP::Commissioner *)((char *)v8 + 64);
  }
  return v9;
}

uint64_t ot::MeshCoP::JoinerDiscerner::GetLength(ot::MeshCoP::JoinerDiscerner *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return ot::MeshCoP::JoinerDiscerner::GetLength(this);
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoinerEntry(ot::MeshCoP::Commissioner *a1, unsigned char *a2)
{
  memcpy(__dst, a2, sizeof(__dst));
  a2[57]  = 0;
  if (a2 == *((unsigned char **)a1 + 32)) {
    *((void *)a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  }
  ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(a1);
  ot::MeshCoP::Commissioner::SendCommissionerSet(a1);
  ot::MeshCoP::Commissioner::LogJoinerEntry((uint64_t)a1, (char)"Removed", __dst);
  return ot::MeshCoP::Commissioner::SignalJoinerEvent(a1, 4u, (uint64_t)__dst);
}

uint64_t ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(ot::MeshCoP::Commissioner *this)
{
  uint64_t v15 = this;
  int Now = 0;
  int Now = ot::TimerMilli::GetNow(this);
  DistantFuture  = ot::Time::GetDistantFuture((ot::Time *)&Now);
  unsigned __int8 v12 = this;
  uint64_t v11 = this;
  char v10 = (ot::MeshCoP::Commissioner *)((char *)this + 256);
  while (v11 != v10)
  {
    uint64_t v9 = (int *)v11;
    if (*((unsigned char *)v11 + 57))
    {
      int v7 = DistantFuture;
      int v5 = Now;
      int v4 = *v9;
      int v6 = ot::Max<ot::Time>(Now, v4);
      int v8 = ot::Min<ot::Time>(DistantFuture, v6);
      DistantFuture  = v8;
    }
    uint64_t v11 = (ot::MeshCoP::Commissioner *)((char *)v11 + 64);
  }
  int v3 = ot::Time::GetDistantFuture((ot::Time *)&Now);
  if (ot::Time::operator<(&DistantFuture, &v3)) {
    return ot::TimerMilli::FireAt((ot::MeshCoP::Commissioner *)((char *)this + 280), DistantFuture);
  }
  else {
    return ot::TimerMilli::Stop((ot::MeshCoP::Commissioner *)((char *)this + 280));
  }
}

void ot::MeshCoP::Commissioner::SendCommissionerSet(ot::MeshCoP::Commissioner *this)
{
  if (*((unsigned char *)this + 554) == 2)
  {
    ot::Clearable<ot::MeshCoP::Commissioner::Dataset>::Clear((uint64_t)v4);
    ot::MeshCoP::Commissioner::Dataset::SetSessionId((uint64_t)v4, *((_WORD *)this + 138));
    updated  = (ot::MeshCoP::SteeringData *)ot::MeshCoP::Commissioner::Dataset::UpdateSteeringData((ot::MeshCoP::Commissioner::Dataset *)v4);
    ot::MeshCoP::Commissioner::ComputeBloomFilter(this, updated);
    int v3 = ot::MeshCoP::Commissioner::SendMgmtCommissionerSetRequest(this, (const ot::MeshCoP::Commissioner::Dataset *)v4, 0, 0);
    ot::MeshCoP::LogError((char)"send MGMT_COMMISSIONER_SET.req", v3);
  }
  else
  {
    ot::MeshCoP::LogError((char)"send MGMT_COMMISSIONER_SET.req", 13);
  }
}

void ot::MeshCoP::Commissioner::LogJoinerEntry(uint64_t a1, char a2, unsigned __int8 *a3)
{
  if (a3[57])
  {
    uint64_t v4 = a3[57];
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = a3[57];
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        return;
      case 1:
        ot::MeshCoP::JoinerPskd::GetAsCString((ot::MeshCoP::JoinerPskd *)(a3 + 24));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "%s Joiner (any, %s)", v5, v6, v7, v8, v9, v10, a2);
        break;
      case 2:
        ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)(a3 + 8), (ot::StringWriter *)v26);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v26);
        ot::MeshCoP::JoinerPskd::GetAsCString((ot::MeshCoP::JoinerPskd *)(a3 + 24));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "%s Joiner (eui64:%s, %s)", v11, v12, v13, v14, v15, v16, a2);
        break;
      case 3:
        ot::MeshCoP::JoinerDiscerner::ToString((ot::MeshCoP::JoinerDiscerner *)(a3 + 8), (ot::StringWriter *)v25);
        ot::String<(unsigned short)45>::AsCString((uint64_t)v25);
        ot::MeshCoP::JoinerPskd::GetAsCString((ot::MeshCoP::JoinerPskd *)(a3 + 24));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "%s Joiner (disc:%s, %s)", v17, v18, v19, v20, v21, v22, a2);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t ot::MeshCoP::Commissioner::Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
  if (ot::Mle::Mle::IsAttached(v4))
  {
    if (*(unsigned char *)(a1 + 554))
    {
      unsigned int v17 = 24;
    }
    else
    {
      uint64_t v5 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>((ot::InstanceLocator *)a1);
      ot::MeshCoP::BorderAgent::Stop(v5);
      uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
      unsigned int v17 = ot::Coap::CoapSecure::Start(v6, (uint64_t)ot::MeshCoP::Commissioner::SendRelayTransmit, a1);
      if (!v17)
      {
        uint64_t v7 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
        ot::Coap::CoapSecure::SetConnectedCallback(v7, (void (*)(BOOL, void *))ot::MeshCoP::Commissioner::HandleSecureAgentConnected, a1);
        ot::CallbackBase<void (*)(otCommissionerState,void *)>::Set((void *)(a1 + 560), a2, a4);
        ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::Set((void *)(a1 + 576), a3, a4);
        *(unsigned char *)(a1 + 27ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
        unsigned int v17 = ot::MeshCoP::Commissioner::SendPetition((ot::MeshCoP::Commissioner *)a1);
        if (!v17)
        {
          ot::MeshCoP::Commissioner::SetState(a1, 1u);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "start commissioner %s", v8, v9, v10, v11, v12, v13, a1 - 23);
        }
      }
    }
  }
  else
  {
    unsigned int v17 = 13;
  }
  if (v17 && v17 != 24)
  {
    uint64_t v14 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
    ot::Coap::CoapSecure::Stop(v14);
  }
  ot::MeshCoP::LogError((char)"start commissioner", v17);
  return v17;
}

uint64_t ot::MeshCoP::Commissioner::SendRelayTransmit(ot::MeshCoP::Commissioner *this, ot::Message *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  return ot::MeshCoP::Commissioner::SendRelayTransmit(this, a2, a3);
}

void *ot::CallbackBase<void (*)(otCommissionerState,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otCommissionerState,void *)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otCommissionerJoinerEvent,otJoinerInfo const*,otExtAddress const*,void *)>::Set(result, a2, a3);
}

uint64_t ot::MeshCoP::Commissioner::SendPetition(ot::MeshCoP::Commissioner *this)
{
  uint64_t v16 = this;
  unsigned int v15 = 0;
  uint64_t v14 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v13, Instance);
  ++*((unsigned char *)this + 278);
  char v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v2, 0x17u);
  if (v14)
  {
    ot::MeshCoP::CommissionerIdTlv::Init((ot::MeshCoP::CommissionerIdTlv *)v17);
    ot::MeshCoP::CommissionerIdTlv::SetCommissionerId((ot::MeshCoP::CommissionerIdTlv *)v17, (ot::MeshCoP::Commissioner *)((char *)this + 489));
    unsigned int v15 = ot::Tlv::AppendTo((ot::Tlv *)v17, v14);
    if (!v15)
    {
      unsigned int v15 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v13);
      if (!v15)
      {
        char v3 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        unsigned int v15 = ot::Coap::CoapBase::SendMessage(v3, v14, (ot::Ip6::MessageInfo *)v13, (uint64_t)ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse, (uint64_t)this);
        if (!v15)
        {
          char v4 = ot::UriToString<(ot::Uri)23>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s", v5, v6, v7, v8, v9, v10, v4);
        }
      }
    }
  }
  else
  {
    unsigned int v15 = 3;
  }
  if (v15 && v14) {
    ot::Message::Free(v14);
  }
  return v15;
}

uint64_t ot::MeshCoP::Commissioner::Stop(unsigned char *a1, char a2)
{
  unsigned int v8 = 0;
  char v7 = 0;
  if (a1[554])
  {
    ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 328));
    char v2 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
    ot::Coap::CoapSecure::Stop(v2);
    if (a1[554] == 2)
    {
      char v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
      ot::Ip6::Netif::RemoveUnicastAddress(v3, (const ot::Ip6::Netif::UnicastAddress *)(a1 + 392));
      ot::MeshCoP::Commissioner::ClearJoiners((ot::MeshCoP::Commissioner *)a1);
      char v7 = 1;
    }
    else if (a1[554] == 1)
    {
      a1[278]  = 0;
    }
    ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 304));
    ot::MeshCoP::Commissioner::SetState((uint64_t)a1, 0);
    if ((v7 & 1) != 0 && !a2) {
      ot::MeshCoP::Commissioner::SendKeepAlive((ot::MeshCoP::Commissioner *)a1);
    }
    char v4 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>((ot::InstanceLocator *)a1);
    ot::MeshCoP::BorderAgent::Start(v4);
    ot::MeshCoP::LogError((char)"stop commissioner", 0);
  }
  else
  {
    unsigned int v8 = 24;
    ot::MeshCoP::LogError((char)"stop commissioner", 24);
  }
  return v8;
}

void ot::MeshCoP::Commissioner::ClearJoiners(ot::MeshCoP::Commissioner *this)
{
  for (uint64_t i = this; i != (ot::MeshCoP::Commissioner *)((char *)this + 256); uint64_t i = (ot::MeshCoP::Commissioner *)((char *)i + 64))
    *((unsigned char *)i + 57)  = 0;
  ot::MeshCoP::Commissioner::SendCommissionerSet(this);
}

void ot::MeshCoP::Commissioner::SendKeepAlive(ot::MeshCoP::Commissioner *this)
{
}

uint64_t ot::MeshCoP::Commissioner::ComputeBloomFilter(ot::MeshCoP::Commissioner *this, ot::MeshCoP::SteeringData *a2)
{
  uint64_t result = ot::MeshCoP::SteeringData::Init((uint64_t)a2, 0x10u);
  for (uint64_t i = (unsigned __int8 *)this; i != (unsigned __int8 *)((char *)this + 256); i += 64)
  {
    if (i[57])
    {
      uint64_t v5 = i[57];
      char v4 = 1;
    }
    else
    {
      uint64_t v5 = i[57];
      char v4 = 0;
    }
    if ((v4 & 1) == 0)
    {
      switch(v5)
      {
        case 0:
          continue;
        case 1:
          return ot::MeshCoP::SteeringData::SetToPermitAllJoiners(a2);
        case 2:
          ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)(i + 8), (const ot::Mac::ExtAddress *)v9, v3);
          uint64_t result = ot::MeshCoP::SteeringData::UpdateBloomFilter(a2, (const ot::Mac::ExtAddress *)v9);
          continue;
        case 3:
          uint64_t result = ot::MeshCoP::SteeringData::UpdateBloomFilter(a2, (const ot::MeshCoP::JoinerDiscerner *)(i + 8));
          continue;
        default:
          JUMPOUT(0);
      }
    }
  }
  return result;
}

uint64_t ot::Clearable<ot::MeshCoP::Commissioner::Dataset>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *(void *)(result + 16)  = 0;
  *(_WORD *)(result + 2++*(_WORD *)(this + 4) = 0;
  return result;
}

{
  return ot::Clearable<ot::MeshCoP::Commissioner::Dataset>::Clear(result);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::SetSessionId(uint64_t this, __int16 a2)
{
  *(unsigned char *)(this + 2++*(_WORD *)(this + 4) = *(unsigned char *)(this + 24) & 0xFD | 2;
  *(_WORD *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return ot::MeshCoP::Commissioner::Dataset::SetSessionId(this, a2);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::UpdateSteeringData(ot::MeshCoP::Commissioner::Dataset *this)
{
  *((unsigned char *)this + 2++*(_WORD *)(this + 4) = *((unsigned char *)this + 24) & 0xFB | 4;
  return ot::AsCoreType<otSteeringData>((uint64_t)this + 4);
}

{
  return ot::MeshCoP::Commissioner::Dataset::UpdateSteeringData(this);
}

uint64_t ot::MeshCoP::Commissioner::SendMgmtCommissionerSetRequest(ot::MeshCoP::Commissioner *this, const ot::MeshCoP::Commissioner::Dataset *a2, char *a3, unsigned __int8 a4)
{
  char v32 = this;
  int v31 = a2;
  unsigned __int8 v30 = a3;
  unsigned __int8 v29 = a4;
  unsigned int appended = 0;
  uint64_t v27 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v26, Instance);
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v27 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v5, 0x10u);
  if (v27)
  {
    if ((ot::MeshCoP::Commissioner::Dataset::IsLocatorSet(v31) & 1) == 0
      || (uint64_t v23 = v27,
          unsigned __int16 Locator = ot::MeshCoP::Commissioner::Dataset::GetLocator(v31),
          (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::BorderAgentLocatorTlv>(v23, Locator)) == 0))
    {
      if ((ot::MeshCoP::Commissioner::Dataset::IsSessionIdSet(v31) & 1) == 0
        || (uint64_t v22 = v27,
            unsigned __int16 SessionId = ot::MeshCoP::Commissioner::Dataset::GetSessionId(v31),
            (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v22, SessionId)) == 0))
      {
        if ((ot::MeshCoP::Commissioner::Dataset::IsSteeringDataSet(v31) & 1) == 0
          || (SteeringData  = (ot::MeshCoP::SteeringData *)ot::MeshCoP::Commissioner::Dataset::GetSteeringData(v31),
              uint64_t v21 = v27,
              Data  = (void *)ot::MeshCoP::SteeringData::GetData(SteeringData),
              unsigned __int8 Length = ot::MeshCoP::SteeringData::GetLength(SteeringData),
              (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::SteeringDataTlv>(v21, Data, Length)) == 0))
        {
          if ((ot::MeshCoP::Commissioner::Dataset::IsJoinerUdpPortSet(v31) & 1) == 0
            || (uint64_t v19 = v27,
                Joinerchar UdpPort = ot::MeshCoP::Commissioner::Dataset::GetJoinerUdpPort(v31),
                (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(v19, JoinerUdpPort)) == 0))
          {
            if (!v29 || (unsigned int appended = ot::Message::AppendBytes(v27, v30, v29)) == 0)
            {
              unsigned int appended = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v26);
              if (!appended)
              {
                uint64_t v10 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                unsigned int appended = ot::Coap::CoapBase::SendMessage(v10, v27, (ot::Ip6::MessageInfo *)v26, (uint64_t)ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse, (uint64_t)this);
                if (!appended)
                {
                  char v11 = ot::UriToString<(ot::Uri)16>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s to leader", v12, v13, v14, v15, v16, v17, v11);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v27) {
    ot::Message::Free(v27);
  }
  return appended;
}

uint64_t ot::MeshCoP::Commissioner::AddJoiner(ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, const ot::MeshCoP::JoinerDiscerner *a3, ot *a4, unsigned int a5)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  unsigned int v13 = a5;
  unsigned int v12 = 0;
  JoinerEntry  = 0;
  if (*((unsigned char *)this + 554) == 2)
  {
    if (v15)
    {
      if (!ot::MeshCoP::JoinerDiscerner::IsValid(v15)) {
        return 7;
      }
      JoinerEntry  = ot::MeshCoP::Commissioner::FindJoinerEntry(this, v15);
    }
    else
    {
      JoinerEntry  = ot::MeshCoP::Commissioner::FindJoinerEntry(this, v16);
    }
    if (!JoinerEntry) {
      JoinerEntry  = ot::MeshCoP::Commissioner::GetUnusedJoinerEntry(this);
    }
    if (JoinerEntry)
    {
      uint64_t v5 = (ot::TimerMilli *)ot::MeshCoP::JoinerPskd::SetFrom((ot::MeshCoP::Commissioner *)((char *)JoinerEntry + 24), v14);
      unsigned int v12 = v5;
      if (!v5)
      {
        if (v15)
        {
          *((unsigned char *)JoinerEntry + 57)  = 3;
          *(_OWORD *)((char *)JoinerEntry + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_OWORD *)v15;
        }
        else if (v16)
        {
          *((unsigned char *)JoinerEntry + 57)  = 2;
          *((void *)JoinerEntry + 1)  = *(void *)v16;
        }
        else
        {
          *((unsigned char *)JoinerEntry + 57)  = 1;
        }
        int Now = ot::TimerMilli::GetNow(v5);
        int v6 = ot::Time::SecToMsec((ot::Time *)v13);
        int v10 = ot::Time::operator+(&Now, v6);
        *(_DWORD *)JoinerEntry  = v10;
        ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(this);
        ot::MeshCoP::Commissioner::SendCommissionerSet(this);
        ot::MeshCoP::Commissioner::LogJoinerEntry((uint64_t)this, (char)"Added", (unsigned __int8 *)JoinerEntry);
      }
    }
    else
    {
      return 3;
    }
  }
  else
  {
    return 13;
  }
  return v12;
}

BOOL ot::MeshCoP::JoinerDiscerner::IsValid(ot::MeshCoP::JoinerDiscerner *this)
{
  BOOL v2 = 0;
  if (*((unsigned char *)this + 8)) {
    return *((unsigned __int8 *)this + 8) <= 0x40u;
  }
  return v2;
}

{
  return ot::MeshCoP::JoinerDiscerner::IsValid(this);
}

uint64_t ot::MeshCoP::Commissioner::GetNextJoinerInfo(uint64_t a1, _WORD *a2, char *a3)
{
  unsigned int v8 = 0;
  while (1)
  {
    int v5 = (unsigned __int16)*a2;
    if (v5 >= (unsigned __int16)ot::GetArrayLength<ot::MeshCoP::Commissioner::Joiner,(unsigned short)4>()) {
      break;
    }
    uint64_t v3 = (unsigned __int16)(*a2)++;
    uint64_t v7 = a1 + (v3 << 6);
    if (*(unsigned char *)(v7 + 57))
    {
      ot::MeshCoP::Commissioner::Joiner::CopyToJoinerInfo(v7, a3);
      return v8;
    }
  }
  return 23;
}

uint64_t ot::GetArrayLength<ot::MeshCoP::Commissioner::Joiner,(unsigned short)4>()
{
  return 4;
}

{
  return ot::GetArrayLength<ot::MeshCoP::Commissioner::Joiner,(unsigned short)4>();
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoiner(ot::MeshCoP::Commissioner *this, const ot::Mac::ExtAddress *a2, const ot::MeshCoP::JoinerDiscerner *a3, unsigned int a4)
{
  unsigned int v7 = 0;
  if (*((unsigned char *)this + 554) == 2)
  {
    if (a3)
    {
      if (!ot::MeshCoP::JoinerDiscerner::IsValid(a3)) {
        return 7;
      }
      JoinerEntry  = (int *)ot::MeshCoP::Commissioner::FindJoinerEntry(this, a3);
    }
    else
    {
      JoinerEntry  = (int *)ot::MeshCoP::Commissioner::FindJoinerEntry(this, a2);
    }
    if (JoinerEntry) {
      ot::MeshCoP::Commissioner::RemoveJoiner(this, JoinerEntry, a4);
    }
    else {
      return 23;
    }
  }
  else
  {
    return 13;
  }
  return v7;
}

uint64_t ot::MeshCoP::Commissioner::RemoveJoiner(ot::MeshCoP::Commissioner *a1, int *a2, unsigned int a3)
{
  int v10 = a1;
  uint64_t v9 = a2;
  unsigned int v8 = a3;
  if (!a3) {
    return ot::MeshCoP::Commissioner::RemoveJoinerEntry(a1, v9);
  }
  int v7 = 0;
  int Now = ot::TimerMilli::GetNow(a1);
  int v3 = ot::Time::SecToMsec((ot::Time *)v8);
  int v7 = ot::Time::operator+(&Now, v3);
  uint64_t result = ot::Time::operator>(v9, &v7);
  if (result)
  {
    *uint64_t v9 = v7;
    return ot::MeshCoP::Commissioner::UpdateJoinerExpirationTimer(a1);
  }
  return result;
}

uint64_t ot::MeshCoP::Commissioner::SetProvisioningUrl(ot::MeshCoP::Commissioner *this, ot *a2)
{
  __n_1  = 0;
  if (a2)
  {
    if (ot::IsValidUtf8String(a2, (const char *)a2))
    {
      __unsigned __int8 n = ot::StringLength(a2, (const char *)0x41);
      if (__n < 0x41uLL)
      {
        memcpy((char *)this + 424, a2, __n);
        *((unsigned char *)this + __n + 42++*(_WORD *)(this + 4) = 0;
      }
      else
      {
        return 7;
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    *((unsigned char *)this + 42++*(_WORD *)(this + 4) = 0;
  }
  return __n_1;
}

BOOL ot::Time::operator<=(int *a1, int *a2)
{
  return ot::Time::operator>=(a2, a1);
}

{
  return ot::Time::operator<=(a1, a2);
}

uint64_t ot::Max<ot::Time>(int a1, int a2)
{
  int v5 = a1;
  int v4 = a2;
  if (ot::Time::operator<(&v5, &v4)) {
    int v3 = &v4;
  }
  else {
    int v3 = &v5;
  }
  return *v3;
}

{
  return ot::Max<ot::Time>(a1, a2);
}

uint64_t ot::MeshCoP::Commissioner::SendMgmtCommissionerGetRequest(ot::MeshCoP::Commissioner *this, char *a2, unsigned __int8 a3)
{
  uint64_t v21 = this;
  uint64_t v20 = a2;
  unsigned __int8 v19 = a3;
  unsigned int appended = 0;
  uint64_t v17 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v16, Instance);
  int v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v17 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v4, 0xEu);
  if (v17)
  {
    if (!v19
      || (ot::MeshCoP::Tlv::SetType(v15, 13),
          ot::Tlv::SetLength((uint64_t)v15, v19),
          (unsigned int appended = ot::Message::Append<ot::MeshCoP::Tlv>(v17, v15)) == 0)
      && (unsigned int appended = ot::Message::AppendBytes(v17, v20, v19)) == 0)
    {
      unsigned int appended = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v16);
      if (!appended)
      {
        int v5 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        unsigned int appended = ot::Coap::CoapBase::SendMessage(v5, v17, (ot::Ip6::MessageInfo *)v16, (uint64_t)ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse, (uint64_t)this);
        if (!appended)
        {
          char v6 = ot::UriToString<(ot::Uri)14>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s to leader", v7, v8, v9, v10, v11, v12, v6);
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v17) {
    ot::Message::Free(v17);
  }
  return appended;
}

uint64_t ot::Message::Append<ot::MeshCoP::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::MeshCoP::Tlv>(a1, a2);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  char v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerGetResponse(uint64_t a1, ot::Coap::Message *a2, uint64_t a3, int a4)
{
  if (!a4 && ot::Coap::Message::GetCode(a2) == 68)
  {
    char v4 = ot::UriToString<(ot::Uri)14>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
  }
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsLocatorSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *((unsigned char *)this + 24) & 1;
}

{
  return ot::MeshCoP::Commissioner::Dataset::IsLocatorSet(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::BorderAgentLocatorTlv>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 9u, a2);
}

{
  return ot::Tlv::Append<ot::MeshCoP::BorderAgentLocatorTlv>(a1, a2);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetLocator(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::MeshCoP::Commissioner::Dataset::GetLocator(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsSessionIdSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return (*((unsigned __int8 *)this + 24) >> 1) & 1;
}

{
  return ot::MeshCoP::Commissioner::Dataset::IsSessionIdSet(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetSessionId(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return ot::MeshCoP::Commissioner::Dataset::GetSessionId(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsSteeringDataSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return (*((unsigned __int8 *)this + 24) >> 2) & 1;
}

{
  return ot::MeshCoP::Commissioner::Dataset::IsSteeringDataSet(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetSteeringData(ot::MeshCoP::Commissioner::Dataset *this)
{
  return ot::AsCoreType<otSteeringData>((uint64_t)this + 4);
}

{
  return ot::MeshCoP::Commissioner::Dataset::GetSteeringData(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::SteeringDataTlv>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)8, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::MeshCoP::SteeringDataTlv>(a1, a2, a3);
}

uint64_t ot::MeshCoP::SteeringData::GetData(ot::MeshCoP::SteeringData *this)
{
  return (uint64_t)this + 1;
}

{
  return (uint64_t)this + 1;
}

{
  return ot::MeshCoP::SteeringData::GetData(this);
}

{
  return ot::MeshCoP::SteeringData::GetData(this);
}

uint64_t ot::MeshCoP::SteeringData::GetLength(ot::MeshCoP::SteeringData *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::MeshCoP::SteeringData::GetLength(this);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::IsJoinerUdpPortSet(ot::MeshCoP::Commissioner::Dataset *this)
{
  return (*((unsigned __int8 *)this + 24) >> 3) & 1;
}

{
  return ot::MeshCoP::Commissioner::Dataset::IsJoinerUdpPortSet(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x12u, a2);
}

{
  return ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(a1, a2);
}

uint64_t ot::MeshCoP::Commissioner::Dataset::GetJoinerUdpPort(ot::MeshCoP::Commissioner::Dataset *this)
{
  return *((unsigned __int16 *)this + 11);
}

{
  return ot::MeshCoP::Commissioner::Dataset::GetJoinerUdpPort(this);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleMgmtCommissionerSetResponse(uint64_t a1, ot::Coap::Message *a2, uint64_t a3, int a4)
{
  if (!a4 && ot::Coap::Message::GetCode(a2) == 68)
  {
    char v4 = ot::UriToString<(ot::Uri)16>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
  }
}

uint64_t ot::MeshCoP::CommissionerIdTlv::Init(ot::MeshCoP::CommissionerIdTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 64);
}

{
  return ot::MeshCoP::CommissionerIdTlv::Init(this);
}

uint64_t ot::MeshCoP::CommissionerIdTlv::SetCommissionerId(ot::MeshCoP::CommissionerIdTlv *this, ot *a2)
{
  __unsigned __int8 n = ot::StringLength(a2, (const char *)0x40);
  memcpy((char *)this + 2, a2, __n);
  return ot::Tlv::SetLength((uint64_t)this, __n);
}

{
  return ot::MeshCoP::CommissionerIdTlv::SetCommissionerId(this, a2);
}

void ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleLeaderPetitionResponse(uint64_t a1, ot::Tlv *a2, uint64_t a3, int a4)
{
  uint64_t v26 = a1;
  char v25 = a2;
  uint64_t v24 = a3;
  int v23 = a4;
  char v22 = 0;
  BOOL v21 = 0;
  if (*(unsigned char *)(a1 + 554) != 2)
  {
    if (!v23 && ot::Coap::Message::GetCode(v25) == 68)
    {
      char v4 = ot::UriToString<(ot::Uri)23>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
      if (!ot::Tlv::Find<ot::MeshCoP::StateTlv>(v25, &v22, v11, v12))
      {
        if (v22 == 1)
        {
          if (!ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v25, (unsigned __int16 *)(a1 + 276), v13, v14))
          {
            if (*(unsigned char *)(a1 + 554))
            {
              unsigned __int8 v19 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
              Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 392));
              ot::Mle::Mle::GetCommissionerAloc(v19, Address, *(_WORD *)(a1 + 276));
              IgnoreError();
              uint64_t v16 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
              ot::Ip6::Netif::AddUnicastAddress(v16, (ot::Ip6::Netif::UnicastAddress *)(a1 + 392));
              ot::MeshCoP::Commissioner::SetState(a1, 2u);
              *(unsigned char *)(a1 + 27ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
              unsigned int v17 = ot::Time::SecToMsec((ot::Time *)0x32);
              ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), v17 / 2);
            }
            else
            {
              ot::MeshCoP::Commissioner::SendKeepAlive((ot::MeshCoP::Commissioner *)a1, *(_WORD *)(a1 + 276));
            }
          }
        }
        else
        {
          ot::MeshCoP::Commissioner::Stop((unsigned char *)a1, 1);
          IgnoreError();
        }
      }
    }
    else
    {
      BOOL v21 = *(unsigned char *)(a1 + 554) == 1;
    }
  }
  if (v21)
  {
    if (*(unsigned __int8 *)(a1 + 278) < 2u)
    {
      unsigned int v18 = ot::Time::SecToMsec((ot::Time *)1);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), v18);
    }
    else
    {
      ot::MeshCoP::Commissioner::Stop((unsigned char *)a1, 1);
      IgnoreError();
    }
  }
}

void ot::MeshCoP::Commissioner::SendKeepAlive(ot::MeshCoP::Commissioner *this, unsigned __int16 a2)
{
  unsigned int v18 = this;
  unsigned __int16 v17 = a2;
  int v16 = 0;
  uint64_t v15 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v14, Instance);
  int v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v15 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v3, 0x16u);
  if (v15)
  {
    if (*((unsigned char *)this + 554) == 2) {
      unsigned __int8 v4 = 1;
    }
    else {
      unsigned __int8 v4 = -1;
    }
    int v16 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(v15, v4);
    if (!v16)
    {
      int v16 = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v15, v17);
      if (!v16)
      {
        int v16 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v14);
        if (!v16)
        {
          uint64_t v5 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          int v16 = ot::Coap::CoapBase::SendMessage(v5, v15, (ot::Ip6::MessageInfo *)v14, (uint64_t)ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse, (uint64_t)this);
          if (!v16)
          {
            char v6 = ot::UriToString<(ot::Uri)22>();
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s", v7, v8, v9, v10, v11, v12, v6);
          }
        }
      }
    }
  }
  else
  {
    int v16 = 3;
  }
  if (v16 && v15) {
    ot::Message::Free(v15);
  }
  ot::MeshCoP::LogError((char)"send keep alive", v16);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::StateTlv>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 0x10u, a2);
}

{
  return ot::Tlv::Append<ot::MeshCoP::StateTlv>(a1, a2);
}

void ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  char v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Commissioner::HandleLeaderKeepAliveResponse(uint64_t a1, ot::Tlv *a2, uint64_t a3, int a4)
{
  uint64_t v19 = a1;
  unsigned int v18 = a2;
  uint64_t v17 = a3;
  int v16 = a4;
  char v15 = 0;
  if (*(unsigned char *)(a1 + 554) == 2)
  {
    if (!v16 && ot::Coap::Message::GetCode(v18) == 68)
    {
      char v4 = ot::UriToString<(ot::Uri)22>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s response", v5, v6, v7, v8, v9, v10, v4);
      if (!ot::Tlv::Find<ot::MeshCoP::StateTlv>(v18, &v15, v11, v12))
      {
        if (v15 == 1)
        {
          unsigned int v13 = ot::Time::SecToMsec((ot::Time *)0x32);
          ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 304), v13 / 2);
        }
        else
        {
          ot::MeshCoP::Commissioner::Stop(a1, 1);
          IgnoreError();
        }
      }
    }
    else
    {
      ot::MeshCoP::Commissioner::Stop(a1, 1);
      IgnoreError();
    }
  }
}

void ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)28>(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v45 = a1;
  uint64_t v44 = a2;
  uint64_t v43 = a3;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v41 = 0;
  unsigned __int16 v39 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v38);
  unsigned __int16 v37 = 0;
  unsigned __int16 v36 = 0;
  if (*(unsigned char *)(a1 + 554) != 2)
  {
    TlvValueunsigned __int16 Offset = 13;
    return;
  }
  if (ot::Coap::Message::IsNonConfirmablePostRequest(v44))
  {
    TlvValueunsigned __int16 Offset = ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>(v44, &v41, v3, v4);
    if (!TlvValueOffset)
    {
      TlvValueunsigned __int16 Offset = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(v44, (uint64_t)&v40, v5, v6, v7);
      if (!TlvValueOffset)
      {
        TlvValueunsigned __int16 Offset = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(v44, &v39, v8, v9);
        if (!TlvValueOffset)
        {
          TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(v44, (const ot::Message *)0x11, &v37, &v36, v10);
          if (!TlvValueOffset)
          {
            int v33 = v36;
            unsigned __int16 Length = ot::Message::GetLength(v44);
            if (v33 > Length - v37)
            {
              TlvValueunsigned __int16 Offset = 6;
              return;
            }
            uint64_t v12 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
            if (ot::Coap::CoapSecure::IsConnectionActive(v12))
            {
              if (ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=((const void *)(a1 + 264), &v40))
              {
                char v32 = ot::UriToString<(ot::Uri)28>();
                ot::Ip6::InterfaceIdentifier::ToString((ot::Ip6::InterfaceIdentifier *)&v40, (ot::StringWriter *)v48);
                ot::String<(unsigned short)17>::AsCString((uint64_t)v48);
                ot::Ip6::InterfaceIdentifier::ToString((ot::Ip6::InterfaceIdentifier *)(a1 + 264), (ot::StringWriter *)v47);
                ot::String<(unsigned short)17>::AsCString((uint64_t)v47);
                ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Commissioner", "Ignore %s (%s, 0x%04x), session in progress with (%s, 0x%04x)", v15, v16, v17, v18, v19, v20, v32);
                return;
              }
            }
            else
            {
              *(void *)(a1 + 26++*(_WORD *)(this + 4) = v40;
              ot::Ip6::InterfaceIdentifier::ConvertToExtAddress((ot::Ip6::InterfaceIdentifier *)(a1 + 264), (ot::Mac::ExtAddress *)v49);
              BestMatchingJoinerEntry  = (unsigned __int8 *)ot::MeshCoP::Commissioner::FindBestMatchingJoinerEntry((ot::MeshCoP::Commissioner *)a1, (const ot::Mac::ExtAddress *)v49, v13);
              if (!BestMatchingJoinerEntry) {
                return;
              }
              uint64_t v14 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
              ot::Coap::CoapSecure::SetPsk(v14, (const ot::MeshCoP::JoinerPskd *)(BestMatchingJoinerEntry + 24));
              *(void *)(a1 + 256)  = BestMatchingJoinerEntry;
              ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 328), 0x7530u);
              ot::MeshCoP::Commissioner::LogJoinerEntry(a1, (char)"Starting new session with", BestMatchingJoinerEntry);
              ot::MeshCoP::Commissioner::SignalJoinerEvent((void *)a1, 0, (uint64_t)BestMatchingJoinerEntry);
            }
            *(_WORD *)(a1 + 27ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = v41;
            *(_WORD *)(a1 + 27++*(_WORD *)(this + 4) = v39;
            char v31 = ot::UriToString<(ot::Uri)28>();
            ot::Ip6::InterfaceIdentifier::ToString((ot::Ip6::InterfaceIdentifier *)(a1 + 264), (ot::StringWriter *)v46);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v46);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s (%s, 0x%04x)", v21, v22, v23, v24, v25, v26, v31);
            ot::Message::SetOffset(v44, v37);
            TlvValueunsigned __int16 Offset = ot::Message::SetLength(v44, v37 + v36);
            if (!TlvValueOffset)
            {
              uint64_t v27 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
              MeshLocal64  = (__n128 *)ot::Mle::Mle::GetMeshLocal64(v27);
              ot::Ip6::MessageInfo::SetPeerAddr(v38, MeshLocal64);
              PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v38);
              ot::Ip6::Address::SetIid(PeerAddr, (const ot::Ip6::InterfaceIdentifier *)(a1 + 264));
              ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v38, *(_WORD *)(a1 + 272));
              unsigned __int8 v30 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
              ot::Coap::CoapSecure::HandleUdpReceive(v30, v44, (const ot::Ip6::MessageInfo *)v38);
            }
          }
        }
      }
    }
  }
}

uint64_t ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x12u, a2, a4);
}

{
  return ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x13, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(a1, a2, a3, a4, a5);
}

BOOL ot::Coap::CoapSecure::IsConnectionActive(ot::Coap::CoapSecure *this)
{
  return ot::MeshCoP::Dtls::IsConnectionActive((ot::Coap::CoapSecure *)((char *)this + 144));
}

{
  return ot::Coap::CoapSecure::IsConnectionActive(this);
}

uint64_t ot::Coap::CoapSecure::HandleUdpReceive(ot::Coap::CoapSecure *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return ot::MeshCoP::Dtls::HandleUdpReceive((uint64_t)this + 144, a2, a3);
}

{
  return ot::Coap::CoapSecure::HandleUdpReceive(this, a2, a3);
}

void ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)17>(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  if (*((unsigned char *)a1 + 554) == 2 && ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)17>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    if (!ot::Coap::CoapBase::SendEmptyAck(v10, a2, a3))
    {
      char v11 = ot::UriToString<(ot::Uri)17>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s ack", v12, v13, v14, v15, v16, v17, v11);
    }
  }
}

void ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)21>(uint64_t a1, ot::Tlv *a2)
{
  unsigned __int8 v14 = 1;
  memset(__b, 0, sizeof(__b));
  if (*(unsigned char *)(a1 + 554) == 2)
  {
    char v2 = ot::UriToString<(ot::Uri)21>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Received %s", v3, v4, v5, v6, v7, v8, v2);
    int v12 = ot::Tlv::Find<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(a2, (unsigned __int16 *)__b, v9, v10, v11);
    if (v12)
    {
      if (v12 != 23) {
        return;
      }
    }
    else if (!ot::StringMatch(__b, (char *)(a1 + 424), 0))
    {
      unsigned __int8 v14 = -1;
    }
    ot::MeshCoP::Commissioner::SendJoinFinalizeResponse(a1, a2, v14);
  }
}

uint64_t ot::Tlv::Find<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, char *a5)
{
  return ot::Tlv::FindStringTlv(a1, (const ot::Message *)0x20, 0x40u, a2, a5);
}

{
  return ot::Tlv::Find<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(a1, a2, a3, a4, a5);
}

void ot::MeshCoP::Commissioner::SendJoinFinalizeResponse(uint64_t a1, const ot::Coap::Message *a2, unsigned __int8 a3)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unsigned __int8 v20 = a3;
  int v19 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v18);
  uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
  uint64_t v17 = ot::Coap::CoapBase::NewPriorityResponseMessage(v3, v21);
  if (v17)
  {
    unsigned __int16 Length = ot::Message::GetLength(v17);
    ot::Message::SetOffset(v17, Length);
    ot::Message::SetSubType(v17, 7);
    int v19 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(v17, v20);
    if (!v19)
    {
      uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      MeshLocal64  = (__n128 *)ot::Mle::Mle::GetMeshLocal64(v5);
      ot::Ip6::MessageInfo::SetPeerAddr(v18, MeshLocal64);
      PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v18);
      ot::Ip6::Address::SetIid(PeerAddr, (const ot::Ip6::InterfaceIdentifier *)(a1 + 264));
      ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v18, *(_WORD *)(a1 + 272));
      uint64_t v8 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
      int v19 = ot::Coap::CoapSecure::SendMessage(v8, v17, (ot::Ip6::MessageInfo *)v18, 0, 0);
      if (!v19)
      {
        ot::MeshCoP::Commissioner::SignalJoinerEvent((void *)a1, 2u, *(void *)(a1 + 256));
        if (*(void *)(a1 + 256) && *(unsigned char *)(*(void *)(a1 + 256) + 57) != 1) {
          ot::MeshCoP::Commissioner::RemoveJoiner((ot::MeshCoP::Commissioner *)a1, *(int **)(a1 + 256), 0x14u);
        }
        char v9 = ot::UriToString<(ot::Uri)21>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Commissioner", "Sent %s response", v10, v11, v12, v13, v14, v15, v9);
      }
    }
  }
  else
  {
    int v19 = 3;
  }
  if (v19)
  {
    if (v17) {
      ot::Message::Free(v17);
    }
  }
}

uint64_t ot::MeshCoP::Commissioner::SendRelayTransmit(ot::MeshCoP::Commissioner *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  int v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  unsigned int appended = 0;
  uint64_t v14 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v13, Instance);
  uint64_t v4 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  ot::KeyManager::ExtractKek(v4, &v20);
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v5, 0x1Du);
  if (v14)
  {
    unsigned int appended = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(v14, *((_WORD *)this + 136));
    if (!appended)
    {
      unsigned int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(v14, (char *)this + 264);
      if (!appended)
      {
        unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(v14, *((_WORD *)this + 137));
        if (!appended
          && (ot::Message::GetSubType(v18) != 7
           || (unsigned int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(v14, &v20)) == 0))
        {
          ot::MeshCoP::ExtendedTlv::SetType(v15, 17);
          unsigned __int16 Length = ot::Message::GetLength(v18);
          ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v15, Length);
          unsigned int appended = ot::Message::Append<ot::MeshCoP::ExtendedTlv>(v14, v15);
          if (!appended)
          {
            uint64_t v11 = v14;
            uint64_t v10 = v18;
            unsigned __int16 v7 = ot::Message::GetLength(v18);
            unsigned int appended = ot::Message::AppendBytesFromMessage(v11, v10, 0, v7);
            if (!appended)
            {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v13, *((_WORD *)this + 137));
              uint64_t v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
              unsigned int appended = ot::Coap::CoapBase::SendMessage(v8, v14, (const ot::Ip6::MessageInfo *)v13);
              if (!appended) {
                ot::Message::Free(v18);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v14) {
    ot::Message::Free(v14);
  }
  return appended;
}

double ot::KeyManager::ExtractKek(ot::KeyManager *this, __n128 *a2)
{
  *(void *)&double result = ot::Mac::KeyMaterial::ExtractKey((ot::KeyManager *)((char *)this + 120), a2).n128_u64[0];
  return result;
}

{
  return ot::KeyManager::ExtractKek(this, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x13, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x14u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x15, a2, (const void *)0x10);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(a1, a2);
}

ot::InstanceLocator *ot::MeshCoP::Commissioner::ApplyMeshLocalPrefix(ot::InstanceLocator *this)
{
  uint64_t v6 = (uint64_t)this;
  if (*((unsigned char *)this + 554) == 2)
  {
    int v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v1, (const ot::Ip6::Netif::UnicastAddress *)(v6 + 392));
    Address  = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(v6 + 392));
    char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)v6);
    ot::Mle::Mle::GetMeshLocalPrefix(v2);
    ot::Ip6::Address::SetPrefix(Address, v3);
    uint64_t v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)v6);
    return (ot::InstanceLocator *)ot::Ip6::Netif::AddUnicastAddress(v4, (ot::Ip6::Netif::UnicastAddress *)(v6 + 392));
  }
  return this;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otSteeringData>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

BOOL ot::MeshCoP::Dtls::IsConnectionActive(ot::MeshCoP::Dtls *this)
{
  return *(unsigned __int8 *)this >= 3u;
}

{
  return ot::MeshCoP::Dtls::IsConnectionActive(this);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  char v2 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  return ot::MeshCoP::Commissioner::HandleJoinerExpirationTimer(v2);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::Commissioner::HandleTimer)(v2);
}

void **ot::TimerMilliIn<ot::MeshCoP::Commissioner,&ot::MeshCoP::Commissioner::HandleJoinerSessionTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  return ot::MeshCoP::Commissioner::HandleJoinerSessionTimer(v2);
}

uint64_t ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerState>(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otCommissionerState,void *),(ot::CallbackContextPosition)1>::Invoke<otCommissionerState>(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::GenerateRandom(ot::MeshCoP::Dataset::Info *this, ot::Instance *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  Randounsigned __int16 m = 0;
  uint64_t v2 = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>((uint64_t)a2);
  int v13 = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  uint64_t v3 = (ot::Radio *)ot::Instance::Get<ot::Radio>((uint64_t)v15);
  int PreferredChannelMask = ot::Radio::GetPreferredChannelMask(v3);
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v12, PreferredChannelMask);
  ot::Mac::ChannelMask::Intersect(&v12, (const ot::Mac::ChannelMask *)&v13);
  if (ot::Mac::ChannelMask::IsEmpty((ot::Mac::ChannelMask *)&v12)) {
    int v12 = v13;
  }
  ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(this);
  *(void *)this  = 1;
  *((_WORD *)this + ++*(_WORD *)(this + 4) = 0;
  *((unsigned char *)this + 1ot::Mac::ExtAddress::SetGroup(this, 0) = 0;
  *((_WORD *)this + 45)  = ot::Mac::ChannelMask::ChooseRandomChannel((ot::Mac::ChannelMask *)&v12);
  *((_DWORD *)this + 2ot::Mle::Tlv::SetType(this, 9) = ot::Mac::ChannelMask::GetMask((ot::Mac::ChannelMask *)&v13);
  Wakeupchar Channel = (ot::Random::NonCrypto *)ot::Mac::ChannelMask::GetWakeupChannel((ot::Mac::ChannelMask *)&v13);
  *((_WORD *)this + 46)  = WakeupChannel;
  *((_WORD *)this + 4++*(_WORD *)(this + 4) = (unsigned __int16)ot::Mac::GenerateRandomPanId(WakeupChannel);
  uint64_t v6 = (ot::SecurityPolicy *)ot::AsCoreType<otSecurityPolicy>((uint64_t)this + 110);
  ot::SecurityPolicy::SetToDefault(v6);
  unsigned __int16 v7 = (ot::NetworkKey *)ot::AsCoreType<otNetworkKey>((uint64_t)this + 32);
  Randounsigned __int16 m = ot::NetworkKey::GenerateRandom(v7);
  if (!Random)
  {
    uint64_t v8 = (ot::Pskc *)ot::AsCoreType<otPskc>((uint64_t)this + 94);
    Randounsigned __int16 m = ot::Pskc::GenerateRandom(v8);
    if (!Random)
    {
      Randounsigned __int16 m = ot::Random::Crypto::FillBuffer((ot::MeshCoP::Dataset::Info *)((char *)this + 65), (unsigned __int8 *)8);
      if (!Random)
      {
        char v9 = (ot::Ip6::NetworkPrefix *)ot::AsCoreType<otIp6NetworkPrefix>((uint64_t)this + 73);
        Randounsigned __int16 m = ot::Ip6::NetworkPrefix::GenerateRandomUla(v9);
        if (!Random)
        {
          snprintf((char *)this + 48, 0x11uLL, "%s-%04x", "OpenThread", *((unsigned __int16 *)this + 44));
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFFFE | 1;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFFFB | 4;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFFF7 | 8;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFFEF | 0x10;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFFDF | 0x20;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFF7F | 0x80;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFEFF | 0x100;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xEFFF | 0x1000;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFDFF | 0x200;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xFBFF | 0x400;
          *((_WORD *)this + 6ot::Mac::ExtAddress::SetGroup(this, 0) = *((_WORD *)this + 60) & 0xF7FF | 0x800;
        }
      }
    }
  }
  return Random;
}

uint64_t ot::Radio::GetPreferredChannelMask(ot::Radio *this)
{
  uint64_t InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioGetPreferredChannelMask((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::GetPreferredChannelMask(this);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otSecurityPolicy>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t ot::NetworkKey::GenerateRandom(ot::NetworkKey *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)0x10);
}

{
  return ot::NetworkKey::GenerateRandom(this);
}

uint64_t ot::Pskc::GenerateRandom(ot::Pskc *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)0x10);
}

{
  return ot::Pskc::GenerateRandom(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsSubsetOf(ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::Dataset::Info *a2)
{
  char v19 = 0;
  if ((ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(this) & 1) == 0
    || (ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(a2) & 1) != 0
    && (NetworkKey  = (const void *)ot::MeshCoP::Dataset::Info::GetNetworkKey(this),
        uint64_t v2 = (const void *)ot::MeshCoP::Dataset::Info::GetNetworkKey(a2),
        ot::Equatable<ot::NetworkKey>::operator==(NetworkKey, v2)))
  {
    if ((ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(this) & 1) == 0
      || (ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(a2) & 1) != 0
      && (NetworkName  = (ot::MeshCoP::NetworkName *)ot::MeshCoP::Dataset::Info::GetNetworkName(this),
          uint64_t v3 = (ot::MeshCoP::NetworkName *)ot::MeshCoP::Dataset::Info::GetNetworkName(a2),
          ot::MeshCoP::NetworkName::operator==(NetworkName, v3)))
    {
      if ((ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(this) & 1) == 0
        || (ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(a2) & 1) != 0
        && (Extendedint PanId = (const void *)ot::MeshCoP::Dataset::Info::GetExtendedPanId(this),
            uint64_t v4 = (const void *)ot::MeshCoP::Dataset::Info::GetExtendedPanId(a2),
            ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(ExtendedPanId, v4)))
      {
        if ((ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(this) & 1) == 0
          || (ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(a2) & 1) != 0
          && (MeshLocaluint64_t Prefix = (const void *)ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(this),
              uint64_t v5 = (const void *)ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(a2),
              ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(MeshLocalPrefix, v5)))
        {
          if ((ot::MeshCoP::Dataset::Info::IsPanIdPresent(this) & 1) == 0
            || (ot::MeshCoP::Dataset::Info::IsPanIdPresent(a2) & 1) != 0
            && (int PanId = (unsigned __int16)ot::MeshCoP::Dataset::Info::GetPanId(this),
                PanId == (unsigned __int16)ot::MeshCoP::Dataset::Info::GetPanId(a2)))
          {
            if ((ot::MeshCoP::Dataset::Info::IsChannelPresent(this) & 1) == 0
              || (ot::MeshCoP::Dataset::Info::IsChannelPresent(a2) & 1) != 0
              && (int Channel = (unsigned __int16)ot::MeshCoP::Dataset::Info::GetChannel(this),
                  Channel == (unsigned __int16)ot::MeshCoP::Dataset::Info::GetChannel(a2)))
            {
              if ((ot::MeshCoP::Dataset::Info::IsPskcPresent(this) & 1) == 0
                || (ot::MeshCoP::Dataset::Info::IsPskcPresent(a2) & 1) != 0
                && (unsigned int Pskc = (const void *)ot::MeshCoP::Dataset::Info::GetPskc(this),
                    uint64_t v6 = (const void *)ot::MeshCoP::Dataset::Info::GetPskc(a2),
                    ot::Equatable<ot::Pskc>::operator==(Pskc, v6)))
              {
                if ((ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(this) & 1) == 0
                  || (ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(a2) & 1) != 0
                  && (SecurityPolicy  = (const void *)ot::MeshCoP::Dataset::Info::GetSecurityPolicy(this),
                      uint64_t v7 = (const void *)ot::MeshCoP::Dataset::Info::GetSecurityPolicy(a2),
                      ot::Equatable<ot::SecurityPolicy>::operator==(SecurityPolicy, v7)))
                {
                  if ((ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(this) & 1) == 0
                    || (ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(a2) & 1) != 0
                    && (ChannelMasunsigned __int16 k = ot::MeshCoP::Dataset::Info::GetChannelMask(this),
                        ChannelMask == ot::MeshCoP::Dataset::Info::GetChannelMask(a2)))
                  {
                    char v19 = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v19 & 1;
}

uint64_t ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 2) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetNetworkKey(ot::MeshCoP::Dataset::Info *this)
{
  return ot::AsCoreType<otNetworkKey>((uint64_t)this + 32);
}

{
  return ot::MeshCoP::Dataset::Info::GetNetworkKey(this);
}

BOOL ot::Equatable<ot::NetworkKey>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return ot::Equatable<ot::NetworkKey>::operator==(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 3) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetNetworkName(ot::MeshCoP::Dataset::Info *this)
{
  return ot::AsCoreType<otNetworkName>((uint64_t)this + 48);
}

{
  return ot::MeshCoP::Dataset::Info::GetNetworkName(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 4) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetExtendedPanId(ot::MeshCoP::Dataset::Info *this)
{
  return ot::AsCoreType<otExtendedPanId>((uint64_t)this + 65);
}

{
  return ot::MeshCoP::Dataset::Info::GetExtendedPanId(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 5) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(ot::MeshCoP::Dataset::Info *this)
{
  return (uint64_t)this + 73;
}

{
  return ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsPanIdPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 7) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsPanIdPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetPanId(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned __int16 *)this + 44);
}

{
  return ot::MeshCoP::Dataset::Info::GetPanId(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsChannelPresent(ot::MeshCoP::Dataset::Info *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 60)) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsChannelPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetChannel(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned __int16 *)this + 45);
}

{
  return ot::MeshCoP::Dataset::Info::GetChannel(this);
}

uint64_t ot::MeshCoP::Dataset::Info::IsPskcPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 9) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsPskcPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetPskc(ot::MeshCoP::Dataset::Info *this)
{
  return ot::AsCoreType<otPskc>((uint64_t)this + 94);
}

{
  return ot::MeshCoP::Dataset::Info::GetPskc(this);
}

BOOL ot::Equatable<ot::Pskc>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return ot::Equatable<ot::Pskc>::operator==(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 10) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetSecurityPolicy(ot::MeshCoP::Dataset::Info *this)
{
  return ot::AsCoreType<otSecurityPolicy>((uint64_t)this + 110);
}

{
  return ot::MeshCoP::Dataset::Info::GetSecurityPolicy(this);
}

BOOL ot::Equatable<ot::SecurityPolicy>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 4uLL) == 0;
}

{
  return ot::Equatable<ot::SecurityPolicy>::operator==(a1, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 11) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetChannelMask(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned int *)this + 29);
}

{
  return ot::MeshCoP::Dataset::Info::GetChannelMask(this);
}

ot::MeshCoP::Dataset *ot::MeshCoP::Dataset::Dataset(ot::MeshCoP::Dataset *this)
{
  *((_WORD *)this + 13ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = 0;
  memset(this, 0, 0xFEuLL);
  return this;
}

{
  ot::MeshCoP::Dataset::Dataset(this);
  return this;
}

uint64_t ot::MeshCoP::Dataset::Clear(uint64_t this)
{
  *(_WORD *)(this + 26ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = 0;
  return this;
}

uint64_t ot::MeshCoP::Dataset::IsValid(ot::MeshCoP::Dataset *this)
{
  char v9 = 1;
  TlvsEnd  = ot::MeshCoP::Dataset::GetTlvsEnd(this);
  ot::MeshCoP::Dataset::GetTlvsStart(this);
  for (uint64_t i = v1; (unint64_t)i < TlvsEnd; uint64_t i = v4)
  {
    if (ot::Tlv::IsExtended(i)
      || (unint64_t)i + 2 > TlvsEnd
      || (ot::MeshCoP::Tlv::GetNext(i), v3 > TlvsEnd)
      || (ot::MeshCoP::Tlv::IsValid(i, v2) & 1) == 0)
    {
      char v9 = 0;
      return v9 & 1;
    }
    ot::MeshCoP::Tlv::GetNext(i);
  }
  return v9 & 1;
}

uint64_t ot::MeshCoP::Dataset::GetTlvsEnd(ot::MeshCoP::Dataset *this)
{
  return (uint64_t)this + *((unsigned __int16 *)this + 130);
}

{
  return (uint64_t)this + *((unsigned __int16 *)this + 130);
}

{
  return ot::MeshCoP::Dataset::GetTlvsEnd(this);
}

{
  return ot::MeshCoP::Dataset::GetTlvsEnd(this);
}

void ot::MeshCoP::Tlv::GetNext(ot::MeshCoP::Tlv *this)
{
}

{
  ot::Tlv::GetNext(this);
  ot::As<ot::MeshCoP::Tlv>();
}

{
  ot::MeshCoP::Tlv::GetNext(this);
}

{
  ot::MeshCoP::Tlv::GetNext(this);
}

ot::Tlv *ot::MeshCoP::Dataset::GetTlv(unsigned __int16 *a1, unsigned __int8 a2)
{
  return ot::MeshCoP::Tlv::FindTlv((ot::Tlv *)a1, a1[130], a2);
}

unint64_t ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset *this, ot::MeshCoP::Dataset::Info *a2)
{
  v51  = this;
  int v50 = a2;
  ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(a2);
  ot::MeshCoP::Dataset::GetTlvsStart(this);
  for (uint64_t i = v2; ; uint64_t i = v31)
  {
    uint64_t v44 = i;
    unint64_t result = ot::MeshCoP::Dataset::GetTlvsEnd(this);
    if ((unint64_t)v44 >= result) {
      break;
    }
    unsigned __int8 Type = ot::MeshCoP::Tlv::GetType(i);
    if (Type)
    {
      uint64_t v6 = Type;
      char v5 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      char v5 = 0;
    }
    if ((v5 & 1) == 0)
    {
      switch(v6)
      {
        case 0:
          unsigned int v42 = v50;
          ot::As<ot::MeshCoP::ChannelTlv>();
          __int16 Channel = ot::MeshCoP::ChannelTlv::GetChannel(v9);
          ot::MeshCoP::Dataset::Info::SetChannel((uint64_t)v42, Channel);
          break;
        case 1:
          __int16 v35 = v50;
          ot::As<ot::MeshCoP::PanIdTlv>();
          __int16 PanId = ot::MeshCoP::PanIdTlv::GetPanId(v24);
          ot::MeshCoP::Dataset::Info::SetPanId((uint64_t)v35, PanId);
          break;
        case 2:
          unsigned __int16 v39 = v50;
          ot::As<ot::MeshCoP::ExtendedPanIdTlv>();
          Extended__int16 PanId = (void *)ot::MeshCoP::ExtendedPanIdTlv::GetExtendedPanId(v16);
          ot::MeshCoP::Dataset::Info::SetExtendedPanId((uint64_t)v39, ExtendedPanId);
          break;
        case 3:
          unsigned __int16 v36 = v50;
          ot::As<ot::MeshCoP::NetworkNameTlv>();
          v47[0]  = ot::MeshCoP::NetworkNameTlv::GetNetworkName(v22);
          v47[1]  = v23;
          ot::MeshCoP::Dataset::Info::SetNetworkName(v36, (const ot::MeshCoP::NameData *)v47);
          break;
        case 4:
          int v33 = v50;
          ot::As<ot::MeshCoP::PskcTlv>();
          unsigned int Pskc = (__n128 *)ot::MeshCoP::PskcTlv::GetPskc(v28);
          ot::MeshCoP::Dataset::Info::SetPskc((uint64_t)v33, Pskc);
          break;
        case 5:
          unsigned __int16 v37 = (__n128 *)v50;
          ot::As<ot::MeshCoP::NetworkKeyTlv>();
          NetworkKey  = (__n128 *)ot::MeshCoP::NetworkKeyTlv::GetNetworkKey(v20);
          ot::MeshCoP::Dataset::Info::SetNetworkKey(v37, NetworkKey);
          break;
        case 6:
        case 8:
        case 9:
        case 10:
        case 11:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
          break;
        case 7:
          int v38 = v50;
          ot::As<ot::MeshCoP::MeshLocalPrefixTlv>();
          MeshLocaluint64_t Prefix = (void *)ot::MeshCoP::MeshLocalPrefixTlv::GetMeshLocalPrefix(v18);
          ot::MeshCoP::Dataset::Info::SetMeshLocalPrefix((uint64_t)v38, MeshLocalPrefix);
          break;
        case 12:
          char v32 = v50;
          ot::As<ot::MeshCoP::SecurityPolicyTlv>();
          SecurityPolicy  = ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy(v30);
          ot::MeshCoP::Dataset::Info::SetSecurityPolicy((uint64_t)v32, &SecurityPolicy);
          break;
        case 14:
          uint64_t v43 = v50;
          ot::As<ot::MeshCoP::ActiveTimestampTlv>();
          Timestamp  = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(v7);
          ot::MeshCoP::Dataset::Info::SetActiveTimestamp(v43, Timestamp);
          break;
        case 51:
          uint64_t v34 = v50;
          ot::As<ot::MeshCoP::PendingTimestampTlv>();
          uint64_t v27 = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::PendingTimestampTlv::GetTimestamp(v26);
          ot::MeshCoP::Dataset::Info::SetPendingTimestamp(v34, v27);
          break;
        case 52:
          uint64_t v40 = v50;
          ot::As<ot::MeshCoP::DelayTimerTlv>();
          DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v14);
          ot::MeshCoP::Dataset::Info::SetDelay((uint64_t)v40, DelayTimer);
          break;
        case 53:
          ChannelMasunsigned __int16 k = 0;
          ot::As<ot::MeshCoP::ChannelMaskTlv>();
          ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v13);
          if (ChannelMask) {
            ot::MeshCoP::Dataset::Info::SetChannelMask((uint64_t)v50, ChannelMask);
          }
          break;
        case 74:
          unsigned __int16 v41 = v50;
          ot::As<ot::MeshCoP::WakeupChannelTlv>();
          __int16 v12 = ot::MeshCoP::WakeupChannelTlv::GetChannel(v11);
          ot::MeshCoP::Dataset::Info::SetWakeupChannel((uint64_t)v41, v12);
          break;
        default:
          JUMPOUT(0);
      }
    }
    ot::MeshCoP::Tlv::GetNext(i);
  }
  return result;
}

uint64_t ot::MeshCoP::Tlv::GetType(ot::MeshCoP::Tlv *this)
{
  return ot::Tlv::GetType(this);
}

{
  return ot::MeshCoP::Tlv::GetType(this);
}

BOOL ot::MeshCoP::Dataset::Info::SetActiveTimestamp(ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::Timestamp *a2)
{
  BOOL result = ot::MeshCoP::Timestamp::ConvertTo(a2, (uint64_t)this);
  *((_WORD *)this + 6ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *((_WORD *)this + 60) & 0xFFFE | 1;
  return result;
}

{
  return ot::MeshCoP::Dataset::Info::SetActiveTimestamp(this, a2);
}

uint64_t ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(ot::MeshCoP::ActiveTimestampTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(this);
}

{
  return ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetChannel(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 9ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = a2;
  *(_WORD *)(this + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(this + 120) & 0xFEFF | 0x100;
  return this;
}

{
  return ot::MeshCoP::Dataset::Info::SetChannel(this, a2);
}

uint64_t ot::MeshCoP::ChannelTlv::GetChannel(ot::MeshCoP::ChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return ot::MeshCoP::ChannelTlv::GetChannel(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetWakeupChannel(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 9ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  *(_WORD *)(this + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(this + 120) & 0xEFFF | 0x1000;
  return this;
}

{
  return ot::MeshCoP::Dataset::Info::SetWakeupChannel(this, a2);
}

uint64_t ot::MeshCoP::WakeupChannelTlv::GetChannel(ot::MeshCoP::WakeupChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return ot::MeshCoP::WakeupChannelTlv::GetChannel(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetChannelMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 116)  = a2;
  *(_WORD *)(this + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(this + 120) & 0xF7FF | 0x800;
  return this;
}

{
  return ot::MeshCoP::Dataset::Info::SetChannelMask(this, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::SetDelay(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8++*(_WORD *)(this + 4) = a2;
  *(_WORD *)(this + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(this + 120) & 0xFFBF | 0x40;
  return this;
}

{
  return ot::MeshCoP::Dataset::Info::SetDelay(this, a2);
}

uint64_t ot::MeshCoP::DelayTimerTlv::GetDelayTimer(ot::MeshCoP::DelayTimerTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
}

{
  return ot::MeshCoP::DelayTimerTlv::GetDelayTimer(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetExtendedPanId(uint64_t result, void *a2)
{
  *(void *)(result + 65)  = *a2;
  *(_WORD *)(result + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(result + 120) & 0xFFEF | 0x10;
  return result;
}

{
  return ot::MeshCoP::Dataset::Info::SetExtendedPanId(result, a2);
}

uint64_t ot::MeshCoP::ExtendedPanIdTlv::GetExtendedPanId(ot::MeshCoP::ExtendedPanIdTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::ExtendedPanIdTlv::GetExtendedPanId(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetMeshLocalPrefix(uint64_t result, void *a2)
{
  *(void *)(result + 73)  = *a2;
  *(_WORD *)(result + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(result + 120) & 0xFFDF | 0x20;
  return result;
}

{
  return ot::MeshCoP::Dataset::Info::SetMeshLocalPrefix(result, a2);
}

uint64_t ot::MeshCoP::MeshLocalPrefixTlv::GetMeshLocalPrefix(ot::MeshCoP::MeshLocalPrefixTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::MeshLocalPrefixTlv::GetMeshLocalPrefix(this);
}

__n128 ot::MeshCoP::Dataset::Info::SetNetworkKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[2]  = *a2;
  a1[7].n128_u16[4]  = a1[7].n128_u16[4] & 0xFFFB | 4;
  return result;
}

uint64_t ot::MeshCoP::NetworkKeyTlv::GetNetworkKey(ot::MeshCoP::NetworkKeyTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::NetworkKeyTlv::GetNetworkKey(this);
}

void ot::MeshCoP::Dataset::Info::SetNetworkName(ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::NameData *a2)
{
  uint64_t v2 = (ot::MeshCoP::NetworkName *)ot::AsCoreType<otNetworkName>((uint64_t)this + 48);
  ot::MeshCoP::NetworkName::Set(v2, a2);
  IgnoreError();
  *((_WORD *)this + 6ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *((_WORD *)this + 60) & 0xFFF7 | 8;
}

{
  ot::MeshCoP::Dataset::Info::SetNetworkName(this, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::SetPanId(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  *(_WORD *)(this + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(this + 120) & 0xFF7F | 0x80;
  return this;
}

{
  return ot::MeshCoP::Dataset::Info::SetPanId(this, a2);
}

uint64_t ot::MeshCoP::PanIdTlv::GetPanId(ot::MeshCoP::PanIdTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::MeshCoP::PanIdTlv::GetPanId(this);
}

BOOL ot::MeshCoP::Dataset::Info::SetPendingTimestamp(ot::MeshCoP::Dataset::Info *this, const ot::MeshCoP::Timestamp *a2)
{
  BOOL result = ot::MeshCoP::Timestamp::ConvertTo(a2, (uint64_t)this + 16);
  *((_WORD *)this + 6ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *((_WORD *)this + 60) & 0xFFFD | 2;
  return result;
}

{
  return ot::MeshCoP::Dataset::Info::SetPendingTimestamp(this, a2);
}

uint64_t ot::MeshCoP::PendingTimestampTlv::GetTimestamp(ot::MeshCoP::PendingTimestampTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::PendingTimestampTlv::GetTimestamp(this);
}

__n128 ot::MeshCoP::Dataset::Info::SetPskc(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 9++*(_WORD *)(this + 4) = *a2;
  *(_WORD *)(a1 + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(a1 + 120) & 0xFDFF | 0x200;
  return result;
}

uint64_t ot::MeshCoP::PskcTlv::GetPskc(ot::MeshCoP::PskcTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::PskcTlv::GetPskc(this);
}

uint64_t ot::MeshCoP::Dataset::Info::SetSecurityPolicy(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 11ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *a2;
  *(_WORD *)(result + 12ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = *(_WORD *)(result + 120) & 0xFBFF | 0x400;
  return result;
}

void *ot::MeshCoP::Dataset::ConvertTo(unsigned __int16 *a1, unsigned char *a2)
{
  __n128 result = memcpy(a2, a1, a1[130]);
  a2[254]  = a1[130];
  return result;
}

uint64_t ot::MeshCoP::Dataset::Set(uint64_t a1, char a2, unsigned __int16 *a3)
{
  memcpy((void *)a1, a3, a3[130]);
  *(_WORD *)(a1 + 26ot::Time::Time((ot::MeshCoP::Dataset *)((char *)this + 256), 0) = a3[130];
  if (!a2)
  {
    ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)a1, 0x33u);
    ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)a1, 0x34u);
  }
  uint64_t result = ot::MeshCoP::Dataset::GetUpdateTime((ot::MeshCoP::Dataset *)a3);
  *(_DWORD *)(a1 + 256)  = result;
  return result;
}

void ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Dataset *a1, unsigned __int8 a2)
{
  ot::MeshCoP::Dataset::GetTlv((uint64_t)a1, a2);
  if (v2) {
    ot::MeshCoP::Dataset::RemoveTlv(a1, v2);
  }
}

uint64_t ot::MeshCoP::Dataset::GetUpdateTime(ot::MeshCoP::Dataset *this)
{
  return *((unsigned int *)this + 64);
}

{
  return ot::MeshCoP::Dataset::GetUpdateTime(this);
}

void *ot::MeshCoP::Dataset::SetFrom(_WORD *a1, unsigned __int8 *a2)
{
  a1[130]  = a2[254];
  return memcpy(a1, a2, (unsigned __int16)a1[130]);
}

uint64_t ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset *this, const ot::MeshCoP::Dataset::Info *a2)
{
  char v28 = this;
  uint64_t v27 = a2;
  unsigned int v26 = 0;
  if (ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent(a2))
  {
    ot::MeshCoP::Dataset::Info::GetActiveTimestamp(v27, (ot::MeshCoP::Timestamp *)v25);
    ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>((uint64_t)this, 0xEu, v25);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent(v27))
  {
    ot::MeshCoP::Dataset::Info::GetPendingTimestamp(v27, (ot::MeshCoP::Timestamp *)v24);
    ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>((uint64_t)this, 0x33u, v24);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsDelayPresent(v27))
  {
    unsigned int Delay = ot::MeshCoP::Dataset::Info::GetDelay(v27);
    ot::MeshCoP::Dataset::SetTlv<unsigned int>((uint64_t)this, 0x34u, &Delay);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsChannelPresent(v27))
  {
    ot::MeshCoP::ChannelTlv::Init((ot::MeshCoP::ChannelTlv *)v22);
    unsigned __int16 Channel = ot::MeshCoP::Dataset::Info::GetChannel(v27);
    ot::MeshCoP::ChannelTlv::SetChannel((ot::MeshCoP::ChannelTlv *)v22, Channel);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v22);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsWakeupChannelPresent(v27))
  {
    ot::MeshCoP::WakeupChannelTlv::Init((ot::MeshCoP::WakeupChannelTlv *)v21);
    Wakeupunsigned __int16 Channel = ot::MeshCoP::Dataset::Info::GetWakeupChannel(v27);
    ot::MeshCoP::WakeupChannelTlv::SetChannel((ot::MeshCoP::WakeupChannelTlv *)v21, WakeupChannel);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v21);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsChannelMaskPresent(v27))
  {
    ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v20);
    ChannelMasunsigned __int16 k = ot::MeshCoP::Dataset::Info::GetChannelMask(v27);
    ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v20, ChannelMask);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v20);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent(v27))
  {
    Extendedunsigned __int16 PanId = (const void *)ot::MeshCoP::Dataset::Info::GetExtendedPanId(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>((uint64_t)this, 2u, ExtendedPanId);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsMeshLocalPrefixPresent(v27))
  {
    MeshLocaluint64_t Prefix = (const void *)ot::MeshCoP::Dataset::Info::GetMeshLocalPrefix(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>((uint64_t)this, 7u, MeshLocalPrefix);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent(v27))
  {
    NetworkKey  = (const void *)ot::MeshCoP::Dataset::Info::GetNetworkKey(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>((uint64_t)this, 5u, NetworkKey);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsNetworkNamePresent(v27))
  {
    NetworkName  = (ot::MeshCoP::NetworkName *)ot::MeshCoP::Dataset::Info::GetNetworkName(v27);
    v19[0]  = ot::MeshCoP::NetworkName::GetAsData(NetworkName);
    v19[1]  = v9;
    Buffer  = (const void *)ot::MeshCoP::NameData::GetBuffer((ot::MeshCoP::NameData *)v19);
    unsigned __int8 Length = ot::MeshCoP::NameData::GetLength((ot::MeshCoP::NameData *)v19);
    ot::MeshCoP::Dataset::SetTlv((uint64_t)this, 3u, Buffer, Length);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsPanIdPresent(v27))
  {
    unsigned __int16 PanId = ot::MeshCoP::Dataset::Info::GetPanId(v27);
    ot::MeshCoP::Dataset::SetTlv<unsigned short>((uint64_t)this, 1u, &PanId);
    IgnoreError();
  }
  if (ot::MeshCoP::Dataset::Info::IsPskcPresent(v27))
  {
    unsigned int Pskc = (const void *)ot::MeshCoP::Dataset::Info::GetPskc(v27);
    ot::MeshCoP::Dataset::SetTlv<ot::Pskc>((uint64_t)this, 4u, Pskc);
    IgnoreError();
  }
  IsSecurityPolicyPresent  = (ot::TimerMilli *)ot::MeshCoP::Dataset::Info::IsSecurityPolicyPresent(v27);
  if (IsSecurityPolicyPresent)
  {
    ot::MeshCoP::SecurityPolicyTlv::Init((ot::MeshCoP::SecurityPolicyTlv *)v17);
    SecurityPolicy  = (const ot::SecurityPolicy *)ot::MeshCoP::Dataset::Info::GetSecurityPolicy(v27);
    ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy((ot::MeshCoP::SecurityPolicyTlv *)v17, SecurityPolicy);
    ot::MeshCoP::Dataset::SetTlv(this, (const ot::MeshCoP::Tlv *)v17);
    IgnoreError();
  }
  *((_DWORD *)this + 6++*(_WORD *)(this + 4) = ot::TimerMilli::GetNow(IsSecurityPolicyPresent);
  return v26;
}

uint64_t ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent(ot::MeshCoP::Dataset::Info *this)
{
  return *((_WORD *)this + 60) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetActiveTimestamp(ot::MeshCoP::Dataset::Info *this, ot::MeshCoP::Timestamp *a2)
{
  return ot::MeshCoP::Timestamp::SetFromTimestamp(a2, (uint64_t)this);
}

{
  return ot::MeshCoP::Dataset::Info::GetActiveTimestamp(this, a2);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 8u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 1) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetPendingTimestamp(ot::MeshCoP::Dataset::Info *this, ot::MeshCoP::Timestamp *a2)
{
  return ot::MeshCoP::Timestamp::SetFromTimestamp(a2, (uint64_t)this + 16);
}

{
  return ot::MeshCoP::Dataset::Info::GetPendingTimestamp(this, a2);
}

uint64_t ot::MeshCoP::Dataset::Info::IsDelayPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 6) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsDelayPresent(this);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<unsigned int>(uint64_t a1, unsigned __int8 a2, unsigned int *a3)
{
  uint64_t v8 = a1;
  unsigned __int8 v7 = a2;
  uint64_t v6 = a3;
  int v5 = 0;
  int v5 = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*a3);
  return ot::MeshCoP::Dataset::SetTlv(a1, v7, &v5, 4u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<unsigned int>(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::Info::GetDelay(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned int *)this + 21);
}

{
  return ot::MeshCoP::Dataset::Info::GetDelay(this);
}

uint64_t ot::MeshCoP::ChannelTlv::Init(ot::MeshCoP::ChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return ot::MeshCoP::ChannelTlv::Init(this);
}

uint64_t ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Dataset *this, const ot::MeshCoP::Tlv *a2)
{
  unsigned __int8 Type = ot::MeshCoP::Tlv::GetType(a2);
  uint64_t Value = (const void *)ot::Tlv::GetValue(a2);
  unsigned __int8 Length = ot::Tlv::GetLength(a2);
  return ot::MeshCoP::Dataset::SetTlv((uint64_t)this, Type, Value, Length);
}

uint64_t ot::MeshCoP::Dataset::Info::IsWakeupChannelPresent(ot::MeshCoP::Dataset::Info *this)
{
  return (*((unsigned __int16 *)this + 60) >> 12) & 1;
}

{
  return ot::MeshCoP::Dataset::Info::IsWakeupChannelPresent(this);
}

uint64_t ot::MeshCoP::WakeupChannelTlv::Init(ot::MeshCoP::WakeupChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return ot::MeshCoP::WakeupChannelTlv::Init(this);
}

uint64_t ot::MeshCoP::Dataset::Info::GetWakeupChannel(ot::MeshCoP::Dataset::Info *this)
{
  return *((unsigned __int16 *)this + 46);
}

{
  return ot::MeshCoP::Dataset::Info::GetWakeupChannel(this);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 8u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 8u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 0x10u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv(uint64_t a1, unsigned __int8 a2, const void *a3, unsigned __int8 a4)
{
  uint64_t v15 = a1;
  char v14 = a2;
  int v13 = a3;
  unsigned __int8 v12 = a4;
  unsigned int v11 = 0;
  unsigned __int16 v10 = 0;
  unsigned __int16 v10 = 254 - *(_WORD *)(a1 + 260);
  ot::MeshCoP::Dataset::GetTlv(a1, a2);
  uint64_t v9 = v4;
  if (v4) {
    v10 += ot::Tlv::GetLength(v9) + 2;
  }
  if ((unint64_t)v12 + 2 <= v10)
  {
    if (v9) {
      ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)a1, v9);
    }
    ot::MeshCoP::Tlv::SetType(&v8, v14);
    ot::Tlv::SetLength((uint64_t)&v8, v12);
    *(_WORD *)(a1 + *(unsigned __int16 *)(a1 + 260))  = v8;
    *(_WORD *)(a1 + 260) += 2;
    int v5 = (ot::TimerMilli *)memcpy((void *)(a1 + *(unsigned __int16 *)(a1 + 260)), v13, v12);
    *(_WORD *)(a1 + 260) += v12;
    *(_DWORD *)(a1 + 256)  = ot::TimerMilli::GetNow(v5);
  }
  else
  {
    return 3;
  }
  return v11;
}

uint64_t ot::MeshCoP::Dataset::SetTlv<unsigned short>(uint64_t a1, unsigned __int8 a2, unsigned __int16 *a3)
{
  uint64_t v8 = a1;
  unsigned __int8 v7 = a2;
  uint64_t v6 = a3;
  __int16 v5 = 0;
  __int16 v5 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*a3);
  return ot::MeshCoP::Dataset::SetTlv(a1, v7, &v5, 2u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<unsigned short>(a1, a2, a3);
}

uint64_t ot::MeshCoP::Dataset::SetTlv<ot::Pskc>(uint64_t a1, unsigned __int8 a2, const void *a3)
{
  return ot::MeshCoP::Dataset::SetTlv(a1, a2, a3, 0x10u);
}

{
  return ot::MeshCoP::Dataset::SetTlv<ot::Pskc>(a1, a2, a3);
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::Init(ot::MeshCoP::SecurityPolicyTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 4);
}

{
  return ot::MeshCoP::SecurityPolicyTlv::Init(this);
}

uint64_t ot::MeshCoP::Dataset::GetTimestamp(unsigned __int16 *a1, char a2, void *a3)
{
  unsigned int v6 = 0;
  if (a2)
  {
    ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PendingTimestampTlv>(a1);
    if (v4) {
      *a3  = *(void *)ot::MeshCoP::PendingTimestampTlv::GetTimestamp(v4);
    }
    else {
      return 23;
    }
  }
  else
  {
    ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(a1);
    if (v3) {
      *a3  = *(void *)ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(v3);
    }
    else {
      return 23;
    }
  }
  return v6;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(unsigned __int16 *a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PendingTimestampTlv>(unsigned __int16 *a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PendingTimestampTlv>(a1);
}

void ot::MeshCoP::Dataset::SetTimestamp(uint64_t a1, char a2, const void *a3)
{
  if (a2) {
    unsigned __int8 v3 = 51;
  }
  else {
    unsigned __int8 v3 = 14;
  }
  ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>(a1, v3, a3);
  IgnoreError();
}

void ot::MeshCoP::Dataset::GetTlv(uint64_t a1, unsigned __int8 a2)
{
  ot::AsConst<ot::MeshCoP::Dataset>();
  ot::MeshCoP::Dataset::GetTlv(v2, a2);
  ot::AsNonConst<ot::MeshCoP::Tlv>();
}

{
  ot::MeshCoP::Dataset::GetTlv(a1, a2);
}

void *ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Dataset *this, ot::MeshCoP::Tlv *a2)
{
  unsigned __int16 v4 = ot::Tlv::GetLength(a2) + 2;
  uint64_t result = memmove(a2, (char *)a2 + v4, *((unsigned __int16 *)this + 130) - (v4 + ((_BYTE)a2 - (_BYTE)this)));
  *((_WORD *)this + 130) -= v4;
  return result;
}

uint64_t ot::MeshCoP::Dataset::ReadFromMessage(ot::MeshCoP::Dataset *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v7 = 6;
  if (a4 <= 0xFEu && !ot::Message::Read(a2, a3, (char *)this, a4))
  {
    *((_WORD *)this + 13ot::MeshCoP::Tlv::SetType(this, 0) = a4;
    IsValid  = (ot::TimerMilli *)ot::MeshCoP::Dataset::IsValid(this);
    if (IsValid)
    {
      *((_DWORD *)this + 6++*(_WORD *)(this + 4) = ot::TimerMilli::GetNow(IsValid);
      return 0;
    }
    else
    {
      return 6;
    }
  }
  return v7;
}

uint64_t ot::MeshCoP::Dataset::AppendMleDatasetTlv(uint64_t a1, char a2, ot::Message *a3)
{
  uint64_t v23 = a1;
  char v22 = a2;
  uint64_t v21 = a3;
  unsigned int v20 = 0;
  char v18 = 0;
  if (*(_WORD *)(a1 + 260))
  {
    char v3 = v22 ? 25 : 24;
    char v18 = v3;
    ot::Mle::Tlv::SetType(v19, v3);
    ot::Tlv::SetLength((uint64_t)v19, *(_WORD *)(a1 + 260) - 10);
    unsigned int v20 = ot::Message::Append<ot::Mle::Tlv>(v21, v19);
    if (!v20)
    {
      ot::MeshCoP::Dataset::GetTlvsStart((ot::MeshCoP::Dataset *)a1);
      for (uint64_t i = v4; ; uint64_t i = v9)
      {
        unsigned int v11 = i;
        if ((unint64_t)v11 >= ot::MeshCoP::Dataset::GetTlvsEnd((ot::MeshCoP::Dataset *)a1)) {
          break;
        }
        if ((v22 || ot::MeshCoP::Tlv::GetType(i) != 14)
          && (v22 != 1 || ot::MeshCoP::Tlv::GetType(i) != 51))
        {
          unsigned __int8 Type = (ot::TimerMilli *)ot::MeshCoP::Tlv::GetType(i);
          if (Type == 52)
          {
            unsigned int v16 = 0;
            int Now = ot::TimerMilli::GetNow(Type);
            unsigned int v16 = ot::Time::operator-(&Now, (_DWORD *)(a1 + 256));
            ot::As<ot::MeshCoP::DelayTimerTlv>();
            int v13 = *v6;
            __int16 v14 = *((_WORD *)v6 + 2);
            DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13);
            if (DelayTimer <= v16)
            {
              ot::MeshCoP::DelayTimerTlv::SetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13, 0);
            }
            else
            {
              int v8 = ot::MeshCoP::DelayTimerTlv::GetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13);
              ot::MeshCoP::DelayTimerTlv::SetDelayTimer((ot::MeshCoP::DelayTimerTlv *)&v13, v8 - v16);
            }
            unsigned int v20 = ot::Tlv::AppendTo((ot::Tlv *)&v13, v21);
            if (v20) {
              return v20;
            }
          }
          else
          {
            unsigned int v20 = ot::Tlv::AppendTo(i, v21);
            if (v20) {
              return v20;
            }
          }
        }
        ot::MeshCoP::Tlv::GetNext(i);
      }
    }
  }
  return v20;
}

uint64_t ot::Message::Append<ot::Mle::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::Mle::Tlv>(a1, a2);
}

uint64_t ot::MeshCoP::DelayTimerTlv::SetDelayTimer(ot::MeshCoP::DelayTimerTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::MeshCoP::DelayTimerTlv::SetDelayTimer(this, a2);
}

uint64_t ot::MeshCoP::Dataset::ApplyConfiguration(ot::MeshCoP::Dataset *this, ot::Instance *a2, BOOL *a3)
{
  v63  = this;
  v62  = a2;
  v61  = a3;
  v60  = (ot::Mac::Mac *)ot::Instance::Get<ot::Mac::Mac>((uint64_t)a2);
  v59  = (__n128 *)ot::Instance::Get<ot::KeyManager>((uint64_t)v62);
  v58  = 0;
  if (ot::MeshCoP::Dataset::IsValid(this))
  {
    if (v61) {
      *v61  = 0;
    }
    ot::MeshCoP::Dataset::GetTlvsStart(this);
    for (uint64_t i = v3; ; uint64_t i = v39)
    {
      v51  = i;
      if ((unint64_t)v51 >= ot::MeshCoP::Dataset::GetTlvsEnd(this)) {
        return v58;
      }
      unsigned __int8 Type = ot::MeshCoP::Tlv::GetType(i);
      if (Type)
      {
        uint64_t v6 = Type;
        char v5 = 1;
      }
      else
      {
        uint64_t v6 = Type;
        char v5 = 0;
      }
      if ((v5 & 1) == 0)
      {
        switch(v6)
        {
          case 0:
            unsigned __int8 Channel = 0;
            ot::As<ot::MeshCoP::ChannelTlv>();
            unsigned __int8 Channel = ot::MeshCoP::ChannelTlv::GetChannel(v7);
            v58  = ot::Mac::Mac::SetPanChannel(v60, Channel);
            if (v58)
            {
              char v50 = Channel;
              ot::ErrorToString(v58);
              ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Dataset", "ApplyConfiguration() Failed to set channel to %d (%s)", v8, v9, v10, v11, v12, v13, v50);
              return v58;
            }
            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>((unsigned __int16 *)this);
            if (!v14)
            {
              uint64_t v49 = v60;
              int SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v60);
              Wakeupunsigned __int8 Channel = ot::Mac::ChannelMask::GetWakeupChannel(SupportedChannelMask);
              ot::Mac::Mac::SetWorChannel((uint64_t)v49, WakeupChannel);
            }
            break;
          case 1:
            signed int v47 = v60;
            ot::As<ot::MeshCoP::PanIdTlv>();
            __int16 PanId = ot::MeshCoP::PanIdTlv::GetPanId(v19);
            ot::Mac::Mac::SetPanId(v47, PanId);
            break;
          case 2:
            unsigned __int8 v46 = (ot::MeshCoP::ExtendedPanIdManager *)ot::Instance::Get<ot::MeshCoP::ExtendedPanIdManager>((uint64_t)v62);
            ot::As<ot::MeshCoP::ExtendedPanIdTlv>();
            Extended__int16 PanId = (const ot::MeshCoP::ExtendedPanId *)ot::MeshCoP::ExtendedPanIdTlv::GetExtendedPanId(v21);
            ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(v46, ExtendedPanId);
            break;
          case 3:
            uint64_t v45 = (ot::MeshCoP::NetworkNameManager *)ot::Instance::Get<ot::MeshCoP::NetworkNameManager>((uint64_t)v62);
            ot::As<ot::MeshCoP::NetworkNameTlv>();
            v55[0]  = ot::MeshCoP::NetworkNameTlv::GetNetworkName(v23);
            v55[1]  = v24;
            ot::MeshCoP::NetworkNameManager::SetNetworkName(v45, (const ot::MeshCoP::NameData *)v55);
            IgnoreError();
            break;
          case 4:
            uint64_t v43 = v59;
            ot::As<ot::MeshCoP::PskcTlv>();
            unsigned int Pskc = (_OWORD *)ot::MeshCoP::PskcTlv::GetPskc(v28);
            ot::KeyManager::SetPskc((uint64_t)v43, Pskc);
            break;
          case 5:
            v54  = 0;
            ot::As<ot::MeshCoP::NetworkKeyTlv>();
            v54  = v25;
            ot::KeyManager::GetNetworkKey(v59, &v64);
            if (v61)
            {
              NetworkKey  = (const void *)ot::MeshCoP::NetworkKeyTlv::GetNetworkKey(v54);
              if (ot::Unequatable<ot::NetworkKey>::operator!=(NetworkKey, &v64)) {
                *v61  = 1;
              }
            }
            uint64_t v44 = (ot::KeyManager *)v59;
            uint64_t v27 = (const ot::NetworkKey *)ot::MeshCoP::NetworkKeyTlv::GetNetworkKey(v54);
            ot::KeyManager::SetNetworkKey(v44, v27);
            break;
          case 6:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
            break;
          case 7:
            unsigned int v42 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)v62);
            ot::As<ot::MeshCoP::MeshLocalPrefixTlv>();
            MeshLocaluint64_t Prefix = (const ot::Ip6::NetworkPrefix *)ot::MeshCoP::MeshLocalPrefixTlv::GetMeshLocalPrefix(v30);
            ot::Mle::Mle::SetMeshLocalPrefix(v42, MeshLocalPrefix);
            break;
          case 12:
            unsigned __int16 v41 = (ot::KeyManager *)v59;
            ot::As<ot::MeshCoP::SecurityPolicyTlv>();
            SecurityPolicy  = ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy(v32);
            ot::KeyManager::SetSecurityPolicy(v41, (const ot::SecurityPolicy *)&SecurityPolicy, v33, v34, v35, v36, v37, v38);
            break;
          case 74:
            v48  = v60;
            ot::As<ot::MeshCoP::WakeupChannelTlv>();
            char v18 = ot::MeshCoP::WakeupChannelTlv::GetChannel(v17);
            ot::Mac::Mac::SetWorChannel((uint64_t)v48, v18);
            break;
          default:
            JUMPOUT(0);
        }
      }
      ot::MeshCoP::Tlv::GetNext(i);
    }
  }
  return 6;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>(unsigned __int16 *a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>(a1);
}

BOOL ot::Unequatable<ot::NetworkKey>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::NetworkKey>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::NetworkKey>::operator!=(a1, a2);
}

void ot::MeshCoP::Dataset::ConvertToActive(ot::MeshCoP::Dataset *this)
{
}

const char *ot::MeshCoP::Dataset::TypeToString(char a1)
{
  if (a1) {
    return "Pending";
  }
  else {
    return "Active";
  }
}

uint64_t ot::Tlv::GetNext(ot::Tlv *this)
{
  return (uint64_t)this + ot::Tlv::GetSize(this);
}

{
  return (uint64_t)this + ot::Tlv::GetSize(this);
}

{
  return ot::Tlv::GetNext(this);
}

{
  return ot::Tlv::GetNext(this);
}

uint64_t ot::MeshCoP::DatasetLocal::DatasetLocal(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a1 + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  *(unsigned char *)(a1 + 13) &= ~1u;
  *(unsigned char *)(a1 + 13) &= ~2u;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)(a1 + 16));
  ot::Clearable<ot::MeshCoP::Timestamp>::Clear((void *)a1);
  ot::MeshCoP::Dataset::Clear(a1 + 16);
  return a1;
}

{
  ot::MeshCoP::DatasetLocal::DatasetLocal(a1, a2, a3);
  return a1;
}

void *ot::Clearable<ot::MeshCoP::Timestamp>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::MeshCoP::Timestamp>::Clear(result);
}

void *ot::MeshCoP::DatasetLocal::Clear(ot::MeshCoP::DatasetLocal *this)
{
  ot::MeshCoP::Dataset::Clear((uint64_t)this + 16);
  uint64_t result = ot::Clearable<ot::MeshCoP::Timestamp>::Clear(this);
  *((unsigned char *)this + 13) &= ~1u;
  *((unsigned char *)this + 13) &= ~2u;
  return result;
}

uint64_t ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::DatasetLocal *this, ot::MeshCoP::Dataset *a2)
{
  *((unsigned char *)this + 13) &= ~1u;
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Read(this, a2);
  if (!v4)
  {
    *((unsigned char *)this + 13)  = *((unsigned char *)this + 13) & 0xFD | 2;
    *((unsigned char *)this + 13)  = *((unsigned char *)this + 13) & 0xFE | (ot::MeshCoP::Dataset::GetTimestamp((unsigned __int16 *)a2, *((unsigned char *)this + 12), this) == 0);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::DatasetLocal *this, ot::MeshCoP::Dataset *a2)
{
  uint64_t v15 = this;
  uint64_t v14 = a2;
  uint64_t v13 = 0;
  unsigned int v12 = 0;
  unsigned int v11 = 0;
  if (*((_WORD *)this + 138))
  {
    memcpy(v14, (char *)this + 16, 0x106uLL);
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = 23;
  }
  if (!v11)
  {
    if (*((unsigned char *)this + 12))
    {
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>((uint64_t)v14);
      uint64_t v13 = v3;
      if (!v3) {
        return v11;
      }
      int Now = ot::TimerMilli::GetNow(v3);
      unsigned int v12 = ot::Time::operator-(&Now, (_DWORD *)this + 2);
      DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v13);
      if (DelayTimer <= v12)
      {
        uint64_t v2 = (ot::TimerMilli *)ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v13, 0);
      }
      else
      {
        unsigned int v7 = v13;
        int v5 = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v13);
        uint64_t v2 = (ot::TimerMilli *)ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v7, v5 - v12);
      }
    }
    else
    {
      ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)v14, 0x33u);
      ot::MeshCoP::Dataset::RemoveTlv((ot::MeshCoP::Dataset *)v14, 0x34u);
    }
    int v9 = ot::TimerMilli::GetNow(v2);
    *((_DWORD *)v14 + 6++*(_WORD *)(this + 4) = v9;
    return v11;
  }
  *((_WORD *)v14 + 13ot::MeshCoP::Tlv::SetType(this, 0) = 0;
  return v11;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>(a1);
}

uint64_t ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::DatasetLocal *this, ot::MeshCoP::Dataset::Info *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v6);
  ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(a2);
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Read(this, (ot::MeshCoP::Dataset *)v6);
  if (!v4) {
    ot::MeshCoP::Dataset::ConvertTo((ot::MeshCoP::Dataset *)v6, a2);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::DatasetLocal *a1, unsigned char *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v6);
  memset(a2, 0, 0xFFuLL);
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Read(a1, (ot::MeshCoP::Dataset *)v6);
  if (!v4) {
    ot::MeshCoP::Dataset::ConvertTo(v6, a2);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::DatasetLocal *this, const ot::MeshCoP::Dataset::Info *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v6);
  unsigned int v4 = ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v6, a2);
  if (!v4) {
    return ot::MeshCoP::DatasetLocal::Save(this, (const ot::MeshCoP::Dataset *)v6);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::DatasetLocal *this, const ot::MeshCoP::Dataset *a2)
{
  unsigned int v19 = 0;
  if (!(unsigned __int16)ot::MeshCoP::Dataset::GetSize(a2))
  {
    ot::MeshCoP::Dataset::Clear((uint64_t)this + 16);
    *((unsigned char *)this + 13) &= ~2u;
    char v2 = ot::MeshCoP::Dataset::TypeToString(*((unsigned char *)this + 12));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetLocal", "%s dataset deleted", v3, v4, v5, v6, v7, v8, v2);
LABEL_6:
    Timestamp  = (ot::TimerMilli *)ot::MeshCoP::Dataset::GetTimestamp((unsigned __int16 *)a2, *((unsigned char *)this + 12), this);
    *((unsigned char *)this + 13)  = *((unsigned char *)this + 13) & 0xFE | (Timestamp == 0);
    *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = ot::TimerMilli::GetNow(Timestamp);
    return v19;
  }
  memcpy((char *)this + 16, a2, 0x106uLL);
  if (ot::MeshCoP::Dataset::IsValid((ot::MeshCoP::DatasetLocal *)((char *)this + 16)))
  {
    *((unsigned char *)this + 13)  = *((unsigned char *)this + 13) & 0xFD | 2;
    char v9 = ot::MeshCoP::Dataset::TypeToString(*((unsigned char *)this + 12));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetLocal", "%s dataset set", v10, v11, v12, v13, v14, v15, v9);
    goto LABEL_6;
  }
  return 7;
}

uint64_t ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::DatasetLocal *a1, unsigned __int8 *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v5);
  ot::MeshCoP::Dataset::SetFrom(v5, a2);
  return ot::MeshCoP::DatasetLocal::Save(a1, (const ot::MeshCoP::Dataset *)v5);
}

uint64_t __cxx_global_var_init_7()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_7()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_dataset_local_cpp()
{
  return __cxx_global_var_init_1_7();
}

BOOL otIp4IsAddressEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)ot::AsCoreType<otIp4Address>(a1);
  char v2 = (const void *)ot::AsCoreType<otIp4Address>(a2);
  return ot::Equatable<ot::Ip4::Address>::operator==(v4, v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp4Address>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

BOOL ot::Equatable<ot::Ip4::Address>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 4uLL) == 0;
}

{
  return ot::Equatable<ot::Ip4::Address>::operator==(a1, a2);
}

void otIp4ExtractFromIp6Address(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (ot::Ip4::Address *)ot::AsCoreType<otIp4Address>(a3);
  uint64_t v3 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(a2);
  ot::Ip4::Address::ExtractFromIp6Address(v4, a1, v3);
}

uint64_t otIp4AddressFromString(const char *a1, uint64_t a2)
{
  if (!a1) {
    __assert_rtn("otIp4AddressFromString", "nat64_api.cpp", 145, "(aString) != nullptr");
  }
  char v2 = (ot::Ip4::Address *)ot::AsCoreType<otIp4Address>(a2);
  return ot::Ip4::Address::FromString(v2, a1, 0);
}

uint64_t otNat64SynthesizeIp6Address(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  unsigned int v10 = 0;
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (const unsigned __int8 **)ot::Instance::Get<ot::NetworkData::Leader>(v3);
  if (ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(v4, (ot::NetworkData::ExternalRouteConfig *)v9))
  {
    return 13;
  }
  else
  {
    uint64_t v8 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>(v11);
    uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix((ot::NetworkData::ExternalRouteConfig *)v9);
    uint64_t v5 = (const ot::Ip4::Address *)ot::AsCoreType<otIp4Address>(v12);
    ot::Ip6::Address::SynthesizeFromIp4Address(v8, Prefix, v5);
  }
  return v10;
}

uint64_t ot::NetworkData::ExternalRouteConfig::GetPrefix(ot::NetworkData::ExternalRouteConfig *this)
{
  return ot::AsCoreType<otIp6Prefix>((uint64_t)this);
}

{
  return ot::AsCoreType<otIp6Prefix>((uint64_t)this);
}

{
  return ot::NetworkData::ExternalRouteConfig::GetPrefix(this);
}

{
  return ot::NetworkData::ExternalRouteConfig::GetPrefix(this);
}

ot::StringWriter *otIp4AddressToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp4AddressToString", "nat64_api.cpp", 164, "(aBuffer) != nullptr");
  }
  uint64_t v3 = (ot::Ip4::Address *)ot::AsCoreType<otIp4Address>(a1);
  return ot::Ip4::Address::ToString(v3, a2, a3);
}

uint64_t otIp4CidrFromString(ot *a1, uint64_t a2)
{
  char v2 = (ot::Ip4::Cidr *)ot::AsCoreType<otIp4Cidr>(a2);
  return ot::Ip4::Cidr::FromString(v2, a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp4Cidr>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

ot::StringWriter *otIp4CidrToString(uint64_t a1, char *a2, __int16 a3)
{
  if (!a2) {
    __assert_rtn("otIp4CidrToString", "nat64_api.cpp", 173, "(aBuffer) != nullptr");
  }
  uint64_t v3 = (ot::Ip4::Cidr *)ot::AsCoreType<otIp4Cidr>(a1);
  return ot::Ip4::Cidr::ToString(v3, a2, a3);
}

uint64_t ot::MeshCoP::DatasetManager::DatasetManager(uint64_t a1, ot::Instance *a2, char a3, void (*a4)(ot::Timer *))
{
  *(unsigned char *)(a1 + 292) &= ~1u;
  *(unsigned char *)(a1 + 292) &= ~2u;
  ot::TimerMicro::TimerMicro((ot::TimerMicro *)(a1 + 296), a2, a4);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)(a1 + 320));
  ot::Clearable<ot::MeshCoP::Timestamp>::Clear((void *)(a1 + 284));
  return a1;
}

{
  ot::MeshCoP::DatasetManager::DatasetManager(a1, a2, a3, a4);
  return a1;
}

uint64_t ot::MeshCoP::PendingDatasetManager::HandleDelayTimer(ot::MeshCoP::PendingDatasetManager *this)
{
  char v18 = this;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v19);
  ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v19);
  IgnoreError();
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>((uint64_t)v19);
  uint64_t v17 = v7;
  if (v7
    && (unsigned int v16 = 0,
        int v15 = ot::Timer::GetFireTime((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336)),
        UpdateTime  = ot::MeshCoP::Dataset::GetUpdateTime((ot::MeshCoP::Dataset *)v19),
        unsigned int v16 = ot::Time::operator-(&v15, &UpdateTime),
        DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v17),
        v16 < DelayTimer))
  {
    FireTime  = ot::Timer::GetFireTime((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336));
    return ot::TimerMilli::StartAt((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336), FireTime, DelayTimer - v16);
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "pending delay timer expired", v1, v2, v3, v4, v5, v6, v10);
    ot::MeshCoP::Dataset::ConvertToActive((ot::MeshCoP::Dataset *)v19);
    uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
    ot::MeshCoP::ActiveDatasetManager::Save(active, (const ot::MeshCoP::Dataset *)v19);
    return ot::MeshCoP::PendingDatasetManager::Clear(this);
  }
}

uint64_t ot::MeshCoP::DatasetManager::GetTimestamp(ot::MeshCoP::DatasetManager *this)
{
  if (*((unsigned char *)this + 292)) {
    return (uint64_t)this + 284;
  }
  else {
    return 0;
  }
}

uint64_t ot::MeshCoP::DatasetManager::Restore(ot::MeshCoP::DatasetManager *this)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v6);
  ot::TimerMilli::Stop((ot::MeshCoP::DatasetManager *)((char *)this + 296));
  *((unsigned char *)this + 292) &= ~1u;
  unsigned int v5 = ot::MeshCoP::DatasetLocal::Restore((ot::MeshCoP::DatasetManager *)((char *)this + 4), (ot::MeshCoP::Dataset *)v6);
  if (!v5)
  {
    char Type = ot::MeshCoP::DatasetManager::GetType(this);
    *((unsigned char *)this + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 292) & 0xFE | (ot::MeshCoP::Dataset::GetTimestamp(v6, Type, (ot::MeshCoP::DatasetManager *)((char *)this + 284)) == 0);
    if (ot::MeshCoP::DatasetManager::IsActiveDataset(this))
    {
      Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
      ot::MeshCoP::Dataset::ApplyConfiguration((ot::MeshCoP::Dataset *)v6, Instance, 0);
      IgnoreError();
    }
    ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
  }
  return v5;
}

uint64_t ot::MeshCoP::DatasetManager::GetType(ot::MeshCoP::DatasetManager *this)
{
  return ot::MeshCoP::DatasetLocal::GetType((ot::MeshCoP::DatasetManager *)((char *)this + 4));
}

{
  return ot::MeshCoP::DatasetManager::GetType(this);
}

BOOL ot::MeshCoP::DatasetManager::IsActiveDataset(ot::MeshCoP::DatasetManager *this)
{
  return ot::MeshCoP::DatasetManager::GetType(this) == 0;
}

{
  return ot::MeshCoP::DatasetManager::IsActiveDataset(this);
}

uint64_t ot::MeshCoP::DatasetManager::SignalDatasetChange(ot::MeshCoP::DatasetManager *this)
{
  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  if (ot::MeshCoP::DatasetLocal::GetType((ot::MeshCoP::DatasetManager *)((char *)this + 4))) {
    uint64_t v1 = 0x20000000;
  }
  else {
    uint64_t v1 = 0x10000000;
  }
  return ot::Notifier::Signal(v4, v1);
}

uint64_t ot::MeshCoP::DatasetManager::ApplyConfiguration(ot::MeshCoP::DatasetManager *this)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v5);
  unsigned int v4 = ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v5);
  if (!v4)
  {
    Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
    return ot::MeshCoP::Dataset::ApplyConfiguration((ot::MeshCoP::Dataset *)v5, Instance, 0);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetManager::Read(ot::MeshCoP::DatasetManager *this, ot::MeshCoP::Dataset *a2)
{
  return ot::MeshCoP::DatasetLocal::Read((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
}

{
  return ot::MeshCoP::DatasetManager::Read(this, a2);
}

uint64_t ot::MeshCoP::DatasetManager::Clear(ot::MeshCoP::DatasetManager *this)
{
  *((unsigned char *)this + 292) &= ~1u;
  ot::MeshCoP::DatasetLocal::Clear((ot::MeshCoP::DatasetManager *)((char *)this + 4));
  ot::TimerMilli::Stop((ot::MeshCoP::DatasetManager *)((char *)this + 296));
  return ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
}

void ot::MeshCoP::DatasetManager::HandleDetach(ot::MeshCoP::DatasetManager *this)
{
}

uint64_t ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
  int v15 = this;
  uint64_t v14 = a2;
  unsigned int v13 = 0;
  int v12 = 0;
  BOOL v11 = 0;
  char Type = ot::MeshCoP::DatasetManager::GetType(this);
  if (ot::MeshCoP::Dataset::GetTimestamp((unsigned __int16 *)a2, Type, (ot::MeshCoP::DatasetManager *)((char *)this + 284))|| (*((unsigned char *)this + 292) = *((unsigned char *)this + 292) & 0xFE | 1, !ot::MeshCoP::DatasetManager::IsActiveDataset(this))|| (Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this), (unsigned int v13 = ot::MeshCoP::Dataset::ApplyConfiguration(v14, Instance, &v11)) == 0))
  {
    if (*((unsigned char *)this + 292)) {
      uint64_t v8 = (ot::MeshCoP::DatasetManager *)((char *)this + 284);
    }
    else {
      uint64_t v8 = 0;
    }
    Timestamp  = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
    int v12 = ot::MeshCoP::Timestamp::Compare(v8, Timestamp, v5);
    if (!v11 && v12 <= 0)
    {
      if (v12 < 0) {
        ot::TimerMilli::Start((ot::MeshCoP::DatasetManager *)((char *)this + 296), 0x1388u);
      }
      goto LABEL_13;
    }
    unsigned int v13 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetManager *)((char *)this + 4), v14);
    if (!v13)
    {
      uint64_t v6 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      ot::NetworkData::Leader::IncrementVersionAndStableVersion(v6);
LABEL_13:
      ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
    }
  }
  return v13;
}

ot::MeshCoP::DatasetLocal *ot::MeshCoP::DatasetLocal::GetTimestamp(ot::MeshCoP::DatasetLocal *this)
{
  if (*((unsigned char *)this + 13)) {
    return this;
  }
  else {
    return 0;
  }
}

{
  return ot::MeshCoP::DatasetLocal::GetTimestamp(this);
}

uint64_t ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset::Info *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
  if (!v4) {
    ot::MeshCoP::DatasetManager::HandleDatasetUpdated(this);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetManager::HandleDatasetUpdated(ot::MeshCoP::DatasetManager *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 Role = ot::Mle::Mle::GetRole(v1);
  if (Role)
  {
    uint64_t v4 = Role;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        ot::MeshCoP::DatasetManager::Restore(this);
        IgnoreError();
        break;
      case 1:
        return ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
      case 2:
      case 3:
        ot::MeshCoP::DatasetManager::SendSet(this);
        break;
      case 4:
        ot::MeshCoP::DatasetManager::Restore(this);
        IgnoreError();
        unsigned int v5 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::Leader::IncrementVersionAndStableVersion(v5);
        break;
      default:
        JUMPOUT(0);
    }
  }
  return ot::MeshCoP::DatasetManager::SignalDatasetChange(this);
}

uint64_t ot::MeshCoP::DatasetManager::Save(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetLocal *)(a1 + 4), a2);
  if (!v4) {
    ot::MeshCoP::DatasetManager::HandleDatasetUpdated((ot::MeshCoP::DatasetManager *)a1);
  }
  return v4;
}

uint64_t ot::MeshCoP::DatasetManager::SaveLocal(ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::DatasetManager *)((char *)this + 4), a2);
  if (!v4) {
    ot::MeshCoP::DatasetManager::HandleDatasetUpdated(this);
  }
  return v4;
}

void ot::MeshCoP::DatasetManager::SendSet(ot::MeshCoP::DatasetManager *this)
{
  unsigned __int8 v30 = this;
  int appended = 0;
  char v28 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v27, Instance);
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v32);
  if ((*((unsigned char *)this + 292) & 2) != 0)
  {
    int appended = 5;
  }
  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsChild(v2)
      || (char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
          ot::Mle::Mle::IsRouter(v3)))
    {
      Timestamp  = (ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(this);
      unsigned int v4 = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
      if ((int)ot::MeshCoP::Timestamp::Compare(Timestamp, v4, v5) < 0)
      {
        if (!ot::MeshCoP::DatasetManager::IsActiveDataset(this)
          || (ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v31),
              uint64_t v6 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this),
              ot::MeshCoP::DatasetManager::Read(v6, (ot::MeshCoP::Dataset *)v31),
              IgnoreError(),
              ot::MeshCoP::Dataset::GetTimestamp(v31, 0, &v26))
          || (uint64_t v7 = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4)),
              ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)&v26, v7, v8)))
        {
          uint64_t v23 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          if (ot::MeshCoP::DatasetManager::IsActiveDataset(this)) {
            unsigned __int8 v9 = 12;
          }
          else {
            unsigned __int8 v9 = 27;
          }
          char v28 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v23, v9);
          if (v28)
          {
            ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v32);
            IgnoreError();
            char v22 = v28;
            ot::MeshCoP::Dataset::GetBytes((ot::MeshCoP::Dataset *)v32);
            uint64_t v21 = v10;
            Size  = ot::MeshCoP::Dataset::GetSize((ot::MeshCoP::Dataset *)v32);
            int appended = ot::Message::AppendBytes(v22, v21, Size);
            if (!appended)
            {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v27);
              IgnoreError();
              int v12 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
              int appended = ot::Coap::CoapBase::SendMessage(v12, v28, (ot::Ip6::MessageInfo *)v27, (uint64_t)ot::MeshCoP::DatasetManager::HandleMgmtSetResponse, (uint64_t)this);
              if (!appended)
              {
                char Type = ot::MeshCoP::DatasetManager::GetType(this);
                char v14 = ot::MeshCoP::Dataset::TypeToString(Type);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "Sent %s set to leader", v15, v16, v17, v18, v19, v20, v14);
              }
            }
          }
          else
          {
            int appended = 3;
          }
        }
        else
        {
          int appended = 13;
        }
      }
      else
      {
        int appended = 24;
      }
    }
    else
    {
      int appended = 13;
    }
  }
  if (appended)
  {
    if (appended == 3) {
      ot::TimerMilli::Start((ot::MeshCoP::DatasetManager *)((char *)this + 296), 0x1388u);
    }
    ot::MeshCoP::LogError((char)"send Dataset set to leader", appended);
    if (v28) {
      ot::Message::Free(v28);
    }
  }
  else
  {
    *((unsigned char *)this + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 292) & 0xFD | 2;
  }
}

uint64_t ot::MeshCoP::DatasetLocal::GetType(ot::MeshCoP::DatasetLocal *this)
{
  return *((unsigned __int8 *)this + 12);
}

{
  return ot::MeshCoP::DatasetLocal::GetType(this);
}

uint64_t ot::MeshCoP::DatasetManager::GetChannelMask(ot::MeshCoP::DatasetManager *this, ot::Mac::ChannelMask *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v11);
  unsigned int v9 = ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v11);
  if (!v9)
  {
    ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>((uint64_t)v11);
    if (v2)
    {
      ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v2);
      if (ChannelMask)
      {
        char v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        int SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v3);
        Masunsigned __int16 k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
        ot::Mac::ChannelMask::SetMask(a2, ChannelMask & Mask);
        if (ot::Mac::ChannelMask::IsEmpty(a2)) {
          return 23;
        }
      }
    }
    else
    {
      return 23;
    }
  }
  return v9;
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>(a1);
}

void ot::MeshCoP::DatasetManager::HandleTimer(ot::MeshCoP::DatasetManager *this)
{
}

BOOL ot::Mle::Mle::IsRouter(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 73) == 3;
}

{
  return ot::Mle::Mle::IsRouter(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(a1);
}

uint64_t ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  ot::AsCoapMessagePtr();
  BOOL v11 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(a1, v11, v5, (unsigned __int16 *)a4, v6, v7, v8, v9);
}

uint64_t ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(uint64_t a1, ot::Tlv *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  v19[1]  = a4;
  unsigned __int8 v18 = 0;
  v19[0]  = a4;
  if (!a4)
  {
    if (ot::Tlv::Find<ot::MeshCoP::StateTlv>(v21, &v18, a3, a4))
    {
      v19[0]  = 6;
    }
    else if (v18 == 1)
    {
      v19[0]  = 0;
    }
    else if (v18 == 255)
    {
      v19[0]  = 37;
    }
    else
    {
      v19[0]  = 6;
    }
  }
  if (v19[0])
  {
    char v15 = ot::ErrorToString(v19[0]);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "MGMT_SET finished: %s", v8, v9, v10, v11, v12, v13, v15);
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "MGMT_SET finished: %s", a3, (uint64_t)a4, a5, a6, a7, a8, (char)"Accepted");
  }
  *(unsigned char *)(a1 + 292) &= ~2u;
  if (ot::CallbackBase<void (*)(otError,void *)>::IsSet((void *)(a1 + 320)))
  {
    long long v17 = *(_OWORD *)(a1 + 320);
    ot::CallbackBase<void (*)(otError,void *)>::Clear((void *)(a1 + 320));
    ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>((uint64_t)&v17, v19);
  }
  return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 296), 0x1388u);
}

BOOL ot::CallbackBase<void (*)(otError,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otError,void *)>::IsSet(a1);
}

void *ot::CallbackBase<void (*)(otError,void *)>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::CallbackBase<void (*)(otError,void *)>::Clear(result);
}

uint64_t ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>(a1, a2);
}

void ot::MeshCoP::DatasetManager::HandleGet(ot::MeshCoP::DatasetManager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  unsigned __int8 Length = 0;
  while (Offset < (int)(unsigned __int16)ot::Message::GetLength(v10))
  {
    if (ot::Message::Read<ot::MeshCoP::Tlv>(v10, Offset, v8)) {
      goto LABEL_17;
    }
    if (ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v8) == 13)
    {
      unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v8);
      if (Length > 0x3FuLL) {
        unsigned __int8 Length = 63;
      }
      ot::Message::ReadBytes(v10, Offset + 2, v12, Length);
      break;
    }
    Offset += ot::Tlv::GetLength((ot::Tlv *)v8) + 2;
  }
  if (Length && ot::MeshCoP::DatasetManager::IsPendingDataset(this))
  {
    for (unsigned __int8 i = 0; i < (int)Length; ++i)
    {
      if (v12[i] == 52) {
        goto LABEL_17;
      }
    }
    uint64_t v3 = Length++;
    v12[v3]  = 52;
  }
LABEL_17:
  ot::MeshCoP::DatasetManager::SendGetResponse(this, v10, v9, (unsigned __int8 *)v12, Length);
}

uint64_t ot::Message::Read<ot::MeshCoP::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<ot::MeshCoP::Tlv>(a1, a2, a3);
}

BOOL ot::MeshCoP::DatasetManager::IsPendingDataset(ot::MeshCoP::DatasetManager *this)
{
  return ot::MeshCoP::DatasetManager::GetType(this) == 1;
}

{
  return ot::MeshCoP::DatasetManager::IsPendingDataset(this);
}

void ot::MeshCoP::DatasetManager::SendGetResponse(ot::MeshCoP::DatasetManager *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 *a4, unsigned __int8 a5)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v32);
  ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v32);
  IgnoreError();
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v25 = ot::Coap::CoapBase::NewPriorityResponseMessage(v5, a2);
  if (v25)
  {
    if (a5)
    {
      for (unsigned __int8 i = 0; i < (int)a5; ++i)
      {
        if (a4[i] == 5)
        {
          uint64_t v9 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v9) + 2) & 1) == 0) {
            continue;
          }
        }
        ot::MeshCoP::Dataset::GetTlv((uint64_t)v32, a4[i]);
        if (v10)
        {
          int v26 = ot::Tlv::AppendTo(v10, v25);
          if (v26) {
            goto LABEL_22;
          }
        }
      }
    }
    else
    {
      ot::MeshCoP::Dataset::GetTlvsStart((ot::MeshCoP::Dataset *)v32);
      for (unsigned __int16 j = v6; (unint64_t)j < ot::MeshCoP::Dataset::GetTlvsEnd((ot::MeshCoP::Dataset *)v32); unsigned __int16 j = v8)
      {
        if (ot::MeshCoP::Tlv::GetType(j) != 5
          || (uint64_t v7 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this),
              (*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v7) + 2) & 1) != 0))
        {
          int v26 = ot::Tlv::AppendTo(j, v25);
          if (v26) {
            goto LABEL_22;
          }
        }
        ot::MeshCoP::Tlv::GetNext(j);
      }
    }
    uint64_t v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    int v26 = ot::Coap::CoapBase::SendMessage(v11, v25, a3);
    if (!v26)
    {
      BOOL v12 = ot::MeshCoP::DatasetManager::GetType(this) == 0;
      uint64_t v13 = "active";
      if (!v12) {
        uint64_t v13 = "pending";
      }
      char v21 = (char)v13;
      PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
      ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v31);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "sent %s dataset get response to %s", v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    int v26 = 3;
  }
LABEL_22:
  if (v26)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
  }
}

uint64_t ot::KeyManager::GetSecurityPolicy(ot::KeyManager *this)
{
  return (uint64_t)this + 140;
}

{
  return ot::KeyManager::GetSecurityPolicy(this);
}

uint64_t ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::DatasetManager *this, const ot::MeshCoP::Dataset::Info *a2, ot::Message *a3)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v10);
  unsigned int v7 = ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v10, a2);
  if (!v7)
  {
    ot::MeshCoP::Dataset::GetBytes((ot::MeshCoP::Dataset *)v10);
    uint64_t v6 = v3;
    Size  = ot::MeshCoP::Dataset::GetSize((ot::MeshCoP::Dataset *)v10);
    return ot::Message::AppendBytes(a3, v6, Size);
  }
  return v7;
}

uint64_t ot::MeshCoP::DatasetManager::SendSetRequest(uint64_t a1, const ot::MeshCoP::Dataset::Info *a2, char *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a1;
  uint64_t v33 = a2;
  char v32 = a3;
  unsigned __int8 v31 = a4;
  uint64_t v30 = a5;
  uint64_t v29 = a6;
  unsigned int appended = 0;
  uint64_t v27 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v26, Instance);
  if ((*(unsigned char *)(a1 + 292) & 2) != 0)
  {
    unsigned int appended = 5;
  }
  else
  {
    char v21 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
    if (ot::MeshCoP::DatasetManager::IsActiveDataset((ot::MeshCoP::DatasetManager *)a1)) {
      unsigned __int8 v7 = 12;
    }
    else {
      unsigned __int8 v7 = 27;
    }
    uint64_t v27 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v21, v7);
    if (v27)
    {
      uint64_t v8 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>((ot::InstanceLocator *)a1);
      if (!ot::MeshCoP::Commissioner::IsActive(v8)) {
        goto LABEL_18;
      }
      uint64_t v25 = &v32[v31];
      char v24 = 0;
      for (unsigned __int8 i = (ot::MeshCoP::Tlv *)v32; i < (ot::MeshCoP::Tlv *)v25; unsigned __int8 i = v9)
      {
        if ((char *)i + 2 > v25)
        {
          unsigned int appended = 7;
          goto LABEL_23;
        }
        if (ot::MeshCoP::Tlv::GetType(i) == 11)
        {
          char v24 = 1;
          break;
        }
        ot::MeshCoP::Tlv::GetNext(i);
      }
      if ((v24 & 1) != 0
        || (uint64_t v20 = v27,
            uint64_t v10 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>((ot::InstanceLocator *)a1),
            unsigned __int16 SessionId = ot::MeshCoP::Commissioner::GetSessionId(v10),
            (unsigned int appended = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v20, SessionId)) == 0))
      {
LABEL_18:
        unsigned int appended = ot::MeshCoP::DatasetManager::AppendDatasetToMessage((ot::MeshCoP::DatasetManager *)a1, v33, v27);
        if (!appended && (!v31 || (unsigned int appended = ot::Message::AppendBytes(v27, v32, v31)) == 0))
        {
          ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v26);
          IgnoreError();
          BOOL v12 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
          unsigned int appended = ot::Coap::CoapBase::SendMessage(v12, v27, (ot::Ip6::MessageInfo *)v26, (uint64_t)ot::MeshCoP::DatasetManager::HandleMgmtSetResponse, a1);
          if (!appended)
          {
            ot::CallbackBase<void (*)(otError,void *)>::Set((void *)(a1 + 320), v30, v29);
            *(unsigned char *)(a1 + 29ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(unsigned char *)(a1 + 292) & 0xFD | 2;
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "sent dataset set request to leader", v13, v14, v15, v16, v17, v18, (char)v20);
          }
        }
      }
    }
    else
    {
      unsigned int appended = 3;
    }
  }
LABEL_23:
  if (appended && v27) {
    ot::Message::Free(v27);
  }
  return appended;
}

void *ot::CallbackBase<void (*)(otError,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otError,void *)>::Set(result, a2, a3);
}

uint64_t ot::MeshCoP::DatasetManager::SendGetRequest(ot::InstanceLocator *a1, ot::MeshCoP::Dataset::Components *a2, char *a3, unsigned __int8 a4, uint64_t a5)
{
  unsigned __int16 v39 = a1;
  uint64_t v38 = a2;
  uint64_t v37 = a3;
  unsigned __int8 v36 = a4;
  uint64_t v35 = a5;
  unsigned int appended = 0;
  uint64_t v33 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v32, Instance);
  unsigned __int8 v30 = 0;
  if (ot::MeshCoP::Dataset::Components::IsActiveTimestampPresent(v38))
  {
    unsigned __int8 v30 = 1;
    v40[0]  = 14;
  }
  if (ot::MeshCoP::Dataset::Components::IsPendingTimestampPresent(v38))
  {
    uint64_t v6 = v30++;
    v40[v6]  = 51;
  }
  if (ot::MeshCoP::Dataset::Components::IsNetworkKeyPresent(v38))
  {
    uint64_t v7 = v30++;
    v40[v7]  = 5;
  }
  if (ot::MeshCoP::Dataset::Components::IsNetworkNamePresent(v38))
  {
    uint64_t v8 = v30++;
    v40[v8]  = 3;
  }
  if (ot::MeshCoP::Dataset::Components::IsExtendedPanIdPresent(v38))
  {
    uint64_t v9 = v30++;
    v40[v9]  = 2;
  }
  if (ot::MeshCoP::Dataset::Components::IsMeshLocalPrefixPresent(v38))
  {
    uint64_t v10 = v30++;
    v40[v10]  = 7;
  }
  if (ot::MeshCoP::Dataset::Components::IsDelayPresent(v38))
  {
    uint64_t v11 = v30++;
    v40[v11]  = 52;
  }
  if (ot::MeshCoP::Dataset::Components::IsPanIdPresent(v38))
  {
    uint64_t v12 = v30++;
    v40[v12]  = 1;
  }
  if (ot::MeshCoP::Dataset::Components::IsChannelPresent(v38))
  {
    uint64_t v13 = v30++;
    v40[v13]  = 0;
  }
  if (ot::MeshCoP::Dataset::Components::IsPskcPresent(v38))
  {
    uint64_t v14 = v30++;
    v40[v14]  = 4;
  }
  if (ot::MeshCoP::Dataset::Components::IsSecurityPolicyPresent(v38))
  {
    uint64_t v15 = v30++;
    v40[v15]  = 12;
  }
  if (ot::MeshCoP::Dataset::Components::IsChannelMaskPresent(v38))
  {
    uint64_t v16 = v30++;
    v40[v16]  = 53;
  }
  char v28 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  if (ot::MeshCoP::DatasetManager::IsActiveDataset(a1)) {
    unsigned __int8 v17 = 11;
  }
  else {
    unsigned __int8 v17 = 25;
  }
  uint64_t v33 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v28, v17);
  if (v33)
  {
    if (v36 + v30 <= 0
      || (ot::MeshCoP::Tlv::SetType(&v31, 13),
          ot::Tlv::SetLength((uint64_t)&v31, v36 + v30),
          (unsigned int appended = ot::Message::Append<ot::MeshCoP::Tlv>(v33, (char *)&v31)) == 0)
      && (!v30 || (unsigned int appended = ot::Message::AppendBytes(v33, v40, v30)) == 0)
      && (!v36 || (unsigned int appended = ot::Message::AppendBytes(v33, v37, v36)) == 0))
    {
      ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v32);
      IgnoreError();
      if (v35)
      {
        uint64_t v18 = (__n128 *)ot::AsCoreType<otIp6Address>(v35);
        ot::Ip6::MessageInfo::SetPeerAddr(v32, v18);
      }
      uint64_t v19 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      unsigned int appended = ot::Coap::CoapBase::SendMessage(v19, v33, (const ot::Ip6::MessageInfo *)v32);
      if (!appended) {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "sent dataset get request", v20, v21, v22, v23, v24, v25, v27);
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v33) {
    ot::Message::Free(v33);
  }
  return appended;
}

uint64_t ot::MeshCoP::Dataset::Components::IsActiveTimestampPresent(ot::MeshCoP::Dataset::Components *this)
{
  return *(_WORD *)this & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsActiveTimestampPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsPendingTimestampPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 1) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsPendingTimestampPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsNetworkKeyPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 2) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsNetworkKeyPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsNetworkNamePresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 3) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsNetworkNamePresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsExtendedPanIdPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 4) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsExtendedPanIdPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsMeshLocalPrefixPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 5) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsMeshLocalPrefixPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsDelayPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 6) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsDelayPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsPanIdPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 7) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsPanIdPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsChannelPresent(ot::MeshCoP::Dataset::Components *this)
{
  return HIBYTE(*(unsigned __int16 *)this) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsChannelPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsPskcPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 9) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsPskcPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsSecurityPolicyPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 10) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsSecurityPolicyPresent(this);
}

uint64_t ot::MeshCoP::Dataset::Components::IsChannelMaskPresent(ot::MeshCoP::Dataset::Components *this)
{
  return (*(unsigned __int16 *)this >> 11) & 1;
}

{
  return ot::MeshCoP::Dataset::Components::IsChannelMaskPresent(this);
}

ot::MeshCoP::ActiveDatasetManager *ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager(ot::MeshCoP::ActiveDatasetManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager(this, a2);
  return this;
}

void ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::MeshCoP::ActiveDatasetManager *this, ot::Timer *a2)
{
  uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  ot::MeshCoP::ActiveDatasetManager::HandleTimer(active);
}

BOOL ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete(ot::MeshCoP::ActiveDatasetManager *this)
{
  BOOL v3 = 0;
  if (ot::MeshCoP::DatasetLocal::IsSaved((ot::MeshCoP::ActiveDatasetManager *)((char *)this + 4))) {
    return !(*((unsigned char *)this + 292) & 1);
  }
  return v3;
}

uint64_t ot::MeshCoP::DatasetLocal::IsSaved(ot::MeshCoP::DatasetLocal *this)
{
  return (*((unsigned __int8 *)this + 13) >> 1) & 1;
}

{
  return ot::MeshCoP::DatasetLocal::IsSaved(this);
}

uint64_t ot::MeshCoP::ActiveDatasetManager::IsCommissioned(ot::MeshCoP::ActiveDatasetManager *this)
{
  char v3 = 0;
  if (!ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset::Info *)v4))
  {
    IsChannelPresent  = 0;
    if (ot::MeshCoP::Dataset::Info::IsNetworkKeyPresent((ot::MeshCoP::Dataset::Info *)v4))
    {
      IsChannelPresent  = 0;
      if (ot::MeshCoP::Dataset::Info::IsNetworkNamePresent((ot::MeshCoP::Dataset::Info *)v4))
      {
        IsChannelPresent  = 0;
        if (ot::MeshCoP::Dataset::Info::IsExtendedPanIdPresent((ot::MeshCoP::Dataset::Info *)v4))
        {
          IsChannelPresent  = 0;
          if (ot::MeshCoP::Dataset::Info::IsPanIdPresent((ot::MeshCoP::Dataset::Info *)v4)) {
            IsChannelPresent  = ot::MeshCoP::Dataset::Info::IsChannelPresent((ot::MeshCoP::Dataset::Info *)v4);
          }
        }
      }
    }
    char v3 = IsChannelPresent & 1;
  }
  return v3 & 1;
}

uint64_t ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::ActiveDatasetManager *this, const ot::MeshCoP::Timestamp *a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v12);
  unsigned int v7 = ot::MeshCoP::Dataset::ReadFromMessage((ot::MeshCoP::Dataset *)v12, a3, a4, a5);
  if (!v7)
  {
    ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v12, 0, a2);
    return ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v12);
  }
  return v7;
}

void ot::MeshCoP::ActiveDatasetManager::HandleTmf<(ot::Uri)11>(ot::MeshCoP::DatasetManager *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(a1);
}

void ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::MeshCoP::ActiveDatasetManager *this)
{
}

{
  ot::MeshCoP::ActiveDatasetManager::HandleTimer(this);
}

ot::MeshCoP::PendingDatasetManager *ot::MeshCoP::PendingDatasetManager::PendingDatasetManager(ot::MeshCoP::PendingDatasetManager *this, ot::Instance *a2)
{
  return this;
}

{
  ot::MeshCoP::PendingDatasetManager::PendingDatasetManager(this, a2);
  return this;
}

void ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::MeshCoP::PendingDatasetManager *this, ot::Timer *a2)
{
  uint64_t v2 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  ot::MeshCoP::PendingDatasetManager::HandleTimer(v2);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::PendingDatasetManager,&ot::MeshCoP::PendingDatasetManager::HandleDelayTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::PendingDatasetManager,&ot::MeshCoP::PendingDatasetManager::HandleDelayTimer>::HandleTimer);
  return a1;
}

uint64_t ot::MeshCoP::PendingDatasetManager::Clear(ot::MeshCoP::PendingDatasetManager *this)
{
  return ot::TimerMilli::Stop((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336));
}

void ot::MeshCoP::PendingDatasetManager::ClearNetwork(ot::MeshCoP::PendingDatasetManager *this)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v2);
  ot::Clearable<ot::MeshCoP::Timestamp>::Clear((ot::MeshCoP::PendingDatasetManager *)((char *)this + 284));
  *((unsigned char *)this + 292) &= ~1u;
  ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v2);
  IgnoreError();
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Dataset::Info *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::Save(this, a2);
  if (!v4) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
  }
  return v4;
}

void ot::MeshCoP::PendingDatasetManager::StartDelayTimer(ot::MeshCoP::PendingDatasetManager *this)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v12);
  ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v12);
  IgnoreError();
  ot::TimerMilli::Stop((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336));
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::DelayTimerTlv>((uint64_t)v12);
  if (v1)
  {
    DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v1);
    if (DelayTimer > 0x7FFFFFFF) {
      DelayTimer  = 0x7FFFFFFF;
    }
    UpdateTime  = ot::MeshCoP::Dataset::GetUpdateTime((ot::MeshCoP::Dataset *)v12);
    ot::TimerMilli::StartAt((ot::MeshCoP::PendingDatasetManager *)((char *)this + 336), UpdateTime, DelayTimer);
    char v2 = ot::ToUlong(DelayTimer);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "delay timer started %lu", v3, v4, v5, v6, v7, v8, v2);
  }
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::PendingDatasetManager *a1, unsigned __int8 *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::Save((uint64_t)a1, a2);
  if (!v4) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(a1);
  }
  return v4;
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
  unsigned int v4 = ot::MeshCoP::DatasetManager::SaveLocal(this, a2);
  if (!v4) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
  }
  return v4;
}

uint64_t ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Timestamp *a2, const ot::Message *a3, unsigned __int16 a4, unsigned __int16 a5)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v12);
  unsigned int v7 = ot::MeshCoP::Dataset::ReadFromMessage((ot::MeshCoP::Dataset *)v12, a3, a4, a5);
  if (!v7)
  {
    ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v12, 1, a2);
    unsigned int v7 = ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v12);
    if (!v7) {
      ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
    }
  }
  return v7;
}

void ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::ActiveDatasetManager *this, const ot::MeshCoP::Dataset *a2)
{
}

{
  ot::MeshCoP::ActiveDatasetManager::Save(this, a2);
}

void ot::MeshCoP::PendingDatasetManager::HandleTmf<(ot::Uri)25>(ot::MeshCoP::DatasetManager *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
}

void ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::MeshCoP::PendingDatasetManager *this)
{
}

{
  ot::MeshCoP::PendingDatasetManager::HandleTimer(this);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::PendingDatasetManager,&ot::MeshCoP::PendingDatasetManager::HandleDelayTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  char v2 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(a1);
  return ot::MeshCoP::PendingDatasetManager::HandleDelayTimer(v2);
}

uint64_t ot::Ip4::Address::FromString(ot::Ip4::Address *this, const char *a2, unsigned __int8 *a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  char v9 = (char)a3;
  char v8 = 46;
  unsigned int v7 = 6;
  uint64_t v6 = a2;
  for (unsigned __int8 i = 0; !ot::StringParseUint8((ot *)&v6, (const char **)((char *)this + i), a3); ++i)
  {
    if (i == 3)
    {
      if (*v6 == v9) {
        return 0;
      }
      return v7;
    }
    if (*v6 != 46) {
      return v7;
    }
    ++v6;
  }
  return v7;
}

void ot::Ip4::Address::ExtractFromIp6Address(ot::Ip4::Address *this, unsigned __int8 a2, const ot::Ip6::Address *a3)
{
  if (!ot::Ip6::Prefix::IsValidNat64PrefixLength((ot::Ip6::Prefix *)a2)) {
    __assert_rtn("ExtractFromIp6Address", "ip4_types.cpp", 93, "Ip6::Prefix::IsValidNat64PrefixLength(aPrefixLength)");
  }
  unsigned __int8 v7 = a2 / 8;
  for (unsigned __int8 i = this; i != (ot::Ip4::Address *)((char *)this + 4); unsigned __int8 i = (ot::Ip4::Address *)((char *)i + 1))
  {
    if (v7 == 8) {
      ++v7;
    }
    ot::Ip6::Address::GetBytes(a3);
    uint64_t v3 = v7++;
    *(unsigned char *)unsigned __int8 i = *(unsigned char *)(v4 + v3);
  }
}

uint64_t ot::Ip4::Address::SynthesizeFromCidrAndHost(ot::Ip4::Address *this, const ot::Ip4::Cidr *a2, unsigned int a3)
{
  int v5 = *(_DWORD *)a2;
  int v6 = v5 & ot::Ip4::Cidr::SubnetMask(a2);
  unsigned int v8 = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a3);
  int v3 = ot::Ip4::Cidr::HostMask(a2);
  uint64_t result = v8;
  *(_DWORD *)this  = v6 | v8 & v3;
  return result;
}

uint64_t ot::Ip4::Cidr::SubnetMask(ot::Ip4::Cidr *this)
{
  return ~ot::Ip4::Cidr::HostMask(this);
}

{
  return ot::Ip4::Cidr::SubnetMask(this);
}

uint64_t ot::Ip4::Cidr::HostMask(ot::Ip4::Cidr *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)(0xFFFFFFFFLL >> *((unsigned char *)this + 4)));
}

{
  return ot::Ip4::Cidr::HostMask(this);
}

ot::StringWriter *ot::Ip4::Address::ToString(ot::Ip4::Address *this, ot::StringWriter *a2)
{
  return ot::StringWriter::Append(a2, "%d.%d.%d.%d", *(unsigned __int8 *)this, *((unsigned __int8 *)this + 1), *((unsigned __int8 *)this + 2), *((unsigned __int8 *)this + 3));
}

ot::StringWriter *ot::Ip4::Address::ToString(ot::Ip4::Address *this, char *a2, __int16 a3)
{
  unsigned int v8 = this;
  unsigned __int8 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip4::Address::ToString(this, (ot::StringWriter *)v5);
}

ot::StringWriter *ot::Ip4::Address::ToString@<X0>(ot::Ip4::Address *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip4::Address::ToString(this, a2);
}

uint64_t ot::Ip4::Cidr::FromString(ot::Ip4::Cidr *this, ot *a2)
{
  uint64_t v10 = this;
  char v9 = a2;
  char v8 = 47;
  __int16 v7 = 32;
  unsigned int v6 = 6;
  int v5 = 0;
  char v2 = (ot::Ip4::Address *)ot::AsCoreType<otIp4Address>((uint64_t)this);
  if (!ot::Ip4::Address::FromString(v2, (const char *)v9, (unsigned __int8 *)0x2F))
  {
    int v5 = ot::StringFind(v9, (const char *)0x2F);
    if (v5)
    {
      int v5 = (ot *)((char *)v5 + 1);
      if (!ot::StringParseUint8((ot *)&v5, (const char **)((char *)this + 4), (unsigned __int8 *)0x20)
        && !*(unsigned char *)v5)
      {
        return 0;
      }
    }
  }
  return v6;
}

ot::StringWriter *ot::Ip4::Cidr::ToString(ot::Ip4::Cidr *this, ot::StringWriter *a2)
{
  char v2 = (ot::Ip4::Address *)ot::AsCoreType<otIp4Address>((uint64_t)this);
  ot::Ip4::Address::ToString(v2, (ot::StringWriter *)v7);
  int v3 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v7);
  return ot::StringWriter::Append(a2, "%s/%d", v3, *((unsigned __int8 *)this + 4));
}

ot::StringWriter *ot::Ip4::Cidr::ToString(ot::Ip4::Cidr *this, char *a2, __int16 a3)
{
  char v8 = this;
  __int16 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip4::Cidr::ToString(this, (ot::StringWriter *)v5);
}

ot::StringWriter *ot::Ip4::Cidr::ToString@<X0>(ot::Ip4::Cidr *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip4::Cidr::ToString(this, a2);
}

uint64_t ot::String<(unsigned short)20>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 20);
  return a1;
}

BOOL ot::Ip4::Cidr::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v7 = 0;
  if (a1[4] == a2[4])
  {
    ot::Ip4::Cidr::GetBytes((ot::Ip4::Cidr *)a1);
    int v5 = v2;
    ot::Ip4::Cidr::GetBytes((ot::Ip4::Cidr *)a2);
    return a1[4] <= (int)ot::Ip6::Prefix::MatchLength(v5, v3, (const unsigned __int8 *)4);
  }
  return v7;
}

uint64_t ot::Ip4::Cidr::Set(uint64_t this, const unsigned __int8 *a2, char a3)
{
  *(_DWORD *)this  = *(_DWORD *)a2;
  *(unsigned char *)(this + ++*(_WORD *)(this + 4) = a3;
  return this;
}

uint64_t ot::Ip4::Header::ParseFrom(ot::Ip4::Header *this, const ot::Message *a2)
{
  unsigned int v5 = 6;
  if (!ot::Message::Read<ot::Ip4::Header>(a2, 0, (char *)this) && ot::Ip4::Header::IsValid(this))
  {
    Totalunsigned __int8 Length = (unsigned __int16)ot::Ip4::Header::GetTotalLength(this);
    if (TotalLength == (unsigned __int16)ot::Message::GetLength(a2)) {
      return 0;
    }
  }
  return v5;
}

uint64_t ot::Message::Read<ot::Ip4::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x14u);
}

{
  return ot::Message::Read<ot::Ip4::Header>(a1, a2, a3);
}

BOOL ot::Ip4::Header::IsValid(ot::Ip4::Header *this)
{
  return ot::Ip4::Header::IsVersion4(this);
}

{
  return ot::Ip4::Header::IsValid(this);
}

uint64_t ot::Ip4::Header::GetTotalLength(ot::Ip4::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::Ip4::Header::GetTotalLength(this);
}

BOOL ot::Ip4::Header::IsVersion4(ot::Ip4::Header *this)
{
  return (*(unsigned char *)this & 0xF0) == 64;
}

{
  return ot::Ip4::Header::IsVersion4(this);
}

uint64_t ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::MeshCoP::DatasetManager *this, ot::Message *a2)
{
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v6);
  ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v6);
  IgnoreError();
  char Type = ot::MeshCoP::DatasetManager::GetType(this);
  return ot::MeshCoP::Dataset::AppendMleDatasetTlv((uint64_t)v6, Type, a2);
}

uint64_t ot::MeshCoP::DatasetManager::HandleSet(ot::MeshCoP::DatasetManager *this, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  v78  = this;
  v77  = a2;
  v76  = a3;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  v73  = 0;
  v72  = 0;
  v71  = 0;
  v70  = 0;
  v69  = -1;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v83);
  v66  = 0;
  v65  = 0;
  int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v3))
  {
    while (Offset < (int)(unsigned __int16)ot::Message::GetLength(v77))
    {
      if (ot::Message::Read<ot::MeshCoP::Tlv>(v77, Offset, v75)
        || ot::Tlv::GetLength((ot::Tlv *)v75) > 0x10u)
      {
        goto LABEL_62;
      }
      Offset += ot::Tlv::GetLength((ot::Tlv *)v75) + 2;
    }
    if (Offset - (unsigned __int16)ot::Message::GetOffset(v77) <= 254
      && !ot::Tlv::Find<ot::MeshCoP::ActiveTimestampTlv>(v77, (uint64_t)v68, v4, v5, v6))
    {
      if (ot::MeshCoP::DatasetManager::GetType(this) == 1)
      {
        if (ot::Tlv::Find<ot::MeshCoP::PendingTimestampTlv>(v77, (uint64_t)v64, v7, v8, v9)) {
          goto LABEL_62;
        }
        Timestamp  = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
        if ((int)ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v64, Timestamp, v11) <= 0) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v15 = ot::MeshCoP::DatasetLocal::GetTimestamp((ot::MeshCoP::DatasetManager *)((char *)this + 4));
        if ((int)ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v68, v15, v16) <= 0) {
          goto LABEL_62;
        }
      }
      if (!ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(v77, v67, v12, v13, v14))
      {
        if ((ot::MeshCoP::ChannelTlv::IsValid((ot::MeshCoP::ChannelTlv *)v67) & 1) == 0) {
          goto LABEL_62;
        }
        int Channel = (unsigned __int16)ot::MeshCoP::ChannelTlv::GetChannel((ot::MeshCoP::ChannelTlv *)v67);
        uint64_t v19 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        if (Channel != ot::Mac::Mac::GetPanChannel(v19)) {
          v72  = 1;
        }
      }
      if (!ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(v77, &v65, v17, v18))
      {
        v56  = v65;
        uint64_t v23 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        if (v56 != (unsigned __int16)ot::Mac::Mac::GetPanId(v23)) {
          v72  = 1;
        }
      }
      if (!ot::Tlv::Find<ot::MeshCoP::MeshLocalPrefixTlv>(v77, (uint64_t)v82, v20, v21, v22))
      {
        char v27 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::Mle::GetMeshLocalPrefix(v27);
        if (ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(v82, v28)) {
          v72  = 1;
        }
      }
      if (!ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>(v77, (uint64_t)v81, v24, v25, v26))
      {
        v70  = 1;
        uint64_t v29 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::GetNetworkKey(v29, &v80);
        if (ot::Unequatable<ot::NetworkKey>::operator!=(v81, &v80))
        {
          v72  = 1;
          v71  = 1;
        }
      }
      if (ot::MeshCoP::DatasetManager::GetType(this) != 1
        || (v70 & 1) != 0 && (v71 & 1) != 0
        || (char v32 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this),
            v63  = (ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v32),
            (int)ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v68, v63, v33) > 0))
      {
        if (ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v77, &v66, v30, v31)
          || (v73  = 1,
              uint64_t v34 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
              ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v34, 0xBu),
              ot::As<ot::MeshCoP::CommissionerSessionIdTlv>(),
              (v62  = v35) != 0)
          && (unsigned __int16 v36 = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v62), v66 == v36))
        {
          if ((v73 & 1) == 0 || ot::MeshCoP::DatasetManager::GetType(this) == 1 || (v72 & 1) == 0)
          {
            if (v73)
            {
              uint64_t active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
              ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset *)v83);
              IgnoreError();
            }
            if ot::MeshCoP::DatasetManager::GetType(this) != 1 && (v72)
            {
              uint64_t v44 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(v44, (const ot::MeshCoP::Timestamp *)v68, v77);
              goto LABEL_58;
            }
            for (unsigned __int16 Offset = ot::Message::GetOffset(v77); ; Offset += Size)
            {
              v55  = Offset;
              if (v55 >= (unsigned __int16)ot::Message::GetLength(v77)) {
                break;
              }
              if (ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage((ot::MeshCoP::DatasetManager::DatasetTlv *)v79, v77, Offset))goto LABEL_62; {
              int Type = ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v79);
              }
              if (Type != 11)
              {
                if (Type == 52)
                {
                  ot::As<ot::MeshCoP::DelayTimerTlv>();
                  v61  = v38;
                  if ((v71 & 1) != 0 && ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v61) < 0x493E0)
                  {
                    ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v61, 0x493E0u);
                  }
                  else
                  {
                    DelayTimer  = ot::MeshCoP::DelayTimerTlv::GetDelayTimer(v61);
                    unsigned __int16 v39 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
                    if (DelayTimer < ot::MeshCoP::Leader::GetDelayTimerMinimal(v39))
                    {
                      uint64_t v40 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
                      unsigned int DelayTimerMinimal = ot::MeshCoP::Leader::GetDelayTimerMinimal(v40);
                      ot::MeshCoP::DelayTimerTlv::SetDelayTimer(v61, DelayTimerMinimal);
                    }
                  }
                }
                if (ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v83, (const ot::MeshCoP::Tlv *)v79))goto LABEL_62; {
              }
                }
              Size  = ot::Tlv::GetSize((ot::Tlv *)v79);
            }
            if (!ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v83))
            {
              uint64_t v43 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
              ot::NetworkData::Leader::IncrementVersionAndStableVersion(v43);
LABEL_58:
              v69  = 1;
              if ((v73 & 1) == 0)
              {
                uint64_t v45 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
                ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v45, 0xBu);
                ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
                v60  = v46;
                if (v46)
                {
                  v52  = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                  Commissionerunsigned __int16 SessionId = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v60);
                  if (!ot::Mle::Mle::GetCommissionerAloc(v52, (ot::Ip6::Address *)&v59, CommissionerSessionId))
                  {
                    v48  = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
                    ot::MeshCoP::Leader::SendDatasetChanged(v48, &v59);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_62:
  uint64_t v49 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v49)) {
    ot::MeshCoP::DatasetManager::SendSetResponse(this, v77, v76, v69);
  }
  if (v69 == 1) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t ot::Tlv::Find<ot::MeshCoP::ActiveTimestampTlv>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xE, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::MeshCoP::ActiveTimestampTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::PendingTimestampTlv>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x33, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::MeshCoP::PendingTimestampTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(a1, a2, a3, a4, a5);
}

{
  return ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 1u, a2, a4);
}

{
  return ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::MeshLocalPrefixTlv>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)7, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::MeshCoP::MeshLocalPrefixTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)5, a2, (void *)0x10, a5);
}

{
  return ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::MeshCoP::DatasetManager::DatasetTlv *this, const ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v7 = ot::Message::Read(a2, a3, (char *)this, 2u);
  if (!v7)
  {
    if (ot::Tlv::GetLength(this) <= 0x10u)
    {
      unsigned __int8 Length = ot::Tlv::GetLength(this);
      unsigned int v7 = ot::Message::Read(a2, a3 + 2, (char *)this + 2, Length);
      if (!v7 && (ot::MeshCoP::Tlv::IsValid(this, v4) & 1) == 0) {
        return 6;
      }
    }
    else
    {
      return 6;
    }
  }
  return v7;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::Leader>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(a1);
}

void ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::PendingDatasetManager *this, const ot::MeshCoP::Timestamp *a2, ot::Coap::Message *a3)
{
  uint64_t v10 = this;
  char v9 = a2;
  uint64_t v8 = a3;
  unsigned __int16 Offset = ot::Message::GetOffset(a3);
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v12);
  int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsAttached(v3))
  {
    while (Offset < (int)(unsigned __int16)ot::Message::GetLength(v8))
    {
      if (ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage((ot::MeshCoP::DatasetManager::DatasetTlv *)v11, v8, Offset))return; {
      Offset += ot::Tlv::GetSize((ot::Tlv *)v11);
      }
      ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v12, (const ot::MeshCoP::Tlv *)v11);
      IgnoreError();
    }
    uint64_t v4 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
    unsigned int DelayTimerMinimal = ot::MeshCoP::Leader::GetDelayTimerMinimal(v4);
    ot::MeshCoP::Dataset::SetTlv<unsigned int>((uint64_t)v12, 0x34u, &DelayTimerMinimal);
    IgnoreError();
    ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v12, 1, v9);
    ot::MeshCoP::DatasetManager::Save(this, (const ot::MeshCoP::Dataset *)v12);
    IgnoreError();
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(this);
  }
}

void ot::MeshCoP::DatasetManager::SendSetResponse(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v13 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v13)
  {
    int v14 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(v13, a4);
    if (!v14)
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v14 = ot::Coap::CoapBase::SendMessage(v5, v13, a3);
      if (!v14) {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "sent dataset set response", v6, v7, v8, v9, v10, v11, (char)a1);
      }
    }
  }
  else
  {
    int v14 = 3;
  }
  if (v14)
  {
    if (v13) {
      ot::Message::Free(v13);
    }
  }
}

uint64_t ot::MeshCoP::ActiveDatasetManager::GenerateLocal(ot::MeshCoP::ActiveDatasetManager *this)
{
  v52  = this;
  Randounsigned __int16 m = 0;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v55);
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsAttached(v1))
  {
    if (ot::MeshCoP::DatasetLocal::IsTimestampPresent((ot::MeshCoP::ActiveDatasetManager *)((char *)this + 4)))
    {
      return 24;
    }
    else
    {
      ot::MeshCoP::DatasetManager::Read(this, (ot::MeshCoP::Dataset *)v55);
      IgnoreError();
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>((uint64_t)v55);
      if (!v2)
      {
        ot::Clearable<ot::MeshCoP::Timestamp>::Clear(&v50);
        ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::Timestamp>((uint64_t)v55, 0xEu, &v50);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelTlv>((uint64_t)v55);
      if (!v3)
      {
        ot::MeshCoP::ChannelTlv::Init((ot::MeshCoP::ChannelTlv *)v49);
        uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        Panint Channel = ot::Mac::Mac::GetPanChannel(v4);
        ot::MeshCoP::ChannelTlv::SetChannel((ot::MeshCoP::ChannelTlv *)v49, PanChannel);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v49);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>((uint64_t)v55);
      if (!v6)
      {
        ot::MeshCoP::WakeupChannelTlv::Init((ot::MeshCoP::WakeupChannelTlv *)v48);
        uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        Worint Channel = ot::Mac::Mac::GetWorChannel(v7);
        ot::MeshCoP::WakeupChannelTlv::SetChannel((ot::MeshCoP::WakeupChannelTlv *)v48, WorChannel);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v48);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>((uint64_t)v55);
      if (!v9)
      {
        ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v47);
        uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        int SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v10);
        Masunsigned __int16 k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
        ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v47, Mask);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v47);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ExtendedPanIdTlv>((uint64_t)v55);
      if (!v13)
      {
        int v14 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
        ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v14);
        ot::MeshCoP::Dataset::SetTlv<ot::MeshCoP::ExtendedPanId>((uint64_t)v55, 2u, v15);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::MeshLocalPrefixTlv>((uint64_t)v55);
      if (!v16)
      {
        uint64_t v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::Mle::GetMeshLocalPrefix(v17);
        ot::MeshCoP::Dataset::SetTlv<ot::Ip6::NetworkPrefix>((uint64_t)v55, 7u, v18);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkKeyTlv>((uint64_t)v55);
      if (!v19)
      {
        uint64_t v20 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::GetNetworkKey(v20, &v54);
        ot::MeshCoP::Dataset::SetTlv<ot::NetworkKey>((uint64_t)v55, 5u, &v54);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkNameTlv>((uint64_t)v55);
      if (!v21)
      {
        uint64_t v22 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
        ot::MeshCoP::NetworkNameManager::GetNetworkName(v22);
        v46[0]  = ot::MeshCoP::NetworkName::GetAsData(v23);
        v46[1]  = v24;
        Buffer  = (const void *)ot::MeshCoP::NameData::GetBuffer((ot::MeshCoP::NameData *)v46);
        unsigned __int8 Length = ot::MeshCoP::NameData::GetLength((ot::MeshCoP::NameData *)v46);
        ot::MeshCoP::Dataset::SetTlv((uint64_t)v55, 3u, Buffer, Length);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PanIdTlv>((uint64_t)v55);
      if (!v26)
      {
        char v27 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v27);
        ot::MeshCoP::Dataset::SetTlv<unsigned short>((uint64_t)v55, 1u, &PanId);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>((uint64_t)v55);
      if (!v28)
      {
        uint64_t v29 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        if (ot::KeyManager::IsPskcSet(v29))
        {
          uint64_t v30 = ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          ot::KeyManager::GetPskc(v30, &v53);
        }
        else
        {
          Randounsigned __int16 m = ot::Pskc::GenerateRandom((ot::Pskc *)&v53);
          if (Random) {
            return Random;
          }
        }
        ot::MeshCoP::Dataset::SetTlv<ot::Pskc>((uint64_t)v55, 4u, &v53);
        IgnoreError();
      }
      ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>((uint64_t)v55);
      if (!v31)
      {
        ot::MeshCoP::SecurityPolicyTlv::Init((ot::MeshCoP::SecurityPolicyTlv *)v44);
        char v32 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        SecurityPolicy  = (const ot::SecurityPolicy *)ot::KeyManager::GetSecurityPolicy(v32);
        ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy((ot::MeshCoP::SecurityPolicyTlv *)v44, SecurityPolicy);
        ot::MeshCoP::Dataset::SetTlv((ot::MeshCoP::Dataset *)v55, (const ot::MeshCoP::Tlv *)v44);
        IgnoreError();
      }
      Randounsigned __int16 m = ot::MeshCoP::DatasetLocal::Save((ot::MeshCoP::ActiveDatasetManager *)((char *)this + 4), (const ot::MeshCoP::Dataset *)v55);
      if (!Random)
      {
        ot::MeshCoP::DatasetManager::Restore(this);
        IgnoreError();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DatasetManager", "Generated local dataset", v34, v35, v36, v37, v38, v39, v41);
      }
    }
  }
  else
  {
    return 13;
  }
  return Random;
}

uint64_t ot::MeshCoP::DatasetLocal::IsTimestampPresent(ot::MeshCoP::DatasetLocal *this)
{
  return *((unsigned char *)this + 13) & 1;
}

{
  return ot::MeshCoP::DatasetLocal::IsTimestampPresent(this);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::WakeupChannelTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ExtendedPanIdTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ExtendedPanIdTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::MeshLocalPrefixTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::MeshLocalPrefixTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkKeyTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkKeyTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkNameTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::NetworkNameTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PanIdTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PanIdTlv>(a1);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>(a1);
}

uint64_t ot::KeyManager::IsPskcSet(ot::KeyManager *this)
{
  return *((unsigned char *)this + 144) & 1;
}

{
  return ot::KeyManager::IsPskcSet(this);
}

void ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>(uint64_t a1)
{
}

{
  ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>(a1);
}

void ot::MeshCoP::ActiveDatasetManager::StartLeader(ot::MeshCoP::ActiveDatasetManager *this)
{
}

void ot::MeshCoP::ActiveDatasetManager::HandleTmf<(ot::Uri)12>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && !ot::MeshCoP::DatasetManager::HandleSet(a1, a2, a3))
  {
    ot::MeshCoP::DatasetManager::ApplyConfiguration(a1);
    IgnoreError();
  }
}

void ot::MeshCoP::PendingDatasetManager::StartLeader(ot::MeshCoP::PendingDatasetManager *this)
{
}

void ot::MeshCoP::PendingDatasetManager::HandleTmf<(ot::Uri)27>(ot::InstanceLocator *a1, ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && !ot::MeshCoP::DatasetManager::HandleSet(a1, a2, a3)) {
    ot::MeshCoP::PendingDatasetManager::StartDelayTimer(a1);
  }
}

uint64_t ot::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, 0, 5u, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::MeshCoP::ChannelTlv>(a1, a2, a3, a4, a5);
}

ot::MeshCoP::DatasetUpdater *ot::MeshCoP::DatasetUpdater::DatasetUpdater(ot::MeshCoP::DatasetUpdater *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(this);
  ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::TimerMilliIn((ot::MeshCoP::DatasetUpdater *)((char *)this + 16), a2);
  uint64_t result = this;
  *((void *)this + 5)  = 0;
  return result;
}

{
  ot::MeshCoP::DatasetUpdater::DatasetUpdater(this, a2);
  return this;
}

uint64_t ot::MeshCoP::DatasetUpdater::HandleTimer(ot::Message **this)
{
  return ot::MeshCoP::DatasetUpdater::PreparePendingDataset(this);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::MeshCoP::DatasetUpdater::RequestUpdate(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
  if (ot::Mle::Mle::IsDisabled(v4))
  {
    unsigned int v9 = 13;
  }
  else if (a1[5])
  {
    unsigned int v9 = 5;
  }
  else if ((ot::MeshCoP::Dataset::Info::IsActiveTimestampPresent((ot::MeshCoP::Dataset::Info *)a2) & 1) != 0 {
         || (ot::MeshCoP::Dataset::Info::IsPendingTimestampPresent((ot::MeshCoP::Dataset::Info *)a2) & 1) != 0)
  }
  {
    unsigned int v9 = 7;
  }
  else
  {
    uint64_t v5 = (ot::Message::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>((ot::InstanceLocator *)a1);
    uint64_t v8 = ot::MessagePool::Allocate(v5, 5);
    if (v8)
    {
      unsigned int v9 = ot::Message::Append<ot::MeshCoP::Dataset::Info>(v8, a2);
      if (!v9)
      {
        ot::CallbackBase<void (*)(otError,void *)>::Set(a1, a3, a4);
        a1[5]  = v8;
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 2), 1u);
      }
    }
    else
    {
      unsigned int v9 = 3;
    }
  }
  if (v9 && v8) {
    ot::Message::Free(v8);
  }
  return v9;
}

uint64_t ot::Message::Append<ot::MeshCoP::Dataset::Info>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x80u);
}

{
  return ot::Message::Append<ot::MeshCoP::Dataset::Info>(a1, a2);
}

uint64_t ot::MeshCoP::DatasetUpdater::CancelUpdate(uint64_t this)
{
  uint64_t v1 = this;
  if (*(void *)(this + 40))
  {
    ot::Message::Free(*(ot::Message **)(this + 40));
    *(void *)(v1 + 4ot::MeshCoP::Tlv::SetType(this, 0) = 0;
    return ot::TimerMilli::Stop((ot::TimerMilli *)(v1 + 16));
  }
  return this;
}

uint64_t ot::MeshCoP::DatasetUpdater::PreparePendingDataset(ot::Message **this)
{
  uint64_t v13 = this;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v15);
  unsigned int v12 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)this);
  uint64_t result = ot::Mle::Mle::IsDisabled(v1);
  if (result)
  {
    unsigned int v12 = 13;
  }
  else
  {
    ot::Message::Read<ot::MeshCoP::Dataset::Info>(this[5], 0, v14);
    IgnoreError();
    uint64_t active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)this);
    unsigned int v12 = ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset *)v15);
    if (v12)
    {
      uint64_t result = ot::TimerMilli::Start((ot::TimerMilli *)(this + 2), 0x3E8u);
      unsigned int v12 = 0;
    }
    else
    {
      ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v15, (const ot::MeshCoP::Dataset::Info *)v14);
      IgnoreError();
      if ((ot::MeshCoP::Dataset::Info::IsDelayPresent((ot::MeshCoP::Dataset::Info *)v14) & 1) != 0
        || (unsigned int v11 = 30000,
            uint64_t result = ot::MeshCoP::Dataset::SetTlv<unsigned int>((uint64_t)v15, 0x34u, &v11),
            (unsigned int v12 = result) == 0))
      {
        uint64_t v4 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)this);
        if (ot::MeshCoP::DatasetManager::GetTimestamp(v4))
        {
          uint64_t v5 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)this);
          uint64_t v10 = *(void *)ot::MeshCoP::DatasetManager::GetTimestamp(v5);
        }
        ot::MeshCoP::Timestamp::AdvanceRandomTicks((ot::MeshCoP::Timestamp *)&v10);
        ot::MeshCoP::Dataset::SetTimestamp((uint64_t)v15, 1, &v10);
        ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>((uint64_t)v15);
        Timestamp  = (ot::MeshCoP::Timestamp *)ot::MeshCoP::ActiveTimestampTlv::GetTimestamp(v6);
        ot::MeshCoP::Timestamp::AdvanceRandomTicks(Timestamp);
        uint64_t v8 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)this);
        uint64_t result = ot::MeshCoP::PendingDatasetManager::Save(v8, (const ot::MeshCoP::Dataset *)v15);
        unsigned int v12 = result;
      }
    }
  }
  if (v12) {
    return (uint64_t)ot::MeshCoP::DatasetUpdater::Finish((uint64_t)this, v12);
  }
  return result;
}

uint64_t ot::Message::Read<ot::MeshCoP::Dataset::Info>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x80u);
}

{
  return ot::Message::Read<ot::MeshCoP::Dataset::Info>(a1, a2, a3);
}

void *ot::MeshCoP::DatasetUpdater::Finish(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = a1;
  unsigned int v4 = a2;
  if (!*(void *)(a1 + 40)) {
    __assert_rtn("Finish", "dataset_updater.cpp", 158, "mDataset != nullptr");
  }
  ot::Message::Free(*(ot::Message **)(a1 + 40));
  *(void *)(a1 + 4ot::MeshCoP::Tlv::SetType(this, 0) = 0;
  return ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>((void *)a1, &v4);
}

void *ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>(void *result, unsigned int *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::Invoke<otError&>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>(result, a2);
}

uint64_t ot::MeshCoP::DatasetUpdater::HandleNotifierEvents(uint64_t result, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v8 = result;
  uint64_t v5 = (ot::Message **)result;
  if (*(void *)(result + 40))
  {
    uint64_t result = ot::Events::ContainsAny((ot::Events *)&v9, 805306368);
    if (result)
    {
      ot::Message::Read<ot::MeshCoP::Dataset::Info>(v5[5], 0, v11);
      IgnoreError();
      if (ot::Events::Contains(&v9, 0x10000000))
      {
        uint64_t active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)v5);
        if (!ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset::Info *)v10))
        {
          if (ot::MeshCoP::Dataset::Info::IsSubsetOf((ot::MeshCoP::Dataset::Info *)v11, (const ot::MeshCoP::Dataset::Info *)v10))
          {
            ot::MeshCoP::DatasetUpdater::Finish((uint64_t)v5, 0);
          }
          else
          {
            ot::MeshCoP::Dataset::Info::GetActiveTimestamp((ot::MeshCoP::Dataset::Info *)v11, (ot::MeshCoP::Timestamp *)v7);
            ot::MeshCoP::Dataset::Info::GetActiveTimestamp((ot::MeshCoP::Dataset::Info *)v10, (ot::MeshCoP::Timestamp *)v6);
            if ((int)ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v7, (const ot::MeshCoP::Timestamp *)v6, v3) <= 0)ot::MeshCoP::DatasetUpdater::Finish((uint64_t)v5, 0x18u); {
          }
            }
        }
      }
      uint64_t result = ot::Events::Contains(&v9, 0x20000000);
      if (result)
      {
        unsigned int v4 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)v5);
        uint64_t result = ot::MeshCoP::DatasetManager::Read(v4, (ot::MeshCoP::Dataset::Info *)v10);
        if (!result)
        {
          uint64_t result = ot::MeshCoP::Dataset::Info::IsSubsetOf((ot::MeshCoP::Dataset::Info *)v11, (const ot::MeshCoP::Dataset::Info *)v10);
          if ((result & 1) == 0) {
            return (uint64_t)ot::MeshCoP::DatasetUpdater::Finish((uint64_t)v5, 0x18u);
          }
        }
      }
    }
  }
  return result;
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::DatasetUpdater,&ot::MeshCoP::DatasetUpdater::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Message **)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(a1);
  return ot::MeshCoP::DatasetUpdater::HandleTimer(v2);
}

ot::MeshCoP::Dtls *ot::MeshCoP::Dtls::Dtls(ot::MeshCoP::Dtls *this, ot::Instance *a2, char a3)
{
  char v5 = a3 & 1;
  ot::InstanceLocator::InstanceLocator();
  *(unsigned char *)this  = 0;
  *((unsigned char *)this + 4++*(_WORD *)(this + 4) = 0;
  *((unsigned char *)this + 45)  = 1;
  ot::TimerMilliContext::TimerMilliContext((ot::MeshCoP::Dtls *)((char *)this + 656), a2, (void (*)(ot::Timer *))ot::MeshCoP::Dtls::HandleTimer, this);
  ot::Time::Time((ot::MeshCoP::Dtls *)((char *)this + 688), 0);
  *((unsigned char *)this + 692) &= ~1u;
  *((unsigned char *)this + 69ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)this + 692) & 0xFD | (2 * (v5 & 1));
  *((void *)this + 87)  = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 88);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 90);
  ot::Ip6::MessageInfo::MessageInfo((ot::MeshCoP::Dtls *)((char *)this + 736));
  ot::Ip6::Udp::Socket::Socket((ot::MeshCoP::Dtls *)((char *)this + 792), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 108);
  *((unsigned char *)this + 88ot::MeshCoP::Tlv::SetType(this, 0) = 0;
  *((unsigned char *)this + 881)  = 0;
  *(void *)((char *)this + ++*(_WORD *)(this + 4) = 0;
  *(_OWORD *)((char *)this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 2ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0u;
  bzero((char *)this + 48, 0x190uLL);
  memset((char *)this + 448, 0, 0xA8uLL);
  memset((char *)this + 616, 0, 0x28uLL);
  return this;
}

{
  ot::MeshCoP::Dtls::Dtls(this, a2, a3 & 1);
  return this;
}

void **ot::MeshCoP::Dtls::HandleTimer(ot::MeshCoP::Dtls *this, ot::Timer *a2)
{
  Context  = (void **)ot::TimerMilliContext::GetContext(this);
  return ot::MeshCoP::Dtls::HandleTimer(Context);
}

void **ot::MeshCoP::Dtls::FreeMbedtls(void **this)
{
  return mbedtls_ssl_free(this + 6);
}

uint64_t ot::MeshCoP::Dtls::Open(ot::MeshCoP::Dtls *this, void (*a2)(void *, unsigned __int8 *, unsigned __int16), void (*a3)(void *, BOOL), uint64_t a4)
{
  if (*(unsigned char *)this)
  {
    return 24;
  }
  else
  {
    unsigned int v6 = ot::Ip6::Udp::Socket::Open((ot::MeshCoP::Dtls *)((char *)this + 792), (uint64_t)ot::MeshCoP::Dtls::HandleUdpReceive, (uint64_t)this);
    if (!v6)
    {
      ot::CallbackBase<void (*)(void *,BOOL)>::Set((void *)this + 88, (uint64_t)a3, a4);
      ot::CallbackBase<void (*)(void *,unsigned char *,unsigned short)>::Set((void *)this + 90, (uint64_t)a2, a4);
      *(unsigned char *)this  = 1;
    }
  }
  return v6;
}

uint64_t ot::MeshCoP::Dtls::HandleUdpReceive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  uint64_t v3 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  return ot::MeshCoP::Dtls::HandleUdpReceive(a1, v5, v3);
}

void *ot::CallbackBase<void (*)(void *,BOOL)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,BOOL)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(void *,unsigned char *,unsigned short)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,unsigned char *,unsigned short)>::Set(result, a2, a3);
}

uint64_t ot::MeshCoP::Dtls::Connect(__n128 *this, const ot::Ip6::SockAddr *a2)
{
  if (this->n128_u8[0] == 1)
  {
    Address  = (__n128 *)ot::Ip6::SockAddr::GetAddress(a2);
    ot::Ip6::MessageInfo::SetPeerAddr(this + 46, Address);
    ot::Ip6::MessageInfo::SetPeerPort((uint64_t)&this[46], *((_WORD *)a2 + 8));
    return ot::MeshCoP::Dtls::Setup((ot::MeshCoP::Dtls *)this, 1);
  }
  else
  {
    return 13;
  }
}

uint64_t ot::Ip6::SockAddr::GetAddress(ot::Ip6::SockAddr *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::Ip6::SockAddr::GetAddress(this);
}

{
  return ot::Ip6::SockAddr::GetAddress(this);
}

uint64_t ot::MeshCoP::Dtls::Setup(ot::MeshCoP::Dtls *this, char a2)
{
  char v12 = a2 & 1;
  if (*(unsigned char *)this == 1)
  {
    *(unsigned char *)this  = 2;
    mbedtls_ssl_init();
    mbedtls_ssl_config_init();
    mbedtls_ssl_cookie_init((uint64_t)this + 616);
    unsigned int v11 = mbedtls_ssl_config_defaults((uint64_t)this + 448, (v12 & 1) == 0, 1, 0);
    if (!v11)
    {
      mbedtls_ssl_conf_rng((uint64_t)this + 448, (uint64_t)ot::Crypto::MbedTls::CryptoSecurePrng, 0);
      mbedtls_ssl_conf_min_version((uint64_t)this + 448, 3, 3);
      mbedtls_ssl_conf_max_version((unsigned char *)this + 448, 3, 3);
      if (*((_DWORD *)this + 2)) {
        __assert_rtn("Setup", "dtls.cpp", 288, "mCipherSuites[1] == 0");
      }
      mbedtls_ssl_conf_ciphersuites((void *)this + 56, (uint64_t)this + 4);
      if (*((_DWORD *)this + 1) == 49407) {
        mbedtls_ssl_conf_curves((uint64_t)this + 448, (uint64_t)&ot::MeshCoP::Dtls::sCurves);
      }
      mbedtls_ssl_conf_export_keys_cb((uint64_t)this + 448, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsExportKeys, (uint64_t)this);
      mbedtls_ssl_conf_handshake_timeout((uint64_t)this + 448, 8000, 60000);
      mbedtls_ssl_conf_dbg((uint64_t)this + 448, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsDebug, (uint64_t)this);
      if ((v12 & 1) == 0)
      {
        unsigned int v11 = mbedtls_ssl_cookie_setup((uint64_t)this + 616, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))ot::Crypto::MbedTls::CryptoSecurePrng, 0);
        if (v11) {
          goto LABEL_18;
        }
        mbedtls_ssl_conf_dtls_cookies((void *)this + 56, (uint64_t)mbedtls_ssl_cookie_write, (uint64_t)mbedtls_ssl_cookie_check, (uint64_t)this + 616);
      }
      unsigned int v11 = mbedtls_ssl_setup((void *)this + 6, (uint64_t)this + 448);
      if (!v11)
      {
        mbedtls_ssl_set_bio((void *)this + 6, (uint64_t)this, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsTransmit, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsReceive, 0);
        mbedtls_ssl_set_timer_cb((void *)this + 6, (uint64_t)this, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsSetTimer, (uint64_t)ot::MeshCoP::Dtls::HandleMbedtlsGetTimer);
        if (*((_DWORD *)this + 1) == 49407) {
          unsigned int v11 = mbedtls_ssl_set_hs_ecjpake_password((void *)this + 6, (uint64_t)this + 12, *((unsigned __int8 *)this + 44));
        }
        if (!v11)
        {
          *((void *)this + 87)  = 0;
          *((unsigned char *)this + 88ot::MeshCoP::Tlv::SetType(this, 0) = 0;
          *(unsigned char *)this  = 3;
          if (*((_DWORD *)this + 1) == 49407) {
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Dtls", "DTLS started", v2, v3, v4, v5, v6, v7, v9);
          }
          *(unsigned char *)this  = 3;
          ot::MeshCoP::Dtls::Process((void **)this);
        }
      }
    }
  }
  else
  {
    unsigned int v11 = -26624;
  }
LABEL_18:
  if (*(unsigned char *)this == 2 && v11)
  {
    *(unsigned char *)this  = 1;
    ot::MeshCoP::Dtls::FreeMbedtls((void **)this);
  }
  return ot::Crypto::MbedTls::MapError((ot::Crypto::MbedTls *)v11);
}

uint64_t ot::MeshCoP::Dtls::HandleUdpReceive(uint64_t this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v12 = (__n128 *)this;
  if (*(unsigned char *)this)
  {
    if (*(unsigned char *)this == 1)
    {
      PeerAddr  = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
      ot::Ip6::MessageInfo::SetPeerAddr(v12 + 46, PeerAddr);
      PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(a3);
      ot::Ip6::MessageInfo::SetPeerPort((uint64_t)&v12[46], PeerPort);
      IsHostInterface  = ot::Ip6::MessageInfo::IsHostInterface(a3);
      ot::Ip6::MessageInfo::SetIsHostInterface((uint64_t)&v12[46], IsHostInterface & 1);
      SockAddr  = (__n128 *)ot::Ip6::MessageInfo::GetSockAddr(a3);
      ot::Ip6::MessageInfo::SetSockAddr(v12 + 46, SockAddr);
      SockPort  = ot::Ip6::MessageInfo::GetSockPort(a3);
      ot::Ip6::MessageInfo::SetSockPort((uint64_t)&v12[46], SockPort);
      this  = ot::MeshCoP::Dtls::Setup((ot::MeshCoP::Dtls *)v12, 0);
      if (this) {
        return this;
      }
    }
    else
    {
      unsigned int v11 = (const void *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)(this + 736));
      uint64_t v8 = (const void *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
      this  = ot::Equatable<ot::Ip6::Address>::operator==(v11, v8);
      if ((this & 1) == 0) {
        return this;
      }
      int v10 = (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort((ot::Ip6::MessageInfo *)&v12[46]);
      this  = ot::Ip6::MessageInfo::GetPeerPort(a3);
      if (v10 != (unsigned __int16)this) {
        return this;
      }
    }
    if (v12->n128_u8[0] == 3)
    {
      char v9 = (const unsigned __int8 *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)&v12[46]);
      ot::MeshCoP::Dtls::SetClientId((ot::MeshCoP::Dtls *)v12, v9, 0x10u);
      IgnoreError();
    }
    return (uint64_t)ot::MeshCoP::Dtls::Receive((ot::MeshCoP::Dtls *)v12, a2);
  }
  return this;
}

uint64_t ot::MeshCoP::Dtls::SetClientId(ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned int v4 = mbedtls_ssl_set_client_transport_id((void *)this + 6, (uint64_t)a2, a3);
  return ot::Crypto::MbedTls::MapError((ot::Crypto::MbedTls *)v4);
}

void **ot::MeshCoP::Dtls::Receive(ot::MeshCoP::Dtls *this, ot::Message *a2)
{
  *((void *)this + 87)  = a2;
  uint64_t result = ot::MeshCoP::Dtls::Process((void **)this);
  *((void *)this + 87)  = 0;
  return result;
}

uint64_t ot::MeshCoP::Dtls::GetUdpPort(ot::MeshCoP::Dtls *this)
{
  SockName  = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::Dtls *)((char *)this + 792));
  return (unsigned __int16)ot::Ip6::SockAddr::GetPort(SockName);
}

uint64_t ot::Ip6::Udp::SocketHandle::GetSockName(ot::Ip6::Udp::SocketHandle *this)
{
  return ot::AsCoreType<otSockAddr>((uint64_t)this);
}

{
  return ot::AsCoreType<otSockAddr>((uint64_t)this);
}

{
  return ot::Ip6::Udp::SocketHandle::GetSockName(this);
}

{
  return ot::Ip6::Udp::SocketHandle::GetSockName(this);
}

uint64_t ot::Ip6::SockAddr::GetPort(ot::Ip6::SockAddr *this)
{
  return *((unsigned __int16 *)this + 8);
}

{
  return ot::Ip6::SockAddr::GetPort(this);
}

uint64_t ot::MeshCoP::Dtls::Bind(ot::MeshCoP::Dtls *this, __int16 a2)
{
  if (*(unsigned char *)this == 1)
  {
    if (ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet((void *)this + 108))
    {
      return 24;
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "Dtls::Bind to port=%d", v2, v3, v4, v5, v6, v7, a2);
      return ot::Ip6::Udp::Socket::Bind((ot::MeshCoP::Dtls *)((char *)this + 792), a2, 0);
    }
  }
  else
  {
    return 13;
  }
}

BOOL ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet(a1);
}

uint64_t ot::MeshCoP::Dtls::Bind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (*(unsigned char *)a1 == 1)
  {
    if (ot::Ip6::Udp::SocketHandle::IsBound((ot::Ip6::Udp::SocketHandle *)(a1 + 792)))
    {
      return 24;
    }
    else if (ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet((void *)(a1 + 864)))
    {
      return 24;
    }
    else
    {
      ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Set((void *)(a1 + 864), a2, a3);
    }
  }
  else
  {
    return 13;
  }
  return v5;
}

void *ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Set(result, a2, a3);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(this, a2, a3, (uint64_t)a4, a5, a6);
}

void ot::MeshCoP::Dtls::HandleMbedtlsDebug(ot::MeshCoP::Dtls *this, void *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsTransmit(ot::MeshCoP::Dtls *this, char *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsTransmit(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsReceive(ot::MeshCoP::Dtls *this, char *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsReceive(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(ot::MeshCoP::Dtls *this, void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(this, (int)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsGetTimer(ot::MeshCoP::Dtls *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::MeshCoP::Dtls::HandleMbedtlsGetTimer(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  BOOL IsRunning;
  char v10;
  int Now;
  int v13;
  ot::MeshCoP::Dtls *v14;

  int v14 = this;
  uint64_t v13 = 0;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "HandleMbedtlsGetTimer", a3, a4, a5, a6, a7, a8, v10);
  }
  if (*((unsigned char *)this + 692))
  {
    IsRunning  = ot::Timer::IsRunning((ot::MeshCoP::Dtls *)((char *)this + 656));
    if (IsRunning)
    {
      int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsRunning);
      return ot::Time::operator<=((int *)this + 172, &Now);
    }
    else
    {
      return 2;
    }
  }
  else
  {
    return -1;
  }
}

void **ot::MeshCoP::Dtls::Process(void **this)
{
  uint64_t v7 = this;
  uint64_t v2 = (ot::MeshCoP::Dtls *)this;
  char v6 = 0;
  int v5 = 0;
  while (1)
  {
    BOOL v1 = 1;
    if (*(unsigned char *)v2 != 3) {
      BOOL v1 = *(unsigned char *)v2 == 4;
    }
    if (!v1) {
      break;
    }
    if (*(unsigned char *)v2 == 3)
    {
      this  = (void **)mbedtls_ssl_handshake((uint64_t)v2 + 48);
      int v5 = (int)this;
      if (*((_DWORD *)v2 + 14) == 16)
      {
        *(unsigned char *)uint64_t v2 = 4;
        char v4 = 1;
        this  = (void **)ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>((void *)v2 + 88, &v4);
      }
    }
    else
    {
      this  = (void **)mbedtls_ssl_read((uint64_t)v2 + 48, (uint64_t)v8, 0x300uLL);
      int v5 = (int)this;
    }
    if (v5 <= 0)
    {
      if (v5 && v5 != -26880 && v5 != -26752)
      {
        if (v5 == -30848 || v5 == -30592)
        {
          this  = (void **)mbedtls_ssl_close_notify((uint64_t)v2 + 48);
          char v6 = 1;
          break;
        }
        if (v5 == -29056)
        {
          if (*((_DWORD *)v2 + 14) != 16)
          {
            this  = (void **)mbedtls_ssl_send_alert_message((uint64_t)v2 + 48, 2, 20);
            char v6 = 1;
            break;
          }
        }
        else if (v5 != -27264 && *((_DWORD *)v2 + 14) != 16)
        {
          this  = (void **)mbedtls_ssl_send_alert_message((uint64_t)v2 + 48, 2, 40);
          char v6 = 1;
          break;
        }
        this  = (void **)mbedtls_ssl_session_reset((uint64_t)v2 + 48);
        if (*((_DWORD *)v2 + 1) == 49407) {
          this  = (void **)mbedtls_ssl_set_hs_ecjpake_password((void *)v2 + 6, (uint64_t)v2 + 12, *((unsigned __int8 *)v2 + 44));
        }
      }
      break;
    }
    unsigned __int16 v3 = v5;
    this  = (void **)ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::InvokeIfSet<unsigned char (&)[768],unsigned short>((void *)v2 + 90, (uint64_t)v8, &v3);
  }
  if (v6) {
    return ot::MeshCoP::Dtls::Disconnect((void **)v2);
  }
  return this;
}

uint64_t ot::MeshCoP::Dtls::Close(void **this)
{
  *(unsigned char *)this  = 0;
  *((unsigned char *)this + 692) &= ~1u;
  ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Clear(this + 108);
  ot::Ip6::Udp::Socket::Close((ot::Ip6::Udp::Socket *)(this + 99));
  IgnoreError();
  return ot::TimerMilli::Stop((ot::TimerMilli *)(this + 82));
}

void **ot::MeshCoP::Dtls::Disconnect(void **this)
{
  BOOL v1 = this;
  if (*(unsigned char *)this == 3 || *(unsigned char *)this == 4)
  {
    mbedtls_ssl_close_notify((uint64_t)(this + 6));
    *(unsigned char *)BOOL v1 = 5;
    ot::TimerMilli::Start((ot::TimerMilli *)(v1 + 82), 0x7D0u);
    ot::Clearable<ot::Ip6::MessageInfo>::Clear(v1 + 92);
    ot::Ip6::Udp::Socket::Connect((ot::Ip6::Udp::Socket *)(v1 + 99));
    IgnoreError();
    return ot::MeshCoP::Dtls::FreeMbedtls(v1);
  }
  return this;
}

void *ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::Clear(result);
}

uint64_t ot::Ip6::Udp::Socket::Connect(ot::Ip6::Udp::Socket *this)
{
  return ot::Ip6::Udp::Socket::Connect(this, 0);
}

{
  return ot::Ip6::Udp::Socket::Connect(this);
}

uint64_t ot::MeshCoP::Dtls::SetPsk(ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned int v5 = 0;
  if (a3 <= 0x20uLL)
  {
    memcpy((char *)this + 12, a2, a3);
    *((unsigned char *)this + 4++*(_WORD *)(this + 4) = a3;
    *(void *)((char *)this + ++*(_WORD *)(this + 4) = 49407;
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::MeshCoP::Dtls::Send(ot::MeshCoP::Dtls *this, ot::Message *a2, unsigned __int16 a3)
{
  if (a3 <= 0x480u)
  {
    if (ot::Message::GetSubType(a2)) {
      *((unsigned char *)this + 88ot::MeshCoP::Tlv::SetType(this, 0) = ot::Message::GetSubType(a2);
    }
    ot::Message::ReadBytes(a2, 0, v9, a3);
    unsigned __int16 v3 = (ot::Crypto::MbedTls *)mbedtls_ssl_write((uint64_t)this + 48, (uint64_t)v9, a3);
    unsigned int v6 = ot::Crypto::MbedTls::MapError(v3);
    if (!v6) {
      ot::Message::Free(a2);
    }
  }
  else
  {
    return 3;
  }
  return v6;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsTransmit(ot::MeshCoP::Dtls *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v20 = a3;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "HandleMbedtlsTransmit", a3, a4, a5, a6, a7, a8, v16);
  }
  int v19 = ot::MeshCoP::Dtls::HandleDtlsSend((uint64_t)this, a2, v20, *((unsigned char *)this + 880));
  *((unsigned char *)this + 88ot::MeshCoP::Tlv::SetType(this, 0) = *((unsigned char *)this + 881);
  if (v19)
  {
    if (v19 == 3)
    {
      return -26752;
    }
    else
    {
      char v8 = ot::ErrorToString(v19);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Dtls", "HandleMbedtlsTransmit: %s error", v9, v10, v11, v12, v13, v14, v8);
      return -78;
    }
  }
  else
  {
    return v20;
  }
}

uint64_t ot::MeshCoP::Dtls::HandleDtlsSend(uint64_t a1, char *a2, unsigned __int16 a3, char a4)
{
  unsigned int v6 = ot::Ip6::Udp::Socket::NewMessage((ot::Ip6::Udp::Socket *)(a1 + 792));
  if (v6)
  {
    ot::Message::SetSubType(v6, a4);
    ot::Message::SetLinkSecurityEnabled(v6, (*(unsigned char *)(a1 + 692) & 2) != 0);
    unsigned int appended = ot::Message::AppendBytes(v6, a2, a3);
    if (!appended)
    {
      if (a4) {
        ot::Message::SetSubType(v6, a4);
      }
      if (ot::CallbackBase<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&)>::IsSet((void *)(a1 + 864))) {
        unsigned int appended = ot::Callback<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&),(ot::CallbackContextPosition)0>::Invoke<ot::Message &,ot::Ip6::MessageInfo&>(a1 + 864, (uint64_t)v6, a1 + 736);
      }
      else {
        unsigned int appended = ot::Ip6::Udp::Socket::SendTo((ot::Ip6::Udp::Socket *)(a1 + 792), v6, (const ot::Ip6::MessageInfo *)(a1 + 736));
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v6) {
    ot::Message::Free(v6);
  }
  return appended;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsReceive(ot::MeshCoP::Dtls *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16 = a3;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "HandleMbedtlsReceive", a3, a4, a5, a6, a7, a8, v10);
  }
  if (*((void *)this + 87)
    && (int Length = (unsigned __int16)ot::Message::GetLength(*((ot::Message **)this + 87)),
        int v14 = Length - (unsigned __int16)ot::Message::GetOffset(*((ot::Message **)this + 87)),
        v14 > 0))
  {
    if (v16 > v14) {
      LOWORD(v16)  = v14;
    }
    uint64_t v11 = (ot::Message *)*((void *)this + 87);
    unsigned __int16 Offset = ot::Message::GetOffset(v11);
    unsigned int Bytes = (unsigned __int16)ot::Message::ReadBytes(v11, Offset, a2, v16);
    ot::Message::MoveOffset(*((ot::Message **)this + 87), Bytes);
  }
  else
  {
    return -26880;
  }
  return Bytes;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(ot::MeshCoP::Dtls *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14 = this;
  int v13 = a2;
  unsigned int v12 = a3;
  char v10 = this;
  if (*((_DWORD *)this + 1) == 49407) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "SetTimer", a3, a4, a5, a6, a7, a8, (char)this);
  }
  if (v12)
  {
    *((unsigned char *)v10 + 69ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *((unsigned char *)v10 + 692) & 0xFE | 1;
    uint64_t v9 = (ot::TimerMilli *)ot::TimerMilli::Start((ot::MeshCoP::Dtls *)((char *)v10 + 656), v12);
    int Now = ot::TimerMilli::GetNow(v9);
    uint64_t result = ot::Time::operator+(&Now, v13);
    *((_DWORD *)v10 + 17ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  }
  else
  {
    *((unsigned char *)v10 + 692) &= ~1u;
    return ot::TimerMilli::Stop((ot::MeshCoP::Dtls *)((char *)v10 + 656));
  }
  return result;
}

uint64_t ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(ot::MeshCoP::Dtls *this, const unsigned __int8 *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  uint64_t v19 = a5;
  uint64_t v18 = a6;
  ot::Crypto::Sha256::Sha256((ot::Crypto::Sha256 *)v17);
  if (*((_DWORD *)this + 1) == 49407)
  {
    ot::Crypto::Sha256::Start((ot::Crypto::Sha256 *)v17);
    ot::Crypto::Sha256::Update((ot::Crypto::Sha256 *)v17, (uint64_t)v21, 2 * (v20 + v19 + v18));
    ot::Crypto::Sha256::Finish((ot::Crypto::Sha256 *)v17, (ot::Crypto::Sha256::Hash *)v24);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "Generated KEK", v6, v7, v8, v9, v10, v11, v14);
    uint64_t v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v24);
    ot::KeyManager::SetKek(v15, v12);
  }
  ot::Crypto::Sha256::~Sha256((ot::Crypto::Sha256 *)v17);
  return 0;
}

void ot::KeyManager::SetKek(ot::KeyManager *this, __n128 *a2)
{
}

{
  ot::Mac::KeyMaterial::SetFrom((__n128 *)((char *)this + 120), a2);
  *((_DWORD *)this + 3++*(_WORD *)(this + 4) = 0;
}

{
  ot::KeyManager::SetKek(this, a2);
}

void **ot::MeshCoP::Dtls::HandleTimer(void **this)
{
  uint64_t v6 = this;
  int v4 = *(unsigned __int8 *)this;
  if (v4 == 4 || v4 == 3) {
    return ot::MeshCoP::Dtls::Process(this);
  }
  if (v4 != 5) {
    __assert_rtn("HandleTimer", "dtls.cpp", 850, "false");
  }
  *(unsigned char *)this  = 1;
  ot::TimerMilli::Stop((ot::TimerMilli *)(this + 82));
  char v5 = 0;
  return (void **)ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>(this + 88, &v5);
}

void *ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>(void *result, unsigned char *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::Invoke<BOOL>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::InvokeIfSet<BOOL>(result, a2);
}

void *ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::InvokeIfSet<unsigned char (&)[768],unsigned short>(void *result, uint64_t a2, unsigned __int16 *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::Invoke<unsigned char (&)[768],unsigned short>((uint64_t)result, a2, a3);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::InvokeIfSet<unsigned char (&)[768],unsigned short>(result, a2, a3);
}

void ot::MeshCoP::Dtls::HandleMbedtlsDebug(ot::MeshCoP::Dtls *this, unsigned int a2, const char *a3, int a4, const char *a5)
{
  if (a2 <= 1)
  {
    uint64_t v6 = a2 - 1;
    char v5 = 0;
  }
  else
  {
    uint64_t v6 = a2 - 1;
    char v5 = 1;
  }
  if ((v5 & 1) == 0)
  {
    switch(v6)
    {
      case 0:
        SockName  = ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::Dtls *)((char *)this + 792));
        ot::Logger::LogAtLevel<(ot::LogLevel)1>((ot *)"Dtls", "[%u] %s", v8, v9, v10, v11, v12, v13, *(_WORD *)(SockName + 16));
        return;
      case 1:
        uint64_t v14 = ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::Dtls *)((char *)this + 792));
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Dtls", "[%u] %s", v15, v16, v17, v18, v19, v20, *(_WORD *)(v14 + 16));
        return;
      case 2:
        uint64_t v21 = ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::Dtls *)((char *)this + 792));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Dtls", "[%u] %s", v22, v23, v24, v25, v26, v27, *(_WORD *)(v21 + 16));
        return;
      case 3:
        break;
      default:
        JUMPOUT(0);
    }
  }
  uint64_t v28 = ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::Dtls *)((char *)this + 792));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Dtls", "[%u] %s", v29, v30, v31, v32, v33, v34, *(_WORD *)(v28 + 16));
}

uint64_t ot::Callback<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&),(ot::CallbackContextPosition)0>::Invoke<ot::Message &,ot::Ip6::MessageInfo&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))a1)(*(void *)(a1 + 8), a2, a3);
}

{
  return ot::Callback<otError (*)(void *,ot::Message &,ot::Ip6::MessageInfo const&),(ot::CallbackContextPosition)0>::Invoke<ot::Message &,ot::Ip6::MessageInfo&>(a1, a2, a3);
}

uint64_t ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::Invoke<BOOL>(uint64_t a1, unsigned char *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*(void *)(a1 + 8), *a2 & 1);
}

{
  return ot::Callback<void (*)(void *,BOOL),(ot::CallbackContextPosition)0>::Invoke<BOOL>(a1, a2);
}

uint64_t ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::Invoke<unsigned char (&)[768],unsigned short>(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))a1)(*(void *)(a1 + 8), a2, *a3);
}

{
  return ot::Callback<void (*)(void *,unsigned char *,unsigned short),(ot::CallbackContextPosition)0>::Invoke<unsigned char (&)[768],unsigned short>(a1, a2, a3);
}

ot::EnergyScanClient *ot::EnergyScanClient::EnergyScanClient(ot::EnergyScanClient *this, ot::Instance *a2)
{
  return this;
}

{
  ot::EnergyScanClient::EnergyScanClient(this, a2);
  return this;
}

uint64_t ot::EnergyScanClient::SendQuery(ot::EnergyScanClient *this, int a2, unsigned __int8 a3, unsigned __int16 a4, unsigned __int16 a5, const ot::Ip6::Address *a6, void (*a7)(unsigned int, const unsigned __int8 *, unsigned __int8, void *), uint64_t a8)
{
  uint64_t v34 = this;
  int v33 = a2;
  unsigned __int8 v32 = a3;
  unsigned __int16 v31 = a4;
  unsigned __int16 v30 = a5;
  uint64_t v29 = a6;
  uint64_t v28 = a7;
  uint64_t v27 = a8;
  inited  = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v24, Instance);
  uint64_t v23 = 0;
  uint64_t v9 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
  if (ot::MeshCoP::Commissioner::IsActive(v9))
  {
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v23 = ot::Coap::CoapBase::NewPriorityMessage(v10);
    if (v23)
    {
      inited  = ot::Coap::Message::InitAsPost(v23, v29, 0x13u);
      if (!inited)
      {
        inited  = ot::Coap::Message::SetPayloadMarker(v23);
        if (!inited)
        {
          uint64_t v11 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
          unsigned __int16 SessionId = ot::MeshCoP::Commissioner::GetSessionId(v11);
          inited  = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v23, SessionId);
          if (!inited)
          {
            ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v25);
            ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v25, v33);
            inited  = ot::Tlv::AppendTo((ot::Tlv *)v25, v23);
            if (!inited)
            {
              inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(v23, v32);
              if (!inited)
              {
                inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(v23, v31);
                if (!inited)
                {
                  inited  = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(v23, v30);
                  if (!inited)
                  {
                    ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v24, (__n128 *)v29);
                    uint64_t v13 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                    inited  = ot::Coap::CoapBase::SendMessage(v13, v23, (const ot::Ip6::MessageInfo *)v24);
                    if (!inited)
                    {
                      char v14 = ot::UriToString<(ot::Uri)19>();
                      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanClnt", "Sent %s", v15, v16, v17, v18, v19, v20, v14);
                      ot::CallbackBase<void (*)(unsigned int,unsigned char const*,unsigned char,void *)>::Set(this, (uint64_t)v28, v27);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      inited  = 3;
    }
  }
  else
  {
    inited  = 13;
  }
  if (inited && v23) {
    ot::Message::Free(v23);
  }
  return inited;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x38u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(a1, a2);
}

void *ot::CallbackBase<void (*)(unsigned int,unsigned char const*,unsigned char,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(unsigned int,unsigned char const*,unsigned char,void *)>::Set(result, a2, a3);
}

void ot::EnergyScanClient::HandleTmf<(ot::Uri)18>(ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v29 = a1;
  uint64_t v28 = a2;
  uint64_t v27 = a3;
  ChannelMasunsigned __int16 k = 0;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)18>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanClnt", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v28, v10, v11, v12, v13);
    if (ChannelMask)
    {
      if (!ot::MeshCoP::Tlv::FindTlv(v28, 0x39u, 0x42u, v30, v14))
      {
        EnergyList  = ot::MeshCoP::EnergyListTlv::GetEnergyList((ot::MeshCoP::EnergyListTlv *)v30);
        EnergyListint Length = ot::MeshCoP::EnergyListTlv::GetEnergyListLength((ot::MeshCoP::EnergyListTlv *)v30);
        ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned int &,unsigned char const*,unsigned char>(a1, &ChannelMask, &EnergyList, &EnergyListLength);
        uint64_t v15 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        if (!ot::Coap::CoapBase::SendEmptyAck(v15, v28, v27))
        {
          char v16 = ot::UriToString<(ot::Uri)18>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanClnt", "Sent %s ack", v17, v18, v19, v20, v21, v22, v16);
        }
      }
    }
  }
}

uint64_t ot::MeshCoP::Tlv::FindTlv(ot::Tlv *a1, unsigned __int8 a2, unsigned __int16 a3, void *a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)a2, a3, a4, a5);
}

{
  return ot::MeshCoP::Tlv::FindTlv(a1, a2, a3, a4, a5);
}

void *ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned int &,unsigned char const*,unsigned char>(void *result, unsigned int *a2, void *a3, unsigned __int8 *a4)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned int &,unsigned char const*,unsigned char>((uint64_t)result, a2, a3, a4);
  }
  return result;
}

{
  return ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned int &,unsigned char const*,unsigned char>(result, a2, a3, a4);
}

uint64_t ot::MeshCoP::EnergyListTlv::GetEnergyList(ot::MeshCoP::EnergyListTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::EnergyListTlv::GetEnergyList(this);
}

uint64_t ot::MeshCoP::EnergyListTlv::GetEnergyListLength(ot::MeshCoP::EnergyListTlv *this)
{
  unsigned __int8 Length = ot::Tlv::GetLength(this);
  return ot::Min<unsigned char>(0x40u, Length);
}

{
  return ot::MeshCoP::EnergyListTlv::GetEnergyListLength(this);
}

uint64_t ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned int &,unsigned char const*,unsigned char>(uint64_t a1, unsigned int *a2, void *a3, unsigned __int8 *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(unsigned int,unsigned char const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned int &,unsigned char const*,unsigned char>(a1, a2, a3, a4);
}

ot::MeshCoP::Joiner *ot::MeshCoP::Joiner::Joiner(ot::MeshCoP::Joiner *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(void *)this  = 0;
  *((void *)this + 1)  = 0;
  *((void *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 2++*(_WORD *)(this + 4) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4);
  *((_WORD *)this + 3ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *((void *)this + 1ot::MeshCoP::Tlv::SetType(this, 0) = 0;
  ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::TimerMilliIn((ot::MeshCoP::Joiner *)((char *)this + 88), a2);
  *((unsigned char *)this + 11ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 113)  = 0;
  ot::MeshCoP::Joiner::SetIdFromIeeeEui64(this);
  ot::MeshCoP::JoinerDiscerner::Clear((uint64_t)this + 8);
  uint64_t result = this;
  *((void *)this + 6)  = 0;
  *((void *)this + 7)  = 0;
  *((void *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 1ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  return result;
}

{
  ot::MeshCoP::Joiner::Joiner(this, a2);
  return this;
}

unsigned __int8 *ot::MeshCoP::Joiner::HandleTimer(ot::MeshCoP::Joiner *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = this;
  unsigned int v19 = 0;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v9 = *((unsigned __int8 *)this + 24);
    char v8 = 1;
  }
  else
  {
    uint64_t v9 = *((unsigned __int8 *)this + 24);
    char v8 = 0;
  }
  if ((v8 & 1) == 0)
  {
    switch(v9)
    {
      case 0:
      case 2:
        __assert_rtn("HandleTimer", "joiner.cpp", 682, "false");
      case 1:
        if (!*((unsigned char *)this + 113)) {
          __assert_rtn("HandleTimer", "joiner.cpp", 647, "false");
        }
        --*((unsigned char *)this + 113);
        uint64_t v16 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
        ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v18, 0);
        uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v10);
        uint64_t result = (unsigned __int8 *)ot::Mle::DiscoverScanner::Discover(v16, (ot::Mac::ChannelMask *)v18, PanId, 1, 1, (ot::MeshCoP::Joiner *)((char *)this + 114), (uint64_t)ot::MeshCoP::Joiner::HandleDiscoverResult, (uint64_t)this);
        unsigned int v19 = result;
        if (result) {
          return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)this, v19);
        }
        return result;
      case 3:
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Joiner", "Timeout occurs while waiting for joiner finalize response", a3, a4, a5, a6, a7, a8, v15);
        unsigned int v19 = 28;
        return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)this, v19);
      case 4:
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Joiner", "Timeout occurs while waiting for joiner entrust", a3, a4, a5, a6, a7, a8, v15);
        unsigned int v19 = 28;
        return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)this, v19);
      case 5:
        ot::Mac::ExtAddress::GenerateRandom((ot::Mac::ExtAddress *)v21);
        uint64_t v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ot::Mac::Mac::SetExtAddress(v13, (const ot::Mac::ExtAddress *)v21);
        char v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::Mle::UpdateLinkLocalAddress(v14);
        unsigned int v19 = 0;
        return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)this, v19);
      default:
        JUMPOUT(0);
    }
  }
  return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)this, v19);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::HandleTimer);
  return a1;
}

void ot::MeshCoP::Joiner::SetIdFromIeeeEui64(ot::MeshCoP::Joiner *this)
{
  BOOL v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v1, (ot::Mac::ExtAddress *)v4);
  ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)v4, this, v2);
}

uint64_t ot::MeshCoP::JoinerDiscerner::Clear(uint64_t this)
{
  *(unsigned char *)(this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
  return this;
}

{
  return ot::MeshCoP::JoinerDiscerner::Clear(this);
}

uint64_t ot::MeshCoP::Joiner::GetDiscerner(ot::MeshCoP::Joiner *this)
{
  if (ot::MeshCoP::JoinerDiscerner::IsEmpty((ot::MeshCoP::Joiner *)((char *)this + 8))) {
    return 0;
  }
  else {
    return (uint64_t)this + 8;
  }
}

BOOL ot::MeshCoP::JoinerDiscerner::IsEmpty(ot::MeshCoP::JoinerDiscerner *this)
{
  return *((unsigned char *)this + 8) == 0;
}

{
  return ot::MeshCoP::JoinerDiscerner::IsEmpty(this);
}

uint64_t ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::Joiner *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  unsigned int v4 = 0;
  if (ot::MeshCoP::JoinerDiscerner::IsValid(a2))
  {
    if (*((unsigned char *)this + 24))
    {
      return 13;
    }
    else
    {
      *(_OWORD *)((char *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = *(_OWORD *)a2;
      ot::MeshCoP::JoinerDiscerner::GenerateJoinerId((ot::MeshCoP::Joiner *)((char *)this + 8), this);
    }
  }
  else
  {
    return 7;
  }
  return v4;
}

uint64_t ot::MeshCoP::Joiner::ClearDiscerner(ot::MeshCoP::Joiner *this)
{
  unsigned int v3 = 0;
  if (*((unsigned char *)this + 24))
  {
    return 13;
  }
  else if (!ot::MeshCoP::JoinerDiscerner::IsEmpty((ot::MeshCoP::Joiner *)((char *)this + 8)))
  {
    ot::MeshCoP::JoinerDiscerner::Clear((uint64_t)this + 8);
    ot::MeshCoP::Joiner::SetIdFromIeeeEui64(this);
  }
  return v3;
}

void ot::MeshCoP::Joiner::SetState(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = a2;
  unsigned __int8 v11 = *((unsigned char *)a1 + 24);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
  if (!ot::Notifier::Update<ot::MeshCoP::Joiner::State>(v2, (unsigned char *)a1 + 24, &v12, 0x8000000))
  {
    char v9 = ot::MeshCoP::Joiner::StateToString(v11);
    ot::MeshCoP::Joiner::StateToString(v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "JoinerState: %s -> %s", v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t ot::Notifier::Update<ot::MeshCoP::Joiner::State>(void *a1, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2  = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v5;
}

{
  return ot::Notifier::Update<ot::MeshCoP::Joiner::State>(a1, a2, a3, a4);
}

char *ot::MeshCoP::Joiner::StateToString(unsigned __int8 a1)
{
  return ot::MeshCoP::Joiner::StateToString(ot::MeshCoP::Joiner::State)::kStateStrings[a1];
}

uint64_t ot::MeshCoP::Joiner::Start(uint64_t a1, ot *a2, ot *a3, ot *a4, ot *a5, ot *a6, char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v42 = a1;
  char v41 = a2;
  uint64_t v40 = a3;
  uint64_t v39 = a4;
  uint64_t v38 = a5;
  uint64_t v37 = a6;
  uint64_t v36 = a7;
  uint64_t v35 = a8;
  uint64_t v34 = a9;
  unsigned int v33 = 0;
  ot::MeshCoP::Joiner::SetIdFromIeeeEui64((ot::MeshCoP::Joiner *)a1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Joiner starting", v9, v10, v11, v12, v13, v14, v25);
  if (!v40 || (ot::IsValidUtf8String(v40, v15) & 1) != 0)
  {
    if (!v39 || (ot::IsValidUtf8String(v39, v15) & 1) != 0)
    {
      if (!v37 || (ot::IsValidUtf8String(v37, v15) & 1) != 0)
      {
        if (*(unsigned char *)(a1 + 24))
        {
          unsigned int v33 = 5;
        }
        else
        {
          uint64_t v16 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
          if ((ot::ThreadNetif::IsUp(v16) & 1) != 0
            && (uint64_t v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1),
                !ot::Mle::Mle::GetRole(v17)))
          {
            unsigned int v33 = ot::MeshCoP::JoinerPskd::SetFrom((ot::MeshCoP::JoinerPskd *)v44, v41);
            if (!v33)
            {
              *(unsigned char *)(a1 + 113)  = *(unsigned char *)(a1 + 112);
              ot::Mac::ExtAddress::GenerateRandom((ot::Mac::ExtAddress *)v43);
              uint64_t v18 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
              ot::Mac::Mac::SetExtAddress(v18, (const ot::Mac::ExtAddress *)v43);
              unsigned int v19 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
              ot::Mle::Mle::UpdateLinkLocalAddress(v19);
              uint64_t v20 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
              unsigned int v33 = ot::Coap::CoapSecure::Start(v20, 1000);
              if (!v33)
              {
                uint64_t v21 = (ot::Coap::CoapSecure *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
                ot::Coap::CoapSecure::SetPsk(v21, (const ot::MeshCoP::JoinerPskd *)v44);
                uint64_t v32 = a1 + 48;
                uint64_t v31 = a1 + 48;
                uint64_t v30 = a1 + 76;
                while (v31 != v30)
                {
                  uint64_t v29 = v31;
                  *(unsigned char *)(v31 + 13)  = 0;
                  v31 += 14;
                }
                unsigned int v33 = ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage((ot::Tlv **)a1, v40, v39, v38, v37, (ot *)v36);
                if (!v33)
                {
                  if (ot::MeshCoP::JoinerDiscerner::IsEmpty((ot::MeshCoP::JoinerDiscerner *)(a1 + 8))) {
                    ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)a1, (_WORD *)(a1 + 114));
                  }
                  else {
                    ot::MeshCoP::SteeringData::CalculateHashBitIndexes((ot::MeshCoP::JoinerDiscerner *)(a1 + 8), (_WORD *)(a1 + 114));
                  }
                  uint64_t v26 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>((ot::InstanceLocator *)a1);
                  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)v28, 0);
                  uint64_t v22 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                  unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v22);
                  unsigned int v33 = ot::Mle::DiscoverScanner::Discover(v26, (ot::Mac::ChannelMask *)v28, PanId, 1, 1, (_DWORD *)(a1 + 114), (uint64_t)ot::MeshCoP::Joiner::HandleDiscoverResult, a1);
                  if (!v33)
                  {
                    ot::CallbackBase<void (*)(otError,void *)>::Set((void *)(a1 + 32), v35, v34);
                    ot::MeshCoP::Joiner::SetState((ot::InstanceLocator *)a1, 1u);
                  }
                }
              }
            }
          }
          else
          {
            unsigned int v33 = 13;
          }
        }
      }
      else
      {
        unsigned int v33 = 7;
      }
    }
    else
    {
      unsigned int v33 = 7;
    }
  }
  else
  {
    unsigned int v33 = 7;
  }
  if (v33) {
    ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage((ot::Message **)a1);
  }
  ot::MeshCoP::LogError((char)"start joiner", v33);
  return v33;
}

uint64_t ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(ot::Tlv **this, ot *a2, ot *a3, ot *a4, ot *a5, ot *a6)
{
  uint64_t v31 = this;
  uint64_t v30 = a2;
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  uint64_t v27 = a5;
  uint64_t v26 = a6;
  unsigned int v25 = 0;
  ot::MeshCoP::VendorStackVersionTlv::VendorStackVersionTlv((ot::MeshCoP::VendorStackVersionTlv *)v24);
  uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)this);
  this[10]  = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v6, 0x15u);
  if (this[10])
  {
    uint64_t v22 = this[10];
    unsigned __int16 Length = ot::Message::GetLength(v22);
    ot::Message::SetOffset(v22, Length);
    unsigned int v25 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(this[10], 1u);
    if (!v25)
    {
      unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)33,(unsigned char)32>>(this[10], v29, v8, v9, v10);
      if (!v25)
      {
        unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)34,(unsigned char)32>>(this[10], v28, v11, v12, v13);
        if (!v25)
        {
          unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)35,(unsigned char)16>>(this[10], v27, v14, v15, v16);
          if (!v25)
          {
            ot::MeshCoP::VendorStackVersionTlv::Init((ot::MeshCoP::VendorStackVersionTlv *)v24);
            ot::MeshCoP::VendorStackVersionTlv::SetOui((ot::MeshCoP::VendorStackVersionTlv *)v24, 0x18B430u, v17);
            ot::MeshCoP::VendorStackVersionTlv::SetMajor((uint64_t)v24, 0);
            ot::MeshCoP::VendorStackVersionTlv::SetMinor((uint64_t)v24, 1);
            ot::MeshCoP::VendorStackVersionTlv::SetRevision((ot::MeshCoP::VendorStackVersionTlv *)v24, 0);
            unsigned int v25 = ot::Tlv::AppendTo((ot::Tlv *)v24, this[10]);
            if (!v25
              && (!v26
               || (unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)36,(unsigned char)64>>(this[10], v26, v18, v19, v20)) == 0))
            {
              if (v30) {
                unsigned int v25 = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(this[10], v30, v18, v19, v20);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v25 = 3;
  }
  if (v25)
  {
    ot::MeshCoP::LogError((char)"prepare joiner finalize message", v25);
    ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage(this);
  }
  return v25;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::DiscoverScanner>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(a1);
}

unsigned __int8 *ot::MeshCoP::Joiner::HandleDiscoverResult(uint64_t a1, unsigned __int8 *a2)
{
  return ot::MeshCoP::Joiner::HandleDiscoverResult(a2, a1);
}

void ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage(ot::Message **this)
{
  if (!*((unsigned char *)this + 24))
  {
    if (this[10])
    {
      ot::Message::Free(this[10]);
      this[10]  = 0;
    }
  }
}

unsigned __int8 *ot::MeshCoP::Joiner::Stop(ot::MeshCoP::Joiner *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Joiner stopped", a3, a4, a5, a6, a7, a8, (char)this);
  ot::CallbackBase<void (*)(otError,void *)>::Clear((void *)(v9 + 32));
  return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)v9, 0xBu);
}

unsigned __int8 *ot::MeshCoP::Joiner::Finish(unsigned __int8 *result, unsigned int a2)
{
  uint64_t v8 = result;
  unsigned int v7 = a2;
  unsigned int v5 = (ot::MeshCoP::Joiner *)result;
  int v6 = result[24];
  if (result[24])
  {
    if (v6 != 1)
    {
      if ((v6 - 2) > 3) {
        goto LABEL_8;
      }
      uint64_t v2 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)result);
      ot::Coap::CoapSecure::Disconnect(v2);
      uint64_t v3 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(v5);
      ot::Ip6::Filter::RemoveUnsecurePort(v3, 1000);
      IgnoreError();
      ot::TimerMilli::Stop((ot::MeshCoP::Joiner *)((char *)v5 + 88));
    }
    uint64_t v4 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(v5);
    ot::Coap::CoapSecure::Stop(v4);
LABEL_8:
    ot::MeshCoP::Joiner::SetState(v5, 0);
    ot::MeshCoP::Joiner::FreeJoinerFinalizeMessage((ot::Message **)v5);
    return (unsigned __int8 *)ot::Callback<void (*)(otError,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&>((void *)v5 + 4, &v7);
  }
  return result;
}

uint64_t ot::MeshCoP::Joiner::CalculatePriority(ot::MeshCoP::Joiner *this, char a2, char a3)
{
  char v7 = a2;
  char v6 = a3 & 1;
  if (a2 == 127) {
    char v7 = -127;
  }
  char v5 = ot::Clamp<signed char>(v7, -127, -1);
  if (v6) {
    char v3 = 0x80;
  }
  else {
    char v3 = 0;
  }
  return (v5 + v3);
}

uint64_t ot::Clamp<signed char>(char a1, char a2, char a3)
{
  char v4 = ot::Max<signed char>(a1, a2);
  return (char)ot::Min<signed char>(v4, a3);
}

{
  return ot::Clamp<signed char>(a1, a2, a3);
}

unsigned __int8 *ot::MeshCoP::Joiner::HandleDiscoverResult(unsigned __int8 *result, uint64_t a2)
{
  char v4 = (ot::Mac::ExtAddress *)result;
  char v6 = 0;
  if (result[24] == 1)
  {
    if (a2)
    {
      return (unsigned __int8 *)ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter((ot::MeshCoP::Joiner *)result, a2);
    }
    else
    {
      uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)result);
      ot::Mac::Mac::SetExtAddress(v2, v4);
      char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v4);
      ot::Mle::Mle::UpdateLinkLocalAddress(v3);
      *((_WORD *)v4 + 3ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
      for (unint64_t i = (unint64_t)v4 + 48; i < (unint64_t)v4 + 76; i += 14)
      {
        if (*(unsigned char *)(i + 13))
        {
          char v6 = 1;
          break;
        }
      }
      if ((v6 & 1) == 0 && *((unsigned char *)v4 + 113))
      {
        *((void *)v4 + 6)  = 0;
        *((void *)v4 + 7)  = 0;
        *((void *)v4 + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
        *((_DWORD *)v4 + 1ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = 0;
        ot::TimerMilli::Stop((ot::Mac::ExtAddress *)((char *)v4 + 88));
        return (unsigned __int8 *)ot::TimerMilli::Start((ot::Mac::ExtAddress *)((char *)v4 + 88), 0x64u);
      }
      else
      {
        return ot::MeshCoP::Joiner::TryNextJoinerRouter((unsigned __int16 *)v4, 0);
      }
    }
  }
  return result;
}

void *ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(ot::MeshCoP::Joiner *a1, uint64_t a2)
{
  unint64_t v14 = ot::GetArrayEnd<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>((uint64_t)a1 + 48);
  uint64_t v2 = (ot::MeshCoP::SteeringData *)ot::AsCoreType<otSteeringData>(a2 + 33);
  char v15 = ot::MeshCoP::SteeringData::PermitsAllJoiners(v2) & 1;
  char v3 = (ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>(a2);
  ot::Mac::ExtAddress::ToString(v3, (ot::StringWriter *)v18);
  char v11 = ot::String<(unsigned short)17>::AsCString((uint64_t)v18);
  ot::ToYesNo((ot *)(v15 & 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Joiner discover network: %s, pan:0x%04x, port:%d, chan:%d, rssi:%d, allow-any:%s", v4, v5, v6, v7, v8, v9, v11);
  uint64_t result = (void *)ot::MeshCoP::Joiner::CalculatePriority(a1, *(unsigned char *)(a2 + 55), v15 & 1);
  char v16 = (char)result;
  for (unint64_t i = (void *)((char *)a1 + 48);
        (unint64_t)i < v14 && result <= (int)*((unsigned __int8 *)i + 13);
  if ((unint64_t)i < v14)
  {
    memmove((char *)i + 14, i, v14 - 14 - i);
    uint64_t result = (void *)ot::AsCoreType<otExtAddress>(a2);
    *unint64_t i = *result;
    *((_WORD *)i + ++*(_WORD *)(this + 4) = *(_WORD *)(a2 + 50);
    *((_WORD *)i + 5)  = *(_WORD *)(a2 + 52);
    *((unsigned char *)i + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(unsigned char *)(a2 + 54);
    *((unsigned char *)i + 13)  = v16;
  }
  return result;
}

unsigned __int8 *ot::MeshCoP::Joiner::TryNextJoinerRouter(unsigned __int16 *a1, unsigned int a2)
{
  while (1)
  {
    int v3 = a1[38];
    if (v3 >= (unsigned __int16)ot::GetArrayLength<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>()) {
      break;
    }
    uint64_t v5 = (uint64_t)&a1[7 * a1[38] + 24];
    if (!*(unsigned char *)(v5 + 13)) {
      break;
    }
    uint64_t result = (unsigned __int8 *)ot::MeshCoP::Joiner::Connect((ot::InstanceLocator *)a1, (__int16 *)v5);
    if (!result)
    {
      ++a1[38];
      return result;
    }
    if (!a2) {
      a2  = result;
    }
    ++a1[38];
  }
  if (!a2) {
    a2  = 23;
  }
  return ot::MeshCoP::Joiner::Finish((unsigned __int8 *)a1, a2);
}

uint64_t ot::GetArrayEnd<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>(uint64_t a1)
{
  return a1 + 28;
}

{
  return ot::GetArrayEnd<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>(a1);
}

uint64_t ot::MeshCoP::SteeringData::PermitsAllJoiners(ot::MeshCoP::SteeringData *this)
{
  DoesAllMatch  = 0;
  if (*(unsigned char *)this) {
    DoesAllMatch  = ot::MeshCoP::SteeringData::DoesAllMatch(this, 0xFFu);
  }
  return DoesAllMatch & 1;
}

{
  return ot::MeshCoP::SteeringData::PermitsAllJoiners(this);
}

uint64_t ot::GetArrayLength<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>()
{
  return 2;
}

{
  return ot::GetArrayLength<ot::MeshCoP::Joiner::JoinerRouter,(unsigned short)2>();
}

uint64_t ot::MeshCoP::Joiner::Connect(ot::InstanceLocator *a1, __int16 *a2)
{
  uint64_t v19 = a1;
  uint64_t v18 = (ot::Mac::ExtAddress *)a2;
  unsigned int v17 = 23;
  ot::Ip6::SockAddr::SockAddr((ot::Ip6::SockAddr *)v16, a2[5]);
  ot::Mac::ExtAddress::ToString(v18, (ot::StringWriter *)v20);
  char v2 = ot::String<(unsigned short)17>::AsCString((uint64_t)v20);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Joiner connecting to %s, pan:0x%04x, chan:%d", v3, v4, v5, v6, v7, v8, v2);
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  ot::Mac::Mac::SetPanId(v9, *((_WORD *)v18 + 4));
  uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  unsigned int v17 = ot::Mac::Mac::SetPanChannel(v10, *((unsigned char *)v18 + 12));
  if (!v17)
  {
    char v11 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(a1);
    unsigned int v17 = ot::Ip6::Filter::AddUnsecurePort(v11, 1000);
    if (!v17)
    {
      Address  = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress((ot::Ip6::SockAddr *)v16);
      ot::Ip6::Address::SetToLinkLocalAddress(Address, v18);
      uint64_t v13 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(a1);
      unsigned int v17 = ot::Coap::CoapSecure::Connect(v13, (const ot::Ip6::SockAddr *)v16, (void (*)(BOOL, void *))ot::MeshCoP::Joiner::HandleSecureCoapClientConnect, (uint64_t)a1);
      if (!v17) {
        ot::MeshCoP::Joiner::SetState(a1, 2u);
      }
    }
  }
  ot::MeshCoP::LogError((char)"start secure joiner connection", v17);
  return v17;
}

ot::Ip6::SockAddr *ot::Ip6::SockAddr::SockAddr(ot::Ip6::SockAddr *this, __int16 a2)
{
  return this;
}

{
  void *Address;

  *((_WORD *)this + ot::BackboneRouter::NdProxyTable::HandleTimer((uint64_t)this + 8) = a2;
  Address  = (void *)ot::Ip6::SockAddr::GetAddress(this);
  ot::Clearable<ot::Ip6::Address>::Clear(Address);
  return this;
}

ot::MeshCoP::Joiner *ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(ot::MeshCoP::Joiner *this, ot::MeshCoP::Joiner *a2, void *a3)
{
  return ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(a2, this & 1);
}

ot::MeshCoP::Joiner *ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(ot::MeshCoP::Joiner *this, char a2)
{
  char v2 = this;
  if (*((unsigned char *)this + 24) == 2)
  {
    if (a2)
    {
      ot::MeshCoP::Joiner::SetState(this, 3u);
      ot::MeshCoP::Joiner::SendJoinerFinalize(v2);
      return (ot::MeshCoP::Joiner *)ot::TimerMilli::Start((ot::MeshCoP::Joiner *)((char *)v2 + 88), 0xFA0u);
    }
    else
    {
      return (ot::MeshCoP::Joiner *)ot::MeshCoP::Joiner::TryNextJoinerRouter(this, 8);
    }
  }
  return this;
}

void ot::MeshCoP::Joiner::SendJoinerFinalize(ot::MeshCoP::Joiner *this)
{
  if (!*((void *)this + 10)) {
    __assert_rtn("SendJoinerFinalize", "joiner.cpp", 522, "mFinalizeMessage != nullptr");
  }
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(this);
  if (!ot::Coap::CoapSecure::SendMessage(v1, *((ot::Coap::Message **)this + 10), (uint64_t)ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse, (uint64_t)this))
  {
    *((void *)this + 1ot::MeshCoP::Tlv::SetType(this, 0) = 0;
    char v2 = ot::UriToString<(ot::Uri)21>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Sent %s", v3, v4, v5, v6, v7, v8, v2);
  }
}

ot::MeshCoP::VendorStackVersionTlv *ot::MeshCoP::VendorStackVersionTlv::VendorStackVersionTlv(ot::MeshCoP::VendorStackVersionTlv *this)
{
  return this;
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)33,(unsigned char)32>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x21, 0x20u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)33,(unsigned char)32>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)34,(unsigned char)32>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x22, 0x20u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)34,(unsigned char)32>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)35,(unsigned char)16>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x23, 0x10u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)35,(unsigned char)16>>(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::Init(ot::MeshCoP::VendorStackVersionTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 6);
}

{
  return ot::MeshCoP::VendorStackVersionTlv::Init(this);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetOui(ot::MeshCoP::VendorStackVersionTlv *this, unsigned int a2, unsigned __int8 *a3)
{
  return ot::Encoding::BigEndian::WriteUint24(a2, (unsigned char *)this + 2, a3);
}

{
  return ot::MeshCoP::VendorStackVersionTlv::SetOui(this, a2, a3);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetMajor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 7)  = *(unsigned char *)(this + 7) & 0xF0 | a2 & 0xF;
  return this;
}

{
  return ot::MeshCoP::VendorStackVersionTlv::SetMajor(this, a2);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetMinor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 7)  = *(unsigned char *)(this + 7) & 0xF | (16 * a2);
  return this;
}

{
  return ot::MeshCoP::VendorStackVersionTlv::SetMinor(this, a2);
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::SetRevision(ot::MeshCoP::VendorStackVersionTlv *this, char a2)
{
  __int16 v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 5));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 0xFF0F | a2 & 0xF0u));
  *(_WORD *)((char *)this + 5)  = result;
  return result;
}

{
  return ot::MeshCoP::VendorStackVersionTlv::SetRevision(this, a2);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)36,(unsigned char)64>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x24, 0x40u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)36,(unsigned char)64>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x20, 0x40u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)32,(unsigned char)64>>(a1, a2, a3, a4, a5);
}

void ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(unsigned char *a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v6 = v4;
  uint64_t v5 = ot::AsCoreType<otMessageInfo>(a3);
  ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(a1, v6, v5, a4);
}

void ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(unsigned char *a1, ot::Tlv *a2, uint64_t a3, int a4)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  uint64_t v18 = a3;
  int v17 = a4;
  char v16 = 0;
  if (a1[24] == 3 && !v17)
  {
    if (!v19) {
      __assert_rtn("HandleJoinerFinalizeResponse", "joiner.cpp", 553, "aMessage != nullptr");
    }
    if (ot::Coap::Message::IsAck(v19)
      && ot::Coap::Message::GetCode(v19) == 68
      && !ot::Tlv::Find<ot::MeshCoP::StateTlv>(v19, &v16, v4, v5))
    {
      ot::MeshCoP::Joiner::SetState((ot::InstanceLocator *)a1, 4u);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 88), 0xFA0u);
      char v6 = ot::UriToString<(ot::Uri)21>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Received %s %d", v7, v8, v9, v10, v11, v12, v6);
    }
  }
  uint64_t v13 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>((ot::InstanceLocator *)a1);
  ot::Coap::CoapSecure::Disconnect(v13);
  unint64_t v14 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>((ot::InstanceLocator *)a1);
  ot::Ip6::Filter::RemoveUnsecurePort(v14, 1000);
  IgnoreError();
}

BOOL ot::Coap::Message::IsAck(ot::Coap::Message *this)
{
  return ot::Coap::Message::GetType(this) == 2;
}

{
  return ot::Coap::Message::IsAck(this);
}

void ot::MeshCoP::Joiner::HandleTmf<(ot::Uri)20>(unsigned char *a1, ot::Tlv *a2, const ot::Ip6::MessageInfo *a3)
{
  if (a1[24] == 4 && ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)20>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(v30);
    updated  = ot::MeshCoP::Dataset::Info::UpdateNetworkKey((ot::MeshCoP::Dataset::Info *)v30);
    int v27 = ot::Tlv::Find<ot::MeshCoP::NetworkKeyTlv>(a2, updated, v11, v12, v13);
    if (!v27)
    {
      unint64_t v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      Panint Channel = ot::Mac::Mac::GetPanChannel(v14);
      ot::MeshCoP::Dataset::Info::SetChannel((uint64_t)v30, PanChannel);
      char v16 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      __int16 PanId = ot::Mac::Mac::GetPanId(v16);
      ot::MeshCoP::Dataset::Info::SetPanId((uint64_t)v30, PanId);
      uint64_t active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
      ot::MeshCoP::ActiveDatasetManager::Save(active, (const ot::MeshCoP::Dataset::Info *)v30);
      IgnoreError();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Joiner successful!", v19, v20, v21, v22, v23, v24, v25);
      ot::MeshCoP::Joiner::SendJoinerEntrustResponse((ot::MeshCoP::Joiner *)a1, a2, a3);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 88), 0x64u);
    }
    ot::MeshCoP::LogError((char)"process joiner entrust", v27);
  }
  else
  {
    ot::MeshCoP::LogError((char)"process joiner entrust", 2);
  }
}

uint64_t ot::MeshCoP::Dataset::Info::UpdateNetworkKey(ot::MeshCoP::Dataset::Info *this)
{
  *((_WORD *)this + 6ot::MeshCoP::Tlv::SetType(this, 0) = *((_WORD *)this + 60) & 0xFFFB | 4;
  return ot::AsCoreType<otNetworkKey>((uint64_t)this + 32);
}

{
  return ot::MeshCoP::Dataset::Info::UpdateNetworkKey(this);
}

void ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::MeshCoP::Joiner *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  int v17 = a3;
  int v16 = 0;
  char v15 = 0;
  memcpy(__dst, a3, sizeof(__dst));
  char v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v15 = ot::Coap::CoapBase::NewPriorityResponseMessage(v3, v18);
  if (v15)
  {
    ot::Message::SetSubType(v15, 4);
    SockAddr  = (void *)ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)__dst);
    ot::Clearable<ot::Ip6::Address>::Clear(SockAddr);
    uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    int v16 = ot::Coap::CoapBase::SendMessage(v5, v15, (const ot::Ip6::MessageInfo *)__dst);
    if (!v16)
    {
      ot::MeshCoP::Joiner::SetState(this, 5u);
      char v6 = ot::UriToString<(ot::Uri)20>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Joiner", "Sent %s response", v7, v8, v9, v10, v11, v12, v6);
    }
  }
  else
  {
    int v16 = 3;
  }
  if (v16)
  {
    if (v15) {
      ot::Message::Free(v15);
    }
  }
}

uint64_t ot::MeshCoP::VendorStackVersionTlv::VendorStackVersionTlv(uint64_t this)
{
  *(_WORD *)(this + 5)  = 0;
  *(unsigned char *)(this + 7)  = 0;
  return this;
}

uint64_t ot::Encoding::BigEndian::WriteUint24(uint64_t this, unsigned char *a2, unsigned __int8 *a3)
{
  *a2  = BYTE2(this);
  a2[1]  = BYTE1(this);
  a2[2]  = this;
  return this;
}

{
  return ot::Encoding::BigEndian::WriteUint24(this, a2, a3);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Joiner,&ot::MeshCoP::Joiner::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Joiner>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::Joiner::HandleTimer)(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Joiner>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::Joiner>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Joiner>(a1);
}

uint64_t ot::Max<signed char>(char a1, char a2)
{
  if (a1 >= a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return ot::Max<signed char>(a1, a2);
}

uint64_t ot::Min<signed char>(char a1, char a2)
{
  if (a1 >= a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return ot::Min<signed char>(a1, a2);
}

ot::MeshCoP::JoinerRouter *ot::MeshCoP::JoinerRouter::JoinerRouter(ot::MeshCoP::JoinerRouter *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Ip6::Udp::Socket::Socket((ot::MeshCoP::JoinerRouter *)((char *)this + 8), a2);
  ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::TimerMilliIn((ot::MeshCoP::JoinerRouter *)((char *)this + 80), a2);
  ot::Coap::MessageQueue::MessageQueue((ot::MeshCoP::JoinerRouter *)((char *)this + 104));
  uint64_t result = this;
  *((_WORD *)this + 56)  = 0;
  *((unsigned char *)this + 114) &= ~1u;
  return result;
}

{
  ot::MeshCoP::JoinerRouter::JoinerRouter(this, a2);
  return this;
}

uint64_t ot::MeshCoP::JoinerRouter::HandleTimer(ot::MeshCoP::JoinerRouter *this)
{
  return ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust(this);
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::HandleTimer);
  return a1;
}

void ot::MeshCoP::JoinerRouter::HandleNotifierEvents(ot::MeshCoP::JoinerRouter *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (ot::Events::Contains(&v3, 512)) {
    ot::MeshCoP::JoinerRouter::Start(a1);
  }
}

void ot::MeshCoP::JoinerRouter::Start(ot::MeshCoP::JoinerRouter *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsFullThreadDevice(v1))
  {
    uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::LeaderBase::IsJoiningEnabled(v2))
    {
      Joinerchar UdpPort = ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(this);
      if (!ot::Ip6::Udp::SocketHandle::IsBound((ot::MeshCoP::JoinerRouter *)((char *)this + 8)))
      {
        ot::Ip6::Udp::Socket::Open((ot::MeshCoP::JoinerRouter *)((char *)this + 8), (uint64_t)ot::MeshCoP::JoinerRouter::HandleUdpReceive, (uint64_t)this);
        IgnoreError();
        ot::Ip6::Udp::Socket::Bind((ot::MeshCoP::JoinerRouter *)((char *)this + 8), JoinerUdpPort, 1);
        IgnoreError();
        uint64_t v9 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
        ot::Ip6::Filter::AddUnsecurePort(v9, JoinerUdpPort);
        IgnoreError();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Joiner Router: start", v10, v11, v12, v13, v14, v15, v17);
      }
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Joiner Router: stop", v3, v4, v5, v6, v7, v8, v17);
      if (ot::Ip6::Udp::SocketHandle::IsBound((ot::MeshCoP::JoinerRouter *)((char *)this + 8)))
      {
        uint64_t v18 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
        SockName  = ot::Ip6::Udp::SocketHandle::GetSockName((ot::MeshCoP::JoinerRouter *)((char *)this + 8));
        ot::Ip6::Filter::RemoveUnsecurePort(v18, *(_WORD *)(SockName + 16));
        IgnoreError();
        ot::Ip6::Udp::Socket::Close((ot::MeshCoP::JoinerRouter *)((char *)this + 8));
        IgnoreError();
      }
    }
  }
}

uint64_t ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(ot::MeshCoP::JoinerRouter *this)
{
  unsigned __int16 v4 = 1000;
  if (*((unsigned char *)this + 114))
  {
    return *((unsigned __int16 *)this + 56);
  }
  else
  {
    uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v1, 0x12u);
    ot::As<ot::MeshCoP::JoinerUdpPortTlv>();
    if (v2) {
      return (unsigned __int16)ot::MeshCoP::JoinerUdpPortTlv::GetUdpPort(v2);
    }
  }
  return v4;
}

void ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::MeshCoP::JoinerRouter *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v4 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  uint64_t v3 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  ot::MeshCoP::JoinerRouter::HandleUdpReceive(a1, v4, v3);
}

uint64_t ot::MeshCoP::JoinerUdpPortTlv::GetUdpPort(ot::MeshCoP::JoinerUdpPortTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::MeshCoP::JoinerUdpPortTlv::GetUdpPort(this);
}

void ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(ot::MeshCoP::JoinerRouter *this, __int16 a2)
{
  *((_WORD *)this + 56)  = a2;
  *((unsigned char *)this + 11++*(_WORD *)(this + 4) = *((unsigned char *)this + 114) & 0xFE | 1;
  ot::MeshCoP::JoinerRouter::Start(this);
}

void ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::MeshCoP::JoinerRouter *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v44 = this;
  uint64_t v43 = a2;
  uint64_t v42 = a3;
  BorderAgentuint64_t Rloc = 0;
  uint64_t v40 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v39, Instance);
  unsigned __int16 v37 = 0;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "JoinerRouter::HandleUdpReceive", v4, v5, v6, v7, v8, v9, v28);
  uint64_t v10 = (ot::MeshCoP *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  BorderAgentuint64_t Rloc = ot::MeshCoP::GetBorderAgentRloc(v10, (ot::ThreadNetif *)&v37, v11);
  if (!BorderAgentRloc)
  {
    uint64_t v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v40 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v12, 0x1Cu);
    if (v40)
    {
      uint64_t v35 = v40;
      PeerPort  = ot::Ip6::MessageInfo::GetPeerPort(v42);
      BorderAgentuint64_t Rloc = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(v35, PeerPort);
      if (!BorderAgentRloc)
      {
        uint64_t v34 = v40;
        PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v42);
        Iid  = (void *)ot::Ip6::Address::GetIid(PeerAddr);
        BorderAgentuint64_t Rloc = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(v34, Iid);
        if (!BorderAgentRloc)
        {
          unsigned int v33 = v40;
          int v16 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v16);
          BorderAgentuint64_t Rloc = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)20,unsigned short>>(v33, Rloc16);
          if (!BorderAgentRloc)
          {
            ot::MeshCoP::ExtendedTlv::SetType(v38, 17);
            __int16 Length = ot::Message::GetLength(v43);
            __int16 Offset = ot::Message::GetOffset(v43);
            ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v38, Length - Offset);
            BorderAgentuint64_t Rloc = ot::Message::Append<ot::MeshCoP::ExtendedTlv>(v40, v38);
            if (!BorderAgentRloc)
            {
              uint64_t v31 = v40;
              uint64_t v29 = v43;
              unsigned __int16 v30 = ot::Message::GetOffset(v43);
              unsigned __int16 v19 = ot::ExtendedTlv::GetLength((ot::ExtendedTlv *)v38);
              BorderAgentuint64_t Rloc = ot::Message::AppendBytesFromMessage(v31, v29, v30, v19);
              if (!BorderAgentRloc)
              {
                ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v39, v37);
                uint64_t v20 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                BorderAgentuint64_t Rloc = ot::Coap::CoapBase::SendMessage(v20, v40, (const ot::Ip6::MessageInfo *)v39);
                if (!BorderAgentRloc)
                {
                  char v21 = ot::UriToString<(ot::Uri)28>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Sent %s", v22, v23, v24, v25, v26, v27, v21);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      BorderAgentuint64_t Rloc = 3;
    }
  }
  if (BorderAgentRloc && v40)
  {
    ot::MeshCoP::LogError((char)"process UDP message", BorderAgentRloc);
    if (v40) {
      ot::Message::Free(v40);
    }
  }
}

void ot::MeshCoP::JoinerRouter::HandleTmf<(ot::Uri)29>(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v38 = a1;
  unsigned __int16 v37 = a2;
  uint64_t v36 = a3;
  TlvValue__int16 Offset = 0;
  __int16 v34 = 0;
  unsigned __int16 v32 = 0;
  unsigned __int16 v31 = 0;
  unsigned __int16 v30 = 0;
  ot::Message::Settings::Settings(v29, 0, 3);
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v28);
  if (ot::Coap::Message::IsNonConfirmablePostRequest(v37))
  {
    char v3 = ot::UriToString<(ot::Uri)29>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    TlvValue__int16 Offset = ot::Tlv::Find<ot::MeshCoP::JoinerUdpPortTlv>(v37, (unsigned __int16 *)&v34, v10, v11);
    if (!TlvValueOffset)
    {
      TlvValue__int16 Offset = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)19,ot::Ip6::InterfaceIdentifier>>(v37, (uint64_t)v33, v12, v13, v14);
      if (!TlvValueOffset)
      {
        TlvValue__int16 Offset = ot::Tlv::FindTlvValueOffset(v37, (const ot::Message *)0x11, &v32, &v31, v15);
        if (!TlvValueOffset)
        {
          unsigned __int16 v30 = ot::Ip6::Udp::Socket::NewMessage((ot::Ip6::Udp::Socket *)(a1 + 8), 0, (const ot::Message::Settings *)v29);
          if (v30)
          {
            TlvValue__int16 Offset = ot::Message::AppendBytesFromMessage(v30, v37, v32, v31);
            if (!TlvValueOffset)
            {
              PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v28);
              ot::Ip6::Address::SetToLinkLocalAddress(PeerAddr, (const ot::Ip6::InterfaceIdentifier *)v33);
              ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v28, v34);
              TlvValue__int16 Offset = ot::Ip6::Udp::Socket::SendTo((ot::Ip6::Udp::Socket *)(a1 + 8), v30, (const ot::Ip6::MessageInfo *)v28);
              if (!TlvValueOffset
                && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(v37, (uint64_t)v39, v17, v18, v19))
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Received kek", v20, v21, v22, v23, v24, v25, v26);
                ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust((ot::MeshCoP::JoinerRouter *)a1, (const ot::Ip6::MessageInfo *)v28, (const ot::Mac::Key *)v39);
              }
            }
          }
          else
          {
            TlvValue__int16 Offset = 3;
          }
        }
      }
    }
  }
  else
  {
    TlvValue__int16 Offset = 2;
  }
  if (TlvValueOffset && v30)
  {
    ot::MeshCoP::LogError((char)"process UDP message", TlvValueOffset);
    if (v30) {
      ot::Message::Free(v30);
    }
  }
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x15, a2, (void *)0x10, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)21,ot::Mac::Key>>(a1, a2, a3, a4, a5);
}

void ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::MeshCoP::JoinerRouter *this, const ot::Ip6::MessageInfo *a2, const ot::Mac::Key *a3)
{
  uint64_t v12 = this;
  __src  = a2;
  uint64_t v10 = a3;
  int v9 = 0;
  char v3 = (ot::Message::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
  uint64_t v8 = ot::MessagePool::Allocate(v3, 5);
  ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::JoinerEntrustMetadata((ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)__dst);
  if (v8)
  {
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t v4 = (ot::TimerMilli *)ot::Ip6::MessageInfo::SetPeerPort((uint64_t)__dst, 61631);
    int Now = ot::TimerMilli::GetNow(v4);
    int v7 = ot::Time::operator+(&Now, 50);
    int v14 = v7;
    long long v15 = *(_OWORD *)v10;
    int v9 = ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::AppendTo((ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)__dst, v8);
    if (!v9)
    {
      ot::MessageQueue::Enqueue((ot::MeshCoP::JoinerRouter *)((char *)this + 104), v8);
      if (!ot::Timer::IsRunning((ot::MeshCoP::JoinerRouter *)((char *)this + 80))) {
        ot::TimerMilli::FireAt((ot::MeshCoP::JoinerRouter *)((char *)this + 80), v14);
      }
    }
  }
  else
  {
    int v9 = 3;
  }
  if (v9 && v8) {
    ot::Message::Free(v8);
  }
  ot::MeshCoP::LogError((char)"schedule joiner entrust", v9);
}

ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::JoinerEntrustMetadata(ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *this)
{
  return this;
}

{
  ot::Ip6::MessageInfo::MessageInfo(this);
  return this;
}

uint64_t ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::AppendTo(ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *this, ot::Message *a2)
{
  return ot::Message::Append<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(a2, (char *)this);
}

{
  return ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::AppendTo(this, a2);
}

uint64_t ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust(ot::MeshCoP::JoinerRouter *this)
{
  int v7 = this;
  ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::JoinerEntrustMetadata((ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)v8);
  uint64_t result = ot::MessageQueue::GetHead((ot::MeshCoP::JoinerRouter *)((char *)this + 104));
  uint64_t v6 = (ot::Message *)result;
  if (result)
  {
    uint64_t result = ot::Timer::IsRunning((ot::MeshCoP::JoinerRouter *)((char *)this + 80));
    if ((result & 1) == 0)
    {
      ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom((ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *)v8, v6);
      int Now = ot::TimerMilli::GetNow(v2);
      if (ot::Time::operator<(&Now, &v9))
      {
        return ot::TimerMilli::FireAt((ot::MeshCoP::JoinerRouter *)((char *)this + 80), v9);
      }
      else
      {
        ot::MessageQueue::DequeueAndFree((ot::MeshCoP::JoinerRouter *)((char *)this + 104), v6);
        char v3 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::SetKek(v3, &v10);
        uint64_t result = ot::MeshCoP::JoinerRouter::SendJoinerEntrust(this, (const ot::Ip6::MessageInfo *)v8);
        if (result) {
          return ot::TimerMilli::Start((ot::MeshCoP::JoinerRouter *)((char *)this + 80), 0);
        }
      }
    }
  }
  return result;
}

void ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom(ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata *this, const ot::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x50uLL) {
    __assert_rtn("ReadFrom", "joiner_router.cpp", 418, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(a2, Length - 80, (char *)this);
  IgnoreError();
}

uint64_t ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::MeshCoP::JoinerRouter *this, const ot::Ip6::MessageInfo *a2)
{
  uint64_t v13 = ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage(this);
  if (v13)
  {
    uint64_t v2 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    ot::Coap::CoapBase::AbortTransaction(v2, (uint64_t)ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse, (uint64_t)this);
    IgnoreError();
    char v3 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    unsigned int v14 = ot::Coap::CoapBase::SendMessage(v3, v13, a2, (uint64_t)ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse, (uint64_t)this);
    if (!v14)
    {
      char v11 = ot::UriToString<(ot::Uri)20>();
      ot::Message::GetLength(v13);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Sent %s (len= %d)", v4, v5, v6, v7, v8, v9, v11);
    }
  }
  else
  {
    unsigned int v14 = 3;
  }
  if (v14 && v13) {
    ot::Message::Free(v13);
  }
  return v14;
}

ot::Message *ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage(ot::MeshCoP::JoinerRouter *this)
{
  uint64_t v27 = this;
  int v26 = 0;
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v31);
  uint64_t v24 = 0;
  uint64_t v1 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v25 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v1, 0x14u);
  if (v25)
  {
    ot::Message::SetSubType(v25, 4);
    uint64_t v2 = (__n128 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::KeyManager::GetNetworkKey(v2, &v29);
    int v26 = ot::Tlv::Append<ot::MeshCoP::NetworkKeyTlv>(v25, &v29);
    if (!v26)
    {
      char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::GetMeshLocalPrefix(v3);
      int v26 = ot::Tlv::Append<ot::MeshCoP::MeshLocalPrefixTlv>(v25, v4);
      if (!v26)
      {
        uint64_t v5 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
        ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v5);
        int v26 = ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(v25, v6);
        if (!v26)
        {
          ot::MeshCoP::NetworkNameTlv::Init((ot::MeshCoP::NetworkNameTlv *)v30);
          uint64_t v7 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
          ot::MeshCoP::NetworkNameManager::GetNetworkName(v7);
          v23[0]  = ot::MeshCoP::NetworkName::GetAsData(v8);
          v23[1]  = v9;
          ot::MeshCoP::NetworkNameTlv::SetNetworkName((ot::MeshCoP::NetworkNameTlv *)v30, (const ot::MeshCoP::NameData *)v23);
          int v26 = ot::Tlv::AppendTo((ot::Tlv *)v30, v25);
          if (!v26)
          {
            uint64_t active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
            ot::MeshCoP::DatasetManager::Read(active, (ot::MeshCoP::Dataset *)v31);
            IgnoreError();
            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ActiveTimestampTlv>((uint64_t)v31);
            uint64_t v24 = v11;
            if (v11)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            else
            {
              ot::MeshCoP::ActiveTimestampTlv::Init((ot::MeshCoP::ActiveTimestampTlv *)v22);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v22, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::ChannelMaskTlv>((uint64_t)v31);
            uint64_t v24 = v12;
            if (v12)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            else
            {
              ot::MeshCoP::ChannelMaskBaseTlv::Init((ot::MeshCoP::ChannelMaskBaseTlv *)v21);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v21, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::PskcTlv>((uint64_t)v31);
            uint64_t v24 = v13;
            if (v13)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            else
            {
              ot::MeshCoP::PskcTlv::Init((ot::MeshCoP::PskcTlv *)v28);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v28, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            ot::MeshCoP::Dataset::GetTlv<ot::MeshCoP::SecurityPolicyTlv>((uint64_t)v31);
            uint64_t v24 = v14;
            if (v14)
            {
              int v26 = ot::Tlv::AppendTo(v24, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            else
            {
              ot::MeshCoP::SecurityPolicyTlv::Init((ot::MeshCoP::SecurityPolicyTlv *)v20);
              int v26 = ot::Tlv::AppendTo((ot::Tlv *)v20, v25);
              if (v26) {
                goto LABEL_24;
              }
            }
            uint64_t v18 = v25;
            long long v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
            CurrentKeySequence  = ot::KeyManager::GetCurrentKeySequence(v15);
            int v26 = ot::Tlv::Append<ot::MeshCoP::NetworkKeySequenceTlv>(v18, CurrentKeySequence);
          }
        }
      }
    }
  }
  else
  {
    int v26 = 3;
  }
LABEL_24:
  if (v26 && v25)
  {
    ot::Message::Free(v25);
    return 0;
  }
  return v25;
}

void ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::MeshCoP::JoinerRouter *a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v6 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(a1, v6, v5, a4);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::NetworkKeyTlv>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)5, a2, (const void *)0x10);
}

{
  return ot::Tlv::Append<ot::MeshCoP::NetworkKeyTlv>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::MeshLocalPrefixTlv>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)7, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::MeshCoP::MeshLocalPrefixTlv>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)2, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(a1, a2);
}

uint64_t ot::MeshCoP::NetworkNameTlv::Init(ot::MeshCoP::NetworkNameTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 16);
}

{
  return ot::MeshCoP::NetworkNameTlv::Init(this);
}

void *ot::MeshCoP::ActiveTimestampTlv::Init(ot::MeshCoP::ActiveTimestampTlv *this)
{
  return ot::Clearable<ot::MeshCoP::Timestamp>::Clear((ot::MeshCoP::ActiveTimestampTlv *)((char *)this + 2));
}

{
  return ot::MeshCoP::ActiveTimestampTlv::Init(this);
}

uint64_t ot::MeshCoP::ChannelMaskBaseTlv::Init(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 0);
}

{
  return ot::MeshCoP::ChannelMaskBaseTlv::Init(this);
}

uint64_t ot::MeshCoP::PskcTlv::Init(ot::MeshCoP::PskcTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 16);
}

{
  return ot::MeshCoP::PskcTlv::Init(this);
}

uint64_t ot::Tlv::Append<ot::MeshCoP::NetworkKeySequenceTlv>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 6u, a2);
}

{
  return ot::Tlv::Append<ot::MeshCoP::NetworkKeySequenceTlv>(a1, a2);
}

void ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::MeshCoP::JoinerRouter *a1, ot::Message *a2, uint64_t a3, int a4)
{
  ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust(a1);
  if (!a4 && a2 && ot::Coap::Message::GetCode(a2) == 68)
  {
    uint64_t v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    AverageRss  = ot::Message::GetAverageRss(a2);
    ot::Mac::Mac::UpdateJoinerRssiHistogram(v12, AverageRss);
    char v5 = ot::UriToString<(ot::Uri)20>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"JoinerRouter", "Receive %s response", v6, v7, v8, v9, v10, v11, v5);
  }
}

uint64_t ot::Message::Read<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x50u);
}

{
  return ot::Message::Read<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(a1, a2, a3);
}

uint64_t ot::Message::Append<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x50u);
}

{
  return ot::Message::Append<ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata>(a1, a2);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::JoinerRouter,&ot::MeshCoP::JoinerRouter::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(a1);
  return ot::MeshCoP::JoinerRouter::HandleTimer(v2);
}

uint64_t ot::MeshCoP::JoinerPskd::SetFrom(ot::MeshCoP::JoinerPskd *this, ot *a2)
{
  unsigned int v5 = 0;
  if (ot::MeshCoP::JoinerPskd::IsPskdValid(a2, (const char *)a2))
  {
    ot::Clearable<ot::MeshCoP::JoinerPskd>::Clear(this);
    unsigned __int16 v2 = ot::StringLength(a2, (const char *)0x21);
    memcpy(this, a2, v2);
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::MeshCoP::JoinerPskd::IsPskdValid(ot::MeshCoP::JoinerPskd *this, const char *a2)
{
  char v6 = 0;
  _c_3  = ot::StringLength(this, (const char *)0x21);
  if (_c_3 >= 6u && _c_3 <= 0x20u)
  {
    for (_c_1  = 0; _c_1 < (int)_c_3; ++_c_1)
    {
      _c  = *((unsigned char *)this + _c_1);
      if (!isdigit(_c) && !isupper(_c) || _c == 73 || _c == 79 || _c == 81 || _c == 90) {
        return v6 & 1;
      }
    }
    char v6 = 1;
  }
  return v6 & 1;
}

void *ot::Clearable<ot::MeshCoP::JoinerPskd>::Clear(void *a1)
{
  return memset(a1, 0, 0x21uLL);
}

{
  return ot::Clearable<ot::MeshCoP::JoinerPskd>::Clear(a1);
}

uint64_t ot::MeshCoP::JoinerPskd::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = 1;
  for (unsigned __int8 i = 0; i < 0x21uLL; ++i)
  {
    if (*(char *)(a1 + i) != *(char *)(a2 + i))
    {
      char v4 = 0;
      return v4 & 1;
    }
    if (!*(unsigned char *)(a1 + i)) {
      return v4 & 1;
    }
  }
  return v4 & 1;
}

int isupper(int _c)
{
  return __istype(_c, 0x8000uLL);
}

{
  return isupper(_c);
}

unsigned char *ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::MeshCoP::JoinerDiscerner *this, ot::Mac::ExtAddress *a2)
{
  return ot::Mac::ExtAddress::SetLocal(a2, 1);
}

BOOL ot::MeshCoP::JoinerDiscerner::CopyTo(ot::MeshCoP::JoinerDiscerner *this, ot::Mac::ExtAddress *a2)
{
  unsigned int v5 = (char *)a2 + 7;
  unsigned __int8 v4 = *((unsigned char *)this + 8);
  unint64_t v3 = *(void *)this;
  BOOL result = ot::MeshCoP::JoinerDiscerner::IsValid(this);
  if (!result) {
    __assert_rtn("CopyTo", "meshcop.cpp", 135, "IsValid()");
  }
  while (v4 >= 8u)
  {
    *unsigned int v5 = v3;
    v3 >>= 8;
    --v5;
    v4 -= 8;
  }
  if (v4)
  {
    *v5 &= ~((1 << v4) - 1);
    *v5 |= v3 & ((1 << v4) - 1);
  }
  return result;
}

BOOL ot::MeshCoP::JoinerDiscerner::Matches(ot::MeshCoP::JoinerDiscerner *this, const ot::Mac::ExtAddress *a2)
{
  if (!ot::MeshCoP::JoinerDiscerner::IsValid(this)) {
    __assert_rtn("Matches", "meshcop.cpp", 117, "IsValid()");
  }
  Masunsigned __int16 k = ot::MeshCoP::JoinerDiscerner::GetMask(this);
  return (ot::Encoding::BigEndian::ReadUint64(a2, v2) & Mask) == (*(void *)this & Mask);
}

uint64_t ot::MeshCoP::JoinerDiscerner::GetMask(ot::MeshCoP::JoinerDiscerner *this)
{
  return (1 << *((unsigned char *)this + 8)) - 1;
}

{
  return ot::MeshCoP::JoinerDiscerner::GetMask(this);
}

BOOL ot::MeshCoP::JoinerDiscerner::operator==(unsigned __int8 *a1, uint64_t a2)
{
  Masunsigned __int16 k = ot::MeshCoP::JoinerDiscerner::GetMask((ot::MeshCoP::JoinerDiscerner *)a1);
  BOOL v4 = 0;
  if (ot::MeshCoP::JoinerDiscerner::IsValid((ot::MeshCoP::JoinerDiscerner *)a1))
  {
    BOOL v4 = 0;
    if (a1[8] == *(unsigned __int8 *)(a2 + 8)) {
      return (*(void *)a1 & Mask) == (*(void *)a2 & Mask);
    }
  }
  return v4;
}

ot::StringWriter *ot::MeshCoP::JoinerDiscerner::ToString@<X0>(ot::MeshCoP::JoinerDiscerner *this@<X0>, ot::StringWriter *a2@<X8>)
{
  ot::String<(unsigned short)45>::String((uint64_t)a2);
  if (*((unsigned __int8 *)this + 8) > 0x10uLL)
  {
    if (*((unsigned __int8 *)this + 8) > 0x20uLL)
    {
      uint64_t v5 = ot::ToUlong(HIDWORD(*(void *)this));
      uint64_t v3 = ot::ToUlong(*(void *)this);
      ot::StringWriter::Append(a2, "0x%lx-%08lx", v5, v3);
    }
    else
    {
      uint64_t v2 = ot::ToUlong(*(void *)this);
      ot::StringWriter::Append(a2, "0x%08lx", v2);
    }
  }
  else
  {
    ot::StringWriter::Append(a2, "0x%04x", (unsigned __int16)*(void *)this);
  }
  return ot::StringWriter::Append(a2, "/len:%d", *((unsigned __int8 *)this + 8));
}

uint64_t ot::MeshCoP::SteeringData::Init(uint64_t this, unsigned __int8 a2)
{
  if (a2 > 0x10u) {
    __assert_rtn("Init", "meshcop.cpp", 191, "aLength <= kMaxLength");
  }
  *(unsigned char *)this  = a2;
  *(void *)(this + 1)  = 0;
  *(void *)(this + ot::Mle::Tlv::SetType(this, 9) = 0;
  return this;
}

uint64_t ot::MeshCoP::SteeringData::SetToPermitAllJoiners(ot::MeshCoP::SteeringData *this)
{
  uint64_t result = ot::MeshCoP::SteeringData::Init((uint64_t)this, 1u);
  *((unsigned char *)this + 1)  = -1;
  return result;
}

uint64_t ot::MeshCoP::SteeringData::UpdateBloomFilter(ot::MeshCoP::SteeringData *this, const ot::Mac::ExtAddress *a2)
{
  char v6 = this;
  uint64_t v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)a2, v4);
  return ot::MeshCoP::SteeringData::UpdateBloomFilter(this, v4);
}

uint64_t ot::MeshCoP::SteeringData::CalculateHashBitIndexes(unsigned __int8 *a1, _WORD *a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  ot::Crc16::Crc16(v8, 4129);
  ot::Crc16::Crc16(v7, 32773);
  char v6 = v10;
  uint64_t v5 = v10 + 8;
  while (v6 != v5)
  {
    unsigned __int8 v4 = *v6;
    ot::Crc16::Update(v8, *v6);
    ot::Crc16::Update(v7, v4);
    ++v6;
  }
  __int16 v2 = ot::Crc16::Get((ot::Crc16 *)v8);
  *uint64_t v9 = v2;
  uint64_t result = ot::Crc16::Get((ot::Crc16 *)v7);
  v9[1]  = result;
  return result;
}

uint64_t ot::MeshCoP::SteeringData::UpdateBloomFilter(ot::MeshCoP::SteeringData *a1, unsigned __int16 *a2)
{
  BOOL v8 = 0;
  if (*(unsigned char *)a1) {
    BOOL v8 = *(unsigned __int8 *)a1 <= 0x10u;
  }
  if (!v8) {
    __assert_rtn("UpdateBloomFilter", "meshcop.cpp", 220, "(mLength > 0) && (mLength <= kMaxLength)");
  }
  int v5 = *a2;
  NumBits  = ot::MeshCoP::SteeringData::GetNumBits(a1);
  ot::MeshCoP::SteeringData::SetBit(a1, v5 % NumBits);
  int v6 = a2[1];
  unsigned __int8 v3 = ot::MeshCoP::SteeringData::GetNumBits(a1);
  return ot::MeshCoP::SteeringData::SetBit(a1, v6 % v3);
}

uint64_t ot::MeshCoP::SteeringData::UpdateBloomFilter(ot::MeshCoP::SteeringData *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  int v6 = this;
  int v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(a2, v4);
  return ot::MeshCoP::SteeringData::UpdateBloomFilter(this, v4);
}

uint64_t ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner *a1, _WORD *a2)
{
  ot::Clearable<ot::Mac::ExtAddress>::Clear(&v5);
  ot::MeshCoP::JoinerDiscerner::CopyTo(a1, (ot::Mac::ExtAddress *)&v5);
  return ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)&v5, a2);
}

uint64_t ot::MeshCoP::SteeringData::SetBit(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  char v4 = ot::MeshCoP::SteeringData::BitFlag(this, a2);
  uint64_t result = ot::MeshCoP::SteeringData::BitIndex(this, a2);
  *((unsigned char *)this + result + 1) |= v4;
  return result;
}

{
  return ot::MeshCoP::SteeringData::SetBit(this, a2);
}

uint64_t ot::MeshCoP::SteeringData::GetNumBits(ot::MeshCoP::SteeringData *this)
{
  return (8 * *(unsigned char *)this);
}

{
  return ot::MeshCoP::SteeringData::GetNumBits(this);
}

BOOL ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData *this, const ot::Mac::ExtAddress *a2)
{
  int v6 = this;
  uint64_t v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes((unsigned __int8 *)a2, v4);
  return ot::MeshCoP::SteeringData::Contains(this, v4);
}

BOOL ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData *a1, unsigned __int16 *a2)
{
  BOOL v8 = 0;
  if (*(unsigned char *)a1)
  {
    int v6 = *a2;
    NumBits  = ot::MeshCoP::SteeringData::GetNumBits(a1);
    BOOL v8 = 0;
    if (ot::MeshCoP::SteeringData::GetBit(a1, v6 % NumBits))
    {
      int v5 = a2[1];
      unsigned __int8 v3 = ot::MeshCoP::SteeringData::GetNumBits(a1);
      return ot::MeshCoP::SteeringData::GetBit(a1, v5 % v3);
    }
  }
  return v8;
}

BOOL ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  int v6 = this;
  int v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(a2, v4);
  return ot::MeshCoP::SteeringData::Contains(this, v4);
}

BOOL ot::MeshCoP::SteeringData::GetBit(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  char v4 = *((unsigned char *)this + ot::MeshCoP::SteeringData::BitIndex(this, a2) + 1);
  return (v4 & ot::MeshCoP::SteeringData::BitFlag(this, a2)) != 0;
}

{
  return ot::MeshCoP::SteeringData::GetBit(this, a2);
}

uint64_t ot::Crc16::Get(ot::Crc16 *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return ot::Crc16::Get(this);
}

uint64_t ot::MeshCoP::SteeringData::DoesAllMatch(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  char v4 = 1;
  for (unsigned __int8 i = 0; i < (int)*(unsigned __int8 *)this; ++i)
  {
    if (*((unsigned __int8 *)this + i + 1) != a2)
    {
      char v4 = 0;
      return v4 & 1;
    }
  }
  return v4 & 1;
}

void ot::MeshCoP::ComputeJoinerId(ot::MeshCoP *this, const ot::Mac::ExtAddress *a2, ot::Mac::ExtAddress *a3)
{
  uint64_t v7 = this;
  int v6 = a2;
  ot::Crypto::Sha256::Sha256((ot::Crypto::Sha256 *)v5);
  ot::Crypto::Sha256::Start((ot::Crypto::Sha256 *)v5);
  ot::Crypto::Sha256::Update<ot::Mac::ExtAddress>((ot::Crypto::Sha256 *)v5, (uint64_t)v7);
  ot::Crypto::Sha256::Finish((ot::Crypto::Sha256 *)v5, (ot::Crypto::Sha256::Hash *)v8);
  char v4 = v6;
  ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v8);
  *char v4 = *v3;
  ot::Mac::ExtAddress::SetLocal(v6, 1);
  ot::Crypto::Sha256::~Sha256((ot::Crypto::Sha256 *)v5);
}

uint64_t ot::Crypto::Sha256::Update<ot::Mac::ExtAddress>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 8u);
}

{
  return ot::Crypto::Sha256::Update<ot::Mac::ExtAddress>(a1, a2);
}

uint64_t ot::MeshCoP::GetBorderAgentRloc(ot::MeshCoP *this, ot::ThreadNetif *a2, unsigned __int16 *a3)
{
  unsigned int v6 = 0;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v3, 9u);
  ot::As<ot::MeshCoP::BorderAgentLocatorTlv>();
  if (v4) {
    *(_WORD *)a2  = ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(v4);
  }
  else {
    return 23;
  }
  return v6;
}

uint64_t ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(ot::MeshCoP::BorderAgentLocatorTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(this);
}

uint64_t ot::MeshCoP::GeneratePskc(long long *a1, ot::MeshCoP::NetworkName *a2, void *a3, char *a4)
{
  unsigned int v14 = (ot *)a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  uint64_t v11 = a4;
  unsigned int v10 = 0;
  strcpy((char *)&__n_5, "Thread");
  if (ot::IsValidUtf8String((ot *)a1, (const char *)a2))
  {
    __n_1  = ot::StringLength(v14, (const char *)0x100);
    ot::MeshCoP::NetworkName::GetAsCString(v13);
    __unsigned __int8 n = ot::StringLength(v4, (const char *)0x11);
    if (__n_1 >= 6u && __n_1 <= 0xFFu && __n <= 0x10u)
    {
      *(_DWORD *)&unsigned __int8 v16[8] = 0;
      v17[0]  = 0;
      *(void *)((char *)v17 + 6)  = 0;
      int v15 = __n_5;
      *(void *)int v16 = WORD2(__n_5);
      *(void *)&v16[2]  = *v12;
      ot::MeshCoP::NetworkName::GetAsCString(v13);
      memcpy(&v16[10], v5, __n);
      j__otPlatCryptoPbkdf2GenerateKey((long long *)v14, __n_1, &v15, __n + 14, 0x4000u, 0x10u, v11);
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 7;
  }
  return v10;
}

void ot::MeshCoP::LogError(char a1, int a2)
{
  if (a2)
  {
    if (a2 != 24)
    {
      ot::ErrorToString(a2);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshCoP", "Failed to %s: %s", v2, v3, v4, v5, v6, v7, a1);
    }
  }
}

uint64_t ot::MeshCoP::SteeringData::BitFlag(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  return (1 << (a2 % 8));
}

{
  return ot::MeshCoP::SteeringData::BitFlag(this, a2);
}

uint64_t ot::MeshCoP::SteeringData::BitIndex(ot::MeshCoP::SteeringData *this, unsigned __int8 a2)
{
  return (*(unsigned char *)this - 1 - a2 / 8);
}

{
  return ot::MeshCoP::SteeringData::BitIndex(this, a2);
}

ot::MeshCoP::Leader *ot::MeshCoP::Leader::Leader(ot::MeshCoP::Leader *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t v2 = ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::TimerMilliIn((ot::MeshCoP::Leader *)((char *)this + 8), a2);
  *((_DWORD *)this + ot::Tlv::SetLength((uint64_t)this, 8) = 30000;
  Uint16  = ot::Random::NonCrypto::GetUint16(v2);
  uint64_t result = this;
  *((_WORD *)this + 51)  = Uint16;
  return result;
}

{
  ot::MeshCoP::Leader::Leader(this, a2);
  return this;
}

void ot::MeshCoP::Leader::HandleTimer(ot::MeshCoP::Leader *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v1)) {
    ot::MeshCoP::Leader::ResignCommissioner(this);
  }
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::HandleTimer);
  return a1;
}

void ot::MeshCoP::Leader::HandleTmf<(ot::Uri)23>(_WORD *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v27 = -1;
  char v3 = ot::UriToString<(ot::Uri)23>();
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Received %s", v4, v5, v6, v7, v8, v9, v3);
  uint64_t v25 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
  PeerAddr  = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
  if (ot::Mle::Mle::IsRoutingLocator(v25, PeerAddr)
    && !ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(a2, __src, v11, v12, v13))
  {
    if (ot::Timer::IsRunning((ot::Timer *)(a1 + 4)))
    {
      CommissionerIdunsigned __int8 Length = ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength((ot::MeshCoP::CommissionerIdTlv *)__src);
      if (CommissionerIdLength != ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength((ot::MeshCoP::CommissionerIdTlv *)(a1 + 18))) {
        goto LABEL_12;
      }
      __s1  = (char *)ot::MeshCoP::CommissionerIdTlv::GetCommissionerId((ot::MeshCoP::CommissionerIdTlv *)__src);
      __s2  = (char *)ot::MeshCoP::CommissionerIdTlv::GetCommissionerId((ot::MeshCoP::CommissionerIdTlv *)(a1 + 18));
      unsigned __int8 v14 = ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength((ot::MeshCoP::CommissionerIdTlv *)__src);
      if (strncmp(__s1, __s2, v14)) {
        goto LABEL_12;
      }
      ot::MeshCoP::Leader::ResignCommissioner((ot::MeshCoP::Leader *)a1);
    }
    ot::MeshCoP::BorderAgentLocatorTlv::Init((ot::MeshCoP::BorderAgentLocatorTlv *)v31);
    int v15 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v15);
    unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator((ot::MeshCoP::BorderAgentLocatorTlv *)v31, Locator);
    ot::MeshCoP::CommissionerSessionIdTlv::Init((ot::MeshCoP::CommissionerSessionIdTlv *)v32);
    unsigned __int16 v18 = a1[51] + 1;
    a1[51]  = v18;
    ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId((ot::MeshCoP::CommissionerSessionIdTlv *)v32, v18);
    ot::MeshCoP::SteeringDataTlv::Init((ot::MeshCoP::SteeringDataTlv *)v33);
    ot::Tlv::SetLength((uint64_t)v33, 1);
    ot::MeshCoP::SteeringDataTlv::Clear((ot::MeshCoP::SteeringDataTlv *)v33);
    uint64_t v21 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    unsigned __int8 Length = ot::MeshCoP::CommissioningData::GetLength((ot::MeshCoP::CommissioningData *)v31);
    if (!ot::NetworkData::LeaderBase::SetCommissioningData(v21, v31, Length))
    {
      memcpy(a1 + 18, __src, 0x42uLL);
      if (ot::Tlv::GetLength((ot::Tlv *)(a1 + 18)) > 0x40u) {
        ot::Tlv::SetLength((uint64_t)(a1 + 18), 64);
      }
      unsigned __int8 v27 = 1;
      unsigned int v20 = ot::Time::SecToMsec((ot::Time *)0x32);
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 4), v20);
    }
  }
LABEL_12:
  ot::MeshCoP::Leader::SendPetitionResponse(a1, a2, a3, v27);
}

uint64_t ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(a1, a2, a3, a4, a5);
}

{
  return ot::MeshCoP::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength(ot::MeshCoP::CommissionerIdTlv *this)
{
  if (ot::Tlv::GetLength(this) > 0x40uLL) {
    return 64;
  }
  else {
    return ot::Tlv::GetLength(this);
  }
}

{
  return ot::MeshCoP::CommissionerIdTlv::GetCommissionerIdLength(this);
}

uint64_t ot::MeshCoP::CommissionerIdTlv::GetCommissionerId(ot::MeshCoP::CommissionerIdTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::MeshCoP::CommissionerIdTlv::GetCommissionerId(this);
}

void ot::MeshCoP::Leader::ResignCommissioner(ot::MeshCoP::Leader *this)
{
  ot::TimerMilli::Stop((ot::MeshCoP::Leader *)((char *)this + 8));
  ot::MeshCoP::Leader::SetEmptyCommissionerData(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "commissioner inactive", v1, v2, v3, v4, v5, v6, (char)this);
}

uint64_t ot::MeshCoP::BorderAgentLocatorTlv::Init(ot::MeshCoP::BorderAgentLocatorTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return ot::MeshCoP::BorderAgentLocatorTlv::Init(this);
}

uint64_t ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator(ot::MeshCoP::BorderAgentLocatorTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator(this, a2);
}

uint64_t ot::MeshCoP::CommissionerSessionIdTlv::Init(ot::MeshCoP::CommissionerSessionIdTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return ot::MeshCoP::CommissionerSessionIdTlv::Init(this);
}

uint64_t ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId(ot::MeshCoP::CommissionerSessionIdTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId(this, a2);
}

void ot::MeshCoP::SteeringDataTlv::Init(ot::MeshCoP::SteeringDataTlv *this)
{
}

{
  ot::MeshCoP::SteeringDataTlv::Init(this);
}

void ot::MeshCoP::SteeringDataTlv::Clear(ot::MeshCoP::SteeringDataTlv *this)
{
  SteeringDataunsigned __int8 Length = ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
  bzero((char *)this + 2, SteeringDataLength);
}

{
  ot::MeshCoP::SteeringDataTlv::Clear(this);
}

uint64_t ot::MeshCoP::CommissioningData::GetLength(ot::MeshCoP::CommissioningData *this)
{
  uint64_t v2 = ot::Tlv::GetLength(this) + 4;
  uint64_t v4 = v2 + ot::Tlv::GetLength((ot::MeshCoP::CommissioningData *)((char *)this + 4)) + 2;
  return (v4 + ot::Tlv::GetLength((ot::MeshCoP::CommissioningData *)((char *)this + 8)));
}

{
  return ot::MeshCoP::CommissioningData::GetLength(this);
}

void ot::MeshCoP::Leader::SendPetitionResponse(unsigned __int16 *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
  unsigned __int8 v14 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v14)
  {
    int v15 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(v14, a4);
    if (!v15
      && (!ot::Timer::IsRunning((ot::Timer *)(a1 + 4)) || (int v15 = ot::Tlv::AppendTo((ot::Tlv *)(a1 + 18), v14)) == 0)
      && (a4 != 1 || (int v15 = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v14, a1[51])) == 0))
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
      int v15 = ot::Coap::CoapBase::SendMessage(v5, v14, a3);
      if (!v15)
      {
        char v6 = ot::UriToString<(ot::Uri)23>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Sent %s response", v7, v8, v9, v10, v11, v12, v6);
      }
    }
  }
  else
  {
    int v15 = 3;
  }
  if (v15 && v14) {
    ot::Message::Free(v14);
  }
  ot::MeshCoP::LogError((char)"send petition response", v15);
}

void ot::MeshCoP::Leader::HandleTmf<(ot::Uri)22>(unsigned __int16 *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v27 = a1;
  int v26 = a2;
  uint64_t v25 = a3;
  char v24 = 0;
  unsigned __int16 v23 = 0;
  char v3 = ot::UriToString<(ot::Uri)22>();
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Received %s", v4, v5, v6, v7, v8, v9, v3);
  if (!ot::Tlv::Find<ot::MeshCoP::StateTlv>(v26, &v24, v10, v11)
    && !ot::Tlv::Find<ot::MeshCoP::CommissionerSessionIdTlv>(v26, &v23, v12, v13))
  {
    uint64_t v14 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v14, 9u);
    ot::As<ot::MeshCoP::BorderAgentLocatorTlv>();
    uint64_t v22 = v15;
    if (v15 && v23 == a1[51])
    {
      if (v24 == 1)
      {
        PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v25);
        Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
        unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
        if (Locator != (unsigned __int16)ot::MeshCoP::BorderAgentLocatorTlv::GetBorderAgentLocator(v22))
        {
          ot::MeshCoP::BorderAgentLocatorTlv::SetBorderAgentLocator(v22, Locator);
          unsigned __int16 v18 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
          ot::NetworkData::Leader::IncrementVersion(v18);
        }
        unsigned int v19 = ot::Time::SecToMsec((ot::Time *)0x32);
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 4), v19);
        ot::MeshCoP::Leader::SendKeepAliveResponse((ot::InstanceLocator *)a1, v26, v25, 1u);
      }
      else
      {
        ot::MeshCoP::Leader::ResignCommissioner((ot::MeshCoP::Leader *)a1);
        ot::MeshCoP::Leader::SendKeepAliveResponse((ot::InstanceLocator *)a1, v26, v25, 0xFFu);
      }
    }
    else
    {
      ot::MeshCoP::Leader::SendKeepAliveResponse((ot::InstanceLocator *)a1, v26, v25, 0xFFu);
    }
  }
}

void ot::MeshCoP::Leader::SendKeepAliveResponse(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v14)
  {
    int v15 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(v14, a4);
    if (!v15)
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v15 = ot::Coap::CoapBase::SendMessage(v5, v14, a3);
      if (!v15)
      {
        char v6 = ot::UriToString<(ot::Uri)22>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Sent %s response", v7, v8, v9, v10, v11, v12, v6);
      }
    }
  }
  else
  {
    int v15 = 3;
  }
  if (v15 && v14) {
    ot::Message::Free(v14);
  }
  ot::MeshCoP::LogError((char)"send keep alive response", v15);
}

void ot::MeshCoP::Leader::SendDatasetChanged(ot::MeshCoP::Leader *this, __n128 *a2)
{
  uint64_t v17 = this;
  int v16 = a2;
  int v15 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v14, Instance);
  char v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v13 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v3, 0x11u);
  if (v13)
  {
    ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v14, v16);
    uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    int v15 = ot::Coap::CoapBase::SendMessage(v4, v13, (const ot::Ip6::MessageInfo *)v14);
    if (!v15)
    {
      char v5 = ot::UriToString<(ot::Uri)17>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoPLeader", "Sent %s", v6, v7, v8, v9, v10, v11, v5);
    }
  }
  else
  {
    int v15 = 3;
  }
  if (v15 && v13) {
    ot::Message::Free(v13);
  }
  ot::MeshCoP::LogError((char)"send dataset changed", v15);
}

uint64_t ot::MeshCoP::Leader::SetDelayTimerMinimal(ot::MeshCoP::Leader *this, unsigned int a2)
{
  unsigned int v3 = 0;
  if (a2 && a2 < 0x493E0) {
    *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 8) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

uint64_t ot::MeshCoP::Leader::GetDelayTimerMinimal(ot::MeshCoP::Leader *this)
{
  return *((unsigned int *)this + 8);
}

void ot::MeshCoP::Leader::SetEmptyCommissionerData(ot::MeshCoP::Leader *this)
{
  uint64_t v6 = this;
  ot::MeshCoP::CommissionerSessionIdTlv::Init((ot::MeshCoP::CommissionerSessionIdTlv *)v5);
  unsigned __int16 v1 = *((_WORD *)this + 51) + 1;
  *((_WORD *)this + 51)  = v1;
  ot::MeshCoP::CommissionerSessionIdTlv::SetCommissionerSessionId((ot::MeshCoP::CommissionerSessionIdTlv *)v5, v1);
  uint64_t v4 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char Length = ot::Tlv::GetLength((ot::Tlv *)v5);
  ot::NetworkData::LeaderBase::SetCommissioningData(v4, v5, Length + 2);
  IgnoreError();
}

uint64_t ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(ot::MeshCoP::SteeringDataTlv *this)
{
  if (ot::Tlv::GetLength(this) > 0x10uLL) {
    return 16;
  }
  else {
    return ot::Tlv::GetLength(this);
  }
}

{
  return ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
}

uint64_t ot::TimerMilliIn<ot::MeshCoP::Leader,&ot::MeshCoP::Leader::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshCoP::Leader::HandleTimer)(v2);
}

uint64_t ot::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xA, 0x42u, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::MeshCoP::CommissionerIdTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv *this, const ot::MeshCoP::Tlv *a2)
{
  IsValid  = 1;
  unsigned __int8 Type = ot::MeshCoP::Tlv::GetType(this);
  if (Type)
  {
    uint64_t v4 = Type;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        ot::As<ot::MeshCoP::ChannelTlv>();
        IsValid  = ot::MeshCoP::ChannelTlv::IsValid(v5) & 1;
        break;
      case 1:
        ot::As<ot::MeshCoP::PanIdTlv>();
        IsValid  = ot::MeshCoP::PanIdTlv::IsValid(v7);
        break;
      case 2:
        ot::As<ot::MeshCoP::ExtendedPanIdTlv>();
        IsValid  = ot::MeshCoP::ExtendedPanIdTlv::IsValid(v8);
        break;
      case 3:
        ot::As<ot::MeshCoP::NetworkNameTlv>();
        IsValid  = ot::MeshCoP::NetworkNameTlv::IsValid(v9) & 1;
        break;
      case 4:
        ot::As<ot::MeshCoP::PskcTlv>();
        IsValid  = ot::MeshCoP::PskcTlv::IsValid(v11);
        break;
      case 5:
        ot::As<ot::MeshCoP::NetworkKeyTlv>();
        IsValid  = ot::MeshCoP::NetworkKeyTlv::IsValid(v10);
        break;
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
        return IsValid & 1;
      case 7:
        ot::As<ot::MeshCoP::MeshLocalPrefixTlv>();
        IsValid  = ot::MeshCoP::MeshLocalPrefixTlv::IsValid(v12);
        break;
      case 12:
        ot::As<ot::MeshCoP::SecurityPolicyTlv>();
        IsValid  = ot::MeshCoP::SecurityPolicyTlv::IsValid(v13);
        break;
      case 53:
        ot::As<ot::MeshCoP::ChannelMaskTlv>();
        IsValid  = ot::MeshCoP::ChannelMaskBaseTlv::IsValid(v14) & 1;
        break;
      case 74:
        ot::As<ot::MeshCoP::WakeupChannelTlv>();
        IsValid  = ot::MeshCoP::WakeupChannelTlv::IsValid(v6) & 1;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return IsValid & 1;
}

uint64_t ot::MeshCoP::ChannelTlv::IsValid(ot::MeshCoP::ChannelTlv *this)
{
  char v3 = 0;
  if (ot::Tlv::GetLength(this) == 3
    && *((unsigned __int8 *)this + 2) < 0x20uLL
    && ((1 << *((unsigned char *)this + 2)) & 1) != 0
    && (unsigned __int16)ot::MeshCoP::ChannelTlv::GetChannel(this) >= 0xBu
    && (unsigned __int16)ot::MeshCoP::ChannelTlv::GetChannel(this) <= 0x19u)
  {
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t ot::MeshCoP::WakeupChannelTlv::IsValid(ot::MeshCoP::WakeupChannelTlv *this)
{
  char v3 = 0;
  if (ot::Tlv::GetLength(this) == 3
    && *((unsigned __int8 *)this + 2) < 0x20uLL
    && ((1 << *((unsigned char *)this + 2)) & 1) != 0
    && (unsigned __int16)ot::MeshCoP::WakeupChannelTlv::GetChannel(this) >= 0xBu
    && (unsigned __int16)ot::MeshCoP::WakeupChannelTlv::GetChannel(this) <= 0x19u)
  {
    char v3 = 1;
  }
  return v3 & 1;
}

BOOL ot::MeshCoP::PanIdTlv::IsValid(ot::MeshCoP::PanIdTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return ot::MeshCoP::PanIdTlv::IsValid(this);
}

BOOL ot::MeshCoP::ExtendedPanIdTlv::IsValid(ot::MeshCoP::ExtendedPanIdTlv *this)
{
  return ot::Tlv::GetLength(this) >= 8uLL;
}

{
  return ot::MeshCoP::ExtendedPanIdTlv::IsValid(this);
}

uint64_t ot::MeshCoP::NetworkNameTlv::IsValid(ot::MeshCoP::NetworkNameTlv *this)
{
  unsigned __int8 Length = ot::Tlv::GetLength(this);
  return ot::IsValidUtf8String((ot::MeshCoP::NetworkNameTlv *)((char *)this + 2), (const char *)Length) & 1;
}

BOOL ot::MeshCoP::NetworkKeyTlv::IsValid(ot::MeshCoP::NetworkKeyTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x10uLL;
}

{
  return ot::MeshCoP::NetworkKeyTlv::IsValid(this);
}

BOOL ot::MeshCoP::PskcTlv::IsValid(ot::MeshCoP::PskcTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x10uLL;
}

{
  return ot::MeshCoP::PskcTlv::IsValid(this);
}

BOOL ot::MeshCoP::MeshLocalPrefixTlv::IsValid(ot::MeshCoP::MeshLocalPrefixTlv *this)
{
  return ot::Tlv::GetLength(this) >= 8uLL;
}

{
  return ot::MeshCoP::MeshLocalPrefixTlv::IsValid(this);
}

BOOL ot::MeshCoP::SecurityPolicyTlv::IsValid(ot::MeshCoP::SecurityPolicyTlv *this)
{
  BOOL v3 = 0;
  if (ot::Tlv::GetLength(this) >= 2uLL) {
    return ot::MeshCoP::SecurityPolicyTlv::GetFlagsLength(this) != 0;
  }
  return v3;
}

uint64_t ot::MeshCoP::ChannelMaskBaseTlv::IsValid(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  FirstEntry  = ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(this);
  ot::MeshCoP::Tlv::GetNext(this);
  unint64_t v6 = v1;
  char v5 = 0;
  if (FirstEntry)
  {
    while ((unint64_t)FirstEntry < v6)
    {
      if ((unint64_t)FirstEntry + 2 > v6 || ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry) > v6) {
        return v5 & 1;
      }
      ChannelPage  = ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage(FirstEntry);
      if ((!ChannelPage || ChannelPage == 2) && !ot::MeshCoP::ChannelMaskEntry::IsValid(FirstEntry)) {
        return v5 & 1;
      }
      FirstEntry  = (ot::MeshCoP::ChannelMaskEntryBase *)ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry);
    }
    char v5 = 1;
  }
  return v5 & 1;
}

ot::Tlv *ot::MeshCoP::Tlv::FindTlv(ot::Tlv *a1, unsigned __int16 a2, unsigned __int8 a3)
{
  unint64_t v6 = (unint64_t)a1 + a2;
  for (unsigned __int8 i = a1; (unint64_t)i < v6; unsigned __int8 i = v4)
  {
    if ((unint64_t)i + 2 > v6) {
      return 0;
    }
    if (ot::Tlv::IsExtended(i) && (unint64_t)i + 4 > v6) {
      return 0;
    }
    ot::MeshCoP::Tlv::GetNext(i);
    if (v3 > v6) {
      return 0;
    }
    if (a3 == ot::MeshCoP::Tlv::GetType(i)) {
      return i;
    }
    ot::MeshCoP::Tlv::GetNext(i);
  }
  return 0;
}

uint64_t ot::MeshCoP::NetworkNameTlv::GetNetworkName(ot::MeshCoP::NetworkNameTlv *this)
{
  unsigned __int8 Length = ot::Tlv::GetLength(this);
  if (Length > 0x10uLL) {
    unsigned __int8 Length = 16;
  }
  ot::MeshCoP::NameData::NameData((ot::MeshCoP::NameData *)&v4, (const char *)this + 2, Length);
  return v4;
}

uint64_t ot::MeshCoP::NetworkNameTlv::SetNetworkName(ot::MeshCoP::NetworkNameTlv *this, const ot::MeshCoP::NameData *a2)
{
  char v4 = ot::MeshCoP::NameData::CopyTo(a2, (char *)this + 2, 16);
  return ot::Tlv::SetLength((uint64_t)this, v4);
}

void *ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringDataTlv *this, ot::MeshCoP::SteeringData *a2)
{
  SteeringDataunsigned __int8 Length = ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
  ot::MeshCoP::SteeringData::Init((uint64_t)a2, SteeringDataLength);
  __dst  = (void *)ot::MeshCoP::SteeringData::GetData(a2);
  unsigned __int8 v3 = ot::MeshCoP::SteeringDataTlv::GetSteeringDataLength(this);
  return memcpy(__dst, (char *)this + 2, v3);
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::GetFlagsLength(ot::MeshCoP::SecurityPolicyTlv *this)
{
  return (ot::Tlv::GetLength(this) - 2);
}

{
  return ot::MeshCoP::SecurityPolicyTlv::GetFlagsLength(this);
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy(ot::MeshCoP::SecurityPolicyTlv *this)
{
  ot::SecurityPolicy::SecurityPolicy((ot::SecurityPolicy *)&v5);
  Flagsunsigned __int8 Length = ot::MeshCoP::SecurityPolicyTlv::GetFlagsLength(this);
  unsigned __int8 v4 = ot::Min<unsigned char>(2u, FlagsLength);
  LOWORD(v5)  = ot::MeshCoP::SecurityPolicyTlv::GetRotationTime(this);
  ot::SecurityPolicy::SetFlags((ot::SecurityPolicy *)&v5, (char *)this + 4, v4);
  return v5;
}

ot::SecurityPolicy *ot::SecurityPolicy::SecurityPolicy(ot::SecurityPolicy *this)
{
  return this;
}

{
  ot::SecurityPolicy::SetToDefault(this);
  return this;
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::GetRotationTime(ot::MeshCoP::SecurityPolicyTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::MeshCoP::SecurityPolicyTlv::GetRotationTime(this);
}

void ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy(ot::MeshCoP::SecurityPolicyTlv *this, const ot::SecurityPolicy *a2)
{
}

uint64_t ot::MeshCoP::SecurityPolicyTlv::SetRotationTime(ot::MeshCoP::SecurityPolicyTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::MeshCoP::SecurityPolicyTlv::SetRotationTime(this, a2);
}

uint64_t ot::MeshCoP::ChannelTlv::SetChannel(ot::MeshCoP::ChannelTlv *this, unsigned __int16 a2)
{
  ot::MeshCoP::ChannelTlv::SetChannelPage((uint64_t)this, 0);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 3)  = result;
  return result;
}

uint64_t ot::MeshCoP::ChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return ot::MeshCoP::ChannelTlv::SetChannelPage(this, a2);
}

uint64_t ot::MeshCoP::WakeupChannelTlv::SetChannel(ot::MeshCoP::WakeupChannelTlv *this, unsigned __int16 a2)
{
  ot::MeshCoP::WakeupChannelTlv::SetChannelPage((uint64_t)this, 0);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 3)  = result;
  return result;
}

uint64_t ot::MeshCoP::WakeupChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a2;
  return this;
}

{
  return ot::MeshCoP::WakeupChannelTlv::SetChannelPage(this, a2);
}

ot::MeshCoP::ChannelMaskEntryBase *ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  uint64_t Value = 0;
  if (ot::Tlv::GetLength(this) >= 2uLL)
  {
    uint64_t Value = (ot::MeshCoP::ChannelMaskEntryBase *)ot::Tlv::GetValue(this);
    int Length = ot::Tlv::GetLength(this);
    if (Length < (unsigned __int16)ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize(Value)) {
      return 0;
    }
  }
  return Value;
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetNext(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return (uint64_t)this + (unsigned __int16)ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize(this);
}

{
  return ot::MeshCoP::ChannelMaskEntryBase::GetNext(this);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage(this);
}

BOOL ot::MeshCoP::ChannelMaskEntry::IsValid(ot::MeshCoP::ChannelMaskEntry *this)
{
  return ot::MeshCoP::ChannelMaskEntryBase::GetMaskLength(this) == 4;
}

{
  return ot::MeshCoP::ChannelMaskEntry::IsValid(this);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return (unsigned __int16)(*((unsigned __int8 *)this + 1) + 2);
}

{
  return ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize(this);
}

void ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(ot::MeshCoP::ChannelMaskBaseTlv *this)
{
  ot::AsConst<ot::MeshCoP::ChannelMaskBaseTlv>();
  ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(v1);
  ot::AsNonConst<ot::MeshCoP::ChannelMaskEntryBase>();
}

uint64_t ot::MeshCoP::ChannelMaskTlv::SetChannelMask(ot::MeshCoP::ChannelMaskTlv *this, int a2)
{
  char v6 = 0;
  ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(this);
  unsigned int v5 = v2;
  if ((a2 & 0x7FFF800) != 0)
  {
    if (!v2) {
      __assert_rtn("SetChannelMask", "meshcop_tlvs.cpp", 336, "entry != nullptr");
    }
    ot::MeshCoP::ChannelMaskEntry::Init(v2);
    ot::MeshCoP::ChannelMaskEntryBase::SetChannelPage(v5, 0);
    ot::MeshCoP::ChannelMaskEntry::SetMask(v5, a2 & 0x7FFF800);
    char v6 = 6;
  }
  return ot::Tlv::SetLength((uint64_t)this, v6);
}

uint64_t ot::MeshCoP::ChannelMaskEntry::Init(ot::MeshCoP::ChannelMaskEntry *this)
{
  return ot::MeshCoP::ChannelMaskEntryBase::SetMaskLength((uint64_t)this, 4);
}

{
  return ot::MeshCoP::ChannelMaskEntry::Init(this);
}

unsigned char *ot::MeshCoP::ChannelMaskEntryBase::SetChannelPage(unsigned char *this, char a2)
{
  *this  = a2;
  return this;
}

{
  return ot::MeshCoP::ChannelMaskEntryBase::SetChannelPage(this, a2);
}

uint64_t ot::MeshCoP::ChannelMaskEntry::SetMask(ot::MeshCoP::ChannelMaskEntry *this, unsigned int a2)
{
  uint64_t v2 = (ot::Encoding::BigEndian *)ot::Encoding::Reverse32((ot::Encoding *)a2);
  uint64_t result = ot::Encoding::BigEndian::HostSwap32(v2);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::MeshCoP::ChannelMaskEntry::SetMask(this, a2);
}

uint64_t ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::MeshCoP::ChannelMaskTlv *this)
{
  FirstEntry  = ot::MeshCoP::ChannelMaskBaseTlv::GetFirstEntry(this);
  ot::MeshCoP::Tlv::GetNext(this);
  unint64_t v5 = v1;
  unsigned int v4 = 0;
  if (FirstEntry)
  {
    while ((unint64_t)FirstEntry < v5
         && (unint64_t)FirstEntry + 2 <= v5
         && ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry) <= v5)
    {
      if (!ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage(FirstEntry)) {
        v4 |= ot::MeshCoP::ChannelMaskEntry::GetMask(FirstEntry) & 0x7FFF800;
      }
      FirstEntry  = (ot::MeshCoP::ChannelMaskEntryBase *)ot::MeshCoP::ChannelMaskEntryBase::GetNext(FirstEntry);
    }
  }
  return v4;
}

uint64_t ot::MeshCoP::ChannelMaskEntry::GetMask(ot::MeshCoP::ChannelMaskEntry *this)
{
  unint64_t v1 = (ot::Encoding *)ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
  return ot::Encoding::Reverse32(v1);
}

{
  return ot::MeshCoP::ChannelMaskEntry::GetMask(this);
}

uint64_t ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::MeshCoP::ChannelMaskTlv *this, const ot::Message *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v14 = this;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  unsigned __int16 v11 = 0;
  if (!ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)0x35, &v12, &v11, a5))
  {
    v11 += v12;
    while ((unint64_t)v12 + 2 <= v11)
    {
      ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(v14, v12, v10);
      IgnoreError();
      int v9 = v12;
      EntrySize  = ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize((ot::MeshCoP::ChannelMaskEntryBase *)v10);
      if (v9 + EntrySize > v11) {
        break;
      }
      if (!ot::MeshCoP::ChannelMaskEntryBase::GetChannelPage((ot::MeshCoP::ChannelMaskEntryBase *)v10))
      {
        ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(v14, v12, v10);
        IgnoreError();
        Masunsigned __int16 k = ot::MeshCoP::ChannelMaskEntry::GetMask((ot::MeshCoP::ChannelMaskEntry *)v10);
        v13 |= Mask & 0x7FFF800;
      }
      __int16 v7 = ot::MeshCoP::ChannelMaskEntryBase::GetEntrySize((ot::MeshCoP::ChannelMaskEntryBase *)v10);
      v12 += v7;
    }
  }
  return v13;
}

uint64_t ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return ot::Message::Read<ot::MeshCoP::ChannelMaskEntry>(a1, a2, a3);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::GetMaskLength(ot::MeshCoP::ChannelMaskEntryBase *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::MeshCoP::ChannelMaskEntryBase::GetMaskLength(this);
}

uint64_t ot::MeshCoP::ChannelMaskEntryBase::SetMaskLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1)  = a2;
  return this;
}

{
  return ot::MeshCoP::ChannelMaskEntryBase::SetMaskLength(this, a2);
}

uint64_t ot::Encoding::Reverse32(ot::Encoding *this)
{
  int v1 = (unsigned __int16)((((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F))) & 0xFF00FF00) >> 8) | ((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55))) & 0x33))) & 0xF))) << 8));
  return ((((((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F))) & 0xFF00FF00) >> 8) | (((((((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F0) >> 4) | (16 * (((((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0xCCCCCCCC) >> 2) | (4 * ((((this & 0xAAAAAAAA) >> 1) | (2 * (this & 0x55555555))) & 0x33333333))) & 0xF0F0F0F))) & 0xFF00FF) << 8)) & 0xFFFF0000) >> 16) | (v1 << 16);
}

{
  return ot::Encoding::Reverse32(this);
}

ot::PanIdQueryClient *ot::PanIdQueryClient::PanIdQueryClient(ot::PanIdQueryClient *this, ot::Instance *a2)
{
  return this;
}

{
  ot::PanIdQueryClient::PanIdQueryClient(this, a2);
  return this;
}

uint64_t ot::PanIdQueryClient::SendQuery(ot::PanIdQueryClient *this, unsigned __int16 a2, int a3, const ot::Ip6::Address *a4, void (*a5)(unsigned __int16, unsigned int, void *), uint64_t a6)
{
  unsigned __int16 v30 = this;
  unsigned __int16 v29 = a2;
  int v28 = a3;
  unsigned __int8 v27 = a4;
  int v26 = a5;
  uint64_t v25 = a6;
  inited  = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v22, Instance);
  uint64_t v21 = 0;
  __int16 v7 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
  if (ot::MeshCoP::Commissioner::IsActive(v7))
  {
    uint64_t v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    uint64_t v21 = ot::Coap::CoapBase::NewPriorityMessage(v8);
    if (v21)
    {
      inited  = ot::Coap::Message::InitAsPost(v21, v27, 0x1Au);
      if (!inited)
      {
        inited  = ot::Coap::Message::SetPayloadMarker(v21);
        if (!inited)
        {
          int v9 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
          unsigned __int16 SessionId = ot::MeshCoP::Commissioner::GetSessionId(v9);
          inited  = ot::Tlv::Append<ot::MeshCoP::CommissionerSessionIdTlv>(v21, SessionId);
          if (!inited)
          {
            ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v23);
            ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v23, v28);
            inited  = ot::Tlv::AppendTo((ot::Tlv *)v23, v21);
            if (!inited)
            {
              inited  = ot::Tlv::Append<ot::MeshCoP::PanIdTlv>(v21, v29);
              if (!inited)
              {
                ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v22, (__n128 *)v27);
                unsigned __int16 v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
                inited  = ot::Coap::CoapBase::SendMessage(v11, v21, (const ot::Ip6::MessageInfo *)v22);
                if (!inited)
                {
                  char v12 = ot::UriToString<(ot::Uri)26>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"PanIdQueryClnt", "Sent %s", v13, v14, v15, v16, v17, v18, v12);
                  ot::CallbackBase<void (*)(unsigned short,unsigned int,void *)>::Set(this, (uint64_t)v26, v25);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      inited  = 3;
    }
  }
  else
  {
    inited  = 13;
  }
  if (inited && v21) {
    ot::Message::Free(v21);
  }
  return inited;
}

uint64_t ot::Tlv::Append<ot::MeshCoP::PanIdTlv>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 1u, a2);
}

{
  return ot::Tlv::Append<ot::MeshCoP::PanIdTlv>(a1, a2);
}

void *ot::CallbackBase<void (*)(unsigned short,unsigned int,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(unsigned short,unsigned int,void *)>::Set(result, a2, a3);
}

void ot::PanIdQueryClient::HandleTmf<(ot::Uri)24>(ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int16 v29 = a1;
  int v28 = a2;
  unsigned __int8 v27 = a3;
  unsigned __int16 v26 = 0;
  ChannelMasunsigned __int16 k = 0;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)24>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"PanIdQueryClnt", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    if (!ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(v28, &v26, v10, v11))
    {
      ChannelMasunsigned __int16 k = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v28, v12, v13, v14, v15);
      if (ChannelMask)
      {
        ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned short &,unsigned int &>(a1, &v26, &ChannelMask);
        uint64_t v16 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        if (!ot::Coap::CoapBase::SendEmptyAck(v16, v28, v27))
        {
          char v17 = ot::UriToString<(ot::Uri)24>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"PanIdQueryClnt", "Sent %s response", v18, v19, v20, v21, v22, v23, v17);
        }
      }
    }
  }
}

void *ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned short &,unsigned int &>(void *result, unsigned __int16 *a2, unsigned int *a3)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short &,unsigned int &>((uint64_t)result, a2, a3);
  }
  return result;
}

{
  return ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<unsigned short &,unsigned int &>(result, a2, a3);
}

uint64_t ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short &,unsigned int &>(uint64_t a1, unsigned __int16 *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(unsigned short,unsigned int,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short &,unsigned int &>(a1, a2, a3);
}

BOOL ot::MeshCoP::Timestamp::ConvertTo(ot::MeshCoP::Timestamp *a1, uint64_t a2)
{
  *(void *)a2  = ot::MeshCoP::Timestamp::GetSeconds(a1);
  *(_WORD *)(a2 + ot::MeshCoP::Tlv::SetType(this, 8) = ot::MeshCoP::Timestamp::GetTicks(a1);
  BOOL result = ot::MeshCoP::Timestamp::GetAuthoritative(a1);
  *(unsigned char *)(a2 + 1ot::MeshCoP::ChannelMaskEntryBase::SetChannelPage(this, 0) = result;
  return result;
}

unint64_t ot::MeshCoP::Timestamp::GetSeconds(ot::MeshCoP::Timestamp *this)
{
  unint64_t v3 = (unint64_t)(unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this) << 32;
  return v3
       + ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
}

{
  return ot::MeshCoP::Timestamp::GetSeconds(this);
}

uint64_t ot::MeshCoP::Timestamp::GetTicks(ot::MeshCoP::Timestamp *this)
{
  return (int)(unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this
                                                                                               + 3)) >> 1;
}

{
  return ot::MeshCoP::Timestamp::GetTicks(this);
}

BOOL ot::MeshCoP::Timestamp::GetAuthoritative(ot::MeshCoP::Timestamp *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3)) & 1) != 0;
}

{
  return ot::MeshCoP::Timestamp::GetAuthoritative(this);
}

uint64_t ot::MeshCoP::Timestamp::SetFromTimestamp(ot::MeshCoP::Timestamp *a1, uint64_t a2)
{
  return ot::MeshCoP::Timestamp::SetAuthoritative(a1, *(unsigned char *)(a2 + 10) & 1);
}

uint64_t ot::MeshCoP::Timestamp::SetSeconds(ot::MeshCoP::Timestamp *this, uint64_t a2)
{
  unsigned int v4 = a2;
  *(_WORD *)this  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)WORD2(a2));
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)v4);
  *(_DWORD *)((char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::MeshCoP::Timestamp::SetSeconds(this, a2);
}

uint64_t ot::MeshCoP::Timestamp::SetTicks(ot::MeshCoP::Timestamp *this, __int16 a2)
{
  char v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 1u | (unsigned __int16)(2 * a2)));
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return ot::MeshCoP::Timestamp::SetTicks(this, a2);
}

uint64_t ot::MeshCoP::Timestamp::SetAuthoritative(ot::MeshCoP::Timestamp *this, char a2)
{
  char v5 = a2 & 1;
  __int16 v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 0xFFFE | v5 & 1u));
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return ot::MeshCoP::Timestamp::SetAuthoritative(this, a2);
}

uint64_t ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp *this, const ot::MeshCoP::Timestamp *a2, const ot::MeshCoP::Timestamp *a3)
{
  if (this)
  {
    if (a2) {
      return ot::MeshCoP::Timestamp::Compare(this, a2, a3);
    }
    else {
      return 1;
    }
  }
  else if (a2)
  {
    return -1;
  }
  else
  {
    return 0;
  }
}

{
  unint64_t v3;
  unsigned __int16 v4;
  BOOL v5;
  BOOL Authoritative;
  unsigned __int16 Ticks;
  unint64_t Seconds;
  unsigned int v10;

  Seconds  = ot::MeshCoP::Timestamp::GetSeconds(this);
  unint64_t v3 = ot::MeshCoP::Timestamp::GetSeconds(a2);
  uint64_t v10 = ot::ThreeWayCompare<unsigned long long>(Seconds, v3);
  if (!v10)
  {
    Ticks  = ot::MeshCoP::Timestamp::GetTicks(this);
    unsigned int v4 = ot::MeshCoP::Timestamp::GetTicks(a2);
    uint64_t v10 = ot::ThreeWayCompare<unsigned short>(Ticks, v4);
    if (!v10)
    {
      Authoritative  = ot::MeshCoP::Timestamp::GetAuthoritative(this);
      char v5 = ot::MeshCoP::Timestamp::GetAuthoritative(a2);
      return ot::ThreeWayCompare<BOOL>(Authoritative, v5);
    }
  }
  return v10;
}

uint64_t ot::ThreeWayCompare<unsigned long long>(unint64_t a1, unint64_t a2)
{
  if (a1 == a2)
  {
    return 0;
  }
  else if (a1 > a2)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<unsigned long long>(a1, a2);
}

uint64_t ot::ThreeWayCompare<BOOL>(char a1, char a2)
{
  if ((a1 & 1) == (a2 & 1))
  {
    return 0;
  }
  else if (a1)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<BOOL>(a1, a2);
}

uint64_t ot::MeshCoP::Timestamp::AdvanceRandomTicks(ot::MeshCoP::Timestamp *this)
{
  Ticks  = ot::MeshCoP::Timestamp::GetTicks(this);
  __int16 v5 = Ticks + ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)1, 0x7FFFu);
  if ((v5 & 0x7FFF) != 0)
  {
    Seconds  = ot::MeshCoP::Timestamp::GetSeconds(this);
    ot::MeshCoP::Timestamp::SetSeconds(this, Seconds + 1);
  }
  return ot::MeshCoP::Timestamp::SetTicks(this, v5);
}

unsigned __int16 *ot::Checksum::AddUint8(unsigned __int16 *this, unsigned __int8 a2)
{
  if (this[1]) {
    __int16 v2 = a2;
  }
  else {
    __int16 v2 = a2 << 8;
  }
  unsigned __int16 v3 = *this + v2;
  if (v3 < (int)*this) {
    ++v3;
  }
  *this  = v3;
  *((unsigned char *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = (*((unsigned char *)this + 2) ^ 1) & 1;
  return this;
}

unsigned __int16 *ot::Checksum::AddUint16(ot::Checksum *this, __int16 a2)
{
  unsigned __int8 v4 = a2;
  ot::Checksum::AddUint8((unsigned __int16 *)this, HIBYTE(a2));
  return ot::Checksum::AddUint8((unsigned __int16 *)this, v4);
}

unsigned __int16 *ot::Checksum::AddData(unsigned __int16 *this, const unsigned __int8 *a2, unsigned __int16 a3)
{
  unsigned __int16 v3 = this;
  for (unsigned __int16 i = 0; i < (int)a3; ++i)
    this  = ot::Checksum::AddUint8(v3, a2[i]);
  return this;
}

uint64_t ot::Checksum::WriteToMessage(ot::Checksum *this, unsigned __int16 a2, ot::Message *a3)
{
  uint64_t v6 = this;
  unsigned __int16 v5 = a2;
  *(void *)&v4[2]  = a3;
  *(_WORD *)unsigned __int8 v4 = ot::Checksum::GetValue(this);
  if (*(unsigned __int16 *)v4 != 0xFFFF) {
    *(_WORD *)unsigned __int8 v4 = ~*(_WORD *)v4;
  }
  *(_WORD *)unsigned __int8 v4 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)v4);
  return ot::Message::Write<unsigned short>(*(ot::Message **)&v4[2], v5, v4);
}

uint64_t ot::Checksum::GetValue(ot::Checksum *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::Checksum::GetValue(this);
}

uint64_t ot::Message::Write<unsigned short>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return ot::Message::Write<unsigned short>(a1, a2, a3);
}

uint64_t ot::Checksum::Calculate(ot::Checksum *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, unsigned __int8 a4, const ot::Message *a5)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  unsigned __int8 v19 = a4;
  uint64_t v18 = a5;
  unsigned __int16 v16 = 0;
  __int16 Length = ot::Message::GetLength(a5);
  unsigned __int16 v16 = Length - ot::Message::GetOffset(v18);
  ot::Ip6::Address::GetBytes(v21);
  ot::Checksum::AddData((unsigned __int16 *)this, v5, 0x10u);
  ot::Ip6::Address::GetBytes(v20);
  ot::Checksum::AddData((unsigned __int16 *)this, v6, 0x10u);
  ot::Checksum::AddUint16(this, v16);
  ot::Checksum::AddUint16(this, v19);
  uint64_t v15 = v18;
  unsigned __int16 Offset = ot::Message::GetOffset(v18);
  ot::Message::GetFirstChunk(v15, Offset, &v16, (ot::Message::Chunk *)v17);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    char v10 = v9 | ((unsigned __int16)result == 0);
    if (v10) {
      break;
    }
    unsigned int Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
    unsigned __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v17);
    ot::Checksum::AddData((unsigned __int16 *)this, Bytes, v11);
    ot::Message::GetNextChunk(v18, &v16, (ot::Message::Chunk *)v17);
  }
  return result;
}

uint64_t ot::Checksum::Calculate(ot::Checksum *this, const ot::Ip4::Address *a2, const ot::Ip4::Address *a3, unsigned __int8 a4, const ot::Message *a5)
{
  uint64_t v21 = this;
  uint64_t v20 = a2;
  unsigned __int8 v19 = a3;
  unsigned __int8 v18 = a4;
  char v17 = a5;
  __int16 Length = ot::Message::GetLength(a5);
  unsigned __int16 v15 = Length - ot::Message::GetOffset(v17);
  if (v18 != 1)
  {
    ot::Ip4::Address::GetBytes(v20);
    ot::Checksum::AddData((unsigned __int16 *)this, v5, 4u);
    ot::Ip4::Address::GetBytes(v19);
    ot::Checksum::AddData((unsigned __int16 *)this, v6, 4u);
    ot::Checksum::AddUint16(this, v18);
    ot::Checksum::AddUint16(this, v15);
  }
  unsigned __int16 Offset = ot::Message::GetOffset(v17);
  ot::Message::GetFirstChunk(v17, Offset, &v15, (ot::Message::Chunk *)v16);
  while (1)
  {
    uint64_t result = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v16);
    char v10 = v9 | ((unsigned __int16)result == 0);
    if (v10) {
      break;
    }
    unsigned int Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v16);
    unsigned __int16 v11 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v16);
    ot::Checksum::AddData((unsigned __int16 *)this, Bytes, v11);
    ot::Message::GetNextChunk(v17, &v15, (ot::Message::Chunk *)v16);
  }
  return result;
}

uint64_t ot::Checksum::VerifyMessageChecksum(ot::Checksum *this, const ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  char v9 = this;
  uint64_t v8 = a2;
  unsigned __int8 v7 = a3;
  ot::Checksum::Checksum((ot::Checksum *)v6);
  PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v8);
  SockAddr  = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v8);
  ot::Checksum::Calculate((ot::Checksum *)v6, PeerAddr, SockAddr, v7, v9);
  if ((unsigned __int16)ot::Checksum::GetValue((ot::Checksum *)v6) == 0xFFFF) {
    return 0;
  }
  else {
    return 2;
  }
}

ot::Checksum *ot::Checksum::Checksum(ot::Checksum *this)
{
  return this;
}

ot::Checksum *ot::Checksum::UpdateMessageChecksum(ot::Checksum *this, ot::Message *a2, const ot::Ip6::Address *a3, const ot::Ip6::Address *a4)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  char v12 = a3;
  unsigned __int8 v11 = a4;
  __int16 v10 = 0;
  uint64_t result = ot::Checksum::Checksum((ot::Checksum *)v9);
  switch(v11)
  {
    case 6u:
      __int16 v10 = 16;
LABEL_8:
      unsigned __int8 v7 = v14;
      __int16 Offset = ot::Message::GetOffset(v14);
      __int16 v8 = 0;
      ot::Message::Write<unsigned short>(v7, v10 + Offset, (char *)&v8);
      ot::Checksum::Calculate((ot::Checksum *)v9, v13, v12, v11, v14);
      __int16 v6 = ot::Message::GetOffset(v14);
      return (ot::Checksum *)ot::Checksum::WriteToMessage((ot::Checksum *)v9, v10 + v6, v14);
    case 0x11u:
      __int16 v10 = 6;
      goto LABEL_8;
    case 0x3Au:
      __int16 v10 = 2;
      goto LABEL_8;
  }
  return result;
}

ot::Checksum *ot::Checksum::UpdateMessageChecksum(ot::Checksum *this, ot::Message *a2, const ot::Ip4::Address *a3, const ot::Ip4::Address *a4)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  char v12 = a3;
  unsigned __int8 v11 = a4;
  __int16 v10 = 0;
  uint64_t result = ot::Checksum::Checksum((ot::Checksum *)v9);
  switch(v11)
  {
    case 1u:
      __int16 v10 = 2;
      goto LABEL_8;
    case 6u:
      __int16 v10 = 16;
LABEL_8:
      unsigned __int8 v7 = v14;
      __int16 Offset = ot::Message::GetOffset(v14);
      __int16 v8 = 0;
      ot::Message::Write<unsigned short>(v7, v10 + Offset, (char *)&v8);
      ot::Checksum::Calculate((ot::Checksum *)v9, v13, v12, v11, v14);
      __int16 v6 = ot::Message::GetOffset(v14);
      return (ot::Checksum *)ot::Checksum::WriteToMessage((ot::Checksum *)v9, v10 + v6, v14);
    case 0x11u:
      __int16 v10 = 6;
      goto LABEL_8;
  }
  return result;
}

uint64_t ot::Checksum::UpdateIp4HeaderChecksum(ot::Checksum *this, ot::Ip4::Header *a2)
{
  __int16 v6 = this;
  ot::Checksum::Checksum((ot::Checksum *)v5);
  ot::Ip4::Header::SetChecksum(v6, 0);
  ot::Checksum::AddData(v5, (const unsigned __int8 *)v6, 0x14u);
  unsigned __int8 v4 = v6;
  __int16 Value = ot::Checksum::GetValue((ot::Checksum *)v5);
  return ot::Ip4::Header::SetChecksum(v4, ~Value);
}

uint64_t ot::Ip4::Header::SetChecksum(ot::Ip4::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 5)  = result;
  return result;
}

{
  return ot::Ip4::Header::SetChecksum(this, a2);
}

uint64_t ot::Checksum::Checksum(uint64_t this)
{
  *(_WORD *)this  = 0;
  *(unsigned char *)(this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
  return this;
}

ot::Dhcp6::Client *ot::Dhcp6::Client::Client(ot::Dhcp6::Client *this, ot::Instance *a2)
{
  *((void *)this + 43)  = 0;
  memset((char *)this + 152, 0, 0xC0uLL);
  return this;
}

{
  ot::Dhcp6::Client::Client(this, a2);
  return this;
}

void ot::Dhcp6::Client::HandleTrickleTimer(ot::Dhcp6::Client *this, ot::TrickleTimer *a2)
{
  __int16 v2 = (ot::Dhcp6::Client *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>(this);
  ot::Dhcp6::Client::HandleTrickleTimer(v2);
}

BOOL ot::Dhcp6::Client::MatchNetifAddressWithPrefix(ot::Dhcp6::Client *this, const ot::Ip6::Netif::UnicastAddress *a2, const ot::Ip6::Prefix *a3)
{
  return ot::Ip6::Netif::UnicastAddress::HasPrefix(this, a2);
}

BOOL ot::Ip6::Netif::UnicastAddress::HasPrefix(ot::Ip6::Netif::UnicastAddress *this, const ot::Ip6::Prefix *a2)
{
  int v5 = *((unsigned __int8 *)this + 16);
  BOOL v6 = 0;
  if (v5 == ot::Ip6::Prefix::GetLength(a2))
  {
    Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(this);
    return ot::Ip6::Address::MatchesPrefix(Address, a2);
  }
  return v6;
}

{
  return ot::Ip6::Netif::UnicastAddress::HasPrefix(this, a2);
}

void ot::Dhcp6::Client::UpdateAddresses(ot::Dhcp6::Client *this)
{
  unsigned __int8 v27 = this;
  char v26 = 0;
  char v25 = 0;
  unsigned int v24 = 0;
  unsigned __int8 v19 = (ot::Dhcp6::Client *)((char *)this + 152);
  unsigned __int8 v18 = (ot::Dhcp6::Client *)((char *)this + 344);
  while (v19 != v18)
  {
    if (*((unsigned char *)v19 + 42) && *((_DWORD *)v19 + 9))
    {
      char v26 = 0;
      unsigned int v24 = 0;
      while (1)
      {
        int v1 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v1, &v24, (ot::NetworkData::OnMeshPrefixConfig *)&v20))break; {
        if ((v22 & 0x10) != 0)
        }
        {
          uint64_t Prefix = (const ot::Ip6::Netif::UnicastAddress *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)&v20);
          if (ot::Dhcp6::Client::MatchNetifAddressWithPrefix(v19, Prefix, v3))
          {
            char v26 = 1;
            break;
          }
        }
      }
      if ((v26 & 1) == 0)
      {
        unsigned __int8 v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::RemoveUnicastAddress(v4, v19);
        *((unsigned char *)v19 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
      }
    }
    unsigned __int8 v19 = (ot::Dhcp6::Client *)((char *)v19 + 48);
  }
  unsigned int v24 = 0;
  while (1)
  {
    int v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v5, &v24, (ot::NetworkData::OnMeshPrefixConfig *)&v20))break; {
    char v17 = 0;
    }
    if ((v22 & 0x10) != 0)
    {
      char v25 = 1;
      char v26 = 0;
      for (unsigned __int16 i = (ot::Dhcp6::Client *)((char *)this + 152);
            i != (ot::Dhcp6::Client *)((char *)this + 344);
            unsigned __int16 i = (ot::Dhcp6::Client *)((char *)i + 48))
      {
        if (*((unsigned char *)i + 42))
        {
          char v12 = (const ot::Ip6::Netif::UnicastAddress *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)&v20);
          if (ot::Dhcp6::Client::MatchNetifAddressWithPrefix(i, v12, v13))
          {
            char v26 = 1;
            char v17 = i;
            break;
          }
        }
        else if (!v17)
        {
          char v17 = i;
        }
      }
      if (v26)
      {
LABEL_31:
        *((_WORD *)v17 + 2ot::Time::Time((ot::Dhcp6::Client *)((char *)this + 148), 0) = v23;
      }
      else
      {
        if (v17)
        {
          *(_OWORD *)char v17 = v20;
          *((unsigned char *)v17 + 16)  = v21;
          *((unsigned char *)v17 + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 1;
          *((_DWORD *)v17 + ot::MeshCoP::Tlv::SetType(this, 9) = 0;
          goto LABEL_31;
        }
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Dhcp6Client", "Insufficient memory for new DHCP prefix", v6, v7, v8, v9, v10, v11, v14);
      }
    }
  }
  if (v25) {
    ot::Dhcp6::Client::Start(this);
  }
  else {
    ot::Dhcp6::Client::Stop(this);
  }
}

uint64_t ot::Dhcp6::Client::Start(ot::Dhcp6::Client *this)
{
  uint64_t result = ot::Ip6::Udp::SocketHandle::IsBound((ot::Dhcp6::Client *)((char *)this + 8));
  if ((result & 1) == 0)
  {
    ot::Ip6::Udp::Socket::Open((ot::Dhcp6::Client *)((char *)this + 8), (uint64_t)ot::Dhcp6::Client::HandleUdpReceive, (uint64_t)this);
    IgnoreError();
    ot::Ip6::Udp::Socket::Bind((ot::Dhcp6::Client *)((char *)this + 8), 546, 1);
    IgnoreError();
    return ot::Dhcp6::Client::ProcessNextIdentityAssociation(this);
  }
  return result;
}

void ot::Dhcp6::Client::Stop(ot::Dhcp6::Client *this)
{
}

void ot::Dhcp6::Client::HandleUdpReceive(ot::Dhcp6::Client *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  unsigned __int16 v3 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  ot::Dhcp6::Client::HandleUdpReceive(a1, v4, v3);
}

uint64_t ot::Dhcp6::Client::ProcessNextIdentityAssociation(ot::Dhcp6::Client *this)
{
  char v6 = 0;
  if (!*((void *)this + 43) || *(unsigned char *)(*((void *)this + 43) + 42) != 2)
  {
    ot::TrickleTimer::Stop((ot::Dhcp6::Client *)((char *)this + 80));
    for (unsigned __int16 i = (char *)this + 152; i != (char *)this + 344; i += 48)
    {
      if (i[42] == 1)
      {
        ot::Dhcp6::TransactionId::GenerateRandom((ot::Dhcp6::Client *)((char *)this + 144));
        IgnoreError();
        *((void *)this + 43)  = i;
        unsigned int v3 = ot::Time::SecToMsec((ot::Time *)1);
        unsigned int v1 = ot::Time::SecToMsec((ot::Time *)0x78);
        ot::TrickleTimer::Start((uint64_t)this + 80, 0, v3, v1, 0xFFFF);
        ot::TrickleTimer::IndicateInconsistent((uint64_t)this + 80);
        char v6 = 1;
        return v6 & 1;
      }
    }
  }
  return v6 & 1;
}

uint64_t ot::TrickleTimer::Stop(ot::TrickleTimer *this)
{
  return ot::TimerMilli::Stop(this);
}

{
  return ot::TrickleTimer::Stop(this);
}

uint64_t ot::Dhcp6::TransactionId::GenerateRandom(ot::Dhcp6::TransactionId *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)3);
}

{
  return ot::Dhcp6::TransactionId::GenerateRandom(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Dhcp6::Client>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>(a1);
}

void ot::Dhcp6::Client::HandleTrickleTimer(ot::Dhcp6::Client *this)
{
  IsBound  = ot::Ip6::Udp::SocketHandle::IsBound((ot::Dhcp6::Client *)((char *)this + 8));
  if (!IsBound) {
    __assert_rtn("HandleTrickleTimer", "dhcp6_client.cpp", 225, "mSocket.IsBound()");
  }
  if (!*((void *)this + 43))
  {
    ot::TrickleTimer::Stop((ot::Dhcp6::Client *)((char *)this + 80));
    return;
  }
  int v2 = *(unsigned __int8 *)(*((void *)this + 43) + 42);
  switch(v2)
  {
    case 1:
      *((_DWORD *)this + 37)  = ot::TimerMilli::GetNow((ot::TimerMilli *)IsBound);
      *(unsigned char *)(*((void *)this + 43) + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 2;
      goto LABEL_10;
    case 2:
LABEL_10:
      ot::Dhcp6::Client::Solicit(this, *(_WORD *)(*((void *)this + 43) + 40));
      return;
    case 3:
      *((void *)this + 43)  = 0;
      if ((ot::Dhcp6::Client::ProcessNextIdentityAssociation(this) & 1) == 0)
      {
        ot::Dhcp6::Client::Stop(this);
        ot::TrickleTimer::Stop((ot::Dhcp6::Client *)((char *)this + 80));
      }
      break;
  }
}

void ot::Dhcp6::Client::Solicit(ot::Dhcp6::Client *this, unsigned __int16 a2)
{
  unsigned __int8 v27 = this;
  unsigned __int16 v26 = a2;
  int appended = 0;
  unsigned int v24 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v22);
  unsigned int v24 = ot::Ip6::Udp::Socket::NewMessage((ot::Dhcp6::Client *)((char *)this + 8));
  if (v24)
  {
    int appended = ot::Dhcp6::Client::AppendHeader(this, v24);
    if (!appended)
    {
      int appended = ot::Dhcp6::Client::AppendElapsedTime(this, v24);
      if (!appended)
      {
        int appended = ot::Dhcp6::Client::AppendClientIdentifier(this, v24);
        if (!appended)
        {
          int appended = ot::Dhcp6::Client::AppendIaNa(this, v24, v26);
          if (!appended)
          {
            int appended = ot::Dhcp6::Client::AppendIaAddress(this, v24, v26);
            if (!appended)
            {
              int appended = ot::Dhcp6::Client::AppendRapidCommit(this, v24);
              if (!appended)
              {
                PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v22);
                int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::Mle::GetMeshLocalPrefix(v2);
                ot::Ip6::Address::SetToRoutingLocator(PeerAddr, v3, v26);
                unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                MeshLocal16  = (__n128 *)ot::Mle::Mle::GetMeshLocal16(v4);
                ot::Ip6::MessageInfo::SetSockAddr(v22, MeshLocal16);
                __int16 v23 = 547;
                int appended = ot::Ip6::Udp::Socket::SendTo((ot::Dhcp6::Client *)((char *)this + 8), v24, (const ot::Ip6::MessageInfo *)v22);
                if (!appended) {
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Dhcp6Client", "solicit", v6, v7, v8, v9, v10, v11, v19);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int appended = 3;
  }
  if (appended)
  {
    if (v24) {
      ot::Message::Free(v24);
    }
    char v12 = ot::ErrorToString(appended);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Dhcp6Client", "Failed to send DHCPv6 Solicit: %s", v13, v14, v15, v16, v17, v18, v12);
  }
}

uint64_t ot::Dhcp6::Client::AppendHeader(ot::Dhcp6::Client *this, ot::Message *a2)
{
  uint64_t v6 = this;
  int v5 = a2;
  ot::Clearable<ot::Dhcp6::Header>::Clear(&v4);
  ot::Dhcp6::Header::SetType(&v4, 1);
  ot::Dhcp6::Header::SetTransactionId((uint64_t)&v4, (uint64_t)this + 144);
  return ot::Message::Append<ot::Dhcp6::Header>(v5, (char *)&v4);
}

uint64_t ot::Dhcp6::Client::AppendElapsedTime(ot::Dhcp6::Client *this, ot::Message *a2)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  int v2 = (ot::TimerMilli *)ot::Dhcp6::ElapsedTime::Init((ot::Dhcp6::ElapsedTime *)v8);
  int Now = ot::TimerMilli::GetNow(v2);
  unsigned int v3 = (ot::Time *)ot::Time::operator-(&Now, (_DWORD *)this + 37);
  unsigned __int16 v4 = ot::Time::MsecToSec(v3);
  ot::Dhcp6::ElapsedTime::SetElapsedTime((ot::Dhcp6::ElapsedTime *)v8, v4);
  return ot::Message::Append<ot::Dhcp6::ElapsedTime>(v9, v8);
}

uint64_t ot::Dhcp6::Client::AppendClientIdentifier(ot::Dhcp6::Client *this, ot::Message *a2)
{
  int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v2, (ot::Mac::ExtAddress *)v5);
  ot::Dhcp6::ClientIdentifier::Init((ot::Dhcp6::ClientIdentifier *)v6);
  ot::Dhcp6::ClientIdentifier::SetDuidType((uint64_t)v6, 3u);
  ot::Dhcp6::ClientIdentifier::SetDuidHardwareType((ot::Dhcp6::ClientIdentifier *)v6, 0x1Bu);
  ot::Dhcp6::ClientIdentifier::SetDuidLinkLayerAddress((uint64_t)v6, (const ot::Mac::ExtAddress *)v5);
  return ot::Message::Append<ot::Dhcp6::ClientIdentifier>(a2, v6);
}

uint64_t ot::Dhcp6::Client::AppendIaNa(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned __int16 v9 = a3;
  int v8 = 0;
  unsigned __int8 v7 = 0;
  unsigned __int16 v6 = 0;
  if (*((void *)this + 43))
  {
    for (unsigned __int16 i = (char *)this + 152; i != (char *)this + 344; i += 48)
    {
      if (i[42] && i[42] != 3 && *((unsigned __int16 *)i + 20) == v9) {
        ++v7;
      }
    }
    unsigned __int16 v6 = 28 * v7 + 12;
    ot::Dhcp6::IaNa::Init((ot::Dhcp6::IaNa *)v5);
    ot::Dhcp6::Option::SetLength((ot::Dhcp6::Option *)v5, v6);
    ot::Dhcp6::IaNa::SetIaid((ot::Dhcp6::IaNa *)v5, 0);
    ot::Dhcp6::IaNa::SetT1((ot::Dhcp6::IaNa *)v5, 0);
    ot::Dhcp6::IaNa::SetT2((ot::Dhcp6::IaNa *)v5, 0);
    return ot::Message::Append<ot::Dhcp6::IaNa>(v10, v5);
  }
  else
  {
    return 2;
  }
}

uint64_t ot::Dhcp6::Client::AppendIaAddress(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned __int16 v9 = a3;
  unsigned int v8 = 0;
  if (*((void *)this + 43))
  {
    ot::Dhcp6::IaAddress::Init((ot::Dhcp6::IaAddress *)v7);
    for (unsigned __int16 i = (ot::Dhcp6::Client *)((char *)this + 152);
          i != (ot::Dhcp6::Client *)((char *)this + 344);
          unsigned __int16 i = (ot::Ip6::Netif::UnicastAddress *)((char *)i + 48))
    {
      if ((*((unsigned char *)i + 42) == 1 || *((unsigned char *)i + 42) == 2) && *((unsigned __int16 *)i + 20) == v9)
      {
        Address  = (__n128 *)ot::Ip6::Netif::UnicastAddress::GetAddress(i);
        ot::Dhcp6::IaAddress::SetAddress((ot::Dhcp6::IaAddress *)v7, Address);
        ot::Dhcp6::IaAddress::SetPreferredLifetime((ot::Dhcp6::IaAddress *)v7, 0);
        ot::Dhcp6::IaAddress::SetValidLifetime((ot::Dhcp6::IaAddress *)v7, 0);
        unsigned int v8 = ot::Message::Append<ot::Dhcp6::IaAddress>(v10, v7);
        if (v8) {
          break;
        }
      }
    }
  }
  else
  {
    return 2;
  }
  return v8;
}

uint64_t ot::Dhcp6::Client::AppendRapidCommit(ot::Dhcp6::Client *this, ot::Message *a2)
{
  int v5 = this;
  unsigned __int16 v4 = a2;
  ot::Dhcp6::RapidCommit::Init((ot::Dhcp6::RapidCommit *)v3);
  return ot::Message::Append<ot::Dhcp6::RapidCommit>(v4, v3);
}

_DWORD *ot::Clearable<ot::Dhcp6::Header>::Clear(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::Dhcp6::Header>::Clear(result);
}

unsigned char *ot::Dhcp6::Header::SetType(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::Dhcp6::Header::SetType(result, a2);
}

uint64_t ot::Dhcp6::Header::SetTransactionId(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 1)  = *(_WORD *)a2;
  *(unsigned char *)(result + 3)  = *(unsigned char *)(a2 + 2);
  return result;
}

{
  return ot::Dhcp6::Header::SetTransactionId(result, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<ot::Dhcp6::Header>(a1, a2);
}

uint64_t ot::Dhcp6::ElapsedTime::Init(ot::Dhcp6::ElapsedTime *this)
{
  return ot::Dhcp6::Option::SetLength(this, 2u);
}

{
  return ot::Dhcp6::ElapsedTime::Init(this);
}

uint64_t ot::Dhcp6::ElapsedTime::SetElapsedTime(ot::Dhcp6::ElapsedTime *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Dhcp6::ElapsedTime::SetElapsedTime(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::ElapsedTime>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 6u);
}

{
  return ot::Message::Append<ot::Dhcp6::ElapsedTime>(a1, a2);
}

uint64_t ot::Dhcp6::ClientIdentifier::Init(ot::Dhcp6::ClientIdentifier *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0xCu);
}

{
  return ot::Dhcp6::ClientIdentifier::Init(this);
}

uint64_t ot::Dhcp6::ClientIdentifier::SetDuidType(uint64_t a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = result;
  return result;
}

{
  return ot::Dhcp6::ClientIdentifier::SetDuidType(a1, a2);
}

uint64_t ot::Dhcp6::ClientIdentifier::SetDuidHardwareType(ot::Dhcp6::ClientIdentifier *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return ot::Dhcp6::ClientIdentifier::SetDuidHardwareType(this, a2);
}

uint64_t ot::Dhcp6::ClientIdentifier::SetDuidLinkLayerAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + ot::MeshCoP::Tlv::SetType(this, 8) = *(void *)a2;
  return this;
}

{
  return ot::Dhcp6::ClientIdentifier::SetDuidLinkLayerAddress(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::ClientIdentifier>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return ot::Message::Append<ot::Dhcp6::ClientIdentifier>(a1, a2);
}

uint64_t ot::Dhcp6::IaNa::Init(ot::Dhcp6::IaNa *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0xCu);
}

{
  return ot::Dhcp6::IaNa::Init(this);
}

uint64_t ot::Dhcp6::Option::SetLength(ot::Dhcp6::Option *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::Dhcp6::Option::SetLength(this, a2);
}

uint64_t ot::Dhcp6::IaNa::SetIaid(ot::Dhcp6::IaNa *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 1)  = result;
  return result;
}

{
  return ot::Dhcp6::IaNa::SetIaid(this, a2);
}

uint64_t ot::Dhcp6::IaNa::SetT1(ot::Dhcp6::IaNa *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Dhcp6::IaNa::SetT1(this, a2);
}

uint64_t ot::Dhcp6::IaNa::SetT2(ot::Dhcp6::IaNa *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 3)  = result;
  return result;
}

{
  return ot::Dhcp6::IaNa::SetT2(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::IaNa>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return ot::Message::Append<ot::Dhcp6::IaNa>(a1, a2);
}

uint64_t ot::Dhcp6::IaAddress::Init(ot::Dhcp6::IaAddress *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0x18u);
}

{
  return ot::Dhcp6::IaAddress::Init(this);
}

__n128 ot::Dhcp6::IaAddress::SetAddress(ot::Dhcp6::IaAddress *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + ot::MeshCoP::Tlv::SetType(this, 4) = *a2;
  return result;
}

uint64_t ot::Dhcp6::IaAddress::SetPreferredLifetime(ot::Dhcp6::IaAddress *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 5)  = result;
  return result;
}

{
  return ot::Dhcp6::IaAddress::SetPreferredLifetime(this, a2);
}

uint64_t ot::Dhcp6::IaAddress::SetValidLifetime(ot::Dhcp6::IaAddress *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 6)  = result;
  return result;
}

{
  return ot::Dhcp6::IaAddress::SetValidLifetime(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::IaAddress>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x1Cu);
}

{
  return ot::Message::Append<ot::Dhcp6::IaAddress>(a1, a2);
}

uint64_t ot::Dhcp6::RapidCommit::Init(ot::Dhcp6::RapidCommit *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0);
}

{
  return ot::Dhcp6::RapidCommit::Init(this);
}

uint64_t ot::Message::Append<ot::Dhcp6::RapidCommit>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<ot::Dhcp6::RapidCommit>(a1, a2);
}

void ot::Dhcp6::Client::HandleUdpReceive(ot::Dhcp6::Client *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v10 = this;
  unsigned __int16 v9 = a2;
  unsigned int v8 = a3;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  if (!ot::Message::Read<ot::Dhcp6::Header>(a2, Offset, v7))
  {
    ot::Message::MoveOffset(v9, 4);
    if (ot::Dhcp6::Header::GetType((ot::Dhcp6::Header *)v7) == 7)
    {
      TransactionId  = (const void *)ot::Dhcp6::Header::GetTransactionId((ot::Dhcp6::Header *)v7);
      if (ot::Equatable<ot::Dhcp6::TransactionId>::operator==(TransactionId, (char *)this + 144)) {
        ot::Dhcp6::Client::ProcessReply(this, v9);
      }
    }
  }
}

uint64_t ot::Message::Read<ot::Dhcp6::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<ot::Dhcp6::Header>(a1, a2, a3);
}

uint64_t ot::Dhcp6::Header::GetType(ot::Dhcp6::Header *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Dhcp6::Header::GetType(this);
}

uint64_t ot::Dhcp6::Header::GetTransactionId(ot::Dhcp6::Header *this)
{
  return (uint64_t)this + 1;
}

{
  return ot::Dhcp6::Header::GetTransactionId(this);
}

BOOL ot::Equatable<ot::Dhcp6::TransactionId>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 3uLL) == 0;
}

{
  return ot::Equatable<ot::Dhcp6::TransactionId>::operator==(a1, a2);
}

void ot::Dhcp6::Client::ProcessReply(ot::Dhcp6::Client *this, ot::Message *a2)
{
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  __int16 Length = ot::Message::GetLength(a2);
  __int16 v15 = Length - ot::Message::GetOffset(a2);
  Optiounsigned __int8 n = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 13);
  if (v3 | (Option == 0)) {
    char v4 = 1;
  }
  else {
    char v4 = 0;
  }
  if ((v4 & 1) != 0 || !ot::Dhcp6::Client::ProcessStatusCode(this, a2, Option))
  {
    unsigned __int16 v5 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 2);
    BOOL v6 = !(v3 | (v5 == 0));
    if (v6 && !ot::Dhcp6::Client::ProcessServerIdentifier(this, a2, v5))
    {
      unsigned __int16 v7 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 1);
      BOOL v8 = !(v3 | (v7 == 0));
      if (v8 && !ot::Dhcp6::Client::ProcessClientIdentifier(this, a2, v7))
      {
        __int16 v9 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 14);
        if (!(v3 | (v9 == 0)))
        {
          unsigned __int16 v11 = ot::Dhcp6::Client::FindOption((uint64_t)this, a2, Offset, v15, 3);
          if (v3 | (v11 == 0)) {
            char v12 = 0;
          }
          else {
            char v12 = 1;
          }
          if ((v12 & 1) != 0 && !ot::Dhcp6::Client::ProcessIaNa(this, a2, v11)) {
            ot::Dhcp6::Client::HandleTrickleTimer(this);
          }
        }
      }
    }
  }
}

uint64_t ot::Dhcp6::Client::FindOption(uint64_t a1, ot::Message *a2, unsigned __int16 a3, __int16 a4, __int16 a5)
{
  uint64_t v16 = a1;
  __int16 v15 = a2;
  unsigned __int16 v14 = a3;
  __int16 v13 = a4;
  __int16 v12 = a5;
  unsigned int v11 = a3;
  unsigned __int16 v10 = a3 + a4;
  unsigned __int16 v9 = 0;
  while (v11 <= v10 && !ot::Message::Read<ot::Dhcp6::Option>(v15, v11, v8))
  {
    Code  = ot::Dhcp6::Option::GetCode((ot::Dhcp6::Option *)v8);
    if (v12 == Code) {
      return (unsigned __int16)v11;
    }
    unsigned __int16 Length = ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v8);
    v11 += Length + 4;
  }
  return v9;
}

uint64_t ot::Dhcp6::Client::ProcessStatusCode(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  BOOL v8 = this;
  unsigned __int16 v7 = a2;
  unsigned __int16 v6 = a3;
  unsigned int v5 = 0;
  unsigned int v5 = ot::Message::Read<ot::Dhcp6::StatusCode>(a2, a3, v4);
  if (!v5
    && ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v4) < 2uLL
     || (unsigned __int16)ot::Dhcp6::StatusCode::GetStatusCode((ot::Dhcp6::StatusCode *)v4)))
  {
    return 6;
  }
  return v5;
}

uint64_t ot::Dhcp6::Client::ProcessServerIdentifier(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (!ot::Message::Read<ot::Dhcp6::ServerIdentifier>(a2, a3, v5)
    && ((unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidType((ot::Dhcp6::ServerIdentifier *)v5) != 1
     || (unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidHardwareType((ot::Dhcp6::ServerIdentifier *)v5) != 1)
    && ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v5) != 12
     || (unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidType((ot::Dhcp6::ServerIdentifier *)v5) != 3
     || (unsigned __int16)ot::Dhcp6::ServerIdentifier::GetDuidHardwareType((ot::Dhcp6::ServerIdentifier *)v5) != 27))
  {
    return 6;
  }
  return v4;
}

uint64_t ot::Dhcp6::Client::ProcessClientIdentifier(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  char v3 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v3, (ot::Mac::ExtAddress *)v9);
  unsigned int v6 = ot::Message::Read<ot::Dhcp6::ClientIdentifier>(a2, a3, v10);
  if (!v6)
  {
    if ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v10) != 12) {
      return 6;
    }
    if ((unsigned __int16)ot::Dhcp6::ClientIdentifier::GetDuidType((ot::Dhcp6::ClientIdentifier *)v10) != 3) {
      return 6;
    }
    if ((unsigned __int16)ot::Dhcp6::ClientIdentifier::GetDuidHardwareType((ot::Dhcp6::ClientIdentifier *)v10) != 27) {
      return 6;
    }
    DuidLinkLayerAddress  = (const void *)ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress((ot::Dhcp6::ClientIdentifier *)v10);
    if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(DuidLinkLayerAddress, v9)) {
      return 6;
    }
  }
  return v6;
}

uint64_t ot::Dhcp6::Client::ProcessIaNa(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v16 = this;
  __int16 v15 = a2;
  unsigned __int16 v14 = a3;
  unsigned int v13 = 0;
  unsigned int v13 = ot::Message::Read<ot::Dhcp6::IaNa>(a2, a3, v12);
  if (!v13)
  {
    v14 += 16;
    unsigned __int16 v10 = ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v12) - 12;
    unsigned __int16 Length = ot::Message::GetLength(v15);
    if (v10 <= Length - v14)
    {
      Optiounsigned __int8 n = ot::Dhcp6::Client::FindOption((uint64_t)this, v15, v14, v10, 13);
      if (v5 | (Option == 0)) {
        char v6 = 1;
      }
      else {
        char v6 = 0;
      }
      if ((v6 & 1) != 0 || (unsigned int v13 = ot::Dhcp6::Client::ProcessStatusCode(this, v15, Option)) == 0)
      {
        while (v10)
        {
          unsigned __int16 v7 = ot::Dhcp6::Client::FindOption((uint64_t)this, v15, v14, v10, 5);
          unsigned __int16 v11 = v7;
          if (!v7) {
            break;
          }
          unsigned int v13 = ot::Dhcp6::Client::ProcessIaAddress(this, v15, v7);
          if (v13) {
            break;
          }
          v10 -= v11 - v14 + 28;
          unsigned __int16 v14 = v11 + 28;
        }
      }
    }
    else
    {
      return 6;
    }
  }
  return v13;
}

uint64_t ot::Message::Read<ot::Dhcp6::Option>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<ot::Dhcp6::Option>(a1, a2, a3);
}

uint64_t ot::Dhcp6::Option::GetCode(ot::Dhcp6::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::Dhcp6::Option::GetCode(this);
}

uint64_t ot::Dhcp6::Option::GetLength(ot::Dhcp6::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::Dhcp6::Option::GetLength(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::ServerIdentifier>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return ot::Message::Read<ot::Dhcp6::ServerIdentifier>(a1, a2, a3);
}

uint64_t ot::Dhcp6::ServerIdentifier::GetDuidType(ot::Dhcp6::ServerIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Dhcp6::ServerIdentifier::GetDuidType(this);
}

uint64_t ot::Dhcp6::ServerIdentifier::GetDuidHardwareType(ot::Dhcp6::ServerIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return ot::Dhcp6::ServerIdentifier::GetDuidHardwareType(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::ClientIdentifier>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return ot::Message::Read<ot::Dhcp6::ClientIdentifier>(a1, a2, a3);
}

uint64_t ot::Dhcp6::ClientIdentifier::GetDuidType(ot::Dhcp6::ClientIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Dhcp6::ClientIdentifier::GetDuidType(this);
}

uint64_t ot::Dhcp6::ClientIdentifier::GetDuidHardwareType(ot::Dhcp6::ClientIdentifier *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return ot::Dhcp6::ClientIdentifier::GetDuidHardwareType(this);
}

uint64_t ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress(ot::Dhcp6::ClientIdentifier *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::IaNa>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x10u);
}

{
  return ot::Message::Read<ot::Dhcp6::IaNa>(a1, a2, a3);
}

uint64_t ot::Dhcp6::Client::ProcessIaAddress(ot::Dhcp6::Client *this, ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v13 = this;
  __int16 v12 = a2;
  unsigned __int16 v11 = a3;
  unsigned int v10 = 0;
  unsigned int v10 = ot::Message::Read<ot::Dhcp6::IaAddress>(a2, a3, v9);
  if (!v10)
  {
    if ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v9) == 24)
    {
      for (unsigned __int16 i = (ot::Dhcp6::Client *)((char *)this + 152);
            i != (ot::Dhcp6::Client *)((char *)this + 344);
            unsigned __int16 i = (ot::Ip6::Netif::UnicastAddress *)((char *)i + 48))
      {
        if (*((unsigned char *)i + 42))
        {
          if (!*((_DWORD *)i + 9))
          {
            Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(i);
            char v3 = (const ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v9);
            if (*((unsigned __int8 *)i + 16) <= (int)ot::Ip6::Address::PrefixMatch(Address, v3))
            {
              *(_OWORD *)unsigned __int16 i = *(_OWORD *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v9);
              *((_DWORD *)i + ot::MeshCoP::Tlv::SetType(this, 8) = ot::Dhcp6::IaAddress::GetPreferredLifetime((ot::Dhcp6::IaAddress *)v9);
              *((_DWORD *)i + ot::MeshCoP::Tlv::SetType(this, 9) = ot::Dhcp6::IaAddress::GetValidLifetime((ot::Dhcp6::IaAddress *)v9);
              *((unsigned char *)i + 17)  = 2;
              *((unsigned char *)i + 1ot::MeshCoP::Tlv::SetType(this, 8) = *((unsigned char *)i + 18) & 0xFE | (ot::Dhcp6::IaAddress::GetPreferredLifetime((ot::Dhcp6::IaAddress *)v9) != 0);
              *((unsigned char *)i + 1ot::MeshCoP::Tlv::SetType(this, 8) = *((unsigned char *)i + 18) & 0xFD | (2
                                                              * (ot::Dhcp6::IaAddress::GetValidLifetime((ot::Dhcp6::IaAddress *)v9) != 0));
              *((unsigned char *)i + 4ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 3;
              unsigned int v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
              ot::Ip6::Netif::AddUnicastAddress(v4, i);
              return 0;
            }
          }
        }
      }
      return 23;
    }
    else
    {
      return 6;
    }
  }
  return v10;
}

uint64_t ot::Message::Read<ot::Dhcp6::StatusCode>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return ot::Message::Read<ot::Dhcp6::StatusCode>(a1, a2, a3);
}

uint64_t ot::Dhcp6::StatusCode::GetStatusCode(ot::Dhcp6::StatusCode *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Dhcp6::StatusCode::GetStatusCode(this);
}

uint64_t ot::Message::Read<ot::Dhcp6::IaAddress>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x1Cu);
}

{
  return ot::Message::Read<ot::Dhcp6::IaAddress>(a1, a2, a3);
}

uint64_t ot::Dhcp6::IaAddress::GetAddress(ot::Dhcp6::IaAddress *this)
{
  return (uint64_t)this + 4;
}

{
  return ot::Dhcp6::IaAddress::GetAddress(this);
}

uint64_t ot::Dhcp6::IaAddress::GetPreferredLifetime(ot::Dhcp6::IaAddress *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 5));
}

{
  return ot::Dhcp6::IaAddress::GetPreferredLifetime(this);
}

uint64_t ot::Dhcp6::IaAddress::GetValidLifetime(ot::Dhcp6::IaAddress *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 6));
}

{
  return ot::Dhcp6::IaAddress::GetValidLifetime(this);
}

uint64_t ot::Dhcp6::Option::SetCode(_WORD *a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *a1  = result;
  return result;
}

{
  return ot::Dhcp6::Option::SetCode(a1, a2);
}

uint64_t ot::Instance::Get<ot::Dhcp6::Client>(uint64_t a1)
{
  return a1 + 86456;
}

{
  return ot::Instance::Get<ot::Dhcp6::Client>(a1);
}

ot::Dhcp6::Server *ot::Dhcp6::Server::Server(ot::Dhcp6::Server *this, ot::Instance *a2)
{
  *((unsigned char *)this + 30ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  *((unsigned char *)this + 305)  = 0;
  memset((char *)this + 80, 0, 0xE0uLL);
  return this;
}

{
  ot::Dhcp6::Server::Server(this, a2);
  return this;
}

uint64_t ot::Dhcp6::Server::UpdateService(ot::Dhcp6::Server *this)
{
  char v21 = this;
  *(_WORD *)&v20[4]  = 0;
  unsigned int v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  *(_DWORD *)long long v20 = (unsigned __int16)ot::Mle::Mle::GetRloc16(v1);
  unsigned int v19 = 0;
  for (unsigned __int16 i = (ot::Dhcp6::Server *)((char *)this + 80);
        i != (ot::Dhcp6::Server *)((char *)this + 304);
        unsigned __int16 i = (ot::Dhcp6::Server::PrefixAgent *)((char *)i + 56))
  {
    char v14 = 0;
    if (ot::Dhcp6::Server::PrefixAgent::IsValid(i))
    {
      unsigned int v19 = 0;
      while (1)
      {
        int v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v2, &v19, *(unsigned __int16 *)v20, (ot::NetworkData::OnMeshPrefixConfig *)v17))break; {
        if ((v18 & 0x10) != 0 || (v18 & 0x20) != 0)
        }
        {
          __int16 v12 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          PrefixAsAddress  = (const ot::Ip6::Address *)ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(i);
          *(_DWORD *)&_OWORD v20[2] = ot::NetworkData::LeaderBase::GetContext(v12, PrefixAsAddress, (ot::Ip6::Prefix *)v16);
          if (!*(_DWORD *)&v20[2])
          {
            ContextId  = ot::Dhcp6::Server::PrefixAgent::GetContextId(i);
            if (v16[17] == ContextId)
            {
              char v14 = 1;
              break;
            }
          }
        }
      }
      if ((v14 & 1) == 0)
      {
        unsigned __int16 v11 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Dhcp6::Server::PrefixAgent::GetAloc(i);
        ot::Ip6::Netif::RemoveUnicastAddress(v11, v5);
        ot::Dhcp6::Server::PrefixAgent::Clear((uint64_t)i);
        --*((unsigned char *)this + 304);
      }
    }
  }
  unsigned int v19 = 0;
  while (1)
  {
    char v6 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v6, &v19, *(unsigned __int16 *)v20, (ot::NetworkData::OnMeshPrefixConfig *)v17))break; {
    if ((v18 & 0x10) != 0 || (v18 & 0x20) != 0)
    }
    {
      unsigned int v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int16 v7 = (const ot::Ip6::Address *)ot::AsCoreType<otIp6Address>((uint64_t)v17);
      *(_DWORD *)&_OWORD v20[2] = ot::NetworkData::LeaderBase::GetContext(v10, v7, (ot::Ip6::Prefix *)v16);
      if (!*(_DWORD *)&v20[2])
      {
        uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v17);
        ot::Dhcp6::Server::AddPrefixAgent(this, Prefix, (uint64_t)v16);
      }
    }
  }
  if (*((unsigned char *)this + 304)) {
    ot::Dhcp6::Server::Start(this);
  }
  else {
    ot::Dhcp6::Server::Stop(this);
  }
  return *(unsigned int *)&v20[2];
}

uint64_t ot::Dhcp6::Server::PrefixAgent::IsValid(ot::Dhcp6::Server::PrefixAgent *this)
{
  return (*((unsigned __int8 *)this + 18) >> 1) & 1;
}

{
  return ot::Dhcp6::Server::PrefixAgent::IsValid(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(ot::Dhcp6::Server::PrefixAgent *this)
{
  return (uint64_t)this + 32;
}

{
  return ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::GetContextId(ot::Dhcp6::Server::PrefixAgent *this)
{
  return *((unsigned __int8 *)this + 15);
}

{
  return ot::Dhcp6::Server::PrefixAgent::GetContextId(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::Clear(uint64_t this)
{
  *(unsigned char *)(this + 18) &= ~2u;
  return this;
}

{
  return ot::Dhcp6::Server::PrefixAgent::Clear(this);
}

void ot::Dhcp6::Server::AddPrefixAgent(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v19 = 0;
  char v18 = 0;
  uint64_t v17 = (ot::Dhcp6::Server::PrefixAgent *)(a1 + 80);
  uint64_t v16 = (ot::Dhcp6::Server::PrefixAgent *)(a1 + 304);
  while (v17 != v16)
  {
    if (ot::Dhcp6::Server::PrefixAgent::IsValid(v17))
    {
      uint64_t Prefix = (unsigned __int8 *)ot::Dhcp6::Server::PrefixAgent::GetPrefix(v17);
      if (ot::Ip6::Prefix::operator==(Prefix, a2)) {
        goto LABEL_10;
      }
    }
    else
    {
      char v18 = v17;
    }
    uint64_t v17 = (ot::Dhcp6::Server::PrefixAgent *)((char *)v17 + 56);
  }
  if (v18)
  {
    unsigned int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
    ot::Mle::Mle::GetMeshLocalPrefix(v4);
    ot::Dhcp6::Server::PrefixAgent::Set((uint64_t)v18, (uint64_t)a2, v5, *(unsigned char *)(a3 + 17));
    char v14 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Dhcp6::Server::PrefixAgent::GetAloc(v18);
    ot::Ip6::Netif::AddUnicastAddress(v14, v6);
    ++a1[304];
  }
  else
  {
    int v19 = 3;
  }
LABEL_10:
  if (v19)
  {
    char v7 = ot::ErrorToString(v19);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Dhcp6Server", "Failed to add DHCPv6 prefix agent: %s", v8, v9, v10, v11, v12, v13, v7);
  }
}

void ot::Dhcp6::Server::Start(ot::Dhcp6::Server *this)
{
  if (!ot::Ip6::Udp::Socket::IsOpen((ot::Dhcp6::Server *)((char *)this + 8)))
  {
    ot::Ip6::Udp::Socket::Open((ot::Dhcp6::Server *)((char *)this + 8), (uint64_t)ot::Dhcp6::Server::HandleUdpReceive, (uint64_t)this);
    IgnoreError();
    ot::Ip6::Udp::Socket::Bind((ot::Dhcp6::Server *)((char *)this + 8), 547, 1);
    IgnoreError();
  }
}

void ot::Dhcp6::Server::Stop(ot::Dhcp6::Server *this)
{
}

uint64_t ot::Dhcp6::Server::HandleUdpReceive(ot::Dhcp6::Server *a1, uint64_t a2, uint64_t a3)
{
  char v5 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  char v3 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  return ot::Dhcp6::Server::HandleUdpReceive(a1, v5, v3);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::GetPrefix(ot::Dhcp6::Server::PrefixAgent *this)
{
  return (uint64_t)this + 32;
}

{
  return (uint64_t)this + 32;
}

{
  return ot::Dhcp6::Server::PrefixAgent::GetPrefix(this);
}

{
  return ot::Dhcp6::Server::PrefixAgent::GetPrefix(this);
}

uint64_t ot::Dhcp6::Server::PrefixAgent::Set(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  *(_OWORD *)(a1 + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 4ot::MeshCoP::Tlv::SetType(this, 8) = *(unsigned char *)(a2 + 16);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin((ot::Ip6::Netif::UnicastAddress *)a1, 0);
  Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)a1);
  return ot::Ip6::Address::SetToAnycastLocator(Address, a3, a4 - 1024);
}

{
  return ot::Dhcp6::Server::PrefixAgent::Set(a1, a2, a3, a4);
}

uint64_t ot::Dhcp6::Server::HandleUdpReceive(ot::Dhcp6::Server *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  uint64_t result = ot::Message::Read<ot::Dhcp6::Header>(a2, Offset, v10);
  if (!result)
  {
    ot::Message::MoveOffset(v12, 4);
    uint64_t result = ot::Dhcp6::Header::GetType((ot::Dhcp6::Header *)v10);
    if (result == 1)
    {
      char v6 = v12;
      PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v11);
      TransactionId  = (const ot::Dhcp6::TransactionId *)ot::Dhcp6::Header::GetTransactionId((ot::Dhcp6::Header *)v10);
      return ot::Dhcp6::Server::ProcessSolicit(this, v6, PeerAddr, TransactionId);
    }
  }
  return result;
}

uint64_t ot::Dhcp6::Server::ProcessSolicit(ot::Dhcp6::Server *this, ot::Message *a2, const ot::Ip6::Address *a3, const ot::Dhcp6::TransactionId *a4)
{
  int v19 = this;
  char v18 = a2;
  uint64_t v17 = a3;
  uint64_t v16 = a4;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  __int16 Length = ot::Message::GetLength(v18);
  __int16 v13 = Length - ot::Message::GetOffset(v18);
  uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 1);
  if (v5 | ((unsigned __int16)result == 0)) {
    char v6 = 0;
  }
  else {
    char v6 = 1;
  }
  if (v6)
  {
    uint64_t result = ot::Dhcp6::Server::ProcessClientIdentifier(this, v18, result, (ot::Dhcp6::ClientIdentifier *)v20);
    if (!result)
    {
      uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 2);
      if (!(_WORD)result)
      {
        uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 14);
        if (!(v5 | ((unsigned __int16)result == 0)))
        {
          Optiounsigned __int8 n = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 8);
          char v9 = v5 | (Option == 0);
          if ((v9 & 1) != 0 || (uint64_t result = ot::Dhcp6::Server::ProcessElapsedTime(this, v18, Option), !result))
          {
            uint64_t result = ot::Dhcp6::Server::FindOption((uint64_t)this, v18, Offset, v13, 3);
            if (v5 | ((unsigned __int16)result == 0)) {
              char v10 = 0;
            }
            else {
              char v10 = 1;
            }
            if (v10)
            {
              uint64_t result = ot::Dhcp6::Server::ProcessIaNa(this, v18, result, (ot::Dhcp6::IaNa *)v15);
              if (!result) {
                return ot::Dhcp6::Server::SendReply(this, (__n128 *)v17, v16, (ot::Dhcp6::ClientIdentifier *)v20, (ot::Dhcp6::IaNa *)v15);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ot::Dhcp6::Server::FindOption(uint64_t a1, ot::Message *a2, unsigned __int16 a3, __int16 a4, __int16 a5)
{
  uint64_t v15 = a1;
  char v14 = a2;
  unsigned __int16 v13 = a3;
  __int16 v12 = a4;
  __int16 v11 = a5;
  unsigned __int16 v10 = a3 + a4;
  unsigned __int16 v9 = 0;
  while (v13 <= (int)v10 && !ot::Message::Read<ot::Dhcp6::Option>(v14, v13, v8))
  {
    Code  = ot::Dhcp6::Option::GetCode((ot::Dhcp6::Option *)v8);
    if (v11 == Code) {
      return v13;
    }
    __int16 Length = ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v8);
    v13 += Length + 4;
  }
  return v9;
}

uint64_t ot::Dhcp6::Server::ProcessClientIdentifier(ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3, ot::Dhcp6::ClientIdentifier *a4)
{
  unsigned int v5 = ot::Message::Read<ot::Dhcp6::ClientIdentifier>(a2, a3, (char *)a4);
  if (!v5
    && ((unsigned __int16)ot::Dhcp6::Option::GetLength(a4) != 12
     || (unsigned __int16)ot::Dhcp6::ClientIdentifier::GetDuidType(a4) != 3
     || (unsigned __int16)ot::Dhcp6::ClientIdentifier::GetDuidHardwareType(a4) != 27))
  {
    return 6;
  }
  return v5;
}

uint64_t ot::Dhcp6::Server::ProcessElapsedTime(ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v8 = this;
  char v7 = a2;
  unsigned __int16 v6 = a3;
  unsigned int v5 = 0;
  unsigned int v5 = ot::Message::Read<ot::Dhcp6::ElapsedTime>(a2, a3, v4);
  if (!v5 && (unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v4) != 2) {
    return 6;
  }
  return v5;
}

uint64_t ot::Dhcp6::Server::ProcessIaNa(ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3, ot::Dhcp6::IaNa *a4)
{
  unsigned int v11 = ot::Message::Read<ot::Dhcp6::IaNa>(a2, a3, (char *)a4);
  if (!v11)
  {
    unsigned __int16 v14 = a3 + 16;
    unsigned __int16 v9 = ot::Dhcp6::Option::GetLength(a4) - 12;
    if (v9 <= (unsigned __int16)ot::Message::GetLength(a2) - v14)
    {
      *((unsigned char *)this + 305)  = 0;
      while (v9)
      {
        Optiounsigned __int8 n = ot::Dhcp6::Server::FindOption((uint64_t)this, a2, v14, v9, 5);
        unsigned __int16 v10 = Option;
        if (v5 | (Option == 0)) {
          break;
        }
        unsigned int v11 = ot::Dhcp6::Server::ProcessIaAddress(this, a2, Option);
        if (v11) {
          break;
        }
        v9 -= v10 - v14 + 28;
        unsigned __int16 v14 = v10 + 28;
      }
    }
    else
    {
      return 6;
    }
  }
  return v11;
}

uint64_t ot::Dhcp6::Server::SendReply(ot::Dhcp6::Server *this, __n128 *a2, const ot::Dhcp6::TransactionId *a3, ot::Dhcp6::ClientIdentifier *a4, ot::Dhcp6::IaNa *a5)
{
  unsigned __int16 v14 = this;
  unsigned __int16 v13 = a2;
  __int16 v12 = a3;
  unsigned int v11 = a4;
  unsigned __int16 v10 = a5;
  unsigned int appended = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v8);
  char v7 = ot::Ip6::Udp::Socket::NewMessage((ot::Dhcp6::Server *)((char *)this + 8));
  if (v7)
  {
    unsigned int appended = ot::Dhcp6::Server::AppendHeader(this, v7, v12);
    if (!appended)
    {
      unsigned int appended = ot::Dhcp6::Server::AppendServerIdentifier(this, v7);
      if (!appended)
      {
        unsigned int appended = ot::Dhcp6::Server::AppendClientIdentifier(this, v7, v11);
        if (!appended)
        {
          unsigned int appended = ot::Dhcp6::Server::AppendIaNa(this, v7, v10);
          if (!appended)
          {
            unsigned int appended = ot::Dhcp6::Server::AppendStatusCode((uint64_t)this, v7, 0);
            if (!appended)
            {
              unsigned int appended = ot::Dhcp6::Server::AppendIaAddress(this, v7, v11);
              if (!appended)
              {
                unsigned int appended = ot::Dhcp6::Server::AppendRapidCommit(this, v7);
                if (!appended)
                {
                  ot::Ip6::MessageInfo::SetPeerAddr(v8, v13);
                  ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v8, 546);
                  unsigned int appended = ot::Ip6::Udp::Socket::SendTo((ot::Dhcp6::Server *)((char *)this + 8), v7, (const ot::Ip6::MessageInfo *)v8);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v7) {
    ot::Message::Free(v7);
  }
  return appended;
}

uint64_t ot::Message::Read<ot::Dhcp6::ElapsedTime>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return ot::Message::Read<ot::Dhcp6::ElapsedTime>(a1, a2, a3);
}

uint64_t ot::Dhcp6::Server::ProcessIaAddress(ot::Dhcp6::Server *this, ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v11 = this;
  unsigned __int16 v10 = a2;
  unsigned __int16 v9 = a3;
  unsigned int v8 = 0;
  unsigned int v8 = ot::Message::Read<ot::Dhcp6::IaAddress>(a2, a3, v7);
  if (!v8)
  {
    if ((unsigned __int16)ot::Dhcp6::Option::GetLength((ot::Dhcp6::Option *)v7) == 24)
    {
      for (unsigned __int16 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>(); ++i)
      {
        if (ot::Dhcp6::Server::PrefixAgent::IsValid((ot::Dhcp6::Server *)((char *)this + 56 * i + 80)))
        {
          Address  = (const ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v7);
          if (ot::Dhcp6::Server::PrefixAgent::IsPrefixMatch((ot::Dhcp6::Server *)((char *)this + 56 * i + 80), Address))
          {
            *((unsigned char *)this + 305) |= 1 << i;
            return v8;
          }
        }
      }
    }
    else
    {
      return 6;
    }
  }
  return v8;
}

uint64_t ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>()
{
  return 4;
}

{
  return ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>();
}

BOOL ot::Dhcp6::Server::PrefixAgent::IsPrefixMatch(ot::Dhcp6::Server::PrefixAgent *this, const ot::Ip6::Address *a2)
{
  uint64_t Prefix = (const ot::Ip6::Prefix *)ot::Dhcp6::Server::PrefixAgent::GetPrefix(this);
  return ot::Ip6::Address::MatchesPrefix(a2, Prefix);
}

{
  return ot::Dhcp6::Server::PrefixAgent::IsPrefixMatch(this, a2);
}

uint64_t ot::Dhcp6::Server::AppendHeader(ot::Dhcp6::Server *this, ot::Message *a2, const ot::Dhcp6::TransactionId *a3)
{
  char v7 = this;
  unsigned __int16 v6 = a2;
  char v5 = a3;
  ot::Clearable<ot::Dhcp6::Header>::Clear(&v4);
  ot::Dhcp6::Header::SetType(&v4, 7);
  ot::Dhcp6::Header::SetTransactionId((uint64_t)&v4, (uint64_t)v5);
  return ot::Message::Append<ot::Dhcp6::Header>(v6, (char *)&v4);
}

uint64_t ot::Dhcp6::Server::AppendServerIdentifier(ot::Dhcp6::Server *this, ot::Message *a2)
{
  int v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::GetIeeeEui64(v2, (ot::Mac::ExtAddress *)v5);
  ot::Dhcp6::ServerIdentifier::Init((ot::Dhcp6::ServerIdentifier *)v6);
  ot::Dhcp6::ServerIdentifier::SetDuidType((uint64_t)v6, 3u);
  ot::Dhcp6::ServerIdentifier::SetDuidHardwareType((ot::Dhcp6::ServerIdentifier *)v6, 0x1Bu);
  ot::Dhcp6::ServerIdentifier::SetDuidLinkLayerAddress((uint64_t)v6, (const ot::Mac::ExtAddress *)v5);
  return ot::Message::Append<ot::Dhcp6::ServerIdentifier>(a2, v6);
}

uint64_t ot::Dhcp6::Server::AppendClientIdentifier(ot::Dhcp6::Server *this, ot::Message *a2, ot::Dhcp6::ClientIdentifier *a3)
{
  return ot::Message::Append<ot::Dhcp6::ClientIdentifier>(a2, (char *)a3);
}

uint64_t ot::Dhcp6::Server::AppendIaNa(ot::Dhcp6::Server *this, ot::Message *a2, ot::Dhcp6::IaNa *a3)
{
  unsigned __int16 v6 = 0;
  if (*((unsigned char *)this + 305))
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>(); ++i)
    {
      if ((*((unsigned __int8 *)this + 305) & (1 << i)) != 0) {
        v6 += 28;
      }
    }
  }
  else
  {
    unsigned __int16 v6 = 28 * *((unsigned __int8 *)this + 304);
  }
  ot::Dhcp6::Option::SetLength(a3, v6 + 18);
  ot::Dhcp6::IaNa::SetT1(a3, 0xFFFFFFFF);
  ot::Dhcp6::IaNa::SetT2(a3, 0xFFFFFFFF);
  return ot::Message::Append<ot::Dhcp6::IaNa>(a2, (char *)a3);
}

uint64_t ot::Dhcp6::Server::AppendStatusCode(uint64_t a1, ot::Message *a2, unsigned __int16 a3)
{
  uint64_t v7 = a1;
  unsigned __int16 v6 = a2;
  unsigned __int16 v5 = a3;
  ot::Dhcp6::StatusCode::Init((ot::Dhcp6::StatusCode *)v4);
  ot::Dhcp6::StatusCode::SetStatusCode((uint64_t)v4, v5);
  return ot::Message::Append<ot::Dhcp6::StatusCode>(v6, v4);
}

uint64_t ot::Dhcp6::Server::AppendIaAddress(ot::Dhcp6::Server *this, ot::Message *a2, ot::Dhcp6::ClientIdentifier *a3)
{
  unsigned int v10 = 0;
  if (*((unsigned char *)this + 305))
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)ot::GetArrayLength<ot::Dhcp6::Server::PrefixAgent,(unsigned short)4>(); ++i)
    {
      if ((*((unsigned __int8 *)this + 305) & (1 << i)) != 0)
      {
        PrefixAsAddress  = (const ot::Ip6::Address *)ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress((ot::Dhcp6::Server *)((char *)this + 56 * i + 80));
        unsigned int v10 = ot::Dhcp6::Server::AddIaAddress(this, a2, PrefixAsAddress, a3);
        if (v10) {
          break;
        }
      }
    }
  }
  else
  {
    unsigned int v8 = (ot::Dhcp6::Server *)((char *)this + 80);
    uint64_t v7 = (ot::Dhcp6::Server *)((char *)this + 304);
    while (v8 != v7)
    {
      if (ot::Dhcp6::Server::PrefixAgent::IsValid(v8))
      {
        int v4 = (const ot::Ip6::Address *)ot::Dhcp6::Server::PrefixAgent::GetPrefixAsAddress(v8);
        unsigned int v10 = ot::Dhcp6::Server::AddIaAddress(this, a2, v4, a3);
        if (v10) {
          break;
        }
      }
      unsigned int v8 = (ot::Dhcp6::Server::PrefixAgent *)((char *)v8 + 56);
    }
  }
  return v10;
}

uint64_t ot::Dhcp6::Server::AppendRapidCommit(ot::Dhcp6::Server *this, ot::Message *a2)
{
  unsigned __int16 v5 = this;
  int v4 = a2;
  ot::Dhcp6::RapidCommit::Init((ot::Dhcp6::RapidCommit *)v3);
  return ot::Message::Append<ot::Dhcp6::RapidCommit>(v4, v3);
}

uint64_t ot::Dhcp6::ServerIdentifier::Init(ot::Dhcp6::ServerIdentifier *this)
{
  return ot::Dhcp6::Option::SetLength(this, 0xCu);
}

{
  return ot::Dhcp6::ServerIdentifier::Init(this);
}

uint64_t ot::Dhcp6::ServerIdentifier::SetDuidType(uint64_t a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = result;
  return result;
}

{
  return ot::Dhcp6::ServerIdentifier::SetDuidType(a1, a2);
}

uint64_t ot::Dhcp6::ServerIdentifier::SetDuidHardwareType(ot::Dhcp6::ServerIdentifier *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return ot::Dhcp6::ServerIdentifier::SetDuidHardwareType(this, a2);
}

uint64_t ot::Dhcp6::ServerIdentifier::SetDuidLinkLayerAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + ot::MeshCoP::Tlv::SetType(this, 8) = *(void *)a2;
  return this;
}

{
  return ot::Dhcp6::ServerIdentifier::SetDuidLinkLayerAddress(this, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::ServerIdentifier>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x10u);
}

{
  return ot::Message::Append<ot::Dhcp6::ServerIdentifier>(a1, a2);
}

uint64_t ot::Dhcp6::StatusCode::Init(ot::Dhcp6::StatusCode *this)
{
  return ot::Dhcp6::Option::SetLength(this, 2u);
}

{
  return ot::Dhcp6::StatusCode::Init(this);
}

uint64_t ot::Dhcp6::StatusCode::SetStatusCode(uint64_t a1, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)(a1 + ot::MeshCoP::Tlv::SetType(this, 4) = result;
  return result;
}

{
  return ot::Dhcp6::StatusCode::SetStatusCode(a1, a2);
}

uint64_t ot::Message::Append<ot::Dhcp6::StatusCode>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 6u);
}

{
  return ot::Message::Append<ot::Dhcp6::StatusCode>(a1, a2);
}

uint64_t ot::Dhcp6::Server::AddIaAddress(ot::Dhcp6::Server *this, ot::Message *a2, const ot::Ip6::Address *a3, ot::Dhcp6::ClientIdentifier *a4)
{
  unsigned __int16 v14 = this;
  unsigned __int16 v13 = a2;
  __int16 v12 = (unsigned __int8 *)a3;
  unsigned int v11 = a4;
  int v10 = 0;
  ot::Dhcp6::IaAddress::Init((ot::Dhcp6::IaAddress *)v9);
  Address  = (ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v9);
  ot::Ip6::Address::SetPrefix(Address, v12, 0x40u);
  unsigned __int16 v5 = (ot::Ip6::Address *)ot::Dhcp6::IaAddress::GetAddress((ot::Dhcp6::IaAddress *)v9);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v5);
  DuidLinkLayerAddress  = (const ot::Mac::ExtAddress *)ot::Dhcp6::ClientIdentifier::GetDuidLinkLayerAddress(v11);
  ot::Ip6::InterfaceIdentifier::SetFromExtAddress(Iid, DuidLinkLayerAddress);
  ot::Dhcp6::IaAddress::SetPreferredLifetime((ot::Dhcp6::IaAddress *)v9, 0xFFFFFFFF);
  ot::Dhcp6::IaAddress::SetValidLifetime((ot::Dhcp6::IaAddress *)v9, 0xFFFFFFFF);
  return ot::Message::Append<ot::Dhcp6::IaAddress>(v13, v9);
}

uint64_t ot::Dhcp6::Server::ApplyMeshLocalPrefix(uint64_t this)
{
  unsigned __int16 v9 = (ot::InstanceLocator *)this;
  unsigned int v11 = (ot::Dhcp6::Server::PrefixAgent *)(this + 80);
  int v10 = (ot::Dhcp6::Server::PrefixAgent *)(this + 304);
  while (v11 != v10)
  {
    this  = ot::Dhcp6::Server::PrefixAgent::IsValid(v11);
    if (this)
    {
      unsigned __int16 v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v9);
      ot::Dhcp6::Server::PrefixAgent::GetAloc(v11);
      ot::Ip6::Netif::RemoveUnicastAddress(v6, v1);
      ot::Dhcp6::Server::PrefixAgent::GetAloc(v11);
      Address  = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v2);
      char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v9);
      ot::Mle::Mle::GetMeshLocalPrefix(v3);
      ot::Ip6::Address::SetPrefix(Address, v4);
      unsigned int v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v9);
      ot::Dhcp6::Server::PrefixAgent::GetAloc(v11);
      this  = ot::Ip6::Netif::AddUnicastAddress(v8, v5);
    }
    unsigned int v11 = (ot::Dhcp6::Server::PrefixAgent *)((char *)v11 + 56);
  }
  return this;
}

uint64_t ot::Ip6::Address::SetToAnycastLocator(ot::Ip6::Address *a1, void *a2, unsigned __int16 a3)
{
  return ot::Ip6::Address::SetToLocator(a1, a2, a3);
}

{
  return ot::Ip6::Address::SetToAnycastLocator(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Metrics::ConvertToTypeIds(ot::LinkMetrics::Metrics *this, unsigned __int8 *a2)
{
  unsigned __int8 v6 = 0;
  if (*(unsigned char *)this)
  {
    unsigned __int8 v6 = 1;
    *a2  = 64;
  }
  if ((*(unsigned char *)this & 2) != 0)
  {
    uint64_t v2 = v6++;
    a2[v2]  = 9;
  }
  if ((*(unsigned char *)this & 4) != 0)
  {
    uint64_t v3 = v6++;
    a2[v3]  = 10;
  }
  if ((*(unsigned char *)this & 8) != 0)
  {
    uint64_t v4 = v6++;
    a2[v4]  = 11;
  }
  return v6;
}

uint64_t ot::LinkMetrics::SeriesFlags::ConvertToMask(ot::LinkMetrics::SeriesFlags *this)
{
  if ((*(unsigned char *)this & 2) != 0) {
    char v1 = 2;
  }
  else {
    char v1 = 0;
  }
  char v5 = ((*(unsigned char *)this & 1) != 0) | v1;
  if ((*(unsigned char *)this & 4) != 0) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  char v6 = v5 | v2;
  if ((*(unsigned char *)this & 8) != 0) {
    char v3 = 8;
  }
  else {
    char v3 = 0;
  }
  return (v6 | v3);
}

unsigned char *ot::LinkMetrics::SeriesFlags::SetFrom(unsigned char *this, char a2)
{
  *this  = *this & 0xFE | ((a2 & 1) != 0);
  *this  = *this & 0xFD | (2 * ((a2 & 2) != 0));
  *this  = *this & 0xFB | (4 * ((a2 & 4) != 0));
  *this  = *this & 0xF7 | (8 * ((a2 & 8) != 0));
  return this;
}

_WORD *ot::LinkMetrics::SeriesInfo::Init(ot::LinkMetrics::SeriesInfo *this, char a2, char a3, const ot::LinkMetrics::Metrics *a4)
{
  *((unsigned char *)this + ot::MeshCoP::Tlv::SetType(this, 8) = a2;
  ot::LinkMetrics::SeriesFlags::SetFrom((unsigned char *)this + 9, a3);
  *((unsigned char *)this + 1ot::Time::Time((ot::Dhcp6::Client *)((char *)this + 148), 0) = *(unsigned char *)a4;
  ot::Clearable<ot::RssAverager>::Clear((_WORD *)this + 6);
  uint64_t result = ot::Clearable<ot::LqiAverager>::Clear((_WORD *)this + 7);
  *((_DWORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  return result;
}

_WORD *ot::Clearable<ot::LqiAverager>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::LqiAverager>::Clear(result);
}

void ot::LinkMetrics::SeriesInfo::AggregateLinkMetrics(ot::LinkMetrics::SeriesInfo *this, unsigned __int8 a2, unsigned __int8 a3, char a4)
{
  if (ot::LinkMetrics::SeriesInfo::IsFrameTypeMatch(this, a2))
  {
    ++*((_DWORD *)this + 4);
    ot::LqiAverager::Add((ot::LinkMetrics::SeriesInfo *)((char *)this + 14), a3);
    ot::RssAverager::Add((ot::LinkMetrics::SeriesInfo *)((char *)this + 12), a4);
    IgnoreError();
  }
}

uint64_t ot::LinkMetrics::SeriesInfo::IsFrameTypeMatch(ot::LinkMetrics::SeriesInfo *this, unsigned __int8 a2)
{
  char v6 = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v2 = 0;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        if ((ot::LinkMetrics::SeriesFlags::IsMacDataFlagSet((ot::LinkMetrics::SeriesInfo *)((char *)this + 9)) & 1) == 0) {
          char v6 = ot::LinkMetrics::SeriesFlags::IsLinkProbeFlagSet((ot::LinkMetrics::SeriesInfo *)((char *)this + 9)) & 1;
        }
        break;
      case 1:
        char v6 = ot::LinkMetrics::SeriesFlags::IsMacDataFlagSet((ot::LinkMetrics::SeriesInfo *)((char *)this + 9)) & 1;
        break;
      case 2:
        char v6 = ot::LinkMetrics::SeriesFlags::IsMacAckFlagSet((ot::LinkMetrics::SeriesInfo *)((char *)this + 9)) & 1;
        break;
      case 3:
        char v6 = ot::LinkMetrics::SeriesFlags::IsMacDataRequestFlagSet((ot::LinkMetrics::SeriesInfo *)((char *)this + 9)) & 1;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v6 & 1;
}

uint64_t ot::LinkMetrics::SeriesFlags::IsMacDataFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return (*(unsigned __int8 *)this >> 1) & 1;
}

{
  return ot::LinkMetrics::SeriesFlags::IsMacDataFlagSet(this);
}

uint64_t ot::LinkMetrics::SeriesFlags::IsLinkProbeFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::LinkMetrics::SeriesFlags::IsLinkProbeFlagSet(this);
}

uint64_t ot::LinkMetrics::SeriesFlags::IsMacDataRequestFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return (*(unsigned __int8 *)this >> 2) & 1;
}

{
  return ot::LinkMetrics::SeriesFlags::IsMacDataRequestFlagSet(this);
}

uint64_t ot::LinkMetrics::SeriesFlags::IsMacAckFlagSet(ot::LinkMetrics::SeriesFlags *this)
{
  return (*(unsigned __int8 *)this >> 3) & 1;
}

{
  return ot::LinkMetrics::SeriesFlags::IsMacAckFlagSet(this);
}

uint64_t ot::Dns::Header::SetRandomMessageId(ot::Dns::Header *this)
{
  return ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)2);
}

uint64_t ot::Dns::Header::ResponseCodeToError(unsigned __int8 a1)
{
  unsigned int v4 = 1;
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        unsigned int v4 = 0;
        break;
      case 1:
      case 10:
      case 20:
      case 22:
        unsigned int v4 = 6;
        break;
      case 2:
        unsigned int v4 = 1;
        break;
      case 3:
      case 8:
        unsigned int v4 = 23;
        break;
      case 4:
      case 11:
        unsigned int v4 = 12;
        break;
      case 5:
      case 9:
        unsigned int v4 = 8;
        break;
      case 6:
      case 7:
        unsigned int v4 = 29;
        break;
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
        return v4;
      case 21:
        unsigned int v4 = 27;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

uint64_t ot::Dns::Name::AppendTo(ot::Dns::Name *this, ot::Message *a2)
{
  __int16 v12 = this;
  unsigned int v11 = a2;
  NextLabel  = 0;
  if (ot::Dns::Name::IsEmpty(this))
  {
    return ot::Dns::Name::AppendTerminator(v11, v2);
  }
  else if (ot::Dns::Name::IsFromCString(this))
  {
    Asuint64_t CString = (ot::Dns::Name *)ot::Dns::Name::GetAsCString(this);
    return ot::Dns::Name::AppendName(AsCString, v11, v4, v5);
  }
  else
  {
    ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v9, *((const ot::Message **)this + 1), *((_WORD *)this + 8));
    while (1)
    {
      NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v9);
      if (NextLabel) {
        break;
      }
      NextLabel  = ot::Dns::Name::LabelIterator::AppendLabel((ot::Dns::Name::LabelIterator *)v9, v11);
      if (NextLabel) {
        return NextLabel;
      }
    }
    if (NextLabel == 23) {
      return ot::Dns::Name::AppendTerminator(v11, v6);
    }
  }
  return NextLabel;
}

BOOL ot::Dns::Name::IsEmpty(ot::Dns::Name *this)
{
  BOOL v2 = 0;
  if (!*(void *)this) {
    return *((void *)this + 1) == 0;
  }
  return v2;
}

{
  return ot::Dns::Name::IsEmpty(this);
}

uint64_t ot::Dns::Name::AppendTerminator(ot::Dns::Name *this, ot::Message *a2)
{
  unsigned int v4 = this;
  char v3 = 0;
  return ot::Message::Append<unsigned char>(this, &v3);
}

BOOL ot::Dns::Name::IsFromCString(ot::Dns::Name *this)
{
  return *(void *)this != 0;
}

{
  return ot::Dns::Name::IsFromCString(this);
}

uint64_t ot::Dns::Name::AppendName(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned int appended = ot::Dns::Name::AppendMultipleLabels(this, a2, a3, a4);
  if (!appended) {
    return ot::Dns::Name::AppendTerminator(a2, v4);
  }
  return appended;
}

uint64_t ot::Dns::Name::GetAsCString(ot::Dns::Name *this)
{
  return *(void *)this;
}

{
  return ot::Dns::Name::GetAsCString(this);
}

ot::Dns::Name::LabelIterator *ot::Dns::Name::LabelIterator::LabelIterator(ot::Dns::Name::LabelIterator *this, const ot::Message *a2, __int16 a3)
{
  return this;
}

uint64_t ot::Dns::Name::LabelIterator::GetNextLabel(ot::Dns::Name::LabelIterator *this)
{
  unsigned __int16 v9 = this;
  unsigned int v8 = 0;
  while (1)
  {
    unsigned __int8 v7 = 0;
    unsigned __int8 v6 = 0;
    unsigned int v8 = ot::Message::Read<unsigned char>(*(ot::Message **)this, *((_WORD *)this + 6), (char *)&v7);
    if (v8) {
      break;
    }
    unsigned __int8 v6 = v7 & 0xC0;
    if ((v7 & 0xC0) == 0)
    {
      if (v7)
      {
        *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = *((_WORD *)this + 6) + 1;
        *((unsigned char *)this + 1ot::Time::Time((ot::Dhcp6::Client *)((char *)this + 148), 0) = v7;
        *((_WORD *)this + 6)  = *((_WORD *)this + 4) + v7;
      }
      else
      {
        if (!ot::Dns::Name::LabelIterator::IsEndOffsetSet(this)) {
          *((_WORD *)this + 7)  = *((_WORD *)this + 6) + 1;
        }
        return 23;
      }
      return v8;
    }
    if (v6 != 192) {
      return 6;
    }
    unsigned __int16 v5 = 0;
    unsigned int v8 = ot::Message::Read<unsigned short>(*(ot::Message **)this, *((_WORD *)this + 6), (char *)&v5);
    if (v8) {
      return v8;
    }
    if (!ot::Dns::Name::LabelIterator::IsEndOffsetSet(this)) {
      *((_WORD *)this + 7)  = *((_WORD *)this + 6) + 2;
    }
    __int16 Offset = ot::Message::GetOffset(*(ot::Message **)this);
    unsigned __int16 v4 = (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v5) & 0x3FFF) + Offset;
    if (v4 >= (int)*((unsigned __int16 *)this + 6)) {
      return 6;
    }
    *((_WORD *)this + 6)  = v4;
  }
  return v8;
}

uint64_t ot::Dns::Name::LabelIterator::AppendLabel(ot::Dns::Name::LabelIterator *this, ot::Message *a2)
{
  if (*((unsigned char *)this + 10) && *((unsigned __int8 *)this + 10) <= 0x3Fu)
  {
    unsigned int v4 = ot::Message::Append<unsigned char>(a2, (char *)this + 10);
    if (!v4) {
      return ot::Message::AppendBytesFromMessage(a2, *(const ot::Message **)this, *((_WORD *)this + 4), *((unsigned __int8 *)this + 10));
    }
  }
  else
  {
    return 7;
  }
  return v4;
}

uint64_t ot::Dns::Name::AppendLabel(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3)
{
  unsigned __int8 v3 = ot::StringLength(this, (const char *)0x40);
  return ot::Dns::Name::AppendLabel(this, (const char *)v3, a2, v4);
}

uint64_t ot::Dns::Name::AppendLabel(ot::Dns::Name *this, const char *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned int v8 = (char *)this;
  unsigned __int8 v7 = a2;
  if ((_BYTE)a2 && v7 <= 0x3Fu)
  {
    unsigned int v5 = ot::Message::Append<unsigned char>(a3, (char *)&v7);
    if (!v5) {
      return ot::Message::AppendBytes(a3, v8, v7);
    }
  }
  else
  {
    return 7;
  }
  return v5;
}

uint64_t ot::Dns::Name::AppendMultipleLabels(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3, ot::Message *a4)
{
  return ot::Dns::Name::AppendMultipleLabels(this, (const char *)0xFE, a2, a4);
}

uint64_t ot::Dns::Name::AppendMultipleLabels(ot::Dns::Name *this, const char *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned __int8 v11 = a2;
  uint64_t v9 = 0;
  if (!this) {
    return HIDWORD(v9);
  }
  while (1)
  {
    if (WORD1(v9) >= (int)v11) {
      char v8 = 0;
    }
    else {
      char v8 = *((unsigned char *)this + WORD1(v9));
    }
    if (v8 && v8 != 46) {
      goto LABEL_20;
    }
    if (BYTE2(v9) == (_BYTE)v9) {
      break;
    }
    if (WORD1(v9) + 1 >= 255)
    {
      HIDWORD(vot::MeshCoP::Tlv::SetType(this, 9) = 7;
      return HIDWORD(v9);
    }
    HIDWORD(vot::MeshCoP::Tlv::SetType(this, 9) = ot::Dns::Name::AppendLabel((ot::Dns::Name *)((char *)this + (unsigned __int16)v9), (const char *)(BYTE2(v9) - v9), a3, a4);
    if (HIDWORD(v9)) {
      return HIDWORD(v9);
    }
    LOWORD(vot::MeshCoP::Tlv::SetType(this, 9) = WORD1(v9) + 1;
LABEL_20:
    ++WORD1(v9);
    if (!v8) {
      return HIDWORD(v9);
    }
  }
  char v7 = 1;
  if (v8)
  {
    BOOL v6 = 0;
    if (!WORD1(v9)) {
      BOOL v6 = *((unsigned char *)this + 1) == 0;
    }
    char v7 = v6;
  }
  if (v7) {
    int v4 = 0;
  }
  else {
    int v4 = 7;
  }
  HIDWORD(vot::MeshCoP::Tlv::SetType(this, 9) = v4;
  return HIDWORD(v9);
}

uint64_t ot::Dns::Name::AppendPointerLabel(ot::Dns::Name *this, ot::Message *a2, ot::Message *a3)
{
  unsigned __int16 v7 = (unsigned __int16)this;
  BOOL v6 = a2;
  int v5 = 0;
  __int16 v4 = 0;
  if ((unsigned __int16)this >= 0xC000u) {
    __assert_rtn("AppendPointerLabel", "dns_types.cpp", 250, "aOffset < kPointerLabelTypeUint16");
  }
  __int16 v4 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v7 | 0xC000u));
  return ot::Message::Append<unsigned short>(v6, (char *)&v4);
}

uint64_t ot::Dns::Name::ParseName(ot::Dns::Name *this, const ot::Message *a2, unsigned __int16 *a3)
{
  char v8 = this;
  unsigned __int16 v7 = a2;
  NextLabel  = 0;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v4, this, *(_WORD *)a2);
  do
    NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v4);
  while (!NextLabel);
  if (NextLabel == 23)
  {
    *(_WORD *)unsigned __int16 v7 = v5;
    return 0;
  }
  return NextLabel;
}

uint64_t ot::Dns::Name::ReadLabel(ot::Dns::Name *this, const ot::Message *a2, char *a3, char *a4, unsigned __int8 *a5)
{
  __int16 v12 = this;
  unsigned __int8 v11 = a2;
  int v10 = a3;
  uint64_t v9 = (unsigned __int8 *)a4;
  NextLabel  = 0;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v6, this, *(_WORD *)a2);
  NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6);
  if (!NextLabel)
  {
    NextLabel  = ot::Dns::Name::LabelIterator::ReadLabel((ot::Dns::Name::LabelIterator *)v6, v10, v9, 1);
    if (!NextLabel) {
      *(_WORD *)unsigned __int8 v11 = v7;
    }
  }
  return NextLabel;
}

uint64_t ot::Dns::Name::LabelIterator::ReadLabel(ot::Dns::Name::LabelIterator *this, char *a2, unsigned __int8 *a3, char a4)
{
  char v7 = a4 & 1;
  if (*((unsigned __int8 *)this + 10) < (int)*a3)
  {
    unsigned int v6 = ot::Message::Read(*(ot::Message **)this, *((_WORD *)this + 4), a2, *((unsigned __int8 *)this + 10));
    if (!v6)
    {
      a2[*((unsigned __int8 *)this + 10)]  = 0;
      *a3  = *((unsigned char *)this + 10);
      if ((v7 & 1) == 0)
      {
        if (ot::StringFind((ot *)a2, (const char *)0x2E)) {
          return 6;
        }
      }
    }
  }
  else
  {
    return 3;
  }
  return v6;
}

uint64_t ot::Dns::Name::ReadName(ot::Dns::Name *this, const ot::Message *a2, char *a3, char *a4)
{
  uint64_t v15 = this;
  unsigned __int16 v14 = a2;
  unsigned __int16 v13 = a3;
  unsigned __int16 v12 = (unsigned __int16)a4;
  NextLabel  = 0;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v9, this, *(_WORD *)a2);
  char v8 = 1;
  unsigned __int8 v7 = 0;
  while (1)
  {
    NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v9);
    if (NextLabel) {
      break;
    }
    if ((v8 & 1) == 0)
    {
      __int16 v4 = v13++;
      *__int16 v4 = 46;
      --v12;
    }
    unsigned __int8 v7 = ot::Min<unsigned short>(0x40u, v12);
    NextLabel  = ot::Dns::Name::LabelIterator::ReadLabel((ot::Dns::Name::LabelIterator *)v9, v13, &v7, 0);
    if (NextLabel) {
      return NextLabel;
    }
    v13 += v7;
    v12 -= v7;
    char v8 = 0;
  }
  if (NextLabel == 23)
  {
    __int16 v5 = v13++;
    *__int16 v5 = 46;
    if (--v12)
    {
      *unsigned __int16 v13 = 0;
      *(_WORD *)unsigned __int16 v14 = v10;
      return 0;
    }
    else
    {
      return 3;
    }
  }
  return NextLabel;
}

uint64_t ot::Dns::Name::CompareLabel(ot::Dns::Name *this, const ot::Message *a2, char *a3, const char *a4)
{
  uint64_t v9 = this;
  char v8 = a2;
  unsigned __int8 v7 = a3;
  NextLabel  = 0;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v5, this, *(_WORD *)a2);
  NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v5);
  if (!NextLabel)
  {
    if (ot::Dns::Name::LabelIterator::CompareLabel((ot::Dns::Name::LabelIterator *)v5, (const char **)&v7, 1)) {
      *(_WORD *)char v8 = v5[6];
    }
    else {
      return 23;
    }
  }
  return NextLabel;
}

BOOL ot::Dns::Name::LabelIterator::CompareLabel(ot::Dns::Name::LabelIterator *this, const char **a2, char a3)
{
  char v6 = a3 & 1;
  BOOL v5 = 0;
  if (*((unsigned __int8 *)this + 10) == (unsigned __int16)ot::StringLength((ot *)*a2, (const char *)*((unsigned __int8 *)this + 10)))
  {
    BOOL v5 = ot::Message::CompareBytes(*(ot::Message **)this, *((_WORD *)this + 4), (const unsigned __int8 *)*a2, *((unsigned __int8 *)this + 10), (BOOL (*)(unsigned __int8, unsigned __int8))ot::Dns::Name::LabelIterator::CaseInsensitiveMatch);
    if (v5)
    {
      *a2 += *((unsigned __int8 *)this + 10);
      BOOL v5 = **a2 == 0;
      if ((v6 & 1) == 0 && **a2 == 46)
      {
        BOOL v5 = 1;
        ++*a2;
      }
    }
  }
  return v5;
}

uint64_t ot::Dns::Name::CompareName(ot::Dns::Name *this, const ot::Message *a2, char *a3, const char *a4)
{
  unsigned __int8 v11 = this;
  __int16 v10 = a2;
  uint64_t v9 = a3;
  NextLabel  = 0;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v6, this, *(_WORD *)a2);
  char v5 = 1;
  if (*v9 == 46 && (++v9, *v9))
  {
    return 7;
  }
  else
  {
    while (1)
    {
      NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6);
      if (NextLabel) {
        break;
      }
      if ((v5 & 1) != 0
        && !ot::Dns::Name::LabelIterator::CompareLabel((ot::Dns::Name::LabelIterator *)v6, (const char **)&v9, 0))
      {
        char v5 = 0;
      }
    }
    if (NextLabel == 23)
    {
      if ((v5 & 1) != 0 && !*v9) {
        NextLabel  = 0;
      }
      *(_WORD *)__int16 v10 = v7;
    }
  }
  return NextLabel;
}

uint64_t ot::Dns::Name::CompareName(ot::Dns::Name *this, const ot::Message *a2, const ot::Message *a3, const ot::Message *a4)
{
  unsigned __int16 v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int8 v11 = a3;
  __int16 v10 = (__int16)a4;
  NextLabel  = 0;
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v7, this, *(_WORD *)a2);
  ot::Dns::Name::LabelIterator::LabelIterator((ot::Dns::Name::LabelIterator *)v6, v11, v10);
  char v5 = 1;
  while (1)
  {
    NextLabel  = ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v7);
    if (NextLabel) {
      break;
    }
    if ((v5 & 1) != 0
      && (ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6)
       || !ot::Dns::Name::LabelIterator::CompareLabel((ot::Dns::Name::LabelIterator *)v7, (const ot::Dns::Name::LabelIterator *)v6)))
    {
      char v5 = 0;
    }
  }
  if (NextLabel == 23)
  {
    if ((v5 & 1) != 0
      && ot::Dns::Name::LabelIterator::GetNextLabel((ot::Dns::Name::LabelIterator *)v6) == 23)
    {
      NextLabel  = 0;
    }
    *(_WORD *)unsigned __int16 v12 = v8;
  }
  return NextLabel;
}

BOOL ot::Dns::Name::LabelIterator::CompareLabel(ot::Dns::Name::LabelIterator *this, const ot::Dns::Name::LabelIterator *a2)
{
  BOOL v3 = 0;
  if (*((unsigned __int8 *)this + 10) == *((unsigned __int8 *)a2 + 10)) {
    return ot::Message::CompareBytes(*(ot::Message **)this, *((_WORD *)this + 4), *(const ot::Message **)a2, *((_WORD *)a2 + 4), *((unsigned __int8 *)this + 10), (BOOL (*)(unsigned __int8, unsigned __int8))ot::Dns::Name::LabelIterator::CaseInsensitiveMatch);
  }
  return v3;
}

uint64_t ot::Dns::Name::CompareName(ot::Dns::Name *this, const ot::Message *a2, const ot::Message **a3, const ot::Dns::Name *a4)
{
  if (ot::Dns::Name::IsFromCString((ot::Dns::Name *)a3))
  {
    return ot::Dns::Name::CompareName(this, a2, (char *)*a3, v4);
  }
  else if (ot::Dns::Name::IsFromMessage((ot::Dns::Name *)a3))
  {
    return ot::Dns::Name::CompareName(this, a2, a3[1], (const ot::Message *)*((unsigned __int16 *)a3 + 8));
  }
  else
  {
    return ot::Dns::Name::ParseName(this, a2, v5);
  }
}

BOOL ot::Dns::Name::IsFromMessage(ot::Dns::Name *this)
{
  return *((void *)this + 1) != 0;
}

{
  return ot::Dns::Name::IsFromMessage(this);
}

uint64_t ot::Message::Read<unsigned char>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 1u);
}

{
  return ot::Message::Read<unsigned char>(a1, a2, a3);
}

BOOL ot::Dns::Name::LabelIterator::IsEndOffsetSet(ot::Dns::Name::LabelIterator *this)
{
  return *((_WORD *)this + 7) != 0;
}

{
  return ot::Dns::Name::LabelIterator::IsEndOffsetSet(this);
}

BOOL ot::Dns::Name::LabelIterator::CaseInsensitiveMatch(ot::Dns::Name::LabelIterator *this, char a2)
{
  int v3 = (char)ot::ToLowercase((ot *)(char)this);
  return v3 == (char)ot::ToLowercase((ot *)a2);
}

BOOL ot::Dns::Name::IsSubDomainOf(ot::Dns::Name *this, ot *a2, const char *a3)
{
  BOOL v8 = 0;
  char v7 = 0;
  char v6 = 0;
  unsigned __int16 v5 = ot::StringLength(this, (const char *)0xFE);
  unsigned __int16 v4 = ot::StringLength(a2, (const char *)0xFE);
  if (v5 && *((unsigned char *)this + v5 - 1) == 46)
  {
    char v7 = 1;
    --v5;
  }
  if (v4 && *((unsigned char *)a2 + v4 - 1) == 46)
  {
    char v6 = 1;
    --v4;
  }
  if (v5 >= (int)v4)
  {
    unsigned __int8 v11 = (char *)this + v5 - v4;
    if (v5 <= (int)v4 || *(v11 - 1) == 46)
    {
      if ((v7 & 1) == (v6 & 1))
      {
        return ot::StringMatch(v11, (char *)a2, 1);
      }
      else if (v7)
      {
        return ot::StringStartsWith(v11, (char *)a2, 1);
      }
      else
      {
        return ot::StringStartsWith((char *)a2, v11, 1);
      }
    }
  }
  return v8;
}

BOOL ot::Dns::Name::IsSameDomain(ot::Dns::Name *this, ot::Dns::Name *a2, const char *a3)
{
  BOOL v5 = 0;
  if (ot::Dns::Name::IsSubDomainOf(this, a2, a3)) {
    return ot::Dns::Name::IsSubDomainOf(a2, this, v3);
  }
  return v5;
}

uint64_t ot::Dns::ResourceRecord::ParseRecords(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3)
{
  uint64_t v9 = this;
  BOOL v8 = a2;
  __int16 v7 = (__int16)a3;
  unsigned int v6 = 0;
  while (v7)
  {
    unsigned int v6 = ot::Dns::Name::ParseName(v9, v8, a3);
    if (v6) {
      break;
    }
    unsigned int v6 = ot::Dns::ResourceRecord::ReadFrom((ot::Dns::ResourceRecord *)v5, v9, *(_WORD *)v8);
    if (v6) {
      break;
    }
    Size  = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v5);
    *(_WORD *)v8 += Size;
    --v7;
  }
  return v6;
}

uint64_t ot::Dns::ResourceRecord::ReadFrom(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v5 = ot::Message::Read<ot::Dns::ResourceRecord>(a2, a3, (char *)this);
  if (!v5) {
    return ot::Dns::ResourceRecord::CheckRecord(this, a2, a3);
  }
  return v5;
}

uint64_t ot::Dns::ResourceRecord::GetSize(ot::Dns::ResourceRecord *this)
{
  return (unsigned __int16)ot::Dns::ResourceRecord::GetLength(this) + 10;
}

{
  return ot::Dns::ResourceRecord::GetSize(this);
}

uint64_t ot::Dns::ResourceRecord::FindRecord(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3, unsigned __int16 *a4, const ot::Dns::Name *a5)
{
  unsigned __int16 v13 = this;
  unsigned __int16 v12 = a2;
  unsigned __int8 v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = 0;
  while (*v11)
  {
    char v8 = 1;
    unsigned int v9 = ot::Dns::Name::CompareName(v13, v12, (const ot::Message **)v10, (const ot::Dns::Name *)a4);
    if (v9)
    {
      if (v9 != 23) {
        return v9;
      }
      char v8 = 0;
    }
    unsigned int v9 = ot::Dns::ResourceRecord::ReadFrom((ot::Dns::ResourceRecord *)v7, v13, *(_WORD *)v12);
    if (v9) {
      return v9;
    }
    --*v11;
    if (v8) {
      return v9;
    }
    Size  = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v7);
    *(_WORD *)v12 += Size;
  }
  return 23;
}

uint64_t ot::Dns::ResourceRecord::FindRecord(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3, __int16 a4, const ot::Dns::Name *a5, const ot::Dns::Name *a6, uint64_t a7, ot::Dns::ResourceRecord *a8, unsigned __int16 a9)
{
  char v18 = this;
  uint64_t v17 = a2;
  unsigned __int16 v16 = (unsigned __int16)a3;
  __int16 v15 = a4;
  *(void *)&v14[1]  = a5;
  v14[0]  = (_WORD)a6;
  *(void *)&v13[1]  = a7;
  v13[0]  = (_WORD)a8;
  Record  = 0;
  __int16 v11 = 0;
  __int16 v11 = *(_WORD *)a2;
  while (v16)
  {
    Record  = ot::Dns::ResourceRecord::FindRecord(v18, (const ot::Message *)&v11, &v16, *(unsigned __int16 **)&v14[1], a5);
    if (Record) {
      return Record;
    }
    __int16 v10 = v11;
    Record  = ot::Dns::ResourceRecord::ReadRecord(v18, (const ot::Message *)&v11, (unsigned __int16 *)v14[0], *(void **)&v13[1], (ot::Dns::ResourceRecord *)v13[0]);
    if (Record != 23)
    {
      if (Record) {
        return Record;
      }
      if (!v15)
      {
        *(_WORD *)uint64_t v17 = v11;
        return Record;
      }
      --v15;
      __int16 v11 = v10 + ot::Dns::ResourceRecord::GetSize(*(ot::Dns::ResourceRecord **)&v13[1]);
    }
  }
  return 23;
}

uint64_t ot::Dns::ResourceRecord::ReadRecord(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3, void *a4, ot::Dns::ResourceRecord *a5)
{
  __int16 v15 = this;
  unsigned __int16 v14 = (unsigned __int16 *)a2;
  __int16 v13 = (__int16)a3;
  unsigned __int16 v12 = a4;
  unsigned __int16 v11 = (unsigned __int16)a5;
  unsigned int v10 = 0;
  unsigned int v10 = ot::Dns::ResourceRecord::ReadFrom((ot::Dns::ResourceRecord *)v9, this, *(_WORD *)a2);
  if (!v10)
  {
    if ((v13 == 255 || (__int16 Type = ot::Dns::ResourceRecord::GetType((ot::Dns::ResourceRecord *)v9), v13 == Type))
      && (unsigned int v6 = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v9), v6 >= v11))
    {
      ot::Message::Read(v15, *v14, (char *)v12, v11);
      IgnoreError();
      *v14 += v11;
    }
    else
    {
      Size  = ot::Dns::ResourceRecord::GetSize((ot::Dns::ResourceRecord *)v9);
      *v14 += Size;
      return 23;
    }
  }
  return v10;
}

uint64_t ot::Dns::ResourceRecord::GetType(ot::Dns::ResourceRecord *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::Dns::ResourceRecord::GetType(this);
}

uint64_t ot::Dns::ResourceRecord::ReadName(ot::Dns::ResourceRecord *this, const ot::Message *a2, const ot::Message *a3, unsigned __int16 a4, char *a5, unsigned __int16 a6, char a7)
{
  char v11 = a7 & 1;
  Name  = ot::Dns::Name::ReadName(a2, a3, a5, (char *)a6);
  if (!Name)
  {
    unsigned int v8 = *(unsigned __int16 *)a3;
    if (v8 <= a4 + ot::Dns::ResourceRecord::GetSize(this))
    {
      if (v11)
      {
        *(_WORD *)a3  = a4;
        return ot::Dns::ResourceRecord::SkipRecord(this, a2, (unsigned __int16 *)a3);
      }
    }
    else
    {
      return 6;
    }
  }
  return Name;
}

uint64_t ot::Dns::ResourceRecord::SkipRecord(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 *a3)
{
  unsigned int v5 = ot::Dns::ResourceRecord::CheckRecord(this, a2, *a3);
  if (!v5) {
    *a3 += ot::Dns::ResourceRecord::GetSize(this);
  }
  return v5;
}

uint64_t ot::Dns::ResourceRecord::CheckRecord(ot::Dns::ResourceRecord *this, const ot::Message *a2, unsigned __int16 a3)
{
  unsigned int v4 = a3 + ot::Dns::ResourceRecord::GetSize(this);
  if (v4 > (unsigned __int16)ot::Message::GetLength(a2)) {
    return 6;
  }
  else {
    return 0;
  }
}

uint64_t ot::Message::Read<ot::Dns::ResourceRecord>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xAu);
}

{
  return ot::Message::Read<ot::Dns::ResourceRecord>(a1, a2, a3);
}

uint64_t ot::Dns::TxtEntry::Iterator::Init(ot::Dns::TxtEntry::Iterator *this, const unsigned __int8 *a2, __int16 a3)
{
  return ot::Dns::TxtEntry::Iterator::SetTxtDataPosition((uint64_t)this, 0);
}

void *ot::Dns::TxtEntry::Iterator::SetTxtData(void *this, const unsigned __int8 *a2)
{
  *this  = a2;
  return this;
}

{
  return ot::Dns::TxtEntry::Iterator::SetTxtData(this, a2);
}

uint64_t ot::Dns::TxtEntry::Iterator::SetTxtDataLength(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + ot::MeshCoP::Tlv::SetType(this, 8) = a2;
  return this;
}

{
  return ot::Dns::TxtEntry::Iterator::SetTxtDataLength(this, a2);
}

uint64_t ot::Dns::TxtEntry::Iterator::SetTxtDataPosition(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 1ot::Time::Time((ot::Dhcp6::Client *)((char *)this + 148), 0) = a2;
  return this;
}

{
  return ot::Dns::TxtEntry::Iterator::SetTxtDataPosition(this, a2);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetNextEntry(ot::Dns::TxtEntry::Iterator *a1, uint64_t a2)
{
  unsigned int v12 = 0;
  KeyBuffer  = ot::Dns::TxtEntry::Iterator::GetKeyBuffer(a1);
  if (ot::Dns::TxtEntry::Iterator::GetTxtData(a1))
  {
    *(void *)a2  = KeyBuffer;
    do
    {
      TxtData  = ot::Dns::TxtEntry::Iterator::GetTxtData(a1);
      __int16 v7 = (unsigned __int8 *)(TxtData + (unsigned __int16)ot::Dns::TxtEntry::Iterator::GetTxtDataPosition(a1));
      if ((unint64_t)v7 >= ot::Dns::TxtEntry::Iterator::GetTxtDataEnd(a1)) {
        return 23;
      }
      unsigned __int8 v11 = *v7;
      unsigned int v8 = v7 + 1;
      if ((unint64_t)&v8[v11] > ot::Dns::TxtEntry::Iterator::GetTxtDataEnd(a1)) {
        return 6;
      }
      ot::Dns::TxtEntry::Iterator::IncreaseTxtDataPosition((uint64_t)a1, v11 + 1);
    }
    while (!v11 || *v8 == 61);
    for (unsigned __int8 i = 0; i < (int)v11; ++i)
    {
      if (v8[i] == 61)
      {
        uint64_t v2 = i;
        unsigned __int8 v10 = i + 1;
        *(unsigned char *)(KeyBuffer + vot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = 0;
        *(void *)(a2 + ot::MeshCoP::Tlv::SetType(this, 8) = &v8[v10];
        *(_WORD *)(a2 + 16)  = v11 - v10;
        return v12;
      }
      if (i >= 9u)
      {
        *(void *)a2  = 0;
        *(void *)(a2 + ot::MeshCoP::Tlv::SetType(this, 8) = v8;
        *(_WORD *)(a2 + 16)  = v11;
        return v12;
      }
      *(unsigned char *)(KeyBuffer + i)  = v8[i];
    }
    *(unsigned char *)(KeyBuffer + i)  = 0;
    *(void *)(a2 + ot::MeshCoP::Tlv::SetType(this, 8) = 0;
    *(_WORD *)(a2 + 16)  = 0;
  }
  else
  {
    return 6;
  }
  return v12;
}

uint64_t ot::Dns::TxtEntry::Iterator::GetKeyBuffer(ot::Dns::TxtEntry::Iterator *this)
{
  return (uint64_t)this + 12;
}

{
  return ot::Dns::TxtEntry::Iterator::GetKeyBuffer(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtData(ot::Dns::TxtEntry::Iterator *this)
{
  return *(void *)this;
}

{
  return ot::Dns::TxtEntry::Iterator::GetTxtData(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtDataPosition(ot::Dns::TxtEntry::Iterator *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return ot::Dns::TxtEntry::Iterator::GetTxtDataPosition(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtDataEnd(ot::Dns::TxtEntry::Iterator *this)
{
  TxtData  = ot::Dns::TxtEntry::Iterator::GetTxtData(this);
  return TxtData + (unsigned __int16)ot::Dns::TxtEntry::Iterator::GetTxtDataLength(this);
}

{
  return ot::Dns::TxtEntry::Iterator::GetTxtDataEnd(this);
}

uint64_t ot::Dns::TxtEntry::Iterator::IncreaseTxtDataPosition(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10) += a2;
  return this;
}

{
  return ot::Dns::TxtEntry::Iterator::IncreaseTxtDataPosition(this, a2);
}

uint64_t ot::Dns::TxtEntry::AppendTo(ot::Dns::TxtEntry *this, ot::Message *a2)
{
  v4[4]  = this;
  v4[3]  = a2;
  ot::Appender::Appender((ot::Appender *)v4, a2);
  return ot::Dns::TxtEntry::AppendTo(this, v4);
}

uint64_t ot::Dns::TxtEntry::AppendTo(ot::Dns::TxtEntry *this, ot::Message **a2)
{
  unsigned __int8 v10 = this;
  unsigned int v9 = a2;
  unsigned int appended = 0;
  unsigned __int16 v7 = 0;
  char v6 = 61;
  if (*(void *)this)
  {
    unsigned __int16 v7 = ot::StringLength(*(ot **)this, (const char *)0x100);
    if (v7)
    {
      if (*((void *)this + 1))
      {
        if ((unint64_t)(*((unsigned __int16 *)this + 8) + v7 + 1) <= 0xFF)
        {
          char v4 = v7 + *((_WORD *)this + 8) + 1;
          unsigned int appended = ot::Appender::Append<unsigned char>(v9, &v4);
          if (!appended)
          {
            unsigned int appended = ot::Appender::AppendBytes(v9, *(void **)this, v7);
            if (!appended)
            {
              unsigned int appended = ot::Appender::Append<char>(v9, &v6);
              if (!appended) {
                return ot::Appender::AppendBytes(v9, *((void **)this + 1), *((_WORD *)this + 8));
              }
            }
          }
        }
        else
        {
          return 7;
        }
      }
      else
      {
        char v5 = v7;
        unsigned int appended = ot::Appender::Append<unsigned char>(v9, &v5);
        if (!appended) {
          return ot::Appender::AppendBytes(v9, *(void **)this, v7);
        }
      }
    }
    else
    {
      return 7;
    }
  }
  else if (*((void *)this + 1) && *((_WORD *)this + 8))
  {
    return ot::Appender::AppendBytes(v9, *((void **)this + 1), *((_WORD *)this + 8));
  }
  return appended;
}

uint64_t ot::Appender::Append<unsigned char>(ot::Message **a1, void *a2)
{
  return ot::Appender::AppendBytes(a1, a2, 1u);
}

{
  return ot::Appender::Append<unsigned char>(a1, a2);
}

uint64_t ot::Appender::Append<char>(ot::Message **a1, void *a2)
{
  return ot::Appender::AppendBytes(a1, a2, 1u);
}

{
  return ot::Appender::Append<char>(a1, a2);
}

uint64_t ot::Dns::TxtEntry::AppendEntries(ot::Dns::TxtEntry *this, const ot::Dns::TxtEntry *a2, ot::Message *a3, ot::Message *a4)
{
  unsigned int v9 = this;
  unsigned __int8 v8 = a2;
  unsigned __int16 v7 = a3;
  ot::Appender::Appender((ot::Appender *)v6, a3);
  return ot::Dns::TxtEntry::AppendEntries(v9, (const ot::Dns::TxtEntry *)v8, (ot::Appender *)v6, v4);
}

uint64_t ot::Dns::TxtEntry::AppendEntries(ot::Dns::TxtEntry *this, const ot::Dns::TxtEntry *a2, ot::Appender *a3, ot::Appender *a4)
{
  unsigned __int8 v8 = this;
  unsigned __int8 v7 = a2;
  char v6 = a3;
  memset(&v5[1], 0, 5);
  while (v5[1] < (int)v7)
  {
    *(_DWORD *)&unsigned __int16 v5[2] = ot::Dns::TxtEntry::AppendTo((ot::Dns::TxtEntry *)((char *)v8 + 24 * v5[1]), (ot::Message **)v6);
    if (*(_DWORD *)&v5[2]) {
      return *(unsigned int *)&v5[2];
    }
    *(_DWORD *)&v5[1]  = (v5[1] + 1);
  }
  if (!(unsigned __int16)ot::Appender::GetAppendedLength((ot::Message **)v6))
  {
    v5[0]  = 0;
    *(_DWORD *)&unsigned __int16 v5[2] = ot::Appender::Append<unsigned char>((ot::Message **)v6, v5);
  }
  return *(unsigned int *)&v5[2];
}

uint64_t ot::Dns::TxtEntry::AppendEntries(ot::Dns::TxtEntry *a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned int v12 = a1;
  unsigned __int8 v11 = a2;
  uint64_t v10 = a3;
  unsigned int appended = 0;
  ot::MutableData<(ot::DataLengthType)1>::GetBytes(a3);
  unsigned __int8 v7 = v3;
  __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(v10);
  ot::Appender::Appender((ot::Appender *)v8, v7, Length);
  unsigned int appended = ot::Dns::TxtEntry::AppendEntries(v12, (const ot::Dns::TxtEntry *)v11, (ot::Appender *)v8, v5);
  if (!appended) {
    ot::Appender::GetAsData((uint64_t)v8, v10);
  }
  return appended;
}

void ot::MutableData<(ot::DataLengthType)1>::GetBytes(uint64_t a1)
{
}

{
  ot::MutableData<(ot::DataLengthType)1>::GetBytes(a1);
}

BOOL ot::Dns::AaaaRecord::IsValid(ot::Dns::AaaaRecord *this)
{
  BOOL v3 = 0;
  if ((unsigned __int16)ot::Dns::ResourceRecord::GetType(this) == 28) {
    return ot::Dns::ResourceRecord::GetSize(this) == 26;
  }
  return v3;
}

BOOL ot::Dns::KeyRecord::IsValid(ot::Dns::KeyRecord *this)
{
  return (unsigned __int16)ot::Dns::ResourceRecord::GetType(this) == 25;
}

BOOL ot::Dns::SigRecord::IsValid(ot::Dns::SigRecord *this)
{
  BOOL v3 = 0;
  if ((unsigned __int16)ot::Dns::ResourceRecord::GetType(this) == 24) {
    return (unsigned __int16)ot::Dns::ResourceRecord::GetLength(this) >= 0x12uLL;
  }
  return v3;
}

uint64_t ot::Dns::ResourceRecord::GetLength(ot::Dns::ResourceRecord *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 4));
}

{
  return ot::Dns::ResourceRecord::GetLength(this);
}

uint64_t ot::Dns::LeaseOption::InitAsShortVariant(ot::Dns::LeaseOption *this, unsigned int a2)
{
  return ot::Dns::LeaseOption::SetLeaseInterval(this, a2);
}

uint64_t ot::Dns::Option::SetOptionCode(ot::Dns::Option *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return ot::Dns::Option::SetOptionCode(this, a2);
}

uint64_t ot::Dns::Option::SetOptionLength(ot::Dns::Option *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1)  = result;
  return result;
}

{
  return ot::Dns::Option::SetOptionLength(this, a2);
}

uint64_t ot::Dns::LeaseOption::SetLeaseInterval(ot::Dns::LeaseOption *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + 1)  = result;
  return result;
}

{
  return ot::Dns::LeaseOption::SetLeaseInterval(this, a2);
}

uint64_t ot::Dns::LeaseOption::InitAsLongVariant(ot::Dns::LeaseOption *this, unsigned int a2, unsigned int a3)
{
  return ot::Dns::LeaseOption::SetKeyLeaseInterval(this, a3);
}

uint64_t ot::Dns::LeaseOption::SetKeyLeaseInterval(ot::Dns::LeaseOption *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *((_DWORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Dns::LeaseOption::SetKeyLeaseInterval(this, a2);
}

BOOL ot::Dns::LeaseOption::IsValid(ot::Dns::LeaseOption *this)
{
  BOOL v4 = 0;
  if ((unsigned __int16)ot::Dns::Option::GetOptionLength(this) == 4
    || (unsigned __int16)ot::Dns::Option::GetOptionLength(this) >= 8u)
  {
    Leaseunsigned int Interval = ot::Dns::LeaseOption::GetLeaseInterval(this);
    return LeaseInterval <= ot::Dns::LeaseOption::GetKeyLeaseInterval(this);
  }
  return v4;
}

uint64_t ot::Dns::Option::GetOptionLength(ot::Dns::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::Dns::Option::GetOptionLength(this);
}

uint64_t ot::Dns::LeaseOption::GetLeaseInterval(ot::Dns::LeaseOption *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 1));
}

{
  return ot::Dns::LeaseOption::GetLeaseInterval(this);
}

uint64_t ot::Dns::LeaseOption::GetKeyLeaseInterval(ot::Dns::LeaseOption *this)
{
  if (ot::Dns::LeaseOption::IsShortVariant(this)) {
    return ot::Dns::LeaseOption::GetLeaseInterval(this);
  }
  else {
    return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*((unsigned int *)this + 2));
  }
}

{
  return ot::Dns::LeaseOption::GetKeyLeaseInterval(this);
}

uint64_t ot::Dns::LeaseOption::ReadFrom(ot::Dns::LeaseOption *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned __int16 v11 = a3;
  if (a3 + a4 <= (unsigned __int16)ot::Message::GetLength(a2))
  {
    unsigned __int16 v8 = v11 + a4;
    while (1)
    {
      if (v11 >= (int)v8) {
        return 23;
      }
      unsigned int v9 = ot::Message::Read(a2, v11, (char *)this, 4u);
      if (v9) {
        return v9;
      }
      if (v11 + ot::Dns::Option::GetSize(this) > v8) {
        return 6;
      }
      Size  = ot::Dns::Option::GetSize(this);
      if ((unsigned __int16)ot::Dns::Option::GetOptionCode(this) == 2) {
        break;
      }
      v11 += Size;
    }
    if ((unsigned __int16)ot::Dns::Option::GetOptionLength(this) >= 4u)
    {
      unsigned __int16 v4 = ot::Min<unsigned short>(Size, 0xCu);
      ot::Message::Read(a2, v11, (char *)this, v4);
      IgnoreError();
      if (!ot::Dns::LeaseOption::IsValid(this)) {
        return 6;
      }
    }
    else
    {
      return 6;
    }
  }
  else
  {
    return 6;
  }
  return v9;
}

uint64_t ot::Dns::Option::GetSize(ot::Dns::Option *this)
{
  return (unsigned __int16)ot::Dns::Option::GetOptionLength(this) + 4;
}

{
  return ot::Dns::Option::GetSize(this);
}

uint64_t ot::Dns::Option::GetOptionCode(ot::Dns::Option *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::Dns::Option::GetOptionCode(this);
}

uint64_t ot::Dns::PtrRecord::ReadPtrName(ot::Dns::PtrRecord *this, const ot::Message *a2, const ot::Message *a3, char *a4, char a5, char *a6, unsigned __int16 a7)
{
  int v19 = this;
  char v18 = a2;
  uint64_t v17 = a3;
  unsigned __int16 v16 = a4;
  char v15 = a5;
  unsigned __int16 v11 = *(_WORD *)a3 - 10;
  Name  = ot::Dns::Name::ParseName(a2, a3, (unsigned __int16 *)a3);
  if (!Name)
  {
    unsigned int v9 = *(unsigned __int16 *)v17;
    if (v9 <= v11 + ot::Dns::ResourceRecord::GetSize(this))
    {
      *(_WORD *)uint64_t v17 = v11 + 10;
      Name  = ot::Dns::Name::ReadLabel(v18, v17, v16, &v15, v7);
      if (!Name && (!a6 || (Name  = ot::Dns::Name::ReadName(v18, v17, a6, (char *)a7)) == 0))
      {
        *(_WORD *)uint64_t v17 = v11;
        return ot::Dns::ResourceRecord::SkipRecord(this, v18, (unsigned __int16 *)v17);
      }
    }
    else
    {
      return 6;
    }
  }
  return Name;
}

uint64_t ot::Dns::TxtRecord::ReadTxtData(ot::Dns::TxtRecord *this, const ot::Message *a2, unsigned __int16 *a3, char *a4, unsigned __int16 *a5)
{
  unsigned __int16 v8 = *a3;
  unsigned __int16 Length = ot::Dns::ResourceRecord::GetLength(this);
  unsigned __int16 v6 = ot::Min<unsigned short>(Length, *a5);
  unsigned int v12 = ot::Message::Read(a2, v8, a4, v6);
  if (!v12)
  {
    *a3 += ot::Dns::ResourceRecord::GetLength(this);
    if (*a5 >= (int)(unsigned __int16)ot::Dns::ResourceRecord::GetLength(this))
    {
      *a5  = ot::Dns::ResourceRecord::GetLength(this);
      if (!ot::Dns::TxtRecord::VerifyTxtData((ot::Dns::TxtRecord *)a4, (const unsigned __int8 *)*a5, 1)) {
        return 6;
      }
    }
    else
    {
      return 3;
    }
  }
  return v12;
}

BOOL ot::Dns::TxtRecord::VerifyTxtData(ot::Dns::TxtRecord *this, const unsigned __int8 *a2, char a3)
{
  BOOL v6 = 0;
  char v5 = 0;
  if ((a3 & 1) != 0 || (_WORD)a2)
  {
    for (unsigned __int16 i = 0; i < (int)(unsigned __int16)a2; ++i)
    {
      if (v5) {
        --v5;
      }
      else {
        char v5 = *((unsigned char *)this + i);
      }
    }
    return v5 == 0;
  }
  return v6;
}

uint64_t ot::Dns::Name::LabelIterator::LabelIterator(uint64_t this, const ot::Message *a2, __int16 a3)
{
  *(void *)this  = a2;
  *(_WORD *)(this + 1ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  *(_WORD *)(this + 1ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  return this;
}

uint64_t ot::Dns::TxtEntry::Iterator::GetTxtDataLength(ot::Dns::TxtEntry::Iterator *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Dns::TxtEntry::Iterator::GetTxtDataLength(this);
}

BOOL ot::Dns::LeaseOption::IsShortVariant(ot::Dns::LeaseOption *this)
{
  return (unsigned __int16)ot::Dns::Option::GetOptionLength(this) == 4;
}

{
  return ot::Dns::LeaseOption::IsShortVariant(this);
}

ot::Ip6::Icmp *ot::Ip6::Icmp::Icmp(ot::Ip6::Icmp *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::LinkedList<ot::Coap::Resource>::LinkedList(this);
  uint64_t result = this;
  *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 1;
  *((_DWORD *)this + 3)  = 3;
  return result;
}

{
  ot::Ip6::Icmp::Icmp(this, a2);
  return this;
}

ot::Buffer *ot::Ip6::Icmp::NewMessage(ot::Ip6::Icmp *this)
{
  char v1 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  return ot::Ip6::Ip6::NewMessage(v1, 8);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Ip6>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
}

uint64_t ot::Ip6::Icmp::RegisterHandler(ot::Ip6::Icmp *this, ot::Ip6::Icmp::Handler *a2)
{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Add((uint64_t *)this, (uint64_t)a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Icmp::Handler>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Icmp::Handler>::Push(a1, a2);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Add(a1, a2);
}

uint64_t ot::Ip6::Icmp::SendEchoRequest(ot::Ip6::Icmp *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int16 a4)
{
  char v21 = this;
  long long v20 = a2;
  int v19 = a3;
  unsigned __int16 v18 = a4;
  unsigned int v17 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v16);
  memcpy(v16, v19, sizeof(v16));
  ot::Clearable<ot::Ip6::Icmp::Header>::Clear(&v15);
  ot::Ip6::Icmp::Header::SetType(&v15, 128);
  ot::Ip6::Icmp::Header::SetId((ot::Ip6::Icmp::Header *)&v15, v18);
  unsigned __int16 v4 = *((_WORD *)this + 4);
  *((_WORD *)this + ot::MeshCoP::Tlv::SetType(this, 4) = v4 + 1;
  ot::Ip6::Icmp::Header::SetSequence((ot::Ip6::Icmp::Header *)&v15, v4);
  unsigned int v17 = ot::Message::Prepend<ot::Ip6::Icmp::Header>(v20, (char *)&v15);
  if (!v17)
  {
    ot::Message::SetOffset(v20, 0);
    char v5 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
    unsigned int v17 = ot::Ip6::Ip6::SendDatagram(v5, v20, (ot::Ip6::MessageInfo *)v16, 0x3Au);
    if (!v17)
    {
      Sequence  = ot::Ip6::Icmp::Header::GetSequence((ot::Ip6::Icmp::Header *)&v15);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Icmp6", "Sent echo request: (seq  = %d)", v7, v8, v9, v10, v11, v12, Sequence);
    }
  }
  return v17;
}

void *ot::Clearable<ot::Ip6::Icmp::Header>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::Icmp::Header>::Clear(result);
}

unsigned char *ot::Ip6::Icmp::Header::SetType(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::Ip6::Icmp::Header::SetType(result, a2);
}

uint64_t ot::Ip6::Icmp::Header::SetId(ot::Ip6::Icmp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Ip6::Icmp::Header::SetId(this, a2);
}

uint64_t ot::Ip6::Icmp::Header::SetSequence(ot::Ip6::Icmp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3)  = result;
  return result;
}

{
  return ot::Ip6::Icmp::Header::SetSequence(this, a2);
}

uint64_t ot::Message::Prepend<ot::Ip6::Icmp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 8u);
}

{
  return ot::Message::Prepend<ot::Ip6::Icmp::Header>(a1, a2);
}

uint64_t ot::Ip6::Icmp::Header::GetSequence(ot::Ip6::Icmp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return ot::Ip6::Icmp::Header::GetSequence(this);
}

uint64_t ot::Ip6::Icmp::SendError(ot::InstanceLocator *a1, char a2, char a3, ot::Ip6::MessageInfo *a4, const ot::Message *a5)
{
  __int16 v13 = a1;
  char v12 = a2;
  char v11 = a3;
  uint64_t v10 = a4;
  uint64_t v9 = a5;
  unsigned int v8 = 0;
  unsigned int v8 = ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v7, a5);
  if (!v8) {
    return ot::Ip6::Icmp::SendError(a1, v12, v11, v10, (ot::Ip6::Headers *)v7, (uint64_t)v10);
  }
  return v8;
}

uint64_t ot::Ip6::Icmp::SendError(ot::InstanceLocator *a1, char a2, char a3, ot::Ip6::MessageInfo *a4, ot::Ip6::Headers *a5, uint64_t a6)
{
  unsigned __int16 v32 = a1;
  char v31 = a2;
  char v30 = a3;
  unsigned __int16 v29 = a4;
  int v28 = a5;
  uint64_t v27 = a6;
  unsigned int v26 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)__dst);
  unsigned int v24 = 0;
  ot::Message::Settings::Settings(v22, 1, 3);
  if (ot::Ip6::Headers::GetIpProto(v28) != 58
    || (IcmpHeader  = (ot::Ip6::Icmp::Header *)ot::Ip6::Headers::GetIcmpHeader(v28),
        !ot::Ip6::Icmp::Header::IsError(IcmpHeader)))
  {
    memcpy(__dst, v29, 0x38uLL);
    uint64_t v7 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
    unsigned int v24 = ot::Ip6::Ip6::NewMessage(v7, 0, (const ot::Message::Settings *)v22);
    if (v24)
    {
      ot::Clearable<ot::Ip6::Icmp::Header>::Clear(&v23);
      ot::Ip6::Icmp::Header::SetType(&v23, v31);
      ot::Ip6::Icmp::Header::SetCode((uint64_t)&v23, v30);
      unsigned int v26 = ot::Message::Append<ot::Ip6::Icmp::Header>(v24, (char *)&v23);
      if (!v26)
      {
        long long v20 = v24;
        ot::Ip6::Headers::GetIp6Header(v28);
        unsigned int v26 = ot::Message::Append<ot::Ip6::Header>(v20, v8);
        if (!v26)
        {
          uint64_t v9 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
          unsigned int v26 = ot::Ip6::Ip6::SendDatagram(v9, v24, (ot::Ip6::MessageInfo *)__dst, 0x3Au);
          if (!v26)
          {
            char v19 = v31;
            PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v29);
            ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v34);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
            SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v29);
            ot::Ip6::Address::ToString(SockAddr, (ot::StringWriter *)v33);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
            ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Icmp6", "Sent ICMPv6 Error, type: %u, code: %u, for ICMPv6 from peer: [%s] to peer [%s]", v12, v13, v14, v15, v16, v17, v19);
          }
        }
      }
    }
    else
    {
      unsigned int v26 = 3;
    }
  }
  if (v26 && v24) {
    ot::Message::Free(v24);
  }
  return v26;
}

BOOL ot::Ip6::Icmp::Header::IsError(ot::Ip6::Icmp::Header *this)
{
  return *(unsigned __int8 *)this < 0x80u;
}

{
  return ot::Ip6::Icmp::Header::IsError(this);
}

uint64_t ot::Ip6::Icmp::Header::SetCode(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1)  = a2;
  return result;
}

{
  return ot::Ip6::Icmp::Header::SetCode(result, a2);
}

uint64_t ot::Message::Append<ot::Ip6::Icmp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 8u);
}

{
  return ot::Message::Append<ot::Ip6::Icmp::Header>(a1, a2);
}

uint64_t ot::Message::Append<ot::Ip6::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x28u);
}

{
  return ot::Message::Append<ot::Ip6::Header>(a1, a2);
}

uint64_t ot::Ip6::Icmp::HandleMessage(ot::Ip6::Icmp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  unsigned int v11 = 0;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  unsigned int v11 = ot::Message::Read<ot::Ip6::Icmp::Header>(a2, Offset, v10);
  if (!v11)
  {
    unsigned int v11 = ot::Checksum::VerifyMessageChecksum(v13, v12, (const ot::Ip6::MessageInfo *)0x3A);
    if (!v11
      && (ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v10) != 128
       || (unsigned int v11 = ot::Ip6::Icmp::HandleEchoRequest(this, v13, v12)) == 0))
    {
      ot::Message::MoveOffset(v13, 8);
      v9[1]  = (uint64_t)this;
      v9[0]  = ot::LinkedList<ot::Ip6::Icmp::Handler>::begin((uint64_t)this);
      uint64_t v8 = ot::LinkedList<ot::Ip6::Icmp::Handler>::end();
      while (ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator!=(v9, &v8))
      {
        uint64_t v7 = (ot::Ip6::Icmp::Handler *)ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator*((uint64_t)v9);
        ot::Ip6::Icmp::Handler::HandleReceiveMessage(v7, v13, v12, (const ot::Ip6::Icmp::Header *)v10);
        ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator++(v9);
      }
    }
  }
  return v11;
}

uint64_t ot::Message::Read<ot::Ip6::Icmp::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return ot::Message::Read<ot::Ip6::Icmp::Header>(a1, a2, a3);
}

uint64_t ot::Ip6::Icmp::HandleEchoRequest(ot::Ip6::Icmp *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v45 = this;
  uint64_t v44 = a2;
  uint64_t v43 = a3;
  unsigned int appended = 0;
  uint64_t v40 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v39);
  if (ot::Ip6::Icmp::ShouldHandleEchoRequest(this, v43)
    || (uint64_t v9 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v43),
        Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v9),
        ot::Ip6::InterfaceIdentifier::IsLocator(Iid)))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Icmp6", "Received Echo Request", v3, v4, v5, v6, v7, v8, v32);
    ot::Clearable<ot::Ip6::Icmp::Header>::Clear(&v41);
    ot::Ip6::Icmp::Header::SetType(&v41, 129);
    unsigned int v11 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
    uint64_t v40 = ot::Ip6::Ip6::NewMessage(v11, 0);
    if (v40)
    {
      unsigned __int16 v38 = ot::Message::GetOffset(v44) + 4;
      unsigned int appended = ot::Message::AppendBytes(v40, (char *)&v41, 4u);
      if (!appended)
      {
        uint64_t v36 = v40;
        uint64_t v35 = v44;
        __int16 Length = ot::Message::GetLength(v44);
        unsigned int appended = ot::Message::AppendBytesFromMessage(v36, v35, v38, Length - v38);
        if (!appended)
        {
          PeerAddr  = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(v43);
          ot::Ip6::MessageInfo::SetPeerAddr(v39, PeerAddr);
          SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v43);
          if (!ot::Ip6::Address::IsMulticast(SockAddr))
          {
            char v21 = (__n128 *)ot::Ip6::MessageInfo::GetSockAddr(v43);
            ot::Ip6::MessageInfo::SetSockAddr(v39, v21);
          }
          char v22 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
          unsigned int appended = ot::Ip6::Ip6::SendDatagram(v22, v40, (ot::Ip6::MessageInfo *)v39, 0x3Au);
          if (!appended)
          {
            __int16 v34 = v40;
            unsigned __int16 Offset = ot::Message::GetOffset(v40);
            ot::Message::Read<ot::Ip6::Icmp::Header>(v34, Offset, (char *)&v41);
            IgnoreError();
            Sequence  = ot::Ip6::Icmp::Header::GetSequence((ot::Ip6::Icmp::Header *)&v41);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Icmp6", "Sent Echo Reply (seq  = %d)", v25, v26, v27, v28, v29, v30, Sequence);
          }
        }
      }
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Icmp6", "Failed to allocate a new message", v12, v13, v14, v15, v16, v17, v33);
    }
  }
  if (appended && v40) {
    ot::Message::Free(v40);
  }
  return appended;
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::Ip6::Icmp::Handler>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::begin(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::end();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator*(a1);
}

uint64_t ot::Ip6::Icmp::Handler::HandleReceiveMessage(ot::Ip6::Icmp::Handler *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Ip6::Icmp::Header *a4)
{
  return (*(uint64_t (**)(void, ot::Message *, const ot::Ip6::MessageInfo *, const ot::Ip6::Icmp::Header *))this)(*((void *)this + 1), a2, a3, a4);
}

{
  return ot::Ip6::Icmp::Handler::HandleReceiveMessage(this, a2, a3, a4);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Ip6::Icmp::Handler,ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator>::operator++(a1);
}

BOOL ot::Ip6::Icmp::ShouldHandleEchoRequest(ot::Ip6::Icmp *this, const ot::Ip6::MessageInfo *a2)
{
  BOOL IsMulticast = 0;
  unsigned int v2 = *((_DWORD *)this + 3);
  if (v2)
  {
    uint64_t v4 = v2;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = *((unsigned int *)this + 3);
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        BOOL IsMulticast = 0;
        break;
      case 1:
        SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(a2);
        BOOL IsMulticast = !ot::Ip6::Address::IsMulticast(SockAddr);
        break;
      case 2:
        uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(a2);
        BOOL IsMulticast = ot::Ip6::Address::IsMulticast(v6);
        break;
      case 3:
        BOOL IsMulticast = 1;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return IsMulticast;
}

BOOL ot::LinkedList<ot::Ip6::Icmp::Handler>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2]  = (uint64_t)a1;
  v3[1]  = a2;
  v3[0]  = 0;
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Find(a1, a2, v3) == 0;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Contains(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::SetNext(a2, *a1);
  *a1  = a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Push(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3  = 0;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3  = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Find(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

{
  return *(void *)(a1 + 16);
}

{
  return ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(a1);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16)  = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::SetNext(result, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::GetHead(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Icmp::Handler>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Icmp::Handler>::Iterator::Advance(a1);
}

ot::Ip6::Ip6 *ot::Ip6::Ip6::Ip6(ot::Ip6::Ip6 *this, ot::Instance *a2)
{
  *(unsigned char *)this  = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 1);
  *((void *)this + 3)  = 0;
  *((void *)this + ot::MeshCoP::Tlv::SetType(this, 4) = 0;
  ot::PriorityQueue::PriorityQueue((ot::Ip6::Ip6 *)((char *)this + 40));
  ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::TaskletIn((void *)this + 9, (uint64_t)a2);
  ot::Ip6::Icmp::Icmp((ot::Ip6::Ip6 *)((char *)this + 88), a2);
  ot::Ip6::Udp::Udp((ot::Ip6::Ip6 *)((char *)this + 104), a2);
  ot::Ip6::Mpl::Mpl((ot::Ip6::Ip6 *)((char *)this + 136), a2);
  return this;
}

{
  ot::Ip6::Ip6::Ip6(this, a2);
  return this;
}

void ot::Ip6::Ip6::HandleSendQueue(ot::Ip6::Ip6 *this)
{
  while (1)
  {
    ot::PriorityQueue::GetHead((ot::Ip6::Ip6 *)((char *)this + 40));
    char v3 = v1;
    if (!v1) {
      break;
    }
    ot::PriorityQueue::Dequeue((ot::Ip6::Ip6 *)((char *)this + 40), v1);
    ot::Ip6::Ip6::HandleDatagram(this, v3, 2u, 0, 0);
    IgnoreError();
  }
}

ot::PriorityQueue *ot::PriorityQueue::PriorityQueue(ot::PriorityQueue *this)
{
  return this;
}

{
  ot::Clearable<ot::PriorityQueue>::Clear(this);
  return this;
}

void *ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::HandleTasklet);
  return a1;
}

ot::Buffer *ot::Ip6::Ip6::NewMessage(ot::Ip6::Ip6 *this)
{
  return ot::Ip6::Ip6::NewMessage(this, 0);
}

ot::Buffer *ot::Ip6::Ip6::NewMessage(ot::Ip6::Ip6 *this, __int16 a2)
{
  Default  = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Ip6::Ip6::NewMessage(this, a2, Default);
}

ot::Buffer *ot::Ip6::Ip6::NewMessage(ot::Ip6::Ip6 *this, __int16 a2, const ot::Message::Settings *a3)
{
  char v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
  return ot::MessagePool::Allocate(v3, 0, a2 + 48, a3);
}

ot::Message *ot::Ip6::Ip6::NewMessageFromData(ot::Ip6::Ip6 *this, char *a2, unsigned __int16 a3, const ot::Message::Settings *a4)
{
  uint64_t v13 = this;
  uint64_t v12 = (ot::Ip6::Header *)a2;
  unsigned __int16 v11 = a3;
  uint64_t v10 = a4;
  uint64_t v9 = 0;
  __int16 v8 = *(_WORD *)a4;
  if (a2)
  {
    if (v11 >= 0x28uLL
      && ot::Ip6::Header::IsValid(v12)
      && (unsigned __int16)ot::Ip6::Header::GetPayloadLength(v12) + 40 == v11)
    {
      Dscp  = ot::Ip6::Header::GetDscp(v12);
      HIBYTE(vot::MeshCoP::Tlv::SetType(this, 8) = ot::Ip6::Ip6::DscpToPriority((ot::Ip6::Ip6 *)Dscp);
      unsigned int v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
      uint64_t v9 = ot::MessagePool::Allocate(v5, 0, 0, (ot::Message::Settings *)&v8);
      if (v9)
      {
        if (ot::Message::AppendBytes(v9, (char *)v12, v11))
        {
          ot::Message::Free(v9);
          return 0;
        }
      }
    }
  }
  return v9;
}

uint64_t ot::Ip6::Ip6::DscpToPriority(ot::Ip6::Ip6 *this)
{
  int v2 = this & 0x38;
  if ((this & 0x38) == 0) {
    return 1;
  }
  switch(v2)
  {
    case 8:
    case 16:
      return 0;
    case 24:
      return 1;
    case 32:
    case 40:
    case 48:
    case 56:
      return 2;
    default:
      return 1;
  }
}

uint64_t ot::Ip6::Header::GetDscp(ot::Ip6::Header *this)
{
  return (int)(ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this) & 0xFC0) >> 6;
}

{
  return ot::Ip6::Header::GetDscp(this);
}

uint64_t ot::Ip6::Ip6::PriorityToDscp(unsigned __int8 a1)
{
  unsigned __int8 v4 = 0;
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        unsigned __int8 v4 = 8;
        break;
      case 1:
      case 3:
        unsigned __int8 v4 = 0;
        break;
      case 2:
        unsigned __int8 v4 = 32;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

uint64_t ot::Ip6::Ip6::SetLargeScopeMulticastReceiveDatagramCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 2ot::MeshCoP::Tlv::SetType(this, 4) = a2;
  *(void *)(result + 3ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = a3;
  return result;
}

uint64_t ot::Ip6::Ip6::AddMplOption(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3)
{
  long long v20 = this;
  char v19 = a2;
  unsigned __int16 v18 = a3;
  unsigned int v17 = 0;
  NextHeader  = ot::Ip6::Header::GetNextHeader(a3);
  ot::Ip6::ExtensionHeader::SetNextHeader(v16, NextHeader);
  ot::Ip6::ExtensionHeader::SetLength((uint64_t)v16, 0);
  Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource(v18);
  ot::Ip6::Mpl::InitOption((ot::Ip6::Ip6 *)((char *)this + 136), (ot::Ip6::MplOption *)v15, Source);
  Size  = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v15);
  if (ot::Ip6::PadOption::InitToPadHeaderWithSize((ot::Ip6::PadOption *)v14, Size + 2)
    || (uint64_t v12 = v19,
        unsigned __int16 v6 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v14),
        (unsigned int v17 = ot::Message::PrependBytes(v12, v14, v6)) == 0))
  {
    unsigned __int16 v11 = v19;
    unsigned __int16 v7 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v15);
    unsigned int v17 = ot::Message::PrependBytes(v11, v15, v7);
    if (!v17)
    {
      unsigned int v17 = ot::Message::Prepend<ot::Ip6::HopByHopHeader>(v19, v16);
      if (!v17)
      {
        uint64_t v10 = v18;
        Payload__int16 Length = ot::Ip6::Header::GetPayloadLength(v18);
        ot::Ip6::Header::SetPayloadLength(v10, PayloadLength + 8);
        ot::Ip6::Header::SetNextHeader((uint64_t)v18, 0);
      }
    }
  }
  return v17;
}

unsigned char *ot::Ip6::ExtensionHeader::SetNextHeader(unsigned char *this, char a2)
{
  *this  = a2;
  return this;
}

{
  return ot::Ip6::ExtensionHeader::SetNextHeader(this, a2);
}

uint64_t ot::Ip6::ExtensionHeader::SetLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1)  = a2;
  return this;
}

{
  return ot::Ip6::ExtensionHeader::SetLength(this, a2);
}

uint64_t ot::Message::Prepend<ot::Ip6::HopByHopHeader>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 2u);
}

{
  return ot::Message::Prepend<ot::Ip6::HopByHopHeader>(a1, a2);
}

uint64_t ot::Ip6::Header::SetPayloadLength(ot::Ip6::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::EntryList((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Ip6::Header::SetPayloadLength(this, a2);
}

uint64_t ot::Ip6::Header::SetNextHeader(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6)  = a2;
  return this;
}

{
  return ot::Ip6::Header::SetNextHeader(this, a2);
}

uint64_t ot::Ip6::Ip6::AddTunneledMplOption(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3)
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  unsigned __int16 v11 = a3;
  unsigned int v10 = 0;
  ot::Ip6::Header::InitVersionTrafficClassFlow((ot::Ip6::Header *)v9);
  ot::Ip6::Header::SetHopLimit((uint64_t)v9, 64);
  Payload__int16 Length = ot::Ip6::Header::GetPayloadLength(v11);
  ot::Ip6::Header::SetPayloadLength((ot::Ip6::Header *)v9, PayloadLength + 40);
  Destinatiounsigned __int8 n = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v9);
  ot::Ip6::Address::SetToRealmLocalAllMplForwarders(Destination);
  ot::Ip6::Header::SetNextHeader((uint64_t)v9, 41);
  unsigned int v5 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v9);
  __int16 v8 = (ot::Ip6::Address *)ot::Ip6::Ip6::SelectSourceAddress(this, v5);
  if (v8)
  {
    ot::Ip6::Header::SetSource((ot::Ip6::Header *)v9, (__n128 *)v8);
    unsigned int v10 = ot::Ip6::Ip6::AddMplOption(this, v12, (ot::Ip6::Header *)v9);
    if (!v10) {
      return ot::Message::Prepend<ot::Ip6::Header>(v12, v9);
    }
  }
  else
  {
    return 20;
  }
  return v10;
}

uint64_t ot::Ip6::Header::InitVersionTrafficClassFlow(ot::Ip6::Header *this)
{
  return ot::Ip6::Header::SetVerionTrafficClassFlow(this, 0x60000000u);
}

{
  return ot::Ip6::Header::InitVersionTrafficClassFlow(this);
}

uint64_t ot::Ip6::Header::SetHopLimit(uint64_t this, char a2)
{
  *(unsigned char *)(this + 7)  = a2;
  return this;
}

{
  return ot::Ip6::Header::SetHopLimit(this, a2);
}

uint64_t ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Ip6 *this, const ot::Ip6::Address *a2)
{
  uint64_t v28 = this;
  uint64_t v27 = a2;
  Scope  = ot::Ip6::Address::GetScope(a2);
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  IsRoutingunsigned __int16 Locator = ot::Mle::Mle::IsRoutingLocator(v2, v27);
  unsigned int v24 = 0;
  unsigned __int8 v23 = 0;
  char v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v3);
  v22[1]  = v4;
  v22[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v4);
  uint64_t v21 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v22, &v21))
  {
    long long v20 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v22);
    uint64_t v16 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    Address  = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v20);
    if (ot::Mle::Mle::IsAnycastLocator(v16, Address)) {
      goto LABEL_30;
    }
    uint64_t v15 = v27;
    unsigned __int16 v6 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v20);
    unsigned __int8 v19 = ot::Ip6::Address::PrefixMatch(v15, v6);
    if (v19 < (int)*((unsigned __int8 *)v20 + 16))
    {
      unsigned __int8 v18 = Scope;
    }
    else
    {
      unsigned __int8 v19 = *((unsigned char *)v20 + 16);
      unsigned __int8 v18 = ot::Ip6::Netif::UnicastAddress::GetScope(v20);
    }
    if (!v24)
    {
      unsigned int v24 = v20;
      unsigned __int8 v23 = v19;
      goto LABEL_28;
    }
    unsigned __int16 v7 = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v20);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v7, v27))
    {
      unsigned int v24 = v20;
      break;
    }
    int v14 = ot::Ip6::Netif::UnicastAddress::GetScope(v20);
    if (v14 < ot::Ip6::Netif::UnicastAddress::GetScope(v24))
    {
      if (v18 > (int)ot::Ip6::Netif::UnicastAddress::GetScope(v20)) {
        goto LABEL_30;
      }
      unsigned int v24 = v20;
      unsigned __int8 v23 = v19;
      goto LABEL_28;
    }
    int v13 = ot::Ip6::Netif::UnicastAddress::GetScope(v20);
    if (v13 > ot::Ip6::Netif::UnicastAddress::GetScope(v24))
    {
      if (v18 <= (int)ot::Ip6::Netif::UnicastAddress::GetScope(v24)) {
        goto LABEL_30;
      }
      unsigned int v24 = v20;
      unsigned __int8 v23 = v19;
      goto LABEL_28;
    }
    if ((*((unsigned char *)v20 + 18) & 1) != 0 && (*((unsigned char *)v24 + 18) & 1) == 0)
    {
      unsigned int v24 = v20;
      unsigned __int8 v23 = v19;
      goto LABEL_28;
    }
    if (v19 > (int)v23)
    {
      unsigned int v24 = v20;
      unsigned __int8 v23 = v19;
      goto LABEL_28;
    }
    if (v19 == v23)
    {
      int v12 = IsRoutingLocator;
      unsigned __int16 v11 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      __int16 v8 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v20);
      if (v12 == ot::Mle::Mle::IsRoutingLocator(v11, v8))
      {
        unsigned int v24 = v20;
        unsigned __int8 v23 = v19;
LABEL_28:
        if (v23 >= (int)*((unsigned __int8 *)v24 + 16)) {
          Scope  = ot::Ip6::Netif::UnicastAddress::GetScope(v24);
        }
      }
    }
LABEL_30:
    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v22);
  }
  if (v24) {
    return ot::Ip6::Netif::UnicastAddress::GetAddress(v24);
  }
  else {
    return 0;
  }
}

__n128 ot::Ip6::Header::SetSource(ot::Ip6::Header *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + ot::MeshCoP::Tlv::SetType(this, 8) = *a2;
  return result;
}

uint64_t ot::Message::Prepend<ot::Ip6::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 0x28u);
}

{
  return ot::Message::Prepend<ot::Ip6::Header>(a1, a2);
}

uint64_t ot::Ip6::Ip6::InsertMplOption(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3)
{
  unsigned __int8 v46 = this;
  uint64_t v45 = a2;
  uint64_t v44 = a3;
  inserted  = 0;
  Destinatiounsigned __int8 n = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
  if (ot::Ip6::Address::IsMulticast(Destination))
  {
    uint64_t v4 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
    if (ot::Ip6::Address::GetScope(v4) >= 3u)
    {
      unsigned int v5 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
      if (ot::Ip6::Address::IsRealmLocalMulticast(v5))
      {
        ot::Message::RemoveHeader(v45, 0x28u);
        if (ot::Ip6::Header::GetNextHeader(v44))
        {
          inserted  = ot::Ip6::Ip6::AddMplOption(this, v45, v44);
          if (inserted) {
            return inserted;
          }
        }
        else
        {
          Size  = 0;
          inserted  = ot::Message::Read<ot::Ip6::HopByHopHeader>(v45, 0, v42);
          if (inserted) {
            return inserted;
          }
          Size  = ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v42);
          if (Size > (int)(unsigned __int16)ot::Ip6::Header::GetPayloadLength(v44)) {
            return 6;
          }
          char Length = ot::Ip6::ExtensionHeader::GetLength((ot::Ip6::ExtensionHeader *)v42);
          ot::Ip6::ExtensionHeader::SetLength((uint64_t)v42, Length + 1);
          ot::Message::Write<ot::Ip6::HopByHopHeader>(v45, 0, v42);
          inserted  = ot::Message::InsertHeader(v45, Size, 8u);
          if (inserted) {
            return inserted;
          }
          Source  = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource(v44);
          ot::Ip6::Mpl::InitOption((ot::Ip6::Ip6 *)((char *)this + 136), (ot::Ip6::MplOption *)v40, Source);
          uint64_t v35 = v45;
          unsigned __int16 v34 = Size;
          unsigned __int16 v8 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v40);
          ot::Message::WriteBytes(v35, v34, v40, v8);
          unsigned __int16 v9 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v40);
          if (!ot::Ip6::PadOption::InitToPadHeaderWithSize((ot::Ip6::PadOption *)v39, v9))
          {
            char v33 = v45;
            unsigned __int16 v31 = Size;
            unsigned __int16 v32 = v31 + ot::Ip6::Option::GetSize((ot::Ip6::Option *)v40);
            unsigned __int16 v10 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v39);
            ot::Message::WriteBytes(v33, v32, v39, v10);
          }
          uint64_t v30 = v44;
          Payloadchar Length = ot::Ip6::Header::GetPayloadLength(v44);
          ot::Ip6::Header::SetPayloadLength(v30, PayloadLength + 8);
        }
        return ot::Message::Prepend<ot::Ip6::Header>(v45, (char *)v44);
      }
      int v12 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
      if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v12))
      {
        if (ot::Ip6::Header::GetHopLimit(v44) <= 1u) {
          return 2;
        }
        int v38 = ot::Ip6::Header::GetHopLimit(v44) - 1;
        ot::Message::Write<int>(v45, 7u, (char *)&v38);
      }
      int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
      if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v13))
      {
        uint64_t v29 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        int v14 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v44);
        if (ot::ChildTable::HasSleepyChildWithAddress(v29, v14))
        {
          unsigned __int16 v37 = ot::Message::Clone(v45);
          if (v37)
          {
            ot::Ip6::Ip6::HandleDatagram(this, v37, 1u, 0, 0);
            IgnoreError();
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Ip6", "Message copy for indirect transmission to sleepy children", v21, v22, v23, v24, v25, v26, v28);
          }
          else
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "No enough buffer for message copy for indirect transmission to sleepy children", v15, v16, v17, v18, v19, v20, v28);
          }
        }
      }
      return ot::Ip6::Ip6::AddTunneledMplOption(this, v45, v44);
    }
  }
  return inserted;
}

uint64_t ot::Message::Read<ot::Ip6::HopByHopHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<ot::Ip6::HopByHopHeader>(a1, a2, a3);
}

uint64_t ot::Ip6::ExtensionHeader::GetSize(ot::Ip6::ExtensionHeader *this)
{
  return (unsigned __int16)(8 * (*((unsigned __int8 *)this + 1) + 1));
}

{
  return ot::Ip6::ExtensionHeader::GetSize(this);
}

uint64_t ot::Ip6::ExtensionHeader::GetLength(ot::Ip6::ExtensionHeader *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Ip6::ExtensionHeader::GetLength(this);
}

uint64_t ot::Message::Write<ot::Ip6::HopByHopHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return ot::Message::Write<ot::Ip6::HopByHopHeader>(a1, a2, a3);
}

uint64_t ot::Ip6::Header::GetHopLimit(ot::Ip6::Header *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return ot::Ip6::Header::GetHopLimit(this);
}

uint64_t ot::Message::Write<int>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 4u);
}

{
  return ot::Message::Write<int>(a1, a2, a3);
}

ot::Message *ot::Message::Clone(ot::Message *this)
{
  unsigned __int16 Length = ot::Message::GetLength(this);
  return ot::Message::Clone(this, Length);
}

{
  return ot::Message::Clone(this);
}

uint64_t ot::Ip6::Ip6::HandleDatagram(ot::InstanceLocator *a1, ot::Message *a2, unsigned __int8 a3, const void *a4, char a5)
{
  v91  = a1;
  v90  = a2;
  v89  = a3;
  v88  = a4;
  v87  = a5 & 1;
  v86  = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v85);
  v83  = 0;
  v82  = 0;
  IsMulticastLargerThanRealmLocal  = 0;
  v80  = 0;
  NextHeader  = 0;
  v78  = 0;
  while (1)
  {
    v83  = 0;
    v82  = 0;
    IsMulticastLargerThanRealmLocal  = 0;
    v80  = 1;
    v86  = ot::Ip6::Header::ParseFrom((ot::Ip6::Header *)v84, v90);
    if (v86) {
      break;
    }
    ot::Clearable<ot::Ip6::MessageInfo>::Clear(v85);
    Source  = (__n128 *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v84);
    ot::Ip6::MessageInfo::SetPeerAddr(v85, Source);
    Destinatiounsigned __int8 n = (__n128 *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
    ot::Ip6::MessageInfo::SetSockAddr(v85, Destination);
    HopLimit  = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v84);
    ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v85, HopLimit);
    Ecunsigned __int8 n = ot::Ip6::Header::GetEcn((ot::Ip6::Header *)v84);
    ot::Ip6::MessageInfo::SetEcn((uint64_t)v85, Ecn);
    ot::Ip6::MessageInfo::SetLinkInfo((uint64_t)v85, v88);
    unsigned __int16 v9 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
    if (ot::Ip6::Address::IsMulticast(v9))
    {
      v82  = v89 != 0;
      if (!v89)
      {
        unsigned __int16 v10 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
        if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v10))
        {
          v70  = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
          unsigned __int16 v11 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
          if (ot::ChildTable::HasSleepyChildWithAddress(v70, v11)) {
            v82  = 1;
          }
        }
      }
      int v12 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
      IsMulticastLargerThanRealmLocal  = ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v12);
      int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
      if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v13))
      {
        int v14 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
        ot::Ip6::Address::ToString(v14, (ot::StringWriter *)v92);
        v69  = ot::String<(unsigned short)40>::AsCString((uint64_t)v92);
        uint64_t v15 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
        ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v15);
        v68  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
        uint64_t v16 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
        ot::Ip6::Netif::IsMulticastSubscribed(v68, v16);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "Ip6::HandleDatagram destn=%s forwardHost=%d forwardThread=%d isLargeScope=%d multicastSubscribed=%d receive=%d", v17, v18, v19, v20, v21, v22, v69);
        if (!*((void *)a1 + 3))
        {
          v86  = 4;
          break;
        }
        v78  = ot::Message::Clone(v90);
        if (!v78)
        {
          char Length = ot::Message::GetLength(v90);
          otLogWarnPlat("No buff to clone msg (len: %d) to pass to host", v24, v25, v26, v27, v28, v29, v30, Length);
          v86  = 3;
          break;
        }
        (*((void (**)(ot::Message *, void))a1 + 3))(v78, *((void *)a1 + 4));
        ot::Message::Free(v78);
      }
      if (!v89 || (ot::Message::GetMulticastLoop(v90))
        && (v67  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1),
            unsigned __int16 v31 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84),
            ot::Ip6::Netif::IsMulticastSubscribed(v67, v31)))
      {
        v83  = 1;
      }
      else
      {
        unsigned __int16 v32 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
        if (ot::Ip6::Netif::IsMulticastPromiscuousEnabled(v32)) {
          IsMulticastLargerThanRealmLocal  = 1;
        }
      }
    }
    else
    {
      v66  = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
      char v33 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
      if (ot::Ip6::Netif::HasUnicastAddress(v66, v33))
      {
        v83  = 1;
      }
      else if (v89 {
             || (unsigned __int16 v34 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84),
      }
                 !ot::Ip6::Address::IsLinkLocal(v34)))
      {
        uint64_t v35 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
        if (ot::Ip6::Address::IsLinkLocal(v35))
        {
          v82  = 1;
        }
        else
        {
          uint64_t v36 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
          if (ot::Ip6::Ip6::IsOnLink(a1, v36))
          {
            LOBYTE(v65)  = 1;
            if (v89 != 1)
            {
              v64  = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(a1);
              unsigned __int16 v37 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
              v65  = !ot::BackboneRouter::Manager::ShouldForwardDuaToBackbone(v64, v37);
            }
            v82  = v65;
          }
          else
          {
            v63  = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v84);
            int v38 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v84);
            if (ot::Ip6::Ip6::RouteLookup(a1, v63, v38))
            {
              uint64_t v39 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
              if (ot::Mle::Mle::IsMinimalEndDevice(v39))
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"Ip6", "%s MTD forwards packet to parent", v40, v41, v42, v43, v44, v45, (char)"HandleDatagram");
                v82  = 1;
              }
            }
            else
            {
              v82  = 1;
            }
          }
        }
        IsMulticastLargerThanRealmLocal  = (v82 ^ 1) & 1;
      }
    }
    ot::Message::SetOffset(v90, 0x28u);
    NextHeader  = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v84);
    v86  = ot::Ip6::Ip6::HandleExtensionHeaders(a1, v90, v89, (ot::Ip6::MessageInfo *)v85, (ot::Ip6::Header *)v84, &NextHeader, (BOOL *)&v83);
    if (v86) {
      break;
    }
    if ((v83 & 1) == 0 || NextHeader != 41)
    {
      if ((IsMulticastLargerThanRealmLocal & 1) != 0 || (v83) && (v87 & 1) == 0)
      {
        v61  = 1;
        if ((v83 & 1) == 0) {
          v61  = v82;
        }
        v86  = ot::Ip6::Ip6::PassToHost(a1, v90, v89, (ot::Ip6::MessageInfo *)v85, NextHeader, (IsMulticastLargerThanRealmLocal ^ 1) & 1, (v61 & 1) != 0);
        v60  = 1;
        if ((v83 & 1) == 0) {
          v60  = v82;
        }
        v80  = v60 & 1;
      }
      if (v83)
      {
        v86  = ot::Ip6::Ip6::HandlePayload((uint64_t)a1, (uint64_t)v84, v90, (ot::Ip6::MessageInfo *)v85, NextHeader, (v82 & 1) != 0);
        v80  = v82 & 1;
      }
      if (v82)
      {
        v77  = 0;
        if (!v89)
        {
          v48  = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
          if (!ot::Mle::Mle::IsRouterOrLeader(v48)) {
            break;
          }
          char v49 = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v84);
          ot::Ip6::Header::SetHopLimit((uint64_t)v84, v49 - 1);
        }
        char v50 = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v84);
        if (v51 | (v50 == 0)) {
          v52  = 0;
        }
        else {
          v52  = 1;
        }
        if ((v52 & 1) == 0)
        {
          v86  = 2;
          break;
        }
        v77  = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v84);
        ot::Message::Write<unsigned char>(v90, 7u, &v77);
        if (NextHeader == 58)
        {
          v76  = 0;
          v75  = 0;
          v59  = v90;
          unsigned __int16 Offset = ot::Message::GetOffset(v90);
          v86  = ot::Message::Read<unsigned char>(v59, Offset, (char *)&v76);
          if (v86) {
            break;
          }
          v74  = &sForwardICMPTypes;
          v73  = &sForwardICMPTypes;
          *(void *)&v72[1]  = &ot::Ip6::Headers::DecompressFrom(ot::Message const&,unsigned short,ot::Mac::Addresses const&)::kReadLength;
          while (v73 != *(unsigned char **)&v72[1])
          {
            HIBYTE(v72[0])  = 0;
            HIBYTE(v72[0])  = *v73;
            if (v76 == HIBYTE(v72[0]))
            {
              v75  = 1;
              break;
            }
            ++v73;
          }
          if ((v75 & 1) == 0)
          {
            v86  = 2;
            break;
          }
        }
        if (v89 != 1 || NextHeader != 17) {
          goto LABEL_74;
        }
        LOWORD(v72[0])  = 0;
        v58  = v90;
        v54  = ot::Message::GetOffset(v90);
        v86  = ot::Message::Read<unsigned short>(v58, v54 + 2, (char *)v72);
        if (v86) {
          break;
        }
        LOWORD(v72[0])  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)LOWORD(v72[0]));
        if (NextHeader == 17
          && (v55  = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1),
              !ot::Ip6::Udp::ShouldUsePlatformUdp(v55, v72[0])))
        {
          v86  = 2;
        }
        else
        {
LABEL_74:
          v56  = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
          v86  = ot::MeshForwarder::SendMessage(v56, v90);
          if (!v86) {
            v80  = 0;
          }
        }
      }
      break;
    }
    v62  = v90;
    unsigned __int16 v46 = ot::Message::GetOffset(v90);
    ot::Message::RemoveHeader(v62, v46);
    signed int v47 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
    ot::MeshForwarder::LogMessage(v47, 0, v90, 0, 0);
  }
  if (v80) {
    ot::Message::Free(v90);
  }
  return v86;
}

uint64_t ot::Ip6::Ip6::RemoveMplOption(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  uint64_t v20 = this;
  uint64_t v19 = a2;
  unsigned int v18 = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v12 = 0;
  unsigned __int8 Length = 0;
  char v10 = 0;
  ot::Message::Read<ot::Ip6::Header>(a2, 0, v17);
  IgnoreError();
  unsigned __int16 v14 = 40;
  if (!ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v17))
  {
    ot::Message::Read<ot::Ip6::HopByHopHeader>(v19, v14, v16);
    IgnoreError();
    unsigned __int16 v13 = v14 + ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v16);
    if (v13 <= (int)(unsigned __int16)ot::Message::GetLength(v19))
    {
      for (v14 += 2; v14 < (int)v13; v14 += ot::Ip6::Option::GetSize((ot::Ip6::Option *)v15))
      {
        ot::Ip6::Option::ParseFrom((ot::Ip6::Option *)v15, v19, v14, v13);
        IgnoreError();
        if (!ot::Ip6::Option::IsPadding((ot::Ip6::Option *)v15))
        {
          if (ot::Ip6::Option::GetType((ot::Ip6::Option *)v15) == 109)
          {
            if (v12) {
              return 6;
            }
            unsigned __int16 v12 = v14;
            unsigned __int8 Length = ot::Ip6::Option::GetLength((ot::Ip6::Option *)v15);
            if (Length > 4uLL) {
              return 6;
            }
            if (v12 != 42 || ot::Ip6::ExtensionHeader::GetLength((ot::Ip6::ExtensionHeader *)v16))
            {
              if (v12 + 8 == v13) {
                char v10 = 1;
              }
            }
            else
            {
              char v10 = 1;
            }
          }
          else
          {
            char v10 = 0;
          }
        }
      }
      if (v14 == v13)
      {
        if (v10)
        {
          ot::Message::RemoveHeader(v19, v13 - 8, 8u);
          if (v12 == 42)
          {
            NextHeader  = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v16);
            ot::Ip6::Header::SetNextHeader((uint64_t)v17, NextHeader);
          }
          else
          {
            char v3 = ot::Ip6::ExtensionHeader::GetLength((ot::Ip6::ExtensionHeader *)v16);
            ot::Ip6::ExtensionHeader::SetLength((uint64_t)v16, v3 - 1);
            ot::Message::Write<ot::Ip6::HopByHopHeader>(v19, 0x28u, v16);
          }
          Payloadunsigned __int8 Length = ot::Ip6::Header::GetPayloadLength((ot::Ip6::Header *)v17);
          ot::Ip6::Header::SetPayloadLength((ot::Ip6::Header *)v17, PayloadLength - 8);
          ot::Message::Write<ot::Ip6::Header>(v19, 0, v17);
        }
        else if (v12)
        {
          ot::Ip6::PadOption::InitForPadSize((ot::Ip6::PadOption *)v9, Length + 2);
          unsigned __int16 v8 = v19;
          unsigned __int16 v7 = v12;
          Size  = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v9);
          ot::Message::WriteBytes(v8, v7, v9, Size);
        }
      }
      else
      {
        return 6;
      }
    }
    else
    {
      return 6;
    }
  }
  return v18;
}