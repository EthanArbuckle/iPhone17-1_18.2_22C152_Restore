uint64_t MathPresentation.SourceAttribution.content.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MathPresentation.SourceAttribution.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MathPresentation.SourceAttribution.content.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.SourceAttribution.range.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t MathPresentation.SourceAttribution.range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MathPresentation.SourceAttribution.range.modify())()
{
  return nullsub_1;
}

void MathPresentation.enumerate<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    v7 = (void *)v6;
    swift_unknownObjectRetain();
    id v8 = [v7 box];
    id v9 = [v7 box];
    sub_255835ED0(v8, (uint64_t)v9, a1, a2, a3);
    swift_unknownObjectRelease();
  }
}

void sub_255835ED0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (objc_msgSend(a1, sel_canContainBoxes))
  {
    id v10 = objc_msgSend(a1, sel_containedBoxes);
    sub_2558365E4();
    unint64_t v11 = sub_2558B9CF0();

    objc_msgSend(a1, sel_boundsWithRoot_, a2);
    (*(void (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  }
  else
  {
    unint64_t v11 = 0;
  }
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    v13 = (void *)v12;
    id v14 = a1;
    id v15 = objc_msgSend(v13, sel_attribution);
    id v16 = objc_msgSend(v15, sel_source);

    if (!v16)
    {

      goto LABEL_16;
    }
    id v35 = v14;
    uint64_t v17 = sub_2558B9CB0();
    uint64_t v19 = v18;

    id v20 = objc_msgSend(v13, sel_attribution);
    objc_msgSend(v20, sel_range);

    uint64_t v21 = sub_2558B9D00();
    if (v23)
    {
      swift_bridgeObjectRelease();

      goto LABEL_16;
    }
    v36[0] = v17;
    v36[1] = v19;
    v36[2] = v21;
    v36[3] = v22;
    id v24 = v35;
    objc_msgSend(v35, sel_boundsWithRoot_, a2);
    (*(void (**)(void *, uint64_t, uint64_t))(a5 + 24))(v36, a4, a5);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  self;
  uint64_t v25 = swift_dynamicCastObjCClass();
  if (v25)
  {
    v26 = (void *)v25;
    id v27 = a1;
    id v28 = objc_msgSend(v26, sel_cgPath);
    objc_msgSend(v27, sel_boundsWithRoot_, a2);
    (*(void (**)(id, uint64_t, uint64_t))(a5 + 32))(v28, a4, a5);
LABEL_10:

    goto LABEL_16;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    id v24 = a1;
    objc_msgSend(v24, sel_boundsWithRoot_, a2);
    (*(void (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5);
LABEL_15:

    goto LABEL_16;
  }
  self;
  uint64_t v33 = swift_dynamicCastObjCClass();
  if (v33)
  {
    v34 = (void *)v33;
    id v27 = a1;
    id v28 = objc_msgSend(v34, sel_attributedString);
    objc_msgSend(v27, sel_boundsWithRoot_, a2);
    (*(void (**)(id, uint64_t, uint64_t))(a5 + 48))(v28, a4, a5);
    goto LABEL_10;
  }
LABEL_16:
  if (!v11) {
    return;
  }
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_2558B9D40();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v29 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29)
    {
LABEL_19:
      if (v29 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v29; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0) {
          id v31 = (id)MEMORY[0x25A28F530](i, v11);
        }
        else {
          id v31 = *(id *)(v11 + 8 * i + 32);
        }
        v32 = v31;
        sub_255835ED0(v31, a2, a3, a4, a5);
      }
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitBeginContainer(bounds:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitEndContainer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitSourceAttribution(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitPath(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitRule(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitString(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t _s17SourceAttributionVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s17SourceAttributionVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s17SourceAttributionVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *_s17SourceAttributionVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _s17SourceAttributionVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t _s17SourceAttributionVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s17SourceAttributionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MathPresentation.SourceAttribution()
{
  return &type metadata for MathPresentation.SourceAttribution;
}

void type metadata accessor for CGContext(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_25583652C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_25583654C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void sub_25583659C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_2558365E4()
{
  unint64_t result = qword_269EFD0D0;
  if (!qword_269EFD0D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269EFD0D0);
  }
  return result;
}

void MathPresentation.layout(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  char v8 = *((unsigned char *)a1 + 40);
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  char v11 = *((unsigned char *)a1 + 64);
  uint64_t v12 = (void *)a1[9];
  type metadata accessor for MathPresentation._LayoutContext();
  v17[0] = v3;
  v17[1] = v5;
  v17[2] = v4;
  v17[3] = v6;
  v17[4] = v7;
  char v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  char v21 = v11;
  uint64_t v22 = v12;
  id v13 = v12;
  swift_bridgeObjectRetain();
  id v16 = sub_255836738((uint64_t)v17);
  id v14 = *(void **)(v2 + 8);
  id v15 = v13;

  *(void *)(v2 + 8) = v12;
  objc_msgSend(*(id *)v2, sel_layoutWithContext_, v16);
}

uint64_t type metadata accessor for MathPresentation._LayoutContext()
{
  return self;
}

id sub_255836738(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  char v4 = *(unsigned char *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = &v3[OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context];
  *(void *)uint64_t v7 = *(void *)a1;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(a1 + 24);
  v7[40] = v4;
  *((_OWORD *)v7 + 3) = *(_OWORD *)(a1 + 48);
  v7[64] = v5;
  *((void *)v7 + 9) = v6;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id MathPresentation.width.getter()
{
  return objc_msgSend(*v0, sel_width);
}

id MathPresentation.height.getter()
{
  return objc_msgSend(*v0, sel_height);
}

id MathPresentation.depth.getter()
{
  return objc_msgSend(*v0, sel_depth);
}

id MathPresentation.vsize.getter()
{
  return objc_msgSend(*v0, sel_vsize);
}

id MathPresentation.drawingBounds.getter()
{
  return objc_msgSend(*v0, sel_erasableBounds);
}

void MathPresentation.draw(in:offset:)(uint64_t a1, double a2, double a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  objc_super v9 = *(void **)v3;
  uint64_t v10 = *(CGColor **)(v3 + 8);
  id v11 = objc_msgSend(objc_allocWithZone((Class)EQKitRenderContext), sel_initWithCGContext_, *(void *)a1);
  objc_msgSend(v11, sel_setRendersDebugRects_, v6 & 1);
  objc_msgSend(v11, sel_setHighlightColor_, v8);
  objc_msgSend(v11, sel_setSelection_, v7);
  if (v10) {
    color = v10;
  }
  else {
    color = CGColorCreateGenericGray(0.0, 1.0);
  }
  uint64_t v12 = v10;
  id v13 = (CGContext *)objc_msgSend(v11, sel_cgContext);
  CGContextSetFillColorWithColor(v13, color);

  objc_msgSend(v9, sel_renderIntoContext_offset_, v11, a2, a3);
}

MathTypesetting::MathPresentation::Selection_optional __swiftcall MathPresentation.selection(at:)(CGPoint at)
{
  uint64_t v3 = v1;
  char v4 = (objc_class *)objc_msgSend(*v2, sel_selectionForPoint_, at.x, at.y);
  *uint64_t v3 = v4;
  result.value.selection._box = v5;
  result.value.selection.super.isa = v4;
  result.is_nil = v6;
  return result;
}

BOOL sub_25583697C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_25583698C()
{
  return sub_2558B9D60();
}

uint64_t sub_2558369B4()
{
  return sub_2558B9D80();
}

BOOL sub_2558369FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_25583697C(*a1, *a2);
}

uint64_t sub_255836A08()
{
  return sub_2558369B4();
}

uint64_t sub_255836A10()
{
  return sub_25583698C();
}

uint64_t sub_255836A18()
{
  return sub_2558B9D80();
}

void static MathPresentation.Format.mathML.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static MathPresentation.Format.laTeX.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static MathPresentation.Format.format(from:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = sub_2558B9CE0();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388]();
  Swift::Bool v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2558B9CD0();
  uint64_t v7 = sub_2558B9CC0();
  unint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  if (v9 >> 60 == 15)
  {
    *a1 = 2;
  }
  else
  {
    static MathPresentation.Format.format(from:)(a1);
    return sub_255837A94(v7, v9);
  }
  return result;
}

void static MathPresentation.Format.format(from:)(unsigned char *a1@<X8>)
{
  uint64_t v2 = self;
  uint64_t v3 = (void *)sub_2558B9C90();
  unint64_t v4 = (unint64_t)objc_msgSend(v2, sel_formatFromData_, v3);

  unsigned int v5 = 0x10002u >> (8 * v4);
  if (v4 >= 3) {
    LOBYTE(v5) = 2;
  }
  *a1 = v5;
}

BOOL static MathPresentation.Format.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __swiftcall MathPresentation.Environment.init()(MathTypesetting::MathPresentation::Environment *__return_ptr retstr)
{
  retstr->env.super.isa = (Class)objc_msgSend(self, sel_createDefaultEnvironment);
}

id sub_255836C5C()
{
  id result = objc_msgSend(self, sel_createDefaultEnvironment);
  qword_269EFD140 = (uint64_t)result;
  return result;
}

id static MathPresentation.Environment.default.getter@<X0>(void *a1@<X8>)
{
  if (qword_269EFD050 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_269EFD140;
  *a1 = qword_269EFD140;

  return v2;
}

id MathPresentation.Environment.sourceAttribution.getter()
{
  return objc_msgSend(*v0, sel_sourceAttribution);
}

id sub_255836D28@<X0>(unsigned char *a1@<X8>)
{
  id result = MathPresentation.Environment.sourceAttribution.getter();
  *a1 = result & 1;
  return result;
}

id MathPresentation.Environment.sourceAttribution.setter(char a1)
{
  return OUTLINED_FUNCTION_2(a1, sel_setSourceAttribution_, *v1);
}

id (*MathPresentation.Environment.sourceAttribution.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*v1, sel_sourceAttribution);
  return sub_255836DCC;
}

id sub_255836DCC(uint64_t a1, uint64_t a2)
{
  return sub_255836EAC(a1, a2, (SEL *)&selRef_setSourceAttribution_);
}

id MathPresentation.Environment.allowSingleLineHeight.getter()
{
  return objc_msgSend(*v0, sel_allowSingleLineHeight);
}

id sub_255836DFC@<X0>(unsigned char *a1@<X8>)
{
  id result = MathPresentation.Environment.allowSingleLineHeight.getter();
  *a1 = result & 1;
  return result;
}

id MathPresentation.Environment.allowSingleLineHeight.setter(char a1)
{
  return OUTLINED_FUNCTION_2(a1, sel_setAllowSingleLineHeight_, *v1);
}

id (*MathPresentation.Environment.allowSingleLineHeight.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*v1, sel_allowSingleLineHeight);
  return sub_255836EA0;
}

id sub_255836EA0(uint64_t a1, uint64_t a2)
{
  return sub_255836EAC(a1, a2, (SEL *)&selRef_setAllowSingleLineHeight_);
}

id sub_255836EAC(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(**(id **)a1, *a3, *(unsigned __int8 *)(a1 + 8));
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MathPresentation.Model.init(_:format:environment:)(MathTypesetting::MathPresentation::Model_optional *__return_ptr retstr, Swift::String _, MathTypesetting::MathPresentation::Format format, MathTypesetting::MathPresentation::Environment *environment)
{
  Swift::Bool v6 = *(unsigned __int8 **)&format;
  uint64_t v20 = retstr;
  uint64_t v7 = sub_2558B9CE0();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388]();
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *v6;
  Class isa = environment->env.super.isa;
  sub_2558B9CD0();
  uint64_t v14 = sub_2558B9CC0();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
  if (v16 >> 60 == 15)
  {

    uint64_t v17 = 0;
LABEL_7:
    v20->value.model.super.Class isa = v17;
    return;
  }
  if (v12) {
    uint64_t v18 = 2;
  }
  else {
    uint64_t v18 = 1;
  }
  sub_255837D10(0, &qword_269EFD148);
  uint64_t v17 = (objc_class *)sub_255837028(v14, v16, v18, isa);
  if (!v4) {
    goto LABEL_7;
  }
}

id sub_255837028(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  v13[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = (void *)sub_2558B9C90();
  v13[0] = 0;
  id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_equationWithData_format_environment_error_, v8, a3, a4, v13);

  if (v9)
  {
    id v10 = v13[0];
  }
  else
  {
    id v11 = v13[0];
    sub_2558B9C80();

    swift_willThrow();
  }

  sub_255837AA8(a1, a2);
  return v9;
}

id MathPresentation.Model.layout(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v9 = a1[7];
  id v11 = (void *)a1[9];
  uint64_t v20 = a1[8];
  id result = objc_msgSend(*v2, sel_newLayout);
  if (v5 == 1)
  {
    id v11 = 0;
  }
  else
  {
    id v21 = result;
    type metadata accessor for MathPresentation._LayoutContext();
    uint64_t v19 = v9;
    v23[0] = v4;
    v23[1] = v3;
    v23[2] = v5;
    v23[3] = v6;
    v23[4] = v7;
    char v24 = v8 & 1;
    uint64_t v25 = v10;
    uint64_t v26 = v9;
    char v27 = v20 & 1;
    id v28 = v11;
    id v13 = v11;
    swift_bridgeObjectRetain_n();
    uint64_t v14 = v4;
    uint64_t v15 = v7;
    id v16 = v13;
    id v17 = sub_255836738((uint64_t)v23);
    id v18 = v16;
    objc_msgSend(v21, sel_layoutWithContext_, v17);

    sub_255837B00(v14, v3, v5, v6, v15, v8, v10, v19, v20, v11);
    id result = v21;
  }
  *a2 = result;
  a2[1] = v11;
  return result;
}

double MathPresentation.LayoutContext.baseFontSize.getter()
{
  return *(double *)v0;
}

void MathPresentation.LayoutContext.baseFontSize.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*MathPresentation.LayoutContext.baseFontSize.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.baseFontName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MathPresentation.LayoutContext.baseFontName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MathPresentation.LayoutContext.baseFontName.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.targetSize.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t MathPresentation.LayoutContext.targetSize.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 24) = result;
  *(void *)(v3 + 32) = a2;
  *(unsigned char *)(v3 + 40) = a3 & 1;
  return result;
}

uint64_t (*MathPresentation.LayoutContext.targetSize.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.containerSize.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t MathPresentation.LayoutContext.containerSize.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 48) = result;
  *(void *)(v3 + 56) = a2;
  *(unsigned char *)(v3 + 64) = a3 & 1;
  return result;
}

uint64_t (*MathPresentation.LayoutContext.containerSize.modify())()
{
  return nullsub_1;
}

void *MathPresentation.LayoutContext.baseColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

void MathPresentation.LayoutContext.baseColor.setter(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
}

uint64_t (*MathPresentation.LayoutContext.baseColor.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.init(baseFontSize:baseFontName:targetSize:containerSize:baseColor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11)
{
  *(double *)a9 = a10;
  *(void *)(a9 + 8) = result;
  *(void *)(a9 + 16) = a2;
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(unsigned char *)(a9 + 40) = a5 & 1;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 56) = a7;
  *(unsigned char *)(a9 + 64) = a8 & 1;
  *(void *)(a9 + 72) = a11;
  return result;
}

void MathPresentation.LayoutContext.init(font:)(const __CTFont *a1@<X0>, uint64_t a2@<X8>)
{
  CGFloat Size = CTFontGetSize(a1);
  uint64_t v5 = (__CFString *)CTFontCopyPostScriptName(a1);
  uint64_t v6 = sub_2558B9CB0();
  uint64_t v8 = v7;

  *(CGFloat *)a2 = Size;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 1;
  *(void *)(a2 + 72) = 0;
}

double sub_2558374E4()
{
  return *(double *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context);
}

uint64_t sub_25583754C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 8);
  swift_bridgeObjectRetain();
  return v1;
}

double sub_2558375AC()
{
  double result = 0.0;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 40) & 1) == 0) {
    return *(double *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 24);
  }
  return result;
}

double sub_2558375F4()
{
  double result = 0.0;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 64) & 1) == 0) {
    return *(double *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 48);
  }
  return result;
}

void *sub_25583764C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 72);
  id v2 = v1;
  return v1;
}

void sub_255837680()
{
}

id sub_2558376C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MathPresentation.DrawingContext.Options.rawValue.getter()
{
  return *v0;
}

uint64_t MathPresentation.DrawingContext.Options.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MathPresentation.DrawingContext.Options.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.DrawingContext.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static MathPresentation.DrawingContext.Options.debugRects.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_255837788@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return MathPresentation.DrawingContext.Options.init(rawValue:)(*a1, a2);
}

uint64_t sub_255837790()
{
  return sub_255837798();
}

uint64_t sub_255837798()
{
  return sub_2558B9D80();
}

uint64_t sub_2558377E0()
{
  return sub_2558377E8();
}

uint64_t sub_2558377E8()
{
  return sub_2558B9D70();
}

uint64_t sub_255837810()
{
  return sub_255837818();
}

uint64_t sub_255837818()
{
  return sub_2558B9D80();
}

void sub_255837860(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_255837868@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_255837874(*a1, *v2, a2);
}

uint64_t sub_255837874@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 | result;
  return result;
}

uint64_t sub_255837880@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_25583788C(*a1, *v2, a2);
}

uint64_t sub_25583788C@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 & result;
  return result;
}

uint64_t sub_255837898@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_2558378A4(*a1, *v2, a2);
}

uint64_t sub_2558378A4@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 ^ result;
  return result;
}

BOOL sub_2558378B0(_DWORD *a1, int *a2)
{
  return sub_2558378B8(a1, *a2);
}

BOOL sub_2558378B8(_DWORD *a1, int a2)
{
  int v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_2558378E4@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2558378EC(*a1, a2);
}

uint64_t sub_2558378EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & result;
  if (v3) {
    *v2 &= ~result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

uint64_t sub_255837914@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25583791C(*a1, a2);
}

uint64_t sub_25583791C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2;
  *v2 |= result;
  int v4 = v3 & result;
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v4 == 0;
  return result;
}

uint64_t sub_25583793C(unsigned int *a1)
{
  return sub_255837944(*a1);
}

uint64_t sub_255837944(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_255837954(unsigned int *a1)
{
  return sub_25583795C(*a1);
}

uint64_t sub_25583795C(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_25583796C(unsigned int *a1)
{
  return sub_255837974(*a1);
}

uint64_t sub_255837974(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_255837984@<X0>(unsigned int *a1@<X0>, int *a2@<X8>)
{
  return sub_255837990(*a1, *v2, a2);
}

uint64_t sub_255837990@<X0>(uint64_t result@<X0>, int a2@<W1>, int *a3@<X8>)
{
  *a3 = a2 & ~result;
  return result;
}

BOOL sub_25583799C(int *a1)
{
  return sub_2558379A8(*a1, *v1);
}

BOOL sub_2558379A8(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_2558379B4(int *a1)
{
  return sub_2558379C0(*a1, *v1);
}

BOOL sub_2558379C0(int a1, int a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_2558379CC(int *a1)
{
  return sub_2558379D8(*a1, *v1);
}

BOOL sub_2558379D8(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_2558379E4()
{
  return sub_2558379EC(*v0);
}

BOOL sub_2558379EC(int a1)
{
  return a1 == 0;
}

uint64_t sub_2558379F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

uint64_t sub_255837A10(unsigned int *a1)
{
  return sub_255837A18(*a1);
}

uint64_t sub_255837A18(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

uint64_t sub_255837A28@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MathPresentation.DrawingContext.Options.init(rawValue:)(*a1, (_DWORD *)a2);
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_255837A54@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = MathPresentation.DrawingContext.Options.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL sub_255837A7C(int *a1, int *a2)
{
  return sub_255837A88(*a1, *a2);
}

BOOL sub_255837A88(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_255837A94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_255837AA8(a1, a2);
  }
  return a1;
}

uint64_t sub_255837AA8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void sub_255837B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_255837B50@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void MathPresentation.DrawingContext.options.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *MathPresentation.DrawingContext.options.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*MathPresentation.DrawingContext.options.modify())()
{
  return nullsub_1;
}

id MathPresentation.DrawingContext.selection.getter@<X0>(void *a1@<X8>)
{
  objc_super v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

void MathPresentation.DrawingContext.selection.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;

  *(void *)(v1 + 16) = v2;
}

uint64_t (*MathPresentation.DrawingContext.selection.modify())()
{
  return nullsub_1;
}

void *MathPresentation.DrawingContext.highlightColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void MathPresentation.DrawingContext.highlightColor.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*MathPresentation.DrawingContext.highlightColor.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.DrawingContext.init(context:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = result;
  return result;
}

uint64_t static MathPresentation.Selection.== infix(_:_:)()
{
  return sub_2558B9D10() & 1;
}

uint64_t sub_255837D10(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_255837D50()
{
  unint64_t result = qword_269EFD158;
  if (!qword_269EFD158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269EFD158);
  }
  return result;
}

unint64_t sub_255837DA0()
{
  unint64_t result = qword_269EFD160;
  if (!qword_269EFD160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269EFD160);
  }
  return result;
}

unint64_t sub_255837DF0()
{
  unint64_t result = qword_269EFD168;
  if (!qword_269EFD168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269EFD168);
  }
  return result;
}

unint64_t sub_255837E40()
{
  unint64_t result = qword_269EFD170;
  if (!qword_269EFD170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269EFD170);
  }
  return result;
}

id sub_255837E94(char *a1)
{
  return MathPresentation.Environment.sourceAttribution.setter(*a1);
}

id sub_255837EC0(char *a1)
{
  return MathPresentation.Environment.allowSingleLineHeight.setter(*a1);
}

void *initializeBufferWithCopyOfBuffer for MathPresentation(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  id v4 = v3;
  return a1;
}

void destroy for MathPresentation(uint64_t a1)
{
  swift_unknownObjectRelease();
  id v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for MathPresentation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  id v4 = (void *)a1[1];
  uint64_t v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for MathPresentation(uint64_t a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MathPresentation(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for MathPresentation()
{
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

void type metadata accessor for MathPresentation.Format()
{
}

void type metadata accessor for MathPresentation.Environment()
{
}

void type metadata accessor for MathPresentation.Model()
{
}

void destroy for MathPresentation.LayoutContext(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 72);
}

uint64_t initializeWithCopy for MathPresentation.LayoutContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v3 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for MathPresentation.LayoutContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  char v5 = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v5;
  id v6 = *(void **)(a1 + 72);
  int v7 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v7;
  id v8 = v7;

  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for MathPresentation.LayoutContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  char v5 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for MathPresentation.LayoutContext(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPresentation.LayoutContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

void type metadata accessor for MathPresentation.LayoutContext()
{
}

void destroy for MathPresentation.DrawingContext(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for MathPresentation.DrawingContext(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  char v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

uint64_t assignWithCopy for MathPresentation.DrawingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  id v7 = *(void **)(a1 + 16);
  id v8 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v8;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 24);
  id v11 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v11;
  id v12 = v11;

  return a1;
}

uint64_t assignWithTake for MathPresentation.DrawingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  char v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for MathPresentation.DrawingContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPresentation.DrawingContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for MathPresentation.DrawingContext()
{
}

void type metadata accessor for MathPresentation.DrawingContext.Options()
{
}

void type metadata accessor for MathPresentation.Selection()
{
}

uint64_t _s15MathTypesetting16MathPresentationV6FormatVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s15MathTypesetting16MathPresentationV6FormatVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255838678);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_2558386A0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2558386A8(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for MathPresentation.Format.Storage()
{
}

unint64_t sub_2558386C4()
{
  unint64_t result = qword_269EFD1E8;
  if (!qword_269EFD1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269EFD1E8);
  }
  return result;
}

id OUTLINED_FUNCTION_2@<X0>(char a1@<W0>, const char *a2@<X1>, void *a3@<X8>)
{
  return objc_msgSend(a3, a2, a1 & 1);
}

uint64_t EQKitXMLIsTextContentOnly(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1)
    {
      int v2 = 0;
      while (xmlNodeIsText((const xmlNode *)v1) || *(_DWORD *)(v1 + 8) == 8)
      {
        uint64_t v1 = *(void *)(v1 + 48);
        int v2 = 1;
        int v3 = 1;
        if (!v1) {
          return v3 & v2;
        }
      }
      int v3 = 0;
      return v3 & v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *EQKitXMLIsNamedElement(_xmlNode *a1, _xmlNs *a2, const char *__s2)
{
  unint64_t result = 0;
  if (a1 && __s2)
  {
    if (a1->type == XML_ELEMENT_NODE && a1->ns == a2)
    {
      unint64_t result = (const char *)a1->name;
      if (result) {
        return (const char *)(strcmp(result, __s2) == 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL EQKitXMLIsNsElement(BOOL result, _xmlNs *a2)
{
  if (result) {
    return *(_DWORD *)(result + 8) == 1 && *(void *)(result + 72) == (void)a2;
  }
  return result;
}

BOOL EQKitXMLIsElement(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 8) == 1;
  }
  return result;
}

void EQKitXMLTextContentAsString(_xmlNode *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  xmlBufferPtr v6 = xmlBufferCreate();
  xmlNodeBufGetContent(v6, a1);
  if (a2)
  {
    BOOL v7 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:ne180100]<0>(&__str, v7);
    id v8 = __p;
    std::string::basic_string[abi:ne180100]<0>(__p, " \t\n");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if ((v20 & 0x80u) == 0)
    {
      size_t v11 = v20;
    }
    else
    {
      id v8 = (void **)__p[0];
      size_t v11 = (size_t)__p[1];
    }
    if (!size) {
      goto LABEL_24;
    }
    id v12 = p_str;
    if (v11)
    {
      std::string::size_type v13 = size;
      id v12 = p_str;
      while (memchr(v8, v12->__r_.__value_.__s.__data_[0], v11))
      {
        id v12 = (std::string *)((char *)v12 + 1);
        if (!--v13) {
          goto LABEL_24;
        }
      }
    }
    std::string::size_type v15 = (char *)v12 - (char *)p_str;
    if (v15 == -1)
    {
LABEL_24:
      std::string::basic_string[abi:ne180100]<0>(a3, "");
    }
    else
    {
      std::string::size_type v16 = size - 1;
      do
      {
        std::string::size_type v17 = v16;
        if (v16 == -1) {
          break;
        }
        if (!v11) {
          break;
        }
        id v18 = memchr(v8, p_str->__r_.__value_.__s.__data_[v16], v11);
        std::string::size_type v16 = v17 - 1;
      }
      while (v18);
      std::string::basic_string(a3, &__str, v15, v17 - v15 + 1, (std::allocator<char> *)&v22);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v14 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:ne180100]<0>(a3, v14);
  }
  xmlBufferFree(v6);
}

void sub_255838B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitXMLAttributeValueAsString(_xmlNode *a1@<X0>, _xmlAttr *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1)
  {
    if (a2)
    {
      String = xmlNodeListGetString(a1->doc, a2->children, 1);
      if (String)
      {
        std::string::__assign_external(a3, (const std::string::value_type *)String);
        free(String);
      }
    }
  }
}

void sub_255838BEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_255838D64(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x25A28FFF0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A28FFF0](a1 + 120);
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2653C4BA8, MEMORY[0x263F8C060]);
}

void sub_255838EF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_255839170(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    std::string::size_type v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    std::string::size_type v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        std::string::size_type v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t CoverageTableGetIndexOfGlyphID(unsigned __int16 *a1, unsigned int a2)
{
  if (a2 == 0xFFFF) {
    return -1;
  }
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  __int16 v5 = __rev16(a2);
  __int16 v19 = v5;
  unsigned int v6 = *a1;
  unsigned int v7 = __rev16(v6);
  if (v7 == 2)
  {
    __key[0] = v5;
    __key[1] = v5;
    __key[2] = 0;
    if (v6 == 512) {
      size_t v11 = bswap32(a1[1]) >> 16;
    }
    else {
      size_t v11 = 0;
    }
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 0x40000000;
    v14[2] = __CoverageTableGetIndexOfGlyphID_block_invoke_2;
    v14[3] = &__block_descriptor_tmp_1;
    __int16 v15 = a2;
    std::string::size_type v13 = (unsigned __int16 *)bsearch_b(__key, a1 + 2, v11, 6uLL, v14);
    if (v13) {
      return (bswap32(v13[2]) >> 16) + (unint64_t)a2 - (bswap32(*v13) >> 16);
    }
  }
  else if (v7 == 1)
  {
    uint64_t v8 = a1 + 2;
    size_t v9 = v6 == 256 ? bswap32(a1[1]) >> 16 : 0;
    __compar[0] = MEMORY[0x263EF8330];
    __compar[1] = 0x40000000;
    __compar[2] = __CoverageTableGetIndexOfGlyphID_block_invoke;
    __compar[3] = &__block_descriptor_tmp;
    __int16 v18 = a2;
    id v12 = bsearch_b(&v19, v8, v9, 2uLL, __compar);
    if (v12) {
      return (v12 - (unsigned char *)v8) >> 1;
    }
  }
  return -1;
}

uint64_t __CoverageTableGetIndexOfGlyphID_block_invoke(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  return *(unsigned __int16 *)(a1 + 32) - (bswap32(*a3) >> 16);
}

uint64_t __CoverageTableGetIndexOfGlyphID_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 >= bswap32(*a3) >> 16) {
    return v3 > bswap32(a3[1]) >> 16;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t MathValueRecordGetValue(unsigned __int16 *a1)
{
  return ((int)bswap32(*a1) >> 16);
}

char *MathGlyphInfoGetItalicsCorrectionInfo(unsigned __int16 *a1)
{
  return (char *)a1 + (bswap32(*a1) >> 16);
}

uint64_t MathGlyphInfoGetTopAttachment(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
}

uint64_t MathGlyphInfoGetExtendedShapesCoverageTable(uint64_t a1)
{
  uint64_t v1 = a1 + __rev16(*(unsigned __int16 *)(a1 + 4));
  if (*(_WORD *)(a1 + 4)) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t GlyphPartRecordGetGlyphID(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t GlyphPartRecordGetStartConnectorLength(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
}

uint64_t GlyphPartRecordGetEndConnectorLength(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16;
}

uint64_t GlyphPartRecordGetFullAdvance(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16;
}

uint64_t GlyphPartRecordGetPartFlags(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
}

uint64_t GlyphAssemblyGetPartAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16) {
    return 0;
  }
  else {
    return a1 + 10 * a2 + 6;
  }
}

char *MathGlyphConstructionGetGlyphAssembly(_WORD *a1)
{
  uint64_t v1 = (char *)a1 + __rev16((unsigned __int16)*a1);
  if (*a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t MathGlyphConstructionGetGlyphVariantAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16) {
    return 0;
  }
  else {
    return a1 + 4 * a2 + 4;
  }
}

uint64_t MathVariantsGetVertGlyphConstructionAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16) {
    return 0;
  }
  else {
    return a1 + (bswap32(*(unsigned __int16 *)(a1 + 2 * a2 + 10)) >> 16);
  }
}

uint64_t MathVariantsGetHorizGlyphCoverageTable(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16);
}

uint64_t MathVariantsGetHorizGlyphConstructionAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16) {
    return 0;
  }
  else {
    return a1
  }
         + (bswap32(*(unsigned __int16 *)(a1
                                        + 2 * ((bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16) + (unint64_t)a2)
                                        + 10)) >> 16);
}

uint64_t MathHeaderGetMathGlyphInfo(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16);
}

uint64_t MathHeaderGetMathVariants(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16);
}

uint64_t MathConstantsScriptScriptPercentScaleDown(uint64_t a1)
{
  return ((int)bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
}

uint64_t MathConstantsMathLeading(uint64_t a1)
{
  return a1 + 8;
}

uint64_t MathConstantsAxisHeight(uint64_t a1)
{
  return a1 + 12;
}

uint64_t MathConstantsAccentBaseHeight(uint64_t a1)
{
  return a1 + 16;
}

uint64_t MathConstantsSubscriptShiftDown(uint64_t a1)
{
  return a1 + 24;
}

uint64_t MathConstantsSubscriptTopMax(uint64_t a1)
{
  return a1 + 28;
}

uint64_t MathConstantsSubscriptBaselineDropMin(uint64_t a1)
{
  return a1 + 32;
}

uint64_t MathConstantsSuperscriptShiftUp(uint64_t a1)
{
  return a1 + 36;
}

uint64_t MathConstantsSuperscriptShiftUpCramped(uint64_t a1)
{
  return a1 + 40;
}

uint64_t MathConstantsSuperscriptBottomMin(uint64_t a1)
{
  return a1 + 44;
}

uint64_t MathConstantsSuperscriptBaselineDropMax(uint64_t a1)
{
  return a1 + 48;
}

uint64_t MathConstantsSubSuperscriptGapMin(uint64_t a1)
{
  return a1 + 52;
}

uint64_t MathConstantsSuperscriptBottomMaxWithSubscript(uint64_t a1)
{
  return a1 + 56;
}

uint64_t MathConstantsSpaceAfterScript(uint64_t a1)
{
  return a1 + 60;
}

uint64_t MathConstantsUpperLimitGapMin(uint64_t a1)
{
  return a1 + 64;
}

uint64_t MathConstantsUpperLimitBaselineRiseMin(uint64_t a1)
{
  return a1 + 68;
}

uint64_t MathConstantsLowerLimitGapMin(uint64_t a1)
{
  return a1 + 72;
}

uint64_t MathConstantsLowerLimitBaselineDropMin(uint64_t a1)
{
  return a1 + 76;
}

uint64_t MathConstantsStackTopShiftUp(uint64_t a1)
{
  return a1 + 80;
}

uint64_t MathConstantsStackTopDisplayStyleShiftUp(uint64_t a1)
{
  return a1 + 84;
}

uint64_t MathConstantsStackBottomShiftDown(uint64_t a1)
{
  return a1 + 88;
}

uint64_t MathConstantsStackBottomDisplayStyleShiftDown(uint64_t a1)
{
  return a1 + 92;
}

uint64_t MathConstantsStackGapMin(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MathConstantsStackDisplayStyleGapMin(uint64_t a1)
{
  return a1 + 100;
}

uint64_t MathConstantsStretchStackTopShiftUp(uint64_t a1)
{
  return a1 + 104;
}

uint64_t MathConstantsStretchStackBottomShiftDown(uint64_t a1)
{
  return a1 + 108;
}

uint64_t MathConstantsStretchStackGapAboveMin(uint64_t a1)
{
  return a1 + 112;
}

uint64_t MathConstantsStretchStackGapBelowMin(uint64_t a1)
{
  return a1 + 116;
}

uint64_t MathConstantsFractionNumeratorShiftUp(uint64_t a1)
{
  return a1 + 120;
}

uint64_t MathConstantsFractionNumeratorDisplayStyleShiftUp(uint64_t a1)
{
  return a1 + 124;
}

uint64_t MathConstantsFractionDenominatorShiftDown(uint64_t a1)
{
  return a1 + 128;
}

uint64_t MathConstantsFractionDenominatorDisplayStyleShiftDown(uint64_t a1)
{
  return a1 + 132;
}

uint64_t MathConstantsFractionNumeratorGapMin(uint64_t a1)
{
  return a1 + 136;
}

uint64_t MathConstantsFractionNumDisplayStyleGapMin(uint64_t a1)
{
  return a1 + 140;
}

uint64_t MathConstantsFractionRuleThickness(uint64_t a1)
{
  return a1 + 144;
}

uint64_t MathConstantsFractionDenominatorGapMin(uint64_t a1)
{
  return a1 + 148;
}

uint64_t MathConstantsFractionDenomDisplayStyleGapMin(uint64_t a1)
{
  return a1 + 152;
}

uint64_t MathConstantsOverbarVerticalGap(uint64_t a1)
{
  return a1 + 164;
}

uint64_t MathConstantsOverbarExtraAscender(uint64_t a1)
{
  return a1 + 172;
}

uint64_t MathConstantsUnderbarVerticalGap(uint64_t a1)
{
  return a1 + 176;
}

uint64_t MathConstantsUnderbarExtraDescender(uint64_t a1)
{
  return a1 + 184;
}

uint64_t MathConstantsRadicalVerticalGap(uint64_t a1)
{
  return a1 + 188;
}

uint64_t MathConstantsRadicalDisplayStyleVerticalGap(uint64_t a1)
{
  return a1 + 192;
}

uint64_t MathConstantsRadicalRuleThickness(uint64_t a1)
{
  return a1 + 196;
}

uint64_t MathConstantsRadicalExtraAscender(uint64_t a1)
{
  return a1 + 200;
}

uint64_t MathConstantsRadicalKernBeforeDegree(uint64_t a1)
{
  return a1 + 204;
}

uint64_t MathConstantsRadicalKernAfterDegree(uint64_t a1)
{
  return a1 + 208;
}

uint64_t MathConstantsRadicalDegreeBottomRaisePercent(uint64_t a1)
{
  return ((int)bswap32(*(unsigned __int16 *)(a1 + 212)) >> 16);
}

BOOL EQKit::ScriptLevel::fromString(const std::string *a1, uint64_t a2)
{
  std::istringstream::basic_istringstream[abi:ne180100](v9, a1, 8);
  unsigned int v3 = std::istream::peek() << 24;
  BOOL v5 = v3 == 721420288 || v3 == 754974720;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  MEMORY[0x25A28FE90](v9, &v8);
  int v6 = *(_DWORD *)((unsigned char *)&v9[4] + *(void *)(v9[0] - 24)) & 7;
  if (v6 == 2)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = v5;
  }
  v9[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v9[2] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A28FFF0](&v11);
  return v6 == 2;
}

void sub_25583995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::ScriptLevel::resolveWithBase(EQKit::ScriptLevel *this, uint64_t a2)
{
  if (*((unsigned char *)this + 8)) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 + *(void *)this;
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::add(unsigned __int16 *a1, uint64_t a2)
{
  std::string::size_type v4 = (uint64_t **)(a1 + 4);
  BOOL v5 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>((uint64_t)(a1 + 4), (void **)a2);
  if (a1 + 8 != (unsigned __int16 *)v5) {
    return *((unsigned __int16 *)v5 + 28);
  }
  uint64_t v6 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  __int16 v12 = v6;
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(v4, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v7 = (uint64_t *)(a1 + 16);
  unint64_t v8 = *((void *)a1 + 5);
  if (v8 >= *((void *)a1 + 6))
  {
    uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, (long long *)a2);
    uint64_t v9 = v8 + 24;
  }
  *((void *)a1 + 5) = v9;
  ++*a1;
  return v6;
}

void sub_255839A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Config::Operator::Dictionary::~Dictionary(EQKit::Config::Operator::Dictionary *this)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

unsigned __int16 *EQKit::Config::Operator::Dictionary::dictionaryFromURL(EQKit::Config::Operator::Dictionary *this, NSURL *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  unsigned int v3 = (void *)[objc_alloc(MEMORY[0x263EFF8C0]) initWithContentsOfURL:this error:&v64];
  id obj = v3;
  if (!v3)
  {
    __p[0] = 0;
    [(EQKit::Config::Operator::Dictionary *)this getResourceValue:__p forKey:*MEMORY[0x263EFF750] error:0];
    NSLog(&cfstr_FailedToReadWi.isa, __p[0], v64);
    unsigned int v3 = 0;
  }
  if (![v3 count] || (std::string::size_type v4 = (char *)operator new(0x80uLL, MEMORY[0x263F8C180])) == 0)
  {
LABEL_85:
    v49 = 0;
    goto LABEL_86;
  }
  *(_WORD *)std::string::size_type v4 = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 1) = v4 + 16;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = v4 + 64;
  v38 = (uint64_t **)(v4 + 56);
  *((void *)v4 + 9) = 0;
  *((void *)v4 + 11) = 0;
  *((void *)v4 + 10) = v4 + 88;
  v43 = (uint64_t **)(v4 + 80);
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 14) = 0;
  v48 = (uint64_t *)(v4 + 112);
  v49 = (unsigned __int16 *)v4;
  *((void *)v4 + 13) = v4 + 112;
  v40 = (uint64_t **)(v4 + 104);
  *((void *)v4 + 15) = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v41 = [obj countByEnumeratingWithState:&v60 objects:v66 count:16];
  if (!v41)
  {
    char v28 = 0;
    goto LABEL_71;
  }
  uint64_t v39 = *(void *)v61;
  while (2)
  {
    uint64_t v5 = 0;
    do
    {
      if (*(void *)v61 != v39)
      {
        uint64_t v6 = v5;
        objc_enumerationMutation(obj);
        uint64_t v5 = v6;
      }
      uint64_t v47 = v5;
      unsigned int v7 = *(void **)(*((void *)&v60 + 1) + 8 * v5);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(&cfstr_InvalidItemCla.isa, v7);
LABEL_70:
        char v28 = 1;
        goto LABEL_71;
      }
      unint64_t v8 = (void *)[v7 objectForKey:@"char"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(&cfstr_MissingInvalid.isa, @"char", v7);
        goto LABEL_70;
      }
      unsigned __int16 v59 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v8 UTF8String]);
      unsigned __int16 v9 = EQKit::Config::Operator::Dictionary::IdentifierMap::add(v49, (uint64_t)__p);
      if (v58 < 0) {
        operator delete(__p[0]);
      }
      unsigned __int16 v59 = v9;
      char v10 = (void *)[v7 objectForKey:@"form"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v10 UTF8String]);
        int v50 = EQKit::Config::Operator::formFromMathMLString((uint64_t *)__p, 0);
        if (v58 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v50 = 0;
      }
      uint64_t v11 = (void *)[v7 objectForKey:@"lspace"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v46 = [v11 integerValue];
      }
      else {
        uint64_t v46 = 0;
      }
      __int16 v12 = (void *)[v7 objectForKey:@"rspace"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v45 = [v12 integerValue];
      }
      else {
        uint64_t v45 = 0;
      }
      std::string::size_type v13 = (void *)[v7 objectForKey:@"prio"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v44 = [v13 unsignedIntegerValue];
      }
      else {
        __int16 v44 = 0;
      }
      uint64_t v14 = (void *)[v7 objectForKey:@"flags"];
      objc_opt_class();
      double v15 = 0.0;
      if ((objc_opt_isKindOfClass() & 1) != 0
        && [v14 length]
        && (std::string::size_type v16 = objc_msgSend(v14, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "characterSetWithCharactersInString:", @",")), v55 = 0u, v56 = 0u, v53 = 0u, v54 = 0u, (v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v53, v65, 16)) != 0))
      {
        int v18 = 0;
        uint64_t v19 = *(void *)v54;
        do
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v54 != v19) {
              objc_enumerationMutation(v16);
            }
            uint64_t v21 = *(void **)(*((void *)&v53 + 1) + 8 * i);
            if ([v21 isEqualToString:@"stretchy"])
            {
              v18 |= 1u;
            }
            else if ([v21 isEqualToString:@"symmetric"])
            {
              v18 |= 2u;
            }
            else if ([v21 isEqualToString:@"largeop"])
            {
              if ((v18 & 0x80u) != 0)
              {
                int v22 = 4;
              }
              else
              {
                double v15 = 1.0;
                int v22 = -124;
              }
              v18 |= v22;
            }
            else if ([v21 isEqualToString:@"fence"])
            {
              v18 |= 0x10u;
            }
            else if ([v21 isEqualToString:@"accent"])
            {
              v18 |= 8u;
            }
            else if ([v21 isEqualToString:@"movablelimits"])
            {
              v18 |= 0x20u;
            }
            else if ([v21 isEqualToString:@"relational"])
            {
              v18 |= 0x40u;
            }
            else if ([v21 hasPrefix:@"cramped="])
            {
              char v23 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v21];
              LODWORD(__p[0]) = 0;
              if ([v23 scanString:@"cramped=" intoString:0]
                && [v23 scanFloat:__p])
              {
                int v24 = [v23 isAtEnd];
                int v25 = *(float *)__p == 0.0 ? 0 : v24;
                if (v25 == 1)
                {
                  v18 |= 0xFFFFFF80;
                  double v15 = *(float *)__p;
                }
              }
            }
          }
          uint64_t v17 = [v16 countByEnumeratingWithState:&v53 objects:v65 count:16];
        }
        while (v17);
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      v51[0] = v59;
      int v52 = v50;
      __p[0] = v51;
      uint64_t v26 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(v38, v51, (uint64_t)&std::piecewise_construct, (void **)__p);
      *((_DWORD *)v26 + 10) = 3;
      *((double *)v26 + 6) = (double)v46 / 18.0;
      *((_DWORD *)v26 + 14) = 3;
      *((double *)v26 + 8) = (double)v45 / 18.0;
      *((_WORD *)v26 + 36) = v44;
      *((double *)v26 + 10) = v15;
      *((unsigned char *)v26 + 88) = v18;
      __p[0] = &v59;
      *((_DWORD *)std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v43, &v59, (uint64_t)&std::piecewise_construct, (_WORD **)__p)+ 8) = v50;
      __p[0] = &v59;
      char v27 = std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v40, &v59, (uint64_t)&std::piecewise_construct, (_WORD **)__p);
      v27[5] = (uint64_t *)((unint64_t)v27[5] | (1 << v50));
      uint64_t v5 = v47 + 1;
    }
    while (v47 + 1 != v41);
    uint64_t v41 = [obj countByEnumeratingWithState:&v60 objects:v66 count:16];
    char v28 = 0;
    if (v41) {
      continue;
    }
    break;
  }
LABEL_71:
  uint64_t v29 = *v40;
  v30 = (EQKit::Config::Operator::Dictionary *)v49;
  if (*v40 != v48)
  {
    do
    {
      unint64_t v31 = v29[5];
      if (v31)
      {
        unint64_t v32 = 0;
        do
        {
          v32 += v31 & 1;
          BOOL v33 = v31 > 1;
          v31 >>= 1;
        }
        while (v33);
        if (v32 >= 2)
        {
          std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>((uint64_t)v43, (unsigned __int16 *)v29 + 16);
          v30 = (EQKit::Config::Operator::Dictionary *)v49;
        }
      }
      v34 = (uint64_t *)v29[1];
      if (v34)
      {
        do
        {
          id v35 = v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          id v35 = (uint64_t *)v29[2];
          BOOL v36 = *v35 == (void)v29;
          uint64_t v29 = v35;
        }
        while (!v36);
      }
      uint64_t v29 = v35;
    }
    while (v35 != v48);
  }
  if (v28)
  {
    EQKit::Config::Operator::Dictionary::~Dictionary(v30);
    MEMORY[0x25A290040]();
    goto LABEL_85;
  }
LABEL_86:

  return v49;
}

void sub_25583A2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Config::Operator::Dictionary::lookup(uint64_t a1, unsigned __int16 a2, int a3)
{
  if (a3) {
    int v4 = a3;
  }
  else {
    int v4 = 2;
  }
  v7[0] = a2;
  int v8 = v4;
  uint64_t v5 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(a1 + 56, v7);
  if (a1 + 64 == v5) {
    return 0;
  }
  else {
    return v5 + 40;
  }
}

uint64_t EQKit::Config::Operator::Dictionary::operatorId(uint64_t a1, void **a2)
{
  unsigned int v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(a1 + 8, a2);
  if ((void **)(a1 + 16) == v3) {
    return 0;
  }
  else {
    return *((unsigned __int16 *)v3 + 28);
  }
}

uint64_t EQKit::Config::Operator::Dictionary::formForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  int v4 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 88;
  unsigned int v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *((unsigned __int16 *)v3 + 14);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = v3;
    }
    else {
      int v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = (char *)v3;
    }
    unsigned int v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 14) <= a2) {
    return *((unsigned int *)v5 + 8);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Config::Operator::Dictionary::formMaskForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  int v4 = (char *)*((void *)this + 14);
  uint64_t v2 = (char *)this + 112;
  unsigned int v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *((unsigned __int16 *)v3 + 16);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = v3;
    }
    else {
      int v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = (char *)v3;
    }
    unsigned int v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 16) <= a2) {
    return *((void *)v5 + 5);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Config::Operator::Dictionary::enumerateEntries(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 56);
  unsigned int v3 = (void *)(result + 64);
  if (v2 != (void *)(result + 64))
  {
    uint64_t v5 = result;
    do
    {
      if (*((_WORD *)v2 + 16))
      {
        uint64_t v6 = *(void *)(v5 + 32);
        unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v5 + 40) - v6) >> 3);
        uint64_t v8 = v6 + 24 * *((unsigned __int16 *)v2 + 16) - 24;
        if (v7 >= *((unsigned __int16 *)v2 + 16)) {
          unsigned __int16 v9 = (void *)v8;
        }
        else {
          unsigned __int16 v9 = &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
        }
      }
      else
      {
        unsigned __int16 v9 = &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
      }
      unint64_t result = (*(uint64_t (**)(uint64_t, void *, void, void *))(a2 + 16))(a2, v9, *((unsigned int *)v2 + 9), v2 + 5);
      char v10 = (void *)v2[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          char v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v2[2];
          BOOL v12 = *v11 == (void)v2;
          uint64_t v2 = v11;
        }
        while (!v12);
      }
      uint64_t v2 = v11;
    }
    while (v11 != v3);
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  BOOL v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      BOOL v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25583A6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::wstring> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  begin = (std::string *)this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    BOOL v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, (std::string *)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    std::string::size_type v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    BOOL v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, (std::string *)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  double v15 = v14;
  std::vector<std::wstring>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_25583AA10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25583AA18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::wstring> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_25583AB14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_25583AC2C(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::wstring> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      unint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            long long v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *size_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      unint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(uint64_t **a1, void **a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  unint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_25583B3D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, void **a4)
{
  char v6 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x60uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 1;
    v7[6] = 0;
    *((_DWORD *)v7 + 14) = 1;
    v7[8] = 0;
    v7[10] = 0;
    *((unsigned char *)v7 + 88) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t result = (uint64_t *)(a1 + 8);
  int v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      uint64_t v8 = v4;
      unsigned int v9 = *((unsigned __int16 *)v4 + 16);
      if (v6 == v9)
      {
        unsigned int v10 = *((_DWORD *)v8 + 9);
        if (v7 >= v10)
        {
          BOOL v11 = v10 == v7;
          if (v10 >= v7) {
            char v12 = 1;
          }
          else {
            char v12 = -1;
          }
          if (v11) {
            char v12 = 0;
          }
          if ((v12 & 0x80) == 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
LABEL_13:
        int v4 = (uint64_t *)*v8;
        unint64_t result = v8;
        if (!*v8) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v6 < v9) {
          goto LABEL_13;
        }
        if (v9 >= v6) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if ((v13 & 0x80) == 0) {
          goto LABEL_22;
        }
LABEL_19:
        unint64_t result = v8 + 1;
        int v4 = (uint64_t *)v8[1];
        if (!v4) {
          goto LABEL_22;
        }
      }
    }
  }
  uint64_t v8 = result;
LABEL_22:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x28uLL);
    v11[14] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  unsigned int v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unsigned int v7 = 0;
      unint64_t result = (uint64_t *)v2;
    }
    else
    {
      unsigned int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unsigned int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      unint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      char v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      id v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        unint64_t result = v7;
      }
      unsigned int v7 = *(uint64_t **)(*v7 + 8);
    }
    long long v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      std::string::size_type v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        unsigned __int16 v7[2] = (uint64_t)v15;
        std::string::size_type v16 = v7;
      }
      else
      {
        long long v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      int v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *int v24 = v23;
      goto LABEL_72;
    }
    std::string::size_type v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unsigned int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    unsigned __int16 v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      unint64_t result = v7;
    }
    unsigned int v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    unsigned __int16 v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t result = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__lower_bound<std::pair<unsigned short,EQKit::Config::Operator::Form>>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = *(unsigned __int16 *)(result + 32);
  BOOL v7 = v5 == v6;
  if (v5 >= v6) {
    char v8 = 1;
  }
  else {
    char v8 = -1;
  }
  if (v7)
  {
    unsigned int v9 = *((_DWORD *)a2 + 1);
    unsigned int v10 = *(_DWORD *)(result + 36);
    BOOL v11 = v9 >= v10;
    BOOL v12 = v9 == v10;
    char v8 = -1;
    if (v11) {
      char v8 = 1;
    }
    if (v12) {
      char v8 = 0;
    }
  }
  if (v8 < 0) {
    return v3;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__lower_bound<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = *((_DWORD *)a2 + 1);
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(a3 + 32);
      BOOL v8 = v7 == v5;
      if (v7 >= v5) {
        char v9 = 1;
      }
      else {
        char v9 = -1;
      }
      if (v8)
      {
        unsigned int v10 = *(_DWORD *)(a3 + 36);
        BOOL v11 = v10 == v6;
        char v9 = v10 >= v6 ? 1 : -1;
        if (v11) {
          char v9 = 0;
        }
      }
      BOOL v12 = (v9 & 0x80) == 0;
      if (v9 < 0) {
        char v13 = (uint64_t *)(a3 + 8);
      }
      else {
        char v13 = (uint64_t *)a3;
      }
      if (v12) {
        uint64_t result = a3;
      }
      a3 = *v13;
    }
    while (*v13);
  }
  return result;
}

EQKit::Environment::Version *EQKit::Environment::Version::Version(EQKit::Environment::Version *this, NSNumber *a2)
{
  if (a2) {
    NSUInteger v3 = [(NSNumber *)a2 unsignedIntegerValue];
  }
  else {
    NSUInteger v3 = 0;
  }
  *(void *)this = v3;
  return this;
}

EQKit::Blahtex::Config *EQKit::Blahtex::Config::Config(EQKit::Blahtex::Config *this, const EQKit::Config::Operator::Dictionary *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = ___ZN5EQKit7Blahtex6ConfigC2ERKNS_6Config8Operator10DictionaryE_block_invoke;
  v4[3] = &__block_descriptor_40_e79_v28__0r_v8i16r__Entry__EQKitLength_id__EQKitLength_id_Sd___b1b1b1b1b1b1b1b1__20l;
  v4[4] = this;
  EQKit::Config::Operator::Dictionary::enumerateEntries((uint64_t)a2, (uint64_t)v4);
  return this;
}

void sub_25583BD0C(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v2);
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit7Blahtex6ConfigC2ERKNS_6Config8Operator10DictionaryE_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [NSString alloc];
  if (*((char *)a2 + 23) >= 0) {
    BOOL v8 = a2;
  }
  else {
    BOOL v8 = (uint64_t *)*a2;
  }
  char v9 = (void *)[v7 initWithUTF8String:v8];
  int v10 = EQKitUtilUTF32CharFromString(v9);
  if (v10)
  {
    int v11 = v10;
    char v12 = *(unsigned char *)(a4 + 48);
    if ((v12 & 2) != 0)
    {
      int v14 = v10;
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t>(v6 + 40, &v14, &v14);
      char v12 = *(unsigned char *)(a4 + 48);
    }
    if (v12)
    {
      int v13 = v11;
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t>(v6, &v13, &v13);
    }
  }
}

uint64_t EQKit::Blahtex::Config::updateOptions(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = result + 40;
  return result;
}

uint64_t std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      NSUInteger v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25583C030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t _laTeXPatterns(void)
{
  uint64_t result = _laTeXPatterns(void)::sLaTeXPatterns;
  if (!_laTeXPatterns(void)::sLaTeXPatterns)
  {
    id v1 = objc_alloc(MEMORY[0x263EFF8C0]);
    uint64_t v2 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"$", 0);
    uint64_t v3 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"$$", 0);
    uint64_t v4 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\("), CFSTR("\\)", 0);
    uint64_t v5 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\[", @"\\]", 0);
    uint64_t v6 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\begin{math}", @"\\end{math}", 0);
    uint64_t v7 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\begin{displaymath}", @"\\end{displaymath}", 0);
    uint64_t v8 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\begin{equation}", @"\\end{equation}", 0);
    uint64_t result = objc_msgSend(v1, "initWithObjects:", v2, v3, v4, v5, v6, v7, v8, objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\begin{equation*}", @"\\end{equation*}", 0), 0);
    _laTeXPatterns(void)::sLaTeXPatterns = result;
  }
  return result;
}

void _convertLaTeXStringToMathML(EQKitEnvironment *a1, NSString *a2, NSError **a3)
{
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = (void *)EQKitUtilDynamicCast(v5, (uint64_t)a1);
  uint64_t v7 = (NSArray *)_laTeXInlinePatterns();
  char isLaTeXStringUsingPatterns = _isLaTeXStringUsingPatterns(a2, v7);
  uint8x8_t v9 = _stripLaTeXPatterns(a2);
  char v14 = 0;
  __p[3] = 0;
  char v15 = 1;
  int v16 = 1;
  __int16 v17 = 256;
  int v19 = 0;
  *(_OWORD *)unint64_t v20 = 0u;
  *(_OWORD *)BOOL v21 = 0u;
  long long v22 = 0u;
  memset(v23, 0, 26);
  int v12 = 1;
  char v13 = isLaTeXStringUsingPatterns ^ 1;
  BOOL v18 = [(EQKitEnvironment *)a1 sourceAttribution];
  EQKit::Blahtex::Config::updateOptions([v6 blahtexConfig], (uint64_t)&v12);
  int v10 = [(NSString *)v9 dataUsingEncoding:2617245952];
  std::wstring::basic_string[abi:ne180100](__p, (void *)[(NSData *)v10 bytes], [(NSData *)v10 length] >> 2);
  blahtex::Interface::ProcessInput();
}

void sub_25583CDD4(void *a1, int a2)
{
  blahtex::Interface::~Interface(&v6);
  if (a2 == 1)
  {
    uint64_t v5 = (uint64_t *)__cxa_begin_catch(a1);
    if (v2 && !*v2) {
      void *v2 = [MEMORY[0x263F087E8] errorWithDomain:@"EQKitErrorDomain", 7, objc_msgSend(NSDictionary, "dictionaryWithObjectsAndKeys:", objc_msgSend(NSString, "stringWithFormat:", objc_msgSend((id)objc_msgSend(MEMORY[0x263F086E0], "mainBundle"), "localizedStringForKey:value:table:", @"Converting from LaTeX to MathML resulted in a syntax error: %@", &stru_27045C2A0, 0), _stringFromWideString(v5)), *MEMORY[0x263F08320], 0) code userInfo];
    }
    __cxa_end_catch();
    JUMPOUT(0x25583CDB8);
  }
  JUMPOUT(0x25583CEC4);
}

void sub_25583CEBC()
{
}

NSString *_stripLaTeXPatterns(NSString *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v1 = -[NSString stringByTrimmingCharactersInSet:](a1, "stringByTrimmingCharactersInSet:", [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet]);
  uint64_t v2 = (void *)_laTeXPatterns();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t Pattern = _findPattern(*(NSArray **)(*((void *)&v10 + 1) + 8 * i), v1, 1);
        if (Pattern != 0x7FFFFFFFFFFFFFFFLL) {
          return -[NSString substringWithRange:](v1, "substringWithRange:", Pattern, v8);
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  return v1;
}

uint64_t NoExternalEntityLoader(const char *a1, const char *a2, _xmlParserCtxt *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "<NULL>";
    if (a1) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = "<NULL>";
    }
    if (a2) {
      uint64_t v5 = a2;
    }
    int v8 = 136315394;
    uint8x8_t v9 = v6;
    __int16 v10 = 2080;
    long long v11 = v5;
    _os_log_impl(&dword_255834000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Refusing to load exernal entity with URL %s, ID %s", (uint8_t *)&v8, 0x16u);
  }
  return 0;
}

uint64_t sfaxmlNSMutableDataWriteCallback(void *a1, const char *a2, uint64_t a3)
{
  return a3;
}

uint64_t _findPattern(NSArray *a1, NSString *a2, int a3)
{
  NSUInteger v6 = [(NSString *)a2 length];
  if ([(NSArray *)a1 count] == 4)
  {
    uint64_t v7 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", [(NSArray *)a1 objectAtIndex:1], 0, 0, v6);
    if (!v8) {
      goto LABEL_23;
    }
    unint64_t v9 = v7;
    id v10 = [(NSArray *)a1 objectAtIndex:0];
    unint64_t v11 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v10, 0, 0, v9);
    unint64_t v13 = 0;
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v12 && v11 < v9)
    {
      unint64_t v13 = 0;
      do
      {
        if (v9 > v11 + v12)
        {
          unint64_t v13 = v9 - (v11 + v12);
          uint64_t v14 = v11 + v12;
        }
        unint64_t v11 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v10, 0, v11 + v12, v9 - (v11 + v12));
        if (v12) {
          BOOL v15 = v11 >= v9;
        }
        else {
          BOOL v15 = 1;
        }
      }
      while (!v15);
    }
    if (!v13)
    {
LABEL_23:
      id v17 = 0;
      int v19 = 0;
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_24;
    }
    int v16 = -[NSString substringWithRange:](a2, "substringWithRange:", v14, v13);
    id v17 = (id)[[NSString alloc] initWithFormat:@"%@%@%@", -[NSArray objectAtIndex:](a1, "objectAtIndex:", 0), v16, -[NSArray objectAtIndex:](a1, "objectAtIndex:", 1)];
    id v18 = (id)[[NSString alloc] initWithFormat:@"%@%@%@", -[NSArray objectAtIndex:](a1, "objectAtIndex:", 2), v16, -[NSArray objectAtIndex:](a1, "objectAtIndex:", 3)];
  }
  else
  {
    id v17 = [(NSArray *)a1 objectAtIndex:0];
    id v18 = [(NSArray *)a1 objectAtIndex:1];
  }
  int v19 = v18;
  uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (v17)
  {
    if (v18)
    {
      uint64_t v21 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v17, 0, 0, v6);
      if (v22)
      {
        unint64_t v23 = v21;
        uint64_t v24 = v21 + v22;
        unint64_t v25 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v19, 4, v21 + v22, v6 - (v21 + v22));
        if (v25 > v23)
        {
          if (v26)
          {
            uint64_t v27 = v25 + v26;
            -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v17, 0, v25 + v26, v6 - (v25 + v26));
            if (!v28)
            {
              if (v23) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v6 == v27;
              }
              int v31 = a3 ^ 1;
              if (v30) {
                int v31 = 1;
              }
              if (v31) {
                uint64_t v20 = v24;
              }
            }
          }
        }
      }
    }
  }
LABEL_24:

  return v20;
}

uint64_t _isLaTeXStringUsingPatterns(NSString *a1, NSArray *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = -[NSString stringByTrimmingCharactersInSet:](a1, "stringByTrimmingCharactersInSet:", [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet]);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [(NSArray *)a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v11;
  uint64_t v7 = 1;
LABEL_3:
  uint64_t v8 = 0;
  while (1)
  {
    if (*(void *)v11 != v6) {
      objc_enumerationMutation(a2);
    }
    if (_findPattern(*(NSArray **)(*((void *)&v10 + 1) + 8 * v8), v3, 1) != 0x7FFFFFFFFFFFFFFFLL) {
      return v7;
    }
    if (v5 == ++v8)
    {
      uint64_t v5 = [(NSArray *)a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t _laTeXInlinePatterns(void)
{
  uint64_t result = _laTeXInlinePatterns(void)::slaTeXInlinePatterns;
  if (!_laTeXInlinePatterns(void)::slaTeXInlinePatterns)
  {
    id v1 = objc_alloc(MEMORY[0x263EFF8C0]);
    uint64_t v2 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"$", 0);
    uint64_t v3 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\("), CFSTR("\\)", 0);
    uint64_t result = objc_msgSend(v1, "initWithObjects:", v2, v3, objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", @"\\begin{math}", @"\\end{math}", 0), 0);
    _laTeXInlinePatterns(void)::slaTeXInlinePatterns = result;
  }
  return result;
}

id _stringFromWideString(uint64_t *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = a1[1];
  }
  uint64_t v3 = (void *)[[NSString alloc] initWithBytes:v2 length:4 * v1 encoding:2617245952];

  return v3;
}

void blahtex::Interface::~Interface(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = (uint64_t *)*this;
  *this = 0;
  if (v2) {
    std::default_delete<blahtex::Manager>::operator()[abi:ne180100]((uint64_t)this, v2);
  }
}

void std::default_delete<blahtex::Manager>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v5 = (void **)(a2 + 6);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*((char *)a2 + 47) < 0) {
      operator delete((void *)a2[3]);
    }
    uint64_t v3 = a2[1];
    a2[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x25A290040](a2, 0x1032C408BA9FD94);
  }
}

void *std::wstring::basic_string[abi:ne180100](void *__dst, void *__src, unint64_t a3)
{
  if (a3 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a3 >= 5)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a3 | 1) != 5) {
      uint64_t v7 = a3 | 1;
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
    uint64_t v6 = __dst;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, 4 * a3);
LABEL_9:
  *((_DWORD *)v6 + a3) = 0;
  return __dst;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t EQKitUtilDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (objc_opt_isKindOfClass()) {
    return a2;
  }
  return 0;
}

CGColorSpaceRef __EQKitUtilGetDeviceColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
  EQKitUtilGetDeviceColorSpace::sDeviceColor = (uint64_t)result;
  return result;
}

uint64_t EQKitUtilGetFakeContext()
{
  if (EQKitUtilGetFakeContext::onceToken != -1) {
    dispatch_once(&EQKitUtilGetFakeContext::onceToken, &__block_literal_global_2);
  }
  return EQKitUtilGetFakeContext::sFakeContext;
}

CGContextRef __EQKitUtilGetFakeContext_block_invoke()
{
  if (EQKitUtilGetDeviceColorSpace::onceToken != -1) {
    dispatch_once(&EQKitUtilGetDeviceColorSpace::onceToken, &__block_literal_global);
  }
  CGContextRef result = CGBitmapContextCreate(0, 1uLL, 1uLL, 8uLL, 4uLL, (CGColorSpaceRef)EQKitUtilGetDeviceColorSpace::sDeviceColor, 5u);
  EQKitUtilGetFakeContext::sFakeContext = (uint64_t)result;
  return result;
}

uint64_t EQKitUtilUTF32CharFromString(void *a1)
{
  uint64_t v2 = [a1 length];
  if ((unint64_t)(v2 - 1) > 1) {
    return 0;
  }
  uint64_t v3 = v2;
  objc_msgSend(a1, "getCharacters:range:", &v5, 0, v2);
  uint64_t result = v5;
  if (v3 == 1) {
    return result;
  }
  if ((v5 & 0xFC00) != 0xD800) {
    return 0;
  }
  if ((v6 & 0xFC00) == 0xDC00) {
    return v6 + (v5 << 10) - 56613888;
  }
  return 0;
}

uint64_t EQKitUtilNewStringFromUTF32Char(int a1)
{
  if ((a1 - 0x10000) >> 20)
  {
    uint64_t v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    unsigned int v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    uint64_t v2 = 2;
  }
  v4[0] = v1;
  return [[NSString alloc] initWithCharacters:v4 length:v2];
}

BOOL EQKitLength::isNamedspaceString(uint64_t a1, uint64_t *a2)
{
  LengthMap();
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  v6[0] = v4;
  v6[1] = v3;
  return std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&LengthMap(void)::sMap, (uint64_t)v6) != (void)&unk_269EFE348;
}

void LengthMap(void)
{
  {
    {
      std::map<std::string_view const,float>::map[abi:ne180100]<std::pair<std::string_view const,float> const*>((uint64_t)&LengthMap(void)::sMap, (uint64_t)&sData, (uint64_t)&__block_descriptor_40_e35_B24__0r__Key_____CFString_SdI_8_v16l);
    }
  }
}

void sub_25583E8AC(_Unwind_Exception *a1)
{
}

double EQKitLength::EQKitLengthFromMathMLString@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 1;
  *(void *)(a2 + 8) = 0;
  LengthMap();
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unsigned __int16 v5 = a1;
  }
  else {
    unsigned __int16 v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&LengthMap(void)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE348)
  {
    double result = *(float *)(v6 + 48);
    *(_DWORD *)a2 = 3;
    *(double *)(a2 + 8) = result;
  }
  return result;
}

uint64_t EQKitLength::EQKitLength(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  unsigned __int16 v5 = (void *)[NSString stringWithUTF8String:v4];
  uint64_t v6 = objc_msgSend(v5, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet"));
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v6];
  float v24 = 0.0;
  [v7 scanFloat:&v24];
  *(double *)(a1 + 8) = v24;
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "string"), "substringFromIndex:", objc_msgSend(v7, "scanLocation"));
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet")), "UTF8String"));

  if ((v23 & 0x80u) == 0) {
    unint64_t v9 = v23;
  }
  else {
    unint64_t v9 = (unint64_t)__p[1];
  }
  switch(v9)
  {
    case 4uLL:
      if ((v23 & 0x80u) == 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      if (!memcmp(v14, "rule", 4uLL))
      {
        int v11 = 5;
        goto LABEL_35;
      }
      break;
    case 2uLL:
      if ((v23 & 0x80u) == 0) {
        long long v12 = __p;
      }
      else {
        long long v12 = (void **)__p[0];
      }
      if (!memcmp(v12, "pt", 2uLL)) {
        goto LABEL_34;
      }
      if (*(_WORD *)v12 == 30821)
      {
        int v11 = 2;
        goto LABEL_35;
      }
      if (*(_WORD *)v12 == 28005)
      {
        int v11 = 3;
        goto LABEL_35;
      }
      if (!memcmp(v12, "cm", 2uLL))
      {
        double v13 = *(double *)(a1 + 8);
LABEL_28:
        double v15 = 2.54;
LABEL_29:
        double v16 = v13 / v15;
LABEL_32:
        double v17 = 72.0;
LABEL_33:
        *(double *)(a1 + 8) = v16 * v17;
LABEL_34:
        int v11 = 1;
        goto LABEL_35;
      }
      break;
    case 1uLL:
      long long v10 = __p;
      if ((v23 & 0x80u) != 0) {
        long long v10 = (void **)__p[0];
      }
      if (*(unsigned char *)v10 == 37)
      {
        int v11 = 4;
LABEL_35:
        *(_DWORD *)a1 = v11;
        goto LABEL_36;
      }
      break;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "mm"))
  {
    double v13 = *(double *)(a1 + 8) / 10.0;
    goto LABEL_28;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "in"))
  {
    double v16 = *(double *)(a1 + 8);
    goto LABEL_32;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "px"))
  {
    double v13 = *(double *)(a1 + 8);
    double v15 = 96.0;
    goto LABEL_29;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "pc"))
  {
    double v16 = *(double *)(a1 + 8);
    double v17 = 12.0;
    goto LABEL_33;
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "ch")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "rem")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "vw")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "vh"))
  {
    BOOL v19 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "vmin");
    if (!v19)
    {
      if (EQKitLength::isNamedspaceString(v19, (uint64_t *)__p))
      {
        EQKitLength::EQKitLengthFromMathMLString((uint64_t *)__p, (uint64_t)&v20);
        *(_DWORD *)a1 = v20;
        *(void *)(a1 + 8) = v21;
      }
      else
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, ""))
        {
          int v11 = 6;
          goto LABEL_35;
        }
        *(_DWORD *)a1 = 0;
      }
    }
  }
LABEL_36:
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_25583ECA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

double EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(double *a1, uint64_t a2, double a3)
{
  double v3 = a1[1];
  uint64_t v4 = *(unsigned int *)a1;
  switch((int)v4)
  {
    case 2:
    case 3:
    case 5:
      a3 = (*(double (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
      goto LABEL_3;
    case 4:
      double v3 = v3 * a3 / 100.0;
      break;
    case 6:
LABEL_3:
      double v3 = v3 * a3;
      break;
    default:
      return v3;
  }
  return v3;
}

double EQKitLength::resolveToAbsoluteWithSize(EQKitLength *this, double a2)
{
  double result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      goto LABEL_5;
    case 4:
      double result = result * a2 / 100.0;
      break;
    case 5:
      a2 = 0.0;
LABEL_5:
      double result = result * a2;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double EQKitLength::resolveToAbsoluteWithSizeAndRule(EQKitLength *this, double a2, double a3)
{
  double result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      double result = result * a2;
      break;
    case 4:
      double result = result * a2 / 100.0;
      break;
    case 5:
      double result = result * a3;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

uint64_t EQKitLength::lengthVectorFromString(std::string *__str, uint64_t a2)
{
  std::string::size_type v3 = 0;
  std::string __p = 0;
  v43 = 0;
  __int16 v44 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  char v5 = 1;
  while (v3 < size)
  {
    int v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    BOOL v7 = v6 < 0;
    if (v6 >= 0) {
      uint64_t v8 = __str;
    }
    else {
      uint64_t v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v7) {
      std::string::size_type v9 = __str->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    if (v9 > v3)
    {
      long long v10 = (unsigned __int8 *)v8 + v3;
      int v11 = (unsigned __int8 *)v8 + v9;
LABEL_14:
      uint64_t v12 = 0;
      while (*v10 != asc_2558E2677[v12])
      {
        if (++v12 == 3)
        {
          if (++v10 != v11) {
            goto LABEL_14;
          }
          goto LABEL_21;
        }
      }
      if (v10 != v11)
      {
        std::string::size_type v13 = v10 - (unsigned __int8 *)v8;
        if (v10 - (unsigned __int8 *)v8 != -1) {
          goto LABEL_22;
        }
      }
    }
LABEL_21:
    std::string::size_type v13 = size;
LABEL_22:
    std::string::basic_string(&v41, __str, v3, v13 - v3, (std::allocator<char> *)&v39);
    EQKitLength::EQKitLength((uint64_t)&v39, (uint64_t *)&v41, 0);
    int v14 = v39;
    if (v39)
    {
      double v15 = v43;
      if (v43 >= v44)
      {
        uint64_t v17 = (v43 - (unsigned char *)__p) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v44 - (unsigned char *)__p;
        if ((v44 - (unsigned char *)__p) >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)&v44, v20);
        unsigned __int8 v23 = &v21[16 * v17];
        *(_DWORD *)unsigned __int8 v23 = v39;
        *((void *)v23 + 1) = v40;
        float v24 = (char *)__p;
        unint64_t v25 = v43;
        uint64_t v26 = v23;
        while (v25 != v24)
        {
          int v27 = *((_DWORD *)v25 - 4);
          v25 -= 16;
          *((_DWORD *)v26 - 4) = v27;
          v26 -= 16;
          *((void *)v26 + 1) = *((void *)v25 + 1);
        }
        double v16 = v23 + 16;
        std::string __p = v26;
        v43 = v23 + 16;
        __int16 v44 = &v21[16 * v22];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(_DWORD *)v43 = v39;
        *((void *)v15 + 1) = v40;
        double v16 = v15 + 16;
      }
      v43 = v16;
      if (v13 >= size) {
        goto LABEL_49;
      }
      int v28 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      uint64_t v29 = v28 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
      std::string::size_type v30 = v28 >= 0 ? HIBYTE(__str->__r_.__value_.__r.__words[2]) : __str->__r_.__value_.__l.__size_;
      if (v30 <= v13) {
        goto LABEL_50;
      }
      while (memchr(" \t\n", v29->__r_.__value_.__s.__data_[v13], 3uLL))
      {
        if (v30 == ++v13) {
          goto LABEL_50;
        }
      }
      if (v13 == -1) {
LABEL_50:
      }
        std::string::size_type v3 = size;
      else {
LABEL_49:
      }
        std::string::size_type v3 = v13;
    }
    else
    {
      char v5 = 0;
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if (!v14) {
        break;
      }
    }
    else if (!v14)
    {
      break;
    }
  }
  int v31 = (char *)__p;
  if (v5)
  {
    unint64_t v32 = v43;
    if (__p != v43)
    {
      BOOL v33 = *(void **)a2;
      *(void *)a2 = __p;
      *(void *)(a2 + 8) = v32;
      v34 = v44;
      id v35 = *(char **)(a2 + 16);
      std::string __p = v33;
      __int16 v44 = v35;
      *(void *)(a2 + 16) = v34;
      uint64_t v36 = 1;
      int v31 = (char *)v33;
      if (!v33) {
        return v36;
      }
      goto LABEL_60;
    }
  }
  uint64_t v36 = 0;
  if (__p)
  {
LABEL_60:
    v43 = v31;
    operator delete(v31);
  }
  return v36;
}

void sub_25583F1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string_view const,float>::map[abi:ne180100]<std::pair<std::string_view const,float> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_25583F248(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  BOOL v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t a5)
{
  std::string::size_type v9 = a1 + 1;
  if (a1 + 1 == a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a5, *(void *)(a5 + 8), (void *)a2[4], a2[5]) & 0x80) != 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = a2;
    }
    else
    {
      int v11 = (uint64_t *)*a2;
      if (*a2)
      {
        do
        {
          uint64_t v12 = v11;
          int v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        double v16 = a2;
        do
        {
          uint64_t v12 = (uint64_t *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          double v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>((const void *)v12[4], v12[5], *(void **)a5, *(void *)(a5 + 8)) & 0x80) == 0)goto LABEL_17; {
    }
      }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>((const void *)a2[4], a2[5], *(void **)a5, *(void *)(a5 + 8)) & 0x80) == 0)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  a4 = a2 + 1;
  uint64_t v13 = a2[1];
  if (v13)
  {
    int v14 = (uint64_t *)a2[1];
    do
    {
      double v15 = v14;
      int v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      double v15 = (uint64_t *)v19[2];
      BOOL v17 = *v15 == (void)v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a5, *(void *)(a5 + 8), (void *)v15[4], v15[5]) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:

  return std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
}

uint64_t *std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v7 = v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a3, *(void *)(a3 + 8), (void *)v4[4], v4[5]) & 0x80) == 0)break; {
        uint64_t v4 = (uint64_t *)*v7;
        }
        char v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>((const void *)v7[4], v7[5], *(void **)a3, *(void *)(a3 + 8)) & 0x80) == 0)break; {
      char v5 = v7 + 1;
      }
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    BOOL v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__lower_bound<std::string_view>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a2, *(void *)(a2 + 8), *(void **)(v5 + 32), *(void *)(v5 + 40)) & 0x80) != 0)return v3; {
  return v5;
  }
}

uint64_t std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__lower_bound<std::string_view>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      char v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)(v5 + 32), *(void *)(v5 + 40), *(void **)a2, *(void *)(a2 + 8));
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t *)v5;
      }
      else {
        uint64_t v8 = (uint64_t *)(v5 + 8);
      }
      if (v7 >= 0) {
        a4 = v5;
      }
      uint64_t v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t EQKitPseudoUnitLength::EQKitPseudoUnitLength(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = (void *)[NSString stringWithUTF8String:v3];
  uint64_t v5 = objc_msgSend(v4, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet"));
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v5];
  if ([v6 scanString:@"+" intoString:0])
  {
    int v7 = 2;
  }
  else if ([v6 scanString:@"-" intoString:0])
  {
    int v7 = 3;
  }
  else
  {
    if ([v6 isAtEnd])
    {
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_12;
    }
    int v7 = 1;
  }
  *(_DWORD *)(a1 + 16) = v7;
LABEL_12:
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v6, "string"), "substringFromIndex:", objc_msgSend(v6, "scanLocation"));
  std::string::basic_string[abi:ne180100]<0>(&v46, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet")), "UTF8String"));

  std::string::basic_string[abi:ne180100]<0>(v44, "height");
  std::string::basic_string[abi:ne180100]<0>(v42, "depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = &v46;
  }
  else {
    std::string::size_type v9 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v10 = v44;
  }
  else {
    uint64_t v10 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    int64_t v11 = v45;
  }
  else {
    int64_t v11 = (int64_t)v44[1];
  }
  if (!v11)
  {
    std::string::size_type v16 = 0;
LABEL_44:
    int v17 = 1;
    goto LABEL_61;
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v46.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = (char *)v9 + size;
  if (size >= v11)
  {
    int v18 = *(char *)v10;
    int64_t v19 = size;
    unint64_t v20 = v9;
    do
    {
      int64_t v21 = v19 - v11;
      if (v21 == -1) {
        break;
      }
      uint64_t v22 = (char *)memchr(v20, v18, v21 + 1);
      if (!v22) {
        break;
      }
      unsigned __int8 v23 = v22;
      if (!memcmp(v22, v10, v11))
      {
        if (v23 != v13)
        {
          std::string::size_type v16 = v23 - (char *)v9;
          if (v23 - (char *)v9 != -1) {
            goto LABEL_44;
          }
        }
        break;
      }
      unint64_t v20 = (std::string *)(v23 + 1);
      int64_t v19 = v13 - (v23 + 1);
    }
    while (v19 >= v11);
  }
  if ((v43 & 0x80u) == 0) {
    int v14 = v42;
  }
  else {
    int v14 = (void **)v42[0];
  }
  if ((v43 & 0x80u) == 0) {
    int64_t v11 = v43;
  }
  else {
    int64_t v11 = (int64_t)v42[1];
  }
  if (!v11)
  {
    std::string::size_type v16 = 0;
LABEL_52:
    int v17 = 2;
    goto LABEL_61;
  }
  if (size >= v11)
  {
    int v24 = *(char *)v14;
    int64_t v25 = size;
    uint64_t v26 = v9;
    do
    {
      int64_t v27 = v25 - v11;
      if (v27 == -1) {
        break;
      }
      int v28 = (char *)memchr(v26, v24, v27 + 1);
      if (!v28) {
        break;
      }
      uint64_t v29 = v28;
      if (!memcmp(v28, v14, v11))
      {
        if (v29 != v13)
        {
          std::string::size_type v16 = v29 - (char *)v9;
          if (v29 - (char *)v9 != -1) {
            goto LABEL_52;
          }
        }
        break;
      }
      uint64_t v26 = (std::string *)(v29 + 1);
      int64_t v25 = v13 - (v29 + 1);
    }
    while (v25 >= v11);
  }
  if ((v41 & 0x80u) == 0) {
    double v15 = __p;
  }
  else {
    double v15 = (void **)__p[0];
  }
  if ((v41 & 0x80u) == 0) {
    int64_t v11 = v41;
  }
  else {
    int64_t v11 = (int64_t)__p[1];
  }
  if (!v11)
  {
    std::string::size_type v16 = 0;
LABEL_60:
    int v17 = 3;
LABEL_61:
    *(_DWORD *)(a1 + 20) = v17;
    std::string::erase(&v46, v16, v11);
    goto LABEL_62;
  }
  if (size >= v11)
  {
    int v34 = *(char *)v15;
    id v35 = v9;
    do
    {
      if (size - v11 == -1) {
        break;
      }
      uint64_t v36 = (char *)memchr(v35, v34, size - v11 + 1);
      if (!v36) {
        break;
      }
      v37 = v36;
      if (!memcmp(v36, v15, v11))
      {
        if (v37 != v13)
        {
          std::string::size_type v16 = v37 - (char *)v9;
          if (v37 - (char *)v9 != -1) {
            goto LABEL_60;
          }
        }
        break;
      }
      id v35 = (std::string *)(v37 + 1);
      int64_t size = v13 - (v37 + 1);
    }
    while (size >= v11);
  }
  *(_DWORD *)(a1 + 20) = 0;
LABEL_62:
  EQKitLength::EQKitLength(&v38, &v46, 1);
  int v30 = v38;
  *(_DWORD *)a1 = v38;
  *(void *)(a1 + 8) = v39;
  if (*(_DWORD *)(a1 + 20)) {
    BOOL v31 = v30 == 6;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31 && v30 != 4)
  {
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if ((char)v41 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v43 < 0) {
    operator delete(v42[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_25583F9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

double EQKitPseudoUnitLength::adjustedPseudoLength(EQKitPseudoUnitLength *this, double a2, double a3, double a4, double a5)
{
  int v5 = *((_DWORD *)this + 5);
  switch(v5)
  {
    case 3:
      double v6 = *((double *)this + 1) * a5;
      break;
    case 2:
      double v6 = *((double *)this + 1) * a4;
      break;
    case 1:
      double v6 = *((double *)this + 1) * a3;
      break;
    default:
      return a2;
  }
  if (*(_DWORD *)this == 4) {
    double v6 = v6 / 100.0;
  }
  int v7 = *((_DWORD *)this + 4);
  if (v7 != 1)
  {
    if (v7 == 3) {
      return a2 - v6;
    }
    if (v7 == 2) {
      return v6 + a2;
    }
    return a2;
  }
  return v6;
}

double EQKitPseudoUnitLength::resolveToAbsoluteLength(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v9 = a3;
  double v11 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)a1, a2, a3);
  if (*(_DWORD *)(a1 + 20))
  {
    return EQKitPseudoUnitLength::adjustedPseudoLength((EQKitPseudoUnitLength *)a1, v9, a4, a5, a6);
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 16);
    switch(v13)
    {
      case 1:
        return v11;
      case 3:
        return v9 - v11;
      case 2:
        return v11 + v9;
    }
    return v9;
  }
}

double EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this)
{
  *(void *)this = 4;
  double result = 0.25;
  *(_OWORD *)((char *)this + 8) = xmmword_2558BDAC0;
  *((void *)this + 3) = 0x3FD0000000000000;
  return result;
}

EQKitPath::QuantizationConfig *EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this, NSDictionary *a2)
{
  *(void *)this = 4;
  *(_OWORD *)((char *)this + 8) = xmmword_2558BDAC0;
  *((void *)this + 3) = 0x3FD0000000000000;
  uint64_t v4 = objc_opt_class();
  int v5 = (void *)EQKitUtilDynamicCast(v4, (uint64_t)[(NSDictionary *)a2 objectForKey:@"bucketsPerUnit"]);
  if (v5)
  {
    unint64_t v6 = [v5 unsignedIntegerValue];
    if (v6 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = v6;
    }
    *(void *)this = v7;
    *((double *)this + 1) = 1.0 / (double)v7;
  }
  uint64_t v8 = objc_opt_class();
  double v9 = (void *)EQKitUtilDynamicCast(v8, (uint64_t)[(NSDictionary *)a2 objectForKey:@"thresholdCurveBoundsMinMax"]);
  if (v9)
  {
    [v9 floatValue];
    *((double *)this + 2) = v10;
  }
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = (void *)EQKitUtilDynamicCast(v11, (uint64_t)[(NSDictionary *)a2 objectForKey:@"thresholdCurveControlPointDistance"]);
  if (v12)
  {
    [v12 floatValue];
    *((double *)this + 3) = v13;
  }
  return this;
}

uint64_t EQKitPath::QuantizationConfig::setThresholdCurveControlPointDistance(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

uint64_t EQKitPath::Stem::Stem(uint64_t result, int a2, uint64_t a3, _OWORD *a4)
{
  *(unsigned char *)double result = 0;
  *(_DWORD *)(result + 56) = a2;
  uint64_t v4 = (_OWORD *)(result + 8);
  if (a4)
  {
    long long v5 = a4[1];
    *uint64_t v4 = *a4;
    *(_OWORD *)(result + 24) = v5;
    unint64_t v7 = *(void *)(result + 8);
    unint64_t v6 = *(void *)(result + 16);
    unint64_t v9 = *(void *)(result + 24);
    unint64_t v8 = *(void *)(result + 32);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    *uint64_t v4 = 0u;
    *(_OWORD *)(result + 24) = 0u;
  }
  uint64_t v10 = *(void *)(a3 + 8);
  unint64_t v11 = (*(void *)(a3 + 16) - v10) >> 4;
  if (v11 <= v7) {
    uint64_t v12 = (double *)MEMORY[0x263F00148];
  }
  else {
    uint64_t v12 = (double *)(v10 + 16 * v7);
  }
  double v13 = *v12;
  double v14 = v12[1];
  if (v11 <= v6) {
    double v15 = (double *)MEMORY[0x263F00148];
  }
  else {
    double v15 = (double *)(v10 + 16 * v6);
  }
  double v16 = v15[1];
  double v17 = *v15 - v13;
  double v18 = v16 - v14;
  if (v11 <= v9) {
    int64_t v19 = (double *)MEMORY[0x263F00148];
  }
  else {
    int64_t v19 = (double *)(v10 + 16 * v9);
  }
  double v20 = *v19;
  double v21 = v19[1];
  if (v11 <= v8) {
    uint64_t v22 = (double *)MEMORY[0x263F00148];
  }
  else {
    uint64_t v22 = (double *)(v10 + 16 * v8);
  }
  double v23 = v22[1];
  double v24 = *v22 - v20;
  double v25 = v23 - v21;
  if ((a2 | 2) == 3)
  {
    double v26 = fabs(v18);
    double v27 = fabs(v25);
    if (v26 >= v27) {
      double v26 = v27;
    }
    double v28 = vabdd_f64(*v22, v13);
    double v29 = vabdd_f64(v20, *v15);
    if (v28 < v29) {
      double v28 = v29;
    }
    *(double *)(result + 40) = v26;
    *(double *)(result + 48) = v28;
    if (v18 != 0.0 && v25 != 0.0)
    {
      double v30 = v17 / v18;
      double v31 = v24 / v25;
      goto LABEL_31;
    }
  }
  else
  {
    double v32 = fabs(v17);
    double v33 = fabs(v24);
    if (v32 >= v33) {
      double v32 = v33;
    }
    double v34 = vabdd_f64(v23, v14);
    double v35 = vabdd_f64(v21, v16);
    if (v34 < v35) {
      double v34 = v35;
    }
    *(double *)(result + 40) = v32;
    *(double *)(result + 48) = v34;
    if (v17 != 0.0 && v24 != 0.0)
    {
      double v30 = v18 / v17;
      double v31 = v25 / v24;
LABEL_31:
      if (vabdd_f64(v30, v31) < 0.00100000005) {
        *(unsigned char *)double result = 1;
      }
    }
  }
  return result;
}

double EQKitPath::vector(EQKitPath *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = (*((void *)this + 2) - v3) >> 4;
  long long v5 = (double *)(v3 + 16 * a2);
  if (v4 <= a2) {
    long long v5 = (double *)MEMORY[0x263F00148];
  }
  unint64_t v6 = (double *)(v3 + 16 * a3);
  if (v4 <= a3) {
    unint64_t v7 = (double *)MEMORY[0x263F00148];
  }
  else {
    unint64_t v7 = v6;
  }
  return *v7 - *v5;
}

__n128 EQKitPath::Stem::Stem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t EQKitPath::Stem::adjustStemPoints(uint64_t result, uint64_t a2, void *a3, double a4)
{
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = (double *)(*a3 + 16 * v5);
  double v8 = *v6;
  double v7 = v6[1];
  unint64_t v9 = (double *)(*a3 + 16 * *(void *)(result + 24));
  double v11 = *v9;
  double v10 = v9[1];
  uint64_t v12 = *(void *)(a2 + 8);
  unint64_t v13 = (*(void *)(a2 + 16) - v12) >> 4;
  if (v13 <= v4) {
    double v14 = (double *)MEMORY[0x263F00148];
  }
  else {
    double v14 = (double *)(v12 + 16 * v4);
  }
  double v15 = (double *)(v12 + 16 * v5);
  if (v13 <= v5) {
    double v16 = (double *)MEMORY[0x263F00148];
  }
  else {
    double v16 = v15;
  }
  double v17 = *v16 - *v14;
  double v18 = v16[1] - v14[1];
  switch(*(_DWORD *)(result + 56))
  {
    case 0:
      double v8 = v8 - a4;
      double v11 = v11 - a4;
      goto LABEL_11;
    case 1:
      double v7 = v7 - a4;
      double v10 = v10 - a4;
      goto LABEL_13;
    case 2:
      double v8 = v8 + a4;
      double v11 = v11 + a4;
LABEL_11:
      double v19 = v18 * a4 / v17;
      double v7 = v7 + v19;
      double v10 = v10 + v19;
      break;
    case 3:
      double v7 = v7 + a4;
      double v10 = v10 + a4;
LABEL_13:
      double v20 = v17 * a4 / v18;
      double v8 = v8 + v20;
      double v11 = v11 + v20;
      break;
    default:
      break;
  }
  *unint64_t v6 = v8;
  v6[1] = v7;
  *unint64_t v9 = v11;
  v9[1] = v10;
  return result;
}

void EQKitPath::extractorFunction(EQKitPath *this, void *a2, const CGPathElement *a3)
{
  if (this)
  {
    if (a2)
    {
      unint64_t v4 = (void *)*((void *)this + 1);
      if (v4)
      {
        unsigned int v5 = *(_DWORD *)a2;
        uint64_t v6 = 2;
        uint64_t v7 = 3;
        if (*(_DWORD *)a2 != 3) {
          uint64_t v7 = 0;
        }
        int v65 = *(_DWORD *)a2;
        BOOL v8 = v5 == 2 || *(_DWORD *)a2 == 3;
        if (v5 != 2) {
          uint64_t v6 = v7;
        }
        if (v5 < 2) {
          BOOL v8 = 1;
        }
        BOOL v70 = v8;
        if (v5 >= 2) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = 1;
        }
        double v10 = (char **)(v4 + 1);
        uint64_t v66 = v4[1];
        uint64_t v68 = v4[2];
        unint64_t v69 = v9;
        if (a2[1] && v70)
        {
          uint64_t v11 = 0;
          uint64_t v12 = v4 + 3;
          unint64_t v13 = (char *)v4[2];
          if (v9 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v9;
          }
          do
          {
            double v15 = (_OWORD *)(a2[1] + 16 * v11);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v16 = (v13 - *v10) >> 4;
              if ((unint64_t)(v16 + 1) >> 60) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v17 = *v12 - (void)*v10;
              uint64_t v18 = v17 >> 3;
              if (v17 >> 3 <= (unint64_t)(v16 + 1)) {
                uint64_t v18 = v16 + 1;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v18;
              }
              if (v19) {
                double v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)(v4 + 3), v19);
              }
              else {
                double v20 = 0;
              }
              double v21 = &v20[16 * v16];
              *(_OWORD *)double v21 = *v15;
              double v23 = (char *)v4[1];
              uint64_t v22 = (char *)v4[2];
              double v24 = v21;
              if (v22 != v23)
              {
                do
                {
                  *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
                  v24 -= 16;
                  v22 -= 16;
                }
                while (v22 != v23);
                uint64_t v22 = *v10;
              }
              unint64_t v13 = v21 + 16;
              v4[1] = v24;
              _WORD v4[2] = v21 + 16;
              v4[3] = &v20[16 * v19];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *(_OWORD *)unint64_t v13 = *v15;
              v13 += 16;
            }
            _WORD v4[2] = v13;
            ++v11;
          }
          while (v11 != v14);
        }
        double v25 = (char *)v4[4];
        double v26 = (char *)v4[5];
        unint64_t v27 = (v26 - v25) >> 4;
        if (*(_DWORD *)a2 != 4 || v26 == v25)
        {
          double v29 = this;
        }
        else
        {
          double v29 = this;
          if (v27 > *(void *)(v4[8] - 8) && *(_DWORD *)&v25[16 * v27 - 16] == 1)
          {
            double v30 = (double *)&(*v10)[16 * *(void *)&v25[16 * v27 - 8]];
            if (*((double *)this + 3) == *v30 && *((double *)this + 4) == v30[1])
            {
              v4[2] -= 16;
              v26 -= 16;
              void v4[5] = v26;
              unint64_t v27 = (v26 - v25) >> 4;
            }
          }
        }
        uint64_t v32 = (v68 - v66) >> 4;
        unint64_t v33 = v4[6];
        if ((unint64_t)v26 >= v33)
        {
          uint64_t v36 = (v26 - v25) >> 4;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v38 = v33 - (void)v25;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)(v4 + 6), v39);
            double v25 = (char *)v4[4];
            double v26 = (char *)v4[5];
          }
          else
          {
            uint64_t v40 = 0;
          }
          unsigned __int8 v41 = &v40[16 * v36];
          v42 = &v40[16 * v39];
          *(_DWORD *)unsigned __int8 v41 = v65;
          *((void *)v41 + 1) = v32;
          double v34 = v41 + 16;
          if (v26 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
              v41 -= 16;
              v26 -= 16;
            }
            while (v26 != v25);
            double v25 = (char *)v4[4];
          }
          v4[4] = v41;
          void v4[5] = v34;
          v4[6] = v42;
          unint64_t v35 = v69;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)double v26 = v65;
          *((void *)v26 + 1) = v32;
          double v34 = v26 + 16;
          unint64_t v35 = v69;
        }
        void v4[5] = v34;
        uint64_t v43 = a2[1];
        BOOL v44 = v43 != 0;
        unsigned __int8 v45 = (long long *)(v43 + 16 * v35 - 16);
        if (!v70 || !v44) {
          unsigned __int8 v45 = (long long *)MEMORY[0x263F00148];
        }
        long long v71 = *v45;
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 == 4)
          {
            *((unsigned char *)v29 + 16) = 0;
LABEL_104:
            *(void *)v29 += v35;
            return;
          }
          if (*((unsigned char *)v29 + 16)) {
            goto LABEL_104;
          }
          unint64_t v54 = v4[9];
          uint64_t v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v54) {
            goto LABEL_84;
          }
          v48 = (unint64_t *)v4[7];
          uint64_t v56 = v47 - v48;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            unint64_t v57 = v54 - (void)v48;
            unint64_t v58 = (uint64_t)(v54 - (void)v48) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v59);
              v48 = (unint64_t *)v4[7];
              uint64_t v47 = (unint64_t *)v4[8];
            }
            else
            {
              long long v60 = 0;
            }
            long long v61 = (unint64_t *)&v60[8 * v56];
            long long v62 = &v60[8 * v59];
            *long long v61 = v27;
            long long v55 = v61 + 1;
            while (v47 != v48)
            {
              unint64_t v64 = *--v47;
              *--long long v61 = v64;
            }
LABEL_101:
            v4[7] = v61;
            v4[8] = v55;
            v4[9] = v62;
            if (v48) {
              operator delete(v48);
            }
            goto LABEL_103;
          }
        }
        else
        {
          unint64_t v46 = v4[9];
          uint64_t v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v46)
          {
LABEL_84:
            *uint64_t v47 = v27;
            long long v55 = v47 + 1;
LABEL_103:
            v4[8] = v55;
            *((unsigned char *)v29 + 16) = 1;
            *(_OWORD *)((char *)v29 + 24) = v71;
            goto LABEL_104;
          }
          v48 = (unint64_t *)v4[7];
          uint64_t v49 = v47 - v48;
          if (!((unint64_t)(v49 + 1) >> 61))
          {
            unint64_t v50 = v46 - (void)v48;
            unint64_t v51 = (uint64_t)(v46 - (void)v48) >> 2;
            if (v51 <= v49 + 1) {
              unint64_t v51 = v49 + 1;
            }
            if (v50 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v52)
            {
              long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v52);
              v48 = (unint64_t *)v4[7];
              uint64_t v47 = (unint64_t *)v4[8];
            }
            else
            {
              long long v53 = 0;
            }
            long long v61 = (unint64_t *)&v53[8 * v49];
            long long v62 = &v53[8 * v52];
            *long long v61 = v27;
            long long v55 = v61 + 1;
            while (v47 != v48)
            {
              unint64_t v63 = *--v47;
              *--long long v61 = v63;
            }
            goto LABEL_101;
          }
        }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

void sub_255840464(void *a1)
{
}

void sub_255840474(void *a1)
{
}

void EQKitPath::EQKitPath(EQKitPath *this, CGPathRef path)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *((unsigned char *)this + 120) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 65) = 0u;
  if (path) {
    CGMutablePathRef MutableCopy = CGPathCreateMutableCopy(path);
  }
  else {
    CGMutablePathRef MutableCopy = 0;
  }
  *(void *)this = MutableCopy;
  int64x2_t v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + 8) = v4;
  *((int64x2_t *)this + 9) = v4;
}

void sub_2558404F4(_Unwind_Exception *a1)
{
  unsigned int v5 = *(void **)(v1 + 56);
  if (v5)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  EQKitPath::EQKitPath(v3, v2, v1);
  _Unwind_Resume(a1);
}

void EQKitPath::EQKitPath(EQKitPath *this, const __CTFont *a2, int a3)
{
  *((unsigned char *)this + 120) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((unsigned char *)this + 80) = 0;
  if (a2)
  {
    *(_DWORD *)glyphs = -1;
    memset(&v13, 0, sizeof(v13));
    CGAffineTransformMakeScale(&v13, 1.0, -1.0);
    if ((a3 - 0x10000) >> 20)
    {
      CFIndex v7 = 1;
      LOWORD(v6) = a3;
    }
    else
    {
      unsigned int v6 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      CFIndex v7 = 2;
    }
    characters[0] = v6;
    if (CTFontGetGlyphsForCharacters(a2, characters, glyphs, v7))
    {
      *(void *)this = CTFontCreatePathForGlyph(a2, glyphs[0], &v13);
    }
    else
    {
      CFStringRef v8 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], characters, v7);
      CFStringRef v9 = v8;
      if (v8)
      {
        v16.length = CFStringGetLength(v8);
        v16.location = 0;
        double v10 = CTFontCreateForString(a2, v9, v16);
        uint64_t v11 = v10;
        if (v10)
        {
          CTFontGetGlyphsForCharacters(v10, characters, glyphs, v7);
          *(void *)this = CTFontCreatePathForGlyph(v11, glyphs[0], &v13);
          CFRelease(v11);
        }
        CFRelease(v9);
      }
    }
  }
  int64x2_t v12 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + 8) = v12;
  *((int64x2_t *)this + 9) = v12;
}

void sub_255840690(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  int64x2_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)v1[1];
  if (v5)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::~EQKitPath(CGPathRef *this)
{
  CGPathRelease(*this);
  uint64_t v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
  int64x2_t v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

uint64_t EQKitPath::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int64x2_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    CGMutablePathRef MutableCopy = *(const CGPath **)a2;
    if (*(void *)a2) {
      CGMutablePathRef MutableCopy = CGPathCreateMutableCopy(MutableCopy);
    }
    *(void *)a1 = MutableCopy;
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    long long v6 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
  }
  return a1;
}

const __CTFont *EQKitPath::newPathFromCharacterWithFont(EQKitPath *this, CTFontRef font, const __CTFont *a3)
{
  uint64_t v3 = font;
  UniChar characters = (unsigned __int16)this;
  CGGlyph glyphs = -1;
  if (font)
  {
    if (CTFontGetGlyphsForCharacters(font, &characters, &glyphs, 1))
    {
      memset(&v5, 0, sizeof(v5));
      CGAffineTransformMakeScale(&v5, 1.0, -1.0);
      if (CTFontCreatePathForGlyph(v3, glyphs, &v5)) {
        operator new();
      }
    }
    return 0;
  }
  return v3;
}

void sub_2558408A8(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitPath::newPathFromGlyphWithFont(EQKitPath *this, const __CTFont *a2, const __CTFont *a3)
{
  CGGlyph v4 = (unsigned __int16)this;
  memset(&v6, 0, sizeof(v6));
  CGAffineTransformMakeScale(&v6, 1.0, -1.0);
  if (CTFontCreatePathForGlyph(a2, v4, &v6)) {
    operator new();
  }
  return 0;
}

void sub_255840964(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

void EQKitPath::extractPath(EQKitPath *this)
{
  if (!*((unsigned char *)this + 80))
  {
    *((unsigned char *)this + 80) = 1;
    info[0] = 0;
    info[1] = this;
    char v2 = 0;
    CGPathApply(*(CGPathRef *)this, info, (CGPathApplierFunction)EQKitPath::extractorFunction);
  }
}

CGFloat *EQKitPath::computePathBounds(CGFloat *this)
{
  uint64_t v1 = this;
  *((unsigned char *)this + 120) = 1;
  CGRect PathBoundingBox = CGPathGetPathBoundingBox((CGPathRef)*(void *)this);
  v1[11] = PathBoundingBox.origin.x;
  v1[12] = PathBoundingBox.origin.y;
  v1 += 11;
  v1[2] = PathBoundingBox.size.width;
  v1[3] = PathBoundingBox.size.height;
  return v1;
}

BOOL EQKitPath::elementMinMax(EQKitPath *this, unint64_t a2, CGPoint *a3, CGPoint *a4)
{
  EQKitPath::extractPath(this);
  double v8 = *MEMORY[0x263F00148];
  double v9 = *(double *)(MEMORY[0x263F00148] + 8);
  uint64_t v10 = *((void *)this + 4);
  if (a2 >= (*((void *)this + 5) - v10) >> 4) {
    goto LABEL_35;
  }
  uint64_t v11 = *(int *)(v10 + 16 * a2);
  uint64_t v12 = v11 > 3 ? 0 : qword_2558BDB20[v11];
  EQKitPath::subpathContainingElement((unint64_t **)this, a2, (uint64_t)&v30);
  unint64_t v13 = v30 >= a2 ? v31 + v30 : a2;
  unint64_t v14 = v30 >= v13 - 1 ? v31 + v30 : v13 - 1;
  unint64_t v15 = v14 - 1;
  BOOL v16 = v13 != v31 + v30 || v32 == 0;
  unint64_t v17 = v16 ? v13 - 1 : v15;
  if (v17 == 0x7FFFFFFFFFFFFFFFLL || (uint64_t v18 = EQKitPath::endPointIndexForElement(this, v17), v18 == 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t v19 = 0;
  }
  else
  {
    double v20 = (double *)(*((void *)this + 1) + 16 * v18);
    double v8 = *v20;
    double v9 = v20[1];
    uint64_t v19 = 1;
  }
  unint64_t v21 = *(void *)(v10 + 16 * a2 + 8);
  if (v21 >= v21 + v12)
  {
LABEL_35:
    BOOL result = 0;
    double v25 = v8;
    double v24 = v9;
  }
  else
  {
    uint64_t v22 = (double *)(*((void *)this + 1) + 16 * v21 + 8);
    uint64_t v23 = v12;
    double v24 = v9;
    double v25 = v8;
    uint64_t v26 = v19;
    do
    {
      double v28 = *(v22 - 1);
      double v27 = *v22;
      if (v26)
      {
        if (v28 < v25) {
          double v25 = *(v22 - 1);
        }
        if (v27 < v24) {
          double v24 = *v22;
        }
        if (v28 > v8) {
          double v8 = *(v22 - 1);
        }
        if (v27 > v9) {
          double v9 = *v22;
        }
      }
      else
      {
        double v9 = *v22;
        double v8 = *(v22 - 1);
        double v25 = v8;
        double v24 = *v22;
      }
      ++v26;
      v22 += 2;
      --v23;
    }
    while (v23);
    BOOL result = (unint64_t)(v12 + v19) > 1;
  }
  a3->x = v25;
  a3->y = v24;
  a4->x = v8;
  a4->y = v9;
  return result;
}

void EQKitPath::subpathContainingElement(unint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  EQKitPath::extractPath((EQKitPath *)this);
  *(_OWORD *)a3 = xmmword_2558BDAD0;
  *(unsigned char *)(a3 + 16) = 0;
  CGAffineTransform v6 = this[4];
  unint64_t v7 = ((char *)this[5] - (char *)v6) >> 4;
  if (v7 > a2)
  {
    double v9 = this[7];
    double v8 = this[8];
    if (v8 != v9)
    {
      unint64_t v10 = v8 - v9;
      uint64_t v11 = this[7];
      do
      {
        unint64_t v12 = v10 >> 1;
        unint64_t v13 = &v11[v10 >> 1];
        unint64_t v15 = *v13;
        unint64_t v14 = v13 + 1;
        v10 += ~(v10 >> 1);
        if (v15 > a2) {
          unint64_t v10 = v12;
        }
        else {
          uint64_t v11 = v14;
        }
      }
      while (v10);
      if (v11 != v9)
      {
        uint64_t v16 = *(v11 - 1);
        if (v11 != v8) {
          unint64_t v7 = *v11;
        }
        int v17 = v6[2 * v7 - 2];
        *(void *)a3 = v16;
        *(void *)(a3 + 8) = v7 - v16;
        *(unsigned char *)(a3 + 16) = v17 == 4;
      }
    }
  }
}

uint64_t EQKitPath::endPointIndexForElement(EQKitPath *this, unint64_t a2)
{
  EQKitPath::extractPath(this);
  uint64_t v4 = *((void *)this + 4);
  if (a2 >= (*((void *)this + 5) - v4) >> 4) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = *(int *)(v4 + 16 * a2);
  if (v5 > 3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return qword_2558BDB00[v5] + *(void *)(v4 + 16 * a2 + 8);
  }
}

void EQKitPath::quantizeElementEdge(EQKitPath *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  EQKitPath::extractPath(a1);
  uint64_t v10 = *((void *)a1 + 4);
  if (a2 < (*((void *)a1 + 5) - v10) >> 4)
  {
    uint64_t v11 = (int *)(v10 + 16 * a2);
    int v12 = *v11;
    if ((*v11 - 2) < 2)
    {
      EQKitPath::subpathContainingElement((unint64_t **)a1, a2, (uint64_t)&v23);
      if (v23 >= a2) {
        unint64_t v14 = v24 + v23;
      }
      else {
        unint64_t v14 = a2;
      }
      if (v23 >= v14 - 1) {
        unint64_t v15 = v24 + v23;
      }
      else {
        unint64_t v15 = v14 - 1;
      }
      unint64_t v16 = v15 - 1;
      if (v14 != v24 + v23 || v25 == 0) {
        unint64_t v18 = v14 - 1;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL
        || (uint64_t v19 = EQKitPath::endPointIndexForElement(a1, v18), v19 == 0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v20 = 0;
      }
      else
      {
        *(_OWORD *)uint64_t v26 = *(_OWORD *)(*((void *)a1 + 1) + 16 * v19);
        uint64_t v20 = 1;
      }
      uint64_t v21 = *v11;
      if (v21 > 3)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v22 = qword_2558BDB20[v21];
        memcpy(&v26[2 * v20], (const void *)(*((void *)a1 + 1) + 16 * *(void *)(v10 + 16 * a2 + 8)), 16 * v22);
      }
      _quantizeCurve((uint64_t)v26, v22 + v20, a3, a4, a5);
    }
    else if (v12 == 4 || v12 == 1)
    {
      v26[0] = 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      if (EQKitPath::isLineTo((unint64_t **)a1, a2, v26, &v23, 0)) {
        _quantizeLine(a3, a4, a5, *(double *)(*((void *)a1 + 1) + 16 * v26[0]), *(double *)(*((void *)a1 + 1) + 16 * v26[0] + 8), *(double *)(*((void *)a1 + 1) + 16 * v23), *(double *)(*((void *)a1 + 1) + 16 * v23 + 8));
      }
    }
  }
}

BOOL EQKitPath::isLineTo(unint64_t **this, unint64_t a2, uint64_t *a3, void *a4, long long *a5)
{
  if (a5)
  {
    long long v22 = *a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  else
  {
    EQKitPath::subpathContainingElement(this, a2, (uint64_t)&v22);
  }
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  *a4 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v9 = v22;
  if (a2 < (unint64_t)v22 || a2 - (unint64_t)v22 >= *((void *)&v22 + 1)) {
    return 0;
  }
  if (a2 <= (unint64_t)v22) {
    unint64_t v12 = *((void *)&v22 + 1) + v22;
  }
  else {
    unint64_t v12 = a2;
  }
  unint64_t v13 = v12 - 1;
  unint64_t v14 = this[4];
  int v15 = v14[2 * a2];
  if (a2 == (void)v22 && ((int v16 = v14[2 * v13], !v15) ? (v17 = v16 == 4) : (v17 = 0), v17))
  {
    unint64_t v18 = *((void *)&v22 + 1) + a2;
    if (v13 > a2) {
      unint64_t v18 = v13;
    }
    unint64_t v13 = v18 - 1;
  }
  else
  {
    if (a2 + 1 == *((void *)&v22 + 1) + (void)v22 && v15 == 4)
    {
      uint64_t v19 = (EQKitPath *)this;
      goto LABEL_26;
    }
    if (v15 != 1)
    {
      uint64_t v20 = *a3;
      return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  uint64_t v19 = (EQKitPath *)this;
  unint64_t v9 = a2;
LABEL_26:
  *a4 = EQKitPath::endPointIndexForElement(v19, v9);
  uint64_t v20 = EQKitPath::endPointIndexForElement((EQKitPath *)this, v13);
  *a3 = v20;
  return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _quantizeLine(uint64_t result, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  if ((result & 0xFFFFFFFD) != 0) {
    return result;
  }
  int v7 = result & 0xFFFFFFFE;
  uint64_t v8 = *a3;
  unint64_t v9 = (a3[1] - *a3) >> 3;
  if (a5 == a7)
  {
    float v10 = a5 * (double)*(unint64_t *)(a2 + 8);
    uint64_t v11 = (uint64_t)(float)(floorf(v10) - (float)*(uint64_t *)a2);
    goto LABEL_5;
  }
  double v14 = (double)*(unint64_t *)(a2 + 8);
  float v15 = a5 * v14;
  float v16 = (float)*(uint64_t *)a2;
  uint64_t v11 = (uint64_t)(float)(floorf(v15) - v16);
  float v17 = a7 * v14;
  float v18 = floorf(v17);
  uint64_t v19 = (uint64_t)(float)(v18 - v16);
  if (a4 == a6)
  {
    if (v11 <= v19) {
      uint64_t v20 = (uint64_t)(float)(v18 - v16);
    }
    else {
      uint64_t v20 = v11;
    }
    if (v11 >= v19) {
      uint64_t v11 = (uint64_t)(float)(v18 - v16);
    }
    uint64_t v21 = v11 & ~(v11 >> 63);
    int64_t v22 = v9 - 1;
    if (v20 < v22) {
      int64_t v22 = v20;
    }
    if (v21 <= v22)
    {
      if (a6 >= a4) {
        double v23 = a4;
      }
      else {
        double v23 = a6;
      }
      if (a4 < a6) {
        a4 = a6;
      }
      do
      {
        double v24 = *(double *)(v8 + 8 * v21);
        if (v7 == 2)
        {
          if (v24 >= a4) {
            double v25 = *(double *)(v8 + 8 * v21);
          }
          else {
            double v25 = a4;
          }
        }
        else if (v23 >= v24)
        {
          double v25 = *(double *)(v8 + 8 * v21);
        }
        else
        {
          double v25 = v23;
        }
        *(double *)(v8 + 8 * v21) = v25;
      }
      while (v21++ < v22);
    }
  }
  else
  {
    if (v11 == v19)
    {
LABEL_5:
      if (v11 < 0 || v9 <= v11) {
        return result;
      }
      double v12 = *(double *)(v8 + 8 * v11);
      if (v7 == 2)
      {
        if (a4 < a6) {
          a4 = a6;
        }
        BOOL v13 = v12 < a4;
      }
      else
      {
        if (a6 < a4) {
          a4 = a6;
        }
        BOOL v13 = a4 < v12;
      }
      if (!v13) {
        a4 = *(double *)(v8 + 8 * v11);
      }
LABEL_39:
      *(double *)(v8 + 8 * v11) = a4;
      return result;
    }
    if (v11 > v19) {
      double v27 = a4;
    }
    else {
      double v27 = a6;
    }
    if (v11 > v19) {
      double v28 = a5;
    }
    else {
      double v28 = a7;
    }
    if (v11 > v19)
    {
      unint64_t v29 = v19;
    }
    else
    {
      a6 = a4;
      unint64_t v29 = v11;
    }
    if (v11 > v19)
    {
      double v30 = a7;
    }
    else
    {
      uint64_t v11 = v19;
      double v30 = a5;
    }
    double v31 = (v27 - a6) / (v28 - v30);
    unint64_t v32 = v29 + 1;
    a4 = a6 + ((double)(uint64_t)(v29 + 1 + *(void *)a2) / v14 - v30) * v31;
    if ((v29 & 0x8000000000000000) == 0 && v29 < v9)
    {
      double v33 = *(double *)(v8 + 8 * v29);
      if (a4 >= a6) {
        double v34 = a6;
      }
      else {
        double v34 = a4;
      }
      if (v34 >= v33) {
        double v34 = *(double *)(v8 + 8 * v29);
      }
      if (a6 < a4) {
        a6 = a4;
      }
      if (v33 >= a6) {
        a6 = *(double *)(v8 + 8 * v29);
      }
      if (v7 != 2) {
        a6 = v34;
      }
      *(double *)(v8 + 8 * v29) = a6;
    }
    if ((uint64_t)v32 < v11)
    {
      double v35 = *(double *)(a2 + 16);
      do
      {
        double v36 = a4;
        a4 = a4 + v31 * v35;
        if ((v32 & 0x8000000000000000) == 0 && v32 < v9)
        {
          double v37 = *(double *)(v8 + 8 * v32);
          if (a4 >= v36) {
            double v38 = v36;
          }
          else {
            double v38 = a4;
          }
          if (v38 >= v37) {
            double v38 = *(double *)(v8 + 8 * v32);
          }
          if (v36 < a4) {
            double v36 = a4;
          }
          if (v37 >= v36) {
            double v36 = *(double *)(v8 + 8 * v32);
          }
          if (v7 != 2) {
            double v36 = v38;
          }
          *(double *)(v8 + 8 * v32) = v36;
        }
        ++v32;
      }
      while (v11 != v32);
    }
    if ((v11 & 0x8000000000000000) == 0 && v11 < v9)
    {
      double v39 = *(double *)(v8 + 8 * v11);
      if (v27 >= a4) {
        double v40 = a4;
      }
      else {
        double v40 = v27;
      }
      if (v40 >= v39) {
        double v40 = *(double *)(v8 + 8 * v11);
      }
      if (a4 < v27) {
        a4 = v27;
      }
      if (v39 >= a4) {
        a4 = *(double *)(v8 + 8 * v11);
      }
      if (v7 != 2) {
        a4 = v40;
      }
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t _quantizeCurve(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  float64x2_t v8 = *(float64x2_t *)result;
  double v9 = *(double *)(result + 8);
  double v10 = v9;
  double v11 = *(double *)result;
  double v12 = *(double *)result;
  double v13 = v9;
  if (a2 >= 2)
  {
    unint64_t v14 = a2 - 1;
    float v15 = (double *)(result + 24);
    double v13 = *(double *)(result + 8);
    double v12 = *(double *)result;
    double v11 = *(double *)result;
    double v10 = v13;
    do
    {
      double v16 = *(v15 - 1);
      double v17 = *v15;
      if (v16 < v12) {
        double v12 = *(v15 - 1);
      }
      if (v17 < v13) {
        double v13 = *v15;
      }
      if (v11 < v16) {
        double v11 = *(v15 - 1);
      }
      if (v10 < v17) {
        double v10 = *v15;
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  if ((a3 & 0xFFFFFFFD) == 0)
  {
    double v18 = (double)*(unint64_t *)(a4 + 8);
    float v19 = v13 * v18;
    float v20 = (float)*(uint64_t *)a4;
    unint64_t v21 = (uint64_t)(float)(floorf(v19) - v20);
    float v22 = v10 * v18;
    if (v21 == (uint64_t)(float)(floorf(v22) - v20))
    {
      if ((v21 & 0x8000000000000000) == 0)
      {
        uint64_t v23 = *a5;
        if ((a5[1] - *a5) >> 3 > v21)
        {
          double v24 = *(double *)(v23 + 8 * v21);
          if ((a3 & 0xFFFFFFFE) == 2)
          {
            if (v12 >= v11) {
              double v25 = v12;
            }
            else {
              double v25 = v11;
            }
            _NF = v24 < v25;
          }
          else
          {
            if (v11 >= v12) {
              double v25 = v12;
            }
            else {
              double v25 = v11;
            }
            _NF = v25 < v24;
          }
          if (_NF) {
            double v24 = v25;
          }
          *(double *)(v23 + 8 * v21) = v24;
        }
      }
    }
    else if (v11 - v12 <= *(double *)(a4 + 24))
    {
      unint64_t v47 = result + 16 * a2;
      double v48 = *(double *)(v47 - 16);
      double v49 = *(double *)(v47 - 8);
LABEL_37:
      return _quantizeLine(a3, a4, a5, v8.f64[0], v9, v48, v49);
    }
    else
    {
      double v27 = (double *)(result + 16 * a2 - 16);
      uint64_t v28 = 2;
      if (a2 <= 2) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = a2;
      }
      double v30 = (double *)(result + 24);
      do
      {
        if (v29 == v28) {
          goto LABEL_36;
        }
        double v31 = *v27 - v8.f64[0];
        double v32 = *(double *)(result + 16 * a2 - 8) - v9;
        double v33 = fabs(v31 * (v9 - *v30) - (v8.f64[0] - *(v30 - 1)) * v32);
        *(float *)&double v31 = v32 * v32 + v31 * v31;
        v30 += 2;
        ++v28;
      }
      while (v33 / sqrtf(*(float *)&v31) <= *(double *)(a4 + 32));
      if (v28 - 1 >= a2)
      {
LABEL_36:
        double v48 = *v27;
        double v49 = *(double *)(result + 16 * a2 - 8);
        goto LABEL_37;
      }
      if (a2 == 3)
      {
        unint64_t v50 = (const double *)(result + 16);
        float64x2x2_t v66 = vld2q_f64(v50);
        __asm { FMOV            V4.2D, #0.5 }
        int64x2_t v52 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0), (int8x16_t)v66.val[0], 8uLL), v66.val[0]), _Q4);
        int64x2_t v53 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v66.val[1], 8uLL), v66.val[1]), _Q4);
        v66.val[0] = (float64x2_t)vzip2q_s64(v52, v53);
        float64x2_t v60 = *(float64x2_t *)result;
        float64x2_t v61 = (float64x2_t)vzip1q_s64(v52, v53);
        float64x2_t v62 = vmulq_f64(vaddq_f64(v61, v66.val[0]), _Q4);
        float64x2_t v56 = v62;
        float64x2_t v57 = v66.val[0];
        float64x2_t v58 = *(float64x2_t *)(result + 32);
        _quantizeCurve(&v60, 3, a3, a4, a5);
        uint64_t v46 = 3;
      }
      else
      {
        if (a2 != 4) {
          return result;
        }
        uint64_t v34 = 0;
        __asm { FMOV            V1.2D, #0.5 }
        do
        {
          float64x2_t v39 = *(float64x2_t *)(result + v34 * 16 + 16);
          v54[v34++] = vmulq_f64(vaddq_f64(v8, v39), _Q1);
          float64x2_t v8 = v39;
        }
        while (v34 != 3);
        double v40 = v54;
        unsigned __int8 v41 = (const double *)v55;
        int8x16_t v42 = (int8x16_t)vld1q_dup_f64(v40->f64);
        double v40 = (float64x2_t *)((char *)v40 + 8);
        float64x2x2_t v67 = vld2q_f64(v41);
        int8x16_t v43 = (int8x16_t)vld1q_dup_f64(v40->f64);
        int64x2_t v44 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v42, (int8x16_t)v67.val[0], 8uLL), v67.val[0]), _Q1);
        v67.val[0] = vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v43, (int8x16_t)v67.val[1], 8uLL), v67.val[1]), _Q1);
        v67.val[1] = (float64x2_t)vzip2q_s64(v44, (int64x2_t)v67.val[0]);
        float64x2_t v60 = *(float64x2_t *)result;
        float64x2_t v61 = v54[0];
        float64x2_t v62 = (float64x2_t)vzip1q_s64(v44, (int64x2_t)v67.val[0]);
        float64x2_t v63 = vmulq_f64(vaddq_f64(v62, v67.val[1]), _Q1);
        float64x2_t v56 = v63;
        float64x2_t v57 = v67.val[1];
        long long v45 = *(_OWORD *)(result + 48);
        float64x2_t v58 = v55[1];
        long long v59 = v45;
        _quantizeCurve(&v60, 4, a3, a4, a5);
        uint64_t v46 = 4;
      }
      return _quantizeCurve(&v56, v46, a3, a4, a5);
    }
  }
  return result;
}

BOOL EQKitPath::endPointForElement(EQKitPath *a1, unint64_t a2, _OWORD *a3, void *a4)
{
  EQKitPath::extractPath(a1);
  unint64_t v8 = EQKitPath::endPointIndexForElement(a1, a2);
  uint64_t v9 = *((void *)a1 + 1);
  uint64_t v10 = *((void *)a1 + 2);
  double v11 = (void *)((char *)a1 + 8);
  unint64_t v12 = (v10 - v9) >> 4;
  if (v8 < v12)
  {
    if (a4) {
      double v13 = a4;
    }
    else {
      double v13 = v11;
    }
    *a3 = *(_OWORD *)(*v13 + 16 * v8);
  }
  return v8 < v12;
}

unint64_t EQKitPath::findJoinForEdge(void *a1, int a2, _OWORD *a3, void *a4)
{
  EQKitPath::extractPath((EQKitPath *)a1);
  switch(a2)
  {
    case 0:
      unint64_t v8 = a1 + 16;
      goto LABEL_6;
    case 1:
      unint64_t v8 = a1 + 18;
      goto LABEL_6;
    case 2:
      unint64_t v8 = a1 + 17;
      goto LABEL_6;
    case 3:
      unint64_t v8 = a1 + 19;
LABEL_6:
      unint64_t v9 = *v8;
      if (*v8 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_7;
      }
      goto LABEL_48;
    default:
LABEL_7:
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v11 = a1[5] - a1[4];
      if (!v11) {
        return v10;
      }
      unint64_t v12 = 0;
      double v13 = (long long *)MEMORY[0x263F00148];
      unint64_t v14 = v11 >> 4;
      double v16 = *MEMORY[0x263F00148];
      double v15 = *(double *)(MEMORY[0x263F00148] + 8);
      if (v14 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v14;
      }
      unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
  do
  {
    long long v25 = *v13;
    if (!EQKitPath::endPointForElement((EQKitPath *)a1, v12, &v25, 0)) {
      goto LABEL_16;
    }
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
LABEL_15:
      unint64_t v9 = v12;
      double v15 = v19;
      double v16 = v18;
      goto LABEL_16;
    }
    if (a2 == 2)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*(double *)&v25 > v16) {
        goto LABEL_15;
      }
      if (*(double *)&v25 == v16 && *((double *)&v25 + 1) < v15) {
        goto LABEL_15;
      }
    }
    else if (a2 == 1)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) < v15) {
        goto LABEL_15;
      }
      if (*((double *)&v25 + 1) == v15 && *(double *)&v25 < v16) {
        goto LABEL_15;
      }
    }
    else if (a2)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) > v15 || *((double *)&v25 + 1) == v15 && *(double *)&v25 < v16) {
        goto LABEL_15;
      }
    }
    else
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*(double *)&v25 < v16 || *(double *)&v25 == v16 && *((double *)&v25 + 1) < v15) {
        goto LABEL_15;
      }
    }
LABEL_16:
    ++v12;
  }
  while (v17 != v12);
  uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 != 0x7FFFFFFFFFFFFFFFLL)
  {
    switch(a2)
    {
      case 0:
        float v22 = a1 + 16;
        goto LABEL_47;
      case 1:
        float v22 = a1 + 18;
        goto LABEL_47;
      case 2:
        float v22 = a1 + 17;
        goto LABEL_47;
      case 3:
        float v22 = a1 + 19;
LABEL_47:
        *float v22 = v9;
        break;
      default:
        break;
    }
LABEL_48:
    if (a4) {
      uint64_t v23 = a4;
    }
    else {
      uint64_t v23 = a1 + 1;
    }
    EQKitPath::endPointForElement((EQKitPath *)a1, v9, a3, v23);
    return v9;
  }
  return v10;
}

void EQKitPath::appendToCGPath(uint64_t *a1, CGPath *a2, const CGAffineTransform *a3, uint64_t *a4)
{
  EQKitPath::extractPath((EQKitPath *)a1);
  if (!a4) {
    a4 = a1 + 1;
  }
  if (a4[1] - *a4 == a1[2] - a1[1])
  {
    for (uint64_t i = a1[4]; i != a1[5]; i += 16)
    {
      if (*(_DWORD *)i == 4)
      {
        CGPathCloseSubpath(a2);
      }
      else
      {
        uint64_t v9 = *(void *)(i + 8);
        uint64_t v10 = *a4;
        uint64_t v11 = (CGFloat *)(*a4 + 16 * v9);
        switch(*(_DWORD *)i)
        {
          case 0:
            CGPathMoveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
            break;
          case 1:
            CGPathAddLineToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
            break;
          case 2:
            CGPathAddQuadCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3]);
            break;
          case 3:
            CGPathAddCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3], v11[4], v11[5]);
            break;
          default:
            continue;
        }
      }
    }
  }
}

uint64_t EQKitPath::findCurveMirrorParallelWithAxis(EQKitPath *a1, int a2, double *a3)
{
  *a3 = 0.0;
  EQKitPath::extractPath(a1);
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  if (v7 == v6) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x263F00148];
  while (1)
  {
    if (*(_DWORD *)(v6 + v8) != 3) {
      goto LABEL_36;
    }
    uint64_t v11 = v6 + v8;
    uint64_t v12 = *(void *)(v6 + v8 + 8);
    unint64_t v13 = v12 + 1;
    unint64_t v14 = v12 + 2;
    uint64_t v15 = *((void *)a1 + 1);
    unint64_t v16 = (*((void *)a1 + 2) - v15) >> 4;
    uint64_t v17 = (double *)(v16 <= v13 ? v10 : v15 + 16 * v13);
    double v18 = *v17;
    double v19 = v17[1];
    float v20 = (double *)(v16 <= v14 ? v10 : v15 + 16 * v14);
    double v21 = v20[1];
    double v22 = *v20 - v18;
    double v23 = v21 - v19;
    double v24 = a2 == 1 ? v21 - v19 : *v20 - v18;
    if (v24 != 0.0) {
      goto LABEL_36;
    }
    EQKitPath::subpathContainingElement((unint64_t **)a1, v9, (uint64_t)v39);
    unint64_t v25 = v39[0];
    if (v9 + 1 < v39[1] + v39[0]) {
      unint64_t v25 = v9 + 1;
    }
    uint64_t v6 = *((void *)a1 + 4);
    if (*(_DWORD *)(v6 + 16 * v25) == 3)
    {
      unint64_t v26 = *(void *)(v11 + 8) + 2;
      unint64_t v27 = *(void *)(v6 + 16 * v25 + 8);
      uint64_t v28 = *((void *)a1 + 1);
      unint64_t v29 = (*((void *)a1 + 2) - v28) >> 4;
      double v30 = (double *)(v29 <= v26 ? v10 : v28 + 16 * v26);
      double v31 = v30[1];
      double v32 = (double *)(v29 <= v27 ? v10 : v28 + 16 * v27);
      double v33 = v32[1];
      double v34 = *v32 - *v30;
      double v35 = v33 - v31;
      double v36 = a2 == 1 ? v33 - v31 : *v32 - *v30;
      if (v36 == 0.0)
      {
        if (v22 > 0.0 && v34 > 0.0) {
          goto LABEL_40;
        }
        if (v22 < 0.0 && v34 < 0.0)
        {
          double v38 = -1.0;
          if (v22 <= 0.0) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        if (v23 > 0.0 && v35 > 0.0) {
          goto LABEL_40;
        }
        if (v23 < 0.0 && v35 < 0.0) {
          break;
        }
      }
    }
    uint64_t v7 = *((void *)a1 + 5);
LABEL_36:
    ++v9;
    v8 += 16;
    if (v9 >= (v7 - v6) >> 4) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  double v38 = -1.0;
  if (v23 > 0.0) {
LABEL_40:
  }
    double v38 = 1.0;
LABEL_41:
  *a3 = v38;
  return v9;
}

uint64_t EQKitPath::addLineToAfterElement(EQKitPath *this, unint64_t a2)
{
  uint64_t v4 = EQKitPath::endPointIndexForElement(this, a2);
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = (char **)((char *)this + 8);
    uint64_t v6 = *((void *)this + 1);
    uint64_t v8 = *((void *)this + 4);
    long long v36 = *(_OWORD *)(v6 + 16 * v4);
    *((void *)&v35 + 1) = (*((void *)this + 2) - v6) >> 4;
    *(void *)&long long v35 = 1;
    unint64_t v9 = (_OWORD *)*((void *)this + 5);
    uint64_t v10 = (uint64_t)v9 - v8;
    if (a2 + 1 >= ((uint64_t)v9 - v8) >> 4)
    {
      unint64_t v11 = *((void *)this + 6);
      if ((unint64_t)v9 >= v11)
      {
        uint64_t v13 = v10 >> 4;
        unint64_t v14 = (v10 >> 4) + 1;
        if (v14 >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - v8;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        double v18 = &v17[16 * v13];
        double v19 = &v17[16 * v16];
        *(_OWORD *)double v18 = v35;
        uint64_t v12 = v18 + 16;
        double v21 = (char *)*((void *)this + 4);
        float v20 = (char *)*((void *)this + 5);
        if (v20 != v21)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
            v18 -= 16;
            v20 -= 16;
          }
          while (v20 != v21);
          float v20 = (char *)*((void *)this + 4);
        }
        *((void *)this + 4) = v18;
        *((void *)this + 5) = v12;
        *((void *)this + 6) = v19;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v35;
        uint64_t v12 = v9 + 1;
      }
      *((void *)this + 5) = v12;
    }
    else
    {
      std::vector<EQKitPath::PathElement>::insert((uint64_t)this + 32, (char *)(v8 + 16 * (a2 + 1)), (char *)&v35);
    }
    unint64_t v22 = *((void *)this + 3);
    double v23 = (_OWORD *)*((void *)this + 2);
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v25 = ((char *)v23 - *v7) >> 4;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - (void)*v7;
      if (v27 >> 3 > v26) {
        unint64_t v26 = v27 >> 3;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28) {
        unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v28);
      }
      else {
        unint64_t v29 = 0;
      }
      double v30 = &v29[16 * v25];
      double v31 = &v29[16 * v28];
      *(_OWORD *)double v30 = v36;
      double v24 = v30 + 16;
      double v33 = (char *)*((void *)this + 1);
      double v32 = (char *)*((void *)this + 2);
      if (v32 != v33)
      {
        do
        {
          *((_OWORD *)v30 - 1) = *((_OWORD *)v32 - 1);
          v30 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        double v32 = *v7;
      }
      *((void *)this + 1) = v30;
      *((void *)this + 2) = v24;
      *((void *)this + 3) = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *double v23 = v36;
      double v24 = v23 + 1;
    }
    *((void *)this + 2) = v24;
    return *((void *)&v35 + 1);
  }
  return v5;
}

char *std::vector<EQKitPath::PathElement>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    float v20 = &v19[16 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    unint64_t v28 = v20;
    unint64_t v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 3;
        }
        double v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(v8, v22);
        float v20 = &v23[16 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        unint64_t v29 = &v23[16 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 16 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(_OWORD *)float v20 = *(_OWORD *)v3;
    unint64_t v28 = v20 + 16;
    uint64_t v4 = (char *)std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    unint64_t v9 = __src + 16;
    uint64_t v10 = v6 - 16;
    unint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_2558420C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::appendSubpathRect(EQKitPath *this, CGRect a2)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  CGFloat MinX = CGRectGetMinX(a2);
  v113.origin.CGFloat x = x;
  v113.origin.CGFloat y = y;
  v113.size.CGFloat width = width;
  v113.size.CGFloat height = height;
  CGFloat MinY = CGRectGetMinY(v113);
  v114.origin.CGFloat x = x;
  v114.origin.CGFloat y = y;
  v114.size.CGFloat width = width;
  v114.size.CGFloat height = height;
  CGFloat MaxX = CGRectGetMaxX(v114);
  v115.origin.CGFloat x = x;
  v115.origin.CGFloat y = y;
  v115.size.CGFloat width = width;
  v115.size.CGFloat height = height;
  CGFloat v7 = CGRectGetMinY(v115);
  v116.origin.CGFloat x = x;
  v116.origin.CGFloat y = y;
  v116.size.CGFloat width = width;
  v116.size.CGFloat height = height;
  CGFloat v8 = CGRectGetMaxX(v116);
  v117.origin.CGFloat x = x;
  v117.origin.CGFloat y = y;
  v117.size.CGFloat width = width;
  v117.size.CGFloat height = height;
  CGFloat MaxY = CGRectGetMaxY(v117);
  v118.origin.CGFloat x = x;
  v118.origin.CGFloat y = y;
  v118.size.CGFloat width = width;
  v118.size.CGFloat height = height;
  CGFloat v10 = CGRectGetMinX(v118);
  v119.origin.CGFloat x = x;
  v119.origin.CGFloat y = y;
  v119.size.CGFloat width = width;
  v119.size.CGFloat height = height;
  double v11 = CGRectGetMaxY(v119);
  double v12 = v11;
  unint64_t v14 = (char **)((char *)this + 24);
  uint64_t v13 = (char *)*((void *)this + 3);
  uint64_t v16 = (void **)((char *)this + 8);
  uint64_t v15 = (CGFloat *)*((void *)this + 1);
  uint64_t v17 = (CGFloat *)*((void *)this + 2);
  uint64_t v18 = ((char *)v17 - (char *)v15) >> 4;
  unint64_t v19 = v18 + 1;
  if (v17 >= (CGFloat *)v13)
  {
    if (v19 >> 60) {
      goto LABEL_147;
    }
    uint64_t v21 = v13 - (char *)v15;
    uint64_t v22 = v21 >> 3;
    if (v21 >> 3 <= v19) {
      uint64_t v22 = v18 + 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v23);
      uint64_t v15 = (CGFloat *)*((void *)this + 1);
      uint64_t v17 = (CGFloat *)*((void *)this + 2);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[16 * v18];
    uint64_t v13 = &v24[16 * v23];
    *(CGFloat *)uint64_t v25 = v10;
    *((double *)v25 + 1) = v12;
    float v20 = v25 + 16;
    if (v17 != v15)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
        v25 -= 16;
        v17 -= 2;
      }
      while (v17 != v15);
      uint64_t v15 = (CGFloat *)*v16;
    }
    *((void *)this + 1) = v25;
    *((void *)this + 2) = v20;
    *((void *)this + 3) = v13;
    if (v15)
    {
      operator delete(v15);
      uint64_t v13 = *v14;
    }
  }
  else
  {
    *uint64_t v17 = v10;
    v17[1] = v11;
    float v20 = (char *)(v17 + 2);
  }
  *((void *)this + 2) = v20;
  if (v20 >= v13)
  {
    uint64_t v27 = (char *)*v16;
    uint64_t v28 = (v20 - (unsigned char *)*v16) >> 4;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60) {
      goto LABEL_147;
    }
    uint64_t v30 = v13 - v27;
    if (v30 >> 3 > v29) {
      unint64_t v29 = v30 >> 3;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      double v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v31);
      uint64_t v27 = (char *)*((void *)this + 1);
      float v20 = (char *)*((void *)this + 2);
    }
    else
    {
      double v32 = 0;
    }
    double v33 = &v32[16 * v28];
    uint64_t v13 = &v32[16 * v31];
    *(CGFloat *)double v33 = v8;
    *((CGFloat *)v33 + 1) = MaxY;
    unint64_t v26 = v33 + 16;
    if (v20 != v27)
    {
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v20 - 1);
        v33 -= 16;
        v20 -= 16;
      }
      while (v20 != v27);
      uint64_t v27 = (char *)*v16;
    }
    *((void *)this + 1) = v33;
    *((void *)this + 2) = v26;
    *((void *)this + 3) = v13;
    if (v27)
    {
      operator delete(v27);
      uint64_t v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)float v20 = v8;
    *((CGFloat *)v20 + 1) = MaxY;
    unint64_t v26 = v20 + 16;
  }
  *((void *)this + 2) = v26;
  if (v26 >= v13)
  {
    long long v35 = (char *)*v16;
    uint64_t v36 = (v26 - (unsigned char *)*v16) >> 4;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60) {
      goto LABEL_147;
    }
    uint64_t v38 = v13 - v35;
    if (v38 >> 3 > v37) {
      unint64_t v37 = v38 >> 3;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      double v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v39);
      long long v35 = (char *)*((void *)this + 1);
      unint64_t v26 = (char *)*((void *)this + 2);
    }
    else
    {
      double v40 = 0;
    }
    unsigned __int8 v41 = (CGFloat *)&v40[16 * v36];
    uint64_t v13 = &v40[16 * v39];
    *unsigned __int8 v41 = MaxX;
    v41[1] = v7;
    double v34 = v41 + 2;
    if (v26 != v35)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
        v41 -= 2;
        v26 -= 16;
      }
      while (v26 != v35);
      long long v35 = (char *)*v16;
    }
    *((void *)this + 1) = v41;
    *((void *)this + 2) = v34;
    *((void *)this + 3) = v13;
    if (v35)
    {
      operator delete(v35);
      uint64_t v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)unint64_t v26 = MaxX;
    *((CGFloat *)v26 + 1) = v7;
    double v34 = (CGFloat *)(v26 + 16);
  }
  *((void *)this + 2) = v34;
  if (v34 < (CGFloat *)v13)
  {
    CGFloat *v34 = MinX;
    v34[1] = MinY;
    int8x16_t v42 = v34 + 2;
    goto LABEL_65;
  }
  int8x16_t v43 = (char *)*v16;
  uint64_t v44 = ((char *)v34 - (unsigned char *)*v16) >> 4;
  unint64_t v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60) {
LABEL_147:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  uint64_t v46 = v13 - v43;
  if (v46 >> 3 > v45) {
    unint64_t v45 = v46 >> 3;
  }
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v47 = v45;
  }
  if (v47)
  {
    double v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v47);
    int8x16_t v43 = (char *)*((void *)this + 1);
    double v34 = (CGFloat *)*((void *)this + 2);
  }
  else
  {
    double v48 = 0;
  }
  double v49 = (CGFloat *)&v48[16 * v44];
  unint64_t v50 = &v48[16 * v47];
  CGFloat *v49 = MinX;
  v49[1] = MinY;
  int8x16_t v42 = v49 + 2;
  if (v34 != (CGFloat *)v43)
  {
    do
    {
      *((_OWORD *)v49 - 1) = *((_OWORD *)v34 - 1);
      v49 -= 2;
      v34 -= 2;
    }
    while (v34 != (CGFloat *)v43);
    int8x16_t v43 = (char *)*v16;
  }
  *((void *)this + 1) = v49;
  *((void *)this + 2) = v42;
  *((void *)this + 3) = v50;
  if (v43) {
    operator delete(v43);
  }
LABEL_65:
  unint64_t v51 = *((void *)this + 6);
  *((void *)this + 2) = v42;
  int64x2_t v52 = (char **)((char *)this + 32);
  int64x2_t v53 = (void *)*((void *)this + 5);
  if ((unint64_t)v53 >= v51)
  {
    uint64_t v55 = ((char *)v53 - *v52) >> 4;
    unint64_t v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v57 = v51 - (void)*v52;
    if (v57 >> 3 > v56) {
      unint64_t v56 = v57 >> 3;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      long long v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v58);
    }
    else {
      long long v59 = 0;
    }
    float64x2_t v60 = &v59[16 * v55];
    float64x2_t v61 = &v59[16 * v58];
    *(void *)float64x2_t v60 = 0;
    *((void *)v60 + 1) = v18;
    unint64_t v54 = v60 + 16;
    float64x2_t v63 = (char *)*((void *)this + 4);
    float64x2_t v62 = (char *)*((void *)this + 5);
    if (v62 != v63)
    {
      do
      {
        *((_OWORD *)v60 - 1) = *((_OWORD *)v62 - 1);
        v60 -= 16;
        v62 -= 16;
      }
      while (v62 != v63);
      float64x2_t v62 = *v52;
    }
    *((void *)this + 4) = v60;
    *((void *)this + 5) = v54;
    *((void *)this + 6) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *int64x2_t v53 = 0;
    v53[1] = v18;
    unint64_t v54 = v53 + 2;
  }
  *((void *)this + 5) = v54;
  unint64_t v64 = *((void *)this + 6);
  if ((unint64_t)v54 >= v64)
  {
    uint64_t v66 = ((char *)v54 - *v52) >> 4;
    if ((unint64_t)(v66 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v67 = v64 - (void)*v52;
    uint64_t v68 = v67 >> 3;
    if (v67 >> 3 <= (unint64_t)(v66 + 1)) {
      uint64_t v68 = v66 + 1;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v68;
    }
    if (v69) {
      BOOL v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v69);
    }
    else {
      BOOL v70 = 0;
    }
    long long v71 = &v70[16 * v66];
    v72 = &v70[16 * v69];
    *(void *)long long v71 = 1;
    *((void *)v71 + 1) = v19;
    int v65 = v71 + 16;
    v74 = (char *)*((void *)this + 4);
    v73 = (char *)*((void *)this + 5);
    if (v73 != v74)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v73 - 1);
        v71 -= 16;
        v73 -= 16;
      }
      while (v73 != v74);
      v73 = *v52;
    }
    *((void *)this + 4) = v71;
    *((void *)this + 5) = v65;
    *((void *)this + 6) = v72;
    if (v73) {
      operator delete(v73);
    }
  }
  else
  {
    *unint64_t v54 = 1;
    v54[1] = v19;
    int v65 = v54 + 2;
  }
  uint64_t v75 = v18 + 2;
  *((void *)this + 5) = v65;
  unint64_t v76 = *((void *)this + 6);
  if ((unint64_t)v65 >= v76)
  {
    uint64_t v78 = ((char *)v65 - *v52) >> 4;
    if ((unint64_t)(v78 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v79 = v76 - (void)*v52;
    uint64_t v80 = v79 >> 3;
    if (v79 >> 3 <= (unint64_t)(v78 + 1)) {
      uint64_t v80 = v78 + 1;
    }
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v81 = v80;
    }
    if (v81) {
      v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v81);
    }
    else {
      v82 = 0;
    }
    v83 = &v82[16 * v78];
    v84 = &v82[16 * v81];
    *(void *)v83 = 1;
    *((void *)v83 + 1) = v75;
    v77 = v83 + 16;
    v86 = (char *)*((void *)this + 4);
    v85 = (char *)*((void *)this + 5);
    if (v85 != v86)
    {
      do
      {
        *((_OWORD *)v83 - 1) = *((_OWORD *)v85 - 1);
        v83 -= 16;
        v85 -= 16;
      }
      while (v85 != v86);
      v85 = *v52;
    }
    *((void *)this + 4) = v83;
    *((void *)this + 5) = v77;
    *((void *)this + 6) = v84;
    if (v85) {
      operator delete(v85);
    }
  }
  else
  {
    *int v65 = 1;
    v65[1] = v75;
    v77 = v65 + 2;
  }
  uint64_t v87 = v18 + 3;
  *((void *)this + 5) = v77;
  unint64_t v88 = *((void *)this + 6);
  if ((unint64_t)v77 >= v88)
  {
    uint64_t v90 = ((char *)v77 - *v52) >> 4;
    if ((unint64_t)(v90 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v91 = v88 - (void)*v52;
    uint64_t v92 = v91 >> 3;
    if (v91 >> 3 <= (unint64_t)(v90 + 1)) {
      uint64_t v92 = v90 + 1;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v92;
    }
    if (v93) {
      v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v93);
    }
    else {
      v94 = 0;
    }
    v95 = &v94[16 * v90];
    v96 = &v94[16 * v93];
    *(void *)v95 = 1;
    *((void *)v95 + 1) = v87;
    v89 = v95 + 16;
    v98 = (char *)*((void *)this + 4);
    v97 = (char *)*((void *)this + 5);
    if (v97 != v98)
    {
      do
      {
        *((_OWORD *)v95 - 1) = *((_OWORD *)v97 - 1);
        v95 -= 16;
        v97 -= 16;
      }
      while (v97 != v98);
      v97 = *v52;
    }
    *((void *)this + 4) = v95;
    *((void *)this + 5) = v89;
    *((void *)this + 6) = v96;
    if (v97) {
      operator delete(v97);
    }
  }
  else
  {
    void *v77 = 1;
    v77[1] = v87;
    v89 = v77 + 2;
  }
  *((void *)this + 5) = v89;
  unint64_t v99 = *((void *)this + 6);
  if ((unint64_t)v89 < v99)
  {
    _OWORD *v89 = xmmword_2558BDAE0;
    v100 = v89 + 1;
    goto LABEL_145;
  }
  uint64_t v101 = ((char *)v89 - *v52) >> 4;
  if ((unint64_t)(v101 + 1) >> 60) {
LABEL_146:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  uint64_t v102 = v99 - (void)*v52;
  uint64_t v103 = v102 >> 3;
  if (v102 >> 3 <= (unint64_t)(v101 + 1)) {
    uint64_t v103 = v101 + 1;
  }
  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v104 = v103;
  }
  if (v104) {
    v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v104);
  }
  else {
    v105 = 0;
  }
  v106 = &v105[16 * v101];
  v107 = &v105[16 * v104];
  *(_OWORD *)v106 = xmmword_2558BDAE0;
  v100 = v106 + 16;
  v109 = (char *)*((void *)this + 4);
  v108 = (char *)*((void *)this + 5);
  if (v108 != v109)
  {
    do
    {
      *((_OWORD *)v106 - 1) = *((_OWORD *)v108 - 1);
      v106 -= 16;
      v108 -= 16;
    }
    while (v108 != v109);
    v108 = *v52;
  }
  *((void *)this + 4) = v106;
  *((void *)this + 5) = v100;
  *((void *)this + 6) = v107;
  if (v108) {
    operator delete(v108);
  }
LABEL_145:
  *((void *)this + 5) = v100;
}

uint64_t EQKitPath::findStemForEdge@<X0>(unint64_t **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v52[1] = *MEMORY[0x263EF8340];
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_DWORD *)(a3 + 56) = 0;
  uint64_t result = EQKitPath::findJoinForEdge(this, a2, &v49, 0);
  if (result != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v7 = result;
    EQKitPath::subpathContainingElement(this, result, (uint64_t)&v47);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v44 = 0;
    uint64_t result = EQKitPath::isLineTo(this, v7, &v46, &v45, &v47);
    if (result)
    {
      uint64_t v8 = v45;
      uint64_t v9 = v46;
      CGFloat v10 = this[1];
      double v11 = (double *)&v10[2 * v46];
      double v12 = (double *)&v10[2 * v45];
      unsigned __int32 v13 = a2 & 0xFFFFFFFD;
      if ((a2 & 0xFFFFFFFD) == 1) {
        ++v11;
      }
      if (v13 == 1) {
        ++v12;
      }
      if (vabdd_f64(*v11, *v12) >= 0.00100000005)
      {
        *(void *)&long long v50 = v46;
        *((void *)&v50 + 1) = v45;
        unint64_t v26 = v47;
        unint64_t v27 = *((void *)&v47 + 1) + v47;
        if (v7 + 1 < *((void *)&v47 + 1) + (void)v47) {
          unint64_t v28 = v7 + 1;
        }
        else {
          unint64_t v28 = v47;
        }
        if (v28 + 1 < v27) {
          unint64_t v26 = v28 + 1;
        }
        if (v28 != v27 - 1 || v48 == 0) {
          unint64_t v30 = v28;
        }
        else {
          unint64_t v30 = v26;
        }
        uint64_t result = EQKitPath::isLineTo(this, v30, &v44, &v51, &v47);
        if (result && v44 == *((void *)&v50 + 1))
        {
          unint64_t v31 = v47;
          unint64_t v32 = *((void *)&v47 + 1) + v47;
          if (v30 + 1 < *((void *)&v47 + 1) + (void)v47) {
            unint64_t v33 = v30 + 1;
          }
          else {
            unint64_t v33 = v47;
          }
          if (v33 + 1 < v32) {
            unint64_t v31 = v33 + 1;
          }
          BOOL v34 = v33 != v32 - 1 || v48 == 0;
          unint64_t v35 = v34 ? v33 : v31;
          uint64_t result = EQKitPath::isLineTo(this, v35, &v44, v52, &v47);
          if (result)
          {
            if (v44 == v51)
            {
              uint64_t v36 = this[1];
              unint64_t v37 = (double *)&v36[2 * *((void *)&v50 + 1)];
              uint64_t v38 = (double *)&v36[2 * v44];
              if (v13 == 1)
              {
                ++v37;
                ++v38;
              }
              if (vabdd_f64(*v37, *v38) < 0.00100000005) {
                goto LABEL_38;
              }
            }
          }
        }
      }
      else
      {
        *((void *)&v50 + 1) = v46;
        uint64_t v51 = v45;
        if ((unint64_t)v47 >= v7) {
          unint64_t v14 = *((void *)&v47 + 1) + v47;
        }
        else {
          unint64_t v14 = v7;
        }
        if ((unint64_t)v47 >= v14 - 1) {
          unint64_t v15 = *((void *)&v47 + 1) + v47;
        }
        else {
          unint64_t v15 = v14 - 1;
        }
        unint64_t v16 = v15 - 1;
        if (v14 != *((void *)&v47 + 1) + (void)v47 || v48 == 0) {
          unint64_t v18 = v14 - 1;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t result = EQKitPath::isLineTo(this, v18, (uint64_t *)&v50, &v44, &v47);
        if (result) {
          BOOL v19 = v44 == v9;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19)
        {
          unint64_t v20 = v47;
          unint64_t v21 = *((void *)&v47 + 1) + v47;
          if (v7 + 1 < *((void *)&v47 + 1) + (void)v47) {
            unint64_t v22 = v7 + 1;
          }
          else {
            unint64_t v22 = v47;
          }
          if (v22 + 1 < v21) {
            unint64_t v20 = v22 + 1;
          }
          BOOL v23 = v22 != v21 - 1 || v48 == 0;
          unint64_t v24 = v23 ? v22 : v20;
          uint64_t result = EQKitPath::isLineTo(this, v24, &v44, v52, &v47);
          if (result)
          {
            if (v44 == v8)
            {
LABEL_38:
              uint64_t result = EQKitPath::Stem::Stem((uint64_t)v39, a2, (uint64_t)this, &v50);
              if (v39 != (char *)a3)
              {
                *(unsigned char *)a3 = v39[0];
                long long v25 = v41;
                *(_OWORD *)(a3 + 8) = v40;
                *(_OWORD *)(a3 + 24) = v25;
                *(_OWORD *)(a3 + 40) = v42;
                *(_DWORD *)(a3 + 56) = v43;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void EQKitPath::appendToCGPathWithModifiedStem(uint64_t a1, CGPath *a2, double *a3, int a4, uint64_t a5, double a6)
{
  if (a2)
  {
    if (!a5 || a6 == 0.0)
    {
      *(_OWORD *)std::string __p = *MEMORY[0x263F00148];
      if (EQKitPath::findJoinForEdge((void *)a1, a4, __p, 0) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, *a3 - *(double *)__p, a3[1] - *(double *)&__p[1]);
        EQKitPath::appendToCGPath((uint64_t *)a1, a2, &v14, 0);
        int v13 = a4 > 2 ? 1 : dword_2558BDB40[a4];
        if (EQKitPath::findJoinForEdge((void *)a1, v13, __p, 0)) {
          *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *(double *)&__p[1]), *(float64x2_t *)&v14.a, *(double *)__p));
        }
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v17 = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(__p, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
      EQKitPath::Stem::adjustStemPoints(a5, a1, __p, a6);
      long long v15 = *MEMORY[0x263F00148];
      if (EQKitPath::findJoinForEdge((void *)a1, a4, &v15, __p) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, *a3 - *(double *)&v15, a3[1] - *((double *)&v15 + 1));
        EQKitPath::appendToCGPath((uint64_t *)a1, a2, &v14, (uint64_t *)__p);
        if (a4 > 2) {
          int v12 = 1;
        }
        else {
          int v12 = dword_2558BDB40[a4];
        }
        if (EQKitPath::findJoinForEdge((void *)a1, v12, &v15, __p)) {
          *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *((double *)&v15 + 1)), *(float64x2_t *)&v14.a, *(double *)&v15));
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_255842E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitPath::applyModifiedStemToPoints(uint64_t result, uint64_t a2, void *a3, double a4)
{
  if (a2)
  {
    if (a4 != 0.0) {
      return EQKitPath::Stem::adjustStemPoints(a2, result, a3, a4);
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_255842F40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_255843000(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  CGAffineTransform v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  CGAffineTransform v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

void *std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  CGAffineTransform v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void EQKitPath::EQKitPath(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 16) = v6;
    operator delete(v6);
  }
}

uint64_t EQKitCompositeGlyph::EQKitCompositeGlyph(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)a1 = &unk_27045A680;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 20) = *(void *)(a4 + 8);
  CFStringRef v5 = *(const __CFString **)a4;
  if (*(void *)a4) {
    CFStringRef v5 = (const __CFString *)CTFontCreateWithName(v5, *(CGFloat *)(a2 + 16), 0);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void EQKitCompositeGlyph::~EQKitCompositeGlyph(EQKitCompositeGlyph *this)
{
  *(void *)this = &unk_27045A680;
  EQKitCompositeGlyph::clearCache(this);
  char v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
}

{
  uint64_t vars8;

  EQKitCompositeGlyph::~EQKitCompositeGlyph(this);

  JUMPOUT(0x25A290040);
}

uint64_t EQKitCompositeGlyph::clearCache(EQKitCompositeGlyph *this)
{
  char v2 = (EQKitPath *)*((void *)this + 4);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x25A290040]();
    *((void *)this + 4) = 0;
  }
  uint64_t v3 = (EQKitPath *)*((void *)this + 5);
  if (v3)
  {
    EQKitPath::~EQKitPath(v3);
    MEMORY[0x25A290040]();
    *((void *)this + 5) = 0;
  }
  uint64_t v4 = (EQKitPath *)*((void *)this + 6);
  if (v4)
  {
    EQKitPath::~EQKitPath(v4);
    MEMORY[0x25A290040]();
    *((void *)this + 6) = 0;
  }
  CFStringRef v5 = (EQKitPath *)*((void *)this + 7);
  if (v5)
  {
    EQKitPath::~EQKitPath(v5);
    MEMORY[0x25A290040]();
    *((void *)this + 7) = 0;
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6)
  {
    MEMORY[0x25A290040](v6, 0x1000C401B087D88);
    *((void *)this + 8) = 0;
  }
  uint64_t v7 = *((void *)this + 9);
  if (v7)
  {
    MEMORY[0x25A290040](v7, 0x1000C401B087D88);
    *((void *)this + 9) = 0;
  }
  uint64_t v8 = *((void *)this + 10);
  if (v8)
  {
    MEMORY[0x25A290040](v8, 0x1000C401B087D88);
    *((void *)this + 10) = 0;
  }
  uint64_t v9 = *((void *)this + 11);
  if (v9)
  {
    MEMORY[0x25A290040](v9, 0x1000C401B087D88);
    *((void *)this + 11) = 0;
  }
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    uint64_t result = MEMORY[0x25A290040](result, 0x1000C401B087D88);
    *((void *)this + 12) = 0;
  }
  return result;
}

uint64_t EQKitCompositeGlyph::upperPath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 4);
  int v4 = *((unsigned __int16 *)this + 10);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_2558436B8(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 5);
  int v4 = *((unsigned __int16 *)this + 11);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_255843790(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::middlePath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 6);
  int v4 = *((unsigned __int16 *)this + 12);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_255843868(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::extenderPath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 7);
  int v4 = *((unsigned __int16 *)this + 13);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_255843940(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::upperPathLowerStem(EQKitCompositeGlyph *this)
{
  if (*((unsigned char *)this + 104)) {
    return *((void *)this + 8);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::upperPath(this);
  if (*((_DWORD *)this + 4) == 2) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  uint64_t result = _createStem(v2, v3);
  *((void *)this + 8) = result;
  *((unsigned char *)this + 104) |= 1u;
  return result;
}

uint64_t _createStem(unint64_t **a1, int a2)
{
  if (a1)
  {
    EQKitPath::findStemForEdge(a1, a2, (uint64_t)v3);
    if (v3[0]) {
      operator new();
    }
  }
  return 0;
}

void sub_255843A28(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1000C401B087D88);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPathUpperStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 2) != 0) {
    return *((void *)this + 9);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::lowerPath(this);
  uint64_t result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((void *)this + 9) = result;
  *((unsigned char *)this + 104) |= 2u;
  return result;
}

uint64_t EQKitCompositeGlyph::middlePathUpperStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 4) != 0) {
    return *((void *)this + 10);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  uint64_t result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((void *)this + 10) = result;
  *((unsigned char *)this + 104) |= 4u;
  return result;
}

uint64_t EQKitCompositeGlyph::middlePathLowerStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 8) != 0) {
    return *((void *)this + 11);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  if (*((_DWORD *)this + 4) == 2) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  uint64_t result = _createStem(v2, v3);
  *((void *)this + 11) = result;
  *((unsigned char *)this + 104) |= 8u;
  return result;
}

uint64_t EQKitCompositeGlyph::extenderPathStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 0x10) != 0) {
    return *((void *)this + 12);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::extenderPath(this);
  if (*((_DWORD *)this + 4) == 2) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  uint64_t result = _createStem(v2, v3);
  *((void *)this + 12) = result;
  *((unsigned char *)this + 104) |= 0x10u;
  return result;
}

CGPath *EQKitCompositeGlyph::createPathWithLength(EQKitCompositeGlyph *this, double a2, CGSize *a3)
{
  Mutable = CGPathCreateMutable();
  EQKitCompositeGlyph::compose(this, a2, Mutable);
  EQKitPath::EQKitPath((EQKitPath *)v12, Mutable);
  if (v13[32]) {
    CGAffineTransform v7 = (CGSize *)v13;
  }
  else {
    CGAffineTransform v7 = (CGSize *)EQKitPath::computePathBounds(v12);
  }
  double width = v7->width;
  double height = v7->height;
  *a3 = v7[1];
  if (width != 0.0 || height != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v11, 0, sizeof(v11));
    CGAffineTransformMakeTranslation(&v11, -width, -height);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v12, Mutable, &v11, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v12);
  return Mutable;
}

void sub_255843C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

double EQKitCompositeGlyph::compose(EQKitCompositeGlyph *this, double a2, CGPath *a3)
{
  uint64_t v6 = EQKitCompositeGlyph::upperPath(this);
  uint64_t v7 = EQKitCompositeGlyph::lowerPath(this);
  uint64_t v8 = EQKitCompositeGlyph::middlePath(this);
  uint64_t v9 = EQKitCompositeGlyph::extenderPath(this);
  uint64_t v10 = EQKitCompositeGlyph::upperPathLowerStem(this);
  uint64_t v11 = EQKitCompositeGlyph::lowerPathUpperStem(this);
  uint64_t v12 = EQKitCompositeGlyph::middlePathUpperStem(this);
  uint64_t v79 = EQKitCompositeGlyph::middlePathLowerStem(this);
  uint64_t v13 = EQKitCompositeGlyph::extenderPathStem(this);
  double v14 = a2;
  if (!(v6 | v7)) {
    return a2 - v14;
  }
  uint64_t v15 = v13;
  double v16 = 0.0;
  double v17 = 0.0;
  if (v6)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v6 + 120)) {
        unint64_t v18 = (CGRect *)(v6 + 88);
      }
      else {
        unint64_t v18 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      }
      double Height = CGRectGetHeight(*v18);
    }
    else
    {
      if (*(unsigned char *)(v6 + 120)) {
        BOOL v19 = (CGRect *)(v6 + 88);
      }
      else {
        BOOL v19 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      }
      double Height = CGRectGetWidth(*v19);
    }
    double v17 = Height;
  }
  if (v7)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v7 + 120)) {
        unint64_t v21 = (CGRect *)(v7 + 88);
      }
      else {
        unint64_t v21 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      }
      double Width = CGRectGetHeight(*v21);
    }
    else
    {
      if (*(unsigned char *)(v7 + 120)) {
        unint64_t v22 = (CGRect *)(v7 + 88);
      }
      else {
        unint64_t v22 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      }
      double Width = CGRectGetWidth(*v22);
    }
    double v16 = Width;
  }
  double v14 = a2 - (v17 + v16);
  if (v8)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v8 + 120)) {
        unint64_t v24 = (CGRect *)(v8 + 88);
      }
      else {
        unint64_t v24 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      }
      double v26 = CGRectGetHeight(*v24);
    }
    else
    {
      if (*(unsigned char *)(v8 + 120)) {
        long long v25 = (CGRect *)(v8 + 88);
      }
      else {
        long long v25 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      }
      double v26 = CGRectGetWidth(*v25);
    }
    double v14 = v14 - v26;
  }
  uint64_t v27 = v79;
  double v28 = 0.0;
  double v29 = 0.0;
  double v30 = 0.0;
  double v31 = 0.0;
  if (v14 < 0.0)
  {
    double v32 = 0.0;
    if (v10) {
      double v32 = *(double *)(v10 + 40);
    }
    if (v12) {
      double v31 = *(double *)(v12 + 40);
    }
    double v33 = 0.0;
    double v34 = 0.0;
    if (v11) {
      double v34 = *(double *)(v11 + 40);
    }
    double v35 = v32 + v31;
    if (v79) {
      double v33 = *(double *)(v79 + 40);
    }
    double v36 = v34 + v33;
    double v37 = fabs(v14);
    if (v37 >= v35) {
      double v38 = v35;
    }
    else {
      double v38 = v37;
    }
    double v39 = v37 - v38;
    if (v39 >= v36) {
      double v39 = v36;
    }
    if (v35 >= v36) {
      double v35 = v36;
    }
    double v40 = fabs(v14 * 0.5);
    if (v40 < v35) {
      double v35 = v40;
    }
    if (v8) {
      double v41 = v35;
    }
    else {
      double v41 = v39;
    }
    if (v8) {
      double v42 = v35;
    }
    else {
      double v42 = v38;
    }
    double v43 = 0.0;
    double v31 = 0.0;
    if (v10) {
      double v31 = *(double *)(v10 + 40);
    }
    if (v31 >= v42) {
      double v31 = v42;
    }
    if (v11) {
      double v43 = *(double *)(v11 + 40);
    }
    double v44 = v42 - v31;
    if (v43 >= v41) {
      double v30 = v41;
    }
    else {
      double v30 = v43;
    }
    double v45 = 0.0;
    double v46 = 0.0;
    if (v12) {
      double v46 = *(double *)(v12 + 40);
    }
    double v47 = v41 - v30;
    if (v46 >= v44) {
      double v29 = v44;
    }
    else {
      double v29 = v46;
    }
    if (v79) {
      double v45 = *(double *)(v79 + 40);
    }
    if (v45 >= v47) {
      double v28 = v47;
    }
    else {
      double v28 = v45;
    }
  }
  uint64_t v78 = v11;
  if (v9)
  {
    double v48 = fmax(v14, 0.0);
  }
  else
  {
    double v48 = 0.0;
    if (v14 > 0.0)
    {
      if (v10 && v11)
      {
        double v31 = v31 - v14 * 0.5;
        double v30 = v30 - v14 * 0.5;
      }
      else
      {
        if (v11) {
          double v49 = v14;
        }
        else {
          double v49 = 0.0;
        }
        double v50 = v30 - v49;
        if (v10) {
          double v31 = v31 - v14;
        }
        else {
          double v30 = v50;
        }
      }
    }
  }
  uint64_t v51 = (_OWORD *)MEMORY[0x263F00148];
  float64x2_t v85 = *(float64x2_t *)MEMORY[0x263F00148];
  if (v6)
  {
    double v14 = v14 + v31;
    if (a3)
    {
      EQKitPath::appendToCGPathWithModifiedStem(v6, a3, v85.f64, *((_DWORD *)this + 4) == 2, v10, -v31);
      uint64_t v27 = v79;
    }
  }
  BOOL v54 = v48 > 0.0 && v9 != 0 && v15 != 0;
  if (v8)
  {
    if (v54)
    {
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(unsigned char *)(v9 + 120)) {
          uint64_t v55 = (CGRect *)(v9 + 88);
        }
        else {
          uint64_t v55 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v61 = CGRectGetHeight(*v55);
      }
      else
      {
        if (*(unsigned char *)(v9 + 120)) {
          long long v59 = (CGRect *)(v9 + 88);
        }
        else {
          long long v59 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v61 = CGRectGetWidth(*v59);
      }
      double v62 = v61 + v48 * -0.5;
      if (v62 >= *(double *)(v15 + 40)) {
        double v63 = *(double *)(v15 + 40);
      }
      else {
        double v63 = v62;
      }
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(unsigned char *)(v9 + 120)) {
          unint64_t v64 = (CGRect *)(v9 + 88);
        }
        else {
          unint64_t v64 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v66 = CGRectGetHeight(*v64);
      }
      else
      {
        if (*(unsigned char *)(v9 + 120)) {
          int v65 = (CGRect *)(v9 + 88);
        }
        else {
          int v65 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v66 = CGRectGetWidth(*v65);
      }
      double v14 = v63 + v14 - v66;
      if (a3) {
        EQKitPath::appendToCGPathWithModifiedStem(v9, a3, v85.f64, *((_DWORD *)this + 4) == 2, v15, -v63);
      }
      uint64_t v27 = v79;
    }
    if ((v29 == 0.0 || !v12) && (v28 == 0.0 || !v27))
    {
      uint64_t v57 = v78;
      if (a3) {
        EQKitPath::appendToCGPathWithModifiedStem(v8, a3, v85.f64, *((_DWORD *)this + 4) == 2, 0, 0.0);
      }
    }
    else
    {
      if (a3)
      {
        EQKitPath::extractPath((EQKitPath *)v8);
        v83 = 0;
        uint64_t v84 = 0;
        std::string __p = 0;
        std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&__p, *(const void **)(v8 + 8), *(void *)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
        EQKitPath::applyModifiedStemToPoints(v8, v12, &__p, -v29);
        EQKitPath::applyModifiedStemToPoints(v8, v79, &__p, -v28);
        *(_OWORD *)unint64_t v81 = *v51;
        EQKitPath::findJoinForEdge((void *)v8, *((_DWORD *)this + 4) == 2, v81, &__p);
        memset(&v80, 0, sizeof(v80));
        CGAffineTransformMakeTranslation(&v80, v85.f64[0] - v81[0], v85.f64[1] - v81[1]);
        EQKitPath::appendToCGPath((uint64_t *)v8, a3, &v80, (uint64_t *)&__p);
        int v67 = *((_DWORD *)this + 4) == 2 ? 3 : 2;
        EQKitPath::findJoinForEdge((void *)v8, v67, &v85, &__p);
        float64x2_t v85 = vaddq_f64(*(float64x2_t *)&v80.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v80.c, v85.f64[1]), *(float64x2_t *)&v80.a, v85.f64[0]));
        if (__p)
        {
          v83 = __p;
          operator delete(__p);
        }
      }
      double v14 = v28 + v29 + v14;
      uint64_t v57 = v78;
    }
    if (!v54) {
      goto LABEL_178;
    }
    unint64_t v56 = (_DWORD *)((char *)this + 16);
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v9 + 120)) {
        uint64_t v68 = (CGRect *)(v9 + 88);
      }
      else {
        uint64_t v68 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v70 = CGRectGetHeight(*v68);
    }
    else
    {
      if (*(unsigned char *)(v9 + 120)) {
        unint64_t v69 = (CGRect *)(v9 + 88);
      }
      else {
        unint64_t v69 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v70 = CGRectGetWidth(*v69);
    }
    double v71 = v70 + v48 * -0.5;
    goto LABEL_164;
  }
  if (v54)
  {
    unint64_t v56 = (_DWORD *)((char *)this + 16);
    uint64_t v57 = v78;
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v9 + 120)) {
        unint64_t v58 = (CGRect *)(v9 + 88);
      }
      else {
        unint64_t v58 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v72 = CGRectGetHeight(*v58);
    }
    else
    {
      if (*(unsigned char *)(v9 + 120)) {
        float64x2_t v60 = (CGRect *)(v9 + 88);
      }
      else {
        float64x2_t v60 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v72 = CGRectGetWidth(*v60);
    }
    double v71 = v72 - v48;
LABEL_164:
    if (v71 >= *(double *)(v15 + 40)) {
      double v73 = *(double *)(v15 + 40);
    }
    else {
      double v73 = v71;
    }
    if (*v56 == 2)
    {
      if (*(unsigned char *)(v9 + 120)) {
        v74 = (CGRect *)(v9 + 88);
      }
      else {
        v74 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v76 = CGRectGetHeight(*v74);
    }
    else
    {
      if (*(unsigned char *)(v9 + 120)) {
        uint64_t v75 = (CGRect *)(v9 + 88);
      }
      else {
        uint64_t v75 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v76 = CGRectGetWidth(*v75);
    }
    double v14 = v73 + v14 - v76;
    if (a3) {
      EQKitPath::appendToCGPathWithModifiedStem(v9, a3, v85.f64, *v56 == 2, v15, -v73);
    }
    goto LABEL_178;
  }
  uint64_t v57 = v78;
LABEL_178:
  if (v7)
  {
    double v14 = v30 + v14;
    if (a3) {
      EQKitPath::appendToCGPathWithModifiedStem(v7, a3, v85.f64, *((_DWORD *)this + 4) == 2, v57, -v30);
    }
  }
  return a2 - v14;
}

void sub_255844438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL EQKit::Unicode::isPseudoScript(EQKit::Unicode *this)
{
  unsigned int v1 = this;
  {
    std::set<unsigned int>::set[abi:ne180100]<unsigned int const*>((uint64_t)&EQKit::Unicode::isPseudoScript::sPseudoScriptSet, sPseudoScriptData, dword_2558BDBEC);
  }
  uint64_t v2 = qword_269EFE368;
  if (!qword_269EFE368) {
    return 0;
  }
  int v3 = &qword_269EFE368;
  do
  {
    unsigned int v4 = *(_DWORD *)(v2 + 28);
    BOOL v5 = v4 >= v1;
    if (v4 >= v1) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      int v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  return v3 != &qword_269EFE368 && *((_DWORD *)v3 + 7) <= v1;
}

void sub_255844524(_Unwind_Exception *a1)
{
}

uint64_t EQKit::Unicode::variationSelector(EQKit::Unicode *this)
{
  if ((this - 917760) >= 0xF0) {
    unsigned int v1 = 0;
  }
  else {
    unsigned int v1 = this - 917743;
  }
  if (this >> 4 == 4064) {
    return (this - 65023);
  }
  else {
    return v1;
  }
}

uint64_t EQKit::Unicode::lookupChar(uint64_t this, uint64_t a2, const EQKit::Script::Info *a3)
{
  switch(this)
  {
    case '\'':
      if (!*(_DWORD *)(a2 + 24)) {
        return 8242;
      }
      break;
    case '*':
      if (!*(_DWORD *)(a2 + 24)) {
        return 8727;
      }
      break;
    case '-':
      if (*(_DWORD *)(a2 + 24) == 1) {
        return 8208;
      }
      else {
        return 8722;
      }
  }
  unsigned int v3 = this - 65;
  if ((this - 65) < 0x1A || (this - 97) <= 0x19)
  {
    switch(*(_DWORD *)(a2 + 12))
    {
      case 2:
        if (v3 >= 0x1A) {
          int v5 = 119834;
        }
        else {
          int v5 = 119808;
        }
        if (!*(_DWORD *)(a2 + 24)) {
          goto LABEL_53;
        }
        return this;
      case 3:
        int v10 = *(_DWORD *)(a2 + 24);
        int v5 = 119860;
        int v11 = 78;
        goto LABEL_37;
      case 4:
        int v10 = *(_DWORD *)(a2 + 24);
        int v5 = 119912;
        int v11 = 130;
LABEL_37:
        if (v3 >= 0x1A) {
          int v5 = v11 | 0x1D400;
        }
        if (v10) {
          return this;
        }
        goto LABEL_53;
      case 5:
        int v5 = 120120;
        int v12 = 338;
        goto LABEL_51;
      case 6:
        int v5 = 120172;
        int v12 = 390;
        goto LABEL_51;
      case 7:
        int v5 = 119964;
        int v12 = 182;
        goto LABEL_51;
      case 8:
        int v5 = 120016;
        int v12 = 234;
        goto LABEL_51;
      case 9:
        int v5 = 120068;
        int v12 = 286;
        goto LABEL_51;
      case 0xA:
        int v5 = 120224;
        int v12 = 442;
        goto LABEL_51;
      case 0xB:
        int v5 = 120276;
        int v12 = 494;
        goto LABEL_51;
      case 0xC:
        int v5 = 120328;
        int v12 = 546;
        goto LABEL_51;
      case 0xD:
        int v5 = 120380;
        int v12 = 598;
        goto LABEL_51;
      case 0xE:
        int v5 = 120432;
        int v12 = 650;
LABEL_51:
        if (v3 >= 0x1A) {
          int v5 = v12 | 0x1D400;
        }
LABEL_53:
        BOOL v13 = v3 >= 0x1A;
        int v14 = -97;
        int v15 = -65;
LABEL_61:
        if (!v13) {
          int v14 = v15;
        }
        this = fixOutOfSequenceUnicodeChar((v14 + this + v5));
        break;
      default:
        return this;
    }
  }
  else if ((this - 48) > 9)
  {
    unsigned int v6 = this - 913;
    int v7 = *(_DWORD *)(a2 + 12);
    if ((this - 913) < 0x19 || (this - 945) <= 0x18)
    {
      switch(v7)
      {
        case 2:
          int v5 = 120488;
          int v9 = 706;
          goto LABEL_58;
        case 3:
          int v5 = 120546;
          int v9 = 764;
          goto LABEL_58;
        case 4:
          int v5 = 120604;
          int v9 = 822;
          goto LABEL_58;
        case 11:
          int v5 = 120662;
          int v9 = 880;
          goto LABEL_58;
        case 13:
          int v5 = 120720;
          int v9 = 938;
LABEL_58:
          if (v6 >= 0x19) {
            int v5 = v9 | 0x1D400;
          }
          BOOL v13 = v6 >= 0x19;
          int v14 = -945;
          int v15 = -913;
          goto LABEL_61;
        default:
          return this;
      }
    }
    if (this == 567) {
      unsigned int v8 = 120485;
    }
    else {
      unsigned int v8 = 0;
    }
    if (this == 305) {
      unsigned int v8 = 120484;
    }
    if (v7 == 3) {
      return v8;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a2 + 12) - 2;
    if (v4 <= 0xC && ((0x1F09u >> v4) & 1) != 0) {
      return dword_2558BDBEC[v4] + this - 48;
    }
  }
  return this;
}

uint64_t fixOutOfSequenceUnicodeChar(uint64_t result)
{
  if ((int)result > 120069)
  {
    if ((int)result > 120121)
    {
      switch((int)result)
      {
        case 120127:
          uint64_t result = 8461;
          break;
        case 120128:
        case 120129:
        case 120130:
        case 120131:
        case 120132:
        case 120134:
          return result;
        case 120133:
          uint64_t result = 8469;
          break;
        case 120135:
          uint64_t result = 8473;
          break;
        case 120136:
          uint64_t result = 8474;
          break;
        case 120137:
          uint64_t result = 8477;
          break;
        default:
          if (result == 120122)
          {
            uint64_t result = 8450;
          }
          else if (result == 120145)
          {
            uint64_t result = 8484;
          }
          break;
      }
    }
    else if ((int)result <= 120075)
    {
      if (result == 120070)
      {
        return 8493;
      }
      else if (result == 120075)
      {
        return 8460;
      }
    }
    else
    {
      switch(result)
      {
        case 0x1D50C:
          return 8465;
        case 0x1D515:
          return 8476;
        case 0x1D51D:
          return 8488;
      }
    }
  }
  else if ((int)result > 119993)
  {
    switch(result)
    {
      case 0x1D4BA:
        return 8495;
      case 0x1D4BC:
        return 8458;
      case 0x1D4C4:
        return 8500;
    }
  }
  else
  {
    switch((int)result)
    {
      case 119965:
        uint64_t result = 8492;
        break;
      case 119966:
      case 119967:
      case 119970:
      case 119973:
      case 119974:
      case 119977:
      case 119978:
      case 119979:
      case 119980:
        return result;
      case 119968:
        uint64_t result = 8496;
        break;
      case 119969:
        uint64_t result = 8497;
        break;
      case 119971:
        uint64_t result = 8459;
        break;
      case 119972:
        uint64_t result = 8464;
        break;
      case 119975:
        uint64_t result = 8466;
        break;
      case 119976:
        uint64_t result = 8499;
        break;
      case 119981:
        uint64_t result = 8475;
        break;
      default:
        if (result == 119893) {
          uint64_t result = 8462;
        }
        break;
    }
  }
  return result;
}

double EQKit::Unicode::emSize(EQKit::Unicode *this)
{
  double result = 0.5;
  switch((int)this)
  {
    case 8192:
    case 8194:
      return result;
    case 8193:
    case 8195:
      double result = 1.0;
      break;
    case 8196:
      double result = 0.33333333;
      break;
    case 8197:
      double result = 0.25;
      break;
    case 8198:
    case 8201:
      double result = 0.16666666;
      break;
    case 8199:
    case 8200:
      goto LABEL_6;
    case 8202:
      double result = 0.08333333;
      break;
    default:
      if (this == 8287) {
        double result = 0.22222222;
      }
      else {
LABEL_6:
      }
        double result = 0.0;
      break;
  }
  return result;
}

uint64_t std::set<unsigned int>::set[abi:ne180100]<unsigned int const*>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unsigned int v6 = a2;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255844CC8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unsigned int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      int v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        int v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t EQKit::StemStretch::Config::Entry::Entry(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = *(unsigned char *)(this + 16) & 0xF0 | 1;
  return this;
}

uint64_t EQKit::StemStretch::Config::Entry::fromDictionary(EQKit::StemStretch::Config::Entry *this, NSDictionary *a2, EQKit::StemStretch::Config::Entry *a3)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  std::string __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v5 = _stringForKey(this, @"analyzeMethod", &__p);
  if (v5)
  {
    if (v28 >= 0) {
      uint64_t v6 = HIBYTE(v28);
    }
    else {
      uint64_t v6 = v27;
    }
    if (v6 == 13)
    {
      if (v28 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (!memcmp(p_p, "ParallelStems", 0xDuLL))
      {
        char v11 = (uint64_t)a2[2].super.isa & 0xFC | 1;
        goto LABEL_22;
      }
    }
    else if (v6 == 11)
    {
      unsigned int v7 = (uint64_t *)&__p;
      if (v28 < 0) {
        unsigned int v7 = (uint64_t *)__p;
      }
      uint64_t v8 = *v7;
      uint64_t v9 = *(uint64_t *)((char *)v7 + 3);
      if (v8 == 0x7543726F7272694DLL && v9 == 0x6576727543726F72)
      {
        char v11 = (uint64_t)a2[2].super.isa & 0xFC | 2;
LABEL_22:
        LOBYTE(a2[2].super.isa) = v11;
        goto LABEL_23;
      }
    }
    char v11 = (uint64_t)a2[2].super.isa & 0xFC;
    goto LABEL_22;
  }
LABEL_23:
  if (_stringForKey(this, @"minStemLength", &__p))
  {
    EQKitLength::EQKitLength(&v24, &__p, 0);
    LODWORD(a2->super.isa) = v24;
    a2[1].super.Class isa = v25;
    uint64_t v5 = 1;
  }
  int v13 = _stringForKey(this, @"axis", &__p);
  char v14 = HIBYTE(v28);
  if (!v13) {
    goto LABEL_52;
  }
  if (v28 >= 0) {
    uint64_t v15 = HIBYTE(v28);
  }
  else {
    uint64_t v15 = v27;
  }
  switch(v15)
  {
    case 4:
      if (v28 >= 0) {
        unint64_t v21 = &__p;
      }
      else {
        unint64_t v21 = __p;
      }
      if (memcmp(v21, "none", 4uLL)) {
        goto LABEL_51;
      }
      char v20 = LOBYTE(a2[2].super.isa) | 0xC;
      break;
    case 8:
      if (v28 >= 0) {
        unsigned int v22 = &__p;
      }
      else {
        unsigned int v22 = __p;
      }
      if (memcmp(v22, "vertical", 8uLL)) {
        goto LABEL_51;
      }
      char v20 = (uint64_t)a2[2].super.isa & 0xF3 | 8;
      break;
    case 10:
      uint64_t v16 = (unsigned __int16 *)&__p;
      if (v28 < 0) {
        uint64_t v16 = (unsigned __int16 *)__p;
      }
      uint64_t v17 = *(void *)v16;
      int v18 = v16[4];
      if (v17 != 0x746E6F7A69726F68 || v18 != 27745) {
        goto LABEL_51;
      }
      char v20 = (uint64_t)a2[2].super.isa & 0xF3 | 4;
      break;
    default:
      goto LABEL_51;
  }
  LOBYTE(a2[2].super.isa) = v20;
LABEL_51:
  uint64_t v5 = 1;
LABEL_52:
  if (v14 < 0) {
    operator delete(__p);
  }
  return v5;
}

void sub_2558451A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _stringForKey(void *a1, uint64_t a2, void **a3)
{
  unsigned int v4 = (void *)[a1 objectForKey:a2];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)[v4 UTF8String]);
    if (*((char *)a3 + 23) < 0) {
      operator delete(*a3);
    }
    *(_OWORD *)a3 = v7;
    a3[2] = v8;
  }
  else
  {
    if (*((char *)a3 + 23) < 0)
    {
      a3[1] = 0;
      a3 = (void **)*a3;
    }
    else
    {
      *((unsigned char *)a3 + 23) = 0;
    }
    *(unsigned char *)a3 = 0;
  }
  return isKindOfClass & 1;
}

uint64_t EQKit::StemStretch::Key::Key(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, CTFontRef font, __int16 a3, int a4, double a5)
{
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = a3;
  *((_DWORD *)this + 5) = a4;
  *((double *)this + 3) = a5;
  if (font)
  {
    *(void *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, const EQKit::StemStretch::Key *a2)
{
  unsigned int v3 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((void *)this + 3) = *((void *)a2 + 3);
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t EQKit::StemStretch::Key::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  return a1;
}

void EQKit::StemStretch::Key::~Key(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

BOOL EQKit::StemStretch::Key::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  CFStringRef v2 = *(const __CFString **)a1;
  CFStringRef v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3) {
    return 1;
  }
  BOOL result = 0;
  if (v2 && v3) {
    return CFEqual(v2, v3);
  }
  return result;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::keyForFontAndCharacter@<X0>(EQKit::StemStretch::Key *this@<X0>, const __CTFont *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  UniChar characters = (unsigned __int16)a2;
  CGGlyph glyphs = -1;
  if (this)
  {
    int v6 = (int)a2;
    long long v7 = this;
    this = (EQKit::StemStretch::Key *)CTFontGetGlyphsForCharacters(this, &characters, &glyphs, 1);
    if (this) {
      return EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)a4, v7, glyphs, v6, a3);
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = -1;
  *(_DWORD *)(a4 + 20) = 0;
  *(void *)(a4 + 24) = 0;
  return this;
}

EQKit::StemStretch::Glyph *EQKit::StemStretch::Glyph::Glyph(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Key *a2, const EQKit::StemStretch::Config::Entry *a3)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = *((void *)a2 + 3);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*(void *)a2) {
    int v6 = CTFontCreateWithName(*(CFStringRef *)a2, *((CGFloat *)a2 + 1), 0);
  }
  else {
    int v6 = 0;
  }
  *((void *)this + 1) = EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*((unsigned __int16 *)a2 + 8), v6, a3);
  if (!a3) {
    goto LABEL_9;
  }
  if (*(_DWORD *)a3)
  {
    double Size = CTFontGetSize(v6);
    *((double *)this + 2) = EQKitLength::resolveToAbsoluteWithSizeAndRule(a3, Size, *((double *)a2 + 3));
  }
  int v8 = *((unsigned char *)a3 + 16) & 3;
  if (v8 == 2)
  {
    BOOL v9 = EQKit::StemStretch::Glyph::analyzeMirrorCurve(this, a3);
LABEL_11:
    if (v9) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v8 == 1)
  {
LABEL_9:
    BOOL v9 = EQKit::StemStretch::Glyph::analyzeParallelStems(this, a3);
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)this = 0;
  uint64_t v10 = (EQKitPath *)*((void *)this + 1);
  if (v10)
  {
    EQKitPath::~EQKitPath(v10);
    MEMORY[0x25A290040]();
  }
  *((void *)this + 1) = 0;
LABEL_15:
  if (v6) {
    CFRelease(v6);
  }
  return this;
}

void sub_255845638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unsigned int v4 = *(void **)(v2 + 48);
  if (v4)
  {
    *(void *)(v2 + 56) = v4;
    operator delete(v4);
  }
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeParallelStems(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return 0;
  }
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)v41, v3, 1);
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)&v34, *((void *)this + 1), 2);
  uint64_t v5 = &v47;
  if (a2 && (char v6 = *((unsigned char *)a2 + 16), (v6 & 8) != 0))
  {
    BOOL v7 = 0;
  }
  else
  {
    BOOL v7 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)v41, *((double *)this + 2));
    if (!a2) {
      goto LABEL_9;
    }
    char v6 = *((unsigned char *)a2 + 16);
  }
  if ((((v6 & 4) != 0) | 2) != 2)
  {
    if (!v7) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
LABEL_9:
  BOOL v9 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)&v34, *((double *)this + 2));
  if (v7 && v9)
  {
    uint64_t v11 = *((void *)&v45 + 1);
    uint64_t v10 = v46;
    double v12 = 0.0;
    double v13 = 0.0;
    if (*((double **)&v45 + 1) != v46)
    {
      char v14 = (double *)*((void *)&v45 + 1);
      do
      {
        double v15 = *v14++;
        double v13 = v13 + v15;
      }
      while (v14 != v46);
    }
    uint64_t v17 = __p[1];
    uint64_t v16 = v39;
    if (__p[1] != v39)
    {
      double v12 = 0.0;
      int v18 = (double *)__p[1];
      do
      {
        double v19 = *v18++;
        double v12 = v12 + v19;
      }
      while (v18 != v39);
    }
    if (v13 < v12)
    {
      if (v35)
      {
        *(_DWORD *)this = v35;
        char v20 = &v35;
        long long v21 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)((char *)this + 24) = v37;
        long long v22 = *(_OWORD *)((char *)this + 40);
        *((void **)this + 5) = __p[0];
        *((void *)this + 6) = v17;
        long long v37 = v21;
        *(_OWORD *)std::string __p = v22;
        BOOL v23 = (double *)*((void *)this + 7);
        *((void *)this + 7) = v16;
LABEL_23:
        uint64_t v5 = &v40;
        double v39 = v23;
LABEL_30:
        uint64_t v31 = *((void *)this + 8);
        *((void *)this + 8) = *v5;
        *uint64_t v5 = v31;
        *char v20 = 0;
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (!v42) {
      goto LABEL_31;
    }
    *(_DWORD *)this = v42;
    char v20 = &v42;
    long long v29 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    long long v44 = v29;
    long long v30 = *(_OWORD *)((char *)this + 40);
    *((void *)this + 5) = v45;
    *((void *)this + 6) = v11;
    long long v45 = v30;
    uint64_t v28 = (double *)*((void *)this + 7);
LABEL_29:
    *((void *)this + 7) = v10;
    double v46 = v28;
    goto LABEL_30;
  }
  if (v7)
  {
LABEL_25:
    if (!v42) {
      goto LABEL_31;
    }
    *(_DWORD *)this = v42;
    char v20 = &v42;
    long long v26 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    long long v44 = v26;
    long long v27 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = v45;
    long long v45 = v27;
    uint64_t v28 = (double *)*((void *)this + 7);
    uint64_t v10 = v46;
    goto LABEL_29;
  }
  if (v9 && v35)
  {
    *(_DWORD *)this = v35;
    char v20 = &v35;
    long long v24 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v37;
    long long v25 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)__p;
    long long v37 = v24;
    *(_OWORD *)std::string __p = v25;
    BOOL v23 = (double *)*((void *)this + 7);
    *((void *)this + 7) = v39;
    goto LABEL_23;
  }
LABEL_31:
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3);
  BOOL v8 = v32 >= 2 && v32 - 1 == (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3;
  if (__p[1])
  {
    double v39 = (double *)__p[1];
    operator delete(__p[1]);
  }
  double v48 = (void **)&v37;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v48);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v36);
  if (*((void *)&v45 + 1))
  {
    double v46 = (double *)*((void *)&v45 + 1);
    operator delete(*((void **)&v45 + 1));
  }
  double v34 = (void **)&v44;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v34);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v43);
  return v8;
}

void sub_255845944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  EQKit::StemStretch::FeatureRange::~FeatureRange((EQKit::StemStretch::FeatureRange *)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeMirrorCurve(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  if (a2) {
    unsigned int v3 = (*((unsigned __int8 *)a2 + 16) >> 2) & 3;
  }
  else {
    unsigned int v3 = 0;
  }
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  uint64_t v5 = (EQKitPath *)*((void *)this + 1);
  if (!v5) {
    return 0;
  }
  double v46 = 0.0;
  unint64_t CurveMirrorParallelWithAxis = EQKitPath::findCurveMirrorParallelWithAxis(v5, v4, &v46);
  BOOL v7 = CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL;
  if (CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v8 = CurveMirrorParallelWithAxis;
    uint64_t v9 = EQKitPath::endPointIndexForElement(*((EQKitPath **)this + 1), CurveMirrorParallelWithAxis);
    uint64_t v10 = EQKitPath::addLineToAfterElement(*((EQKitPath **)this + 1), v8);
    uint64_t v11 = (EQKitPath *)*((void *)this + 1);
    EQKitPath::extractPath(v11);
    double v12 = (double *)(*((void *)v11 + 1) + 16 * v9);
    double v13 = *v12;
    double v14 = v12[1];
    long long v44 = 0;
    uint64_t v45 = 0;
    double v43 = &v44;
    unint64_t v15 = *((void *)this + 4);
    if (v15 >= *((void *)this + 5))
    {
      uint64_t v16 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t *)this + 3, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:ne180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      uint64_t v16 = v15 + 24;
      *((void *)this + 4) = v15 + 24;
    }
    *((void *)this + 4) = v16;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    long long v44 = 0;
    uint64_t v45 = 0;
    double v43 = &v44;
    unint64_t v17 = *((void *)this + 4);
    if (v17 >= *((void *)this + 5))
    {
      uint64_t v18 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t *)this + 3, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:ne180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      uint64_t v18 = v17 + 24;
      *((void *)this + 4) = v17 + 24;
    }
    *((void *)this + 4) = v18;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    unint64_t v19 = *((void *)this + 8);
    char v20 = (uint64_t **)*((void *)this + 3);
    uint64_t v21 = *((void *)this + 4);
    long long v22 = (char *)*((void *)this + 7);
    if ((unint64_t)v22 >= v19)
    {
      long long v24 = (char *)*((void *)this + 6);
      uint64_t v25 = (v22 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = v19 - (void)v24;
      unint64_t v27 = (uint64_t)(v19 - (void)v24) >> 2;
      if (v27 <= v25 + 1) {
        unint64_t v27 = v25 + 1;
      }
      unint64_t v28 = v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v27;
      if (v28)
      {
        long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 64, v28);
        long long v24 = (char *)*((void *)this + 6);
        long long v22 = (char *)*((void *)this + 7);
      }
      else
      {
        long long v29 = 0;
      }
      long long v30 = &v29[8 * v25];
      uint64_t v31 = &v29[8 * v28];
      *(void *)long long v30 = 0;
      BOOL v23 = v30 + 8;
      while (v22 != v24)
      {
        uint64_t v32 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v30 - 1) = v32;
        v30 -= 8;
      }
      *((void *)this + 6) = v30;
      *((void *)this + 7) = v23;
      *((void *)this + 8) = v31;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(void *)long long v22 = 0;
      BOOL v23 = v22 + 8;
    }
    *((void *)this + 7) = v23;
    double v33 = (EQKitPath *)*((void *)this + 1);
    EQKitPath::extractPath(v33);
    *(_DWORD *)this = v4;
    uint64_t v34 = *((void *)v33 + 2) - *((void *)v33 + 1);
    if (v34)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      long long v37 = (uint64_t **)(v21 - 24);
      unint64_t v38 = v34 >> 4;
      if (v38 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = v38;
      }
      do
      {
        if (v9 == v36)
        {
          if (v46 <= 0.0)
          {
            double v43 = (void **)v9;
            goto LABEL_50;
          }
          double v43 = (void **)v9;
        }
        else if (v10 == v36)
        {
          if (v46 > 0.0)
          {
            double v43 = (void **)v10;
LABEL_50:
            double v41 = v37;
            goto LABEL_51;
          }
          double v43 = (void **)v10;
        }
        else
        {
          uint64_t v40 = *((void *)v33 + 1);
          if (v3 > 1)
          {
            if (*(double *)(v40 + v35 + 8) > v14)
            {
LABEL_49:
              double v43 = (void **)v36;
              goto LABEL_50;
            }
          }
          else if (*(double *)(v40 + v35) > v13)
          {
            goto LABEL_49;
          }
          double v43 = (void **)v36;
        }
        double v41 = v20;
LABEL_51:
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v41, (unint64_t *)&v43, (uint64_t *)&v43);
        ++v36;
        v35 += 16;
      }
      while (v39 != v36);
    }
  }
  return v7;
}

void sub_255845C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void EQKit::StemStretch::Glyph::~Glyph(EQKit::StemStretch::Glyph *this)
{
  uint64_t v2 = (EQKitPath *)*((void *)this + 1);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x25A290040]();
  }
  unsigned int v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  int v4 = (void **)((char *)this + 24);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v4);
}

BOOL EQKit::StemStretch::FeatureRange::analyze(EQKit::StemStretch::FeatureRange *this, double a2)
{
  unint64_t v4 = 0;
  v112[12] = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)this + 2);
  std::string __p = 0;
  v107 = 0;
  unint64_t v108 = 0;
  char v6 = (double *)((char *)this + 16);
  BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
  int v96 = v5;
  while (1)
  {
    uint64_t v8 = *(void *)this;
    EQKitPath::extractPath(*(EQKitPath **)this);
    if (v4 >= (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 4) {
      break;
    }
    CGPoint v104 = *v7;
    CGPoint v105 = v104;
    if (!EQKitPath::elementMinMax(*(EQKitPath **)this, v4, &v105, &v104)) {
      goto LABEL_77;
    }
    p_CGFloat y = (CGPoint *)&v105.y;
    if (v5 == 1) {
      p_CGFloat y = &v105;
    }
    double x = p_y->x;
    uint64_t v11 = (CGPoint *)&v104.y;
    if (v5 == 1) {
      uint64_t v11 = &v104;
    }
    double v12 = v11->x;
    unint64_t v101 = 0;
    unint64_t v102 = 0;
    if (EQKitPath::isLineTo(*(unint64_t ***)this, v4, (uint64_t *)&v102, &v101, 0))
    {
      double v13 = EQKitPath::vector(*(EQKitPath **)this, v102, v101);
      if (v5 == 1) {
        double v13 = v14;
      }
      BOOL v15 = v13 == 0.0;
    }
    else
    {
      BOOL v15 = 0;
    }
    if (x > v12) {
      __assert_rtn("analyze", "EQKitStemStretch.mm", 532, "min <= max");
    }
    uint64_t v16 = *((void *)this + 3);
    LOBYTE(v97) = 0;
    uint64_t v17 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(v16, (uint64_t)v6, &x);
    uint64_t v18 = v17;
    if (x >= v12 || v6 == (double *)v17)
    {
      char v21 = x != v12 || v6 == (double *)v17 || v15;
      if ((v21 & 1) == 0)
      {
        uint64_t v22 = 0;
        double v97 = x;
        double v98 = v12;
        int v99 = 1;
        long long v100 = 0uLL;
        do
        {
          BOOL v23 = (char *)&v109 + v22;
          *(_OWORD *)BOOL v23 = xmmword_2558BDC20;
          *((_DWORD *)v23 + 4) = 0;
          *((void *)v23 + 3) = 0;
          *((void *)v23 + 4) = 0;
          v22 += 40;
        }
        while (v22 != 120);
        long long v24 = (long long *)(v17 + 16);
        uint64_t v25 = EQKit::StemStretch::FeatureRange::Span::split(v17 + 16, (uint64_t)&v97, (uint64_t)&v109);
        if (v25)
        {
          uint64_t v26 = v25 - 1;
          if (v25 == 1)
          {
            if (v24 != &v109)
            {
              *(_OWORD *)(v18 + 16) = v109;
              *(_DWORD *)(v18 + 32) = v110;
              *(void *)(v18 + 40) = v111;
              unint64_t v27 = v112;
              unint64_t v28 = (double *)v18;
              goto LABEL_72;
            }
            unint64_t v28 = (double *)v18;
          }
          else
          {
            uint64_t v47 = &v109;
            uint64_t v48 = v25 - 1;
            unint64_t v28 = (double *)v18;
            do
            {
              std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, (uint64_t *)v18, (uint64_t)v47);
              if (v28 == (double *)v18) {
                unint64_t v28 = v49;
              }
              uint64_t v47 = (long long *)((char *)v47 + 40);
              --v48;
            }
            while (v48);
            double v50 = (long long *)((char *)&v109 + 40 * v26);
            if (v24 == v50)
            {
              BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
            }
            else
            {
              *(_OWORD *)(v18 + 16) = *v50;
              uint64_t v51 = (char *)&v109 + 40 * v26;
              *(_DWORD *)(v18 + 32) = *((_DWORD *)v51 + 4);
              *(void *)(v18 + 40) = *((void *)v51 + 3);
              unint64_t v27 = v51 + 32;
              BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
LABEL_72:
              *(void *)(v18 + 48) = *v27;
            }
          }
          EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, v28, (double *)v18);
        }
        int v5 = v96;
      }
    }
    else
    {
      if (x < *(double *)(v17 + 16) && *((void *)this + 3) != v17) {
        uint64_t v18 = *(void *)v17;
      }
      if (v15) {
        int v29 = 2;
      }
      else {
        int v29 = 1;
      }
      double v97 = x;
      double v98 = v12;
      int v99 = v29;
      long long v100 = 0uLL;
      if (v15)
      {
        long long v30 = (CGPoint *)&v105.y;
        if (v5 != 1) {
          long long v30 = &v105;
        }
        CGFloat v31 = v30->x;
        *(CGFloat *)&long long v100 = v30->x;
        uint64_t v32 = v107;
        if ((unint64_t)v107 >= v108)
        {
          double v33 = (long long *)std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>((uint64_t *)&__p, (uint64_t)&v97);
        }
        else
        {
          *(double *)v107 = x;
          *((double *)v32 + 1) = v12;
          *((_DWORD *)v32 + 4) = 2;
          *((CGFloat *)v32 + 3) = v31;
          double v33 = (long long *)(v32 + 40);
          *((void *)v32 + 4) = 0;
        }
        v107 = (char *)v33;
      }
      if ((double *)v18 != v6)
      {
        char v34 = 0;
        uint64_t v35 = (double *)v18;
        while (1)
        {
          uint64_t v36 = (long long *)(v35 + 2);
          if (v35[2] >= v12)
          {
LABEL_63:
            int v5 = v96;
            if (v34) {
              EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (double *)v18, v35);
            }
            goto LABEL_65;
          }
          for (uint64_t i = 0; i != 120; i += 40)
          {
            unint64_t v38 = (char *)&v109 + i;
            *(_OWORD *)unint64_t v38 = xmmword_2558BDC20;
            *((_DWORD *)v38 + 4) = 0;
            *((void *)v38 + 3) = 0;
            *((void *)v38 + 4) = 0;
          }
          uint64_t v39 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)(v35 + 2), (uint64_t)&v97, (uint64_t)&v109);
          uint64_t v40 = v39;
          if (v39) {
            break;
          }
LABEL_61:
          uint64_t v35 = (double *)*((void *)v35 + 1);
          if (v35 == v6)
          {
            uint64_t v35 = v6;
            goto LABEL_63;
          }
        }
        uint64_t v41 = v39 - 1;
        if (v39 == 1)
        {
          if (v36 != &v109)
          {
            *((_OWORD *)v35 + 1) = v109;
            *((_DWORD *)v35 + 8) = v110;
            *((void *)v35 + 5) = v111;
            int v42 = (double *)v112;
            goto LABEL_59;
          }
        }
        else
        {
          for (j = &v109; --v40; j = v44)
          {
            long long v44 = (long long *)((char *)j + 40);
            std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, (uint64_t *)v35, (uint64_t)j);
          }
          uint64_t v45 = (long long *)((char *)&v109 + 40 * v41);
          if (v36 != v45)
          {
            *((_OWORD *)v35 + 1) = *v45;
            double v46 = (char *)&v109 + 40 * v41;
            *((_DWORD *)v35 + 8) = *((_DWORD *)v46 + 4);
            v35[5] = *((double *)v46 + 3);
            int v42 = (double *)(v46 + 32);
LABEL_59:
            v35[6] = *v42;
          }
        }
        char v34 = 1;
        goto LABEL_61;
      }
LABEL_65:
      BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
    }
LABEL_77:
    ++v4;
  }
  unint64_t v52 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v107 - (unsigned char *)__p) >> 3));
  *(void *)&long long v109 = EQKit::StemStretch::FeatureRange::Span::compareOrthogonal;
  if (v107 == __p) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = v52;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>((uint64_t)__p, (long long *)v107, (uint64_t (**)(long long *, long long *))&v109, v53, 1, v9);
  EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (uint64_t *)&__p);
  uint64_t v54 = *((void *)this + 3);
  if ((double *)v54 == v6) {
    goto LABEL_131;
  }
  char v55 = 0;
  while (2)
  {
    if (*(_DWORD *)(v54 + 32) == 2)
    {
      uint64_t v57 = (double *)__p;
      unint64_t v56 = v107;
      if (__p == v107) {
        goto LABEL_121;
      }
      uint64_t v58 = 0;
      long long v59 = 0;
      char v60 = 0;
      double v61 = 0.0;
      double v62 = 0.0;
      double v63 = 0.0;
      unint64_t v64 = (double *)__p;
      do
      {
        if (*(double *)(v54 + 24) > *v64)
        {
          double v65 = v64[1];
          if (*(double *)(v54 + 16) < v65)
          {
            if (v59)
            {
              double v66 = vabdd_f64(v64[3], v59[3]);
              if (v63 < v66) {
                double v63 = v66;
              }
              char v60 = 1;
              long long v59 = 0;
            }
            else
            {
              long long v59 = v64;
            }
            if (v62 >= v65) {
              double v62 = v64[1];
            }
            if (!v58) {
              double v62 = v64[1];
            }
            if (v61 < *v64 || v58 == 0) {
              double v61 = *v64;
            }
            ++v58;
          }
        }
        v64 += 5;
      }
      while (v64 != (double *)v107);
      if (!v58) {
        goto LABEL_121;
      }
      double v97 = v61;
      double v98 = v62;
      int v99 = 0;
      long long v100 = 0uLL;
      do
      {
        if (*(double *)(v54 + 24) <= *v57 || *(double *)(v54 + 16) >= v57[1])
        {
          for (uint64_t k = 0; k != 120; k += 40)
          {
            unint64_t v69 = (char *)&v109 + k;
            *(_OWORD *)unint64_t v69 = xmmword_2558BDC20;
            *((_DWORD *)v69 + 4) = 0;
            *((void *)v69 + 3) = 0;
            *((void *)v69 + 4) = 0;
          }
          uint64_t v70 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)&v97, (uint64_t)v57, (uint64_t)&v109);
          if (v70)
          {
            double v71 = (double *)&v109;
            while (1)
            {
              if (*(double *)(v54 + 24) > *v71)
              {
                double v72 = v71[1];
                if (*(double *)(v54 + 16) < v72) {
                  break;
                }
              }
              v71 += 5;
              if (!--v70) {
                goto LABEL_118;
              }
            }
            if (v71 != &v97)
            {
              double v97 = *v71;
              double v98 = v72;
              int v99 = *((_DWORD *)v71 + 4);
              long long v100 = *(_OWORD *)(v71 + 3);
            }
          }
LABEL_118:
          unint64_t v56 = v107;
        }
        v57 += 5;
      }
      while (v57 != (double *)v56);
      if (v98 >= v97)
      {
        double v73 = vabdd_f64(v98, v97);
        if (((v73 >= a2) & v60) == 1)
        {
          if (v63 / (v98 - v97) >= 2.0) {
            goto LABEL_121;
          }
        }
        else if (v73 < a2)
        {
          goto LABEL_121;
        }
        *(double *)(v54 + 48) = v73;
      }
      else
      {
LABEL_121:
        char v55 = 1;
        *(_DWORD *)(v54 + 32) = 1;
      }
    }
    uint64_t v54 = *(void *)(v54 + 8);
    if ((double *)v54 != v6) {
      continue;
    }
    break;
  }
  if (v55) {
    EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, *((double **)this + 3), v6);
  }
LABEL_131:
  uint64_t v74 = *((void *)this + 4);
  if (v74)
  {
    uint64_t v75 = (_DWORD *)*((void *)this + 3);
    if (v75[8]
      || (uint64_t v76 = *(void *)v75,
          *(void *)(v76 + 8) = *((void *)v75 + 1),
          **((void **)v75 + 1) = v76,
          *((void *)this + 4) = v74 - 1,
          operator delete(v75),
          (uint64_t v74 = *((void *)this + 4)) != 0))
    {
      v77 = *(uint64_t **)v6;
      if (*(_DWORD *)(*(void *)v6 + 32)
        || (uint64_t v78 = *v77,
            *(void *)(v78 + 8) = v77[1],
            *(void *)v77[1] = v78,
            *((void *)this + 4) = v74 - 1,
            operator delete(v77),
            (uint64_t v74 = *((void *)this + 4)) != 0))
      {
        uint64_t v79 = *((void *)this + 3);
        if (*(_DWORD *)(v79 + 32) != 2) {
          goto LABEL_158;
        }
        uint64_t v80 = *(void *)(v79 + 16);
        unint64_t v81 = operator new(0x38uLL);
        v81[2] = v80;
        double v81[3] = v80;
        *((_DWORD *)v81 + 8) = 1;
        v81[5] = 0;
        v81[6] = 0;
        *unint64_t v81 = v6;
        v81[1] = v79;
        *(void *)uint64_t v79 = v81;
        BOOL v82 = __CFADD__(v74++, 1);
        *((void *)this + 3) = v81;
        *((void *)this + 4) = v74;
        if (!v82)
        {
LABEL_158:
          double v83 = *v6;
          if (*(_DWORD *)(*(void *)v6 + 32) == 2)
          {
            uint64_t v84 = *(void *)(*(void *)&v83 + 24);
            float64x2_t v85 = operator new(0x38uLL);
            v85[2] = v84;
            v85[3] = v84;
            *((_DWORD *)v85 + 8) = 1;
            v85[5] = 0;
            v85[6] = 0;
            *(double *)float64x2_t v85 = v83;
            v85[1] = v6;
            *(void *)(*(void *)&v83 + 8) = v85;
            *((void *)this + 2) = v85;
            *((void *)this + 4) = v74 + 1;
          }
        }
      }
    }
  }
  for (uint64_t m = *((void *)this + 3); (double *)m != v6; uint64_t m = *(void *)(m + 8))
  {
    int v87 = *(_DWORD *)(m + 32);
    if (v87 == 1)
    {
      EQKit::StemStretch::FeatureRange::addFeatureCluster(this, *(double *)(m + 16), *(double *)(m + 24));
    }
    else if (v87 == 2)
    {
      EQKit::StemStretch::FeatureRange::addStem(this, *(double *)(m + 16), *(double *)(m + 24), *(double *)(m + 48));
    }
  }
  uint64_t v89 = *((void *)this + 5);
  uint64_t v88 = *((void *)this + 6);
  uint64_t v92 = (char *)this + 64;
  uint64_t v90 = *((void *)this + 8);
  uint64_t v91 = *((void *)v92 + 1);
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v89) >> 3);
  return v93 > 1 && v93 == ((v91 - v90) >> 3) + 1;
}

void sub_2558465A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::StemStretch::FeatureRange::~FeatureRange(EQKit::StemStretch::FeatureRange *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void **)((char *)this + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear((void *)this + 2);
}

CGPath *EQKit::StemStretch::Glyph::newPathWithLength(EQKit::StemStretch::Glyph *this, double a2, CGSize *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return 0;
  }
  float64x2_t v7 = *(float64x2_t *)MEMORY[0x263F00148];
  if (*(unsigned char *)(v4 + 120))
  {
    uint64_t v8 = (CGFloat *)(v4 + 88);
  }
  else
  {
    float64x2_t v46 = *(float64x2_t *)MEMORY[0x263F00148];
    uint64_t v8 = EQKitPath::computePathBounds((CGFloat *)v4);
    float64x2_t v7 = v46;
  }
  double v10 = v8[2];
  double v11 = v8[3];
  int v12 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1) {
    double v13 = v8[2];
  }
  else {
    double v13 = v8[3];
  }
  double v14 = a2 - v13;
  if (a2 - v13 <= 0.0)
  {
    uint64_t v19 = *((void *)this + 1);
    if (*(unsigned char *)(v19 + 120)) {
      char v20 = (CGSize *)(v19 + 88);
    }
    else {
      char v20 = (CGSize *)EQKitPath::computePathBounds((CGFloat *)v19);
    }
    double width = v20->width;
    double height = v20->height;
    *a3 = v20[1];
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -width, -height);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, 0);
  }
  else
  {
    double v15 = *v8;
    double v16 = v8[1];
    uint64_t v18 = *((void *)this + 6);
    uint64_t v17 = *((void *)this + 7);
    a3->double width = v10;
    a3->double height = v11;
    float64x2_t v47 = v7;
    if (v12 == 1) {
      a3->double width = v10 + v14;
    }
    else {
      a3->double height = v14 + v11;
    }
    uint64_t v21 = *((void *)this + 1);
    EQKitPath::extractPath((EQKitPath *)v21);
    double v50 = 0;
    uint64_t v51 = 0;
    std::string __p = 0;
    std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&__p, *(const void **)(v21 + 8), *(void *)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 4);
    uint64_t v22 = *((void *)this + 3);
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v22) >> 3);
    BOOL v24 = v23 >= 2;
    unint64_t v25 = v23 - 2;
    float64x2_t v26 = v47;
    if (v24)
    {
      uint64_t v27 = 0;
      unint64_t v28 = (float64x2_t *)__p;
      uint64_t v29 = ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3) + 1;
      int32x2_t v30 = vdup_n_s32(v12 == 1);
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      int8x16_t v32 = (int8x16_t)vdupq_lane_s64(0x8000000000000000, 0);
      v33.i64[1] = v32.i64[1];
      *(double *)v33.i64 = v14 / (double)(unint64_t)((v17 - v18) >> 3);
      v32.i64[1] = v33.i64[0];
      float64x2_t v34 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL)), v33, v32);
      uint64_t v35 = 1;
      do
      {
        if (v35 == v29) {
          break;
        }
        float64x2_t v26 = vaddq_f64(v26, v34);
        uint64_t v36 = (void *)(v22 + 24 * v35);
        uint64_t v39 = (void *)*v36;
        long long v37 = v36 + 1;
        unint64_t v38 = v39;
        if (v39 != v37)
        {
          do
          {
            v28[v38[4]] = vaddq_f64(v26, v28[v38[4]]);
            uint64_t v40 = (void *)v38[1];
            if (v40)
            {
              do
              {
                uint64_t v41 = v40;
                uint64_t v40 = (void *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                uint64_t v41 = (void *)v38[2];
                BOOL v42 = *v41 == (void)v38;
                unint64_t v38 = v41;
              }
              while (!v42);
            }
            unint64_t v38 = v41;
          }
          while (v41 != v37);
        }
        ++v35;
        BOOL v42 = v27++ == v25;
      }
      while (!v42);
    }
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -v15, -v16);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, (uint64_t *)&__p);
    if (__p)
    {
      double v50 = __p;
      operator delete(__p);
    }
  }
  return Mutable;
}

void sub_255846908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 24;
        std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKit::StemStretch::FeatureRange::FeatureRange(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 16) = a1 + 16;
  *(void *)(a1 + 24) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  int v5 = operator new(0x38uLL);
  v5[1] = xmmword_2558BDC20;
  *((_DWORD *)v5 + 8) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *(void *)int v5 = v4;
  *((void *)v5 + 1) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = 1;
  return a1;
}

void sub_255846A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v11);
  _Unwind_Resume(a1);
}

void *std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    BOOL result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        BOOL result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t EQKit::StemStretch::FeatureRange::Span::split(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(double *)a2;
  double v3 = *(double *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  BOOL v6 = v3 - *(double *)a2 == 0.0 && v5 == 1;
  if (!v6 && (v3 <= *(double *)a1 || v4 >= *(double *)(a1 + 8))) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 1 || v7 == v5) {
    return 0;
  }
  double v11 = *(double *)a1;
  if (*(double *)a1 == v4)
  {
    double v12 = *(double *)(a1 + 8);
    if (v12 == v3)
    {
      if (v5 == 1)
      {
        if (a3 != a1)
        {
          *(double *)a3 = v11;
          *(double *)(a3 + 8) = v12;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
        }
        uint64_t v9 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        return v9;
      }
      if (!v7)
      {
        if (a3 != a2)
        {
          *(double *)a3 = v4;
          *(double *)(a3 + 8) = v3;
          *(_DWORD *)(a3 + 16) = v5;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
        }
        return 1;
      }
      return 0;
    }
  }
  if (v11 >= v4)
  {
    uint64_t v13 = 0;
  }
  else
  {
    *(double *)a3 = v11;
    *(double *)(a3 + 8) = v4;
    *(_DWORD *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    double v11 = *(double *)a1;
    double v4 = *(double *)a2;
    double v3 = *(double *)(a2 + 8);
    uint64_t v13 = 1;
    int v5 = *(_DWORD *)(a2 + 16);
  }
  if (v11 >= v4) {
    double v4 = v11;
  }
  if (v3 >= *(double *)(a1 + 8)) {
    double v3 = *(double *)(a1 + 8);
  }
  uint64_t v14 = a3 + 40 * v13;
  *(double *)uint64_t v14 = v4;
  *(double *)(v14 + 8) = v3;
  *(_DWORD *)(v14 + 16) = v5;
  uint64_t v9 = v13 + 1;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  double v15 = *(double *)(a2 + 8);
  double v16 = *(double *)(a1 + 8);
  if (v15 < v16)
  {
    int v17 = *(_DWORD *)(a1 + 16);
    uint64_t v18 = a3 + 40 * v9;
    *(double *)uint64_t v18 = v15;
    *(double *)(v18 + 8) = v16;
    *(_DWORD *)(v18 + 16) = v17;
    uint64_t v9 = v13 | 2;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
  }
  return v9;
}

__n128 std::list<EQKit::StemStretch::FeatureRange::Span>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6 = (char *)operator new(0x38uLL);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v6 + 8) = *(_DWORD *)(a3 + 16);
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 40) = result;
  uint64_t v8 = *a2;
  *(void *)(v8 + 8) = v6;
  *(void *)BOOL v6 = v8;
  *a2 = (uint64_t)v6;
  *((void *)v6 + 1) = a2;
  ++*(void *)(a1 + 16);
  return result;
}

void EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, double *__p, double *a3)
{
  double v3 = a3;
  double v4 = __p;
  BOOL v6 = (double *)(a1 + 16);
  if (*(double **)(a1 + 24) != __p) {
    double v4 = *(double **)__p;
  }
  if (v6 != a3) {
    double v3 = (double *)*((void *)a3 + 1);
  }
  while (v4 != v3)
  {
    int v7 = v4;
    double v4 = (double *)*((void *)v4 + 1);
    if (v4 != v6)
    {
      if (v7[3] != v4[2]) {
        EQKit::StemStretch::FeatureRange::collapse();
      }
      if (*((_DWORD *)v7 + 8) == *((_DWORD *)v4 + 8))
      {
        _WORD v4[2] = v7[2];
        uint64_t v8 = *(void *)v7;
        *(void *)(v8 + 8) = v4;
        **((void **)v7 + 1) = v8;
        --*(void *)(a1 + 32);
        operator delete(v7);
      }
    }
  }
}

BOOL EQKit::StemStretch::FeatureRange::Span::compareOrthogonal(double *a1, double *a2)
{
  double v2 = a1[3];
  double v3 = a2[3];
  if (v2 < v3) {
    return 1;
  }
  if (v2 == v3) {
    return *a1 < *a2;
  }
  return 0;
}

uint64_t EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  while (v4 != v3 && v4 + 40 != v3)
  {
    if (*(double *)(v4 + 8) == *(double *)(v4 + 40)
      && *(double *)(v4 + 24) == *(double *)(v4 + 64)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v4 + 56))
    {
      *(void *)(v4 + 8) = *(void *)(v4 + 48);
      uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(v4 + 80, v3, v4 + 40);
      a2[1] = v3;
    }
    else
    {
      v4 += 40;
    }
  }
  return result;
}

void EQKit::StemStretch::FeatureRange::addFeatureCluster(EQKit::StemStretch::FeatureRange *this, double a2, double a3)
{
  int v6 = *((_DWORD *)this + 2);
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v18 = v19;
  unint64_t v7 = *((void *)this + 6);
  if (v7 >= *((void *)this + 7))
  {
    uint64_t v8 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t *)this + 5, (uint64_t)&v18);
  }
  else
  {
    std::set<unsigned long>::set[abi:ne180100](*((uint64_t **)this + 6), (uint64_t)&v18);
    uint64_t v8 = v7 + 24;
    *((void *)this + 6) = v7 + 24;
  }
  *((void *)this + 6) = v8;
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v18, v19[0]);
  uint64_t v9 = *((void *)this + 6);
  uint64_t v10 = *(EQKitPath **)this;
  EQKitPath::extractPath(v10);
  uint64_t v12 = *((void *)v10 + 1);
  uint64_t v11 = *((void *)v10 + 2);
  if (v11 != v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    double v15 = (uint64_t **)(v9 - 24);
    do
    {
      double v16 = (double *)(v12 + v13);
      if (v6 != 1) {
        double v16 = (double *)(v12 + v13 + 8);
      }
      if (*v16 >= a2 && *v16 <= a3)
      {
        uint64_t v18 = (void **)v14;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v15, (unint64_t *)&v18, (uint64_t *)&v18);
        uint64_t v12 = *((void *)v10 + 1);
        uint64_t v11 = *((void *)v10 + 2);
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < (v11 - v12) >> 4);
  }
}

void sub_255846EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void EQKit::StemStretch::FeatureRange::addStem(EQKit::StemStretch::FeatureRange *this, double a2, double a3, double a4)
{
  int v6 = (char *)this + 80;
  unint64_t v7 = *((void *)this + 10);
  uint64_t v8 = (double *)*((void *)this + 9);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (double *)*((void *)this + 8);
    uint64_t v11 = v8 - v10;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 2;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      double v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v14);
      uint64_t v10 = (double *)*((void *)this + 8);
      uint64_t v8 = (double *)*((void *)this + 9);
    }
    else
    {
      double v15 = 0;
    }
    double v16 = (double *)&v15[8 * v11];
    int v17 = &v15[8 * v14];
    *double v16 = a4;
    uint64_t v9 = v16 + 1;
    while (v8 != v10)
    {
      uint64_t v18 = *((void *)v8-- - 1);
      *((void *)v16-- - 1) = v18;
    }
    *((void *)this + 8) = v16;
    *((void *)this + 9) = v9;
    *((void *)this + 10) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v8 = a4;
    uint64_t v9 = v8 + 1;
  }
  *((void *)this + 9) = v9;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, double *a3)
{
  if (result != a2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result;
    do
    {
      ++v3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a2);
    do
    {
      unint64_t v5 = v3 >> 1;
      uint64_t v6 = result;
      if (v3 != 1)
      {
        unint64_t v7 = v5 + 1;
        uint64_t v6 = result;
        do
        {
          uint64_t v6 = *(void *)(v6 + 8);
          --v7;
        }
        while (v7 > 1);
      }
      if (*(double *)(v6 + 24) < *a3)
      {
        uint64_t result = *(void *)(v6 + 8);
        unint64_t v5 = v3 + ~v5;
      }
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(v7, v9);
  uint64_t v11 = &v10[40 * v4];
  std::string __p = v10;
  double v16 = v11;
  uint64_t v18 = &v10[40 * v12];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  int v17 = v11 + 40;
  std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    int v17 = &v16[(v17 - v16 - 40) % 0x28uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_25584718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(uint64_t result, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
  uint64_t v10 = a2;
  uint64_t v11 = (long long *)result;
  unint64_t v28 = a2;
  uint64_t v29 = (long long *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v13 = (char *)v10 - (char *)v11;
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v10 - (char *)v11) >> 3);
    if (!(!v7 & v6))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float64x2_t v26 = *a3;
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = ((uint64_t (*)(void))v26)();
          if (result) {
            uint64_t result = (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v29, &v28);
          }
          break;
        case 3uLL:
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40), (long long *)((char *)v10 - 40), a3);
          break;
        case 4uLL:
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40), v11 + 5, (long long *)((char *)v10 - 40), a3);
          break;
        case 5uLL:
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40), v11 + 5, (long long *)((char *)v11 + 120), (long long *)((char *)v10 - 40), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 959)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v11, v10, (uint64_t (**)(_OWORD *, void))a3);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v11, v10, (uint64_t (**)(_OWORD *, void))a3);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v15 = v14 >> 1;
    double v16 = (long long *)((char *)v10 - 40);
    if ((unint64_t)v13 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40 * (v14 >> 1)), v16, a3);
      int v17 = v28;
      uint64_t v18 = 5 * v15;
      uint64_t v19 = 40 * v15;
      uint64_t v20 = 40 * v15 - 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v29 + 40), (long long *)((char *)v29 + v20), v28 - 5, a3);
      v19 += 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v29 + 5, (long long *)((char *)v29 + v19), (long long *)((char *)v17 - 120), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v29 + v20), (long long *)((char *)v29 + 8 * v18), (long long *)((char *)v29 + v19), a3);
      uint64_t v27 = (long long *)((char *)v29 + 8 * v18);
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v29, &v27);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v11 + 40 * (v14 >> 1)), v11, v16, a3);
      if (a5)
      {
LABEL_13:
        uint64_t v10 = v28;
        goto LABEL_14;
      }
    }
    char v21 = ((uint64_t (*)(char *))*a3)((char *)v29 - 40);
    uint64_t v10 = v28;
    if ((v21 & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v29, v28, a3);
      uint64_t v11 = (long long *)result;
LABEL_22:
      a5 = 0;
      uint64_t v29 = v11;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    a6.n128_f64[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v29, v10, (uint64_t (**)(void))a3);
    unint64_t v23 = v22;
    if ((v24 & 1) == 0) {
      goto LABEL_21;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v29, v22, a3);
    uint64_t v11 = (long long *)((char *)v23 + 40);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v23 + 40), v10, a3);
    if (result)
    {
      if (v25) {
        return result;
      }
      unint64_t v28 = v23;
      uint64_t v11 = v29;
      uint64_t v10 = v23;
    }
    else
    {
      if (!v25)
      {
LABEL_21:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(v29, v23, a3, -i, a5 & 1, a6);
        uint64_t v11 = (long long *)((char *)v23 + 40);
        goto LABEL_22;
      }
      uint64_t v29 = (long long *)((char *)v23 + 40);
    }
  }
  if (v11 != v10) {
    return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(v11, v10, v10, (unsigned int (**)(int64_t, uint64_t))a3, a6);
  }
  return result;
}

long long **std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(long long **result, long long **a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  long long v4 = **result;
  int v5 = *((_DWORD *)*result + 4);
  long long v6 = *(long long *)((char *)*result + 24);
  if (*result != *a2)
  {
    long long *v2 = *v3;
    *((_DWORD *)v2 + 4) = *((_DWORD *)v3 + 4);
    *(long long *)((char *)v2 + 24) = *(long long *)((char *)v3 + 24);
  }
  *uint64_t v3 = v4;
  *((_DWORD *)v3 + 4) = v5;
  *(long long *)((char *)v3 + 24) = v6;
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v6 = result;
    char v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v15 = *v11;
          int v16 = *((_DWORD *)v10 + 14);
          long long v17 = v10[4];
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_OWORD *)(v13 + 40) = *(_OWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 56) = *(_DWORD *)(v6 + v12 + 16);
            *(_OWORD *)(v13 + 64) = *(_OWORD *)(v6 + v12 + 24);
            if (!v12) {
              break;
            }
            v12 -= 40;
            uint64_t result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          if ((long long *)v14 != &v15)
          {
            *(_OWORD *)uint64_t v14 = v15;
            *(_DWORD *)(v14 + 16) = v16;
            *(_OWORD *)(v14 + 24) = v17;
          }
        }
        char v7 = (_OWORD *)((char *)v11 + 40);
        v9 += 40;
        uint64_t v10 = v11;
      }
      while ((_OWORD *)((char *)v11 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    uint64_t v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      uint64_t v9 = result - 40;
      do
      {
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v6);
        if (result)
        {
          long long v12 = *v10;
          int v13 = *((_DWORD *)v6 + 14);
          long long v14 = v6[4];
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 80) = *(_OWORD *)(v11 + 40);
            *(_DWORD *)(v11 + 96) = *(_DWORD *)(v11 + 56);
            *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 + 64);
            uint64_t result = (*a3)(&v12, v11);
            v11 -= 40;
          }
          while ((result & 1) != 0);
          if ((long long *)(v11 + 80) != &v12)
          {
            *(_OWORD *)(v11 + 80) = v12;
            *(_DWORD *)(v11 + 96) = v13;
            *(_OWORD *)(v11 + 104) = v14;
          }
        }
        char v7 = (_OWORD *)((char *)v10 + 40);
        v9 += 40;
        uint64_t v6 = v10;
      }
      while ((_OWORD *)((char *)v10 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  long long v12 = a2;
  int v13 = a1;
  uint64_t v11 = a3;
  char v7 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    if (!(*a4)(v12, v13)) {
      return 1;
    }
    uint64_t v9 = &v13;
    uint64_t v10 = &v12;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
    if (!(*a4)(v11, v12)) {
      return 1;
    }
    uint64_t v9 = &v12;
    uint64_t v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v11);
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  int v13 = a2;
  long long v10 = *(_OWORD *)a1;
  int v11 = *(_DWORD *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 24);
  if ((*a3)(&v10, (long long *)((char *)a2 - 40)))
  {
    int v5 = (long long *)a1;
    do
    {
      int v5 = (long long *)((char *)v5 + 40);
      long long v14 = v5;
    }
    while (((*a3)(&v10, v5) & 1) == 0);
  }
  else
  {
    uint64_t v6 = (long long *)(a1 + 40);
    do
    {
      int v5 = v6;
      long long v14 = v6;
      if (v6 >= v13) {
        break;
      }
      int v7 = (*a3)(&v10, v6);
      uint64_t v6 = (long long *)((char *)v5 + 40);
    }
    while (!v7);
  }
  uint64_t v8 = v13;
  if (v5 < v13)
  {
    do
    {
      uint64_t v8 = (long long *)((char *)v8 - 40);
      int v13 = v8;
    }
    while (((*a3)(&v10, v8) & 1) != 0);
    int v5 = v14;
  }
  if (v5 < v8)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
      do
        long long v14 = (long long *)((char *)v14 + 40);
      while (!((unsigned int (*)(long long *))*a3)(&v10));
      do
        int v13 = (long long *)((char *)v13 - 40);
      while ((((uint64_t (*)(long long *))*a3)(&v10) & 1) != 0);
      int v5 = v14;
    }
    while (v14 < v13);
  }
  if ((long long *)((char *)v5 - 40) != (long long *)a1)
  {
    *(_OWORD *)a1 = *(long long *)((char *)v5 - 40);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v5 - 6);
    *(_OWORD *)(a1 + 24) = *(v5 - 1);
  }
  if ((long long *)((char *)v5 - 40) != &v10)
  {
    *(long long *)((char *)v5 - 40) = v10;
    *((_DWORD *)v5 - 6) = v11;
    *(v5 - 1) = v12;
  }
  return v5;
}

double std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(void))
{
  uint64_t v5 = 0;
  long long v17 = a2;
  long long v14 = *(_OWORD *)a1;
  int v15 = *(_DWORD *)(a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 24);
  do
  {
    v5 += 40;
    uint64_t v18 = (long long *)(v5 + a1);
  }
  while (((*a3)() & 1) != 0);
  int v7 = v17;
  if (v5 == 40)
  {
    long long v10 = (long long *)(a1 + 40);
    do
    {
      if (v10 >= v7) {
        break;
      }
      int v11 = *a3;
      int v7 = (long long *)((char *)v7 - 40);
      long long v17 = v7;
    }
    while ((((uint64_t (*)(long long *, long long *))v11)(v7, &v14) & 1) == 0);
  }
  else
  {
    uint64_t v8 = (long long *)((char *)v17 - 40);
    do
    {
      long long v17 = v8;
      int v9 = ((uint64_t (*)(long long *, long long *))*a3)(v8, &v14);
      uint64_t v8 = (long long *)((char *)v8 - 40);
    }
    while (!v9);
    long long v10 = v18;
  }
  long long v12 = v10;
  if (v10 < v17)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v18, &v17);
      do
        uint64_t v18 = (long long *)((char *)v18 + 40);
      while (((*a3)() & 1) != 0);
      do
        long long v17 = (long long *)((char *)v17 - 40);
      while (!(*a3)());
      long long v12 = v18;
    }
    while (v18 < v17);
  }
  if ((long long *)((char *)v12 - 40) != (long long *)a1)
  {
    *(_OWORD *)a1 = *(long long *)((char *)v12 - 40);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v12 - 6);
    long long v6 = *(v12 - 1);
    *(_OWORD *)(a1 + 24) = v6;
  }
  if ((long long *)((char *)v12 - 40) != &v14)
  {
    *(long long *)((char *)v12 - 40) = v14;
    *((_DWORD *)v12 - 6) = v15;
    *(void *)&long long v6 = v16;
    *(v12 - 1) = v16;
  }
  return *(double *)&v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  long long v16 = a2;
  long long v17 = a1;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *a3;
      long long v16 = (long long *)((char *)a2 - 40);
      if (((unsigned int (*)(void))v8)()) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), (long long *)((char *)a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), a1 + 5, (long long *)((char *)a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), a1 + 5, (long long *)((char *)a1 + 120), (long long *)((char *)a2 - 40), a3);
      return 1;
    default:
      int v9 = a1 + 5;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), a1 + 5, a3);
      long long v10 = (long long *)((char *)a1 + 120);
      if (v10 == a2) {
        return 1;
      }
      int v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      long long v13 = *v10;
      int v14 = *((_DWORD *)v10 + 4);
      long long v15 = *(long long *)((char *)v10 + 24);
      do
      {
        long long v12 = v9;
        *(long long *)((char *)v9 + 40) = *v9;
        *((_DWORD *)v9 + 14) = *((_DWORD *)v9 + 4);
        v9[4] = *(long long *)((char *)v9 + 24);
        if (v9 == v17) {
          break;
        }
        int v9 = (long long *)((char *)v9 - 40);
      }
      while (((*a3)(&v13, (long long *)((char *)v12 - 40)) & 1) != 0);
      if (v12 != &v13)
      {
        *long long v12 = v13;
        *((_DWORD *)v12 + 4) = v14;
        *(long long *)((char *)v12 + 24) = v15;
      }
      if (++v11 == 8) {
        break;
      }
    }
    int v9 = v10;
    long long v10 = (long long *)((char *)v10 + 40);
    if (v10 == v16) {
      return 1;
    }
  }
  return (long long *)((char *)v10 + 40) == v16;
}

long long **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  long long v13 = a2;
  int v14 = a1;
  int v11 = a4;
  long long v12 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a5);
  BOOL result = (long long **)(*a5)(a4, a3);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    BOOL result = (long long **)(*a5)(v12, a2);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
      BOOL result = (long long **)(*a5)(v13, a1);
      if (result) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
      }
    }
  }
  return result;
}

long long **std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  long long v16 = a2;
  long long v17 = a1;
  int v14 = a4;
  long long v15 = a3;
  long long v13 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a4, a6);
  BOOL result = (long long **)(*a6)(a5, a4);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
    BOOL result = (long long **)(*a6)(v14, a3);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v15, &v14);
      BOOL result = (long long **)(*a6)(v15, a2);
      if (result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v16, &v15);
        BOOL result = (long long **)(*a6)(v16, a1);
        if (result) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  float64x2_t v26 = a1;
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 40;
    if ((char *)a2 - (char *)a1 >= 41)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (long long *)((char *)a1 + 40 * v11);
      do
      {
        a5.n128_f64[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v10, v13);
        long long v13 = (long long *)((char *)v13 - 40);
        --v12;
      }
      while (v12);
    }
    BOOL v25 = a2;
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      int v14 = a2;
      do
      {
        if (((unsigned int (*)(long long *, long long *, __n128))*a4)(v14, v26, a5))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v25, &v26);
          a5.n128_f64[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v26, a4, v10, v26);
        }
        int v14 = (long long *)((char *)v25 + 40);
        BOOL v25 = v14;
      }
      while (v14 != a3);
      uint64_t v8 = v26;
      uint64_t v9 = (char *)a2 - (char *)v26;
    }
    if (v9 >= 41)
    {
      int64_t v15 = v9 / 0x28uLL;
      long long v16 = (char *)a2 - 40;
      do
      {
        uint64_t v18 = *(void *)v8;
        uint64_t v17 = *((void *)v8 + 1);
        int v19 = *((_DWORD *)v8 + 4);
        uint64_t v21 = *((void *)v8 + 3);
        uint64_t v20 = *((void *)v8 + 4);
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v15);
        if (v16 == (char *)v22)
        {
          *(void *)uint64_t v22 = v18;
          *(void *)(v22 + 8) = v17;
          *(_DWORD *)(v22 + 16) = v19;
          *(void *)(v22 + 24) = v21;
          *(void *)(v22 + 32) = v20;
        }
        else
        {
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v16;
          *(_DWORD *)(v22 + 16) = *((_DWORD *)v16 + 4);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v16 + 24);
          *(void *)long long v16 = v18;
          *((void *)v16 + 1) = v17;
          *((_DWORD *)v16 + 4) = v19;
          *((void *)v16 + 3) = v21;
          *((void *)v16 + 4) = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, v22 + 40, (uint64_t (**)(uint64_t, long long *))a4, 0xCCCCCCCCCCCCCCCDLL * ((v22 + 40 - (uint64_t)v8) >> 3));
        }
        v16 -= 40;
      }
      while (v15-- > 2);
      return v25;
    }
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    int v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      int64_t v13 = a1 + 40 * v12;
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, v13 + 40))
      {
        v13 += 40;
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(int64_t, long long *))*a2)(v13, v7) & 1) == 0)
      {
        long long v20 = *v7;
        int v21 = *((_DWORD *)v7 + 4);
        long long v15 = *(long long *)((char *)v7 + 24);
        long long v22 = v15;
        do
        {
          long long v16 = (long long *)v13;
          if (v7 != (long long *)v13)
          {
            long long *v7 = *(_OWORD *)v13;
            *((_DWORD *)v7 + 4) = *(_DWORD *)(v13 + 16);
            long long v15 = *(_OWORD *)(v13 + 24);
            *(long long *)((char *)v7 + 24) = v15;
          }
          if (v9 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          int64_t v13 = a1 + 40 * v17;
          uint64_t v18 = 2 * v12 + 2;
          if (v18 < a3 && (*a2)(a1 + 40 * v17, v13 + 40))
          {
            v13 += 40;
            uint64_t v17 = v18;
          }
          int v7 = v16;
          int64_t v12 = v17;
        }
        while (!(*a2)(v13, (uint64_t)&v20));
        if (v16 != &v20)
        {
          *long long v16 = v20;
          *((_DWORD *)v16 + 4) = v21;
          *(void *)&long long v15 = v22;
          *(long long *)((char *)v16 + 24) = v22;
        }
      }
    }
  }
  return *(double *)&v15;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 40))
    {
      v9 += 40;
      uint64_t v6 = v11;
    }
    if (a1 != v9)
    {
      *(_OWORD *)a1 = *(_OWORD *)v9;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v9 + 24);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v19 = v4;
    uint64_t v20 = v5;
    unint64_t v10 = v6 >> 1;
    uint64_t v11 = a1 + 40 * (v6 >> 1);
    uint64_t v12 = a2 - 40;
    if ((*a3)(v11, (long long *)(a2 - 40)))
    {
      long long v16 = *(_OWORD *)(a2 - 40);
      int v17 = *(_DWORD *)(a2 - 24);
      long long v13 = *(_OWORD *)(a2 - 16);
      long long v18 = v13;
      do
      {
        uint64_t v14 = v11;
        if (v12 != v11)
        {
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
          long long v13 = *(_OWORD *)(v11 + 24);
          *(_OWORD *)(v12 + 24) = v13;
        }
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        uint64_t v11 = a1 + 40 * v10;
        uint64_t v12 = v14;
      }
      while (((*a3)(v11, &v16) & 1) != 0);
      if ((long long *)v14 != &v16)
      {
        *(_OWORD *)uint64_t v14 = v16;
        *(_DWORD *)(v14 + 16) = v17;
        *(void *)&long long v13 = v18;
        *(_OWORD *)(v14 + 24) = v18;
      }
    }
  }
  return *(double *)&v13;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 16);
        *(_OWORD *)(a3 + 24) = *(_OWORD *)(result + 24);
      }
      result += 40;
      a3 += 40;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  long long v13 = v10;
  uint64_t v14 = (uint64_t *)&v10[24 * v4];
  long long v16 = &v10[24 * v9];
  std::set<unsigned long>::set[abi:ne180100](v14, a2);
  long long v15 = v14 + 3;
  std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(&v13);
  return v11;
}

void sub_2558485EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 24;
      std::set<unsigned long>::set[abi:ne180100]((uint64_t *)(v7 - 24), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 24;
      *((void *)&v15 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_255848720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<EQKit::StemStretch::FeatureCluster>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_25584886C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    long long v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          long long v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        long long v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void EQKit::StemStretch::FeatureRange::collapse()
{
  __assert_rtn("collapse", "EQKitStemStretch.mm", 427, "cur->max() == next->min()");
}

uint64_t EQKit::OpticalKern::Glyph::Key::Key(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void EQKit::OpticalKern::Glyph::Key::~Key(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t EQKit::OpticalKern::Glyph::Key::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  }
  return a1;
}

BOOL EQKit::OpticalKern::Glyph::Key::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
  {
    return 0;
  }
  CFStringRef v2 = *(const __CFString **)a1;
  CFStringRef v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3) {
    return 1;
  }
  BOOL result = 0;
  if (v2)
  {
    if (v3) {
      return CFEqual(v2, v3);
    }
  }
  return result;
}

EQKit::OpticalKern::Edge::Path *EQKit::OpticalKern::Edge::Path::Path(EQKit::OpticalKern::Edge::Path *this, const EQKit::OpticalKern::Glyph::Key *a2, const EQKitPath::QuantizationConfig *a3, const Config *a4)
{
  *(_DWORD *)this = *((_DWORD *)a2 + 6);
  *((void *)this + 1) = 4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  unint64_t v7 = CTFontCreateWithName(*(CFStringRef *)a2, *((CGFloat *)a2 + 2), 0);
  memset(&matrix, 0, sizeof(matrix));
  CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
  if (v7) {
    uint64_t v8 = CTFontCreatePathForGlyph(v7, *((_WORD *)a2 + 4), &matrix);
  }
  else {
    uint64_t v8 = 0;
  }
  v10[0] = 0;
  v10[1] = 0;
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)this, v8, (long long *)a3, v10);
  CGPathRelease(v8);
  if (v7) {
    CFRelease(v7);
  }
  return this;
}

void sub_255848E74(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::OpticalKern::Edge::Path::analyze(unsigned int *a1, const CGPath *a2, long long *a3, unint64_t ***a4)
{
  *((void *)a1 + 2) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 4);
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 7) = 0x7FF8000000000000;
  if (a2)
  {
    int v8 = *a1;
    EQKitPath::EQKitPath((EQKitPath *)v40, a2);
    if (v43[32]) {
      unint64_t v9 = (CGFloat *)v43;
    }
    else {
      unint64_t v9 = EQKitPath::computePathBounds(v40);
    }
    CGFloat v11 = *v9;
    CGFloat v10 = v9[1];
    CGFloat v13 = v9[2];
    CGFloat v12 = v9[3];
    uint64_t v14 = *(void *)v9;
    CGFloat v15 = v10;
    CGFloat v16 = v13;
    CGFloat v17 = v12;
    if ((v8 | 2) == 2)
    {
      float v18 = CGRectGetMinY(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((void *)a1 + 2) = vcvtms_s32_f32(v18);
      v44.origin.double x = v11;
      v44.origin.CGFloat y = v10;
      v44.size.double width = v13;
      v44.size.double height = v12;
      float v19 = CGRectGetMaxY(v44) * (double)*((unint64_t *)a1 + 1);
      float v20 = ceilf(v19);
    }
    else
    {
      float v21 = CGRectGetMinX(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((void *)a1 + 2) = vcvtms_s32_f32(v21);
      v45.origin.double x = v11;
      v45.origin.CGFloat y = v10;
      v45.size.double width = v13;
      v45.size.double height = v12;
      float v22 = CGRectGetMaxX(v45) * (double)*((unint64_t *)a1 + 1);
      float v20 = floorf(v22);
    }
    *((void *)a1 + 3) = (uint64_t)v20;
    unint64_t v23 = (uint64_t)v20 - *((void *)a1 + 2) + 1;
    uint64_t v37 = 0x7FF8000000000000;
    std::vector<double>::resize((uint64_t)(a1 + 8), v23, &v37);
    uint64_t v37 = *v5;
    long long v24 = a3[1];
    long long v38 = *a3;
    long long v39 = v24;
    BOOL v25 = *a4;
    if (*a4)
    {
      for (uint64_t i = *v25; i != v25[1]; ++i)
      {
        EQKitPath::quantizeElementEdge((EQKitPath *)v40, *i, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        BOOL v25 = *a4;
      }
    }
    else
    {
      EQKitPath::extractPath((EQKitPath *)v40);
      if (v42 != v41)
      {
        unint64_t v27 = 0;
        if ((unint64_t)((v42 - v41) >> 4) <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = (v42 - v41) >> 4;
        }
        do
          EQKitPath::quantizeElementEdge((EQKitPath *)v40, v27++, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        while (v28 != v27);
      }
    }
    uint64_t v29 = (double *)*((void *)a1 + 4);
    uint64_t v30 = *((void *)a1 + 5) - (void)v29;
    if (v30)
    {
      unint64_t v31 = v30 >> 3;
      unsigned int v32 = *a1 & 0xFFFFFFFE;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      char v33 = 1;
      do
      {
        double v34 = *v29;
        if ((v33 & 1) == 0)
        {
          double v35 = *((double *)a1 + 7);
          BOOL v36 = v34 < v35;
          if (v32 == 2) {
            BOOL v36 = v35 < v34;
          }
          if (!v36) {
            double v34 = *((double *)a1 + 7);
          }
        }
        char v33 = 0;
        *((double *)a1 + 7) = v34;
        ++v29;
        --v31;
      }
      while (v31);
    }
    EQKitPath::~EQKitPath((EQKitPath *)v40);
  }
  else
  {
    v40[0] = NAN;
    std::vector<double>::resize((uint64_t)(a1 + 8), 1uLL, v40);
  }
}

void sub_25584913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Edge::Path::Path(uint64_t a1, int a2, const CGPath *a3, long long *a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = *(void *)(a5 + 8);
  v8[0] = *(unint64_t ***)a5;
  v8[1] = (unint64_t **)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)a1, a3, a4, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  return a1;
}

void sub_2558491EC(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

unint64_t EQKit::OpticalKern::Edge::Segment::closestBucketIndex(EQKit::OpticalKern::Edge::Segment *this, double a2)
{
  double v3 = a2 - (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 24))(this);
  float v4 = v3 / (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 56))(this);
  unint64_t v5 = vcvtms_s32_f32(v4);
  if ((v5 & 0x8000000000000000) != 0) {
    return 0;
  }
  if ((*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 48))(this) <= v5) {
    return (*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 48))(this) - 1;
  }
  return v5;
}

uint64_t EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(_DWORD *a1, _DWORD *a2, double *a3, _OWORD *a4, void **a5, double a6)
{
  char v6 = 0;
  if ((a1[2] & 0xFFFFFFFE) == 2 && a6 >= 0.0 && (a2[2] & 0xFFFFFFFE) != 2)
  {
    double v14 = (*(double (**)(_DWORD *))(*(void *)a2 + 40))(a2);
    if (v14 - (*(double (**)(_DWORD *))(*(void *)a1 + 40))(a1) >= a6
      || (double v15 = (*(double (**)(_DWORD *))(*(void *)a1 + 32))(a1) + a6,
          v15 <= (*(double (**)(_DWORD *))(*(void *)a2 + 24))(a2))
      || (double v16 = (*(double (**)(_DWORD *))(*(void *)a2 + 32))(a2) + a6,
          v16 <= (*(double (**)(_DWORD *))(*(void *)a1 + 24))(a1)))
    {
      char v6 = 0;
    }
    else
    {
      int v17 = a1[2];
      unint64_t v18 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1);
      unint64_t v19 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 48))(a2);
      unint64_t v20 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 88))(a1, 0);
      unint64_t v21 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 88))(a2, 0);
      char v6 = 0;
      if (v20 < v18)
      {
        unint64_t v22 = v21;
        unint64_t v104 = v19;
        if (v21 < v19)
        {
          double v98 = a3;
          double v97 = a4;
          unsigned int v23 = v17 & 0xFFFFFFFD;
          double v24 = a6 * a6;
          *(void *)&long long v120 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v20);
          *((void *)&v120 + 1) = v25;
          double v121 = v26;
          char v100 = 0;
          *(void *)&long long v118 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v22);
          *((void *)&v118 + 1) = v27;
          double v119 = v28;
          uint64_t v96 = (uint64_t)(a5 + 2);
          double v29 = 1.79769313e308;
          unint64_t v30 = v20;
          unint64_t v31 = v22;
          unsigned int v102 = v23;
          int v99 = a5;
          do
          {
            long long v116 = *MEMORY[0x263F00148];
            long long v117 = v116;
            double v32 = _determineBucketDistance((double *)&v120, (double *)&v118, v23 == 0, (double *)&v116);
            if (v32 < v24)
            {
              if (v32 < v29)
              {
                long long v33 = v117;
                _OWORD *v97 = v116;
                v97[1] = v33;
                double v29 = v32;
              }
              if (a5)
              {
                double v34 = a5[1];
                unint64_t v35 = (unint64_t)a5[2];
                if ((unint64_t)v34 >= v35)
                {
                  uint64_t v38 = ((char *)v34 - (unsigned char *)*a5) >> 5;
                  unint64_t v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 59) {
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v40 = v35 - (void)*a5;
                  if (v40 >> 4 > v39) {
                    unint64_t v39 = v40 >> 4;
                  }
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v41 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v41 = v39;
                  }
                  if (v41) {
                    uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v96, v41);
                  }
                  else {
                    uint64_t v42 = 0;
                  }
                  double v43 = &v42[32 * v38];
                  long long v44 = v117;
                  *(_OWORD *)double v43 = v116;
                  *((_OWORD *)v43 + 1) = v44;
                  float64x2_t v46 = (char *)*a5;
                  CGRect v45 = (char *)a5[1];
                  float64x2_t v47 = v43;
                  if (v45 != *a5)
                  {
                    do
                    {
                      long long v48 = *((_OWORD *)v45 - 1);
                      *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
                      *((_OWORD *)v47 - 1) = v48;
                      v47 -= 32;
                      v45 -= 32;
                    }
                    while (v45 != v46);
                    CGRect v45 = (char *)*a5;
                  }
                  uint64_t v37 = v43 + 32;
                  *a5 = v47;
                  a5[1] = v43 + 32;
                  a5[2] = &v42[32 * v41];
                  if (v45) {
                    operator delete(v45);
                  }
                }
                else
                {
                  long long v36 = v117;
                  _OWORD *v34 = v116;
                  v34[1] = v36;
                  uint64_t v37 = v34 + 2;
                }
                a5[1] = v37;
                unsigned int v23 = v102;
              }
              if (*(double *)&v118 < *(double *)&v120)
              {
                double v49 = v119;
                double v50 = *((double *)&v120 + 1);
                BOOL v51 = v121 > *((double *)&v118 + 1) && v119 > *((double *)&v120 + 1);
                if (!v51)
                {
                  if (v121 >= *((double *)&v118 + 1))
                  {
                    if (v23)
                    {
                      double v52 = v119;
                      double v49 = *(double *)&v118;
                      double v53 = *((double *)&v120 + 1);
                      double v50 = *(double *)&v120;
                    }
                    else
                    {
                      double v52 = *(double *)&v118;
                      double v53 = *(double *)&v120;
                    }
                  }
                  else
                  {
                    if (v23) {
                      double v52 = *((double *)&v118 + 1);
                    }
                    else {
                      double v52 = *(double *)&v118;
                    }
                    if (v23) {
                      double v49 = *(double *)&v118;
                    }
                    else {
                      double v49 = *((double *)&v118 + 1);
                    }
                    if (v23) {
                      double v53 = v121;
                    }
                    else {
                      double v53 = *(double *)&v120;
                    }
                    if (v23) {
                      double v50 = *(double *)&v120;
                    }
                    else {
                      double v50 = v121;
                    }
                  }
                  *(double *)&long long v116 = v53;
                  *((double *)&v116 + 1) = v50;
                  *(double *)&long long v117 = v52;
                  *((double *)&v117 + 1) = v49;
                }
              }
              double v54 = (*(double *)&v117 - *(double *)&v116) * (*(double *)&v117 - *(double *)&v116);
              if (!v23) {
                double v54 = (*((double *)&v117 + 1) - *((double *)&v116 + 1))
              }
                    * (*((double *)&v117 + 1) - *((double *)&v116 + 1));
              double v55 = *(double *)&v120 + sqrt(v24 - v54) - *(double *)&v118;
              if (*v98 >= v55) {
                double v55 = *v98;
              }
              double *v98 = v55;
              char v100 = 1;
            }
            unint64_t v56 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a1 + 88))(a1, v20 + 1);
            unint64_t v103 = v31;
            unint64_t v57 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a2 + 88))(a2, v31 + 1);
            unint64_t v31 = v57;
            if (v56 >= v18 || v57 >= v104)
            {
              if (v56 < v18)
              {
                *(void *)&long long v120 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v56);
                *((void *)&v120 + 1) = v80;
                double v121 = v81;
                unint64_t v31 = v103;
              }
              else
              {
                if (v57 >= v104) {
                  break;
                }
                *(void *)&long long v118 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v57);
                *((void *)&v118 + 1) = v59;
                double v119 = v60;
                unint64_t v56 = v20;
              }
              unint64_t v61 = v104;
            }
            else
            {
              unint64_t v101 = v20;
              BOOL v51 = v30 > v20;
              unint64_t v61 = v104;
              if (!v51)
              {
                double v62 = *(double *)&v120;
                unint64_t v30 = v56;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 72))(a1, v30) > v62) {
                    break;
                  }
                  unint64_t v30 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a1 + 88))(a1, v30 + 1);
                }
                while (v30 < v18);
              }
              if (v22 <= v103)
              {
                double v63 = *(double *)&v118;
                unint64_t v22 = v31;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 72))(a2, v22) < v63) {
                    break;
                  }
                  unint64_t v22 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a2 + 88))(a2, v22 + 1);
                }
                while (v22 < v104);
              }
              *(void *)&long long v114 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v56);
              *((void *)&v114 + 1) = v64;
              double v115 = v65;
              *(void *)&long long v112 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v31);
              *((void *)&v112 + 1) = v66;
              double v113 = v67;
              double v68 = _determineBucketDistance((double *)&v120, (double *)&v112, v23 == 0, (double *)v111);
              if (v22 >= v104)
              {
                unint64_t v77 = v22;
              }
              else
              {
                *(void *)&long long v105 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v22);
                *((void *)&v105 + 1) = v69;
                *(void *)&long long v106 = v70;
                long long v109 = *MEMORY[0x263F00148];
                long long v110 = v109;
                double v71 = _determineBucketDistance((double *)&v120, (double *)&v105, v23 == 0, (double *)&v109);
                if (v71 >= v68)
                {
                  double v72 = v68;
                  unint64_t v77 = v22;
                }
                else
                {
                  double v72 = v71;
                  if (v30 >= v18) {
                    unint64_t v73 = v101;
                  }
                  else {
                    unint64_t v73 = v30;
                  }
                  (*(void (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v73);
                  unint64_t v75 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 80))(a2, v74);
                  if (v31 <= v75) {
                    unint64_t v76 = v75;
                  }
                  else {
                    unint64_t v76 = v31;
                  }
                  unint64_t v77 = v22;
                  if (v76 < v22)
                  {
                    *(void *)&long long v105 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v76);
                    *((void *)&v105 + 1) = v78;
                    *(void *)&long long v106 = v79;
                    double v72 = _determineBucketDistance((double *)&v120, (double *)&v105, v102 == 0, (double *)&v109);
                    unint64_t v77 = v76;
                  }
                  if (v72 >= v68)
                  {
                    double v72 = v68;
                  }
                  else
                  {
                    double v113 = *(double *)&v106;
                    v111[0] = v109;
                    v111[1] = v110;
                    long long v112 = v105;
                    unint64_t v31 = v77;
                  }
                }
                double v68 = v72;
              }
              unsigned int v23 = v102;
              double v82 = _determineBucketDistance((double *)&v114, (double *)&v118, v102 == 0, (double *)&v109);
              if (v30 >= v18)
              {
                a5 = v99;
              }
              else
              {
                *(void *)&long long v107 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v30);
                *((void *)&v107 + 1) = v83;
                double v108 = v84;
                long long v105 = *MEMORY[0x263F00148];
                long long v106 = v105;
                double v85 = _determineBucketDistance((double *)&v107, (double *)&v118, v102 == 0, (double *)&v105);
                if (v85 >= v82)
                {
                  a5 = v99;
                  unsigned int v23 = v102;
                }
                else
                {
                  double v86 = v85;
                  if (v77 >= v104) {
                    unint64_t v87 = v103;
                  }
                  else {
                    unint64_t v87 = v77;
                  }
                  (*(void (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v87);
                  unint64_t v89 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a1 + 80))(a1, v88);
                  if (v56 <= v89) {
                    unint64_t v90 = v89;
                  }
                  else {
                    unint64_t v90 = v56;
                  }
                  unint64_t v91 = v30;
                  unsigned int v23 = v102;
                  if (v90 < v30)
                  {
                    *(void *)&long long v107 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v90);
                    *((void *)&v107 + 1) = v92;
                    double v108 = v93;
                    double v86 = _determineBucketDistance((double *)&v107, (double *)&v118, v102 == 0, (double *)&v105);
                    unint64_t v91 = v90;
                  }
                  a5 = v99;
                  if (v86 < v82)
                  {
                    long long v114 = v107;
                    double v115 = v108;
                    long long v109 = v105;
                    long long v110 = v106;
                    unint64_t v56 = v91;
                    double v82 = v86;
                  }
                }
              }
              if (v68 <= v82)
              {
                long long v118 = v112;
                double v119 = v113;
                unint64_t v56 = v101;
              }
              else
              {
                long long v120 = v114;
                double v121 = v115;
                unint64_t v31 = v103;
              }
            }
            BOOL v94 = v56 >= v18 || v31 >= v61;
            unint64_t v20 = v56;
          }
          while (!v94);
          char v6 = v100;
        }
      }
    }
  }
  return v6 & 1;
}

void EQKit::OpticalKern::Edge::PathSegment::minOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((void *)this + 6)) {
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(void *)this + 56))(this);
  }
}

void EQKit::OpticalKern::Edge::PathSegment::maxOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((void *)this + 6)) {
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(void *)this + 56))(this);
  }
}

double EQKit::OpticalKern::Edge::PathSegment::closestOffset(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *((double *)this + 5) + *(double *)(v1 + 56) * *((double *)this + 8);
  }
  else {
    return 0.0;
  }
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::bucketCount(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *(void *)(v1 + 24) - *(void *)(v1 + 16) + 1;
  }
  else {
    return 1;
  }
}

double EQKit::OpticalKern::Edge::PathSegment::bucketLength(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *((double *)this + 8) * (1.0 / (double)*(unint64_t *)(v1 + 8));
  }
  else {
    return 1.0;
  }
}

double EQKit::OpticalKern::Edge::PathSegment::bucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    return *((double *)this + 5) + *(double *)(*(void *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  }
  else {
    return 0.0;
  }
}

double EQKit::OpticalKern::Edge::PathSegment::offset(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    return *((double *)this + 5) + *(double *)(*(void *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  }
  else {
    return 0.0;
  }
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::nextValidBucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  if (!*((void *)this + 6)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return a2;
}

void EQKit::OpticalKern::Edge::PathSegment::appendToCGPath(EQKit::OpticalKern::Edge::PathSegment *this, CGPath *a2)
{
  uint64_t v2 = (int *)*((void *)this + 6);
  if (v2)
  {
    int v5 = *v2;
    unint64_t v6 = *((void *)v2 + 1);
    double v7 = *((double *)this + 8);
    memset(&v29, 0, sizeof(v29));
    CGAffineTransformMakeTranslation(&v29, *((CGFloat *)this + 2), *((CGFloat *)this + 3));
    uint64_t v8 = *((void *)v2 + 2);
    if (v8 <= *((void *)v2 + 3))
    {
      char v9 = 0;
      double v10 = v7 * (1.0 / (double)v6);
      double v11 = 0.0;
      do
      {
        uint64_t v12 = *((void *)v2 + 2);
        BOOL v13 = __OFSUB__(v8, v12);
        uint64_t v14 = v8 - v12;
        if (v14 < 0 != v13 || (uint64_t v15 = *((void *)v2 + 4), v14 >= (unint64_t)((*((void *)v2 + 5) - v15) >> 3)))
        {
          double v16 = 1.79769313e308;
          if ((*v2 & 0xFFFFFFFE) == 2) {
            double v16 = -1.79769313e308;
          }
        }
        else
        {
          double v16 = *(double *)(v15 + 8 * v14);
        }
        double v17 = v16 * *((double *)this + 8);
        if ((v9 & 1) == 0)
        {
          double v20 = (double)v8;
          if ((v5 | 2) == 2)
          {
            CGPathMoveToPoint(a2, &v29, v17, v10 * v20);
            uint64_t v21 = v8 + 1;
            double v22 = v10 * (double)(v8 + 1);
            unsigned int v23 = a2;
            double v24 = v17;
          }
          else
          {
            CGPathMoveToPoint(a2, &v29, v10 * v20, v17);
            uint64_t v21 = v8 + 1;
            double v24 = v10 * (double)(v8 + 1);
            unsigned int v23 = a2;
            double v22 = v17;
          }
          CGPathAddLineToPoint(v23, &v29, v24, v22);
          char v9 = 1;
          double v11 = v17;
          goto LABEL_22;
        }
        int v18 = v5 | 2;
        if (v17 == v11)
        {
          if (v18 != 2) {
            goto LABEL_20;
          }
        }
        else
        {
          double v19 = (double)v8;
          if (v18 != 2)
          {
            CGPathAddLineToPoint(a2, &v29, v10 * v19, v17);
LABEL_20:
            uint64_t v21 = v8 + 1;
            double v27 = v10 * (double)(v8 + 1);
            double v26 = a2;
            double v25 = v17;
            goto LABEL_21;
          }
          CGPathAddLineToPoint(a2, &v29, v17, v10 * v19);
        }
        uint64_t v21 = v8 + 1;
        double v25 = v10 * (double)(v8 + 1);
        double v26 = a2;
        double v27 = v17;
LABEL_21:
        CGPathAddLineToPoint(v26, &v29, v27, v25);
        char v9 = 1;
LABEL_22:
        uint64_t v2 = (int *)*((void *)this + 6);
        BOOL v28 = v8 < *((void *)v2 + 3);
        uint64_t v8 = v21;
      }
      while (v28);
    }
  }
}

double EQKit::OpticalKern::Edge::ParallelSegment::minOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4);
}

double EQKit::OpticalKern::Edge::ParallelSegment::maxOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4) + *((double *)this + 6);
}

double EQKit::OpticalKern::Edge::ParallelSegment::closestOffset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::bucketCount(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return 1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucketLength(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double result = *((double *)this + 6);
  if (result <= 0.0) {
    return 1.0;
  }
  return result;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucket(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double v1 = *((double *)this + 5);
  (*(void (**)(EQKit::OpticalKern::Edge::ParallelSegment *))(*(void *)this + 56))(this);
  return v1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::offset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::nextValidBucket(EQKit::OpticalKern::Edge::ParallelSegment *this, uint64_t a2)
{
  return a2;
}

void EQKit::OpticalKern::Edge::ParallelSegment::appendToCGPath(CGFloat *this, CGMutablePathRef path)
{
  if (path)
  {
    if ((*((_DWORD *)this + 2) | 2) == 2)
    {
      CGPathMoveToPoint(path, 0, this[5], this[4]);
      double v4 = this[5];
      double v5 = this[4] + this[6];
    }
    else
    {
      CGPathMoveToPoint(path, 0, this[4], this[5]);
      double v5 = this[5];
      double v4 = this[4] + this[6];
    }
    CGPathAddLineToPoint(path, 0, v4, v5);
  }
}

uint64_t EQKit::OpticalKern::Edge::Composite::Composite(uint64_t a1, int **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = a1;
  int v5 = *((_DWORD *)a2 + 6);
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v6 = *a2;
  if (*a2 == a2[1])
  {
    uint64_t v12 = 0;
    double v11 = 0;
  }
  else
  {
    int v7 = *((_DWORD *)a2 + 6);
    do
    {
      int v8 = *v6;
      if (*v6 == 1)
      {
        EQKit::OpticalKern::Spec::Entry::copyPath((EQKit::OpticalKern::Spec::Entry *)v6);
        operator new();
      }
      if (v8 == 2)
      {
        char v9 = (const __CTFont *)*((void *)v6 + 4);
        if (a4 && v9)
        {
          LOWORD(matrix.b) = *((_WORD *)v6 + 20);
          matrix.c = 12.0;
          LODWORD(matrix.d) = v7;
          *(void *)&matrix.a = CTFontCopyPostScriptName(v9);
          EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(a4, (uint64_t)&matrix, v19);
          v19[0] = 0;
          v19[1] = 0;
          EQKit::OpticalKern::Glyph::Key::~Key((const void **)&matrix);
          goto LABEL_14;
        }
        if (v9)
        {
          CopyWithAttributes = CTFontCreateCopyWithAttributes(*((CTFontRef *)v6 + 4), 12.0, 0, 0);
          if (CopyWithAttributes)
          {
            memset(&matrix, 0, sizeof(matrix));
            CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
            CTFontCreatePathForGlyph(CopyWithAttributes, *((_WORD *)v6 + 20), &matrix);
            operator new();
          }
LABEL_14:
          operator new();
        }
      }
      else if (v8 == 3)
      {
        operator new();
      }
      v6 += 18;
    }
    while (v6 != a2[1]);
    uint64_t v4 = a1;
    double v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(uint64_t **)(a1 + 16);
  }
  unint64_t v13 = 126 - 2 * __clz(((char *)v12 - (char *)v11) >> 4);
  v19[0] = (uint64_t (*)(uint64_t *, uint64_t *))_compareSegmentsMinOrthogonal;
  if (v12 == v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(v11, v12, v19, v14, 1);
  return v4;
}

void sub_25584A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = a12;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__swap_out_circular_buffer(a1, v18);
    char v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_25584AB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(uint64_t **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v7 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
  uint64_t v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    uint64_t v9 = v7[6];
    uint64_t v10 = (std::__shared_weak_count *)v7[7];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = v9;
    a3[1] = v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  pthread_rwlock_unlock(v6);
  if (!v8 && ((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v6);
    unint64_t v11 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
    if (v11)
    {
      v11[8] = **a1;
      uint64_t v12 = v11[6];
      uint64_t v13 = v11[7];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v16 = **a1;
      uint64_t v17 = a2;
      uint64_t v14 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v17);
      uint64_t v15 = (std::__shared_weak_count *)v14[7];
      v14[6] = 0;
      v14[7] = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      v14[8] = v16;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 48) = 1;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *a3 = v12;
    a3[1] = v13;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    pthread_rwlock_unlock(v6);
  }
}

void sub_25584ACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _compareSegmentsMinOrthogonal(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (*(void *)a2)
    {
      double v4 = (*(double (**)(uint64_t))(*(void *)result + 24))(result);
      return v4 < (*(double (**)(void))(**(void **)a2 + 24))();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold(int *a1, uint64_t a2, double *a3, double *a4, void **a5, double a6)
{
  int v6 = *a1;
  *a3 = 0.0;
  uint64_t v7 = *((void *)a1 + 1);
  if (v7 == *((void *)a1 + 2))
  {
    char v13 = 0;
  }
  else
  {
    char v13 = 0;
    unsigned int v29 = v6 & 0xFFFFFFFD;
    uint64_t v14 = (long long *)MEMORY[0x263F00148];
    do
    {
      uint64_t v27 = v7;
      uint64_t v16 = *(_DWORD **)v7;
      uint64_t v15 = *(std::__shared_weak_count **)(v7 + 8);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v28 = v15;
      uint64_t v18 = *(void *)(a2 + 8);
      uint64_t v17 = *(void *)(a2 + 16);
      while (v18 != v17)
      {
        double v19 = *(_DWORD **)v18;
        double v20 = *(std::__shared_weak_count **)(v18 + 8);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v30 = *v14;
        long long v31 = v30;
        if (v16
          && v19
          && EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(v16, v19, a3, &v30, a5, a6))
        {
          if ((v13 & 1) == 0
            || (!v29
              ? (double v21 = *(double *)&v31 - *(double *)&v30, v22 = a4[2], v23 = *a4)
              : (double v21 = *((double *)&v31 + 1) - *((double *)&v30 + 1), v22 = a4[3], v23 = a4[1]),
                v21 < v22 - v23))
          {
            long long v24 = v31;
            *(_OWORD *)a4 = v30;
            *((_OWORD *)a4 + 1) = v24;
          }
          char v13 = 1;
        }
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        uint64_t v17 = *(void *)(a2 + 16);
        v18 += 16;
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      uint64_t v7 = v27 + 16;
    }
    while (v27 + 16 != *((void *)a1 + 2));
  }
  return v13 & 1;
}

void sub_25584AF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

CGMutablePathRef EQKit::OpticalKern::Edge::Composite::newPathForEdge(EQKit::OpticalKern::Edge::Composite *this)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  if (Mutable)
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 1); i != *((uint64_t **)this + 2); i += 2)
    {
      uint64_t v4 = *i;
      unint64_t v5 = (std::__shared_weak_count *)i[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        (*(void (**)(uint64_t, CGMutablePathRef))(*(void *)v4 + 16))(v4, Mutable);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
  return Mutable;
}

void sub_25584AFF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::OpticalKern::Edge::PathSegment::~PathSegment(EQKit::OpticalKern::Edge::PathSegment *this)
{
  *(void *)this = &unk_27045A6C0;
  double v1 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_27045A6C0;
  double v1 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x25A290040);
}

void EQKit::OpticalKern::Edge::ParallelSegment::~ParallelSegment(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
}

void std::vector<double>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    double v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    double v21 = v18;
    do
    {
      *(void *)double v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    double v22 = &v15[8 * v14];
    double v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

double _determineBucketDistance(double *a1, double *a2, int a3, double *a4)
{
  double v4 = a2[1];
  double v5 = a2[2];
  double v7 = a1[1];
  double v6 = a1[2];
  if (v6 > v4 && v5 > v7)
  {
    if (v7 >= v4) {
      double v4 = a1[1];
    }
    if (v5 < v6) {
      double v6 = a2[2];
    }
    double v28 = v6 + v4;
    double v27 = v28 * 0.5;
    double v25 = *a1;
    if (a3) {
      double v24 = *a1;
    }
    else {
      double v24 = v28 * 0.5;
    }
    if (a3)
    {
      double v25 = v27;
      double v26 = *a2;
    }
    else
    {
      double v26 = v27;
    }
    if (!a3) {
      double v27 = *a2;
    }
  }
  else
  {
    if (a3) {
      double v9 = *a1;
    }
    else {
      double v9 = a1[1];
    }
    if (a3) {
      double v10 = a1[1];
    }
    else {
      double v10 = *a1;
    }
    if (a3) {
      double v11 = *a2;
    }
    else {
      double v11 = a2[2];
    }
    if (a3) {
      double v12 = a2[2];
    }
    else {
      double v12 = *a2;
    }
    if (a3) {
      double v13 = *a2;
    }
    else {
      double v13 = a2[1];
    }
    if (a3) {
      double v14 = a2[1];
    }
    else {
      double v14 = *a2;
    }
    if (a3) {
      double v15 = *a1;
    }
    else {
      double v15 = a1[2];
    }
    if (a3) {
      double v16 = a1[2];
    }
    else {
      double v16 = *a1;
    }
    if (v6 < v4)
    {
      double v9 = v15;
      double v10 = v16;
      double v11 = v13;
      double v12 = v14;
    }
    if (a3) {
      double v17 = *a2;
    }
    else {
      double v17 = a2[2];
    }
    if (a3) {
      double v18 = a2[2];
    }
    else {
      double v18 = *a2;
    }
    if (a3) {
      double v19 = *a2;
    }
    else {
      double v19 = a1[1];
    }
    if (a3)
    {
      double v20 = *a2;
    }
    else
    {
      double v7 = *a2;
      double v20 = a2[1];
    }
    if (a3) {
      double v21 = a2[1];
    }
    else {
      double v21 = *a2;
    }
    if (a3)
    {
      double v5 = *a2;
      double v22 = a1[2];
    }
    else
    {
      double v22 = *a2;
    }
    BOOL v23 = v6 < v4;
    if (v6 < v4) {
      double v24 = v5;
    }
    else {
      double v24 = v19;
    }
    if (v23) {
      double v25 = v22;
    }
    else {
      double v25 = v7;
    }
    if (v23) {
      double v26 = v20;
    }
    else {
      double v26 = v17;
    }
    if (v23) {
      double v27 = v21;
    }
    else {
      double v27 = v18;
    }
    if (*a2 >= *a1)
    {
      double v24 = v9;
      double v25 = v10;
      double v26 = v11;
      double v27 = v12;
    }
  }
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
  a4[3] = v27;
  double result = (v27 - v25) * (v27 - v25) + (v26 - v24) * (v26 - v24);
  if (*a2 < *a1 && a2[2] > a1[1] && a1[2] > a2[1]) {
    return -result;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>,std::reverse_iterator<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    double v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    double v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
LABEL_1:
  double v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v26 = *a3;
          double v27 = (std::__shared_weak_count *)*(a2 - 1);
          uint64_t v38 = *(a2 - 2);
          unint64_t v39 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v28 = (std::__shared_weak_count *)v11[1];
          uint64_t v36 = *v11;
          uint64_t v37 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v29 = v26(&v38, &v36);
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          if (v29)
          {
            uint64_t v30 = *v11;
            *double v11 = *(a2 - 2);
            *(a2 - 2) = v30;
            uint64_t v31 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v11 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v11 + 2, v11 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, a2, a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11 + 2, v17 - 2, a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)double v11 = *(_OWORD *)v17;
      *(_OWORD *)double v17 = v18;
      if (a5) {
        goto LABEL_21;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_21;
      }
    }
    double v19 = *a3;
    double v20 = (std::__shared_weak_count *)*(v11 - 1);
    uint64_t v34 = *(v11 - 2);
    unint64_t v35 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v21 = (std::__shared_weak_count *)v11[1];
    uint64_t v32 = *v11;
    long long v33 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v22 = v19(&v34, &v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if ((v22 & 1) == 0)
    {
      double v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(v11, a2, a3);
      goto LABEL_26;
    }
LABEL_21:
    BOOL v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(v11, a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_24;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v23, a3);
    double v11 = v23 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v23 + 2, a2, a3))
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_24:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(a1, v23, a3, -v13, a5 & 1);
      double v11 = v23 + 2;
LABEL_26:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, a2, a2, a3);
  }
}

  double v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 40, v11))
          {
            std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v11, a2 - 40);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, v11 + 40, a2 - 40, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, v11 + 40, v11 + 80, a2 - 40, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, v11 + 40, v11 + 80, v11 + 120, a2 - 40, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = v11 + 40 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, v11 + 40 * (v15 >> 1), a2 - 40, a3);
      long long v18 = 5 * v16;
      double v19 = v11 + 40 * v16 - 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11 + 40, v19, a2 - 80, a3);
      double v20 = v11 + 80;
      double v21 = v11 + 40 + 8 * v18;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v20, v21, a2 - 120, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v19, v17, v21, a3);
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11 + 40 * (v15 >> 1), v11, a2 - 40, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(a1 - 40, a1) & 1) == 0)
    {
      double v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, a2, (uint64_t (**)(unsigned char *, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    char v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, a2, (uint64_t (**)(uint64_t, unsigned char *))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    char v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v22, a3);
    double v11 = v22 + 40;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v22 + 40, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v24 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(a1, v22, a3, -v13, a5 & 1);
      double v11 = v22 + 40;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, a2, a3);
  }
}

  double v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((EQKit::StemStretch::Key *)((char *)a2 - 40), v11))
          {
            std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v11, (uint64_t)a2 - 40);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40), (uint64_t)a2 - 40, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40), (EQKit::StemStretch::Key *)((char *)v11 + 80), (uint64_t)a2 - 40, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40), (EQKit::StemStretch::Key *)((char *)v11 + 80), (EQKit::StemStretch::Key *)((char *)v11 + 120), (uint64_t)a2 - 40, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, a2, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = (EQKit::StemStretch::Key *)((char *)v11 + 40 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40 * (v15 >> 1)), (uint64_t)a2 - 40, a3);
      long long v18 = 5 * v16;
      double v19 = (EQKit::StemStretch::Key *)((char *)v11 + 40 * v16 - 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)((char *)v11 + 40), v19, (uint64_t)a2 - 80, a3);
      double v20 = (EQKit::StemStretch::Key *)((char *)v11 + 80);
      double v21 = (EQKit::StemStretch::Key *)((char *)v11 + 8 * v18 + 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v20, v21, (uint64_t)a2 - 120, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v19, v17, (uint64_t)v21, a3);
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)((char *)v11 + 40 * (v15 >> 1)), v11, (uint64_t)a2 - 40, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((EQKit::StemStretch::Key *)((char *)a1 - 40), a1) & 1) == 0)
    {
      double v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(unsigned char *, EQKit::StemStretch::Key *))a3);
      goto LABEL_18;
    }
LABEL_13:
    char v22 = (EQKit::StemStretch::Key *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(char *, unsigned char *))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    char v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v22, a3);
    double v11 = (EQKit::StemStretch::Key *)((char *)v22 + 40);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v22 + 40, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v24 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(a1, v22, a3, -v13, a5 & 1);
      double v11 = (EQKit::StemStretch::Key *)((char *)v22 + 40);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v11, a2, (uint64_t (**)(const EQKit::StemStretch::Key *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v11, a2, (uint64_t (**)(const EQKit::StemStretch::Key *, uint64_t))a3);
  }
}

void sub_25584B8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 == a2) {
    return;
  }
  char v5 = a1 + 2;
  if (a1 + 2 == a2) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  do
  {
    long long v9 = v8;
    uint64_t v8 = v5;
    uint64_t v10 = *a3;
    double v11 = (std::__shared_weak_count *)v9[3];
    uint64_t v31 = v9[2];
    uint64_t v32 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v9[1];
    uint64_t v29 = *v9;
    uint64_t v30 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = v10(&v31, &v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (!v13) {
      goto LABEL_32;
    }
    uint64_t v14 = *v8;
    unint64_t v15 = (std::__shared_weak_count *)v9[3];
    uint64_t v16 = v7;
    *uint64_t v8 = 0;
    v8[1] = 0;
    while (1)
    {
      double v17 = (char *)a1 + v16;
      long long v18 = *(_OWORD *)((char *)a1 + v16);
      *(void *)double v17 = 0;
      *((void *)v17 + 1) = 0;
      double v19 = *(std::__shared_weak_count **)((char *)a1 + v16 + 24);
      *((_OWORD *)v17 + 1) = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (!v16)
      {
        BOOL v23 = a1;
        goto LABEL_30;
      }
      double v20 = *a3;
      uint64_t v27 = v14;
      double v28 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v21 = *(std::__shared_weak_count **)((char *)a1 + v16 - 8);
      uint64_t v25 = *(uint64_t *)((char *)a1 + v16 - 16);
      double v26 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v22 = v20(&v27, &v25);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (!v28) {
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if ((v22 & 1) == 0) {
        goto LABEL_29;
      }
LABEL_27:
      v16 -= 16;
    }
    if (v22) {
      goto LABEL_27;
    }
LABEL_29:
    BOOL v23 = (uint64_t *)((char *)a1 + v16);
LABEL_30:
    char v24 = (std::__shared_weak_count *)v23[1];
    *BOOL v23 = v14;
    v23[1] = (uint64_t)v15;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
LABEL_32:
    char v5 = v8 + 2;
    v7 += 16;
  }
  while (v8 + 2 != a2);
}

void sub_25584BABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    double v4 = a1;
    char v5 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v7 = (std::__shared_weak_count **)(a1 + 3);
      do
      {
        uint64_t v8 = v4;
        double v4 = v5;
        long long v9 = *a3;
        uint64_t v10 = (std::__shared_weak_count *)v8[3];
        uint64_t v28 = v8[2];
        uint64_t v29 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v11 = (std::__shared_weak_count *)v8[1];
        uint64_t v26 = *v8;
        uint64_t v27 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v12 = v9(&v28, &v26);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v12)
        {
          int v13 = (std::__shared_weak_count *)*v4;
          uint64_t v14 = (std::__shared_weak_count *)v8[3];
          unint64_t v15 = v7;
          *double v4 = 0;
          v4[1] = 0;
          do
          {
            long long v16 = *(_OWORD *)(v15 - 3);
            *(v15 - 3) = 0;
            *(v15 - 2) = 0;
            double v17 = *v15;
            *(_OWORD *)(v15 - 1) = v16;
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            long long v18 = *a3;
            char v24 = v13;
            uint64_t v25 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            double v19 = *(v15 - 4);
            uint64_t v22 = (uint64_t)*(v15 - 5);
            BOOL v23 = v19;
            if (v19) {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v20 = v18((uint64_t *)&v24, &v22);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            v15 -= 2;
          }
          while ((v20 & 1) != 0);
          double v21 = *v15;
          *(v15 - 1) = v13;
          *unint64_t v15 = v14;
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        char v5 = v4 + 2;
        v7 += 2;
      }
      while (v4 + 2 != a2);
    }
  }
}

void sub_25584BC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(void *a1, void *a2, void *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t v8 = *a4;
  uint64_t v10 = (std::__shared_weak_count **)(a2 + 1);
  long long v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v55 = *a2;
  unint64_t v56 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count **)(a1 + 1);
  double v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v53 = *a1;
  double v54 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v13 = v8(&v55, &v53);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  uint64_t v14 = *a4;
  unint64_t v15 = (std::__shared_weak_count **)(a3 + 1);
  if (v13)
  {
    long long v16 = *v15;
    uint64_t v43 = *a3;
    long long v44 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v17 = (std::__shared_weak_count *)a2[1];
    uint64_t v41 = *a2;
    uint64_t v42 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = v14(&v43, &v41);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    uint64_t v19 = *a1;
    if (v18)
    {
      *a1 = *a3;
      *a3 = v19;
      uint64_t result = 1;
LABEL_49:
      uint64_t v10 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_50;
    }
    *a1 = *a2;
    *a2 = v19;
    uint64_t v31 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v31;
    uint64_t v32 = *a4;
    long long v33 = (std::__shared_weak_count *)a3[1];
    uint64_t v39 = *a3;
    uint64_t v40 = v33;
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v31 = *v10;
    }
    uint64_t v37 = *a2;
    uint64_t v38 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v34 = v32(&v39, &v37);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    if (v34)
    {
      uint64_t v35 = *a2;
      *a2 = *a3;
      *a3 = v35;
      uint64_t result = 2;
      int v12 = v10;
      goto LABEL_49;
    }
  }
  else
  {
    double v21 = *v15;
    uint64_t v51 = *a3;
    double v52 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)a2[1];
    uint64_t v49 = *a2;
    double v50 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v23 = v14(&v51, &v49);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if ((v23 & 1) == 0) {
      return 0;
    }
    uint64_t v24 = *a2;
    *a2 = *a3;
    *a3 = v24;
    uint64_t v25 = a2[1];
    a2[1] = a3[1];
    a3[1] = v25;
    uint64_t v26 = *a4;
    uint64_t v27 = (std::__shared_weak_count *)a2[1];
    uint64_t v47 = *a2;
    long long v48 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)a1[1];
    uint64_t v45 = *a1;
    float64x2_t v46 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v29 = v26(&v47, &v45);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    if (v29)
    {
      uint64_t v30 = *a1;
      *a1 = *a2;
      *a2 = v30;
      uint64_t result = 2;
LABEL_50:
      uint64_t v36 = *v12;
      *int v12 = *v10;
      *uint64_t v10 = v36;
      return result;
    }
  }
  return 1;
}

void sub_25584BFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  double v4 = a2;
  uint64_t v7 = *a1;
  char v6 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v8 = *a3;
  uint64_t v56 = v7;
  unint64_t v57 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (std::__shared_weak_count *)*(a2 - 1);
  uint64_t v54 = *(a2 - 2);
  uint64_t v55 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = v8(&v56, &v54);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (v10)
  {
    uint64_t i = a1;
    do
    {
      int v12 = *a3;
      uint64_t v52 = v7;
      uint64_t v53 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v13 = (std::__shared_weak_count *)i[3];
      uint64_t v50 = i[2];
      uint64_t v51 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = v12(&v52, &v50);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      i += 2;
    }
    while ((v14 & 1) == 0);
  }
  else
  {
    for (uint64_t i = a1 + 2; i < v4; i += 2)
    {
      unint64_t v15 = *a3;
      uint64_t v48 = v7;
      uint64_t v49 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = (std::__shared_weak_count *)i[1];
      uint64_t v46 = *i;
      uint64_t v47 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v17 = v15(&v48, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (v17) {
        break;
      }
    }
  }
  if (i < v4)
  {
    do
    {
      int v18 = *a3;
      uint64_t v44 = v7;
      uint64_t v45 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (std::__shared_weak_count *)*(v4 - 1);
      uint64_t v42 = *(v4 - 2);
      uint64_t v43 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v20 = v18(&v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      v4 -= 2;
    }
    while ((v20 & 1) != 0);
  }
  while (i < v4)
  {
    uint64_t v21 = *i;
    *uint64_t i = *v4;
    *double v4 = v21;
    uint64_t v22 = i[1];
    i[1] = v4[1];
    v4[1] = v22;
    do
    {
      char v23 = *a3;
      uint64_t v40 = v7;
      uint64_t v41 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)i[3];
      uint64_t v38 = i[2];
      uint64_t v39 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v23(&v40, &v38);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      i += 2;
    }
    while (!v25);
    do
    {
      uint64_t v26 = *a3;
      uint64_t v36 = v7;
      uint64_t v37 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = (std::__shared_weak_count *)*(v4 - 1);
      uint64_t v34 = *(v4 - 2);
      uint64_t v35 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v28 = v26(&v36, &v34);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      v4 -= 2;
    }
    while ((v28 & 1) != 0);
  }
  int v29 = (long long *)(i - 2);
  if (i - 2 != a1)
  {
    long long v30 = *v29;
    *(void *)int v29 = 0;
    *(i - 1) = 0;
    uint64_t v31 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v30;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  uint64_t v32 = (std::__shared_weak_count *)*(i - 1);
  *(i - 2) = v7;
  *(i - 1) = (uint64_t)v6;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  return i;
}

void sub_25584C340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v29 = *(std::__shared_weak_count **)(v27 - 104);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  long long v30 = *(std::__shared_weak_count **)(v27 - 88);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  do
  {
    long long v9 = *a3;
    char v10 = (std::__shared_weak_count *)a1[v6 + 3];
    uint64_t v56 = a1[v6 + 2];
    unint64_t v57 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v8;
    uint64_t v55 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v11 = v9(&v56, &v54);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    v6 += 2;
  }
  while ((v11 & 1) != 0);
  int v12 = &a1[v6];
  if (v6 == 2)
  {
    if (v12 < a2)
    {
      for (a2 -= 2; ; a2 -= 2)
      {
        char v17 = *a3;
        int v18 = (std::__shared_weak_count *)a2[1];
        uint64_t v52 = *a2;
        uint64_t v53 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = v8;
        uint64_t v51 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v19 = v17(&v52, &v50);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        char v20 = v12 >= a2 ? 1 : v19;
        if (v20) {
          break;
        }
      }
    }
  }
  else
  {
    do
    {
      uint64_t v14 = *(a2 - 2);
      char v13 = (std::__shared_weak_count *)*(a2 - 1);
      a2 -= 2;
      unint64_t v15 = *a3;
      uint64_t v48 = v14;
      uint64_t v49 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v46 = v8;
      uint64_t v47 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v16 = v15(&v48, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
    }
    while ((v16 & 1) == 0);
  }
  if (v12 >= a2)
  {
    uint64_t v21 = &a1[v6];
  }
  else
  {
    uint64_t v21 = &a1[v6];
    uint64_t v22 = a2;
    do
    {
      uint64_t v23 = *v21;
      *uint64_t v21 = *v22;
      *uint64_t v22 = v23;
      uint64_t v24 = v21[1];
      v21[1] = v22[1];
      v22[1] = v24;
      do
      {
        uint64_t v26 = v21[2];
        int v25 = (std::__shared_weak_count *)v21[3];
        v21 += 2;
        uint64_t v27 = *a3;
        uint64_t v44 = v26;
        uint64_t v45 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v42 = v8;
        uint64_t v43 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v28 = v27(&v44, &v42);
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
      }
      while ((v28 & 1) != 0);
      do
      {
        uint64_t v30 = *(v22 - 2);
        int v29 = (std::__shared_weak_count *)*(v22 - 1);
        v22 -= 2;
        uint64_t v31 = *a3;
        uint64_t v40 = v30;
        uint64_t v41 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = v8;
        uint64_t v39 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v32 = v31(&v40, &v38);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
      }
      while (!v32);
    }
    while (v21 < v22);
  }
  long long v33 = (long long *)(v21 - 2);
  if (v21 - 2 != a1)
  {
    long long v34 = *v33;
    *(void *)long long v33 = 0;
    *(v21 - 1) = 0;
    uint64_t v35 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v34;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  uint64_t v36 = (std::__shared_weak_count *)*(v21 - 1);
  *(v21 - 2) = v8;
  *(v21 - 1) = (uint64_t)v7;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  return v21 - 2;
}

void sub_25584C6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  double v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3;
      long long v9 = (std::__shared_weak_count *)*(a2 - 1);
      uint64_t v44 = *(a2 - 2);
      uint64_t v45 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v10 = (std::__shared_weak_count *)a1[1];
      uint64_t v42 = *a1;
      uint64_t v43 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = v8(&v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      if (v11)
      {
        uint64_t v12 = *a1;
        *a1 = *(v4 - 2);
        *(v4 - 2) = v12;
        uint64_t v13 = a1[1];
        a1[1] = *(v4 - 1);
        *(v4 - 1) = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v14 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a3);
      unint64_t v15 = a1 + 6;
      if (a1 + 6 == v4) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      int v32 = v4;
      break;
  }
  while (1)
  {
    int v18 = *a3;
    char v19 = (std::__shared_weak_count *)v15[1];
    uint64_t v40 = *v15;
    uint64_t v41 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v20 = (std::__shared_weak_count *)v14[1];
    uint64_t v38 = *v14;
    uint64_t v39 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v18(&v40, &v38);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v21)
    {
      int v33 = v17;
      uint64_t v22 = *v15;
      uint64_t v23 = (std::__shared_weak_count *)v15[1];
      uint64_t v24 = v16;
      *unint64_t v15 = 0;
      v15[1] = 0;
      while (1)
      {
        int v25 = (char *)a1 + v24;
        long long v26 = *(_OWORD *)((char *)a1 + v24 + 32);
        *((void *)v25 + 4) = 0;
        *((void *)v25 + 5) = 0;
        uint64_t v27 = *(std::__shared_weak_count **)((char *)a1 + v24 + 56);
        *((_OWORD *)v25 + 3) = v26;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v24 == -32) {
          break;
        }
        char v28 = *a3;
        uint64_t v36 = v22;
        uint64_t v37 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v29 = *(std::__shared_weak_count **)((char *)a1 + v24 + 24);
        uint64_t v34 = *(uint64_t *)((char *)a1 + v24 + 16);
        uint64_t v35 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = v28(&v36, &v34);
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (v37)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          if ((v30 & 1) == 0)
          {
            uint64_t v14 = (uint64_t *)((char *)a1 + v24 + 32);
            goto LABEL_40;
          }
        }
        else if (!v30)
        {
          goto LABEL_40;
        }
        v14 -= 2;
        v24 -= 16;
      }
      uint64_t v14 = a1;
LABEL_40:
      uint64_t v31 = (std::__shared_weak_count *)v14[1];
      *uint64_t v14 = v22;
      v14[1] = (uint64_t)v23;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      int v17 = v33 + 1;
      double v4 = v32;
      if (v33 == 7) {
        return v15 + 2 == v32;
      }
    }
    uint64_t v14 = v15;
    v16 += 16;
    v15 += 2;
    if (v15 == v4) {
      return 1;
    }
  }
}

void sub_25584CA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a5);
  char v10 = *a5;
  int v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v38 = *a4;
  uint64_t v39 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v36 = *a3;
  uint64_t v37 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = v10(&v38, &v36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v13)
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = a3[1];
    a3[1] = a4[1];
    a4[1] = v15;
    uint64_t v16 = *a5;
    int v17 = (std::__shared_weak_count *)a3[1];
    uint64_t v34 = *a3;
    uint64_t v35 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = (std::__shared_weak_count *)a2[1];
    uint64_t v32 = *a2;
    int v33 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = v16(&v34, &v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v19)
    {
      uint64_t v20 = *a2;
      *a2 = *a3;
      *a3 = v20;
      uint64_t v21 = a2[1];
      a2[1] = a3[1];
      a3[1] = v21;
      uint64_t v22 = *a5;
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      uint64_t v30 = *a2;
      uint64_t v31 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)a1[1];
      uint64_t v28 = *a1;
      int v29 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v22(&v30, &v28);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v25)
      {
        uint64_t v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
        uint64_t v27 = a1[1];
        a1[1] = a2[1];
        a2[1] = v27;
      }
    }
  }
}

void sub_25584CC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  int v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v50 = *a5;
  uint64_t v51 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v48 = *a4;
  uint64_t v49 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = v12(&v50, &v48);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (v15)
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = a4[1];
    a4[1] = a5[1];
    a5[1] = v17;
    int v18 = *a6;
    int v19 = (std::__shared_weak_count *)a4[1];
    uint64_t v46 = *a4;
    uint64_t v47 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (std::__shared_weak_count *)a3[1];
    uint64_t v44 = *a3;
    uint64_t v45 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v18(&v46, &v44);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (v21)
    {
      uint64_t v22 = *a3;
      *a3 = *a4;
      *a4 = v22;
      uint64_t v23 = a3[1];
      a3[1] = a4[1];
      a4[1] = v23;
      uint64_t v24 = *a6;
      int v25 = (std::__shared_weak_count *)a3[1];
      uint64_t v42 = *a3;
      uint64_t v43 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = (std::__shared_weak_count *)a2[1];
      uint64_t v40 = *a2;
      uint64_t v41 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v27 = v24(&v42, &v40);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v27)
      {
        uint64_t v28 = *a2;
        *a2 = *a3;
        *a3 = v28;
        uint64_t v29 = a2[1];
        a2[1] = a3[1];
        a3[1] = v29;
        uint64_t v30 = *a6;
        uint64_t v31 = (std::__shared_weak_count *)a2[1];
        uint64_t v38 = *a2;
        uint64_t v39 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = (std::__shared_weak_count *)a1[1];
        uint64_t v36 = *a1;
        uint64_t v37 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v33 = v30(&v38, &v36);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v33)
        {
          uint64_t v34 = *a1;
          *a1 = *a2;
          *a2 = v34;
          uint64_t v35 = a1[1];
          a1[1] = a2[1];
          a2[1] = v35;
        }
      }
    }
  }
}

void sub_25584CF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      do
      {
        int v15 = *a4;
        uint64_t v16 = (std::__shared_weak_count *)v14[1];
        uint64_t v26 = *v14;
        int v27 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (std::__shared_weak_count *)a1[1];
        uint64_t v24 = *a1;
        int v25 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v18 = v15(&v26, &v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v18)
        {
          uint64_t v19 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v19;
          uint64_t v20 = v14[1];
          v14[1] = a1[1];
          a1[1] = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v21 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, v6, (uint64_t (**)(long long *, uint64_t *))a4, v21);
        v6 -= 16;
      }
      while (v21-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_25584D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  char v5 = a4;
  uint64_t v6 = a1;
  uint64_t v36 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v9 = ((uint64_t)a4 - a1) >> 3;
  uint64_t v10 = v9 + 1;
  unint64_t v11 = (long long *)(a1 + 16 * (v9 + 1));
  uint64_t v12 = v9 + 2;
  if (v9 + 2 < a3)
  {
    uint64_t v13 = *a2;
    long long v50 = *v11;
    if (*((void *)&v50 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 3);
    uint64_t v48 = *((void *)v11 + 2);
    uint64_t v49 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v13((uint64_t *)&v50, &v48);
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
    if (*((void *)&v50 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
      if ((v15 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (v15)
    {
LABEL_12:
      ++v11;
      uint64_t v10 = v12;
    }
  }
LABEL_13:
  uint64_t v16 = *a2;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v11 + 1);
  uint64_t v46 = *(void *)v11;
  uint64_t v47 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v18 = (std::__shared_weak_count *)v5[1];
  uint64_t v44 = *v5;
  uint64_t v45 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v19 = v16(&v46, &v44);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v21 = *v5;
    uint64_t v20 = (std::__shared_weak_count *)v5[1];
    *char v5 = 0;
    v5[1] = 0;
    uint64_t v35 = v6;
    while (1)
    {
      uint64_t v22 = (uint64_t *)v11;
      long long v23 = *v11;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      uint64_t v24 = (std::__shared_weak_count *)v5[1];
      *(_OWORD *)char v5 = v23;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v36 < v10)
      {
LABEL_48:
        uint64_t v34 = (std::__shared_weak_count *)v22[1];
        *uint64_t v22 = v21;
        v22[1] = (uint64_t)v20;
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        return;
      }
      uint64_t v25 = 2 * v10;
      uint64_t v10 = (2 * v10) | 1;
      unint64_t v11 = (long long *)(v6 + 16 * v10);
      uint64_t v26 = v25 + 2;
      if (v25 + 2 < a3)
      {
        int v27 = (uint64_t (*)(long long *, uint64_t *))*a2;
        long long v28 = *v11;
        long long v43 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (std::__shared_weak_count *)*((void *)v11 + 3);
        uint64_t v41 = *((void *)v11 + 2);
        uint64_t v42 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = v27(&v43, &v41);
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        if (!*((void *)&v43 + 1))
        {
          if (!v30) {
            goto LABEL_36;
          }
LABEL_35:
          ++v11;
          uint64_t v10 = v26;
          goto LABEL_36;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
        if (v30) {
          goto LABEL_35;
        }
      }
LABEL_36:
      uint64_t v31 = *a2;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v11 + 1);
      uint64_t v39 = *(void *)v11;
      uint64_t v40 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = v21;
      uint64_t v38 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v33 = v31(&v39, &v37);
      uint64_t v6 = v35;
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      char v5 = v22;
      if (v33) {
        goto LABEL_48;
      }
    }
  }
}

void sub_25584D410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (*(void *)(v24 - 88)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v24 - 88));
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t *), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      int v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_25584D584(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(long long *, uint64_t *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_14;
    }
    uint64_t v12 = *a2;
    long long v13 = *(_OWORD *)v9;
    long long v21 = v13;
    if (*((void *)&v13 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v9 + 24);
    uint64_t v19 = *(void *)(v9 + 16);
    uint64_t v20 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v12(&v21, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (*((void *)&v21 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      if ((v15 & 1) == 0) {
        goto LABEL_14;
      }
LABEL_13:
      v9 += 16;
      uint64_t v6 = v11;
      goto LABEL_14;
    }
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    long long v16 = *(_OWORD *)v9;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void sub_25584D6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(a1 + 16 * (v4 >> 1));
    uint64_t v10 = *a3;
    long long v11 = *(_OWORD *)v9;
    long long v29 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a2 - 8);
    long long v13 = (void *)(a2 - 16);
    uint64_t v27 = *(void *)(a2 - 16);
    long long v28 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v14 = v10(&v29, &v27);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 - 16);
      int v15 = *(std::__shared_weak_count **)(a2 - 8);
      void *v13 = 0;
      v13[1] = 0;
      do
      {
        uint64_t v17 = v9;
        long long v18 = *(_OWORD *)v9;
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v19 = (std::__shared_weak_count *)v13[1];
        *(_OWORD *)long long v13 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(a1 + 16 * v8);
        uint64_t v20 = *a3;
        long long v21 = *(_OWORD *)v9;
        long long v26 = v21;
        if (*((void *)&v21 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = v16;
        uint64_t v25 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v22 = v20(&v26, &v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (*((void *)&v26 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
        }
        long long v13 = v17;
      }
      while ((v22 & 1) != 0);
      long long v23 = (std::__shared_weak_count *)v17[1];
      *uint64_t v17 = v16;
      v17[1] = v15;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
  }
}

void sub_25584D854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__clear[abi:ne180100]((uint64_t *)v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_25584DA18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25A290040);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_25584DBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25A290040);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 32);
    if (v2)
    {
      *(void *)(a2 + 40) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x25A290040);
  }
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::PathSegment,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_25584DD0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25A290040);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(void *a1, uint64_t a2)
{
  CFHashCode v4 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v4 = CFHash((CFTypeRef)v4);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
    if (v6 >= *(void *)&v5) {
      CFHashCode v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = v6 & (*(void *)&v5 - 1);
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      long long v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 8) << 16;
  CFHashCode v10 = v8 ^ *(unsigned int *)(a2 + 24);
  unint64_t v11 = v10 ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ v9;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    int v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (void *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v11)
          {
            if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v16 + 2), a2)) {
              return v16;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(a1, v11, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t v16 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:ne180100](v27, 0);
  return v16;
}

void sub_25584E170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *CFHashCode v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:ne180100]<EQKit::OpticalKern::Glyph::Key const&>((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25584E1E0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:ne180100]<EQKit::OpticalKern::Glyph::Key const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>((EQKit::OpticalKern::Glyph::Key *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>(EQKit::OpticalKern::Glyph::Key *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  EQKit::OpticalKern::Glyph::Key::~Key((const void **)this);
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_25584E358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25A290040);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void EQKit::OpticalKern::Spec::Entry::~Entry(EQKit::OpticalKern::Spec::Entry *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const CGPath *a3)
{
  *(_DWORD *)this = 1;
  *(CGPoint *)((char *)this + 8) = a2;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = -1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  if (a3) {
    CFRetain(a3);
  }
  return this;
}

void sub_25584E4C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  *(_DWORD *)this = 2;
  *(CGPoint *)((char *)this + 8) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a3;
  *((_WORD *)this + 20) = a4;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  if (a3) {
    CFRetain(a3);
  }
  return this;
}

void sub_25584E528(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, const EQKit::OpticalKern::Spec::Entry *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  unint64_t v4 = (const void *)*((void *)a2 + 3);
  uint64_t v3 = (const void *)*((void *)a2 + 4);
  *((void *)this + 3) = v4;
  *((void *)this + 4) = v3;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (v4)
  {
    CFRetain(v4);
    uint64_t v3 = (const void *)*((void *)this + 4);
  }
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

void sub_25584E5A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

CGPathRef EQKit::OpticalKern::Spec::Entry::copyPath(EQKit::OpticalKern::Spec::Entry *this)
{
  if (*((void *)this + 3))
  {
    uint64_t v1 = (const void *)*((void *)this + 3);
    return (CGPathRef)CFRetain(v1);
  }
  else
  {
    uint64_t v3 = (const __CTFont *)*((void *)this + 4);
    if (!v3) {
      return 0;
    }
    int v4 = *((unsigned __int16 *)this + 20);
    if (v4 == 0xFFFF)
    {
      return 0;
    }
    else
    {
      memset(&v5, 0, sizeof(v5));
      CGAffineTransformMakeScale(&v5, 1.0, -1.0);
      return CTFontCreatePathForGlyph(v3, v4, &v5);
    }
  }
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const CGPath *a3)
{
  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v6, a2, a3);
  unint64_t v4 = *((void *)this + 1);
  if (v4 >= *((void *)this + 2))
  {
    uint64_t v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t *)this, (const EQKit::OpticalKern::Spec::Entry *)v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v6);
    uint64_t v5 = v4 + 72;
    *((void *)this + 1) = v4 + 72;
  }
  *((void *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v6);
}

void sub_25584E6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v7, a2, a3, a4);
  unint64_t v5 = *((void *)this + 1);
  if (v5 >= *((void *)this + 2))
  {
    uint64_t v6 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t *)this, (const EQKit::OpticalKern::Spec::Entry *)v7);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v7);
    uint64_t v6 = v5 + 72;
    *((void *)this + 1) = v5 + 72;
  }
  *((void *)this + 1) = v6;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v7);
}

void sub_25584E764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, double a3)
{
  int v6 = 3;
  CGPoint v7 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __int16 v10 = -1;
  double v11 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v4 = *((void *)this + 1);
  if (v4 >= *((void *)this + 2))
  {
    uint64_t v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t *)this, (const EQKit::OpticalKern::Spec::Entry *)&v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)&v6);
    uint64_t v5 = v4 + 72;
    *((void *)this + 1) = v4 + 72;
  }
  *((void *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)&v6);
}

void sub_25584E810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>(uint64_t *a1, const EQKit::OpticalKern::Spec::Entry *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    __int16 v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(v7, v9);
  }
  else {
    __int16 v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = (EQKit::OpticalKern::Spec::Entry *)&v10[72 * v4];
  uint64_t v16 = &v10[72 * v9];
  EQKit::OpticalKern::Spec::Entry::Entry(v14, a2);
  int v15 = (char *)v14 + 72;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_25584E93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (EQKit::OpticalKern::Spec::Entry *)(v11 + v10);
    v10 -= 72;
    EQKit::OpticalKern::Spec::Entry::Entry(v12, (const EQKit::OpticalKern::Spec::Entry *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void EQKit::Kerning::Manager::~Manager(EQKit::Kerning::Manager *this)
{
  uint64_t v1 = *(void *)this;
  if (v1)
  {
    uint64_t v2 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(v1);
    MEMORY[0x25A290040](v2, 0x10E0C40B27302BALL);
  }
}

void EQKit::Kerning::Manager::Manager(EQKit::Kerning::Manager *this, const EQKit::Environment::Version *a2, NSDictionary *a3)
{
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = *(void *)a2 > 1uLL;
  unint64_t v4 = (EQKit::Kerning::Manager *)((char *)this + 24);
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = (NSDictionary *)EQKitUtilDynamicCast(v5, (uint64_t)[(NSDictionary *)a3 objectForKey:@"quantization"]);
  EQKitPath::QuantizationConfig::QuantizationConfig(v4, v6);
  operator new();
}

void sub_25584EC90(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit7Kerning7ManagerC2ERKNS_11Environment7VersionEP12NSDictionary_block_invoke()
{
}

void sub_25584ED4C(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1080C4076FF3075);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Kerning::Manager::beginLayout(uint64_t this)
{
  return this;
}

uint64_t EQKit::Kerning::Manager::endLayout(uint64_t ***this)
{
  return EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(*this);
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6[8];
          EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v18, (uint64_t)(v6 + 2));
          uint64_t v19 = v5 - v7;
          unint64_t v8 = v21;
          if (v21 >= v22)
          {
            uint64_t v9 = std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>(&v20, (uint64_t)v18);
          }
          else
          {
            EQKit::OpticalKern::Glyph::Key::Key(v21, (uint64_t)v18);
            *(void *)(v8 + 32) = v19;
            uint64_t v9 = v8 + 40;
          }
          unint64_t v21 = v9;
          EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v18);
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        uint64_t v10 = v20;
        unint64_t v11 = v21;
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v10 = 0;
      }
      unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v10) >> 3));
      size_t v23 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(uint64_t, uint64_t))&v23, v13, 1);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v20) >> 3);
      int v15 = a1[8];
      unint64_t v16 = v14 - (void)v15;
      if (v14 > (unint64_t)v15)
      {
        uint64_t v17 = 40 * (void)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(a1 + 1, v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((unsigned char *)a1 + 4++*(void *)(this + 8) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_25584EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(void *a1, int a2, void *a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10)
{
  double v58 = 0.0;
  double v10 = 0.0;
  if (*((unsigned char *)a1 + 16))
  {
    [a3 erasableBounds];
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    [a5 erasableBounds];
    CGFloat y = v61.origin.y;
    CGFloat x = v61.origin.x;
    CGFloat height = v61.size.height;
    CGFloat width = v61.size.width;
    CGFloat MinX = CGRectGetMinX(v61);
    double v28 = a8;
    double v29 = a10;
    double v42 = v28;
    double v30 = v28 + MinX;
    v62.origin.CGFloat x = v20;
    v62.origin.CGFloat y = v22;
    v62.size.CGFloat width = v24;
    v62.size.CGFloat height = v26;
    if (v30 - (a6 + CGRectGetMaxX(v62)) < v29)
    {
      double v31 = v29;
      memset(v56, 0, sizeof(v56));
      int v57 = 2;
      memset(v54, 0, sizeof(v54));
      int v55 = 0;
      if (a2 == 2)
      {
        v63.origin.CGFloat x = v20;
        v63.origin.CGFloat y = v22;
        v63.size.CGFloat width = v24;
        v63.size.CGFloat height = v26;
        double MaxX = CGRectGetMaxX(v63);
        double v33 = a9;
        v64.origin.CGFloat x = v20;
        v64.origin.CGFloat y = v22;
        v64.size.CGFloat width = v24;
        v64.size.CGFloat height = v26;
        double MinY = CGRectGetMinY(v64);
        v65.origin.CGFloat x = v20;
        v65.origin.CGFloat y = v22;
        v65.size.CGFloat width = v24;
        v65.size.CGFloat height = v26;
        double v35 = CGRectGetHeight(v65);
        v59.CGFloat y = a7 + MinY;
        v59.CGFloat x = a6 + MaxX;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v56, v59, v35);
        int v32 = 1;
      }
      else
      {
        int v32 = 0;
        double v33 = a9;
        if (!a2) {
          int v32 = objc_msgSend(a3, "appendOpticalAlignToSpec:offset:", v56, a6, a7);
        }
      }
      if (a4 == 2)
      {
        v66.origin.CGFloat y = y;
        v66.origin.CGFloat x = x;
        v66.size.CGFloat height = height;
        v66.size.CGFloat width = width;
        double v37 = CGRectGetMinX(v66);
        v67.origin.CGFloat y = y;
        v67.origin.CGFloat x = x;
        v67.size.CGFloat height = height;
        v67.size.CGFloat width = width;
        double v38 = CGRectGetMinY(v67);
        v68.origin.CGFloat y = y;
        v68.origin.CGFloat x = x;
        v68.size.CGFloat height = height;
        v68.size.CGFloat width = width;
        double v39 = CGRectGetHeight(v68);
        v60.CGFloat y = v33 + v38;
        v60.CGFloat x = v42 + v37;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v54, v60, v39);
        int v36 = 1;
      }
      else
      {
        if (a4)
        {
LABEL_13:
          uint64_t v52 = v54;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          v54[0] = (void **)v56;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100](v54);
          return v58;
        }
        int v36 = objc_msgSend(a5, "appendOpticalAlignToSpec:offset:", v54, v42, v33);
      }
      if ((v32 & v36) == 1)
      {
        EQKit::OpticalKern::Edge::Composite::Composite(&v52, v56, a1 + 3, *a1);
        EQKit::OpticalKern::Edge::Composite::Composite(&v50, v54, a1 + 3, *a1);
        v49[0] = *MEMORY[0x263F00148];
        v49[1] = v49[0];
        EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold((int *)&v52, (uint64_t)&v50, &v58, (double *)v49, 0, v31);
        *(void *)&v49[0] = &v51;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
        long long v50 = (void **)&v53;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&v50);
      }
      goto LABEL_13;
    }
  }
  return v10;
}

void sub_25584F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,void ***a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  a17 = (void **)(v30 + 8);
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a22 = (void **)&a27;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&a22);
  a26 = &a30;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a30 = (void **)(v31 - 168);
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100](&a30);
  _Unwind_Resume(a1);
}

void std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(v4 - 72));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(uint64_t a1)
{
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>((EQKit::OpticalKern::Glyph::Key *)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_2558BE170;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_25584F458(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    double v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(v7, v9);
  }
  else {
    double v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[40 * v4];
  uint64_t v15 = (uint64_t)v14;
  unint64_t v16 = &v10[40 * v9];
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v14, a2);
  *((void *)v14 + 4) = *(void *)(a2 + 32);
  v15 += 40;
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_25584F584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      EQKit::OpticalKern::Glyph::Key::Key(a7 + v11 - 40, a3 + v11 - 40);
      *(void *)(a7 + v11 - ++*(void *)(this + 8) = *(void *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_25584F698(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 40)
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 40;
    if (a1 + 40 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v5;
        if ((*a3)(v5, v8))
        {
          EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v13, v9);
          uint64_t v14 = *(void *)(v8 + 72);
          uint64_t v10 = v7;
          while (1)
          {
            EQKit::OpticalKern::Glyph::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(void *)(a1 + v10 + 72) = *(void *)(a1 + v10 + 32);
            if (!v10) {
              break;
            }
            char v11 = (*a3)((uint64_t)v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          EQKit::OpticalKern::Glyph::Key::operator=(v12, (uint64_t)v13);
          *(void *)(v12 + 32) = v14;
          EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v13);
        }
        uint64_t v5 = v9 + 40;
        v7 += 40;
        uint64_t v8 = v9;
      }
      while (v9 + 40 != a2);
    }
  }
}

void sub_25584FC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 40;
    if (a1 + 40 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if ((*a3)(v5, v4))
        {
          EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v8, v7);
          uint64_t v9 = *(void *)(v4 + 72);
          do
          {
            EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, v4);
            *(void *)(v4 + 72) = *(void *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)((uint64_t)v8, v4) & 1) != 0);
          EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, (uint64_t)v8);
          *(void *)(v4 + 72) = v9;
          EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v8);
        }
        uint64_t v5 = v7 + 40;
        uint64_t v4 = v7;
      }
      while (v7 + 40 != a2);
    }
  }
}

void sub_25584FD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a2, a3);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    goto LABEL_9;
  }
  if (!result)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2);
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v10 = a2;
    uint64_t v11 = a3;
LABEL_9:
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a3);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(unsigned char *, unint64_t))
{
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v10, a1);
  uint64_t v11 = *(void *)(a1 + 32);
  if ((*a3)(v10, a2 - 40))
  {
    unint64_t v6 = a1;
    do
      v6 += 40;
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = a1 + 40;
    do
    {
      unint64_t v6 = v7;
      if (v7 >= a2) {
        break;
      }
      int v8 = (*a3)(v10, v7);
      unint64_t v7 = v6 + 40;
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v6, a2);
    do
      v6 += 40;
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, a2) & 1) != 0);
  }
  if (v6 - 40 != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v6 - 40);
    *(void *)(a1 + 32) = *(void *)(v6 - 8);
  }
  EQKit::OpticalKern::Glyph::Key::operator=(v6 - 40, (uint64_t)v10);
  *(void *)(v6 - ++*(void *)(this + 8) = v11;
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v10);
  return v6;
}

void sub_25584FF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, unsigned char *))
{
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v12, a1);
  uint64_t v6 = 0;
  uint64_t v13 = *(void *)(a1 + 32);
  do
  {
    char v7 = (*a3)(a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  unint64_t v8 = a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)(a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, v12));
  }
  unint64_t v9 = a1 + v6;
  if (v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v9, v10);
      do
        v9 += 40;
      while (((*a3)(v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)(v10, v12));
    }
    while (v9 < v10);
  }
  if (v9 - 40 != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v9 - 40);
    *(void *)(a1 + 32) = *(void *)(v9 - 8);
  }
  EQKit::OpticalKern::Glyph::Key::operator=(v9 - 40, (uint64_t)v12);
  *(void *)(v9 - ++*(void *)(this + 8) = v13;
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v12);
  return v9 - 40;
}

void sub_2558500DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  BOOL v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)(a2 - 40, a1)) {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2 - 40);
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return v6;
    default:
      uint64_t v7 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a1 + 80, a3);
      uint64_t v8 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    uint64_t v7 = v8;
    v9 += 40;
    v8 += 40;
    if (v8 == a2) {
      return 1;
    }
  }
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v15, v8);
  uint64_t v16 = *(void *)(v8 + 32);
  uint64_t v11 = v9;
  while (1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(void *)(a1 + v11 + 152) = *(void *)(a1 + v11 + 112);
    if (v11 == -80) {
      break;
    }
    char v12 = (*a3)((uint64_t)v15, a1 + v11 + 40);
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  uint64_t v13 = a1;
LABEL_12:
  EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
  *(void *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v15);
    goto LABEL_14;
  }
  BOOL v6 = v8 + 40 == a2;
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v15);
  return v6;
}

void sub_255850310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v5, a1);
  EQKit::OpticalKern::Glyph::Key::operator=(a1, a2);
  EQKit::OpticalKern::Glyph::Key::operator=(a2, (uint64_t)v5);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v5);
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
}

void sub_2558503A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a2, a3);
      if ((*a5)(a2, a1))
      {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a3, a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a2, a3);
        if ((*a6)(a2, a1))
        {
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2);
        }
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 40 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a4, v9, v12);
        v12 -= 40;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a4, v9, a1);
        }
        v14 += 40;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 41)
    {
      unint64_t v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a4 - a1) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * ((a4 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 40 * v10;
      int64_t v12 = 0x999999999999999ALL * ((a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        int64_t v10 = v12;
      }
      if (((*a2)(v11, v5) & 1) == 0)
      {
        EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v15, v5);
        uint64_t v16 = *(void *)(v5 + 32);
        do
        {
          uint64_t v13 = v11;
          EQKit::OpticalKern::Glyph::Key::operator=(v5, v11);
          *(void *)(v5 + 32) = *(void *)(v11 + 32);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          uint64_t v11 = a1 + 40 * v14;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            int64_t v10 = v14;
          }
          uint64_t v5 = v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
        *(void *)(v13 + 32) = v16;
        EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v15);
      }
    }
  }
}

void sub_25585082C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v10, a1);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, (uint64_t)v10);
      *(void *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, a2 - 40);
      *(void *)(v9 + 32) = *(void *)(a2 - 8);
      EQKit::OpticalKern::Glyph::Key::operator=(a2 - 40, (uint64_t)v10);
      *(void *)(a2 - ++*(void *)(this + 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v9 + 40, (uint64_t (**)(uint64_t, uint64_t))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - a1) >> 3));
    }
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v10);
  }
}

void sub_255850930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      uint64_t v10 = v11;
    }
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v9);
    *(void *)(a1 + 32) = *(void *)(v9 + 32);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 40 * (v4 >> 1);
    uint64_t v10 = a2 - 40;
    if ((*a3)(v9, a2 - 40))
    {
      EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v12, v10);
      uint64_t v13 = *(void *)(a2 - 8);
      do
      {
        uint64_t v11 = v9;
        EQKit::OpticalKern::Glyph::Key::operator=(v10, v9);
        *(void *)(v10 + 32) = *(void *)(v9 + 32);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 40 * v8;
        uint64_t v10 = v11;
      }
      while (((*a3)(v9, (uint64_t)v12) & 1) != 0);
      EQKit::OpticalKern::Glyph::Key::operator=(v11, (uint64_t)v12);
      *(void *)(v11 + 32) = v13;
      EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v12);
    }
  }
}

void sub_255850AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:ne180100](v4, 0);
    return 1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + ++*(void *)(this + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint8x8_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(v4 - 40));
      while (v4 != v2);
      uint8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKitLayoutManager::EQKitLayoutManager(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *(void *)(a1 + 40) = [a3 kerningManager];
  *(void *)(a1 + 4++*(void *)(this + 8) = [a3 layoutConfig];
  [a2 baseFontSize];
  double v9 = v8;
  uint64_t v10 = (const Collection *)EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[a3 fontManager]);
  unint64_t v11 = (NSString *)[a2 baseFontName];
  if (objc_opt_respondsToSelector()) {
    [a2 textMacroFontSize];
  }
  else {
    [a2 baseFontSize];
  }
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)(a1 + 56), v9, v10, v11, v12, 1);
  *(_OWORD *)(a1 + 20++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 44++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 36++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 52++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 60++*(void *)(this + 8) = a3;
  *(void *)(a1 + 616) = a4;
  *(void *)a1 = a2;
  [a2 baseFontSize];
  *(void *)(a1 + ++*(void *)(this + 8) = v13;
  [a2 containerSize];
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v15;
  uint64_t v16 = (const void *)[a2 baseFontName];
  *(void *)(a1 + 32) = v16;
  if (v16) {
    CFRetain(v16);
  }
  double v17 = *(double *)(a1 + 8);
  uint64_t v18 = (const Collection *)EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[a3 fontManager]);
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)v20, v17, v18, (NSString *)[a2 baseFontName], *(double *)(a1 + 136), 1);
  std::deque<EQKitLayoutContext>::push_back((void *)(a1 + 256), (EQKitLayoutContext *)v20);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v20);
  return a1;
}

void sub_2558515EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)va);
  std::deque<EQKitLayoutTable>::~deque[abi:ne180100](v4 + 44);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:ne180100](v4 + 38);
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table((uint64_t)(v4 + 33));
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](v4 + 27);
  uint64_t v7 = (void *)v2[50];
  if (v7)
  {
    v2[51] = v7;
    operator delete(v7);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:ne180100](v2 + 44);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](v2 + 38);
  std::deque<EQKitLayoutContext>::~deque[abi:ne180100](v5);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](v4);
  EQKitLayoutContext::~EQKitLayoutContext(v3);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::~EQKitLayoutManager(id *this)
{
  id v2 = this[4];
  if (v2) {
    CFRelease(v2);
  }
  std::deque<EQKitLayoutTable>::~deque[abi:ne180100](this + 70);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:ne180100](this + 64);
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table((uint64_t)(this + 59));
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 53);
  id v3 = this[50];
  if (v3)
  {
    this[51] = v3;
    operator delete(v3);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:ne180100](this + 44);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 38);
  std::deque<EQKitLayoutContext>::~deque[abi:ne180100](this + 32);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 26);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)(this + 7));
}

unint64_t EQKitLayoutManager::layoutContext(EQKitLayoutManager *this)
{
  uint64_t v1 = *((void *)this + 37);
  if (v1) {
    return *(void *)(*((void *)this + 33) + 8 * ((v1 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
         + 152 * ((v1 + *((void *)this + 36) - 1) % 0x1AuLL);
  else {
    return (unint64_t)this + 56;
  }
}

double EQKitLayoutManager::leftSpaceForOperator(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 296);
  if (v4) {
    unint64_t v5 = *(void *)(*(void *)(a1 + 264) + 8 * ((v4 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
  }
       + 152 * ((v4 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v5 = a1 + 56;
  }
  uint64_t v6 = [*(id *)(a1 + 608) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  double v9 = (EQKitLength *)EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    double v11 = EQKitLength::resolveToAbsoluteWithSize(v9, *(double *)(v5 + 24));
    if (v11 != 0.0)
    {
      unint64_t v12 = *(void *)(a1 + 392) + *(void *)(a1 + 384) - 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 360) + 8 * (v12 / 0x19)) + 160 * (v12 % 0x19) + 152) == 2)
      {
        if (*((char *)v10 + 48) < 0)
        {
          double v14 = *((double *)v10 + 5);
        }
        else
        {
          uint64_t v13 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 64))(v13, 1);
        }
        double v11 = v11 * v14;
      }
    }
  }
  else
  {
    double v11 = 0.0;
  }

  return EQKitLayoutManager::lengthForAttribute((void *)a1, 10, (uint64_t)a2, v11);
}

uint64_t EQKitLayoutManager::operatorForm(uint64_t a1, void *a2)
{
  unsigned int v14 = 0;
  uint64_t v4 = *(void *)(a1 + 616);
  uint64_t v15 = a2;
  int v16 = 15;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 344, (uint64_t)&v15, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    unsigned int v6 = [a2 operatorId];
    uint64_t result = EQKit::Config::Operator::Dictionary::formForOperatorId((EQKit::Config::Operator::Dictionary *)[*(id *)(a1 + 608) operatorDictionary], v6);
    unsigned int v14 = result;
    if (!result)
    {
      char v7 = EQKit::Config::Operator::Dictionary::formMaskForOperatorId((EQKit::Config::Operator::Dictionary *)[*(id *)(a1 + 608) operatorDictionary], v6);
      uint64_t v8 = *(void *)(a1 + 248);
      if (v8) {
        uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 216)
      }
                                   + (((unint64_t)(v8 + *(void *)(a1 + 240) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v8 + *(void *)(a1 + 240) - 1) & 0x1FF));
      char v9 = v8 & v7;
      if ((v7 & 8) != 0) {
        int v10 = 3;
      }
      else {
        int v10 = 2;
      }
      if ((v7 & 2) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = v10;
      }
      if ((v9 & 4) != 0) {
        int v12 = 2;
      }
      else {
        int v12 = v11;
      }
      if ((v9 & 8) != 0) {
        unsigned int v13 = 3;
      }
      else {
        unsigned int v13 = v12;
      }
      if ((v9 & 2) != 0) {
        return 1;
      }
      else {
        return v13;
      }
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::fontCollection(id *this)
{
  uint64_t v1 = (EQKit::Font::Manager *)[this[76] fontManager];

  return EQKit::Font::Manager::fontCollection(v1);
}

double EQKitLayoutManager::lengthForAttribute(void *a1, int a2, uint64_t a3, double a4)
{
  LODWORD(v10[0]) = 1;
  v10[1] = 0.0;
  uint64_t v11 = a3;
  uint64_t v6 = a1[77];
  int v12 = a2;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v6, v6 + 32, (uint64_t)&v11, (uint64_t)v10))
  {
    uint64_t v7 = a1[37];
    if (v7) {
      uint64_t v8 = *(void *)(a1[33] + 8 * ((v7 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v7 + a1[36] - 1) % 0x1AuLL);
    }
    else {
      uint64_t v8 = (uint64_t)(a1 + 7);
    }
    return EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v10, v8, a4);
  }
  return a4;
}

double EQKitLayoutManager::rightSpaceForOperator(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 296);
  if (v4) {
    unint64_t v5 = *(void *)(*(void *)(a1 + 264) + 8 * ((v4 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
  }
       + 152 * ((v4 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v5 = a1 + 56;
  }
  uint64_t v6 = [*(id *)(a1 + 608) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t v9 = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    double v11 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)(v9 + 16), *(double *)(v5 + 24));
    if (v11 != 0.0)
    {
      unint64_t v12 = *(void *)(a1 + 392) + *(void *)(a1 + 384) - 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 360) + 8 * (v12 / 0x19)) + 160 * (v12 % 0x19) + 152) == 2)
      {
        if (*(char *)(v10 + 48) < 0)
        {
          double v14 = *(double *)(v10 + 40);
        }
        else
        {
          uint64_t v13 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 64))(v13, 1);
        }
        double v11 = v11 * v14;
      }
    }
  }
  else
  {
    double v11 = 0.0;
  }

  return EQKitLayoutManager::lengthForAttribute((void *)a1, 11, (uint64_t)a2, v11);
}

CGPath *EQKitLayoutManager::createPathForNotation(void *a1, void *a2, int a3)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  [a2 width];
  double v8 = v7;
  [a2 vsize];
  double v10 = v9.n128_f64[0];
  uint64_t v11 = a1[37];
  if (v11) {
    unint64_t v12 = *(void *)(a1[33] + 8 * ((v11 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v11 + a1[36] - 1) % 0x1AuLL);
  }
  else {
    unint64_t v12 = (unint64_t)(a1 + 7);
  }
  uint64_t v13 = *(void *)(v12 + 88);
  if (*(unsigned char *)(v12 + 120)) {
    v9.n128_u64[0] = *(void *)(v12 + 128);
  }
  else {
    v9.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v12);
  }
  double v14 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v13 + 56))(v13, 24, v12 + 8, v9);
  double v15 = v14;
  switch(a3)
  {
    case 1:
      double v16 = -v14;
      double v17 = v10 + v14;
      uint64_t v18 = Mutable;
      double v19 = -v14;
      goto LABEL_13;
    case 2:
      CGPathMoveToPoint(Mutable, 0, -v14, -v14);
      double v20 = v8 + v15;
      goto LABEL_11;
    case 3:
      double v20 = v8 * 0.5;
      CGPathMoveToPoint(Mutable, 0, v20, -v14);
LABEL_11:
      double v16 = v10 + v15;
      goto LABEL_14;
    case 4:
      double v19 = -v14;
      double v16 = v10 * 0.5;
      uint64_t v18 = Mutable;
      double v17 = v10 * 0.5;
LABEL_13:
      CGPathMoveToPoint(v18, 0, v19, v17);
      double v20 = v8 + v15;
LABEL_14:
      CGPathAddLineToPoint(Mutable, 0, v20, v16);
      break;
    default:
      return Mutable;
  }
  return Mutable;
}

EQKitBox *EQKitLayoutManager::layoutExpression(EQKitLayoutManager *a1, void *a2, void *a3, void *a4, void *a5, double *a6, BOOL *a7)
{
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  *a3 = 0;
  v26[3] = a3;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  *a4 = 0;
  v25[3] = a4;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  *a5 = 0;
  v24[3] = a5;
  *a6 = 1.79769313e308;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v23[3] = 0;
  LODWORD(v18[0]) = 0;
  uint64_t v11 = *((void *)a1 + 77);
  id v19 = a2;
  int v20 = 7;
  unsigned int v12 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v11, v11 + 320, (uint64_t)&v19, v18) ^ 1;
  if (!LODWORD(v18[0])) {
    unsigned int v12 = 1;
  }
  if (LODWORD(v18[0]) == 2) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  EQKitLayoutManager::beginRow(a1, 1, 0);
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke;
  v22[3] = &unk_2653C4F08;
  v22[4] = a2;
  v22[5] = v23;
  v22[6] = v26;
  v22[7] = v25;
  v22[8] = v24;
  v22[9] = a1;
  EQKitLayoutManager::layout(a1, a2, 0, v13, 0, (uint64_t)v22);
  EQKitLayoutManager::endRow(a1, (EQKit::ILayout *)&v19);
  double v14 = (EQKitBox *)v19;
  if (*(unsigned char *)(*((void *)a1 + 6) + 5)) {
    char v15 = v13;
  }
  else {
    char v15 = 1;
  }
  BOOL v16 = (v15 & 1) == 0 && (v21 & 0x1C00u) > 0x800;
  *a7 = v16;
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v18, 0, 0.0);
  if (EQKit::ILayout::getOffsetOfKind((uint64_t)&v19, 1, v18)) {
    *a6 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v18, v14);
  }
  EQKit::ILayoutOffset::~ILayoutOffset(v18);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v19);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  return v14;
}

void sub_255852068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 80), 8);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::beginRow(EQKitLayoutManager *this, char a2, BOOL a3)
{
  if ((a2 & 1) != 0 || (uint64_t v3 = *((void *)this + 49)) == 0)
  {
    unint64_t v5 = (void *)((char *)this + 352);
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v6, a3);
    std::deque<EQKitLayoutRow>::push_back(v5, (EQKitLayoutRow *)v6);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v6);
  }
  else
  {
    uint64_t v4 = *(void *)(*((void *)this + 45) + 8 * ((v3 + *((void *)this + 48) - 1) / 0x19uLL))
       + 160 * ((v3 + *((void *)this + 48) - 1) % 0x19uLL);
    EQKitLayoutRow::beginNestedRow(v4);
  }
}

void sub_255852188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke(void *a1, uint64_t a2)
{
  if (a1[4] == a2)
  {
    uint64_t v3 = (void *)a1[9];
    uint64_t v4 = v3[37];
    if (*(unsigned char *)(v3[6] + 4))
    {
      if (v4) {
        unint64_t v5 = *(void *)(v3[33] + 8 * ((v4 + v3[36] - 1) / 0x1AuLL)) + 152 * ((v4 + v3[36] - 1) % 0x1AuLL);
      }
      else {
        unint64_t v5 = (unint64_t)(v3 + 7);
      }
      CFStringRef v7 = (const __CFString *)v3[4];
      if (v7) {
        CFStringRef v8 = v7;
      }
      else {
        CFStringRef v8 = @"Times New Roman";
      }
      __n128 v9 = CTFontCreateWithName(v8, *(CGFloat *)(v5 + 24), 0);
    }
    else
    {
      if (v4) {
        uint64_t v6 = (EQKitLayoutContext *)(*(void *)(v3[33] + 8 * ((v4 + v3[36] - 1) / 0x1AuLL))
      }
                                  + 152 * ((v4 + v3[36] - 1) % 0x1AuLL));
      else {
        uint64_t v6 = (EQKitLayoutContext *)(v3 + 7);
      }
      double v10 = (const void *)EQKitLayoutContext::font(v6);
      __n128 v9 = (void *)CFRetain(v10);
    }
    *(void *)(*(void *)(a1[5] + 8) + 24) = v9;
    uint64_t v11 = *(const __CTFont **)(*(void *)(a1[5] + 8) + 24);
    if (v11)
    {
      **(CGFloat **)(*(void *)(a1[6] + 8) + 24) = CTFontGetAscent(v11);
      **(CGFloat **)(*(void *)(a1[7] + 8) + 24) = CTFontGetDescent(*(CTFontRef *)(*(void *)(a1[5] + 8) + 24));
      **(CGFloat **)(*(void *)(a1[8] + 8) + 24) = CTFontGetLeading(*(CTFontRef *)(*(void *)(a1[5] + 8) + 24));
      unsigned int v12 = *(const void **)(*(void *)(a1[5] + 8) + 24);
      CFRelease(v12);
    }
  }
}

void EQKitLayoutManager::endRow(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  EQKit::ILayout::ILayout(a2, 0);
  unint64_t v4 = *((void *)this + 49);
  if (v4)
  {
    unint64_t v5 = v4 + *((void *)this + 48) - 1;
    uint64_t v6 = *(void *)(*((void *)this + 45) + 8 * (v5 / 0x19));
    unint64_t v7 = v5 % 0x19;
    CFStringRef v8 = (EQKitLayoutRow *)(v6 + 160 * v7);
    if (*((void *)v8 + 8))
    {
      EQKitLayoutRow::endNestedRow(v6 + 160 * v7);
    }
    else if (v4 >= 2 && *(unsigned char *)(v6 + 160 * v7 + 156))
    {
      EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v10, (const EQKitLayoutRow *)(v6 + 160 * v7));
      std::deque<EQKitLayoutRow>::pop_back((void *)this + 44);
      unint64_t v9 = *((void *)this + 49) + *((void *)this + 48) - 1;
      EQKitLayoutRow::addChild((EQKitLayoutRow *)(*(void *)(*((void *)this + 45) + 8 * (v9 / 0x19)) + 160 * (v9 % 0x19)), (const EQKitLayoutRow *)v10);
      EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v10);
    }
    else
    {
      EQKitLayoutRow::resolveKerning((EQKitLayoutRow *)(v6 + 160 * v7), *((const EQKit::Kerning::Manager **)this + 5));
      EQKitLayoutRow::overallLayout(v8, v10);
      EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v10);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
      std::deque<EQKitLayoutRow>::pop_back((void *)this + 44);
    }
  }
}

void sub_25585248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, EQKit::ILayout *a4@<X8>)
{
  uint64_t v4 = *((void *)a1 + 37);
  if (v4) {
    unint64_t v5 = *(void *)(*((void *)a1 + 33) + 8 * ((v4 + *((void *)a1 + 36) - 1) / 0x1AuLL))
  }
       + 152 * ((v4 + *((void *)a1 + 36) - 1) % 0x1AuLL);
  else {
    unint64_t v5 = (unint64_t)a1 + 56;
  }
  EQKitLayoutManager::layoutBox(a1, a2, 0, *(unsigned __int8 *)(v5 + 16), 0, 0, a3, a4);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, EQKit::ILayout *a8@<X8>)
{
  EQKitLayoutManager::beginRow(a1, 1, 0);
  unint64_t v16 = *((void *)a1 + 49) + *((void *)a1 + 48) - 1;
  *(_DWORD *)(*(void *)(*((void *)a1 + 45) + 8 * (v16 / 0x19)) + 160 * (v16 % 0x19) + 152) = a5;
  EQKitLayoutManager::layout(a1, a2, a3, a4, a6, a7);

  EQKitLayoutManager::endRow(a1, a8);
}

void EQKitLayoutManager::layout(EQKitLayoutManager *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a6;
  v39[0] = a2;
  unint64_t v11 = *((void *)a1 + 37) + *((void *)a1 + 36) - 1;
  uint64_t v12 = *(void *)(*((void *)a1 + 33) + 8 * (v11 / 0x1A));
  if (a6) {
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back((void *)a1 + 38, &v38);
  }
  LODWORD(v35[0]) = 0;
  uint64_t v13 = *((void *)a1 + 77);
  int v36 = a2;
  int v37 = 8;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v13, v13 + 8, (uint64_t)&v36, v35);
  if (LODWORD(v35[0]) == 2)
  {
    a4 = 1;
  }
  else if (LODWORD(v35[0]) == 1)
  {
    a4 = 0;
  }
  BOOL isOperatorPaddingRequired = EQKitLayoutManager::isOperatorPaddingRequired(a1);
  unint64_t v16 = (void *)*((void *)a1 + 51);
  unint64_t v15 = *((void *)a1 + 52);
  int v34 = isOperatorPaddingRequired;
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v18 = *((void *)a1 + 50);
    uint64_t v19 = ((uint64_t)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v15 - v18;
    uint64_t v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
      uint64_t v21 = v19 + 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      char v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)a1 + 416, v22);
    }
    else {
      char v23 = 0;
    }
    char v24 = &v23[8 * v19];
    double v25 = &v23[8 * v22];
    *(void *)char v24 = a2;
    double v17 = v24 + 8;
    uint64_t v27 = (char *)*((void *)a1 + 50);
    CGFloat v26 = (char *)*((void *)a1 + 51);
    if (v26 != v27)
    {
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *((void *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      CGFloat v26 = (char *)*((void *)a1 + 50);
    }
    *((void *)a1 + 50) = v24;
    *((void *)a1 + 51) = v17;
    *((void *)a1 + 52) = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *unint64_t v16 = a2;
    double v17 = v16 + 1;
  }
  *((void *)a1 + 51) = v17;
  id v29 = v39[0];
  EQKitLayoutContext::EQKitLayoutContext(&v36, a1, v12 + 152 * (v11 % 0x1A), v39[0], a3, a4, a5);
  std::deque<EQKitLayoutContext>::push_back((void *)a1 + 32, (EQKitLayoutContext *)&v36);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)&v36);
  int isEmbellishedOperatorRoot = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, v29);
  if (isEmbellishedOperatorRoot) {
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back((void *)a1 + 53, v39);
  }
  EQKit::Layout::Schemata::Schemata((uint64_t)&v36);
  *(id *)&v35[0] = v39[0];
  uint64_t v31 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((void *)a1 + 59, v35);
  if (v31)
  {
    EQKitLayoutManager::schemataForStretchedOperator((uint64_t)a1, (uint64_t)(v31 + 3), (uint64_t)v35);
    EQKit::Layout::Schemata::operator=((uint64_t)&v36, (uint64_t)v35);
  }
  else
  {
    if (v39[0]) {
      [v39[0] layoutSchemata];
    }
    else {
      memset(v35, 0, sizeof(v35));
    }
    EQKit::Layout::Schemata::operator=((uint64_t)&v36, (uint64_t)v35);
  }
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v35);
  if (isEmbellishedOperatorRoot) {
    id v32 = v39[0];
  }
  else {
    id v32 = 0;
  }
  EQKitLayoutManager::layoutSchemata(a1, (EQKit::Layout::Schemata *)&v36, v34, v32);
  uint64_t v33 = *((void *)a1 + 43);
  if (v33) {
    (*(void (**)(void))(*(void *)(*(void *)(*((void *)a1 + 39)
  }
                                              + (((unint64_t)(v33 + *((void *)a1 + 42) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v33 + *((void *)a1 + 42) - 1) & 0x1FF))
                      + 16))();
  if (isEmbellishedOperatorRoot)
  {
    --*((void *)a1 + 58);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100]((void *)a1 + 53, 1);
  }
  std::deque<EQKitLayoutContext>::pop_back((void *)a1 + 32);
  *((void *)a1 + 51) -= 8;
  if (v38)
  {
    --*((void *)a1 + 43);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100]((void *)a1 + 38, 1);
  }
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v36);
}

void sub_25585292C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layout(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[37];
  if (v3) {
    unint64_t v4 = *(void *)(a1[33] + 8 * ((v3 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v3 + a1[36] - 1) % 0x1AuLL);
  }
  else {
    unint64_t v4 = (unint64_t)(a1 + 7);
  }
  return EQKitLayoutManager::layout(a1, a2, 0, *(unsigned __int8 *)(v4 + 16), 0, a3);
}

void EQKitLayoutManager::layoutIntoRow(uint64_t a1, EQKitLayoutRow *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  EQKitLayoutManager::layout(a1, a3, a4, a5, 0, a6);
  uint64_t v12 = *(void *)(a1 + 392);
  if (v12)
  {
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v14, (const EQKitLayoutRow *)(*(void *)(*(void *)(a1 + 360) + 8 * ((v12 + *(void *)(a1 + 384) - 1) / 0x19uLL))+ 160 * ((v12 + *(void *)(a1 + 384) - 1) % 0x19uLL)));
    EQKitLayoutRow::operator=(a2, (EQKitLayoutRow *)v14);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v14);
    EQKitLayoutRow::resolveKerning(a2, *(const EQKit::Kerning::Manager **)(a1 + 40));
    EQKitLayoutRow::buildAlignmentGroups(a2);
  }
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)v13);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v13);
}

void sub_255852AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addHSpace(EQKitLayoutManager *this, double a2)
{
  if (a2 != 0.0)
  {
    uint64_t v3 = [[EQKitHSpace alloc] initWithWidth:a2];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v5, &v3->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v5, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v5, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v4, (const EQKit::ILayout *)v5);
    EQKitLayoutManager::addRowChild(this, (uint64_t)v4, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v4);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v5);
  }
}

void sub_255852B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void EQKitLayoutManager::addRowChild(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[49])
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 32);
    int v7 = (v6 >> 4) & 3;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (v7 != 3)
    {
      EQKitLayoutManager::lengthForMetric((uint64_t)a1, (v7 + 30));
      uint64_t v9 = v10;
      LOWORD(v6) = *(_WORD *)(a2 + 32);
    }
    int v11 = v6 >> 6;
    if (v11 != 3)
    {
      EQKitLayoutManager::lengthForMetric((uint64_t)a1, (v11 + 30));
      uint64_t v8 = v12;
    }
    *(void *)(a2 + 40) = v9;
    *(void *)(a2 + 4++*(void *)(this + 8) = v8;
    unint64_t v13 = a1[49] + a1[48] - 1;
    uint64_t v14 = *(void *)(a1[45] + 8 * (v13 / 0x19)) + 160 * (v13 % 0x19);
    EQKitLayoutRow::addChild(v14, a3, (const EQKit::ILayout *)a2);
  }
}

void EQKitLayoutManager::addOperatorLeftSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v4 = *((void *)this + 49);
  if (v4)
  {
    unint64_t v5 = *(void *)(*((void *)this + 45) + 8 * ((v4 + *((void *)this + 48) - 1) / 0x19uLL))
       + 160 * ((v4 + *((void *)this + 48) - 1) % 0x19uLL);
    double v6 = *(double *)(v5 + 144);
    double v7 = a2 - v6;
    if (a2 - v6 < 0.0) {
      double v7 = 0.0;
    }
    if (v6 > 0.0) {
      a2 = v7;
    }
    *(void *)(v5 + 144) = 0;
  }
  if (a2 != 0.0)
  {
    uint64_t v8 = [[EQKitHSpace alloc] initWithWidth:a2];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v10, &v8->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v10, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v10, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v9, (const EQKit::ILayout *)v10);
    EQKitLayoutManager::addRowChild(this, (uint64_t)v9, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_255852DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void EQKitLayoutManager::addOperatorRightSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v3 = *((void *)this + 49);
  if (v3) {
    *(double *)(*(void *)(*((void *)this + 45) + 8 * ((v3 + *((void *)this + 48) - 1) / 0x19uLL))
  }
              + 160 * ((v3 + *((void *)this + 48) - 1) % 0x19uLL)
              + 144) = a2;
  if (a2 != 0.0)
  {
    uint64_t v4 = [[EQKitHSpace alloc] initWithWidth:a2];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v6, &v4->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v6, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v6, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v5, (const EQKit::ILayout *)v6);
    EQKitLayoutManager::addRowChild(this, (uint64_t)v5, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v5);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v6);
  }
}

void sub_255852EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

char *EQKitLayoutManager::registerVerticalStretchedOperator(void *a1, void *a2, double a3, double a4)
{
  unint64_t v22 = a2;
  double v20 = a4;
  double v21 = a3;
  uint64_t v7 = (uint64_t)(a1 + 59);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>(a1 + 59, &v22);
  if (v8)
  {
    uint64_t v9 = (char *)(v8 + 2);
    if (*((_DWORD *)v8 + 8) != 2) {
      return v9 + 8;
    }
    double v11 = *((double *)v8 + 5);
    double v10 = *((double *)v8 + 6);
    if (v11 >= a3 && v10 >= a4) {
      return v9 + 8;
    }
    if (v11 <= a3) {
      double v11 = a3;
    }
    if (v10 <= a4) {
      double v10 = a4;
    }
    double v20 = v10;
    double v21 = v11;
  }
  EQKitLayoutManager::adjustStretchyVSize(a1, v22, &v21, &v20);
  EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v18, (uint64_t)v22, 2, v21, v20, 0.0);
  unint64_t v13 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::__emplace_unique_key_args<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},objc_object  {objcproto15EQKitLayoutNode13EQKitOperator} const&,objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}* const&>(v7, &v22, &v22, (uint64_t)v18);
  if (!v14)
  {
    uint64_t v15 = v19;
    long long v16 = v18[1];
    *(_OWORD *)(v13 + 24) = v18[0];
    *(_OWORD *)(v13 + 40) = v16;
    *((void *)v13 + 7) = v15;
  }
  uint64_t v9 = v13 + 16;
  return v9 + 8;
}

void EQKitLayoutManager::adjustStretchyVSize(void *a1, void *a2, double *a3, double *a4)
{
  uint64_t v8 = a1[37];
  if (v8) {
    uint64_t v9 = *(void *)(a1[33] + 8 * ((v8 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v8 + a1[36] - 1) % 0x1AuLL);
  }
  else {
    uint64_t v9 = (uint64_t)(a1 + 7);
  }
  uint64_t v10 = [a2 operatorUnicharOrNul];
  if (v10)
  {
    uint64_t v11 = v10;
    int isOperatorSymmetric = EQKitLayoutManager::isOperatorSymmetric((uint64_t)a1, a2);
    if ((*(unsigned char *)(v9 + 120) & 2) != 0) {
      double v13 = *(double *)(v9 + 136);
    }
    else {
      double v13 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v9);
    }
    CGFloat v17 = (*(double (**)(void, uint64_t, uint64_t))(**(void **)(v9 + 88) + 136))(*(void *)(v9 + 88), v11, v9 + 8);
    CGFloat v18 = v14;
    CGFloat v19 = v15;
    CGFloat v20 = v16;
    double v21 = *a3 + *a4;
    if (v21 == 0.0)
    {
      CGFloat v22 = v17;
      *a3 = -CGRectGetMinY(*(CGRect *)(&v14 - 1));
      v38.origin.CGFloat x = v17;
      v38.origin.CGFloat y = v18;
      v38.size.CGFloat width = v19;
      v38.size.CGFloat height = v20;
      CGFloat MaxY = CGRectGetMaxY(v38);
      *a4 = MaxY;
      double v21 = MaxY + *a3;
    }
    LODWORD(v35[0]) = 1;
    v35[1] = 0.0;
    int v36 = a2;
    uint64_t v24 = a1[77];
    int v37 = 41;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v24, v24 + 32, (uint64_t)&v36, (uint64_t)v35))
    {
      v39.origin.CGFloat x = v17;
      v39.origin.CGFloat y = v18;
      v39.size.CGFloat width = v19;
      v39.size.CGFloat height = v20;
      double Height = CGRectGetHeight(v39);
      double v26 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v35, v9, Height);
      if (v26 < v21)
      {
        if (isOperatorSymmetric)
        {
          *a3 = v13 + v26 * 0.5;
          double v27 = v26 * 0.5 - v13;
        }
        else if (v21 == 0.0)
        {
          double v27 = v26 * 0.5;
          *a3 = v26 * 0.5;
        }
        else
        {
          *a3 = v26 / v21 * *a3;
          double v27 = v26 / v21 * *a4;
        }
        *a4 = v27;
        double v21 = v26;
      }
    }
    LODWORD(v34[0]) = 1;
    v34[1] = 0.0;
    uint64_t v28 = a1[77];
    int v36 = a2;
    int v37 = 40;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v28, v28 + 32, (uint64_t)&v36, (uint64_t)v34))
    {
      v40.origin.CGFloat x = v17;
      v40.origin.CGFloat y = v18;
      v40.size.CGFloat width = v19;
      v40.size.CGFloat height = v20;
      double v29 = CGRectGetHeight(v40);
      double v30 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v34, v9, v29);
      if (v30 > v21)
      {
        if (isOperatorSymmetric)
        {
          double v31 = v30 * 0.5;
          *a3 = v13 + v31;
          double v32 = v31 - v13;
        }
        else if (v21 == 0.0)
        {
          double v32 = v30 * 0.5;
          *a3 = v32;
        }
        else
        {
          double v33 = v30 / v21;
          *a3 = v33 * *a3;
          double v32 = v33 * *a4;
        }
        *a4 = v32;
      }
    }
  }
}

char *EQKitLayoutManager::registerHorizontalStretchedOperator(void *a1, void *a2, char a3, double a4)
{
  CGFloat v19 = a2;
  uint64_t v7 = (uint64_t)(a1 + 59);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>(a1 + 59, &v19);
  if ((a3 & 1) != 0 || !v8 || (uint64_t v9 = (char *)(v8 + 2), *((_DWORD *)v8 + 8) == 1) && *((double *)v8 + 7) < a4)
  {
    uint64_t v10 = (uint64_t)v19;
    double v11 = EQKitLayoutManager::adjustStretchyWidth(a1, v19, a4);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v17, v10, 1, 0.0, 0.0, v11);
    uint64_t v12 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::__emplace_unique_key_args<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},objc_object  {objcproto15EQKitLayoutNode13EQKitOperator} const&,objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}* const&>(v7, &v19, &v19, (uint64_t)v17);
    if (!v13)
    {
      uint64_t v14 = v18;
      long long v15 = v17[1];
      *(_OWORD *)(v12 + 24) = v17[0];
      *(_OWORD *)(v12 + 40) = v15;
      *((void *)v12 + 7) = v14;
    }
    uint64_t v9 = v12 + 16;
  }
  return v9 + 8;
}

double EQKitLayoutManager::adjustStretchyWidth(void *a1, void *a2, double a3)
{
  uint64_t v6 = a1[37];
  if (v6) {
    uint64_t v7 = *(void *)(a1[33] + 8 * ((v6 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v6 + a1[36] - 1) % 0x1AuLL);
  }
  else {
    uint64_t v7 = (uint64_t)(a1 + 7);
  }
  uint64_t v8 = [a2 operatorUnicharOrNul];
  if (v8)
  {
    uint64_t v9 = a1[37];
    if (v9) {
      unint64_t v10 = *(void *)(a1[33] + 8 * ((v9 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v9 + a1[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v10 = (unint64_t)(a1 + 7);
    }
    CGFloat v11 = (*(double (**)(void, uint64_t, unint64_t))(**(void **)(v7 + 88) + 136))(*(void *)(v7 + 88), v8, v10 + 8);
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    LODWORD(v26[0]) = 1;
    v26[1] = 0.0;
    double v27 = a2;
    uint64_t v18 = a1[77];
    int v28 = 41;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v18, v18 + 32, (uint64_t)&v27, (uint64_t)v26))
    {
      v29.origin.CGFloat x = v11;
      v29.origin.CGFloat y = v13;
      v29.size.CGFloat width = v15;
      v29.size.CGFloat height = v17;
      double Width = CGRectGetWidth(v29);
      double v20 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v26, v7, Width);
      if (v20 < a3) {
        a3 = v20;
      }
    }
    LODWORD(v25[0]) = 1;
    v25[1] = 0.0;
    uint64_t v21 = a1[77];
    double v27 = a2;
    int v28 = 40;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v21, v21 + 32, (uint64_t)&v27, (uint64_t)v25))
    {
      v30.origin.CGFloat x = v11;
      v30.origin.CGFloat y = v13;
      v30.size.CGFloat width = v15;
      v30.size.CGFloat height = v17;
      double v22 = CGRectGetWidth(v30);
      double v23 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v25, v7, v22);
      if (v23 > a3) {
        return v23;
      }
    }
  }
  return a3;
}

void EQKitLayoutManager::alignBoxHorizontally(const EQKit::ILayout *a1@<X1>, int a2@<W2>, int a3@<W3>, EQKit::ILayout *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  EQKit::ILayout::ILayout(a4, a1);
  if (a2 == 2)
  {
    id v14 = *(id *)a1;
    if (a3)
    {
      [v14 erasableBounds];
      double v12 = 0.0 - CGRectGetMidX(v20) + a6;
    }
    else
    {
      [v14 width];
      double v12 = (a5 - v15) * 0.5;
    }
  }
  else
  {
    double v12 = 0.0;
    if (a2 == 3)
    {
      [*(id *)a1 width];
      double v12 = a5 - v13;
    }
  }
  double v16 = (EQKitLayoutManager *)[*(id *)a1 width];
  double v18 = a5 - (v12 + v17);
  if (v12 != 0.0 || v18 != 0.0)
  {
    EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(v16, a1, v12, v18, (EQKit::ILayout *)v19);
    EQKit::ILayout::operator=((uint64_t)a4, (uint64_t)v19);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v19);
  }
}

void sub_255853670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(EQKitLayoutManager *this@<X0>, const EQKit::ILayout *a2@<X1>, double a3@<D0>, double a4@<D1>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v9 = (void *)MEMORY[0x25A290260](this);
  if (*(void *)a2)
  {
    id v10 = (id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:3];
    if (a3 != 0.0) {
      objc_msgSend(v10, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a3));
    }
    [v10 addObject:*(void *)a2];
    if (a4 != 0.0) {
      objc_msgSend(v10, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a4));
    }
    EQKit::ILayout::ILayout(a5, a2);
    EQKit::ILayout::setBox((EQKitBox *)a5, (EQKitBox *)[(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v10]);
  }
  else
  {
    EQKit::ILayout::ILayout(a5, (EQKitBox *)[[EQKitHSpace alloc] initWithWidth:a3 + a4]);
  }
}

void sub_2558537D4(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitLayoutManager::isOperatorPaddingRequired(EQKitLayoutManager *this)
{
  unint64_t v1 = *((void *)this + 49) + *((void *)this + 48) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 45) + 8 * (v1 / 0x19)) + 160 * (v1 % 0x19) + 152) != 1)
  {
    for (uint64_t i = *((void *)this + 51); i != *((void *)this + 50); i -= 8)
    {
      unint64_t v5 = *(void **)(i - 8);
      int v6 = [v5 isOperatorPaddingRequired];
      if (v6) {
        return v6 == 2;
      }
    }
  }
  return 0;
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorRoot(void *a1, void *a2)
{
  uint64_t result = [a2 isEmbellishedOperator];
  if (result)
  {
    uint64_t v5 = a1[58];
    if (v5)
    {
      uint64_t v6 = [*(id *)(*(void *)(a1[54] + (((unint64_t)(v5 + a1[57] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v5 + a1[57] - 1) & 0x1FF)) operatorCore];
      return v6 != [a2 operatorCore];
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void EQKitLayoutManager::schemataForStretchedOperator(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  EQKit::Layout::Schemata::Schemata(a3);
  uint64_t v6 = *(void **)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 == 1)
  {
    if (EQKitLayoutManager::isOperatorStretchableInAxis(a1, *(void **)a2))
    {
      if (v6) {
        [v6 stretchyLayoutSchemata];
      }
      else {
        memset(v8, 0, sizeof(v8));
      }
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v8);
    }
    else
    {
      if (!v6) {
        return;
      }
      [v6 layoutSchemata];
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v8);
    }
    goto LABEL_13;
  }
  if (v7 == 2)
  {
    EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(a1, *(void **)a2, a3);
    return;
  }
  if (v6)
  {
    [*(id *)a2 layoutSchemata];
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v8);
LABEL_13:
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v8);
  }
}

void sub_2558539F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&a9);
  EQKit::Layout::Schemata::~Schemata(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSchemata(EQKitLayoutManager *a1, EQKit::Layout::Schemata *a2, int a3, void *a4)
{
  EQKit::ILayout::ILayout((EQKit::ILayout *)v34, 0);
  int v9 = *((_DWORD *)a2 + 2);
  if (a4) {
    int v10 = a3;
  }
  else {
    int v10 = 0;
  }
  if (((v9 - 5) & 0xFFFFFFFD) != 0) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  if (v11 == 1)
  {
    double v12 = EQKitLayoutManager::leftSpaceForOperator((uint64_t)a1, (void *)[a4 operatorCore]);
    EQKitLayoutManager::addOperatorLeftSpace(a1, v12);
    int v9 = *((_DWORD *)a2 + 2);
  }
  switch(v9)
  {
    case 1:
      uint64_t v13 = EQKit::Layout::Schemata::nodeSchemata(a2);
      EQKitLayoutManager::layout(a1, v13, 0);
      break;
    case 2:
      EQKitLayoutManager::layoutRow(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 3:
      uint64_t v14 = [(id)EQKit::Layout::Schemata::phantomSchemata(a2) schemataChild];
      EQKitLayoutManager::layoutBox(a1, v14, 0, (EQKit::ILayout *)v33);
      double v15 = [EQKitHVSpace alloc];
      [v33[0] width];
      double v17 = v16;
      [v33[0] height];
      double v19 = v18;
      [v33[0] depth];
      uint64_t v21 = [(EQKitHVSpace *)v15 initWithWidth:v17 height:v19 depth:v20];
      EQKit::ILayout::ILayout((EQKit::ILayout *)v32, v21);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v32);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v32);

      goto LABEL_39;
    case 4:
      EQKitLayoutManager::layoutSubsuperscript(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 5:
      EQKitLayoutManager::layoutUnderover(a2, (uint64_t)a1, a3, a4, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 6:
      EQKitLayoutManager::layoutRadical(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 7:
      EQKitLayoutManager::layoutFraction(a2, (uint64_t)a1, a3, (uint64_t)a4, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 8:
      EQKitLayoutManager::layoutIdentifier(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 9:
      EQKitLayoutManager::layoutNumber(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 10:
      EQKitLayoutManager::layoutOperator(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 11:
      v32[0] = [(id)EQKit::Layout::Schemata::operatorSchemata(a2) schemataOperator];
      double v22 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((void *)a1 + 59, v32);
      double v23 = v22;
      if (v22)
      {
        EQKitLayoutManager::layoutStretchOperator((uint64_t)a1, (uint64_t)(v22 + 3), (EQKit::ILayout *)v33);
        EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
        std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::erase((void *)a1 + 59, v23);
      }
      break;
    case 12:
      EQKitLayoutManager::layoutStack(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 13:
      EQKitLayoutManager::layoutStackGroup(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 14:
      EQKitLayoutManager::layoutStackRow(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 15:
      EQKitLayoutManager::layoutStackLine(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 16:
      EQKitLayoutManager::layoutStackCarries(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 17:
      EQKitLayoutManager::layoutStackCarry(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 18:
      EQKitLayoutManager::layoutLongDivision(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 19:
      EQKitLayoutManager::layoutTable(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 20:
      EQKitLayoutManager::layoutTableRow(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 21:
      EQKitLayoutManager::layoutNone((EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 22:
      EQKitLayoutManager::layoutText(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 23:
      EQKitLayoutManager::layoutPadded(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 24:
      EQKitLayoutManager::layoutSpace(a1, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 25:
      EQKitLayoutManager::layoutFenced(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 26:
      EQKitLayoutManager::layoutAlignGroup(a1, v8);
      break;
    case 27:
      EQKitLayoutManager::layoutAlignMark((EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 28:
      EQKitLayoutManager::layoutEnclose(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
LABEL_39:
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
      break;
    default:
      break;
  }
  if (v34[0])
  {
    if (EQKit::Layout::Schemata::automaticSourceAttribution(a2))
    {
      uint64_t v24 = EQKit::Layout::Schemata::sourceAttribution((id *)a2);
      if (v24)
      {
        double v25 = [EQKitAttributionBox alloc];
        EQKit::ILayout::ILayout((EQKit::ILayout *)v33, (EQKitBox *)[(EQKitAttributionBox *)v25 initWithBox:v34[0] attribution:v24]);
        EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
      }
    }
    EQKitLayoutManager::beginRow(a1, 0, 1);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v31, (const EQKit::ILayout *)v34);
    uint64_t v26 = *((void *)a1 + 51);
    if (*((void *)a1 + 50) == v26) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *(void *)(v26 - 8);
    }
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v31, v27);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v31);
    EQKitLayoutManager::endRow(a1, (EQKit::ILayout *)v30);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v30);
  }
  if (v11)
  {
    double v28 = EQKitLayoutManager::rightSpaceForOperator((uint64_t)a1, (void *)[a4 operatorCore]);
    EQKitLayoutManager::addOperatorRightSpace(a1, v28);
  }
  else if (!a4)
  {
    if (a3)
    {
      uint64_t v29 = *((void *)a1 + 49);
      if (v29) {
        *(void *)(*(void *)(*((void *)a1 + 45) + 8 * ((v29 + *((void *)a1 + 48) - 1) / 0x19uLL))
      }
                  + 160 * ((v29 + *((void *)a1 + 48) - 1) % 0x19uLL)
                  + 144) = 0;
    }
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v34);
}

void sub_255854048(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::isOperatorStretchableInAxis(uint64_t a1, void *a2)
{
  if (!(unsigned __int16)[a2 operatorUnicharOrNul]) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager])
                           + 104);

  return v4();
}

uint64_t EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t isOperatorStretchableInAxis = EQKitLayoutManager::isOperatorStretchableInAxis(a1, a2);
  if (isOperatorStretchableInAxis)
  {
    if (a2)
    {
      [a2 stretchyLayoutSchemata];
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
  }
  else if (a2)
  {
    [a2 layoutSchemata];
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  EQKit::Layout::Schemata::operator=(a3, (uint64_t)&v7);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v7);
  return isOperatorStretchableInAxis;
}

void sub_255854368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

EQKit::ILayout *EQKitLayoutManager::layoutText@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v4 = EQKit::Layout::Schemata::textSchemata(a2);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *((void *)this + 37);
    if (v6) {
      long long v7 = (EQKitLayoutContext *)(*(void *)(*((void *)this + 33) + 8 * ((v6 + *((void *)this + 36) - 1) / 0x1AuLL))
    }
                                + 152 * ((v6 + *((void *)this + 36) - 1) % 0x1AuLL));
    else {
      long long v7 = (EQKitLayoutManager *)((char *)this + 56);
    }
    CGRect v39 = v7;
    CGRect v40 = EQKitLayoutContext::textFont(v7);
    EQKitLayoutManager::beginRow(this, 0, 1);
    int v37 = [v5 schemataIsQuoted];
    if (v37)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\"");
      uint64_t v8 = *((void *)this + 77);
      uint64_t v9 = *((void *)this + 51);
      if (*((void *)this + 50) == v9) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = *(void *)(v9 - 8);
      }
      uint64_t v49 = v10;
      int v50 = 12;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v8, v8 + 80, (uint64_t)&v49, __p);
      id v12 = objc_alloc(MEMORY[0x263F089D8]);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      int v11 = (void *)[v12 initWithUTF8String:v13];
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      int v11 = 0;
    }
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v14 = (void *)[v5 schemataChildren];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v45 objects:v51 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v46 != v16) {
            objc_enumerationMutation(v14);
          }
          double v18 = *(void **)(*((void *)&v45 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (v11) {
              [v11 appendString:v18];
            }
            else {
              int v11 = (void *)[v18 mutableCopy];
            }
          }
          else if ([v18 conformsToProtocol:&unk_270466C10])
          {
            if (v11)
            {
              uint64_t v19 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*((id *)this + 76) fontManager]);
              double v20 = (void *)(*(uint64_t (**)(uint64_t, void *, const __CTFont *))(*(void *)v19 + 144))(v19, v11, v40);
              uint64_t v21 = [[EQKitStringBox alloc] initWithAttributedString:v20 cgColor:*((void *)v39 + 14)];
              EQKit::ILayout::ILayout((EQKit::ILayout *)__p, &v21->super);
              EQKit::ILayout::setVerticalContentClassification((uint64_t)__p, 5);
              EQKit::ILayout::ILayout((EQKit::ILayout *)v43, (const EQKit::ILayout *)__p);
              uint64_t v22 = *((void *)this + 51);
              if (*((void *)this + 50) == v22) {
                uint64_t v23 = 0;
              }
              else {
                uint64_t v23 = *(void *)(v22 - 8);
              }
              EQKitLayoutManager::addRowChild(this, (uint64_t)v43, v23);
              EQKit::ILayout::~ILayout((EQKit::ILayout *)v43);

              EQKit::ILayout::~ILayout((EQKit::ILayout *)__p);
            }
            EQKitLayoutManager::layout(this, (uint64_t)v18, 0);
            int v11 = 0;
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v45 objects:v51 count:16];
      }
      while (v15);
    }
    if (!v37) {
      goto LABEL_44;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"");
    uint64_t v24 = *((void *)this + 77);
    uint64_t v25 = *((void *)this + 51);
    uint64_t v26 = *((void *)this + 50) == v25 ? 0 : *(void *)(v25 - 8);
    uint64_t v49 = v26;
    int v50 = 13;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v24, v24 + 80, (uint64_t)&v49, __p);
    id v27 = objc_alloc(MEMORY[0x263F089D8]);
    double v28 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? __p
        : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    uint64_t v29 = (void *)[v27 initWithUTF8String:v28];
    CGRect v30 = v29;
    if (v11) {
      [v11 appendString:v29];
    }
    else {
      int v11 = (void *)[v29 mutableCopy];
    }

    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v11) {
        goto LABEL_45;
      }
    }
    else
    {
LABEL_44:
      if (v11)
      {
LABEL_45:
        uint64_t v31 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*((id *)this + 76) fontManager]);
        double v32 = (void *)(*(uint64_t (**)(uint64_t, void *, const __CTFont *))(*(void *)v31 + 144))(v31, v11, v40);
        double v33 = [[EQKitStringBox alloc] initWithAttributedString:v32 cgColor:*((void *)v39 + 14)];
        EQKit::ILayout::ILayout((EQKit::ILayout *)v42, &v33->super);
        uint64_t v34 = *((void *)this + 51);
        if (*((void *)this + 50) == v34) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = *(void *)(v34 - 8);
        }
        EQKitLayoutManager::addRowChild(this, (uint64_t)v42, v35);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v42);
      }
    }
    EQKitLayoutManager::endRow(this, (EQKit::ILayout *)v41);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);
  }
  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_255854830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutManager::currentNode(EQKitLayoutManager *this)
{
  uint64_t v1 = *((void *)this + 51);
  if (*((void *)this + 50) == v1) {
    return 0;
  }
  else {
    return *(void *)(v1 - 8);
  }
}

void EQKitLayoutManager::layoutRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)EQKit::Layout::Schemata::children(a2);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v29;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v29 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        if ([v8 isEmbellishedOperator]
          && (EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)[v8 operatorCore]) & 1) != 0)
        {
          int v9 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  int v9 = 0;
LABEL_12:
  uint64_t v10 = (NSArray *)EQKitLayoutFilterOutSpaceLike(v4);
  BOOL v12 = [(NSArray *)v10 count] == 1
     && (v21[0] = objc_msgSend(-[NSArray firstObject](v10, "firstObject"), "operatorCore")) != 0
     && (int v11 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((void *)this + 59, v21)) != 0&& *((_DWORD *)v11 + 8) == 1;
  if ((v9 | v12) == 1
    && (unint64_t v13 = *((void *)this + 49) + *((void *)this + 48) - 1,
        EQKitLayoutRow::isNewRowRequiredForStretching((EQKitLayoutRow *)(*(void *)(*((void *)this + 45)
                                                                                   + 8 * (v13 / 0x19))
                                                                       + 160 * (v13 % 0x19)))))
  {
    EQKitLayoutManager::beginRow(this, 1, 1);
    int v19 = 1;
  }
  else
  {
    int v19 = 0;
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v14 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v14; ++j)
      {
        if (*(void *)v25 != v15) {
          objc_enumerationMutation(v4);
        }
        double v17 = *(void **)(*((void *)&v24 + 1) + 8 * j);
        if (v9
          && [*(id *)(*((void *)&v24 + 1) + 8 * j) isEmbellishedOperator]
          && EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)[v17 operatorCore]))
        {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v23, 0);
          EQKitLayoutManager::addRowChild(this, (uint64_t)v23, (uint64_t)v17);
          double v18 = (EQKit::ILayout *)v23;
LABEL_33:
          EQKit::ILayout::~ILayout(v18);
          continue;
        }
        if (v12 && [v17 isEmbellishedOperator])
        {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v22, 0);
          EQKitLayoutManager::addRowChild(this, (uint64_t)v22, (uint64_t)v17);
          double v18 = (EQKit::ILayout *)v22;
          goto LABEL_33;
        }
        EQKitLayoutManager::pushImplicitFormIfRequired(this, v17, v10);
        EQKitLayoutManager::layout(this, (uint64_t)v17, 0);
        EQKitLayoutManager::popImplicitFormIfRequired(this, v17);
      }
      uint64_t v14 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v14);
  }
  EQKit::ILayout::ILayout(a3, 0);
  if (v9 | v12)
  {
    EQKitLayoutManager::resolveRow(this, v10);
    if (v19)
    {
      EQKitLayoutManager::endRow(this, (EQKit::ILayout *)v21);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v21);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v21);
    }
  }
}

void sub_255854C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, EQKit::ILayout *a4, ...)
{
  va_start(va, a4);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(a4);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFraction(EQKit::Layout::Schemata *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v9 = *(void *)(a2 + 296);
  if (v9) {
    unint64_t v10 = *(void *)(*(void *)(a2 + 264) + 8 * ((v9 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
  }
        + 152 * ((v9 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v10 = a2 + 56;
  }
  int v11 = (void *)EQKit::Layout::Schemata::fractionSchemata(this);
  uint64_t v112 = 0;
  double v113 = (double *)&v112;
  uint64_t v114 = 0x2020000000;
  uint64_t v115 = 0;
  uint64_t v108 = 0;
  long long v109 = (double *)&v108;
  uint64_t v110 = 0x2020000000;
  uint64_t v111 = 0;
  uint64_t v104 = 0;
  long long v105 = (double *)&v104;
  uint64_t v106 = 0x2020000000;
  uint64_t v107 = 0;
  uint64_t v100 = 0;
  unint64_t v101 = (double *)&v100;
  uint64_t v102 = 0x2020000000;
  uint64_t v103 = 0;
  BOOL v12 = *(unsigned char *)(v10 + 16) == 0;
  uint64_t v13 = [v11 schemataNumerator];
  v97[0] = MEMORY[0x263EF8330];
  v97[1] = 3221225472;
  v97[2] = ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke;
  v97[3] = &unk_2653C4F58;
  v97[4] = v13;
  v97[5] = &v112;
  v97[6] = &v108;
  v97[7] = a2;
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, v13, v12, 0, 0, 0, (uint64_t)v97, (EQKit::ILayout *)v98);
  uint64_t v14 = [v11 schemataDenominator];
  v94[0] = MEMORY[0x263EF8330];
  v94[1] = 3221225472;
  v94[2] = ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2;
  v94[3] = &unk_2653C4F58;
  v94[4] = v14;
  v94[5] = &v104;
  v94[6] = &v100;
  v94[7] = a2;
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, v14, v12, 0, 0, 1, (uint64_t)v94, (EQKit::ILayout *)v95);
  if (*(unsigned char *)(v10 + 120)) {
    double v15 = *(double *)(v10 + 128);
  }
  else {
    double v15 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  uint64_t v16 = *(void *)(a2 + 408);
  if (*(void *)(a2 + 400) == v16) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(void *)(v16 - 8);
  }
  double v18 = EQKitLayoutManager::lengthForAttribute((void *)a2, 36, v17, v15);
  double v19 = 0.0;
  if (v18 > 0.0)
  {
    uint64_t v20 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
    uint64_t v21 = *(void *)(a2 + 296);
    if (v21) {
      unint64_t v22 = *(void *)(*(void *)(a2 + 264) + 8 * ((v21 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
    }
          + 152 * ((v21 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
    else {
      unint64_t v22 = a2 + 56;
    }
    double v19 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v20 + 56))(v20, 25, v22 + 8, v15);
  }
  uint64_t v23 = (EQKitBox *)v98[0];
  long long v24 = (EQKitBox *)v95[0];
  objc_msgSend(v98[0], "width", a4);
  double v26 = v25;
  [(EQKitBox *)v24 width];
  double v28 = v27;
  if (v26 >= v27) {
    double v29 = v26;
  }
  else {
    double v29 = v27;
  }
  uint64_t v30 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30) & 1) == 0)
  {
    uint64_t v32 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v31.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v31.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    v33.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v32 + 56))(v32, 3, v10 + 8, v31);
    v113[3] = v33.n128_f64[0];
    uint64_t v34 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v33.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v33.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    v35.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v34 + 56))(v34, 4, v10 + 8, v33);
    v105[3] = v35.n128_f64[0];
    uint64_t v36 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v35.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v35.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    double v37 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v36 + 56))(v36, 2, v10 + 8, v35);
    v109[3] = v37;
    v101[3] = v37;
  }
  if ((*(unsigned char *)(v10 + 120) & 2) != 0) {
    double v38 = *(double *)(v10 + 136);
  }
  else {
    double v38 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v10);
  }
  CGRect v39 = v109;
  double v40 = v113[3];
  if (v18 <= 0.0) {
    double v41 = 0.0;
  }
  else {
    double v41 = v18 * 0.5;
  }
  [(EQKitBox *)v23 depth];
  double v43 = v40 - v38 - v41 - v42;
  if (v39[3] >= v43) {
    double v44 = v39[3];
  }
  else {
    double v44 = v43;
  }
  long long v45 = v101;
  double v46 = v105[3];
  [(EQKitBox *)v24 height];
  double v48 = v38 - v41 + v46 - v47;
  if (v45[3] >= v48) {
    double v48 = v45[3];
  }
  double v86 = v48;
  id v49 = objc_alloc_init(MEMORY[0x263EFF980]);
  int v93 = 2;
  uint64_t v50 = *(void *)(a2 + 616);
  uint64_t v51 = *(void *)(a2 + 408);
  if (*(void *)(a2 + 400) == v51) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = *(void *)(v51 - 8);
  }
  uint64_t v89 = v52;
  int v90 = 24;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v50, v50 + 128, (uint64_t)&v89, &v93);
  int v92 = 2;
  uint64_t v53 = *(void *)(a2 + 616);
  uint64_t v54 = *(void *)(a2 + 408);
  if (*(void *)(a2 + 400) == v54) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = *(void *)(v54 - 8);
  }
  uint64_t v89 = v55;
  int v90 = 25;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v53, v53 + 128, (uint64_t)&v89, &v92);
  double v56 = v29 + v19 * 2.0;
  if (v93 == 3)
  {
    double v57 = v56 - v26;
  }
  else
  {
    double v57 = 0.0;
    if (v93 == 2) {
      double v57 = (v56 - v26) * 0.5;
    }
  }
  if (v92 == 3)
  {
    double v58 = v56 - v28;
  }
  else
  {
    double v58 = 0.0;
    if (v92 == 2) {
      double v58 = (v56 - v28) * 0.5;
    }
  }
  if (v57 == 0.0)
  {
    [v49 addObject:v23];
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a2, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a2, v57);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v91, v23);
    EQKitLayoutManager::addRowChild((void *)a2, (uint64_t)v91, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v91);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a2, (EQKit::ILayout *)&v89);
    if (v89) {
      objc_msgSend(v49, "addObject:");
    }
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v89);
  }
  CGPoint v59 = [[EQKitVSpace alloc] initWithHeight:v44 depth:0.0];
  [v49 addObject:v59];

  CGPoint v60 = [EQKitRule alloc];
  uint64_t v61 = *(void *)(a2 + 296);
  if (v61) {
    unint64_t v62 = *(void *)(*(void *)(a2 + 264) + 8 * ((v61 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
  }
        + 152 * ((v61 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v62 = a2 + 56;
  }
  CGRect v63 = [(EQKitRule *)v60 initWithHeight:*(void *)(v62 + 112) depth:v41 width:v41 cgColor:v56];
  CGRect v64 = EQKitLayoutManager::wrapBoxWithAttribution(v63, (EQKitBox *)v63, (id *)this);
  [v49 addObject:v64];

  CGRect v65 = [[EQKitVSpace alloc] initWithHeight:v86 depth:0.0];
  [v49 addObject:v65];

  if (v58 == 0.0)
  {
    [v49 addObject:v24];
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a2, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a2, v58);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v88, v24);
    EQKitLayoutManager::addRowChild((void *)a2, (uint64_t)v88, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v88);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a2, (EQKit::ILayout *)&v89);
    if (v89) {
      objc_msgSend(v49, "addObject:");
    }
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v89);
  }
  CGRect v66 = [[EQKitOffsetVBox alloc] initWithChildBoxes:v49 pivotIndex:2 offset:v38];
  EQKit::ILayout::ILayout(a5, &v66->super.super.super);

  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF0 | 0xA;
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v98);
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v95);
  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a5, 1);

  uint64_t v67 = *(void *)(a2 + 296);
  if (v67) {
    unint64_t v68 = *(void *)(*(void *)(a2 + 264) + 8 * ((v67 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
  }
        + 152 * ((v67 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v68 = a2 + 56;
  }
  if (*(unsigned char *)(v68 + 16)) {
    goto LABEL_71;
  }
  if ((v99 & 0x1C00u) <= 0x1000 || (v96 & 0x1C00u) <= 0x1000)
  {
    if ((v99 & 0x1000) == 0)
    {
LABEL_71:
      char v69 = 1;
      goto LABEL_72;
    }
    if ((v96 & 0x1000) != 0) {
      char v69 = 3;
    }
    else {
      char v69 = 1;
    }
  }
  else
  {
    if (v67) {
      unint64_t v75 = *(void *)(*(void *)(a2 + 264) + 8 * ((v67 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
    }
          + 152 * ((v67 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
    else {
      unint64_t v75 = a2 + 56;
    }
    if (*(uint64_t *)(v75 + 8) <= 0) {
      char v69 = 3;
    }
    else {
      char v69 = 4;
    }
  }
LABEL_72:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v69);
  if (a3)
  {
    uint64_t v70 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
    uint64_t v72 = *(void *)(a2 + 296);
    if (v72)
    {
      unint64_t v73 = *(void *)(*(void *)(a2 + 264) + 8 * ((v72 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
          + 152 * ((v72 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
      uint64_t v74 = v73 + 8;
    }
    else
    {
      uint64_t v74 = a2 + 64;
      unint64_t v73 = a2 + 56;
    }
    if (*(unsigned char *)(v73 + 120)) {
      v71.n128_u64[0] = *(void *)(v73 + 128);
    }
    else {
      v71.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v73);
    }
    double v76 = (*(double (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v70 + 56))(v70, 26, v74, v71);
    unint64_t v77 = (void *)[v85 operatorCore];
    if (v77)
    {
      double v78 = EQKitLayoutManager::leftSpaceForOperator(a2, v77);
      double v79 = EQKitLayoutManager::rightSpaceForOperator(a2, v77);
      if (v76 >= v78) {
        double v80 = v76;
      }
      else {
        double v80 = v78;
      }
      if (v76 >= v79) {
        double v81 = v76;
      }
      else {
        double v81 = v79;
      }
      double v76 = v80;
    }
    else
    {
      double v81 = v76;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a2, v76);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v87, a5);
    uint64_t v82 = *(void *)(a2 + 408);
    if (*(void *)(a2 + 400) == v82) {
      uint64_t v83 = 0;
    }
    else {
      uint64_t v83 = *(void *)(v82 - 8);
    }
    EQKitLayoutManager::addRowChild((void *)a2, (uint64_t)v87, v83);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v87);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a2, v81);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v89, 0);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v89);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v89);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v95);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v98);
  _Block_object_dispose(&v100, 8);
  _Block_object_dispose(&v104, 8);
  _Block_object_dispose(&v108, 8);
  _Block_object_dispose(&v112, 8);
}

void sub_2558556FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  EQKit::ILayout::~ILayout(v70);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a48);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a63);
  _Block_object_dispose(&a70, 8);
  _Block_object_dispose((const void *)(v71 - 248), 8);
  _Block_object_dispose((const void *)(v71 - 216), 8);
  _Block_object_dispose((const void *)(v71 - 184), 8);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSubsuperscript(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = (void *)EQKit::Layout::Schemata::subsuperscriptSchemata(a2);
  uint64_t v6 = [v5 schemataKernel];
  uint64_t v7 = [v5 schemataSubscript];
  uint64_t v8 = (void *)[v5 schemataSuperscript];

  EQKitLayoutManager::layoutSubsuperscript((uint64_t)this, v6, v7, v8, a3);
}

uint64_t EQKitLayoutManager::layoutOperator@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 37);
  if (v5) {
    uint64_t v6 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v5 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                + 152 * ((v5 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    uint64_t v6 = (char *)this + 56;
  }
  uint64_t v7 = (void *)EQKit::Layout::Schemata::tokenSchemata(a2);
  uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t, char *))(**((void **)v6 + 11) + 80))(*((void *)v6 + 11), [v7 schemataTokenString], v6 + 8);
  uint64_t v9 = [[EQKitStringBox alloc] initWithAttributedString:v8 cgColor:*((void *)v6 + 14)];
  uint64_t v10 = [v7 schemataUnicharOrNul];
  double v11 = 0.0;
  if (v10)
  {
    uint64_t v12 = *((void *)this + 51);
    uint64_t v13 = *((void *)this + 50) == v12 ? 0 : *(void **)(v12 - 8);
    if (EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, (void *)[v13 operatorCore])
      && ((*(uint64_t (**)(void, uint64_t, char *))(**((void **)v6 + 11) + 128))(*((void *)v6 + 11), v10, v6 + 8) & 1) == 0)
    {
      [(EQKitStringBox *)v9 depth];
      double v15 = v14;
      [(EQKitStringBox *)v9 height];
      double v17 = v16;
      [(EQKitStringBox *)v9 depth];
      double v19 = v15 + (v17 + v18) * -0.5;
      if ((v6[120] & 2) != 0) {
        double v20 = *((double *)v6 + 17);
      }
      else {
        double v20 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v6);
      }
      double v11 = v19 + v20;
    }
  }
  double v21 = v11 + EQKitLayoutManager::lengthForCharacterProperty((uint64_t)this, 0.0);
  if (v21 == 0.0)
  {
    unint64_t v22 = v9;
  }
  else
  {
    unint64_t v22 = [[EQKitVShift alloc] initWithBox:v9 offset:v21];
  }
  EQKit::ILayout::ILayout(a3, &v22->super);
  uint64_t v23 = *((void *)this + 51);
  if (*((void *)this + 50) == v23) {
    long long v24 = 0;
  }
  else {
    long long v24 = *(void **)(v23 - 8);
  }
  double v25 = (void *)[v24 operatorCore];
  uint64_t v26 = [*((id *)this + 76) operatorDictionary];
  unsigned __int16 v27 = [v25 operatorId];
  int v28 = EQKitLayoutManager::operatorForm((uint64_t)this, v25);
  uint64_t v29 = EQKit::Config::Operator::Dictionary::lookup(v26, v27, v28);
  if (v29 && (*(unsigned char *)(v29 + 48) & 0x40) != 0)
  {
    [(EQKitVShift *)v22 width];
    EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v33, &v22->super, v30 * 0.5);
    EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 1, (uint64_t)v33);
    EQKit::ILayoutOffset::~ILayoutOffset(v33);
  }
  if ((*(unsigned int (**)(void, uint64_t, char *))(**((void **)v6 + 11) + 112))(*((void *)v6 + 11), v10, v6 + 8))
  {
    char v31 = 5;
  }
  else
  {
    char v31 = 2;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v31);
}

void sub_255855B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutIdentifier(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 37);
  if (v4) {
    uint64_t v5 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v4 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                + 152 * ((v4 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    uint64_t v5 = (char *)this + 56;
  }
  uint64_t v6 = *((void *)v5 + 11);
  uint64_t v7 = [(id)EQKit::Layout::Schemata::tokenSchemata(a2) schemataTokenString];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v6 + 80))(v6, v7, v5 + 8);
  uint64_t v9 = [[EQKitStringBox alloc] initWithAttributedString:v8 cgColor:*((void *)v5 + 14)];
  uint64_t v10 = EQKit::ILayout::ILayout(a3, &v9->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v10, 5);
  unsigned int v11 = *((_DWORD *)v5 + 5);
  BOOL v12 = v11 > 0xD;
  int v13 = (1 << v11) & 0x3018;
  if (!v12 && v13 != 0) {
    *((_WORD *)a3 + 16) = *((_WORD *)a3 + 16) & 0xFF3F | 0x80;
  }
}

void sub_255855CE8(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutNumber(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 37);
  if (v5) {
    uint64_t v6 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v5 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                + 152 * ((v5 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    uint64_t v6 = (char *)this + 56;
  }
  uint64_t v7 = *((void *)v6 + 11);
  uint64_t v8 = [(id)EQKit::Layout::Schemata::tokenSchemata(a2) schemataTokenString];
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v7 + 80))(v7, v8, v6 + 8);
  uint64_t v10 = [[EQKitStringBox alloc] initWithAttributedString:v9 cgColor:*((void *)v6 + 14)];
  unsigned int v11 = EQKit::ILayout::ILayout(a3, &v10->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v11, 5);
  EQKitLayoutManager::decimalPointOffsetInStringBox(this, v10);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v13, &v10->super, v12);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 2, (uint64_t)v13);
  EQKit::ILayoutOffset::~ILayoutOffset(v13);
}

void sub_255855E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutUnderover(EQKit::Layout::Schemata *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v6 = (void *)EQKit::Layout::Schemata::underoverSchemata(this);
  uint64_t v7 = (void *)[v6 schemataBase];
  uint64_t v8 = (void *)[v6 schemataUnder];
  uint64_t v9 = (void *)[v6 schemataOver];
  uint64_t v10 = *(void *)(a2 + 296);
  if (v10) {
    unint64_t v11 = *(void *)(*(void *)(a2 + 264) + 8 * ((v10 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
  }
        + 152 * ((v10 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v11 = a2 + 56;
  }
  EQKit::ILayout::ILayout(a5, 0);
  if (!*(unsigned char *)(v11 + 16) && EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(a2, v7))
  {
    EQKitLayoutManager::layoutSubsuperscript(a2, (uint64_t)v7, (uint64_t)v8, v9, (EQKit::ILayout *)&v208);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
    double v12 = 0.0;
    goto LABEL_307;
  }
  LODWORD(v196[0]) = 0;
  LODWORD(v195[0]) = 0;
  if (v8)
  {
    uint64_t v13 = *(void *)(a2 + 616);
    v208 = v8;
    LODWORD(v209) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v13, v13 + 8, (uint64_t)&v208, v196) & 1) == 0)
    {
      uint64_t v14 = *(void *)(a2 + 616);
      uint64_t v15 = *(void *)(a2 + 408);
      if (*(void *)(a2 + 400) == v15) {
        double v16 = 0;
      }
      else {
        double v16 = *(void **)(v15 - 8);
      }
      v208 = v16;
      LODWORD(v209) = 6;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v14, v14 + 8, (uint64_t)&v208, v196);
    }
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a2 + 616);
    v208 = v9;
    LODWORD(v209) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v17, v17 + 8, (uint64_t)&v208, v195) & 1) == 0)
    {
      uint64_t v18 = *(void *)(a2 + 616);
      uint64_t v19 = *(void *)(a2 + 408);
      if (*(void *)(a2 + 400) == v19) {
        double v20 = 0;
      }
      else {
        double v20 = *(void **)(v19 - 8);
      }
      v208 = v20;
      LODWORD(v209) = 5;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v18, v18 + 8, (uint64_t)&v208, v195);
    }
  }
  if (LODWORD(v196[0])) {
    int isEmbellishedOperatorWithAccent = LODWORD(v196[0]) == 2;
  }
  else {
    int isEmbellishedOperatorWithAccent = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v8);
  }
  if (LODWORD(v195[0])) {
    int v184 = LODWORD(v195[0]) == 2;
  }
  else {
    int v184 = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v9);
  }
  int v207 = 2;
  uint64_t v22 = *(void *)(a2 + 616);
  uint64_t v23 = *(void *)(a2 + 408);
  if (*(void *)(a2 + 400) == v23) {
    long long v24 = 0;
  }
  else {
    long long v24 = *(void **)(v23 - 8);
  }
  v208 = v24;
  LODWORD(v209) = 1;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v22, v22 + 128, (uint64_t)&v208, &v207);
  if ([v7 isEmbellishedOperator]) {
    isOperatorStretchCGFloat y = EQKitLayoutManager::isOperatorStretchy(a2, (void *)[v7 operatorCore]);
  }
  else {
    isOperatorStretchCGFloat y = 0;
  }
  if ([v8 isEmbellishedOperator]) {
    int v26 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)[v8 operatorCore]);
  }
  else {
    int v26 = 0;
  }
  if ([v9 isEmbellishedOperator])
  {
    int v27 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)[v9 operatorCore]);
    if (!isOperatorStretchy) {
      goto LABEL_42;
    }
  }
  else
  {
    int v27 = 0;
    if (!isOperatorStretchy) {
      goto LABEL_42;
    }
  }
  v208 = v7;
  isOperatorStretchCGFloat y = !v7
                    || (int v28 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((void *)(a2 + 472), &v208)) == 0|| *((_DWORD *)v28 + 8) != 2;
LABEL_42:
  unsigned int v206 = 0;
  char v205 = 0;
  uint64_t v198 = 0;
  __int16 v199 = 1;
  char v200 = 0;
  int v201 = 1;
  double v202 = 12.0;
  int v203 = 0;
  uint64_t v204 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v196, 0);
  if (v7) {
    char v29 = isOperatorStretchy;
  }
  else {
    char v29 = 1;
  }
  double v30 = 0.0;
  if ((v29 & 1) == 0)
  {
    v208 = (void *)MEMORY[0x263EF8330];
    uint64_t v209 = 3221225472;
    v210 = ___ZN18EQKitLayoutManager22layoutUnderoverBaseBoxEPU26objcproto15EQKitLayoutNode11objc_objectPN5EQKit6Script4InfoEPbPj_block_invoke;
    v211 = &unk_2653C4FD0;
    v212 = v7;
    uint64_t v213 = a2;
    v214 = &v206;
    v215 = &v198;
    v216 = &v205;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v7, (uint64_t)&v208, (EQKit::ILayout *)v195);
    EQKit::ILayout::operator=((uint64_t)v196, (uint64_t)v195);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v195);
    [v196[0] width];
    double v30 = fmax(v31, 0.0);
  }
  char v194 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v195, 0);
  if (v8) {
    char v32 = v26;
  }
  else {
    char v32 = 1;
  }
  if ((v32 & 1) == 0)
  {
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v8, isEmbellishedOperatorWithAccent, (uint64_t)&v194, 0, 0, (EQKit::ILayout *)&v208);
    EQKit::ILayout::operator=((uint64_t)v195, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
    [v195[0] width];
    if (v30 < v33) {
      double v30 = v33;
    }
  }
  int v193 = 0;
  char v192 = 0;
  double v191 = 0.0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v190, 0);
  if (v9) {
    char v34 = v27;
  }
  else {
    char v34 = 1;
  }
  if ((v34 & 1) == 0)
  {
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v9, v184, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v191, (EQKit::ILayout *)&v208);
    EQKit::ILayout::operator=((uint64_t)v190, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
    [v190[0] width];
    if (v30 < v35) {
      double v30 = v35;
    }
  }
  if (isOperatorStretchy)
  {
    EQKitLayoutManager::registerHorizontalStretchedOperator((void *)a2, (void *)[v7 operatorCore], 0, v30);
    v208 = (void *)MEMORY[0x263EF8330];
    uint64_t v209 = 3221225472;
    v210 = ___ZN18EQKitLayoutManager22layoutUnderoverBaseBoxEPU26objcproto15EQKitLayoutNode11objc_objectPN5EQKit6Script4InfoEPbPj_block_invoke;
    v211 = &unk_2653C4FD0;
    v212 = v7;
    uint64_t v213 = a2;
    v214 = &v206;
    v215 = &v198;
    v216 = &v205;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v7, (uint64_t)&v208, (EQKit::ILayout *)v189);
    EQKit::ILayout::operator=((uint64_t)v196, (uint64_t)v189);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v189);
  }
  if (v26)
  {
    EQKitLayoutManager::registerHorizontalStretchedOperator((void *)a2, (void *)[v8 operatorCore], 0, v30);
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v8, isEmbellishedOperatorWithAccent, (uint64_t)&v194, 0, 0, (EQKit::ILayout *)&v208);
    EQKit::ILayout::operator=((uint64_t)v195, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
  }
  if (v27)
  {
    if (!objc_msgSend((id)objc_msgSend(v9, "operatorCore"), "operatorId")) {
      double v30 = v30 + (*(double *)(a2 + 8) + *(double *)(a2 + 8)) / -12.0;
    }
    EQKitLayoutManager::registerHorizontalStretchedOperator((void *)a2, (void *)[v9 operatorCore], 0, v30);
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v9, v184, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v191, (EQKit::ILayout *)&v208);
    EQKit::ILayout::operator=((uint64_t)v190, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
  }
  [v196[0] width];
  double v37 = v36;
  if (v190[0])
  {
    [v190[0] width];
    if (v38 < v37) {
      double v38 = v37;
    }
    double v185 = v38;
    if (v184) {
      double v39 = v37;
    }
    else {
      double v39 = v38;
    }
  }
  else
  {
    double v39 = v36;
    double v185 = v36;
  }
  if (v195[0])
  {
    [v195[0] width];
    double v41 = v185;
    if (v40 >= v185) {
      double v41 = v40;
    }
    double v185 = v41;
    if (v40 < v39) {
      int v42 = 1;
    }
    else {
      int v42 = isEmbellishedOperatorWithAccent;
    }
    if (!v42) {
      double v39 = v40;
    }
  }
  double v43 = 0.0;
  if (v37 < v39)
  {
    uint64_t v44 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
    uint64_t v46 = *(void *)(a2 + 296);
    if (v46)
    {
      unint64_t v47 = *(void *)(*(void *)(a2 + 264) + 8 * ((v46 + *(void *)(a2 + 288) - 1) / 0x1AuLL))
          + 152 * ((v46 + *(void *)(a2 + 288) - 1) % 0x1AuLL);
      uint64_t v48 = v47 + 8;
    }
    else
    {
      uint64_t v48 = a2 + 64;
      unint64_t v47 = a2 + 56;
    }
    if (*(unsigned char *)(v47 + 120)) {
      v45.n128_u64[0] = *(void *)(v47 + 128);
    }
    else {
      v45.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v47);
    }
    double v43 = (*(double (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v44 + 56))(v44, 27, v48, v45);
  }
  int v183 = isEmbellishedOperatorWithAccent;
  id v49 = v190[0];
  id v50 = v196[0];
  id v51 = v195[0];
  [v196[0] erasableBounds];
  double MidX = CGRectGetMidX(v217);
  EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v196, v207, 0, (EQKit::ILayout *)&v208, v185, 0.0);
  double v181 = v43;
  EQKit::ILayout::operator=((uint64_t)v196, (uint64_t)&v208);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
  double v54 = (v185 - v37) * 0.5 + MidX;
  if (!(*(unsigned int (**)(void))(**(void **)(v11 + 88) + 16))(*(void *)(v11 + 88)))
  {
    double v59 = 0.0;
    double v60 = 0.0;
    int v61 = v183;
    if (!v49) {
      goto LABEL_207;
    }
    if (v192) {
      int v62 = v184;
    }
    else {
      int v62 = 0;
    }
    if (v62 == 1)
    {
      [v49 depth];
      if (v63.n128_f64[0] >= 0.0)
      {
        uint64_t v92 = *(void *)(v11 + 88);
        if (*(unsigned char *)(v11 + 120)) {
          v63.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v63.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v117 = -(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v92 + 56))(v92, 11, v11 + 8, v63);
      }
      else
      {
        double v64 = v54;
        double v65 = v191;
        [v49 depth];
        double v67 = v66.n128_f64[0];
        uint64_t v68 = *(void *)(v11 + 88);
        if (*(unsigned char *)(v11 + 120)) {
          v66.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v66.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v123 = -v67
             - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v68 + 56))(v68, 11, v11 + 8, v66);
        if (v65 >= v123) {
          double v117 = v123;
        }
        else {
          double v117 = v65;
        }
        double v54 = v64;
      }
      [v196[0] height];
      if (v117 < v124) {
        double v124 = v117;
      }
      double v60 = -v124;
    }
    else
    {
      uint64_t v70 = *(void *)(v11 + 88);
      if (!v184)
      {
        if (*(unsigned char *)(v11 + 120)) {
          v53.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v115 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v70 + 56))(v70, 11, v11 + 8, v53);
        uint64_t v116 = *(void *)(v11 + 88);
        if (*(unsigned char *)(v11 + 120)) {
          v114.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v114.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v118 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v116 + 56))(v116, 12, v11 + 8, v114);
        [v49 layoutDepth];
        int v119 = 0;
        double v121 = v118 - v120;
        if (v115 >= v121) {
          double v60 = v115;
        }
        else {
          double v60 = v121;
        }
        double v122 = v54;
        goto LABEL_206;
      }
      if (*(unsigned char *)(v11 + 120)) {
        v53.n128_u64[0] = *(void *)(v11 + 128);
      }
      else {
        v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v60 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v70 + 56))(v70, 11, v11 + 8, v53);
    }
    if (v205) {
      int v125 = v184;
    }
    else {
      int v125 = 0;
    }
    if (v125 == 1)
    {
      uint64_t v126 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
      double v122 = v54 + (*(double (**)(uint64_t, void, uint64_t *))(*(void *)v126 + 176))(v126, v206, &v198);
      int v119 = 1;
    }
    else
    {
      int v119 = 0;
      double v122 = v54;
    }
    int v61 = v183;
LABEL_206:
    EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v190, v207, v119, (EQKit::ILayout *)&v208, v185, v122);
    EQKit::ILayout::operator=((uint64_t)v190, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
LABEL_207:
    if (!v51)
    {
      double v129 = 0.0;
LABEL_241:
      double v142 = 0.0;
      goto LABEL_273;
    }
    if (v194) {
      int v127 = v61;
    }
    else {
      int v127 = 0;
    }
    if (v127 == 1)
    {
      [v51 height];
      if (v53.n128_f64[0] <= 0.0)
      {
        [v51 height];
        double v131 = v130.n128_f64[0];
        uint64_t v132 = *(void *)(v11 + 88);
        if (*(unsigned char *)(v11 + 120)) {
          v130.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v130.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v129 = v131
             + (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v132 + 56))(v132, 13, v11 + 8, v130);
        goto LABEL_234;
      }
      uint64_t v128 = *(void *)(v11 + 88);
      if ((*(unsigned char *)(v11 + 120) & 1) == 0) {
        goto LABEL_214;
      }
    }
    else
    {
      uint64_t v128 = *(void *)(v11 + 88);
      if (!v61)
      {
        if (*(unsigned char *)(v11 + 120)) {
          v53.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v134 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v128 + 56))(v128, 13, v11 + 8, v53);
        uint64_t v135 = *(void *)(v11 + 88);
        if (*(unsigned char *)(v11 + 120)) {
          v133.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v133.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v136 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v135 + 56))(v135, 14, v11 + 8, v133);
        [v51 layoutHeight];
        int v137 = 0;
        double v139 = v136 - v138;
        if (v134 >= v139) {
          double v129 = v134;
        }
        else {
          double v129 = v139;
        }
        goto LABEL_240;
      }
      if ((*(unsigned char *)(v11 + 120) & 1) == 0)
      {
LABEL_214:
        v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
LABEL_222:
        double v129 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v128 + 56))(v128, 13, v11 + 8, v53);
LABEL_234:
        int v61 = v183;
        if (v205) {
          int v140 = v183;
        }
        else {
          int v140 = 0;
        }
        if (v140 == 1)
        {
          uint64_t v141 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
          double v54 = v54
              + (*(double (**)(uint64_t, void, uint64_t *))(*(void *)v141 + 184))(v141, v206, &v198);
          int v137 = 1;
        }
        else
        {
          int v137 = 0;
        }
LABEL_240:
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v195, v207, v137, (EQKit::ILayout *)&v208, v185, v54);
        EQKit::ILayout::operator=((uint64_t)v195, (uint64_t)&v208);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
        goto LABEL_241;
      }
    }
    v53.n128_u64[0] = *(void *)(v11 + 128);
    goto LABEL_222;
  }
  if (([v7 isEmbellishedOperator] & 1) != 0
    && EQKitLayoutManager::isOperatorLargeOp(a2, (void *)[v7 operatorCore]))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v11 + 88) + 48))(&v208);
    double v57 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)&v208, v202);
    uint64_t v58 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v56.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v56.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v58 + 56))(v58, 12, v11 + 8, v56);
    uint64_t v94 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v93.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v93.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v176 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v94 + 56))(v94, 11, v11 + 8, v93);
    uint64_t v96 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v95.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v95.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v82 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v96 + 56))(v96, 14, v11 + 8, v95);
    uint64_t v98 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v97.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v97.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v98 + 56))(v98, 13, v11 + 8, v97);
    int v90 = 0;
LABEL_153:
    double v79 = 0.0;
    double v88 = 0.0;
    double v91 = 0.0;
    goto LABEL_154;
  }
  uint64_t v69 = *(void *)(v11 + 88);
  if (v7 && v205 && ((isOperatorStretchy ^ 1) & 1) == 0)
  {
    if (*(unsigned char *)(v11 + 120)) {
      v55.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v55.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v69 + 56))(v69, 44, v11 + 8, v55);
    uint64_t v73 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v71.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v71.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v176 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v73 + 56))(v73, 45, v11 + 8, v71);
    uint64_t v77 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v76.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v76.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v82 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v77 + 56))(v77, 42, v11 + 8, v76);
    uint64_t v83 = *(void *)(v11 + 88);
    if (*(unsigned char *)(v11 + 120)) {
      v81.n128_u64[0] = *(void *)(v11 + 128);
    }
    else {
      v81.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    }
    double v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v83 + 56))(v83, 43, v11 + 8, v81);
    int v90 = 0;
    double v57 = 0.0;
    goto LABEL_153;
  }
  if (*(unsigned char *)(v11 + 120)) {
    v55.n128_u64[0] = *(void *)(v11 + 128);
  }
  else {
    v55.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  }
  double v176 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v69 + 56))(v69, 50, v11 + 8, v55);
  uint64_t v75 = *(void *)(v11 + 88);
  if (*(unsigned char *)(v11 + 120)) {
    v74.n128_u64[0] = *(void *)(v11 + 128);
  }
  else {
    v74.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  }
  double v79 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v75 + 56))(v75, 51, v11 + 8, v74);
  uint64_t v80 = *(void *)(v11 + 88);
  if (*(unsigned char *)(v11 + 120)) {
    v78.n128_u64[0] = *(void *)(v11 + 128);
  }
  else {
    v78.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  }
  double v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v80 + 56))(v80, 48, v11 + 8, v78);
  uint64_t v86 = *(void *)(v11 + 88);
  if (*(unsigned char *)(v11 + 120)) {
    v84.n128_u64[0] = *(void *)(v11 + 128);
  }
  else {
    v84.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  }
  double v88 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v86 + 56))(v86, 49, v11 + 8, v84);
  uint64_t v89 = *(void *)(v11 + 88);
  if (*(unsigned char *)(v11 + 120)) {
    v87.n128_u64[0] = *(void *)(v11 + 128);
  }
  else {
    v87.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  }
  double v91 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v89 + 56))(v89, 34, v11 + 8, v87);
  int v90 = 1;
  double v57 = 0.0;
  double v72 = 0.0;
  double v82 = 0.0;
LABEL_154:
  double v178 = v85;
  if (v49)
  {
    [v49 width];
    double v100 = v57;
    double v101 = v99 * 0.5 - v57 * 0.5;
  }
  else
  {
    double v100 = v57;
    double v101 = -1.79769313e308;
  }
  double v179 = v88;
  double v175 = v82;
  if (v51)
  {
    double v102 = v54;
    [v51 width];
    double v59 = v79;
    double v104 = v100 * 0.5 + v103 * 0.5;
  }
  else
  {
    double v59 = v79;
    double v102 = v54;
    double v104 = -1.79769313e308;
  }
  double v105 = v102;
  if (v101 <= v102) {
    double v106 = v102;
  }
  else {
    double v106 = v101;
  }
  if (v104 > v106) {
    double v106 = v104;
  }
  double v177 = v106;
  double v60 = 0.0;
  if (!v49) {
    goto LABEL_263;
  }
  if (v90)
  {
    if (v192) {
      int v107 = v184;
    }
    else {
      int v107 = 0;
    }
    if (v107 == 1)
    {
      [v49 depth];
      if (v108.n128_f64[0] >= 0.0)
      {
        uint64_t v143 = *(void *)(v11 + 88);
        if (*(unsigned char *)(v11 + 120)) {
          v108.n128_u64[0] = *(void *)(v11 + 128);
        }
        else {
          v108.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v111 = -(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v143 + 56))(v143, 11, v11 + 8, v108);
      }
      else
      {
        [v49 depth];
        double v110 = -v109 - v176;
        if (v91 >= v110) {
          double v111 = v110;
        }
        else {
          double v111 = v91;
        }
      }
      objc_msgSend(v50, "height", *(void *)&v175);
      if (v111 < v144) {
        double v144 = v111;
      }
      double v60 = -v144;
    }
    else
    {
      double v60 = v176;
    }
  }
  else
  {
    [v50 layoutHeight];
    double v113 = v72 - v112;
    if (v176 >= v113) {
      double v60 = v176;
    }
    else {
      double v60 = v113;
    }
  }
  if (v207 == 2)
  {
    if (v206)
    {
      uint64_t v145 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
      (*(void (**)(void *__return_ptr))(*(void *)v145 + 48))(v189);
      if (LODWORD(v189[0]))
      {
        double v146 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v189, v202) - v105;
        goto LABEL_256;
      }
    }
    else
    {
      LODWORD(v189[0]) = 0;
      v189[1] = 0;
    }
    double v146 = 0.0;
LABEL_256:
    if (v193)
    {
      uint64_t v147 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a2 + 608) fontManager]);
      (*(void (**)(void *__return_ptr))(*(void *)v147 + 48))(v188);
      if (LODWORD(v188[0]))
      {
        double v148 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v188, v202);
LABEL_261:
        v150 = (EQKitLayoutManager *)objc_msgSend(v49, "width", *(void *)&v175);
        EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(v150, (const EQKit::ILayout *)v190, v100 * 0.5 + v177 + v146 - v148, v185 - v151 - (v100 * 0.5 + v177 + v146 - v148), (EQKit::ILayout *)&v208);
        EQKit::ILayout::operator=((uint64_t)v190, (uint64_t)&v208);
        goto LABEL_262;
      }
    }
    else
    {
      LODWORD(v188[0]) = 0;
      v188[1] = 0;
    }
    objc_msgSend(v49, "width", *(void *)&v175);
    double v148 = v149 * 0.5;
    goto LABEL_261;
  }
  EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v190, v207, 0, (EQKit::ILayout *)&v208, v185, 0.0);
  EQKit::ILayout::operator=((uint64_t)v190, (uint64_t)&v208);
LABEL_262:
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
LABEL_263:
  if (v51)
  {
    int v61 = v183;
    if (v90)
    {
      double v129 = v178;
      double v142 = v179;
    }
    else
    {
      [v51 layoutHeight];
      double v129 = v178;
      double v142 = v179;
      double v153 = v175 - v152;
      if (v178 < v153) {
        double v129 = v153;
      }
    }
    if (v207 == 2)
    {
      v154 = (EQKitLayoutManager *)[v51 width];
      EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(v154, (const EQKit::ILayout *)v195, v177 - v104, v185 - v155 - (v177 - v104), (EQKit::ILayout *)&v208);
    }
    else
    {
      EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v195, v207, 0, (EQKit::ILayout *)&v208, v185, 0.0);
    }
    EQKit::ILayout::operator=((uint64_t)v195, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
  }
  else
  {
    double v129 = 0.0;
    int v61 = v183;
    double v142 = v179;
  }
LABEL_273:
  id v156 = objc_alloc_init(MEMORY[0x263EFF980]);
  id v157 = v190[0];
  if (v190[0])
  {
    if (v59 != 0.0)
    {
      v158 = [[EQKitVSpace alloc] initWithHeight:v59 depth:0.0];
      [v156 addObject:v158];

      id v157 = v190[0];
    }
    objc_msgSend(v156, "addObject:", v157, *(void *)&v175);
    if (v60 != 0.0)
    {
      v159 = [[EQKitVSpace alloc] initWithHeight:v60 depth:0.0];
      [v156 addObject:v159];
    }
  }
  uint64_t v160 = objc_msgSend(v156, "count", *(void *)&v175);
  if (v196[0]) {
    objc_msgSend(v156, "addObject:");
  }
  id v161 = v195[0];
  if (v195[0])
  {
    if (v129 != 0.0)
    {
      v162 = [[EQKitVSpace alloc] initWithHeight:v129 depth:0.0];
      [v156 addObject:v162];

      id v161 = v195[0];
    }
    [v156 addObject:v161];
    if (v142 != 0.0)
    {
      v163 = [[EQKitVSpace alloc] initWithHeight:0.0 depth:v142];
      [v156 addObject:v163];
    }
  }
  double v12 = v181;
  v164 = [[EQKitVBox alloc] initWithChildBoxes:v156 pivotIndex:v160];
  EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)v196);
  if (v7)
  {
    if (v8) {
      char v165 = v61;
    }
    else {
      char v165 = 1;
    }
    char v166 = 1;
    if ((v197 & 0x1C00u) <= 0x1000 || (v165 & 1) == 0) {
      goto LABEL_302;
    }
LABEL_296:
    int v168 = v184;
    if (!v9) {
      int v168 = 1;
    }
    if (v168) {
      char v166 = 4;
    }
    else {
      char v166 = 1;
    }
    goto LABEL_302;
  }
  if (v8) {
    int v167 = v61;
  }
  else {
    int v167 = 1;
  }
  if (v167 == 1) {
    goto LABEL_296;
  }
  char v166 = 1;
LABEL_302:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v166);
  EQKit::ILayout::setBox((EQKitBox *)a5, &v164->super.super);

  if (v9 && v205 && ((v184 ^ 1) & 1) == 0) {
    EQKit::ILayout::setIsOverAccentTokenWithBaseToken((uint64_t)a5, 1);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v190);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v195);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v196);
LABEL_307:
  if (a3)
  {
    v169 = (void *)[a4 operatorCore];
    if (v169)
    {
      double v170 = EQKitLayoutManager::leftSpaceForOperator(a2, v169);
      double v171 = EQKitLayoutManager::rightSpaceForOperator(a2, v169);
      if (v12 >= v170) {
        double v172 = v12;
      }
      else {
        double v172 = v170;
      }
      if (v12 < v171) {
        double v12 = v171;
      }
    }
    else
    {
      double v172 = v12;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a2, v172);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v187, a5);
    uint64_t v173 = *(void *)(a2 + 408);
    if (*(void *)(a2 + 400) == v173) {
      uint64_t v174 = 0;
    }
    else {
      uint64_t v174 = *(void *)(v173 - 8);
    }
    EQKitLayoutManager::addRowChild((void *)a2, (uint64_t)v187, v174);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v187);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a2, v12);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v208, 0);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v208);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v208);
  }
}

void sub_25585767C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, EQKit::ILayout *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t EQKitLayoutManager::layoutTable@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  v9[0] = &unk_27045A9A0;
  v9[1] = this;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  std::deque<EQKitLayoutTable>::push_back((void *)this + 70, (uint64_t)v9);
  EQKitLayoutTable::~EQKitLayoutTable((EQKitLayoutTable *)v9);
  uint64_t v6 = (void *)EQKit::Layout::Schemata::tableSchemata(a2);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 75);
    if (v7)
    {
      EQKitLayoutTable::layoutTable(*(void *)(*((void *)this + 71) + 8 * ((v7 + *((void *)this + 74) - 1) / 0x2AuLL))+ 96 * ((v7 + *((void *)this + 74) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v9);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v9);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);
    }
  }
  return std::deque<EQKitLayoutTable>::pop_back((void *)this + 70);
}

void sub_255857934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutTableRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = (void *)EQKit::Layout::Schemata::tableRowSchemata(a2);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 75);
    if (v7)
    {
      EQKitLayoutTable::layoutTr(*(void *)(*((void *)this + 71) + 8 * ((v7 + *((void *)this + 74) - 1) / 0x2AuLL))+ 96 * ((v7 + *((void *)this + 74) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v8);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v8);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v8);
    }
  }
}

void sub_255857A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = (void *)((char *)this + 512);
  uint64_t v6 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v9, (uint64_t)this, v6, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, 0.0);
  std::deque<EQKitLayoutElementaryStack>::push_back(v5, (const EQKitLayoutElementaryStack *)v9);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v9);
  unint64_t v7 = *((void *)this + 69) + *((void *)this + 68) - 1;
  EQKitLayoutElementaryStack::layout((id *)(*(void *)(*((void *)this + 65) + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18)), a3);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v5);
}

void sub_255857B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  EQKit::ILayout::~ILayout(v10);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackGroup(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 69);
  if (v6)
  {
    unint64_t v7 = v6 + *((void *)this + 68) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 65) + 8 * (v7 / 0x18));
    uint64_t v9 = (void *)EQKit::Layout::Schemata::stackGroupSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackGroup((void *)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_255857BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 69);
  if (v6)
  {
    unint64_t v7 = v6 + *((void *)this + 68) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 65) + 8 * (v7 / 0x18));
    uint64_t v9 = (void *)EQKit::Layout::Schemata::stackRowSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackRow((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_255857CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackLine(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 69);
  if (v6)
  {
    unint64_t v7 = v6 + *((void *)this + 68) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 65) + 8 * (v7 / 0x18));
    EQKit::Layout::Schemata::stackLineSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackLine(v8 + 168 * (v7 % 0x18), (EQKit::ILayout *)v9);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v9);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);
  }
}

void sub_255857D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarries(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 69);
  if (v6)
  {
    unint64_t v7 = v6 + *((void *)this + 68) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 65) + 8 * (v7 / 0x18));
    uint64_t v9 = (void *)EQKit::Layout::Schemata::stackCarriesSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarries((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_255857E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarry(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 69);
  if (v6)
  {
    unint64_t v7 = v6 + *((void *)this + 68) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 65) + 8 * (v7 / 0x18));
    uint64_t v9 = (void *)EQKit::Layout::Schemata::stackCarrySchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarry((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_255857F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutLongDivision(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  v44[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)EQKit::Layout::Schemata::longDivisionSchemata(a2);
  uint64_t v6 = *((void *)this + 37);
  if (v6) {
    unint64_t v7 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v6 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                + 152 * ((v6 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    unint64_t v7 = (char *)this + 56;
  }
  uint64_t v8 = *((void *)this + 51);
  if (*((void *)this + 50) == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v8 - 8);
  }
  EQKitLayoutContext::EQKitLayoutContext(v42, this, v7, v9, 0, 0, 0);
  std::deque<EQKitLayoutContext>::push_back((void *)this + 32, (EQKitLayoutContext *)v42);
  uint64_t v10 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*((id *)this + 76) fontManager]);
  double v41 = (__CTFont *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 72))(v10, v43);
  if (!v41) {
    goto LABEL_18;
  }
  EQKitLayoutManager::layoutBox(this, [v5 schemataDivisor], 0, 0, 0, 0, 0, (EQKit::ILayout *)v40);
  EQKitPath::EQKitPath((EQKitPath *)&v37, v41, 0x27CCu);
  EQKitPath::findStemForEdge(&v37, 2, (uint64_t)v36);
  id v11 = v36[6];
  double v35 = 0.0;
  long long v12 = (void *)[v5 schemataStack];
  if (v12) {
    [v12 layoutSchemata];
  }
  else {
    memset(v34, 0, sizeof(v34));
  }
  EQKitLayoutManager::layoutStack(this, (const EQKit::Layout::Schemata *)v34, *(double *)&v11, &v35, 2, 1, (EQKit::ILayout *)v36);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v34);
  *(void *)&v34[0] = 0;
  uint64_t v13 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*((id *)this + 76) fontManager]);
  double v14 = v35;
  [v36[0] width];
  double v33 = (const void *)(*(uint64_t (**)(uint64_t, void *, _OWORD *, double, double))(*(void *)v13 + 168))(v13, v43, v34, v14, v15);
  if (v33)
  {
    double v16 = [EQKitPathBox alloc];
    uint64_t v17 = [(EQKitPathBox *)v16 initWithCGPath:v33 height:v43[13] cgColor:*(double *)&v11];
    uint64_t v18 = [EQKitPaddedBox alloc];
    [(EQKitPathBox *)v17 height];
    double v20 = v19;
    double v21 = (CGRect *)(v39[32] ? v39 : EQKitPath::computePathBounds((CGFloat *)&v37));
    double Width = CGRectGetWidth(*v21);
    [(EQKitPathBox *)v17 depth];
    double v25 = v24;
    [(EQKitPathBox *)v17 height];
    int v27 = [(EQKitPaddedBox *)v18 initWithBox:v17 height:v20 width:Width depth:v25 lspace:0.0 voffset:v14 - v26];

    int v28 = [EQKitHBox alloc];
    v44[0] = v40[0];
    v44[1] = v27;
    v44[2] = v36[0];
    uint64_t v22 = -[EQKitCompoundBox initWithChildBoxes:](v28, "initWithChildBoxes:", [MEMORY[0x263EFF8C0] arrayWithObjects:v44 count:3]);
  }
  else
  {
    uint64_t v22 = 0;
  }
  EQKit::AutoCFType<CGPath const*>::~AutoCFType(&v33);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v36);
  EQKitPath::~EQKitPath((EQKitPath *)&v37);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v40);
  if (!v22) {
LABEL_18:
  }
    uint64_t v22 = objc_alloc_init(EQKitBox);
  LODWORD(v36[0]) = 0;
  uint64_t v29 = *((void *)this + 77);
  uint64_t v30 = *((void *)this + 51);
  if (*((void *)this + 50) == v30) {
    double v31 = 0;
  }
  else {
    double v31 = *(unint64_t **)(v30 - 8);
  }
  double v37 = v31;
  int v38 = 2;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v29, v29 + 152, (uint64_t)&v37, v36);
  std::deque<EQKitLayoutContext>::pop_back((void *)this + 32);
  char v32 = EQKitLayoutManager::baselineAlignBox(this, v22, (int)v36[0]);
  EQKit::ILayout::ILayout(a3, &v32->super);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v41);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v42);
}

void sub_25585833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,const void *a51,char a52)
{
}

void EQKitLayoutManager::layoutRadical(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  v135[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 37);
  if (v6) {
    unint64_t v7 = (double *)(*(void *)(*((void *)this + 33) + 8 * ((v6 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                  + 152 * ((v6 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    unint64_t v7 = (double *)((char *)this + 56);
  }
  uint64_t v8 = (void *)EQKit::Layout::Schemata::radicalSchemata(a2);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v133, 0);
  double v122 = v8;
  if ([v8 schemataIndex])
  {
    EQKitLayoutManager::layoutBox(this, [v8 schemataIndex], 2, 0, 0, 0, 0, (EQKit::ILayout *)v131);
    EQKit::ILayout::operator=((uint64_t)v133, (uint64_t)v131);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v131);
  }
  uint64_t v9 = (void *)v133[0];
  EQKitLayoutManager::layoutBox(this, [v8 schemataRadicand], 0, *((unsigned __int8 *)v7 + 16), 0, 0, 0, (EQKit::ILayout *)v131);
  id v11 = (void *)v131[0];
  char v12 = *((unsigned char *)v7 + 120);
  if (v12)
  {
    double v13 = v7[16];
  }
  else
  {
    double v13 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    char v12 = *((unsigned char *)v7 + 120);
  }
  uint64_t v14 = *((void *)v7 + 11);
  if (v12) {
    v10.n128_f64[0] = v7[16];
  }
  else {
    v10.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
  }
  double v15 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v14 + 56))(v14, 17, (char *)v7 + 8, v10);
  double v17 = v13;
  double v18 = v13;
  if ((*(unsigned int (**)(void))(**((void **)v7 + 11) + 16))(*((void *)v7 + 11)))
  {
    uint64_t v19 = *((void *)v7 + 11);
    if ((_BYTE)v7[15]) {
      v16.n128_f64[0] = v7[16];
    }
    else {
      v16.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    }
    double v18 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v19 + 56))(v19, 53, (char *)v7 + 8, v16);
    double v17 = 0.0;
  }
  uint64_t v20 = *((void *)v7 + 11);
  if ((_BYTE)v7[15]) {
    v16.n128_f64[0] = v7[16];
  }
  else {
    v16.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
  }
  double v21 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v20 + 56))(v20, 18, (char *)v7 + 8, v16);
  [v11 erasableBounds];
  double v23 = v22;
  [v11 width];
  double v25 = v24;
  double v130 = 0.0;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v124 = *MEMORY[0x263F001B0];
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v26 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*((id *)this + 76) fontManager]);
  double v123 = (const void *)(*(uint64_t (**)(uint64_t, char *, long long *, long long *, double, double, double))(*(void *)v26 + 160))(v26, (char *)v7 + 8, &v128, &v124, v21 + v18 + v23 + v17 * 2.0, v25, v18);
  if (v123)
  {
    int v27 = (*(uint64_t (**)(void))(**((void **)v7 + 11) + 16))(*((void *)v7 + 11));
    double v28 = *((double *)&v124 + 1);
    double v29 = v127;
    uint64_t v30 = [EQKitPathBox alloc];
    double v31 = 0.0;
    if (v27) {
      double v31 = v29;
    }
    char v32 = [(EQKitPathBox *)v30 initWithCGPath:v123 height:*((void *)v7 + 14) cgColor:v28 - v31];
    double v33 = EQKitLayoutManager::wrapBoxWithAttribution(v32, (EQKitBox *)v32, (id *)a2);
    char v34 = [EQKitPaddedBox alloc];
    [(EQKitBox *)v33 height];
    double v36 = v35;
    [(EQKitBox *)v33 width];
    double v38 = v37;
    double v39 = v130;
    [(EQKitBox *)v33 depth];
    double v41 = [(EQKitPaddedBox *)v34 initWithBox:v33 height:v36 width:v38 - v25 - v39 depth:v40 lspace:0.0 voffset:0.0];
  }
  else
  {
    double v41 = 0;
  }
  double v43 = v18 + v21;
  if ((*(unsigned int (**)(void))(**((void **)v7 + 11) + 16))(*((void *)v7 + 11)))
  {
    [(EQKitBox *)v41 layoutHeight];
    double v45 = v44;
    [v11 layoutHeight];
    if (v45 > v43 + v46.n128_f64[0])
    {
      [(EQKitBox *)v41 layoutDepth];
      double v48 = v47;
      [v11 layoutDepth];
      if (v48 > v46.n128_f64[0])
      {
        [(EQKitBox *)v41 layoutHeight];
        double v50 = v49;
        [v11 layoutHeight];
        double v43 = v50 - v46.n128_f64[0];
      }
    }
    uint64_t v51 = *((void *)v7 + 11);
    if ((_BYTE)v7[15]) {
      v46.n128_f64[0] = v7[16];
    }
    else {
      v46.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    }
    double v64 = v43
        + (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v51 + 56))(v51, 52, (char *)v7 + 8, v46);
  }
  else
  {
    uint64_t v52 = *((void *)v7 + 11);
    if ((_BYTE)v7[15]) {
      v42.n128_f64[0] = v7[16];
    }
    else {
      v42.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    }
    double v53 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v52 + 56))(v52, 19, (char *)v7 + 8, v42);
    [(EQKitBox *)v41 layoutHeight];
    double v55 = v54;
    [v11 layoutVSize];
    double v57 = v55 - v18 - v21;
    if (v57 >= v53) {
      double v57 = v53;
    }
    if (v56 >= v57) {
      double v58 = v56;
    }
    else {
      double v58 = v57;
    }
    [(EQKitBox *)v41 layoutHeight];
    double v60 = v59;
    [v11 layoutVSize];
    double v62 = v60 - v18 - (v21 + v58);
    if (v62 <= 0.0) {
      double v63 = v18 + v21;
    }
    else {
      double v63 = v43 + v62 * 0.5;
    }
    double v64 = v63 + v58 - v61;
  }
  id v65 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (v64 != 0.0)
  {
    __n128 v66 = [[EQKitVSpace alloc] initWithHeight:v64 depth:0.0];
    [v65 addObject:v66];
  }
  [v11 width];
  double v68 = v15 + (v25 - v67) * 0.5;
  if (v68 == 0.0)
  {
    [v65 addObject:v11];
  }
  else
  {
    uint64_t v69 = [[EQKitHSpace alloc] initWithWidth:v68];
    uint64_t v70 = [EQKitHBox alloc];
    v135[0] = v69;
    v135[1] = v11;
    v135[2] = v69;
    __n128 v71 = -[EQKitCompoundBox initWithChildBoxes:](v70, "initWithChildBoxes:", [MEMORY[0x263EFF8C0] arrayWithObjects:v135 count:3]);
    [v65 addObject:v71];
  }
  double v72 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v65, [v65 count] - 1);
  id v73 = objc_alloc_init(MEMORY[0x263EFF980]);
  [(EQKitPaddedBox *)v41 width];
  double v75 = v74;
  if (v9)
  {
    id v76 = objc_alloc_init(MEMORY[0x263EFF980]);
    if ((*(unsigned int (**)(void))(**((void **)v7 + 11) + 16))(*((void *)v7 + 11)))
    {
      uint64_t v78 = *((void *)v7 + 11);
      if ((_BYTE)v7[15]) {
        v77.n128_f64[0] = v7[16];
      }
      else {
        v77.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
      }
      double v88 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v78 + 56))(v78, 54, (char *)v7 + 8, v77);
      [v9 erasableBounds];
      double Width = CGRectGetWidth(v136);
      uint64_t v91 = *((void *)v7 + 11);
      if ((_BYTE)v7[15]) {
        v89.n128_f64[0] = v7[16];
      }
      else {
        v89.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
      }
      double v92 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v91 + 56))(v91, 55, (char *)v7 + 8, v89);
      if (v92 <= -Width) {
        double v93 = -Width;
      }
      else {
        double v93 = v92;
      }
      [v9 erasableBounds];
      double v94 = fmax(v88, 0.0);
      if (CGRectGetWidth(v137) < -v93
        || ([v9 erasableBounds], double v94 = v94 - v93 - CGRectGetWidth(v138), v94 >= 0.0))
      {
        if (v94 != 0.0) {
          objc_msgSend(v76, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v94));
        }
      }
      else
      {
        double v75 = v75 - v94;
      }
      [v76 addObject:v9];
    }
    else
    {
      int v79 = **((_DWORD **)this + 6);
      double v80 = *(double *)&v129;
      [v9 width];
      double v82 = v80 - v81;
      if (v79 != 3)
      {
        double v83 = *((double *)&v128 + 1);
        [v9 width];
        double v85 = v83 + v84 * -0.5;
        if (v82 >= v85) {
          double v82 = v85;
        }
      }
      [v9 width];
      double v87 = v82 + v86;
      if (v75 < v87) {
        double v75 = v87;
      }
      if (v82 > 0.0) {
        objc_msgSend(v76, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v82));
      }
      [v76 addObject:v9];
      double v75 = v75 - fmin(v82, 0.0);
    }
    objc_msgSend(v73, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v76));
    if ((*(unsigned int (**)(void))(**((void **)v7 + 11) + 16))(*((void *)v7 + 11)))
    {
      double v95 = (*(double (**)(void, uint64_t))(**((void **)v7 + 11) + 64))(*((void *)v7 + 11), 5);
      objc_msgSend(v73, "addObject:", -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", (v95 / 100.0 + -1.0) * *((double *)&v124 + 1), 0.0));
    }
    else
    {
      uint64_t v96 = *((void *)this + 37);
      if (v96) {
        __n128 v97 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v96 + *((void *)this + 36) - 1) / 0x1AuLL))
      }
                     + 152 * ((v96 + *((void *)this + 36) - 1) % 0x1AuLL));
      else {
        __n128 v97 = (char *)this + 56;
      }
      double v98 = *(double *)&v128;
      double v99 = (*(double (**)(void, uint64_t, char *, double))(**((void **)v7 + 11) + 56))(*((void *)v7 + 11), 20, v97 + 8, v13);
      uint64_t v100 = *((void *)this + 37);
      if (v100) {
        double v101 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v100 + *((void *)this + 36) - 1) / 0x1AuLL))
      }
                      + 152 * ((v100 + *((void *)this + 36) - 1) % 0x1AuLL));
      else {
        double v101 = (char *)this + 56;
      }
      double v102 = (*(double (**)(void, uint64_t, char *, double))(**((void **)v7 + 11) + 56))(*((void *)v7 + 11), 21, v101 + 8, v13);
      [v9 layoutDepth];
      double v104 = v102 + v103;
      if (v99 >= v104) {
        double v105 = v99;
      }
      else {
        double v105 = v104;
      }
      double v106 = [EQKitVSpace alloc];
      [v9 layoutDepth];
      double v108 = v107;
      [(EQKitBox *)v41 layoutHeight];
      objc_msgSend(v73, "addObject:", -[EQKitVSpace initWithHeight:depth:](v106, "initWithHeight:depth:", v98 + v105 - v108 - v109, 0.0));
    }
  }
  [(EQKitPaddedBox *)v41 width];
  if (v110 >= v75)
  {
    if (v41) {
      [v73 addObject:v41];
    }
  }
  else
  {
    double v111 = (void *)MEMORY[0x263EFF8C0];
    double v112 = [EQKitHSpace alloc];
    [(EQKitPaddedBox *)v41 width];
    objc_msgSend(v73, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", objc_msgSend(v111, "arrayWithObjects:", -[EQKitHSpace initWithWidth:](v112, "initWithWidth:", v75 - v113), v41, 0)));
  }
  [(EQKitCompoundBox *)v72 height];
  double v115 = v114;
  [(EQKitPaddedBox *)v41 height];
  double v117 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v73, [v73 count] - 1, v115 - v13 - v116);
  id v118 = objc_alloc_init(MEMORY[0x263EFF980]);
  [v118 addObject:v117];
  if (v15 != 0.0) {
    objc_msgSend(v118, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", -v15));
  }
  [v118 addObject:v72];
  if (v130 != 0.0)
  {
    int v119 = [EQKitHSpace alloc];
    objc_msgSend(v118, "addObject:", -[EQKitHSpace initWithWidth:](v119, "initWithWidth:", v130));
  }

  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v131);
  double v120 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v118];
  EQKit::ILayout::setBox((EQKitBox *)a3, &v120->super.super);

  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a3, 1);
  if (![v122 schemataIndex] || (v134 & 0x1000) != 0)
  {
    if ((v132 & 0x1C00u) <= 0x1000) {
      char v121 = 0;
    }
    else {
      char v121 = 3;
    }
  }
  else
  {
    char v121 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v121);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType(&v123);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v131);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
}

void sub_2558590F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

EQKit::ILayout *EQKitLayoutManager::layoutNone@<X0>(EQKit::ILayout *a1@<X8>)
{
  uint64_t v4 = [[EQKitHVSpace alloc] initWithWidth:0.0 height:0.0 depth:0.0];

  return EQKit::ILayout::ILayout(a1, &v4->super);
}

void EQKitLayoutManager::layoutPadded(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = [(id)EQKit::Layout::Schemata::paddedSchemata(a2) schemataNode];
  EQKitLayoutManager::layoutBox(this, v5, 0, (EQKit::ILayout *)v55);
  [v55[0] layoutHeight];
  double v7 = v6;
  [v55[0] layoutDepth];
  double v9 = v8;
  [v55[0] width];
  double v11 = v10;
  uint64_t v12 = *((void *)this + 37);
  if (v12) {
    double v13 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v12 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                 + 152 * ((v12 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    double v13 = (char *)this + 56;
  }
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v14 = *((void *)this + 77);
  uint64_t v15 = *((void *)this + 51);
  if (*((void *)this + 50) == v15) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(v15 - 8);
  }
  uint64_t v49 = v16;
  LODWORD(v50) = 29;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v14, v14 + 464, (uint64_t)&v49, (uint64_t)&v52);
  double v17 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v52, (uint64_t)v13, v7, v7, v9, v11);
  if (v17 >= 0.0) {
    double v18 = v17;
  }
  else {
    double v18 = 0.0;
  }
  LODWORD(v49) = 1;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v19 = *((void *)this + 77);
  uint64_t v20 = *((void *)this + 51);
  if (*((void *)this + 50) == v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)(v20 - 8);
  }
  uint64_t v46 = v21;
  LODWORD(v47) = 30;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v19, v19 + 464, (uint64_t)&v46, (uint64_t)&v49);
  double v22 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v49, (uint64_t)v13, v9, v7, v9, v11);
  if (v22 >= 0.0) {
    double v23 = v22;
  }
  else {
    double v23 = 0.0;
  }
  LODWORD(v46) = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v24 = *((void *)this + 77);
  uint64_t v25 = *((void *)this + 51);
  if (*((void *)this + 50) == v25) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *(void *)(v25 - 8);
  }
  uint64_t v43 = v26;
  LODWORD(v44) = 31;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v24, v24 + 464, (uint64_t)&v43, (uint64_t)&v46);
  double v27 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v46, (uint64_t)v13, v11, v7, v9, v11);
  if (v27 >= 0.0) {
    double v28 = v27;
  }
  else {
    double v28 = 0.0;
  }
  LODWORD(v43) = 1;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v29 = *((void *)this + 77);
  uint64_t v30 = *((void *)this + 51);
  if (*((void *)this + 50) == v30) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void *)(v30 - 8);
  }
  uint64_t v40 = v31;
  LODWORD(v41) = 32;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v29, v29 + 464, (uint64_t)&v40, (uint64_t)&v43);
  double v32 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v43, (uint64_t)v13, 0.0, v7, v9, v11);
  LODWORD(v40) = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v33 = *((void *)this + 77);
  uint64_t v34 = *((void *)this + 51);
  if (*((void *)this + 50) == v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = *(void *)(v34 - 8);
  }
  uint64_t v57 = v35;
  int v58 = 33;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v33, v33 + 464, (uint64_t)&v57, (uint64_t)&v40);
  double v36 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v40, (uint64_t)v13, 0.0, v7, v9, v11);
  double v37 = [EQKitPaddedBox alloc];
  double v38 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v37, "initWithBox:height:width:depth:lspace:voffset:", v55[0], v18, v28, v23, v32, v36, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50,
          v51,
          v52,
          v53,
          v54);
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v55);
  EQKit::ILayout::setBox((EQKitBox *)a3, v38);
  if (v18 == v7 && v23 == v9 && v36 == 0.0) {
    int v39 = (v56 >> 10) & 7;
  }
  else {
    LOBYTE(v39) = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v39);

  EQKit::ILayout::~ILayout((EQKit::ILayout *)v55);
}

void sub_2558595B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  EQKit::ILayout::~ILayout(v24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a24);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSpace(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 51);
  if (*((void *)this + 50) == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(v5 - 8);
  }
  double v7 = EQKitLayoutManager::lengthForAttribute(this, 26, v6, 0.0);
  uint64_t v8 = *((void *)this + 51);
  if (*((void *)this + 50) == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v8 - 8);
  }
  double v10 = EQKitLayoutManager::lengthForAttribute(this, 27, v9, 0.0);
  uint64_t v11 = *((void *)this + 51);
  if (*((void *)this + 50) == v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v11 - 8);
  }
  double v13 = [[EQKitHVSpace alloc] initWithWidth:EQKitLayoutManager::lengthForAttribute(this, 28, v12, 0.0) height:v7 depth:v10];
  uint64_t v14 = EQKit::ILayout::ILayout(a2, &v13->super);
  EQKit::ILayout::setIsUserSpace((uint64_t)v14, 1);
  if (v10 == 0.0 && v7 == 0.0) {
    char v16 = 6;
  }
  else {
    char v16 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v16);
}

void sub_25585971C(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFenced(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  id obj = (id)[(id)EQKit::Layout::Schemata::fencedSchemata(a2) schemataChildren];
  unint64_t v4 = [obj count];
  id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
  std::string::basic_string[abi:ne180100]<0>(&v66, "(");
  std::string::basic_string[abi:ne180100]<0>(&v65, ")");
  memset(&v64, 0, sizeof(v64));
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  std::vector<std::string>::pointer end = v64.__end_;
  if (v64.__end_ >= v64.__end_cap_.__value_)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v9) {
      unint64_t v9 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
    if (v10) {
      uint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v64.__end_cap_, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 + v8;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    long long v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v63;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    std::string::size_type v63 = 0;
    __p[0] = 0;
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v64, &__v);
    uint64_t v14 = v64.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v64.__end_ = v14;
    if (SHIBYTE(v63) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    v64.__end_->__r_.__value_.__r.__words[2] = v63;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v64.__end_ = end + 1;
  }
  uint64_t v15 = *((void *)this + 77);
  uint64_t v16 = *((void *)this + 51);
  if (*((void *)this + 50) == v16) {
    double v17 = 0;
  }
  else {
    double v17 = *(std::string **)(v16 - 8);
  }
  __v.__first_ = v17;
  LODWORD(__v.__begin_) = 18;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v15, v15 + 80, (uint64_t)&__v, &v66);
  uint64_t v18 = *((void *)this + 77);
  uint64_t v19 = *((void *)this + 51);
  if (*((void *)this + 50) == v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(std::string **)(v19 - 8);
  }
  __v.__first_ = v20;
  LODWORD(__v.__begin_) = 19;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v18, v18 + 80, (uint64_t)&__v, &v65);
  uint64_t v21 = *((void *)this + 77);
  uint64_t v22 = *((void *)this + 51);
  if (*((void *)this + 50) == v22) {
    double v23 = 0;
  }
  else {
    double v23 = *(std::string **)(v22 - 8);
  }
  __v.__first_ = v23;
  LODWORD(__v.__begin_) = 20;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(v21, v21 + 104, (uint64_t)&__v, (std::vector<std::wstring> *)&v64);
  double v55 = a3;
  std::vector<std::string>::pointer begin = v64.__begin_;
  std::vector<std::string>::pointer v24 = v64.__end_;
  std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v66.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    id v27 = [NSString alloc];
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v28 = &v66;
    }
    else {
      double v28 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    uint64_t v29 = (void *)[v27 initWithUTF8String:v28];
    uint64_t v30 = [[EQKitMathMLMOperator alloc] initWithString:v29 environment:*((void *)this + 76)];
    uint64_t v31 = v30;
    uint64_t v32 = *((void *)this + 51);
    if (*((void *)this + 50) == v32) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *(void *)(v32 - 8);
    }
    [(EQKitMathMLNode *)v30 setParent:v33];
    [v5 addObject:v31];
  }
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v34 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
  if (v34)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)begin) >> 3);
    uint64_t v37 = *(void *)v59;
    do
    {
      for (uint64_t i = 0; i != v34; ++i)
      {
        if (*(void *)v59 != v37) {
          objc_enumerationMutation(obj);
        }
        [v5 addObject:*(void *)(*((void *)&v58 + 1) + 8 * i)];
        if (v35 + i + 1 < v4 && v64.__end_ != v64.__begin_)
        {
          unint64_t v39 = v35 + i;
          if (v35 + i >= v36) {
            unint64_t v39 = v36 - 1;
          }
          uint64_t v40 = &v64.__begin_[v39];
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v40->__r_.__value_.__l.__size_) {
              continue;
            }
          }
          else if (!*((unsigned char *)&v40->__r_.__value_.__s + 23))
          {
            continue;
          }
          id v41 = [NSString alloc];
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v40 = (std::string *)v40->__r_.__value_.__r.__words[0];
          }
          uint64_t v42 = (void *)[v41 initWithUTF8String:v40];
          uint64_t v43 = [[EQKitMathMLMOperator alloc] initWithString:v42 environment:*((void *)this + 76)];
          uint64_t v44 = v43;
          uint64_t v45 = *((void *)this + 51);
          if (*((void *)this + 50) == v45) {
            uint64_t v46 = 0;
          }
          else {
            uint64_t v46 = *(void *)(v45 - 8);
          }
          [(EQKitMathMLNode *)v43 setParent:v46];
          [v5 addObject:v44];
        }
      }
      uint64_t v34 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
      v35 += i;
    }
    while (v34);
  }
  std::string::size_type v47 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v47 = v65.__r_.__value_.__l.__size_;
  }
  if (v47)
  {
    id v48 = [NSString alloc];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &v65;
    }
    else {
      uint64_t v49 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    uint64_t v50 = (void *)[v48 initWithUTF8String:v49];
    uint64_t v51 = [[EQKitMathMLMOperator alloc] initWithString:v50 environment:*((void *)this + 76)];
    uint64_t v52 = v51;
    uint64_t v53 = *((void *)this + 51);
    if (*((void *)this + 50) == v53) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)(v53 - 8);
    }
    [(EQKitMathMLNode *)v51 setParent:v54];
    [v5 addObject:v52];
  }
  EQKit::Layout::Schemata::row((EQKit::Layout::Schemata *)v5, (uint64_t)&__v);

  EQKitLayoutManager::layoutRow(this, (const EQKit::Layout::Schemata *)&__v, v55);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
}

void sub_255859CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int *__pa,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,std::__split_buffer<std::wstring> *a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  if (SHIBYTE(a27) < 0) {
    operator delete(__pa);
  }
  __pa = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutEnclose(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = [(id)EQKit::Layout::Schemata::encloseSchemata(a2) schemataRow];
  EQKitLayoutManager::layoutBox(this, v5, 0, (EQKit::ILayout *)v27);
  std::string __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v6 = *((void *)this + 77);
  uint64_t v7 = *((void *)this + 51);
  if (*((void *)this + 50) == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(v7 - 8);
  }
  uint64_t v28 = v8;
  int v29 = 47;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v6, v6 + 224, (uint64_t)&v28, (char *)&__p);
  CGMutablePathRef Mutable = CGPathCreateMutable();
  unint64_t v10 = (int *)__p;
  uint64_t v11 = v25;
  while (v10 != v11)
  {
    PathForNotation = EQKitLayoutManager::createPathForNotation(this, v27[0], *v10);
    CGPathAddPath(Mutable, 0, PathForNotation);
    CGPathRelease(PathForNotation);
    ++v10;
  }
  long long v13 = [EQKitPathBox alloc];
  [v27[0] height];
  double v15 = v14.n128_f64[0];
  uint64_t v16 = *((void *)this + 37);
  if (v16)
  {
    double v17 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v16 + *((void *)this + 36) - 1) / 0x1AuLL))
                 + 152 * ((v16 + *((void *)this + 36) - 1) % 0x1AuLL));
    uint64_t v18 = (uint64_t *)(v17 + 112);
  }
  else
  {
    uint64_t v18 = (uint64_t *)((char *)this + 168);
    double v17 = (char *)this + 56;
  }
  uint64_t v19 = *v18;
  uint64_t v20 = *((void *)v17 + 11);
  if (v17[120]) {
    v14.n128_u64[0] = *((void *)v17 + 16);
  }
  else {
    v14.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v17);
  }
  uint64_t v21 = [(EQKitPathBox *)v13 initWithCGPath:Mutable height:v19 cgColor:2 drawingMode:v15 lineWidth:(*(double (**)(uint64_t, uint64_t, char *, __n128))(*(void *)v20 + 56))(v20, 23, v17 + 8, v14)];
  uint64_t v22 = [EQKitOverlayBox alloc];
  double v23 = [(EQKitOverlayBox *)v22 initWithBox:v27[0] overlayBox:v21];
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v27);
  EQKit::ILayout::setBox((EQKitBox *)a3, v23);

  CGPathRelease(Mutable);
  if (__p)
  {
    uint64_t v25 = (int *)__p;
    operator delete(__p);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v27);
}

void sub_255859F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutAlignGroup(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2)
{
  if (*((void *)this + 49))
  {
    int v7 = 0;
    uint64_t v3 = *((void *)this + 77);
    uint64_t v4 = *((void *)this + 51);
    if (*((void *)this + 50) == v4) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *(void *)(v4 - 8);
    }
    uint64_t v8 = v5;
    int v9 = 37;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v3, v3 + 176, (uint64_t)&v8, &v7);
    unint64_t v6 = *((void *)this + 49) + *((void *)this + 48) - 1;
    EQKitLayoutRow::beginAlignmentGroup((void *)(*(void *)(*((void *)this + 45) + 8 * (v6 / 0x19)) + 160 * (v6 % 0x19)), v7);
  }
}

void EQKitLayoutManager::layoutAlignMark(EQKit::ILayout *a1@<X8>)
{
  uint64_t v4 = objc_alloc_init(EQKitBox);
  EQKit::ILayout::ILayout(a1, v4);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v5, v4, 0.0);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a1, 3, (uint64_t)v5);
  EQKit::ILayoutOffset::~ILayoutOffset(v5);
}

void sub_25585A104(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutStretchOperator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = [*(id *)a2 operatorUnicharOrNul];
  unsigned int v42 = v6;
  if (*(_DWORD *)(a2 + 8) == 2) {
    double v7 = *(double *)(a2 + 24) + *(double *)(a2 + 16);
  }
  else {
    double v7 = *(double *)(a2 + 32);
  }
  uint64_t v8 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
  uint64_t v9 = *(void *)(a1 + 296);
  if (v9) {
    unint64_t v10 = *(void *)(*(void *)(a1 + 264) + 8 * ((v9 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
  }
        + 152 * ((v9 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v10 = a1 + 56;
  }
  uint64_t v11 = (const void *)(*(uint64_t (**)(uint64_t, unsigned int *, void, unint64_t, double))(*(void *)v8 + 88))(v8, &v42, *(unsigned int *)(a2 + 8), v10 + 8, v7);
  if (v11)
  {
    uint64_t v12 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
    long long v13 = (void *)(*(uint64_t (**)(uint64_t, void, const void *))(*(void *)v12 + 152))(v12, v42, v11);
    if (!v13)
    {
LABEL_22:
      CFRelease(v11);
      goto LABEL_23;
    }
    __n128 v14 = [EQKitStringBox alloc];
    uint64_t v15 = *(void *)(a1 + 296);
    if (v15) {
      unint64_t v16 = *(void *)(*(void *)(a1 + 264) + 8 * ((v15 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
    }
          + 152 * ((v15 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
    else {
      unint64_t v16 = a1 + 56;
    }
    double v17 = [(EQKitStringBox *)v14 initWithAttributedString:v13 cgColor:*(void *)(v16 + 112)];
    p_super = &v17->super;
    int v19 = *(_DWORD *)(a2 + 8);
    if (v17) {
      BOOL v20 = v19 == 2;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20)
    {
      [(EQKitStringBox *)v17 height];
      double v22 = v21;
      [(EQKitBox *)p_super depth];
      double v24 = (v7 - (v22 + v23)) * 0.5 + v23 - *(double *)(a2 + 24);
      if (v24 == 0.0)
      {
LABEL_20:
        EQKit::ILayout::ILayout((EQKit::ILayout *)v41, p_super);
        EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v41);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);
        goto LABEL_21;
      }
      uint64_t v25 = [[EQKitVShift alloc] initWithBox:p_super offset:v24];
      EQKit::ILayout::ILayout((EQKit::ILayout *)v41, &v25->super);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v41);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);
    }
    else if (v19 == 1)
    {
      goto LABEL_20;
    }
LABEL_21:

    goto LABEL_22;
  }
LABEL_23:
  if (!*(void *)a3)
  {
    long long v40 = *MEMORY[0x263F001B0];
    uint64_t v26 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager", *MEMORY[0x263F001B0]));
    v27.n128_f64[0] = *(double *)(a2 + 24) + *(double *)(a2 + 16);
    if (*(_DWORD *)(a2 + 8) != 2) {
      v27.n128_u64[0] = *(void *)(a2 + 32);
    }
    uint64_t v28 = (const CGPath *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v26 + 96))(v26, v6, v27);
    if (v28)
    {
      if (*(_DWORD *)(a2 + 8) == 2)
      {
        double v29 = *(double *)(a2 + 16);
        double v30 = *(double *)(a2 + 24);
        uint64_t v31 = [EQKitPathBox alloc];
        uint64_t v32 = *(void *)(a1 + 296);
        if (v32) {
          unint64_t v33 = *(void *)(*(void *)(a1 + 264) + 8 * ((v32 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
        }
              + 152 * ((v32 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
        else {
          unint64_t v33 = a1 + 56;
        }
        uint64_t v37 = [(EQKitPathBox *)v31 initWithCGPath:v28 height:*(void *)(v33 + 112) paddingLeft:v29 + (*((double *)&v40 + 1) - (v29 + v30)) * 0.5 paddingRight:0.0 cgColor:0.0];
      }
      else
      {
        uint64_t v34 = [EQKitPathBox alloc];
        uint64_t v35 = *(void *)(a1 + 296);
        if (v35) {
          unint64_t v36 = *(void *)(*(void *)(a1 + 264) + 8 * ((v35 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
        }
              + 152 * ((v35 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
        else {
          unint64_t v36 = a1 + 56;
        }
        uint64_t v37 = [(EQKitPathBox *)v34 initWithCGPath:v28 height:*(void *)(v36 + 112) cgColor:*((double *)&v40 + 1)];
      }
      double v38 = v37;
      EQKit::ILayout::ILayout((EQKit::ILayout *)v41, v37);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v41);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);

      CGPathRelease(v28);
    }
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, 5);
}

void sub_25585A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v7);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::isOperatorSymmetric(uint64_t a1, void *a2)
{
  int v9 = 0;
  uint64_t v4 = *(void *)(a1 + 616);
  unint64_t v10 = a2;
  int v11 = 14;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return 1;
  }
  uint64_t v6 = [*(id *)(a1 + 608) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result) {
    return (*(unsigned __int8 *)(result + 48) >> 1) & 1;
  }
  return result;
}

double EQKitLayoutManager::lengthForCharacterProperty(uint64_t a1, double a2)
{
  uint64_t v4 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
  (*(void (**)(void *__return_ptr))(*(void *)v4 + 48))(v8);
  if (LODWORD(v8[0]))
  {
    uint64_t v5 = *(void *)(a1 + 296);
    if (v5) {
      unint64_t v6 = *(void *)(*(void *)(a1 + 264) + 8 * ((v5 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
    }
         + 152 * ((v5 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
    else {
      unint64_t v6 = a1 + 56;
    }
    return EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v8, *(double *)(v6 + 24));
  }
  return a2;
}

uint64_t EQKitLayoutManager::decimalPointOffsetInStringBox(EQKitLayoutManager *this, EQKitStringBox *a2)
{
  __int16 v6 = EQKitLayoutManager::decimalPointCharacter(this);
  uint64_t v3 = (void *)[[NSString alloc] initWithCharacters:&v6 length:1];
  uint64_t v4 = [(NSString *)[(NSAttributedString *)[(EQKitStringBox *)a2 attributedString] string] rangeOfString:v3];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v4 = [(NSAttributedString *)[(EQKitStringBox *)a2 attributedString] length];
  }

  return [(EQKitStringBox *)a2 positionOfCharacterAtIndex:v4];
}

void *EQKitLayoutManager::layoutNumberDigits(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2, unint64_t *a3)
{
  __int16 v6 = (void *)[MEMORY[0x263EFF980] array];
  uint64_t v7 = *((void *)this + 37);
  if (v7) {
    int v8 = (char *)(*(void *)(*((void *)this + 33) + 8 * ((v7 + *((void *)this + 36) - 1) / 0x1AuLL))
  }
                + 152 * ((v7 + *((void *)this + 36) - 1) % 0x1AuLL));
  else {
    int v8 = (char *)this + 56;
  }
  uint64_t v9 = *((void *)v8 + 11);
  uint64_t v10 = [(id)EQKit::Layout::Schemata::tokenSchemata(a2) schemataTokenString];
  int v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v9 + 80))(v9, v10, v8 + 8);
  __int16 v23 = EQKitLayoutManager::decimalPointCharacter(this);
  uint64_t v12 = (void *)[[NSString alloc] initWithCharacters:&v23 length:1];
  uint64_t v19 = 0;
  BOOL v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  long long v13 = (void *)[v11 string];
  uint64_t v14 = [v11 length];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  _OWORD v18[2] = ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke;
  v18[3] = &unk_2653C4F30;
  v18[4] = v11;
  v18[5] = v12;
  v18[6] = v6;
  v18[7] = &v19;
  v18[8] = v8;
  objc_msgSend(v13, "enumerateSubstringsInRange:options:usingBlock:", 0, v14, 2, v18);

  unint64_t v15 = [v6 count];
  *a3 = v15;
  unint64_t v16 = v20[3];
  if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v16 = v15;
  }
  *a3 = v16;

  _Block_object_dispose(&v19, 8);
  return v6;
}

void sub_25585AA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::decimalPointCharacter(EQKitLayoutManager *this)
{
  unsigned __int16 v7 = 46;
  uint64_t v2 = *((void *)this + 77);
  uint64_t v4 = *((void *)this + 50);
  uint64_t v3 = *((void *)this + 51);
  if (v4 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v3 - 8);
  }
  uint64_t v8 = v5;
  int v9 = 35;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(v2, v2 + 488, (uint64_t)&v8, &v7);
  return v7;
}

void ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:");
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL
    && [a2 isEqualToString:*(void *)(a1 + 40)])
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 48) count];
  }
  uint64_t v5 = [[EQKitStringBox alloc] initWithAttributedString:v4 cgColor:*(void *)(*(void *)(a1 + 64) + 112)];
  [*(id *)(a1 + 48) addObject:v5];
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(uint64_t a1, void *a2)
{
  uint64_t result = [a2 isEmbellishedOperator];
  if (result)
  {
    uint64_t v5 = (void *)[a2 operatorCore];
    int v10 = 0;
    uint64_t v6 = *(void *)(a1 + 616);
    int v11 = v5;
    int v12 = 45;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v6, v6 + 8, (uint64_t)&v11, &v10);
    if (v10)
    {
      return v10 == 2;
    }
    else
    {
      uint64_t v7 = [*(id *)(a1 + 608) operatorDictionary];
      unsigned __int16 v8 = [v5 operatorId];
      int v9 = EQKitLayoutManager::operatorForm(a1, v5);
      uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v7, v8, v9);
      if (result) {
        return (*(unsigned __int8 *)(result + 48) >> 5) & 1;
      }
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorWithAccent(uint64_t a1, void *a2)
{
  uint64_t result = [a2 isEmbellishedOperator];
  if (result)
  {
    uint64_t v5 = (void *)[a2 operatorCore];
    uint64_t v6 = [*(id *)(a1 + 608) operatorDictionary];
    unsigned __int16 v7 = [v5 operatorId];
    int v8 = EQKitLayoutManager::operatorForm(a1, v5);
    uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
    if (result) {
      return (*(unsigned __int8 *)(result + 48) >> 3) & 1;
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::isOperatorStretchy(uint64_t a1, void *a2)
{
  int v9 = 0;
  uint64_t v4 = *(void *)(a1 + 616);
  int v10 = a2;
  int v11 = 16;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return 1;
  }
  uint64_t v6 = [*(id *)(a1 + 608) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result) {
    return *(unsigned char *)(result + 48) & 1;
  }
  return result;
}

uint64_t EQKitLayoutManager::doesOperatorRequireVerticalStretch(uint64_t a1, void *a2)
{
  uint64_t v6 = a2;
  if (std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((void *)(a1 + 472), &v6)|| !EQKitLayoutManager::isOperatorStretchy(a1, v6))
  {
    return 0;
  }
  EQKit::Layout::Schemata::Schemata((uint64_t)v5);
  uint64_t v3 = EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(a1, v6, (uint64_t)v5);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v5);
  return v3;
}

void sub_25585AE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::isOperatorLargeOp(uint64_t a1, void *a2)
{
  int v9 = 0;
  uint64_t v4 = *(void *)(a1 + 616);
  int v10 = a2;
  int v11 = 39;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return 1;
  }
  uint64_t v6 = [*(id *)(a1 + 608) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result) {
    return (*(unsigned __int8 *)(result + 48) >> 2) & 1;
  }
  return result;
}

void EQKitLayoutManager::pushImplicitFormIfRequired(void *a1, void *a2, void *a3)
{
  if (EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2))
  {
    uint64_t v6 = [a3 firstObject];
    uint64_t v8 = 2 * (v6 == (void)a2);
    if ((void *)[a3 lastObject] == a2)
    {
      uint64_t v7 = (2 * (v6 == (void)a2)) | 8;
    }
    else
    {
      if ((void *)v6 == a2)
      {
LABEL_7:
        std::deque<unsigned long>::push_back(a1 + 26, &v8);
        return;
      }
      uint64_t v7 = 4;
    }
    uint64_t v8 = v7;
    goto LABEL_7;
  }
}

uint64_t EQKitLayoutManager::popImplicitFormIfRequired(void *a1, void *a2)
{
  uint64_t result = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2);
  if (result)
  {
    uint64_t v4 = a1[31];
    if (v4)
    {
      a1[31] = v4 - 1;
      return std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](a1 + 26, 1);
    }
  }
  return result;
}

void EQKitLayoutManager::resolveRow(EQKitLayoutManager *this, NSArray *a2)
{
  uint64_t v2 = *((void *)this + 49);
  if (v2)
  {
    unint64_t v4 = v2 + *((void *)this + 48) - 1;
    uint64_t v5 = *(void *)(*((void *)this + 45) + 8 * (v4 / 0x19));
    unint64_t v6 = v4 % 0x19;
    uint64_t v7 = (EQKitLayoutRow *)(v5 + 160 * v6);
    if (!*((void *)v7 + 8))
    {
      int v9 = (uint64_t *)(v5 + 160 * v6);
      memset(v34, 0, 24);
      std::vector<EQKit::ILayout>::__init_with_size[abi:ne180100]<EQKit::ILayout*,EQKit::ILayout*>(v34, v9[1], v9[2], 0x6DB6DB6DB6DB6DB7 * ((v9[2] - v9[1]) >> 3));
      int v10 = (void *)v9[7];
      double v32 = 0.0;
      double v33 = 0.0;
      EQKitLayoutRow::determineVSize(v7, &v33, &v32);
      uint64_t v11 = *((void *)this + 37);
      if (v11) {
        int v12 = (double *)(*(void *)(*((void *)this + 33) + 8 * ((v11 + *((void *)this + 36) - 1) / 0x1AuLL))
      }
                       + 152 * ((v11 + *((void *)this + 36) - 1) % 0x1AuLL));
      else {
        int v12 = (double *)((char *)this + 56);
      }
      if (((_BYTE)v12[15] & 2) != 0) {
        double v13 = v12[17];
      }
      else {
        double v13 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v12);
      }
      for (unint64_t i = [v10 firstIndex];
            i != 0x7FFFFFFFFFFFFFFFLL;
            unint64_t i = [v10 indexGreaterThanIndex:i])
      {
        unint64_t v15 = EQKitLayoutRow::childNodeAtIndex((id *)v7, i);
        unint64_t v16 = v15;
        if (v15)
        {
          uint64_t v31 = 0;
          uint64_t v31 = (void *)[v15 operatorCore];
          double v17 = (double *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((void *)this + 59, &v31);
          uint64_t v18 = v17;
          if (v17 && *((_DWORD *)v17 + 8) == 1)
          {
            double v19 = EQKitLayoutRow::determineWidth(v7);
            EQKitLayoutManager::registerHorizontalStretchedOperator(this, v31, 1, v18[7] - v19);
            EQKitLayoutManager::layoutBox(this, (uint64_t)v16, 0, (EQKit::ILayout *)v30);
            EQKit::ILayout::operator=(v34[0] + 56 * i, (uint64_t)v30);
          }
          else
          {
            EQKitLayoutManager::pushImplicitFormIfRequired(this, v16, a2);
            int isOperatorSymmetric = EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, v31);
            double v21 = v33;
            if (isOperatorSymmetric)
            {
              double v22 = v33 - v13;
              if (v33 - v13 < v13 + v32) {
                double v22 = v13 + v32;
              }
              double v21 = v13 + v22;
              double v23 = v22 - v13;
            }
            else
            {
              double v23 = v32;
            }
            double v24 = EQKitLayoutManager::registerVerticalStretchedOperator(this, v31, v21, v23);
            int v25 = *((_DWORD *)v24 + 2);
            double v27 = *((double *)v24 + 2);
            double v26 = *((double *)v24 + 3);
            double v28 = *((double *)v24 + 4);
            EQKitLayoutManager::layoutBox(this, (uint64_t)v16, 0, (EQKit::ILayout *)v30);
            double v29 = v26 + v27;
            if (v25 != 2) {
              double v29 = v28;
            }
            if (v21 + v23 < v29) {
              EQKit::ILayout::setVerticalContentClassification((uint64_t)v30, 0);
            }
            EQKit::ILayout::operator=(v34[0] + 56 * i, (uint64_t)v30);
            EQKitLayoutManager::popImplicitFormIfRequired(this, v16);
          }
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v30);
        }
      }
      EQKitLayoutRow::resolveLayouts((uint64_t)v7, v34);
      v30[0] = (void **)v34;
      std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](v30);
    }
  }
}

void sub_25585B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a9 = (void **)&a19;
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke(void *a1, uint64_t a2, __n128 a3)
{
  if (a1[4] == a2)
  {
    unint64_t v4 = (void *)a1[7];
    uint64_t v5 = v4[37];
    if (v5) {
      unint64_t v6 = *(void *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v6 = (unint64_t)(v4 + 7);
    }
    uint64_t v7 = *(void *)(v6 + 88);
    if (*(unsigned char *)(v6 + 120)) {
      a3.n128_u64[0] = *(void *)(v6 + 128);
    }
    else {
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    }
    *(double *)(*(void *)(a1[5] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v7 + 56))(v7, 3, v6 + 8, a3);
    uint64_t v9 = v4[37];
    if (v9) {
      unint64_t v10 = *(void *)(v4[33] + 8 * ((v9 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v9 + v4[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v10 = (unint64_t)(v4 + 7);
    }
    uint64_t v11 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v8.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v8.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    *(double *)(*(void *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v11 + 56))(v11, 37, v10 + 8, v8);
  }
}

void ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2(void *a1, uint64_t a2, __n128 a3)
{
  if (a1[4] == a2)
  {
    unint64_t v4 = (void *)a1[7];
    uint64_t v5 = v4[37];
    if (v5) {
      unint64_t v6 = *(void *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v6 = (unint64_t)(v4 + 7);
    }
    uint64_t v7 = *(void *)(v6 + 88);
    if (*(unsigned char *)(v6 + 120)) {
      a3.n128_u64[0] = *(void *)(v6 + 128);
    }
    else {
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    }
    *(double *)(*(void *)(a1[5] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v7 + 56))(v7, 4, v6 + 8, a3);
    uint64_t v9 = v4[37];
    if (v9) {
      unint64_t v10 = *(void *)(v4[33] + 8 * ((v9 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v9 + v4[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v10 = (unint64_t)(v4 + 7);
    }
    uint64_t v11 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v8.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v8.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    *(double *)(*(void *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v11 + 56))(v11, 38, v10 + 8, v8);
  }
}

EQKitBox *EQKitLayoutManager::wrapBoxWithAttribution(EQKitLayoutManager *this, EQKitBox *a2, id *a3)
{
  uint64_t v4 = EQKit::Layout::Schemata::sourceAttribution(a3);
  if (!v4) {
    return a2;
  }
  uint64_t v5 = [[EQKitAttributionBox alloc] initWithBox:a2 attribution:v4];

  return (EQKitBox *)v5;
}

uint64_t EQKitLayoutManager::lengthForMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
  uint64_t v6 = *(void *)(a1 + 296);
  if (v6)
  {
    unint64_t v7 = *(void *)(*(void *)(a1 + 264) + 8 * ((v6 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
       + 152 * ((v6 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
    unint64_t v8 = v7 + 8;
  }
  else
  {
    unint64_t v8 = a1 + 64;
    unint64_t v7 = a1 + 56;
  }
  if (*(unsigned char *)(v7 + 120)) {
    v5.n128_u64[0] = *(void *)(v7 + 128);
  }
  else {
    v5.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v4 + 56);

  return v9(v4, a2, v8, v5);
}

void EQKitLayoutManager::layoutSubsuperscript(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 296);
  if (v9) {
    unint64_t v10 = *(void *)(*(void *)(a1 + 264) + 8 * ((v9 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
  }
        + 152 * ((v9 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v10 = a1 + 56;
  }
  uint64_t v191 = 0;
  char v192 = &v191;
  uint64_t v193 = 0x2020000000;
  uint64_t v194 = 0;
  uint64_t v187 = 0;
  v188 = &v187;
  uint64_t v189 = 0x2020000000;
  char v190 = 0;
  uint64_t v183 = 0;
  int v184 = (double *)&v183;
  uint64_t v185 = 0x2020000000;
  uint64_t v186 = 0;
  uint64_t v179 = 0;
  v180 = (double *)&v179;
  uint64_t v181 = 0x2020000000;
  uint64_t v182 = 0;
  uint64_t v175 = 0;
  double v176 = (double *)&v175;
  uint64_t v177 = 0x2020000000;
  uint64_t v178 = 0;
  uint64_t v11 = (void *)a2;
  if (a2)
  {
    while (1)
    {
      int v12 = v11;
      [v11 layoutSchemata];
      if (v171 != 2) {
        break;
      }
      double v13 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v170);
      if ([v13 count] != 1) {
        break;
      }
      uint64_t v11 = (void *)[v13 objectAtIndex:0];
      EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v170);
      if (!v11) {
        goto LABEL_11;
      }
    }
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v170);
  }
  else
  {
    int v12 = 0;
  }
LABEL_11:
  if ([v12 isEmbellishedOperator]) {
    int isOperatorLargeOp = EQKitLayoutManager::isOperatorLargeOp(a1, (void *)[v12 operatorCore]);
  }
  else {
    int isOperatorLargeOp = 0;
  }
  v169[0] = MEMORY[0x263EF8330];
  v169[1] = 3221225472;
  v169[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke;
  v169[3] = &unk_2653C4F80;
  v169[6] = &v191;
  v169[7] = &v187;
  v169[8] = &v183;
  v169[9] = &v179;
  v169[11] = a1;
  v169[10] = &v175;
  v169[4] = v12;
  v169[5] = a2;
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a2, (uint64_t)v169, (EQKit::ILayout *)&v170);
  if ((v172 & 0x100) != 0) {
    *((unsigned char *)v188 + 24) = 1;
  }
  EQKit::ILayout::ILayout((EQKit::ILayout *)v165, 0);
  uint64_t v161 = 0;
  v162 = (double *)&v161;
  uint64_t v163 = 0x2020000000;
  uint64_t v164 = 0;
  if (a3)
  {
    v156[0] = MEMORY[0x263EF8330];
    v156[1] = 3221225472;
    v156[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2;
    v156[3] = &unk_2653C4F58;
    v156[4] = a3;
    v156[5] = &v187;
    v156[6] = &v161;
    v156[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a3, 1, 0, 2, 1, (uint64_t)v156, (EQKit::ILayout *)v157);
    EQKit::ILayout::operator=((uint64_t)v165, (uint64_t)v157);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v157, 0);
    EQKit::ILayout::operator=((uint64_t)v165, (uint64_t)v157);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v157);
  if (*((double *)v192 + 3) != 0.0)
  {
    uint64_t v14 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)[*(id *)(a1 + 608) fontManager]);
    double v15 = (*(double (**)(uint64_t, void))(*(void *)v14 + 64))(v14, 0);
    *((double *)v192 + 3) = v15 * *((double *)v192 + 3);
  }
  if (a4 && (*((unsigned char *)v188 + 24) || !*(unsigned char *)(*(void *)(a1 + 48) + 6)))
  {
    [a4 layoutSchemata];
    BOOL isLayoutSchemataOnlyPseudoSuperscripts = _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v157);
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v157);
  }
  else
  {
    BOOL isLayoutSchemataOnlyPseudoSuperscripts = 0;
  }
  EQKit::ILayout::ILayout((EQKit::ILayout *)v157, 0);
  uint64_t v152 = 0;
  double v153 = (double *)&v152;
  uint64_t v154 = 0x2020000000;
  uint64_t v155 = 0;
  if (a4)
  {
    v149[0] = MEMORY[0x263EF8330];
    v149[1] = 3221225472;
    v149[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3;
    v149[3] = &unk_2653C4F58;
    v149[4] = a4;
    v149[5] = &v187;
    v149[6] = &v152;
    v149[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, (uint64_t)a4, !isLayoutSchemataOnlyPseudoSuperscripts, 0, 2, 0, (uint64_t)v149, (EQKit::ILayout *)v150);
    EQKit::ILayout::operator=((uint64_t)v157, (uint64_t)v150);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v150, 0);
    EQKit::ILayout::operator=((uint64_t)v157, (uint64_t)v150);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v150);
  uint64_t v18 = v165[0];
  double v19 = v157[0];
  if (*((unsigned char *)v188 + 24))
  {
    uint64_t v20 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v17.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v17.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    double v25 = (*(double (**)(uint64_t, void, unint64_t, __n128))(*(void *)v20 + 56))(v20, 0, v10 + 8, v17);
    uint64_t v29 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v28.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v28.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    double v27 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v29 + 56))(v29, 1, v10 + 8, v28);
  }
  else
  {
    id v21 = v170;
    [v170 depth];
    double v23 = v22;
    double v24 = v162[3];
    [v21 height];
    double v25 = v23 + v24;
    double v27 = v26 - v153[3];
  }
  [v18 height];
  double v31 = v30.n128_f64[0];
  uint64_t v32 = *(void *)(v10 + 88);
  if (*(unsigned char *)(v10 + 120)) {
    v30.n128_u64[0] = *(void *)(v10 + 128);
  }
  else {
    v30.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  v33.n128_f64[0] = v31
                  - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v32 + 56))(v32, 8, v10 + 8, v30);
  if (v25 < v33.n128_f64[0]) {
    double v25 = v33.n128_f64[0];
  }
  uint64_t v34 = *(void *)(v10 + 88);
  if (*(unsigned char *)(v10 + 120)) {
    v33.n128_u64[0] = *(void *)(v10 + 128);
  }
  else {
    v33.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  double v35 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v34 + 56))(v34, 7, v10 + 8, v33);
  [v19 depth];
  v36.n128_f64[0] = v35 + v36.n128_f64[0];
  if (v27 < v36.n128_f64[0]) {
    double v27 = v36.n128_f64[0];
  }
  if (v19) {
    BOOL v37 = isLayoutSchemataOnlyPseudoSuperscripts;
  }
  else {
    BOOL v37 = 0;
  }
  if (v37)
  {
    double v27 = 0.0;
    if (!*(unsigned char *)(*(void *)(a1 + 40) + 16))
    {
      EQKitLayoutManager::lengthForMetric(a1, 29);
      v180[3] = v36.n128_f64[0] + v180[3];
    }
  }
  if (v18) {
    BOOL v38 = v19 == 0;
  }
  else {
    BOOL v38 = 1;
  }
  int v39 = !v38;
  int v142 = v39;
  if (!v38)
  {
    uint64_t v40 = *(void *)(v10 + 88);
    if (*(unsigned char *)(v10 + 120)) {
      v36.n128_u64[0] = *(void *)(v10 + 128);
    }
    else {
      v36.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    }
    double v41 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v40 + 56))(v40, 9, v10 + 8, v36);
    [v19 depth];
    double v43 = v42;
    [v18 height];
    double v45 = v27 - v43;
    double v46 = v41 - (v45 + v25 - v44.n128_f64[0]);
    if (v46 > 0.0)
    {
      uint64_t v47 = *(void *)(v10 + 88);
      if (*(unsigned char *)(v10 + 120)) {
        v44.n128_u64[0] = *(void *)(v10 + 128);
      }
      else {
        v44.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
      }
      double v48 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v47 + 56))(v47, 10, v10 + 8, v44)- v45;
      if (v48 >= v46) {
        double v49 = v46;
      }
      else {
        double v49 = v48;
      }
      BOOL v50 = v48 <= 0.0;
      double v51 = -0.0;
      if (!v50) {
        double v51 = v49;
      }
      double v27 = v27 + v51;
      double v52 = 0.0;
      if (!v50) {
        double v52 = v49;
      }
      double v53 = v46 - v52;
      if (v53 > 0.0) {
        double v25 = v25 + v53;
      }
    }
  }
  unsigned int v54 = v172;
  unsigned __int8 v55 = v172 & 0x3F | 0x40;
  unsigned __int16 v172 = v172 & 0xFF3F | 0x40;
  unsigned __int16 v166 = v166 & 0xFFCF | 0x10;
  unsigned __int16 v158 = v158 & 0xFFCF | 0x10;
  int v56 = (v54 >> 4) & 3;
  double v57 = 0.0;
  uint64_t v58 = 0;
  if (v56 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v56 + 30));
    uint64_t v58 = v59;
    unsigned __int8 v55 = v172;
  }
  int v60 = v55 >> 6;
  if (v60 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v60 + 30));
    double v57 = v61;
  }
  uint64_t v173 = v58;
  double v174 = v57;
  unsigned __int8 v62 = v166;
  int v63 = (v166 >> 4) & 3;
  uint64_t v64 = 0;
  double v65 = 0.0;
  if (v63 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v63 + 30));
    double v65 = v66;
    unsigned __int8 v62 = v166;
  }
  int v67 = v62 >> 6;
  if (v67 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v67 + 30));
    uint64_t v64 = v68;
  }
  double v167 = v65;
  uint64_t v168 = v64;
  unsigned __int8 v69 = v158;
  int v70 = (v158 >> 4) & 3;
  uint64_t v71 = 0;
  double v72 = 0.0;
  if (v70 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v70 + 30));
    double v72 = v73;
    unsigned __int8 v69 = v158;
  }
  int v74 = v69 >> 6;
  if (v74 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v74 + 30));
    uint64_t v71 = v75;
  }
  double v159 = v72;
  uint64_t v160 = v71;
  double v76 = 0.0;
  double v77 = 0.0;
  double v78 = 0.0;
  int v79 = (double *)MEMORY[0x263F00148];
  double v80 = v18;
  double v81 = a4;
  uint64_t v143 = v80;
  if (v80)
  {
    if (*((double *)v192 + 3) != 0.0 && v25 != 0.0 || v184[3] != 0.0)
    {
      int v82 = _startsWithToken(a3, *(void *)(a1 + 48));
      double v83 = 0.0;
      if (v82) {
        double v83 = v25 * tan(*((long double *)v192 + 3));
      }
      double v78 = v83 - v184[3];
    }
    uint64_t v84 = a3;
    double v85 = a5;
    if (isOperatorLargeOp) {
      double v78 = v78 - v176[3];
    }
    double v86 = v174;
    double v87 = v167;
    double v88 = *(void **)(a1 + 40);
    unsigned int v89 = v172;
    double v90 = *v79;
    double v91 = v79[1];
    id v92 = v170;
    char v93 = v166;
    [v170 opticalAlignWidth];
    if (v86 >= v87) {
      double v95 = v86;
    }
    else {
      double v95 = v87;
    }
    double v77 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v88, (v89 >> 2) & 3, v92, v93 & 3, v165[0], v90, v91, v78 + v94, v25, v95);
    a5 = v85;
    a3 = v84;
    a4 = v81;
  }
  double v96 = 0.0;
  if (v19)
  {
    double v141 = v78;
    if ((*((double *)v192 + 3) == 0.0 || v27 == 0.0) && v180[3] == 0.0)
    {
      double v99 = 0.0;
    }
    else
    {
      int v97 = _startsWithToken((uint64_t)a4, *(void *)(a1 + 48));
      double v98 = 0.0;
      if (v97) {
        double v98 = v27 * tan(*((long double *)v192 + 3));
      }
      double v99 = v180[3] - v98;
    }
    uint64_t v100 = a3;
    double v101 = v25;
    double v102 = a5;
    if ((isOperatorLargeOp & 1) == 0) {
      double v99 = v99 + v176[3];
    }
    double v103 = v174;
    double v104 = v159;
    double v105 = *(void **)(a1 + 40);
    unsigned int v106 = v172;
    double v107 = *v79;
    double v108 = v79[1];
    id v109 = v170;
    char v110 = v158;
    [v170 opticalAlignWidth];
    if (v103 >= v104) {
      double v112 = v103;
    }
    else {
      double v112 = v104;
    }
    double v76 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v105, (v106 >> 2) & 3, v109, v110 & 3, v157[0], v107, v108, v99 + v111, -v27, v112);
    a5 = v102;
    a3 = v100;
    a4 = v81;
    double v25 = v101;
    double v96 = v99;
    double v78 = v141;
  }
  if (v77 < v76) {
    double v77 = v76;
  }
  EQKitLayoutManager::lengthForMetric(a1, 36);
  if (v113 == 0.0)
  {
    double v114 = 0;
    if (!v143) {
      goto LABEL_129;
    }
  }
  else
  {
    double v114 = [[EQKitHSpace alloc] initWithWidth:v113];
    if (!v143) {
      goto LABEL_129;
    }
  }
  if (v78 + v77 != 0.0 || v114)
  {
    double v115 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:3];
    if (v78 + v77 != 0.0)
    {
      double v116 = [[EQKitHSpace alloc] initWithWidth:v78 + v77];
      [v115 addObject:v116];
    }
    [v115 addObject:v143];
    if (v114) {
      [v115 addObject:v114];
    }
    if (v115)
    {
      double v117 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v115];
      goto LABEL_130;
    }
  }
LABEL_129:
  double v117 = v143;
  double v115 = 0;
LABEL_130:

  if (!v19 || v96 + v77 == 0.0 && !v114) {
    goto LABEL_139;
  }
  id v118 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:3];
  if (v96 + v77 != 0.0)
  {
    int v119 = [[EQKitHSpace alloc] initWithWidth:v96 + v77];
    [v118 addObject:v119];
  }
  [v118 addObject:v19];
  if (v114) {
    [v118 addObject:v114];
  }
  if (v118)
  {
    double v120 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v118];
  }
  else
  {
LABEL_139:
    double v120 = v19;
    id v118 = 0;
  }

  EQKit::ILayout::ILayout((EQKit::ILayout *)v150, 0);
  if (v142)
  {
    [v19 layoutDepth];
    double v122 = v121;
    [v143 layoutHeight];
    long long v124 = [[EQKitVSpace alloc] initWithHeight:v27 - v122 depth:v25 - v123];
    uint64_t v125 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v120, v124, v117, 0);
    uint64_t v126 = [[EQKitVBox alloc] initWithChildBoxes:v125 pivotIndex:1];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v148, &v126->super.super);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v148);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v148);
  }
  else if (v143)
  {
    double v127 = [[EQKitVShift alloc] initWithBox:v117 offset:-v25];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v148, &v127->super);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v148);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v148);
  }
  else if (v19)
  {
    long long v128 = [[EQKitVShift alloc] initWithBox:v120 offset:v27];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v148, &v128->super);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v148);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v148);
  }
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  unsigned __int16 v172 = v172 & 0xFFF3 | 4;
  __int16 v151 = v151 & 0xFFFC | 1;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v147, (const EQKit::ILayout *)&v170);
  EQKitLayoutManager::addRowChild((void *)a1, (uint64_t)v147, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v147);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v146, (const EQKit::ILayout *)v150);
  uint64_t v129 = *(void *)(a1 + 408);
  if (*(void *)(a1 + 400) == v129) {
    uint64_t v130 = 0;
  }
  else {
    uint64_t v130 = *(void *)(v129 - 8);
  }
  EQKitLayoutManager::addRowChild((void *)a1, (uint64_t)v146, v130);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v146);
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, a5);
  uint64_t v131 = *(void *)(a1 + 296);
  if (v131) {
    unint64_t v132 = *(void *)(*(void *)(a1 + 264) + 8 * ((v131 + *(void *)(a1 + 288) - 1) / 0x1AuLL))
  }
         + 152 * ((v131 + *(void *)(a1 + 288) - 1) % 0x1AuLL);
  else {
    unint64_t v132 = a1 + 56;
  }
  if (!*(unsigned char *)(v132 + 16) && (v172 & 0x1000) != 0)
  {
    if (a4) {
      unint64_t v134 = ((unint64_t)v158 >> 12) & 1;
    }
    else {
      unint64_t v134 = 0;
    }
    int v135 = a3 != 0;
    if (a3) {
      uint64_t v136 = (a4 != 0) + 1;
    }
    else {
      uint64_t v136 = a4 != 0;
    }
    unint64_t v137 = ((unint64_t)v166 >> 12) & 1;
    if (!a3) {
      unint64_t v137 = 0;
    }
    if ((v166 & 0x1C00u) <= 0x1000) {
      int v135 = 0;
    }
    int v138 = (v158 & 0x1C00u) > 0x1000 && a4 != 0;
    unint64_t v139 = v137 + v134;
    if (v136 == 1 && v139 == 1
      || (v136 == 2 ? (int v140 = v138) : (int v140 = 0),
          (v140 & v135 & 1) != 0 || (char v133 = 0, v136 == 2) && v135 != v138 && v139 == 2))
    {
      char v133 = 3;
    }
  }
  else
  {
    char v133 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v133);
  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF3 | 8;
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v150);
  _Block_object_dispose(&v152, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v157);
  _Block_object_dispose(&v161, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v165);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v170);
  _Block_object_dispose(&v175, 8);
  _Block_object_dispose(&v179, 8);
  _Block_object_dispose(&v183, 8);
  _Block_object_dispose(&v187, 8);
  _Block_object_dispose(&v191, 8);
}

void sub_25585C74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a31);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a46);
  _Block_object_dispose(&a53, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a65);
  _Block_object_dispose(&a72, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x218]);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x2B0]);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose((const void *)(v72 - 248), 8);
  _Block_object_dispose((const void *)(v72 - 216), 8);
  _Block_object_dispose((const void *)(v72 - 184), 8);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke(void *a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (a1[4] == a2 && (uint64_t v6 = (void *)a1[11], EQKit::Layout::Schemata::isToken(this)))
  {
    uint64_t v7 = v6[37];
    if (v7) {
      unint64_t v8 = *(void *)(v6[33] + 8 * ((v7 + v6[36] - 1) / 0x1AuLL)) + 152 * ((v7 + v6[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v8 = (unint64_t)(v6 + 7);
    }
    if ((*(unsigned char *)(v8 + 120) & 4) != 0) {
      double v10 = *(double *)(v8 + 144);
    }
    else {
      double v10 = EQKitLayoutContext::pComputeSlantAngle((EQKitLayoutContext *)v8);
    }
    *(double *)(*(void *)(a1[6] + 8) + 24) = v10;
    uint64_t v11 = (void *)EQKit::Layout::Schemata::tokenSchemata(this);
    if (v11)
    {
      unsigned __int16 v12 = [v11 schemataUnicharOrNul];
      uint64_t v13 = v6[37];
      if (v13)
      {
        unint64_t v14 = *(void *)(v6[33] + 8 * ((v13 + v6[36] - 1) / 0x1AuLL)) + 152 * ((v13 + v6[36] - 1) % 0x1AuLL);
        double v15 = (void *)(v14 + 88);
      }
      else
      {
        double v15 = v6 + 18;
        unint64_t v14 = (unint64_t)(v6 + 7);
      }
      int v16 = v12;
      if ((*(unsigned int (**)(void, void, unint64_t))(*(void *)*v15 + 120))(*v15, v12, v14 + 8))
      {
        *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
      }
      if (v16)
      {
        *(double *)(*(void *)(a1[8] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((uint64_t)v6, 0.0);
        *(double *)(*(void *)(a1[9] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((uint64_t)v6, 0.0);
        *(double *)(*(void *)(a1[10] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((uint64_t)v6, 0.0);
      }
    }
  }
  else
  {
    BOOL v9 = a1[5] == a2 && *((_DWORD *)this + 2) == 2;
    if (v9 && ![(id)EQKit::Layout::Schemata::children(this) count]) {
      *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    }
  }
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2(void *a1, uint64_t a2, __n128 a3)
{
  if (a1[4] == a2 && !*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    uint64_t v4 = (void *)a1[7];
    uint64_t v5 = v4[37];
    if (v5) {
      unint64_t v6 = *(void *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v6 = (unint64_t)(v4 + 7);
    }
    uint64_t v7 = *(void *)(v6 + 88);
    if (*(unsigned char *)(v6 + 120)) {
      a3.n128_u64[0] = *(void *)(v6 + 128);
    }
    else {
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    }
    *(double *)(*(void *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v7 + 56))(v7, 6, v6 + 8, a3);
  }
}

BOOL _isLayoutSchemataOnlyPseudoSuperscripts(const EQKit::Layout::Schemata *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!EQKit::Layout::Schemata::isToken(a1))
  {
    if (*((_DWORD *)a1 + 2) == 2)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      uint64_t v4 = (void *)EQKit::Layout::Schemata::children(a1);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (!v5) {
        return 1;
      }
      uint64_t v6 = *(void *)v12;
LABEL_8:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v4);
        }
        unint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * v7);
        if (v8) {
          [v8 layoutSchemata];
        }
        else {
          memset(v10, 0, sizeof(v10));
        }
        char isLayoutSchemataOnlyPseudoSuperscripts = _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v10);
        EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v10);
        if ((isLayoutSchemataOnlyPseudoSuperscripts & 1) == 0) {
          break;
        }
        if (v5 == ++v7)
        {
          uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
          BOOL result = 1;
          if (v5) {
            goto LABEL_8;
          }
          return result;
        }
      }
    }
    return 0;
  }
  uint64_t v2 = (EQKit::Unicode *)[(id)EQKit::Layout::Schemata::tokenSchemata(a1) schemataUnicharOrNul];

  return EQKit::Unicode::isPseudoScript(v2);
}

void sub_25585CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3(void *a1, uint64_t a2, __n128 a3)
{
  if (a1[4] == a2 && !*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    uint64_t v4 = (void *)a1[7];
    uint64_t v5 = v4[37];
    if (v5) {
      unint64_t v6 = *(void *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    }
    else {
      unint64_t v6 = (unint64_t)(v4 + 7);
    }
    uint64_t v7 = *(void *)(v6 + 88);
    if (*(unsigned char *)(v6 + 120)) {
      a3.n128_u64[0] = *(void *)(v6 + 128);
    }
    else {
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    }
    *(double *)(*(void *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v7 + 56))(v7, 5, v6 + 8, a3);
  }
}

uint64_t _startsWithToken(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      [v3 layoutSchemata];
      if (EQKit::Layout::Schemata::isToken((EQKit::Layout::Schemata *)&v6)) {
        break;
      }
      if (v7 == 4)
      {
        if (!*(unsigned char *)(a2 + 7)) {
          goto LABEL_12;
        }
        uint64_t v5 = [(id)EQKit::Layout::Schemata::subsuperscriptSchemata((EQKit::Layout::Schemata *)&v6) schemataKernel];
      }
      else
      {
        if (v7 != 2
          || (uint64_t v4 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v6), ![v4 count]))
        {
LABEL_12:
          EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v6);
          return 0;
        }
        uint64_t v5 = [v4 objectAtIndex:0];
      }
      uint64_t v3 = (void *)v5;
      EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v6);
      if (!v3) {
        return 0;
      }
    }
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v6);
    return 1;
  }
  return result;
}

void sub_25585CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void EQKitLayoutManager::layoutOverOrUnderBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, EQKit::ILayout *a7@<X8>)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  unsigned __int16 v7[2] = ___ZN18EQKitLayoutManager20layoutOverOrUnderBoxEPU26objcproto15EQKitLayoutNode11objc_objectbPbPjPd_block_invoke;
  v7[3] = &unk_2653C4FA8;
  char v8 = a3;
  v7[4] = a2;
  v7[5] = a1;
  v7[6] = a4;
  v7[7] = a5;
  v7[8] = a6;
  EQKitLayoutManager::layoutBox(a1, a2, a3 ^ 1u, 0, 2, 0, (uint64_t)v7, a7);
}

void ___ZN18EQKitLayoutManager20layoutOverOrUnderBoxEPU26objcproto15EQKitLayoutNode11objc_objectbPbPjPd_block_invoke(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(void *)(a1 + 32) == a2)
    {
      uint64_t v5 = *(void **)(a1 + 40);
      if (EQKit::Layout::Schemata::isToken(this))
      {
        uint64_t v6 = *(void *)(a1 + 56);
        **(unsigned char **)(a1 + 4++*(void *)(this + 8) = 1;
        if (v6) {
          **(_DWORD **)(a1 + 56) = [(id)EQKit::Layout::Schemata::tokenSchemata(this) schemataUnicharOrNul];
        }
        if (*(void *)(a1 + 64))
        {
          uint64_t v7 = v5[37];
          if (v7) {
            char v8 = (EQKitLayoutContext *)(*(void *)(v5[33] + 8 * ((v7 + v5[36] - 1) / 0x1AuLL))
          }
                                      + 152 * ((v7 + v5[36] - 1) % 0x1AuLL));
          else {
            char v8 = (EQKitLayoutContext *)(v5 + 7);
          }
          BOOL v9 = (const __CTFont *)EQKitLayoutContext::font(v8);
          **(CGFloat **)(a1 + 64) = CTFontGetXHeight(v9);
        }
      }
    }
  }
}

void ___ZN18EQKitLayoutManager22layoutUnderoverBaseBoxEPU26objcproto15EQKitLayoutNode11objc_objectPN5EQKit6Script4InfoEPbPj_block_invoke(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(void *)(a1 + 32) == a2)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    if (EQKit::Layout::Schemata::isToken(this))
    {
      **(_DWORD **)(a1 + 4++*(void *)(this + 8) = [(id)EQKit::Layout::Schemata::tokenSchemata(this) schemataUnicharOrNul];
      uint64_t v6 = v5[37];
      if (v6) {
        unint64_t v7 = *(void *)(v5[33] + 8 * ((v6 + v5[36] - 1) / 0x1AuLL)) + 152 * ((v6 + v5[36] - 1) % 0x1AuLL);
      }
      else {
        unint64_t v7 = (unint64_t)(v5 + 7);
      }
      EQKit::Script::Info::operator=(*(void *)(a1 + 56), v7 + 8);
      **(unsigned char **)(a1 + 64) = 1;
    }
  }
}

double EQKit::Script::Info::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + ++*(void *)(this + 8) = *(unsigned char *)(a2 + 8);
    *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    double result = *(double *)(a2 + 16);
    *(double *)(a1 + 16) = result;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return result;
}

EQKitVShift *EQKitLayoutManager::baselineAlignBox(void *a1, void *a2, int a3)
{
  switch(a3)
  {
    case 0:
    case 3:
    case 4:
      [a2 vsize];
      double v5 = v4 * 0.5;
      [a2 height];
      double v7 = v5 - v6;
      break;
    case 1:
      [a2 height];
      double v7 = -v8;
      break;
    case 2:
      [a2 vsize];
      double v11 = v10 * 0.5;
      [a2 height];
      uint64_t v13 = a1[37];
      if (v13) {
        unint64_t v14 = *(void *)(a1[33] + 8 * ((v13 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v13 + a1[36] - 1) % 0x1AuLL);
      }
      else {
        unint64_t v14 = (unint64_t)(a1 + 7);
      }
      double v16 = v11 - v12;
      if ((*(unsigned char *)(v14 + 120) & 2) != 0) {
        double v17 = *(double *)(v14 + 136);
      }
      else {
        double v17 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v14);
      }
      double v7 = v16 + v17;
      break;
    case 5:
      [a2 depth];
      double v7 = v15;
      break;
    default:
      double v7 = 0.0;
      break;
  }
  uint64_t v18 = [[EQKitVShift alloc] initWithBox:a2 offset:v7];

  return v18;
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, double a3@<D0>, double *a4@<X4>, uint64_t a5@<X2>, uint64_t a6@<X3>, EQKit::ILayout *a7@<X8>)
{
  uint64_t v13 = (void *)((char *)this + 512);
  uint64_t v14 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v19, (uint64_t)this, v14, a5, a6, a3);
  std::deque<EQKitLayoutElementaryStack>::push_back(v13, (const EQKitLayoutElementaryStack *)v19);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v19);
  unint64_t v15 = *((void *)this + 69) + *((void *)this + 68) - 1;
  double v16 = (id *)(*(void *)(*((void *)this + 65) + 8 * (v15 / 0x18)) + 168 * (v15 % 0x18));
  EQKitLayoutElementaryStack::layout(v16, a7);
  double v17 = EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 2uLL);
  *a4 = v17 - EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 1uLL);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v13);
}

void sub_25585D414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutTable>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    double v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    double v4 = a1 + 5;
    unint64_t v5 = a1[4];
    double v6 = &v2[v5 / 0x2A];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if ((char *)*v6 + 96 * (v5 % 0x2A) != (void *)v7)
    {
      double v8 = (void (***)(void))((char *)*v6 + 96 * (v5 % 0x2A));
      do
      {
        BOOL v9 = *v8;
        v8 += 12;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4032)
        {
          double v10 = (void (***)(void))v6[1];
          ++v6;
          double v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *double v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<EQKitLayoutTable *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  double v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<EQKitLayoutElementaryStack>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    double v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    double v4 = a1 + 5;
    unint64_t v5 = a1[4];
    double v6 = &v2[v5 / 0x18];
    unint64_t v7 = (EQKitLayoutElementaryStack *)((char *)*v6 + 168 * (v5 % 0x18));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x18] + 168 * ((a1[5] + v5) % 0x18);
    if (v7 != (EQKitLayoutElementaryStack *)v8)
    {
      do
      {
        EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(v7);
        unint64_t v7 = (EQKitLayoutElementaryStack *)(v9 + 168);
        if (v7 - (EQKitLayoutElementaryStack *)*v6 == 4032)
        {
          double v10 = (EQKitLayoutElementaryStack *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutElementaryStack *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *double v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 12;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 24;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutRow>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x19];
    unint64_t v7 = (EQKitLayoutRow *)((char *)*v6 + 160 * (v5 % 0x19));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x19] + 160 * ((a1[5] + v5) % 0x19);
    if (v7 != (EQKitLayoutRow *)v8)
    {
      do
      {
        EQKitLayoutRow::~EQKitLayoutRow(v7);
        unint64_t v7 = (EQKitLayoutRow *)(v9 + 160);
        if (v7 - (EQKitLayoutRow *)*v6 == 4000)
        {
          double v10 = (EQKitLayoutRow *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutRow *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 12;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 25;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutContext>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x1A];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x1A] + 152 * ((a1[5] + v5) % 0x1A);
    if ((char *)*v6 + 152 * (v5 % 0x1A) != (void *)v7)
    {
      unint64_t v8 = (void (***)(void))((char *)*v6 + 152 * (v5 % 0x1A));
      do
      {
        uint64_t v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 3952)
        {
          double v10 = (void (***)(void))v6[1];
          ++v6;
          unint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 13;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 26;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    int v9 = *(_DWORD *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      int v9 = *(_DWORD *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2;
  unsigned int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = v2;
  do
  {
    unint64_t v8 = *(void *)(v3 + 32);
    if (v5 == v8) {
      BOOL v9 = *(_DWORD *)(v3 + 40) < v6;
    }
    else {
      BOOL v9 = v8 < v5;
    }
    BOOL v10 = !v9;
    if (v9) {
      unint64_t v11 = (uint64_t *)(v3 + 8);
    }
    else {
      unint64_t v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v12 = *(void *)(v7 + 32);
  BOOL v13 = v6 < *(_DWORD *)(v7 + 40);
  int v14 = v12 == v5 ? v13 : v5 < v12;
  if (v14 == 1) {
    return v2;
  }
  return v7;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    BOOL v9 = (const std::string *)(v7 + 48);
LABEL_3:
    std::string::operator=(a4, v9);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      BOOL v9 = (const std::string *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    __int16 v9 = *(_WORD *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      __int16 v9 = *(_WORD *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    *(_DWORD *)a4 = *(_DWORD *)(v7 + 48);
    *(void *)(a4 + ++*(void *)(this + 8) = *(void *)(v7 + 56);
    uint64_t v9 = *(void *)(v7 + 64);
LABEL_3:
    *(void *)(a4 + 16) = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      *(_DWORD *)a4 = *(_DWORD *)(v13 + 48);
      *(void *)(a4 + ++*(void *)(this + 8) = *(void *)(v13 + 56);
      uint64_t v9 = *(void *)(v13 + 64);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    if ((char *)(v7 + 48) == a4) {
      return 1;
    }
    uint64_t v9 = *(char **)(v7 + 48);
    uint64_t v10 = *(void *)(v7 + 56);
LABEL_4:
    std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(a4, v9, v10, (v10 - (uint64_t)v9) >> 2);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      if ((char *)(v14 + 48) == a4) {
        return 1;
      }
      uint64_t v9 = *(char **)(v14 + 48);
      uint64_t v10 = *(void *)(v14 + 56);
      goto LABEL_4;
    }
  }
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<std::wstring> *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    if ((std::vector<std::wstring> *)(v7 + 48) == a4) {
      return 1;
    }
    uint64_t v9 = *(std::string **)(v7 + 48);
    uint64_t v10 = *(long long **)(v7 + 56);
LABEL_4:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a4, v9, v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      if ((std::vector<std::wstring> *)(v14 + 48) == a4) {
        return 1;
      }
      uint64_t v9 = *(std::string **)(v14 + 48);
      uint64_t v10 = *(long long **)(v14 + 56);
      goto LABEL_4;
    }
  }
  return result;
}

void EQKitLayoutTable::~EQKitLayoutTable(EQKitLayoutTable *this)
{
  EQKitLayoutTable::~EQKitLayoutTable(this);

  JUMPOUT(0x25A290040);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_27045A9A0;
  uint64_t v4 = (void **)((char *)this + 64);
  std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,0>(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(uint64_t a1)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(a1 + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    *(_DWORD *)a4 = *(_DWORD *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
LABEL_3:
    *(void *)(a4 + ++*(void *)(this + 8) = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      *(_DWORD *)a4 = *(_DWORD *)(v13 + 48);
      uint64_t v9 = *(void *)(v13 + 56);
      goto LABEL_3;
    }
  }
  return result;
}

void *std::vector<EQKit::ILayout>::__init_with_size[abi:ne180100]<EQKit::ILayout*,EQKit::ILayout*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    std::vector<EQKit::ILayout>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25585E59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++*(void *)(this + 8) = v10;
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<EQKit::ILayout>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKit::ILayout::ILayout((EQKit::ILayout *)(a4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25585E6C0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 - 56));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

EQKitLayoutContext *std::deque<EQKitLayoutContext>::push_back(void *a1, EQKitLayoutContext *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 26 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutContext>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (EQKitLayoutContext *)(*(void *)(v4 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A));
  }
  uint64_t result = EQKitLayoutContext::EQKitLayoutContext(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutContext>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF70uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF70uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xF70uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25585EAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<EQKitLayoutContext *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      double v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      double v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<EQKitLayoutContext *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + ++*(void *)(this + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + ++*(void *)(this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + ++*(void *)(this + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + ++*(void *)(this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<EQKitLayoutContext>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  (**(void (***)(void))(*(void *)(a1[1] + 8 * (v2 / 0x1A)) + 152 * (v2 % 0x1A)))();
  --a1[5];

  return std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 26 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1A) {
    a2 = 1;
  }
  if (v5 < 0x34) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  void *v8;
  void *result;
  unint64_t v10;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::__emplace_unique_key_args<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},objc_object  {objcproto15EQKitLayoutNode13EQKitOperator} const&,objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}* const&>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((void *)v14 + 2) == *a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = *a3;
  long long v16 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v14 + 40) = v16;
  *((void *)v14 + 7) = *(void *)(a4 + 32);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)uint64_t v14 = *v24;
LABEL_38:
    *uint64_t v24 = v14;
    goto LABEL_39;
  }
  *(void *)uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v25 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_25585F420(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25585F878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25585FC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

EQKitLayoutElementaryStack *std::deque<EQKitLayoutElementaryStack>::push_back(void *a1, const EQKitLayoutElementaryStack *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 24 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (EQKitLayoutElementaryStack *)(*(void *)(v4 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18));
  }
  uint64_t result = EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x18;
  unint64_t v4 = v2 - 24;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_255860098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)(*(void *)(a1[1] + 8 * (v2 / 0x18))
                                                                                       + 168 * (v2 % 0x18)));
  --a1[5];

  return std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 24 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x18) {
    a2 = 1;
  }
  if (v5 < 0x30) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

const void **EQKit::AutoCFType<__CTFont const*>::~AutoCFType(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **EQKit::AutoCFType<CGPath const*>::~AutoCFType(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

double std::deque<EQKitLayoutTable>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 42 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutTable>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)unint64_t v8 = &unk_27045A9A0;
  *(void *)(v8 + ++*(void *)(this + 8) = v9;
  *(void *)(v8 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v8 + 4++*(void *)(this + 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(unsigned char *)(v8 + 8++*(void *)(this + 8) = *(unsigned char *)(a2 + 88);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutTable>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2558605F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutTable>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  (**(void (***)(void))(*(void *)(a1[1] + 8 * (v2 / 0x2A)) + 96 * (v2 % 0x2A)))();
  --a1[5];

  return std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_255860AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

EQKitLayoutRow *std::deque<EQKitLayoutRow>::push_back(void *a1, EQKitLayoutRow *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 25 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutRow>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (EQKitLayoutRow *)(*(void *)(v4 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19));
  }
  double result = EQKitLayoutRow::EQKitLayoutRow(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutRow>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x19;
  unint64_t v4 = v2 - 25;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFA0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFA0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_255860EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutRow>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(*(void *)(a1[1] + 8 * (v2 / 0x19)) + 160 * (v2 % 0x19)));
  --a1[5];

  return std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 25 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19) {
    a2 = 1;
  }
  if (v5 < 0x32) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_255861928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  a29 = &a43;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = &a47;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t _pathBoxForCompositeEdge(const EQKit::OpticalKern::Edge::Composite *a1, double a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CGMutablePathRef v3 = EQKit::OpticalKern::Edge::Composite::newPathForEdge(a1);
  if (!v3) {
    return 0;
  }
  CGMutablePathRef v4 = v3;
  long long v10 = xmmword_2558BE200;
  long long v11 = unk_2558BE210;
  unint64_t v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00260]);
  uint64_t v6 = CGColorCreate(v5, (const CGFloat *)&v10);
  CGColorSpaceRelease(v5);
  int v7 = [EQKitPathBox alloc];
  uint64_t v8 = -[EQKitPathBox initWithCGPath:height:cgColor:drawingMode:lineWidth:](v7, "initWithCGPath:height:cgColor:drawingMode:lineWidth:", v4, v6, 2, 0.0, 1.0 / a2, v10, v11);
  CGColorRelease(v6);
  CFRelease(v4);
  return v8;
}

void sub_255861D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  MEMORY[0x25A290040](v20, 0x10C402FEFCB83);
  if (__p)
  {
    a15 = __p;
    operator delete(__p);
  }
  std::string __p = &a20;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<EQKit::OpticalKern::Spec::Entry>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<EQKit::OpticalKern::Spec::Entry>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 72 * a2;
    while (v3 != v7)
      EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(v3 - 72));
    a1[1] = v7;
  }
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 72 * a2;
      BOOL v14 = (_OWORD *)MEMORY[0x263F00148];
      do
      {
        *(_DWORD *)uint64_t v7 = 0;
        *(_OWORD *)(v7 + ++*(void *)(this + 8) = *v14;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = 0;
        *(_WORD *)(v7 + 40) = -1;
        *(void *)(v7 + 56) = 0;
        *(void *)(v7 + 64) = 0;
        *(void *)(v7 + 4++*(void *)(this + 8) = 0;
        v7 += 72;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    v18[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[72 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[72 * v11];
    uint64_t v16 = &v15[72 * a2];
    uint64_t v17 = (_OWORD *)MEMORY[0x263F00148];
    do
    {
      *(_DWORD *)uint64_t v15 = 0;
      *(_OWORD *)(v15 + ++*(void *)(this + 8) = *v17;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 4) = 0;
      *((_WORD *)v15 + 20) = -1;
      *((void *)v15 + 7) = 0;
      *((void *)v15 + ++*(void *)(this + 8) = 0;
      *((void *)v15 + 6) = 0;
      v15 += 72;
    }
    while (v15 != v16);
    _OWORD v18[2] = v16;
    std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_255861FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::vector<unsigned long> const>::shared_ptr[abi:ne180100]<std::vector<unsigned long>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_25586206C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<std::vector<unsigned long>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<unsigned long> *,std::shared_ptr<std::vector<unsigned long> const>::__shared_ptr_default_delete<std::vector<unsigned long> const,std::vector<unsigned long>>,std::allocator<std::vector<unsigned long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25A290040);
}

void std::__shared_ptr_pointer<std::vector<unsigned long> *,std::shared_ptr<std::vector<unsigned long> const>::__shared_ptr_default_delete<std::vector<unsigned long> const,std::vector<unsigned long>>,std::allocator<std::vector<unsigned long>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<unsigned long> *,std::shared_ptr<std::vector<unsigned long> const>::__shared_ptr_default_delete<std::vector<unsigned long> const,std::vector<unsigned long>>,std::allocator<std::vector<unsigned long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<unsigned long>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + ++*(void *)(this + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x25A290040);
  }
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, double a2, const Collection *a3, NSString *a4, double a5, char a6)
{
  *(void *)this = &unk_27045AA48;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a6;
  *(_WORD *)((char *)this + 17) = 0;
  *((_DWORD *)this + 5) = 1;
  *((double *)this + 3) = a2;
  *((_DWORD *)this + ++*(void *)(this + 8) = 0;
  *((void *)this + 5) = a4;
  *((double *)this + 6) = a2;
  *((void *)this + 7) = 0;
  *((void *)this + 9) = 0;
  *((double *)this + 10) = a5;
  *((void *)this + 11) = a3;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  double v7 = (*((double (**)(const Collection *, uint64_t))*a3 + 8))(a3, 2);
  if (*((double *)this + 6) < v7) {
    double v7 = *((double *)this + 6);
  }
  *((double *)this + ++*(void *)(this + 8) = v7;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 1++*(void *)(this + 8) = 0;
  *((void *)this + 16) = 0;
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, const EQKitLayoutContext *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = &unk_27045AA48;
  *((void *)this + 1) = v4;
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *(_WORD *)((char *)this + 17) = *(_WORD *)((char *)a2 + 17);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((_DWORD *)this + ++*(void *)(this + 8) = *((_DWORD *)a2 + 8);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)this + ++*(void *)(this + 8) = *((void *)a2 + 8);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)this + 11) = *((void *)a2 + 11);
  CFTypeRef v5 = (CFTypeRef)*((void *)a2 + 12);
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  *((void *)this + 12) = v5;
  *((void *)this + 13) = 0;
  CFTypeRef v6 = (CFTypeRef)*((void *)a2 + 14);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  *((void *)this + 14) = v6;
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  long long v7 = *((_OWORD *)a2 + 8);
  *((void *)this + 1++*(void *)(this + 8) = *((void *)a2 + 18);
  *((_OWORD *)this + ++*(void *)(this + 8) = v7;
}

void EQKitLayoutContext::EQKitLayoutContext(uint64_t a1, EQKitLayoutContext *this, uint64_t a3, void *a4, uint64_t a5, char a6, int a7)
{
  *(void *)a1 = &unk_27045AA48;
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 1++*(void *)(this + 8) = 0;
  *(_DWORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = 0x4028000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4++*(void *)(this + 8) = *(void *)(a3 + 24);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 56);
  uint64_t v13 = (double *)(a1 + 56);
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = *(void *)(a3 + 80);
  uint64_t v14 = EQKitLayoutManager::fontCollection((id *)this);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 8++*(void *)(this + 8) = v14;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v42 = 0;
  char v43 = 1;
  uint64_t v15 = *((void *)this + 77);
  __n128 v44 = a4;
  int v45 = 9;
  int v16 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(v15, v15 + 296, (uint64_t)&v44, (uint64_t)&v42);
  uint64_t v17 = *(void *)(a3 + 8);
  if (v16)
  {
    uint64_t v18 = EQKit::ScriptLevel::resolveWithBase((EQKit::ScriptLevel *)&v42, *(void *)(a3 + 8));
    uint64_t v17 = *(void *)(a3 + 8);
  }
  else
  {
    uint64_t v18 = v17 + a5;
  }
  uint64_t v19 = *((void *)this + 77);
  __n128 v44 = a4;
  int v45 = 42;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(v19, v19 + 440, (uint64_t)&v44, v13);
  LODWORD(v41[0]) = 1;
  v41[1] = 0;
  uint64_t v20 = *((void *)this + 77);
  __n128 v44 = a4;
  int v45 = 43;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v20, v20 + 32, (uint64_t)&v44, (uint64_t)v41))
  {
    double v21 = (*(double (**)(void, uint64_t))(**(void **)(a1 + 88) + 64))(*(void *)(a1 + 88), 2);
    if (*(double *)(a1 + 48) < v21) {
      double v21 = *(double *)(a1 + 48);
    }
    *(double *)(a1 + 64) = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)v41, a3, v21);
  }
  v41[0] = 0;
  uint64_t v22 = *((void *)this + 77);
  __n128 v44 = a4;
  int v45 = 44;
  int v23 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(v22, v22 + 536, (uint64_t)&v44, v41);
  uint64_t v24 = (const void **)(a3 + 112);
  if (v23) {
    uint64_t v24 = v41;
  }
  unint64_t v25 = *v24;
  *(void *)(a1 + 112) = *v24;
  if (v25) {
    CFRetain(v25);
  }
  EQKitTypes::CFRetainRelease::~CFRetainRelease(v41);
  LODWORD(v41[0]) = 0;
  if ([*(id *)(a1 + 72) conformsToProtocol:&unk_2704673E8]) {
    uint64_t v26 = *(void **)(a1 + 72);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *((void *)this + 77);
  __n128 v44 = a4;
  int v45 = 17;
  char v28 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v27, v27 + 368, (uint64_t)&v44, v41);
  if (v26) {
    char v30 = v28;
  }
  else {
    char v30 = 1;
  }
  if (v30)
  {
    if (!v26) {
      goto LABEL_23;
    }
  }
  else
  {
    LODWORD(v41[0]) = [v26 scriptVariant];
  }
  LODWORD(v26) = [v26 scriptContext];
LABEL_23:
  if (*v13 != 0.0
    || (unint64_t)(v18 - 1) > 1
    || (v18 == 1 ? (uint64_t v31 = 3) : (uint64_t v31 = 4),
        double v32 = *((double *)this + 1),
        v29.n128_f64[0] = *v13,
        double v33 = v32
            * (*(double (**)(void, uint64_t, __n128))(**(void **)(a1 + 88) + 64))(*(void *)(a1 + 88), v31, v29), v33 == 0.0))
  {
    double v33 = *(double *)(a1 + 48);
    if (v18 != v17)
    {
      double v34 = *v13;
      if (*v13 == 0.0) {
        double v34 = 0.71;
      }
      double v33 = v33 * pow(v34, (double)(v18 - v17));
    }
  }
  if (v33 < *(double *)(a1 + 64)) {
    double v33 = *(double *)(a1 + 64);
  }
  if ((void *)[a4 operatorCore] == a4) {
    char isOperatorLargeOp = EQKitLayoutManager::isOperatorLargeOp((uint64_t)this, a4);
  }
  else {
    char isOperatorLargeOp = 0;
  }
  BOOL v36 = *(unsigned char *)(a3 + 17) != 0;
  if (a7 == 2)
  {
    BOOL v36 = 0;
  }
  else if (a7 == 1)
  {
    BOOL v36 = 1;
  }
  uint64_t v37 = *(void *)(a3 + 40);
  int v38 = (int)v41[0];
  *(void *)(a1 + ++*(void *)(this + 8) = v18;
  *(unsigned char *)(a1 + 16) = a6;
  *(unsigned char *)(a1 + 17) = v36;
  *(unsigned char *)(a1 + 1++*(void *)(this + 8) = isOperatorLargeOp;
  *(_DWORD *)(a1 + 20) = v38;
  *(double *)(a1 + 24) = v33;
  *(_DWORD *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v37;
  if (v33 == *(double *)(a3 + 24) && v38 == *(_DWORD *)(a3 + 20))
  {
    CFTypeRef v39 = *(CFTypeRef *)(a3 + 96);
    if (v39) {
      CFTypeRef v39 = CFRetain(v39);
    }
    *(void *)(a1 + 96) = v39;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 12++*(void *)(this + 8) = 0;
}

void sub_2558626CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void EQKitLayoutContext::~EQKitLayoutContext(CGColorRef *this)
{
  *this = (CGColorRef)&unk_27045AA48;
  EQKitLayoutContext::pInvalidateFonts((EQKitLayoutContext *)this);
  CGColorRelease(this[14]);
}

{
  uint64_t vars8;

  EQKitLayoutContext::~EQKitLayoutContext(this);

  JUMPOUT(0x25A290040);
}

void EQKitLayoutContext::pInvalidateFonts(EQKitLayoutContext *this)
{
  uint64_t v2 = (const void *)*((void *)this + 12);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 12) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 13);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 13) = 0;
  }
}

uint64_t EQKitLayoutContext::font(EQKitLayoutContext *this)
{
  uint64_t result = *((void *)this + 12);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 11) + 72))(*((void *)this + 11), (char *)this + 8);
    *((void *)this + 12) = result;
  }
  return result;
}

const __CTFont *EQKitLayoutContext::textFont(EQKitLayoutContext *this)
{
  v13[3] = *MEMORY[0x263EF8340];
  uint64_t result = (const __CTFont *)*((void *)this + 13);
  if (!result)
  {
    *((void *)this + 13) = CTFontCreateWithName(*((CFStringRef *)this + 5), *((CGFloat *)this + 10), 0);
    uint64_t v3 = EQKit::Script::Info::symbolicFontTraits((EQKitLayoutContext *)((char *)this + 8));
    uint64_t result = (const __CTFont *)*((void *)this + 13);
    if (v3)
    {
      CFDictionaryRef v4 = CTFontCopyTraits(result);
      uint64_t v5 = *MEMORY[0x263F03B48];
      if ([(__CFDictionary *)v4 objectForKeyedSubscript:*MEMORY[0x263F03B48]] != v3)
      {
        CFStringRef v6 = CTFontCopyFamilyName(*((CTFontRef *)this + 13));
        uint64_t v7 = *MEMORY[0x263F03A80];
        v13[0] = v6;
        uint64_t v8 = *MEMORY[0x263F03B28];
        v12[0] = v7;
        v12[1] = v8;
        v13[1] = [NSNumber numberWithDouble:*((double *)this + 10)];
        v12[2] = *MEMORY[0x263F03B60];
        uint64_t v10 = v5;
        uint64_t v11 = [NSNumber numberWithUnsignedInt:v3];
        id v13[2] = [NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
        unint64_t v9 = CTFontDescriptorCreateWithAttributes((CFDictionaryRef)[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3]);
        CFRelease(*((CFTypeRef *)this + 13));
        *((void *)this + 13) = CTFontCreateWithFontDescriptor(v9, *((CGFloat *)this + 10), 0);
        CFRelease(v9);
        CFRelease(v6);
      }
      CFRelease(v4);
      return (const __CTFont *)*((void *)this + 13);
    }
  }
  return result;
}

uint64_t EQKit::Script::Info::symbolicFontTraits(EQKit::Script::Info *this)
{
  int v1 = *((_DWORD *)this + 3) - 2;
  if (v1 > 0xC) {
    return 0;
  }
  else {
    return dword_2558BE38C[v1];
  }
}

double EQKitLayoutContext::pComputeRuleThickness(EQKitLayoutContext *this)
{
  return *((double *)this + 16);
}

double EQKitLayoutContext::pComputeMathAxis(EQKitLayoutContext *this)
{
  double v2 = (*(double (**)(void, uint64_t, char *, double))(**((void **)this + 11) + 56))(*((void *)this + 11), 33, (char *)this + 8, 0.0);
  if (v2 == 0.0)
  {
    uint64_t v4 = *((void *)this + 12);
    if (v4
      || (uint64_t v4 = (*(uint64_t (**)(void, char *))(**((void **)this + 11) + 72))(*((void *)this + 11), (char *)this + 8), (*((void *)this + 12) = v4) != 0))
    {
      id v5 = objc_alloc(NSDictionary);
      CFStringRef v6 = objc_msgSend(v5, "initWithObjectsAndKeys:", v4, *MEMORY[0x263F039A0], 0);
    }
    else
    {
      CFStringRef v6 = 0;
    }
    CFAttributedStringRef v7 = (const __CFAttributedString *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:@"−" attributes:v6];
    uint64_t v8 = CTLineCreateWithAttributedString(v7);
    FakeContext = (CGContext *)EQKitUtilGetFakeContext();
    CGRect ImageBounds = CTLineGetImageBounds(v8, FakeContext);
    CGFloat x = ImageBounds.origin.x;
    CGFloat y = ImageBounds.origin.y;
    CGFloat width = ImageBounds.size.width;
    CGFloat height = ImageBounds.size.height;
    CFRelease(v8);

    v16.origin.CGFloat x = x;
    v16.origin.CGFloat y = y;
    v16.size.CGFloat width = width;
    v16.size.CGFloat height = height;
    *((CGFloat *)this + 17) = CGRectGetMidY(v16);
    v17.origin.CGFloat x = x;
    v17.origin.CGFloat y = y;
    v17.size.CGFloat width = width;
    v17.size.CGFloat height = height;
    double v3 = CGRectGetHeight(v17);
  }
  else
  {
    *((double *)this + 17) = v2;
    (*(void (**)(void, uint64_t, char *, double))(**((void **)this + 11) + 56))(*((void *)this + 11), 35, (char *)this + 8, 0.0);
  }
  *((double *)this + 16) = v3;
  *((unsigned char *)this + 120) |= 3u;
  return *((double *)this + 17);
}

CGFloat EQKitLayoutContext::pComputeSlantAngle(EQKitLayoutContext *this)
{
  *((unsigned char *)this + 120) |= 4u;
  double v2 = (const __CTFont *)*((void *)this + 12);
  if (!v2)
  {
    double v2 = (const __CTFont *)(*(uint64_t (**)(void, char *))(**((void **)this + 11) + 72))(*((void *)this + 11), (char *)this + 8);
    *((void *)this + 12) = v2;
  }
  CGFloat SlantAngle = CTFontGetSlantAngle(v2);
  CGFloat result = (SlantAngle + SlantAngle) * 3.14159265 / 360.0;
  *((CGFloat *)this + 1++*(void *)(this + 8) = result;
  return result;
}

CGFloat EQKitLayoutContext::unitValue(const __CTFont **this, int a2)
{
  double v3 = 1.0;
  if (a2 != 2)
  {
    if (a2 == 5)
    {
      if (((_BYTE)this[15] & 1) == 0) {
        EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)this);
      }
      return *((double *)this + 16);
    }
    else if (a2 == 3)
    {
      return *((double *)this + 3);
    }
    return v3;
  }
  uint64_t v4 = this[12];
  if (!v4)
  {
    uint64_t v4 = (const __CTFont *)(*(uint64_t (**)(const __CTFont *, char *))(*(void *)this[11] + 72))(this[11], (char *)this + 8);
    this[12] = v4;
    if (!v4) {
      return v3;
    }
  }

  return CTFontGetXHeight(v4);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    uint64_t v9 = *(void *)(v7 + 48);
    char v10 = *(unsigned char *)(v7 + 56);
LABEL_3:
    *(unsigned char *)(a4 + ++*(void *)(this + 8) = v10;
    *(void *)a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = *(void *)(v14 + 48);
      char v10 = *(unsigned char *)(v14 + 56);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    uint64_t v9 = *(void *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        uint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = *(void *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    uint64_t v9 = (CFTypeRef *)(v7 + 48);
LABEL_3:
    EQKitTypes::CFRetainRelease::operator=(a4, v9);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        uint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = (CFTypeRef *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

const void **EQKitTypes::CFRetainRelease::operator=(const void **a1, CFTypeRef *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFTypeRef v5 = CFRetain(v5);
  }
  *a1 = v5;
  return a1;
}

void EQKitTypes::CFRetainRelease::~CFRetainRelease(const void **this)
{
  int v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

double EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + ++*(void *)(this + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = [*(id *)(a2 + 40) mutableCopy];
  *(void *)(a1 + 4++*(void *)(this + 8) = [*(id *)(a2 + 48) mutableCopy];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(id *this)
{
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 15);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 9);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layout@<X0>(id *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  EQKitLayoutElementaryStack::collectRows(this);
  if ([this[5] count])
  {
    if (!this[6]) {
      this[6] = objc_alloc_init(MEMORY[0x263EFF980]);
    }
    std::vector<double>::vector(&__p, (unint64_t)this[7] + (void)this[8]);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v4 = this[5];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v43 objects:v50 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v44 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          objc_msgSend(v8, "setFirstColumnIndex:", (char *)this[7] + objc_msgSend(v8, "alignmentShift"));
          objc_msgSend(v8, "populateMaxColumnWidths:", (char *)__p + 8 * objc_msgSend(v8, "firstColumnIndex"));
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v43 objects:v50 count:16];
      }
      while (v5);
    }
    uint64_t v9 = (double *)__p;
    float v10 = 0.0;
    while (v9 != v48)
    {
      double v11 = *v9++;
      float v10 = v11 + v10;
    }
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v12 = this[5];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v39 objects:v49 count:16];
    double v34 = a2;
    uint64_t v14 = 0;
    if (v13)
    {
      uint64_t v15 = 0;
      int v16 = 0;
      double v17 = v10;
      uint64_t v18 = *(void *)v40;
      do
      {
        uint64_t v19 = 0;
        uint64_t v35 = v15 + v13;
        uint64_t v20 = (uint64_t)v16;
        do
        {
          if (*(void *)v40 != v18) {
            objc_enumerationMutation(v12);
          }
          int v16 = *(void **)(*((void *)&v39 + 1) + 8 * v19);
          if ((id)(v15 + v19) == this[2]) {
            uint64_t v14 = [this[6] count];
          }
          EQKitLayoutElementaryStack::layoutForRow(this, v16, v20, (uint64_t)&__p, (EQKit::ILayout *)&v37, v17);
          if ((id)(v15 + v19) == this[3])
          {
            double v21 = [EQKitHVSpace alloc];
            [v37 width];
            double v23 = v22;
            [v37 height];
            double v25 = v24;
            [v37 depth];
            uint64_t v27 = [(EQKitHVSpace *)v21 initWithWidth:v23 height:v25 depth:v26];
            EQKit::ILayout::ILayout((EQKit::ILayout *)v36, v27);
            EQKit::ILayout::operator=((uint64_t)&v37, (uint64_t)v36);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v36);
          }
          objc_msgSend(this[6], "addObject:", v37, v34);
          if (v15 + v19 + 1 < (unint64_t)[this[5] count])
          {
            char v28 = [EQKitVSpace alloc];
            [v16 followingSpace];
            __n128 v29 = -[EQKitVSpace initWithHeight:depth:](v28, "initWithHeight:depth:");
            [this[6] addObject:v29];
          }
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v37);
          ++v19;
          uint64_t v20 = (uint64_t)v16;
        }
        while (v13 != v19);
        uint64_t v13 = [v12 countByEnumeratingWithState:&v39 objects:v49 count:16];
        uint64_t v15 = v35;
      }
      while (v13);
    }
    a2 = v34;
    if (this[2] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      char v30 = [[EQKitVBox alloc] initWithChildBoxes:this[6]];
      v36[0] = 0;
      uint64_t v31 = *((void *)*this + 77);
      id v37 = (id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)*this);
      int v38 = 2;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v31, v31 + 152, (uint64_t)&v37, v36);
      double v32 = (EQKitVBox *)EQKitLayoutManager::baselineAlignBox(*this, v30, v36[0]);
    }
    else
    {
      double v32 = [[EQKitVBox alloc] initWithChildBoxes:this[6] pivotIndex:v14];
    }
    if (__p)
    {
      double v48 = (double *)__p;
      operator delete(__p);
    }
  }
  else
  {
    double v32 = 0;
  }
  return EQKit::ILayout::ILayout(a2, &v32->super.super);
}

void sub_255863504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutElementaryStack::collectRows(id *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  double v2 = (void *)[this[1] schemataChildren];
  uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*this, *(void *)(*((void *)&v8 + 1) + 8 * v6), 0, (EQKit::ILayout *)v7);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v7);
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

void EQKitLayoutElementaryStack::layoutForRow(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, EQKit::ILayout *a5@<X8>, double a6@<D0>)
{
  id v12 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (([a2 spansStack] & 1) == 0)
  {
    uint64_t v13 = *(double **)a4;
    uint64_t v14 = [a2 firstColumnIndex];
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      float v16 = 0.0;
      do
      {
        double v17 = *v13++;
        float v16 = v17 + v16;
        v15 -= 8;
      }
      while (v15);
      double v18 = v16;
    }
    else
    {
      double v18 = 0.0;
    }
    uint64_t v19 = [[EQKitHSpace alloc] initWithWidth:v18];
    [v12 addObject:v19];
  }
  uint64_t v20 = objc_msgSend(a2, "newBoxWithStackWidth:columnWidthIter:iterMax:previousRow:layoutManager:", *(void *)a4 + 8 * objc_msgSend(a2, "firstColumnIndex"), *(void *)(a4 + 8), a3, *a1, a6);
  [v12 addObject:v20];

  double v21 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v12];
  EQKit::ILayout::ILayout(a5, &v21->super.super);
}

void sub_2558637B8(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackGroup@<X0>(void *a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  uint64_t v7 = a1 + 9;
  uint64_t v6 = (EQKitLayoutManager *)*a1;
  uint64_t v8 = *((void *)v6 + 77);
  uint64_t v24 = EQKitLayoutManager::currentNode(v6);
  int v25 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v8, v8 + 392, (uint64_t)&v24, &v23);
  uint64_t v9 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  uint64_t v24 = v23 + v9;
  std::deque<long>::push_back(v7, &v24);
  uint64_t v22 = 0;
  uint64_t v10 = *(void *)(*a1 + 616);
  uint64_t v24 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)*a1);
  int v25 = 22;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v10, v10 + 392, (uint64_t)&v24, &v22);
  std::deque<long>::push_back(a1 + 15, &v22);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v11 = (void *)[a2 schemataChildren];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v19;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v19 != v14) {
          objc_enumerationMutation(v11);
        }
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*a1, *(void *)(*((void *)&v18 + 1) + 8 * v15), 0, (EQKit::ILayout *)v17);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v17);
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [v11 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v13);
  }
  --a1[14];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](v7, 1);
  --a1[20];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](a1 + 15, 1);
  return EQKit::ILayout::ILayout(a3, 0);
}

uint64_t EQKitLayoutElementaryStack::shiftPosition(EQKitLayoutElementaryStack *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 20);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 - 1;
  uint64_t v4 = (void *)((char *)this + 72);
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 10)
                             + (((unint64_t)(*((void *)this + 13) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*((void *)this + 13) + v3) & 0x1FF));
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 16)
                             + (((unint64_t)(v2 + *((void *)this + 19) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *((void *)this + 19) - 1) & 0x1FF))
     + v5;
  *((void *)this + 14) = v3;
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 9, 1);
  std::deque<long>::push_back(v4, &v7);
  return v5;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackRow@<X0>(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v6 = (void *)[a2 schemataChildren];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)v29;
  uint64_t v9 = 0x7FFFFFFFLL;
  do
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v29 != v8) {
        objc_enumerationMutation(v6);
      }
      long long v11 = *(void **)(*((void *)&v28 + 1) + 8 * i);
      if ([v11 isNumber])
      {
        unint64_t v27 = 0;
        uint64_t v12 = *a1;
        if (v11) {
          [v11 layoutSchemata];
        }
        else {
          memset(v26, 0, 32);
        }
        uint64_t v13 = EQKitLayoutManager::layoutNumberDigits(v12, (const EQKit::Layout::Schemata *)v26, &v27);
        EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v26);
        if (v9 == 0x7FFFFFFF)
        {
          uint64_t v14 = [v5 count];
          uint64_t v9 = v27 + v14;
        }
        [v5 addObjectsFromArray:v13];
      }
      else
      {
        EQKitLayoutManager::layoutBox(*a1, (uint64_t)v11, 0, (EQKit::ILayout *)v26);
        [v5 addObject:*(void *)&v26[0]];
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
      }
    }
    uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
  }
  while (v7);
  if (v9 == 0x7FFFFFFF) {
LABEL_17:
  }
    uint64_t v9 = [v5 count];
  unint64_t v27 = 0;
  uint64_t v15 = *((void *)*a1 + 77);
  *(void *)&v26[0] = EQKitLayoutManager::currentNode(*a1);
  DWORD2(v26[0]) = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v15, v15 + 392, (uint64_t)v26, &v27);
  float v16 = [EQKitLayoutElementaryStackDigitRow alloc];
  uint64_t v17 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  unint64_t v18 = v27;
  unint64_t v19 = EQKitLayoutManager::layoutContext(*a1);
  unint64_t v21 = v19;
  uint64_t v22 = *(void *)(v19 + 88);
  if (*(unsigned char *)(v19 + 120)) {
    v20.n128_u64[0] = *(void *)(v19 + 128);
  }
  else {
    v20.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v19);
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v22 + 56))(v22, 16, v21 + 8, v20);
  uint64_t v23 = -[EQKitLayoutElementaryStackDigitRow initWithChildren:decimalPoint:position:followingSpace:](v16, "initWithChildren:decimalPoint:position:followingSpace:", v5, v9, v18 + v17);
  EQKitLayoutElementaryStack::addRow(a1, v23);

  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_255863D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutElementaryStack::addRow(void *a1, void *a2)
{
  id v4 = (id)a1[5];
  if (!v4)
  {
    id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
    a1[5] = v4;
  }
  [v4 addObject:a2];
  uint64_t v5 = [a2 alignmentShift];
  if (a1[7] <= -v5) {
    uint64_t v6 = -v5;
  }
  else {
    uint64_t v6 = a1[7];
  }
  a1[7] = v6;
  uint64_t v7 = [a2 alignmentShift];
  uint64_t result = [a2 columnCount];
  uint64_t v9 = result + v7;
  if (a1[8] > result + v7) {
    uint64_t v9 = a1[8];
  }
  a1[8] = v9;
  return result;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackLine@<X0>(uint64_t a1@<X0>, EQKit::ILayout *a2@<X8>)
{
  double v4 = *(double *)(a1 + 32);
  if (v4 <= 0.0)
  {
    unint64_t v5 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
    if (*(unsigned char *)(v5 + 120)) {
      double v4 = *(double *)(v5 + 128);
    }
    else {
      double v4 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v5);
    }
  }
  uint64_t v19 = 0;
  uint64_t v6 = *(void *)(*(void *)a1 + 616);
  uint64_t v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  int v21 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v6, v6 + 392, (uint64_t)&v20, &v19);
  uint64_t v18 = 0;
  uint64_t v7 = *(void *)(*(void *)a1 + 616);
  uint64_t v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  int v21 = 23;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v7, v7 + 416, (uint64_t)&v20, &v18);
  uint64_t v8 = [EQKitLayoutElementaryStackLineRow alloc];
  uint64_t v9 = v18;
  uint64_t v10 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  uint64_t v11 = v19;
  unint64_t v12 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
  unint64_t v14 = v12;
  uint64_t v15 = *(void *)(v12 + 88);
  if (*(unsigned char *)(v12 + 120)) {
    v13.n128_u64[0] = *(void *)(v12 + 128);
  }
  else {
    v13.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v12);
  }
  float v16 = [(EQKitLayoutElementaryStackLineRow *)v8 initWithLength:v9 thickness:v11 + v10 position:v4 followingSpace:(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v15 + 56))(v15, 16, v14 + 8, v13)];
  EQKitLayoutElementaryStack::addRow((void *)a1, v16);

  return EQKit::ILayout::ILayout(a2, 0);
}

void EQKitLayoutElementaryStack::layoutStackCarries(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v18 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v37 = 0;
  int v38 = &v37;
  uint64_t v39 = 0x4812000000;
  long long v40 = __Block_byref_object_copy_;
  long long v41 = __Block_byref_object_dispose_;
  long long v42 = &unk_2558F564B;
  long long v44 = 0;
  uint64_t v45 = 0;
  long long v43 = 0;
  uint64_t v33 = 0;
  double v34 = (double *)&v33;
  uint64_t v35 = 0x2020000000;
  uint64_t v36 = 0;
  long long v30 = 0;
  long long v31 = 0;
  uint64_t v32 = 0;
  uint64_t v5 = *((void *)*a1 + 77);
  uint64_t v24 = EQKitLayoutManager::currentNode(*a1);
  int v25 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v5, v5 + 200, (uint64_t)&v24, (char *)&v30);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v6 = (void *)[a2 schemataChildren];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v26 objects:v46 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        uint64_t v11 = *a1;
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 3321888768;
        v20[2] = ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke;
        v20[3] = &unk_27045AA90;
        v20[7] = a1;
        v20[4] = v10;
        v20[5] = &v37;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        std::string __p = 0;
        std::vector<EQKitTypes::Crossout::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Crossout::Enum*,EQKitTypes::Crossout::Enum*>(&__p, v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 2);
        v20[6] = &v33;
        EQKitLayoutManager::layoutBox(v11, v10, 1, 0, 0, 0, (uint64_t)v20, (EQKit::ILayout *)&v24);
        [v18 addObject:v24];
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v24);
        if (__p)
        {
          uint64_t v22 = __p;
          operator delete(__p);
        }
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v26 objects:v46 count:16];
    }
    while (v7);
  }
  uint64_t v19 = 0;
  uint64_t v12 = *((void *)*a1 + 77);
  uint64_t v24 = EQKitLayoutManager::currentNode(*a1);
  int v25 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v12, v12 + 392, (uint64_t)&v24, &v19);
  __n128 v13 = [EQKitLayoutElementaryStackCarryRow alloc];
  uint64_t v14 = [v18 count];
  uint64_t v15 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  float v16 = [(EQKitLayoutElementaryStackCarryRow *)v13 initWithChildren:v18 decimalPoint:v14 position:v19 + v15 followingSpace:v38 + 6 crossouts:v34[3]];
  EQKitLayoutElementaryStack::addRow(a1, v16);

  EQKit::ILayout::ILayout(a3, 0);
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  if (v43)
  {
    long long v44 = v43;
    operator delete(v43);
  }
}

void sub_2558642B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke(void *a1, uint64_t a2)
{
  if (a1[4] != a2) {
    return;
  }
  uint64_t v3 = (EQKitLayoutManager **)a1[7];
  std::string __p = 0;
  long long v42 = 0;
  uint64_t v43 = 0;
  uint64_t v4 = *((void *)*v3 + 77);
  uint64_t v44 = a2;
  int v45 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v4, v4 + 200, (uint64_t)&v44, (char *)&__p);
  uint64_t v5 = __p;
  if (__p != v42)
  {
    uint64_t v6 = *(void **)(a1[5] + 8);
    uint64_t v7 = (char *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v9 = (char *)v6[6];
      uint64_t v10 = (v7 - v9) >> 2;
      if (!((unint64_t)(v10 + 1) >> 62))
      {
        unint64_t v11 = v8 - (void)v9;
        unint64_t v12 = (uint64_t)(v8 - (void)v9) >> 1;
        if (v12 <= v10 + 1) {
          unint64_t v12 = v10 + 1;
        }
        if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(v6 + 8), v13);
          uint64_t v9 = (char *)v6[6];
          uint64_t v7 = (char *)v6[7];
        }
        else
        {
          uint64_t v14 = 0;
        }
        int v25 = &v14[4 * v10];
        long long v26 = &v14[4 * v13];
        *(_DWORD *)int v25 = *v5;
        uint64_t v19 = v25 + 4;
        while (v7 != v9)
        {
          int v27 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v25 - 1) = v27;
          v25 -= 4;
        }
LABEL_46:
        v6[6] = v25;
        v6[7] = v19;
        v6[8] = v26;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_48;
      }
      goto LABEL_56;
    }
LABEL_14:
    *(_DWORD *)uint64_t v7 = *v5;
    id v18 = v7 + 4;
    goto LABEL_15;
  }
  uint64_t v5 = (_DWORD *)a1[8];
  uint64_t v6 = *(void **)(a1[5] + 8);
  uint64_t v15 = (void **)(v6 + 6);
  uint64_t v7 = (char *)v6[7];
  uint64_t v16 = (uint64_t)(v6 + 8);
  unint64_t v17 = v6[8];
  if (v5 != (_DWORD *)a1[9])
  {
    if ((unint64_t)v7 >= v17)
    {
      uint64_t v9 = (char *)*v15;
      uint64_t v20 = (v7 - (unsigned char *)*v15) >> 2;
      if (!((unint64_t)(v20 + 1) >> 62))
      {
        unint64_t v21 = v17 - (void)v9;
        unint64_t v22 = (uint64_t)(v17 - (void)v9) >> 1;
        if (v22 <= v20 + 1) {
          unint64_t v22 = v20 + 1;
        }
        if (v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23)
        {
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v16, v23);
          uint64_t v9 = (char *)v6[6];
          uint64_t v7 = (char *)v6[7];
        }
        else
        {
          uint64_t v24 = 0;
        }
        int v25 = &v24[4 * v20];
        long long v26 = &v24[4 * v23];
        *(_DWORD *)int v25 = *v5;
        uint64_t v19 = v25 + 4;
        while (v7 != v9)
        {
          int v33 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v25 - 1) = v33;
          v25 -= 4;
        }
        goto LABEL_46;
      }
LABEL_56:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_14;
  }
  if ((unint64_t)v7 >= v17)
  {
    uint64_t v9 = (char *)*v15;
    uint64_t v28 = (v7 - (unsigned char *)*v15) >> 2;
    if ((unint64_t)(v28 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v29 = v17 - (void)v9;
    unint64_t v30 = (uint64_t)(v17 - (void)v9) >> 1;
    if (v30 <= v28 + 1) {
      unint64_t v30 = v28 + 1;
    }
    if (v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31)
    {
      uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v16, v31);
      uint64_t v9 = (char *)v6[6];
      uint64_t v7 = (char *)v6[7];
    }
    else
    {
      uint64_t v32 = 0;
    }
    int v25 = &v32[4 * v28];
    long long v26 = &v32[4 * v31];
    *(_DWORD *)int v25 = 0;
    uint64_t v19 = v25 + 4;
    while (v7 != v9)
    {
      int v34 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v25 - 1) = v34;
      v25 -= 4;
    }
    goto LABEL_46;
  }
  *(_DWORD *)uint64_t v7 = 0;
  id v18 = v7 + 4;
LABEL_15:
  uint64_t v19 = v18;
LABEL_48:
  v6[7] = v19;
  uint64_t v35 = *(void *)(a1[6] + 8);
  unint64_t v36 = EQKitLayoutManager::layoutContext(*v3);
  unint64_t v38 = v36;
  uint64_t v39 = *(void *)(v36 + 88);
  if (*(unsigned char *)(v36 + 120)) {
    v37.n128_u64[0] = *(void *)(v36 + 128);
  }
  else {
    v37.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v36);
  }
  double v40 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v39 + 56))(v39, 16, v38 + 8, v37);
  if (*(double *)(v35 + 24) >= v40) {
    double v40 = *(double *)(v35 + 24);
  }
  *(double *)(*(void *)(a1[6] + 8) + 24) = v40;
  if (__p)
  {
    long long v42 = __p;
    operator delete(__p);
  }
}

void sub_255864680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = (void *)(a1 + 64);
  v2[2] = 0;
  return std::vector<EQKitTypes::Crossout::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Crossout::Enum*,EQKitTypes::Crossout::Enum*>(v2, *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2);
}

void __destroy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void EQKitLayoutElementaryStack::layoutStackCarry(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  EQKitLayoutManager::beginRow(*a1, 0, 1);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v6 = objc_msgSend(a2, "schemataChildren", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        EQKitLayoutManager::layout(*a1, *(void *)(*((void *)&v11 + 1) + 8 * v10++), 0);
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
  EQKitLayoutManager::endRow(*a1, a3);
}

double EQKitLayoutElementaryStack::baselineForRowAtIndex(id *this, unint64_t a2)
{
  if (![this[6] count]) {
    return 0.0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  double v6 = 0.0;
  do
  {
    uint64_t v7 = (void *)[this[6] objectAtIndex:v4];
    if (v5 >= a2) {
      [v7 height];
    }
    else {
      [v7 vsize];
    }
    double v6 = v6 + v8;
    if ((v4 & 1) == 0 && v5 == a2) {
      break;
    }
    if ((v4 & 1) == 0 && v5 != a2) {
      ++v5;
    }
    ++v4;
  }
  while (v4 < [this[6] count]);
  return v6;
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2558650B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    uint64_t v9 = *(void *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      long long v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        long long v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = *(void *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

void *std::vector<EQKitTypes::Crossout::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Crossout::Enum*,EQKitTypes::Crossout::Enum*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    uint64_t result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_255865200(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __n128 v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __n128 v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_255865574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void EQKit::Layout::Schemata::~Schemata(id *this)
{
  *this = &unk_27045AAD0;
}

{
  uint64_t vars8;

  EQKit::Layout::Schemata::~Schemata(this);

  JUMPOUT(0x25A290040);
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t this)
{
  *(void *)this = &unk_27045AAD0;
  *(_DWORD *)(this + ++*(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t EQKit::Layout::Schemata::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {

    *(_DWORD *)(a1 + ++*(void *)(this + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(id *)(a2 + 16);
    *(void *)(a1 + 24) = [*(id *)(a2 + 24) copy];
  }
  return a1;
}

id EQKit::Layout::Schemata::phantom@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 3;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::ident@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 8;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::oper@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 10;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::operFontStretch@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 11;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::text@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 22;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::num@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 9;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fraction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 7;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::subsuperscript@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 4;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::underover@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 5;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::radical@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 6;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stack@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 12;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackGroup@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 13;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 14;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackLine@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 15;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarries@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 16;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarry@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 17;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::longDivision@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 18;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::table@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 19;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::tableRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 20;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::padded@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 23;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::space@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 24;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fenced@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 25;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::enclose@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 28;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

void EQKit::Layout::Schemata::alignGroup(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_27045AAD0;
  *(_DWORD *)(a1 + ++*(void *)(this + 8) = 26;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::alignMark(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_27045AAD0;
  *(_DWORD *)(a1 + ++*(void *)(this + 8) = 27;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::none(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_27045AAD0;
  *(_DWORD *)(a1 + ++*(void *)(this + 8) = 21;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

uint64_t EQKit::Layout::Schemata::subsuperscriptSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 4) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::underoverSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 5) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::tableSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 19) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::tableRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 20) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 12) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackGroupSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 13) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 14) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::radicalSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 6) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::textSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 22) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackLineSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 15) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackCarriesSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 16) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackCarrySchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 17) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::tokenSchemata(EQKit::Layout::Schemata *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

BOOL EQKit::Layout::Schemata::isToken(EQKit::Layout::Schemata *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8;
}

uint64_t EQKit::Layout::Schemata::phantomSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 3) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::operatorSchemata(EQKit::Layout::Schemata *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0xA) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::fractionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 7) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::longDivisionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 18) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::paddedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 23) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::fencedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 25) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::encloseSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 28) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

id EQKit::Layout::Schemata::node@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 1;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

uint64_t EQKit::Layout::Schemata::nodeSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 1) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::row@<X0>(EQKit::Layout::Schemata *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_27045AAD0;
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = 2;
  *(void *)(a2 + 16) = 0;
  uint64_t result = [(EQKit::Layout::Schemata *)this copy];
  *(void *)(a2 + 24) = result;
  return result;
}

uint64_t EQKit::Layout::Schemata::children(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) != 2) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return [*((id *)this + 2) schemataChildren];
  }
  return v1;
}

uint64_t EQKit::Layout::Schemata::automaticSourceAttribution(EQKit::Layout::Schemata *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 1;
  }

  return [v1 schemataAutomaticSourceAttribution];
}

uint64_t EQKit::Layout::Schemata::sourceAttribution(id *this)
{
  return [this[2] sourceAttribution];
}

double swap(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = v4;
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)a1 + 4);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)a1 + 5);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)a1 + 6);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)a1 + 7);
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)a1 + 8);
  *((void *)a1 + ++*(void *)(this + 8) = *((void *)a2 + 8);
  *((void *)a2 + ++*(void *)(this + 8) = v12;
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap((uint64_t *)a1 + 9, (uint64_t)a2 + 72);
  uint64_t v13 = *((void *)a1 + 12);
  *((void *)a1 + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v13;
  uint64_t v14 = *((void *)a1 + 13);
  *((void *)a1 + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v14;
  uint64_t v15 = *((void *)a1 + 14);
  *((void *)a1 + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v15;
  uint64_t v16 = *((void *)a1 + 15);
  *((void *)a1 + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v16;
  uint64_t v17 = *((void *)a1 + 16);
  *((void *)a1 + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v17;
  uint64_t v18 = *((void *)a1 + 17);
  *((void *)a1 + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v18;
  double result = *((double *)a1 + 18);
  *((void *)a1 + 1++*(void *)(this + 8) = *((void *)a2 + 18);
  *((double *)a2 + 1++*(void *)(this + 8) = result;
  LODWORD(v1++*(void *)(this + 8) = *((_DWORD *)a1 + 38);
  *((_DWORD *)a1 + 3++*(void *)(this + 8) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 3++*(void *)(this + 8) = v18;
  LOBYTE(v1++*(void *)(this + 8) = *((unsigned char *)a1 + 156);
  *((unsigned char *)a1 + 156) = *((unsigned char *)a2 + 156);
  *((unsigned char *)a2 + 156) = v18;
  return result;
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, char a2)
{
  *(_OWORD *)((char *)this + ++*(void *)(this + 8) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + ++*(void *)(this + 8) = 0u;
  *(void *)this = objc_alloc_init(MEMORY[0x263EFF980]);
  *((void *)this + 1++*(void *)(this + 8) = 0;
  *((_DWORD *)this + 3++*(void *)(this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + ++*(void *)(this + 8) = 0;
  *((unsigned char *)this + 156) = a2;
}

void sub_2558663A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = *(void **)(v2 + 120);
  if (v6)
  {
    *(void *)(v2 + 12++*(void *)(this + 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v3, *(id **)(v2 + 80));
  uint64_t v8 = *(void **)(v2 + 32);
  if (v8)
  {
    *(void *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<EQKit::ILayout>::__init_with_size[abi:ne180100]<EQKit::ILayout*,EQKit::ILayout*>((void *)this + 1, *((void *)a2 + 1), *((void *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<EQKitLayoutRow::Kerning>::__init_with_size[abi:ne180100]<EQKitLayoutRow::Kerning*,EQKitLayoutRow::Kerning*>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  *((void *)this + ++*(void *)(this + 8) = *((void *)a2 + 8);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:ne180100]((uint64_t *)this + 9, (uint64_t)a2 + 72);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<EQKitAlignmentGroup>::__init_with_size[abi:ne180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((void *)this + 12, *((void *)a2 + 12), *((void *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 15, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3);
  *((void *)this + 1++*(void *)(this + 8) = *((void *)a2 + 18);
  *((_DWORD *)this + 3++*(void *)(this + 8) = *((_DWORD *)a2 + 38);
  *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
  *(void *)this = [*(id *)a2 mutableCopy];
  *((void *)this + 7) = [*((id *)a2 + 7) mutableCopy];
}

void sub_25586652C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v4, *(id **)(v2 + 80));
  uint64_t v8 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::~EQKitLayoutRow(EQKitLayoutRow *this)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 72, *((id **)this + 10));
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void **)((char *)this + 8);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](&v5);
}

EQKitLayoutRow *EQKitLayoutRow::operator=(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  return a1;
}

void EQKitLayoutRow::addChild(uint64_t a1, uint64_t a2, const EQKit::ILayout *a3)
{
  uint64_t v6 = [*(id *)a1 count];
  uint64_t v7 = *(void *)a3;
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >= *(void *)(a1 + 24))
  {
    uint64_t v9 = std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>((uint64_t *)(a1 + 8), a3);
  }
  else
  {
    EQKit::ILayout::ILayout(*(EQKit::ILayout **)(a1 + 16), a3);
    uint64_t v9 = v8 + 56;
    *(void *)(a1 + 16) = v8 + 56;
  }
  *(void *)(a1 + 16) = v9;
  if (!(a2 | v7)) {
    goto LABEL_8;
  }
  id v10 = *(id *)a1;
  if (!a2) {
    a2 = [MEMORY[0x263EFF9D0] null];
  }
  [v10 addObject:a2];
  if (!v7)
  {
LABEL_8:
    id v11 = *(id *)(a1 + 56);
    if (!v11)
    {
      id v11 = objc_alloc_init(MEMORY[0x263F089C8]);
      *(void *)(a1 + 56) = v11;
    }
    [v11 addIndex:v6];
  }
  uint64_t v12 = (void *)*((void *)a3 + 1);
  if (v12 != (void *)((char *)a3 + 16))
  {
    uint64_t v13 = (uint64_t *)(a1 + 80);
    do
    {
      uint64_t v14 = *v13;
      int v15 = *((_DWORD *)v12 + 8);
      if (!*v13) {
        goto LABEL_23;
      }
      uint64_t v16 = a1 + 80;
      do
      {
        int v17 = *(_DWORD *)(v14 + 32);
        BOOL v18 = v17 < v15;
        if (v17 >= v15) {
          uint64_t v19 = (uint64_t *)v14;
        }
        else {
          uint64_t v19 = (uint64_t *)(v14 + 8);
        }
        if (!v18) {
          uint64_t v16 = v14;
        }
        uint64_t v14 = *v19;
      }
      while (*v19);
      if ((uint64_t *)v16 == v13 || v15 < *(_DWORD *)(v16 + 32))
      {
LABEL_23:
        int v23 = *((_DWORD *)v12 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v24, (id *)v12 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(a1 + 72, &v23, (uint64_t)&v23);
        EQKit::ILayoutOffset::~ILayoutOffset(v24);
      }
      int64_t v20 = (void *)v12[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          int64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v12[2];
          BOOL v22 = *v21 == (void)v12;
          uint64_t v12 = v21;
        }
        while (!v22);
      }
      uint64_t v12 = v21;
    }
    while (v21 != (void *)((char *)a3 + 16));
  }
}

void sub_2558667F0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

double EQKitLayoutRow::addChild(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 1);
  std::vector<EQKit::ILayout>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>((uint64_t *)this + 1, v4, *((const EQKit::ILayout **)a2 + 1), *((void *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  [*(id *)this addObjectsFromArray:*(void *)a2];
  uint64_t v6 = (const EQKitLayoutRow *)*((void *)a2 + 9);
  if (v6 != (const EQKitLayoutRow *)((char *)a2 + 80))
  {
    uint64_t v7 = (char **)((char *)this + 80);
    do
    {
      unint64_t v8 = *v7;
      int v9 = *((_DWORD *)v6 + 8);
      if (!*v7) {
        goto LABEL_13;
      }
      id v10 = (char **)((char *)this + 80);
      do
      {
        int v11 = *((_DWORD *)v8 + 8);
        BOOL v12 = v11 < v9;
        if (v11 >= v9) {
          uint64_t v13 = (char **)v8;
        }
        else {
          uint64_t v13 = (char **)(v8 + 8);
        }
        if (!v12) {
          id v10 = (char **)v8;
        }
        unint64_t v8 = *v13;
      }
      while (*v13);
      if (v10 == v7 || v9 < *((_DWORD *)v10 + 8))
      {
LABEL_13:
        int v35 = *((_DWORD *)v6 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v36, (id *)v6 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)this + 72, &v35, (uint64_t)&v35);
        EQKit::ILayoutOffset::~ILayoutOffset(v36);
      }
      uint64_t v14 = (const EQKitLayoutRow *)*((void *)v6 + 1);
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = *(const EQKitLayoutRow **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (const EQKitLayoutRow *)*((void *)v6 + 2);
          BOOL v16 = *(void *)v15 == (void)v6;
          uint64_t v6 = v15;
        }
        while (!v16);
      }
      uint64_t v6 = v15;
    }
    while (v15 != (const EQKitLayoutRow *)((char *)a2 + 80));
  }
  std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>((uint64_t *)this + 12, *((void *)this + 13), *((void *)a2 + 12), *((void *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  int v17 = (void *)*((void *)a2 + 15);
  BOOL v18 = (void *)*((void *)a2 + 16);
  int v34 = a2;
  if (v17 != v18)
  {
    uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3);
    int64_t v20 = (void **)((char *)this + 120);
    uint64_t v21 = (void *)((char *)this + 136);
    BOOL v22 = (char *)*((void *)this + 16);
    do
    {
      uint64_t v23 = *v17 + v19;
      if ((unint64_t)v22 >= *v21)
      {
        unint64_t v25 = (char *)*v20;
        uint64_t v26 = (v22 - (unsigned char *)*v20) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = *v21 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 136, v29);
          unint64_t v25 = (char *)*((void *)this + 15);
          BOOL v22 = (char *)*((void *)this + 16);
        }
        else
        {
          long long v30 = 0;
        }
        long long v31 = (uint64_t *)&v30[8 * v26];
        *long long v31 = v23;
        uint64_t v24 = (char *)(v31 + 1);
        while (v22 != v25)
        {
          uint64_t v32 = *((void *)v22 - 1);
          v22 -= 8;
          *--long long v31 = v32;
        }
        *((void *)this + 15) = v31;
        *((void *)this + 16) = v24;
        *((void *)this + 17) = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)BOOL v22 = v23;
        uint64_t v24 = v22 + 8;
      }
      *((void *)this + 16) = v24;
      ++v17;
      BOOL v22 = v24;
    }
    while (v17 != v18);
  }
  double result = *((double *)v34 + 18);
  *((double *)this + 1++*(void *)(this + 8) = result;
  return result;
}

void sub_255866A74(_Unwind_Exception *a1)
{
  EQKit::ILayoutOffset::~ILayoutOffset(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutRow::beginNestedRow(uint64_t this)
{
  return this;
}

uint64_t EQKitLayoutRow::endNestedRow(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 64);
  if (v1) {
    *(void *)(this + ++*(void *)(this + 64) = v1 - 1;
  }
  return this;
}

void *EQKitLayoutRow::childNodeAtIndex(id *this, unint64_t a2)
{
  if ([*this count] <= a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (void *)[*this objectAtIndex:a2];
  }
  if ([v4 conformsToProtocol:&unk_270466C10]) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t EQKitLayoutRow::overallLayout@<X0>(EQKitLayoutRow *this@<X0>, uint64_t **a2@<X8>)
{
  EQKit::ILayout::ILayout((EQKit::ILayout *)a2, 0);
  uint64_t v4 = *((void *)this + 1);
  if (*((void *)this + 2) - v4 == 56) {
    return EQKit::ILayout::operator=((uint64_t)a2, v4);
  }
  uint64_t v6 = EQKitLayoutRow::newChildrenBox(this);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v9, &v6->super.super);
  EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);

  if (a2 + 1 != (uint64_t **)((char *)this + 72)) {
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(a2 + 1, *((void **)this + 9), (void *)this + 10);
  }
  uint64_t v7 = *((void *)this + 1);
  int v8 = 6;
  while (v7 != *((void *)this + 2))
  {
    if (v8 >= ((*(unsigned __int16 *)(v7 + 32) >> 10) & 7)) {
      int v8 = (*(unsigned __int16 *)(v7 + 32) >> 10) & 7;
    }
    v7 += 56;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v8);
}

void sub_255866BE8(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKitHBox *EQKitLayoutRow::newChildrenBox(EQKitLayoutRow *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  unint64_t v4 = (v2 - v3) / 56;
  uint64_t v6 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:v4];
  if (v2 != v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = (v5 - v6) >> 4;
    if (v4 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v4;
    }
    do
    {
      if (*(void *)(*((void *)this + 1) + v9)) {
        objc_msgSend(v7, "addObject:");
      }
      if (v10 < v11)
      {
        double v13 = *(double *)(*((void *)this + 4) + v8);
        if (v13 != 0.0)
        {
          uint64_t v14 = [[EQKitHSpace alloc] initWithWidth:v13];
          [v7 addObject:v14];
        }
      }
      ++v10;
      v9 += 56;
      v8 += 16;
    }
    while (v12 != v10);
  }
  int v15 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v7];

  return v15;
}

BOOL EQKitLayoutRow::isNewRowRequiredForStretching(EQKitLayoutRow *this)
{
  return *((void *)this + 1) != *((void *)this + 2) || *((void *)this + 12) != *((void *)this + 13);
}

void EQKitLayoutRow::determineVSize(EQKitLayoutRow *this, double *a2, double *a3)
{
  uint64_t v7 = EQKitLayoutRow::newChildrenBox(this);
  [(EQKitCompoundBox *)v7 height];
  *(void *)a2 = v5;
  [(EQKitCompoundBox *)v7 depth];
  *(void *)a3 = v6;
}

double EQKitLayoutRow::determineWidth(EQKitLayoutRow *this)
{
  uint64_t v1 = EQKitLayoutRow::newChildrenBox(this);
  [(EQKitCompoundBox *)v1 width];
  double v3 = v2;

  return v3;
}

void EQKitLayoutRow::resolveKerning(EQKitLayoutRow *this, const EQKit::Kerning::Manager *a2)
{
  uint64_t v21 = (void *)((char *)this + 32);
  if (*((void *)this + 4) == *((void *)this + 5))
  {
    unint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
    std::vector<EQKitLayoutRow::Kerning>::resize((uint64_t)v21, v3);
    if (v3 >= 2)
    {
      unint64_t v4 = 0;
      for (unint64_t i = 1; i < v3; ++i)
      {
        uint64_t v6 = *((void *)this + 1);
        uint64_t v7 = v6 + 56 * v4;
        __int16 v9 = *(_WORD *)(v7 + 32);
        uint64_t v8 = (unsigned __int16 *)(v7 + 32);
        if ((v9 & 0x200) == 0 && i < v3)
        {
          uint64_t v10 = v6 + 56 * i + 32;
          while ((*(_WORD *)v10 & 0x200) != 0)
          {
            ++i;
            v10 += 56;
            if (v3 == i)
            {
              unint64_t i = v3;
              goto LABEL_14;
            }
          }
          unint64_t v11 = *(void **)(v6 + 56 * v4);
          uint64_t v12 = *(void **)(v10 - 32);
          double v13 = *MEMORY[0x263F00148];
          double v14 = *(double *)(MEMORY[0x263F00148] + 8);
          [v11 opticalAlignWidth];
          uint64_t v16 = v6 + 56 * v4;
          if (*(double *)(v16 + 48) >= *(double *)(v10 + 8)) {
            double v17 = *(double *)(v16 + 48);
          }
          else {
            double v17 = *(double *)(v10 + 8);
          }
          double v18 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(a2, (*v8 >> 2) & 3, v11, *(_WORD *)v10 & 3, v12, v13, v14, v15, 0.0, v17);
          uint64_t v19 = *v21 + 16 * v4;
          *(double *)uint64_t v19 = v18;
          *(void *)(v19 + ++*(void *)(this + 8) = i;
        }
LABEL_14:
        unint64_t v4 = i;
      }
    }
  }
}

void std::vector<EQKitLayoutRow::Kerning>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + ++*(void *)(this + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<EQKitLayoutRow::Kerning>::__append((void **)a1, a2 - v2);
  }
}

void EQKitLayoutRow::resolveLayouts(uint64_t a1, void *a2)
{
  *(void *)(a1 + 56) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(void *)(this + 8) = *a2;
  *a2 = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[1];
  a2[1] = v5;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a2[2];
  a2[2] = v6;
}

void EQKitLayoutRow::beginAlignmentGroup(void *a1, int a2)
{
  if (a1[1] == a1[2] || a1[15] != a1[16])
  {
    EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v18, a2);
    unint64_t v3 = a1[13];
    if (v3 >= a1[14])
    {
      uint64_t v4 = std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(a1 + 12, (uint64_t)v18);
    }
    else
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(a1[13], (uint64_t)v18);
      uint64_t v4 = v3 + 24;
      a1[13] = v3 + 24;
    }
    a1[13] = v4;
    unint64_t v5 = a1[17];
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3);
    uint64_t v7 = (uint64_t *)a1[16];
    if ((unint64_t)v7 >= v5)
    {
      __int16 v9 = (uint64_t *)a1[15];
      uint64_t v10 = v7 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v5 - (void)v9;
      unint64_t v12 = (uint64_t)(v5 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 17), v13);
        __int16 v9 = (uint64_t *)a1[15];
        uint64_t v7 = (uint64_t *)a1[16];
      }
      else
      {
        double v14 = 0;
      }
      double v15 = (uint64_t *)&v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *double v15 = v6;
      uint64_t v8 = v15 + 1;
      while (v7 != v9)
      {
        uint64_t v17 = *--v7;
        *--double v15 = v17;
      }
      a1[15] = v15;
      a1[16] = v8;
      a1[17] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      uint64_t v8 = v7 + 1;
    }
    a1[16] = v8;
  }
}

void sub_255867164(_Unwind_Exception *a1)
{
  *(void *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::buildAlignmentGroups(EQKitLayoutRow *this)
{
  uint64_t v1 = *((void *)this + 13) - *((void *)this + 12);
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (unsigned __int128)(v1 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    unint64_t v5 = (v4 >> 2) + ((unint64_t)v4 >> 63);
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (v4 >> 2) + ((unint64_t)v4 >> 63);
    }
    uint64_t v20 = v6;
    do
    {
      uint64_t v7 = v3;
      uint64_t v8 = *((void *)this + 15);
      if (++v3 >= v5) {
        unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      }
      else {
        unint64_t v9 = *(void *)(v8 + 8 * v3);
      }
      unint64_t v10 = *(void *)(v8 + 8 * v7);
      if (v10 < v9)
      {
        unint64_t v11 = (EQKitAlignmentGroup *)(*((void *)this + 12) + 24 * v7);
        uint64_t v12 = 56 * v10;
        uint64_t v13 = 16 * v10;
        do
        {
          double v14 = (EQKitBox **)(*((void *)this + 1) + v12);
          double v15 = *v14;
          EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v22, 0, 0.0);
          if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 3, v22))
          {
            double v16 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v22, v15);
            EQKitAlignmentGroup::saveAlignmentPoint(v11, v16);
          }
          if (EQKitAlignmentGroup::needsDecimalAlignmentPoint(v11))
          {
            EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v21, 0, 0.0);
            if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 2, v21))
            {
              double v17 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v21, v15);
              EQKitAlignmentGroup::saveAlignmentPoint(v11, v17);
            }
            EQKit::ILayoutOffset::~ILayoutOffset(v21);
          }
          [(EQKitBox *)v15 width];
          EQKitAlignmentGroup::increaseWidth(v11, v18);
          uint64_t v19 = *((void *)this + 4);
          if (*(void *)(v19 + v13 + 8) < v9) {
            EQKitAlignmentGroup::increaseWidth(v11, *(double *)(v19 + v13));
          }
          EQKit::ILayoutOffset::~ILayoutOffset(v22);
          ++v10;
          v12 += 56;
          v13 += 16;
        }
        while (v9 != v10);
      }
    }
    while (v3 != v20);
  }
}

void sub_255867330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::addToAlignmentContext(EQKitLayoutRow *this, EQKitGroupAlignmentContext *a2)
{
}

void EQKitLayoutRow::overallLayoutWithAlignmentContext(EQKitLayoutRow *this@<X0>, const EQKitGroupAlignmentContext *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  if (*((void *)this + 12) == *((void *)this + 13))
  {
    EQKitLayoutRow::overallLayout(this, v25);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v25);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v25);
  }
  else
  {
    uint64_t v24 = (uint64_t)a3;
    id v6 = objc_alloc_init(MEMORY[0x263EFF980]);
    for (unint64_t i = 0; ; unint64_t i = v13)
    {
      uint64_t v8 = *((void *)this + 12);
      if (i >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 13) - v8) >> 3)) {
        break;
      }
      id v9 = objc_alloc_init(MEMORY[0x263EFF980]);
      unint64_t v10 = [EQKitHSpace alloc];
      unint64_t v11 = (const EQKitAlignmentGroup *)(v8 + 24 * i);
      EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(a2, v11, i);
      uint64_t v12 = -[EQKitHSpace initWithWidth:](v10, "initWithWidth:");
      [v9 addObject:v12];

      unint64_t v13 = i + 1;
      uint64_t v14 = *((void *)this + 15);
      if (i + 1 >= (*((void *)this + 16) - v14) >> 3) {
        unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      }
      else {
        unint64_t v15 = *(void *)(v14 + 8 * v13);
      }
      unint64_t v16 = *(void *)(v14 + 8 * i);
      uint64_t v17 = v15 - v16;
      if (v15 > v16)
      {
        uint64_t v18 = 56 * v16;
        do
        {
          objc_msgSend(v9, "addObject:", *(void *)(*((void *)this + 1) + v18), v24);
          v18 += 56;
          --v17;
        }
        while (v17);
      }
      uint64_t v19 = [EQKitHSpace alloc];
      EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(a2, v11, i);
      uint64_t v20 = -[EQKitHSpace initWithWidth:](v19, "initWithWidth:");
      [v9 addObject:v20];

      uint64_t v21 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v9];
      [v6 addObject:v21];
    }
    BOOL v22 = [[EQKitHSpace alloc] initWithWidth:EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3) - 1)];
    [v6 addObject:v22];

    uint64_t v23 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v6];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v25, &v23->super.super);
    EQKit::ILayout::operator=(v24, (uint64_t)v25);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v25);
    if ((EQKitLayoutRow *)(v24 + 8) != (EQKitLayoutRow *)((char *)this + 72)) {
      std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(v24 + 8), *((void **)this + 9), (void *)this + 10);
    }
  }
}

void sub_255867604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void *std::vector<EQKitLayoutRow::Kerning>::__init_with_size[abi:ne180100]<EQKitLayoutRow::Kerning*,EQKitLayoutRow::Kerning*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    double result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2558676B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__init_with_size[abi:ne180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a4);
    std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((uint64_t)a1, a2, a3);
  }
}

void sub_255867728(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v4 + v7, a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(a1 + ++*(void *)(this + 8) = v4;
}

void sub_2558677B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>(uint64_t *a1, const EQKit::ILayout *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (EQKit::ILayout *)&v10[56 * v4];
  unint64_t v16 = &v10[56 * v9];
  EQKit::ILayout::ILayout(v14, a2);
  unint64_t v15 = (char *)v14 + 56;
  std::vector<EQKit::ILayout>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2558678C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 56;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (EQKit::ILayout *)(v11 + v10);
    v10 -= 56;
    EQKit::ILayout::ILayout(v12, (const EQKit::ILayout *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<EQKit::ILayout>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    EQKit::ILayout::~ILayout((EQKit::ILayout *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<EQKit::ILayout>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>(uint64_t *a1, uint64_t a2, const EQKit::ILayout *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = (uint64_t)a3 + 56 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout const*,EQKit::ILayout const*,EQKit::ILayout*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<EQKit::ILayout>::__move_range((uint64_t)a1, v5, v12, v5 + 56 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>((uint64_t)v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      BOOL v22 = (EQKit::ILayout *)&v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      unint64_t v27 = v22;
      uint64_t v28 = &v19[56 * v18];
      uint64_t v23 = 56 * a5;
      uint64_t v24 = (EQKit::ILayout *)((char *)v22 + 56 * a5);
      do
      {
        EQKit::ILayout::ILayout(v22, v7);
        BOOL v22 = (EQKit::ILayout *)((char *)v22 + 56);
        uint64_t v7 = (const EQKit::ILayout *)((char *)v7 + 56);
        v23 -= 56;
      }
      while (v23);
      unint64_t v27 = v24;
      uint64_t v5 = std::vector<EQKit::ILayout>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_255867C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + ++*(void *)(this + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<EQKit::ILayout>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (EQKit::ILayout *)v6;
  if (v7 < a3)
  {
    uint64_t v10 = (const EQKit::ILayout *)(a2 + v6 - a4);
    uint64_t v8 = *(EQKit::ILayout **)(a1 + 8);
    do
    {
      EQKit::ILayout::ILayout(v8, v10);
      uint64_t v10 = (const EQKit::ILayout *)((char *)v10 + 56);
      uint64_t v8 = (EQKit::ILayout *)((char *)v8 + 56);
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + ++*(void *)(this + 8) = v8;

  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(a2, v7, v6);
}

void sub_255867CDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout const*,EQKit::ILayout const*,EQKit::ILayout*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKit::ILayout::ILayout((EQKit::ILayout *)(a4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_255867DF8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 56;
      a3 -= 56;
      EQKit::ILayout::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      EQKit::ILayout::operator=(a3, v4);
      v4 += 56;
      a3 += 56;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKit::ILayout::ILayout((EQKit::ILayout *)(a4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_255867F3C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 3)))
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        std::vector<EQKitAlignmentGroup>::__construct_at_end<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>((uint64_t)a1, v21, a4);
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<EQKitAlignmentGroup>::__move_range((uint64_t)a1, v5, v12, v5 + 24 * a5);
      if (v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          long long v23 = *(_OWORD *)v7;
          *(void *)(v22 + 16) = *(void *)(v7 + 16);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v7 += 24;
        }
        while (v7 != v21);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v33 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v24 = (uint64_t)&v19[24 * v15];
      std::string __p = v19;
      uint64_t v30 = v24;
      uint64_t v31 = v24;
      uint64_t v32 = &v19[24 * v18];
      uint64_t v25 = 3 * a5;
      uint64_t v26 = v24 + 24 * a5;
      uint64_t v27 = 8 * v25;
      do
      {
        EQKitAlignmentGroup::EQKitAlignmentGroup(v24, v7);
        v24 += 24;
        v7 += 24;
        v27 -= 24;
      }
      while (v27);
      uint64_t v31 = v26;
      uint64_t v5 = std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p, v5);
      if (v31 != v30) {
        uint64_t v31 = (v31 - v30 - 24) % 0x18uLL + v30;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_255868178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__construct_at_end<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v4 + v7, a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(a1 + ++*(void *)(this + 8) = v4;
}

void sub_255868240(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 std::vector<EQKitAlignmentGroup>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 - a4;
  unint64_t v9 = a2 + v7 - a4;
  if (v9 >= a3)
  {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      result.n128_f64[0] = EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v9);
      v9 += 24;
      v11 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + ++*(void *)(this + 8) = v11;
  if (v7 != a4)
  {
    uint64_t v13 = (__n128 *)(v7 - 24);
    uint64_t v14 = 8 * (v8 >> 3);
    uint64_t v15 = a2 - 24;
    do
    {
      __n128 result = *(__n128 *)(v15 + v14);
      v13[1].n128_u64[0] = *(void *)(v15 + v14 + 16);
      __n128 *v13 = result;
      uint64_t v13 = (__n128 *)((char *)v13 - 24);
      v14 -= 24;
    }
    while (v14);
  }
  return result;
}

void sub_255868310(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (v7 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2[1];
    do
    {
      v9 -= 24;
      EQKitAlignmentGroup::EQKitAlignmentGroup(v8 - 24, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v3);
      v3 += 24;
      v11 += 24;
    }
    while (v3 != v10);
    uint64_t v8 = a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t **std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    unsigned __int16 v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + ++*(void *)(this + 8) = *((_DWORD *)v9 + 8);
          EQKit::ILayoutOffset::operator=((uint64_t)(v8 + 5), (uint64_t)(v9 + 5));
          std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(v5, (uint64_t)v16);
          uint64_t v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    __n128 result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_255868550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(void *)a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + ++*(void *)(this + 8) = v2;
    }
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(void *)a1, (id *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, a2[1]);
    EQKit::ILayoutOffset::~ILayoutOffset(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(a1, a2, (uint64_t)v8);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v8[0] + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v6;
}

EQKit::ILayoutOffset *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(void *)(this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  __n128 result = EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)(v6 + 10), (id *)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2558687D0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      EQKit::ILayoutOffset::~ILayoutOffset(v2 + 5);
    }
    operator delete(v2);
  }
}

void std::vector<EQKitLayoutRow::Kerning>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      do
      {
        void *v7 = 0;
        v7[1] = 0x7FFFFFFFFFFFFFFFLL;
        v7 += 2;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[16 * v10];
    unint64_t v16 = &v15[16 * a2];
    uint64_t v17 = v15;
    do
    {
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      v17 += 16;
    }
    while (v17 != v16);
    unint64_t v18 = &v13[16 * v12];
    uint64_t v20 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

uint64_t std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string __p = v10;
  uint64_t v14 = &v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    uint64_t v15 = &v14[(v15 - v14 - 24) % 0x18uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_255868A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 24;
    EQKitAlignmentGroup::EQKitAlignmentGroup(v6 - 24, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  uint64_t v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + ++*(void *)(this + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    __n128 result = (uint64_t *)(*v3 + 16);
  }
  *__n128 result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  *uint64_t v6 = a2 + 8;
  return result;
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_255868C04(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v1, *(id **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v6 = *a2;
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t *)v4;
        int v8 = *(_DWORD *)(v4 + 32);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

EQKit::ILayoutOffset *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(void *)(this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  __n128 result = EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)(v6 + 10), (id *)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_255869008(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6)
{
  *(void *)__n128 result = a2;
  *(_DWORD *)(result + ++*(void *)(this + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

uint64_t EQKitLayoutTable::resolveColumnAlignment(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, unint64_t a5)
{
  if (a4[1] - *a4 != 4 || (uint64_t result = *(unsigned int *)*a4, !result))
  {
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (*a3 == v7) {
      goto LABEL_8;
    }
    unint64_t v8 = ((v7 - v6) >> 2) - 1;
    if (v8 >= a5) {
      unint64_t v8 = a5;
    }
    uint64_t result = *(unsigned int *)(v6 + 4 * v8);
    if (!result)
    {
LABEL_8:
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (*a2 == v10) {
        return 2;
      }
      unint64_t v11 = ((v10 - v9) >> 2) - 1;
      if (v11 >= a5) {
        unint64_t v11 = a5;
      }
      uint64_t result = *(unsigned int *)(v9 + 4 * v11);
      if (!result) {
        return 2;
      }
    }
  }
  return result;
}

uint64_t EQKitLayoutTable::resolveRowAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = *(unsigned int **)(a4 + 24);
  if (*(void *)(a4 + 32) - (void)v5 != 4 || (uint64_t result = *v5, !result))
  {
    uint64_t v7 = *(unsigned int **)(a3 + 24);
    if (*(void *)(a3 + 32) - (void)v7 != 4 || (uint64_t result = *v7, !result))
    {
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = *(void *)(a2 + 32);
      if (v8 == v9) {
        return 4;
      }
      unint64_t v10 = ((v9 - v8) >> 2) - 1;
      if (v10 >= a5) {
        unint64_t v10 = a5;
      }
      uint64_t result = *(unsigned int *)(v8 + 4 * v10);
      if (!result) {
        return 4;
      }
    }
  }
  return result;
}

void EQKitLayoutTable::resolveAlignmentGroups(EQKitLayoutTable *this, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    for (unint64_t i = 0; i != a3; ++i)
    {
      memset(v15, 0, sizeof(v15));
      if (a2)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a2;
        do
        {
          uint64_t v9 = *(void *)(*((void *)this + 8) + v7 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(void *)(*((void *)this + 8) + v7 + 64) - v9) >> 3)) {
            EQKitLayoutRow::addToAlignmentContext((EQKitLayoutRow *)(v9 + 280 * i + 64), (EQKitGroupAlignmentContext *)v15);
          }
          v7 += 80;
          --v8;
        }
        while (v8);
        uint64_t v10 = 0;
        uint64_t v11 = a2;
        do
        {
          uint64_t v12 = *((void *)this + 8) + v10;
          uint64_t v13 = *(void *)(v12 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(void *)(v12 + 64) - v13) >> 3))
          {
            EQKitLayoutRow::overallLayoutWithAlignmentContext((EQKitLayoutRow *)(v13 + 280 * i + 64), (const EQKitGroupAlignmentContext *)v15, (EQKit::ILayout *)v14);
            EQKit::ILayout::operator=(v13 + 280 * i + 224, (uint64_t)v14);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v14);
          }
          v10 += 80;
          --v11;
        }
        while (v11);
      }
      EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)v15);
    }
  }
}

void sub_255869244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::relationalOperatorOffset(EQKitLayoutTable *this@<X0>, EQKitBox **a2@<X1>, EQKit::ILayoutOffset *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 8);
  uint64_t v5 = *((void *)this + 9);
  if (v5 == v6)
  {
    EQKit::ILayoutOffset::ILayoutOffset(a3, 0, 0.0);
  }
  else
  {
    uint64_t v16 = a3;
    unint64_t v8 = 0;
    double v9 = 1.79769313e308;
    do
    {
      int v10 = 0;
      unint64_t v11 = 0;
      for (uint64_t i = 224; ; i += 280)
      {
        unint64_t v13 = v5 == v6 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v6 + 64) - *(void *)(v6 + 56)) >> 3);
        if (((v11 < v13) & (v10 ^ 1)) == 0) {
          break;
        }
        uint64_t v14 = *(void *)(v6 + 80 * v8 + 56) + i;
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, 0, 0.0);
        if (EQKit::ILayout::getOffsetOfKind(v14, 1, v17))
        {
          double v15 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v17, *a2);
          if (v9 == 1.79769313e308 || vabdd_f64(v15, v9) < 0.00100000005)
          {
            int v10 = 0;
            double v9 = v15;
          }
          else
          {
            int v10 = 1;
            double v9 = 1.79769313e308;
          }
        }
        else
        {
          int v10 = 0;
        }
        EQKit::ILayoutOffset::~ILayoutOffset(v17);
        ++v11;
        uint64_t v6 = *((void *)this + 8);
        uint64_t v5 = *((void *)this + 9);
      }
      ++v8;
    }
    while (!((v8 >= 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4)) | v10 & 1));
    EQKit::ILayoutOffset::ILayoutOffset(v16, 0, 0.0);
    if (v9 != 1.79769313e308)
    {
      EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, *a2, v9);
      EQKit::ILayoutOffset::operator=((uint64_t)v16, (uint64_t)v17);
      EQKit::ILayoutOffset::~ILayoutOffset(v17);
    }
  }
}

void sub_255869470(_Unwind_Exception *a1, uint64_t a2, id *a3, ...)
{
  va_start(va, a3);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  EQKit::ILayoutOffset::~ILayoutOffset(a3);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutTable::layoutTr@<X0>(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t result = EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    uint64_t v6 = (void *)[a2 schemataChildren];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t result = (EQKit::ILayout *)[v6 countByEnumeratingWithState:&v30 objects:v36 count:16];
    uint64_t v7 = result;
    if (result)
    {
      uint64_t v19 = *(void *)v31;
      id obj = v6;
      do
      {
        unint64_t v8 = 0;
        do
        {
          if (*(void *)v31 != v19) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v8);
          uint64_t v10 = *(void *)(a1 + 72);
          EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)v25);
          unint64_t v11 = *(void *)(v10 - 16);
          if (v11 >= *(void *)(v10 - 8))
          {
            uint64_t v12 = std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>((uint64_t *)(v10 - 24), (const EQKitLayoutTable::LayoutCell *)v25);
          }
          else
          {
            EQKitLayoutTable::LayoutCell::LayoutCell(*(EQKitLayoutTable::LayoutCell **)(v10 - 16), (const EQKitLayoutTable::LayoutCell *)v25);
            uint64_t v12 = v11 + 280;
            *(void *)(v10 - 16) = v11 + 280;
          }
          *(void *)(v10 - 16) = v12;
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v29);
          EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)&v28);
          if (*((void *)&v26 + 1))
          {
            *(void *)&long long v27 = *((void *)&v26 + 1);
            operator delete(*((void **)&v26 + 1));
          }
          if (v25[0])
          {
            v25[1] = v25[0];
            operator delete(v25[0]);
          }
          uint64_t v13 = *(void *)(*(void *)(a1 + 72) - 16);
          uint64_t v21 = 0;
          int v22 = &v21;
          uint64_t v23 = 0x2020000000;
          uint64_t v24 = 0;
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = *(unsigned __int8 *)(a1 + 88);
          v20[0] = MEMORY[0x263EF8330];
          v20[1] = 3221225472;
          v20[2] = ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke;
          v20[3] = &unk_2653C4FF8;
          v20[5] = &v21;
          v20[6] = a1;
          v20[4] = v9;
          EQKitLayoutManager::layoutIntoRow(v14, (EQKitLayoutRow *)(v13 - 216), v9, 0, v15, (uint64_t)v20);
          long long v26 = 0u;
          long long v27 = 0u;
          *(_OWORD *)uint64_t v25 = 0u;
          uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 616);
          uint64_t v34 = v9;
          int v35 = 3;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v16, v16 + 248, (uint64_t)&v34, (char *)&v26 + 8);
          uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 616);
          uint64_t v34 = v9;
          int v35 = 4;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v17, v17 + 272, (uint64_t)&v34, (char *)v25);
          if ((void **)(v13 - 280) != v25)
          {
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 280), (char *)v25[0], (uint64_t)v25[1], ((char *)v25[1] - (char *)v25[0]) >> 2);
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 256), *((char **)&v26 + 1), v27, (uint64_t)(v27 - *((void *)&v26 + 1)) >> 2);
          }
          *(void *)(v13 - 224) = v22[3];
          if (*((void *)&v26 + 1))
          {
            *(void *)&long long v27 = *((void *)&v26 + 1);
            operator delete(*((void **)&v26 + 1));
          }
          if (v25[0])
          {
            v25[1] = v25[0];
            operator delete(v25[0]);
          }
          _Block_object_dispose(&v21, 8);
          unint64_t v8 = (EQKit::ILayout *)((char *)v8 + 1);
        }
        while (v7 != v8);
        uint64_t result = (EQKit::ILayout *)[obj countByEnumeratingWithState:&v30 objects:v36 count:16];
        uint64_t v7 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_255869798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, EQKit::ILayout *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void EQKitLayoutTable::LayoutCell::~LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  EQKit::ILayout::~ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke(void *a1, uint64_t a2)
{
  if (a1[4] == a2)
  {
    unint64_t v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1[6] + 8));
    if ((*(unsigned char *)(v3 + 120) & 2) != 0) {
      double v4 = *(double *)(v3 + 136);
    }
    else {
      double v4 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v3);
    }
    *(double *)(*(void *)(a1[5] + 8) + 24) = v4;
  }
}

void EQKitLayoutTable::Properties::~Properties(EQKitLayoutTable::Properties *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void EQKitLayoutTable::generateTableLayout(EQKitLayoutTable *this, NSArray *a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v3 = [(NSArray *)a2 countByEnumeratingWithState:&v50 objects:v56 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v51 != v4) {
          objc_enumerationMutation(a2);
        }
        uint64_t v6 = *(void *)(*((void *)&v50 + 1) + 8 * i);
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)unint64_t v46 = 0u;
        long long v47 = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        uint64_t v7 = (void *)*((void *)this + 9);
        if ((unint64_t)v7 >= *((void *)this + 10))
        {
          uint64_t v9 = std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>((uint64_t *)this + 8, (const EQKitLayoutTable::LayoutRow *)v45);
        }
        else
        {
          void *v7 = 0;
          v7[1] = 0;
          unsigned __int16 v7[2] = 0;
          std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(v7, v45[0], (uint64_t)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          v7[3] = 0;
          v7[4] = 0;
          v7[5] = 0;
          std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>(v7 + 3, v46[1], v47, (uint64_t)(v47 - (unint64_t)v46[1]) >> 2);
          uint64_t v8 = v48;
          v7[7] = 0;
          v7[6] = v8;
          v7[8] = 0;
          void v7[9] = 0;
          std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:ne180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(v7 + 7, *((uint64_t *)&v48 + 1), v49, 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v49 - *((void *)&v48 + 1)) >> 3));
          uint64_t v9 = (uint64_t)(v7 + 10);
          *((void *)this + 9) = v7 + 10;
        }
        *((void *)this + 9) = v9;
        EQKitLayoutManager::layoutBox(*((EQKitLayoutManager **)this + 1), v6, 0, (EQKit::ILayout *)v44);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v44);
        *(_OWORD *)std::string __p = 0u;
        long long v43 = 0u;
        *(_OWORD *)long long v41 = 0u;
        uint64_t v10 = *(void *)(*((void *)this + 1) + 616);
        uint64_t v54 = v6;
        int v55 = 3;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 248, (uint64_t)&v54, (char *)&__p[1]);
        uint64_t v11 = *(void *)(*((void *)this + 1) + 616);
        uint64_t v54 = v6;
        int v55 = 4;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v11, v11 + 272, (uint64_t)&v54, (char *)v41);
        if ((void **)((char *)this + 16) != v41)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 16, (char *)v41[0], (uint64_t)v41[1], ((char *)v41[1] - (char *)v41[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 40, (char *)__p[1], v43, (uint64_t)(v43 - (unint64_t)__p[1]) >> 2);
        }
        uint64_t v12 = (char *)(*((void *)this + 9) - 80);
        if (v12 != (char *)v41)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v12, (char *)v41[0], (uint64_t)v41[1], ((char *)v41[1] - (char *)v41[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v12 + 24, (char *)__p[1], v43, (uint64_t)(v43 - (unint64_t)__p[1]) >> 2);
        }
        if (__p[1])
        {
          *(void **)&long long v43 = __p[1];
          operator delete(__p[1]);
        }
        if (v41[0])
        {
          v41[1] = v41[0];
          operator delete(v41[0]);
        }
        v41[0] = (char *)&v48 + 8;
        std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
        if (v46[1])
        {
          *(void **)&long long v47 = v46[1];
          operator delete(v46[1]);
        }
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
      }
      uint64_t v3 = [(NSArray *)a2 countByEnumeratingWithState:&v50 objects:v56 count:16];
    }
    while (v3);
  }
  uint64_t v14 = *((void *)this + 8);
  uint64_t v13 = *((void *)this + 9);
  unint64_t v15 = (v13 - v14) / 80;
  unint64_t v16 = 0;
  if (v13 != v14)
  {
    if (v15 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (v13 - v14) / 80;
    }
    int v18 = (void *)(v14 + 64);
    do
    {
      if (v16 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v18 - *(v18 - 1)) >> 3)) {
        unint64_t v16 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v18 - *(v18 - 1)) >> 3);
      }
      v18 += 10;
      --v17;
    }
    while (v17);
  }
  EQKitLayoutTable::resolveAlignmentGroups(this, (v13 - v14) / 80, v16);
  v45[0] = 0;
  v45[1] = 0;
  v46[0] = 0;
  v41[0] = 0;
  std::vector<double>::resize((uint64_t)v45, v16, v41);
  if (v13 != v14)
  {
    uint64_t v19 = 0;
    if (v15 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v15;
    }
    uint64_t v21 = *((void *)this + 8);
    do
    {
      uint64_t v22 = v21 + 80 * v19;
      uint64_t v23 = *(void *)(v22 + 56);
      uint64_t v24 = *(void *)(v22 + 64);
      std::vector<EQKitLayoutTable::LayoutCell>::resize((uint64_t *)(v22 + 56), v16);
      uint64_t v21 = *((void *)this + 8);
      uint64_t v25 = v21 + 80 * v19;
      *(void *)(v25 + 4++*(void *)(this + 8) = 0;
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        unint64_t v28 = 0xAF8AF8AF8AF8AF8BLL * ((v24 - v23) >> 3);
        do
        {
          if (v27 >= v28)
          {
            uint64_t v29 = *(void *)(v21 + 80 * v19 + 56);
            if (v29 + v26 != v25)
            {
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v29 + v26), *(char **)v25, *(void *)(v25 + 8), (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 2);
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v29 + v26 + 24), *(char **)(v25 + 24), *(void *)(v25 + 32), (uint64_t)(*(void *)(v25 + 32) - *(void *)(v25 + 24)) >> 2);
              uint64_t v21 = *((void *)this + 8);
            }
          }
          long long v30 = *(void **)(*(void *)(v21 + 80 * v19 + 56) + v26 + 224);
          [v30 width];
          if (v31 < *((double *)v45[0] + v27)) {
            double v31 = *((double *)v45[0] + v27);
          }
          *((double *)v45[0] + v27) = v31;
          [v30 layoutVSize];
          uint64_t v21 = *((void *)this + 8);
          uint64_t v33 = v21 + 80 * v19;
          if (v32 < *(double *)(v33 + 48)) {
            double v32 = *(double *)(v33 + 48);
          }
          *(double *)(v33 + 4++*(void *)(this + 8) = v32;
          ++v27;
          v26 += 280;
        }
        while (v16 != v27);
      }
      ++v19;
    }
    while (v19 != v20);
    uint64_t v34 = 0;
    int v35 = (uint64_t *)v45[0];
    do
    {
      if (v16)
      {
        uint64_t v36 = (void *)(*(void *)(*((void *)this + 8) + 80 * v34 + 56) + 48);
        uint64_t v37 = v35;
        unint64_t v38 = v16;
        do
        {
          uint64_t v39 = *v37++;
          *uint64_t v36 = v39;
          v36 += 35;
          --v38;
        }
        while (v38);
      }
      ++v34;
    }
    while (v34 != v20);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
}

void sub_255869DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::LayoutRow::~LayoutRow(EQKitLayoutTable::LayoutRow *this)
{
  uint64_t v4 = (void **)((char *)this + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<EQKitLayoutTable::LayoutCell>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 280 * a2;
    while (v3 != v7)
    {
      v3 -= 280;
      std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(v3);
    }
    a1[1] = v7;
  }
}

void EQKitLayoutTable::generateRowBox(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v53 = (uint64_t)a5;
  EQKit::ILayout::ILayout(a5, 0);
  unint64_t v7 = 0;
  char v8 = 0;
  double v9 = 0.0;
  uint64_t v10 = 56;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
  double v14 = 0.0;
  while (1)
  {
    uint64_t v15 = a1[8];
    unint64_t v16 = a1[9] == v15 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v15 + 64) - *(void *)(v15 + 56)) >> 3);
    if (v7 >= v16) {
      break;
    }
    uint64_t v17 = objc_msgSend(a2, "objectAtIndex:", v7, v53);
    unsigned int v18 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v17, (uint64_t)(a1 + 2), a1[8] + 80 * a3, *(void *)(a1[8] + 80 * a3 + 56) + v10 - 56, a3);
    if (v18 <= 5)
    {
      if (((1 << v18) & 0x2A) != 0)
      {
        [v17 layoutVSize];
        if (v14 < v19) {
          double v14 = v19;
        }
      }
      else if (((1 << v18) & 0x14) != 0)
      {
        [v17 layoutHeight];
        double v21 = v20;
        [v17 layoutDepth];
        if (v13 < v21) {
          double v13 = v21;
        }
        if (v12 < v22) {
          double v12 = v22;
        }
        double v23 = *(double *)(*(void *)(a1[8] + 80 * a3 + 56) + v10);
        if ((v8 & (v9 < v23)) == 0) {
          double v9 = *(double *)(*(void *)(a1[8] + 80 * a3 + 56) + v10);
        }
        if (v11 < v23) {
          double v11 = *(double *)(*(void *)(a1[8] + 80 * a3 + 56) + v10);
        }
        char v8 = 1;
      }
    }
    ++v7;
    v10 += 280;
  }
  if (v14 <= 0.0 && v13 <= 0.0 && v12 <= 0.0) {
    return;
  }
  if (v14 == 0.0)
  {
    double v14 = v12 + v13;
  }
  else if (v13 == 0.0 && v12 == 0.0)
  {
    double v12 = v14 * 0.5;
    double v13 = v14 * 0.5;
  }
  else if (v12 + v13 <= v14)
  {
    if (v12 + v13 < v14)
    {
      double v24 = (v14 - (v12 + v13)) * 0.5;
      double v13 = v13 + v24;
      double v12 = v12 + v24;
    }
  }
  else
  {
    double v14 = v12 + v13;
  }
  if (v14 == v12 + v13) {
    double v25 = v14;
  }
  else {
    double v25 = v12 + v13;
  }
  id v26 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  double v29 = v9 + (v11 - v9) * 0.5;
  for (uint64_t i = 56; ; i += 280)
  {
    uint64_t v31 = a1[8];
    unint64_t v32 = a1[9] == v31 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v31 + 64) - *(void *)(v31 + 56)) >> 3);
    if (v28 >= v32) {
      break;
    }
    uint64_t v33 = objc_msgSend(a2, "objectAtIndex:", v28, v53);
    int v34 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v33, (uint64_t)(a1 + 2), a1[8] + 80 * a3, *(void *)(a1[8] + 80 * a3 + 56) + i - 56, a3);
    [v33 layoutDepth];
    double v36 = v35;
    [v33 layoutVSize];
    double v38 = v13 + v36 + 0.0;
    switch(v34)
    {
      case 1:
        double v38 = v38 - v37;
        break;
      case 2:
        double v39 = *(double *)(*(void *)(a1[8] + 80 * a3 + 56) + i);
        double v40 = v29 + v38 - v13 - v36;
        goto LABEL_46;
      case 3:
        double v40 = v38 - v25 * 0.5;
        double v39 = v37 * -0.5;
LABEL_46:
        double v38 = v40 + v39;
        break;
      case 4:
        double v38 = v38 - v13 - v36;
        break;
      case 5:
        double v38 = v38 - v25;
        break;
      default:
        break;
    }
    if (v38 == 0.0) {
      long long v41 = v33;
    }
    else {
      long long v41 = [[EQKitVShift alloc] initWithBox:v33 offset:v38];
    }
    uint64_t v42 = v41;
    [v26 addObject:v41];

    unint64_t v43 = v28 + 1;
    uint64_t v44 = a1[8];
    if (a1[9] != v44 && v43 < 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v44 + 64) - *(void *)(v44 + 56)) >> 3))
    {
      EQKitLayoutManager::lengthForMetric(a1[1], 15);
      double v46 = v45;
      uint64_t v48 = *a4;
      uint64_t v47 = a4[1];
      if (v28 < (v47 - *a4) >> 4)
      {
        unint64_t v49 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1[1]);
        long long v50 = (double *)(v48 + v27);
        goto LABEL_58;
      }
      if (v47 != v48)
      {
        unint64_t v49 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1[1]);
        long long v50 = (double *)(v47 - 16);
LABEL_58:
        double v46 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v50, v49, v46);
      }
      long long v51 = [[EQKitHSpace alloc] initWithWidth:v46];
      [v26 addObject:v51];
    }
    v27 += 16;
    unint64_t v28 = v43;
  }
  if ([v26 count])
  {
    long long v52 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v26];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v56, &v52->super.super);
    EQKit::ILayout::operator=(v53, (uint64_t)v56);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v56);
  }
}

void sub_25586A438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::ILayout *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void EQKitLayoutTable::generateTableBox(EQKitLayoutTable *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  id v46 = objc_alloc_init(MEMORY[0x263EFF980]);
  id v45 = objc_alloc_init(MEMORY[0x263EFF980]);
  unint64_t v4 = EQKitLayoutManager::layoutContext(*((EQKitLayoutManager **)this + 1));
  unint64_t v5 = v4;
  uint64_t v44 = a2;
  if ((*(unsigned char *)(v4 + 120) & 2) != 0) {
    double v6 = *(double *)(v4 + 136);
  }
  else {
    double v6 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v4);
  }
  uint64_t v7 = EQKitLayoutManager::fontCollection(*((id **)this + 1));
  char v8 = (const __CTFont *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7 + 72))(v7, v5 + 8);
  Xdouble Height = CTFontGetXHeight(v8);
  CFRelease(v8);
  uint64_t v11 = *(void *)(v5 + 88);
  if (*(unsigned char *)(v5 + 120)) {
    v10.n128_u64[0] = *(void *)(v5 + 128);
  }
  else {
    v10.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v5);
  }
  double v12 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v11 + 56))(v11, 15, v5 + 8, v10);
  if (XHeight < v12) {
    Xdouble Height = v12;
  }
  std::string __p = 0;
  long long v51 = 0;
  long long v52 = 0;
  double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)&v52, 1uLL);
  uint64_t v15 = &v13[16 * v14];
  *(_DWORD *)double v13 = 3;
  *((void *)v13 + 1) = 0x3FE999999999999ALL;
  unint64_t v16 = v13 + 16;
  uint64_t v17 = __p;
  for (uint64_t i = v51; i != v17; *((void *)v13 + 1) = i[1])
  {
    int v19 = *((_DWORD *)i - 4);
    i -= 2;
    *((_DWORD *)v13 - 4) = v19;
    v13 -= 16;
  }
  std::string __p = v13;
  long long v51 = v16;
  long long v52 = v15;
  if (v17) {
    operator delete(v17);
  }
  long long v51 = v16;
  double v20 = (EQKitLayoutManager *)*((void *)this + 1);
  uint64_t v21 = *((void *)v20 + 77);
  id v48 = (id)EQKitLayoutManager::currentNode(v20);
  int v49 = 46;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(v21, v21 + 56, (uint64_t)&v48, &__p);
  if (*((void *)this + 9) != *((void *)this + 8))
  {
    unint64_t v22 = 0;
    do
    {
      double v23 = (EQKitHSpace *)objc_alloc_init(MEMORY[0x263EFF980]);
      double v24 = v23;
      uint64_t v25 = 0;
      for (unint64_t j = 0; ; ++j)
      {
        uint64_t v27 = *((void *)this + 8);
        unint64_t v28 = *((void *)this + 9) == v27
            ? 0
            : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v27 + 64) - *(void *)(v27 + 56)) >> 3);
        if (j >= v28) {
          break;
        }
        uint64_t v29 = *(void *)(v27 + 80 * v22 + 56);
        p_super = *(EQKitBox **)(v29 + v25 + 224);
        if (!p_super)
        {
          double v23 = [[EQKitHSpace alloc] initWithWidth:0.0];
          p_super = &v23->super;
          uint64_t v27 = *((void *)this + 8);
          uint64_t v29 = *(void *)(v27 + 80 * v22 + 56);
        }
        uint64_t v31 = v29 + v25;
        int v32 = EQKitLayoutTable::resolveColumnAlignment((uint64_t)v23, (uint64_t *)this + 2, (uint64_t *)(v27 + 80 * v22), (char **)(v29 + v25), j);
        double v33 = *(double *)(v31 + 48);
        EQKit::ILayout::ILayout((EQKit::ILayout *)v47, p_super);
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v47, v32, 0, (EQKit::ILayout *)&v48, v33, 0.0);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v47);
        [(EQKitHSpace *)v24 addObject:v48];
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v48);
        v25 += 280;
      }
      if ([(EQKitHSpace *)v24 count])
      {
        EQKitLayoutTable::generateRowBox((uint64_t *)this, v24, v22, (uint64_t *)&__p, (EQKit::ILayout *)&v48);
        if (v48)
        {
          objc_msgSend(v46, "addObject:");
          [v45 addObject:v48];
          if (v22 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4))
          {
            int v34 = [[EQKitVSpace alloc] initWithHeight:XHeight depth:0.0];
            [v46 addObject:v34];
          }
        }
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v48);
      }

      ++v22;
    }
    while (v22 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4));
  }
  double v35 = (EQKitOffsetVBox *)[v46 count];
  double v36 = (EQKitLayoutManager *)*((void *)this + 1);
  uint64_t v37 = *((void *)v36 + 77);
  v47[0] = 0;
  id v48 = (id)EQKitLayoutManager::currentNode(v36);
  int v49 = 2;
  if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v37, v37 + 152, (uint64_t)&v48, v47) & 1) == 0)v47[0] = 2; {
  if (v35)
  }
  {
    double v38 = [[EQKitVBox alloc] initWithChildBoxes:v46];
    [(EQKitBox *)v38 layoutVSize];
    double v40 = v39;
    [(EQKitBox *)v38 layoutDepth];
    double v42 = v41;

    if (v47[0] == 2)
    {
      double v43 = v6 + v42 + v40 * -0.5;
    }
    else if (v47[0] == 1)
    {
      double v43 = v42 - v40;
    }
    else if ((v47[0] - 3) > 1)
    {
      if (v47[0] == 5) {
        double v43 = v42;
      }
      else {
        double v43 = 0.0;
      }
    }
    else
    {
      double v43 = v42 + v40 * -0.5;
    }
    double v35 = [[EQKitOffsetVBox alloc] initWithChildBoxes:v46 pivotIndex:0 offset:v43];
  }
  EQKit::ILayout::ILayout(v44, &v35->super.super.super);
  EQKitLayoutTable::relationalOperatorOffset(this, (EQKitBox **)v44, (EQKit::ILayoutOffset *)&v48);
  if (v48) {
    EQKit::ILayout::setOffsetOfKind((uint64_t)v44, 1, (uint64_t)&v48);
  }

  EQKit::ILayoutOffset::~ILayoutOffset(&v48);
  if (__p)
  {
    long long v51 = __p;
    operator delete(__p);
  }
}

void sub_25586A9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::layoutTable(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    double v6 = (NSArray *)[a2 schemataChildren];
    *(unsigned char *)(a1 + 8++*(void *)(this + 8) = 0;
    LODWORD(v15[0]) = 0;
    uint64_t v7 = *(EQKitLayoutManager **)(a1 + 8);
    uint64_t v8 = *((void *)v7 + 77);
    uint64_t v13 = EQKitLayoutManager::currentNode(v7);
    int v14 = 8;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v8, v8 + 8, (uint64_t)&v13, v15))*(unsigned char *)(a1 + 8++*(void *)(this + 8) = LODWORD(v15[0]) == 2; {
    EQKitLayoutTable::generateTableLayout((EQKitLayoutTable *)a1, v6);
    }
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    *(_OWORD *)uint64_t v15 = 0u;
    double v9 = *(EQKitLayoutManager **)(a1 + 8);
    uint64_t v10 = *((void *)v9 + 77);
    uint64_t v13 = EQKitLayoutManager::currentNode(v9);
    int v14 = 3;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 248, (uint64_t)&v13, (char *)&__p[1]);
    uint64_t v11 = *(EQKitLayoutManager **)(a1 + 8);
    uint64_t v12 = *((void *)v11 + 77);
    uint64_t v13 = EQKitLayoutManager::currentNode(v11);
    int v14 = 4;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v12, v12 + 272, (uint64_t)&v13, (char *)v15);
    if ((void **)(a1 + 16) != v15)
    {
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 16), (char *)v15[0], (uint64_t)v15[1], ((char *)v15[1] - (char *)v15[0]) >> 2);
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 40), (char *)__p[1], v17, (uint64_t)(v17 - (unint64_t)__p[1]) >> 2);
    }
    EQKitLayoutTable::generateTableBox((EQKitLayoutTable *)a1, (EQKit::ILayout *)&v13);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)&v13);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v13);
    if (__p[1])
    {
      *(void **)&long long v17 = __p[1];
      operator delete(__p[1]);
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
}

void sub_25586ABC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>(uint64_t *a1, const EQKitLayoutTable::LayoutCell *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xEA0EA0EA0EA0EALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x75075075075075) {
    unint64_t v9 = 0xEA0EA0EA0EA0EALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = (EQKitLayoutTable::LayoutCell *)&v10[280 * v4];
  unint64_t v16 = &v10[280 * v9];
  EQKitLayoutTable::LayoutCell::LayoutCell(v14, a2);
  uint64_t v15 = (char *)v14 + 280;
  std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_25586AD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this, const EQKitLayoutTable::LayoutCell *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 64));
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 224));
  return this;
}

void sub_25586ADA8(_Unwind_Exception *a1)
{
  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

void *std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25586AE44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25586AEC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(280 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 280;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (EQKitLayoutTable::LayoutCell *)(v11 + v10);
    v10 -= 280;
    EQKitLayoutTable::LayoutCell::LayoutCell(v12, (const EQKitLayoutTable::LayoutCell *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 280;
    std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(i - 280);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), 0);
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), 0);
  return this;
}

void sub_25586B0D8(_Unwind_Exception *a1)
{
  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>(uint64_t *a1, const EQKitLayoutTable::LayoutRow *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutRow>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = (EQKitLayoutTable::LayoutRow *)&v10[80 * v4];
  unint64_t v16 = &v10[80 * v9];
  EQKitLayoutTable::LayoutRow::LayoutRow(v14, a2);
  uint64_t v15 = (char *)v14 + 80;
  std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_25586B1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutRow *EQKitLayoutTable::LayoutRow::LayoutRow(EQKitLayoutTable::LayoutRow *this, const EQKitLayoutTable::LayoutRow *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  uint64_t v4 = *((void *)a2 + 6);
  *((void *)this + 7) = 0;
  *((void *)this + 6) = v4;
  *((void *)this + ++*(void *)(this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:ne180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>((void *)this + 7, *((void *)a2 + 7), *((void *)a2 + 8), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  return this;
}

void sub_25586B2A8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:ne180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25586B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++*(void *)(this + 8) = v10;
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)(a4 + v7), (const EQKitLayoutTable::LayoutCell *)(a2 + v7));
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25586B41C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 280;
    do
    {
      std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(v4 + v2);
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  while (v4 != v5)
  {
    v6 -= 10;
    v4 -= 80;
    std::construct_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutRow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

__n128 std::construct_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow*>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(void *)(this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  a1[6] = *(void *)(a2 + 48);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 7) = result;
  a1[9] = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + ++*(void *)(this + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return result;
}

uint64_t std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,0>(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  __n128 result = (EQKitLayoutTable::LayoutCell *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (EQKitLayoutTable::LayoutCell *)*((void *)result - 1);
  if (0xAF8AF8AF8AF8AF8BLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280 * a2);
      uint64_t v14 = 280 * a2;
      do
      {
        __n128 result = EQKitLayoutTable::LayoutCell::LayoutCell(v7);
        uint64_t v7 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280);
        v14 -= 280;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xEA0EA0EA0EA0EALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x75075075075075) {
      unint64_t v11 = 0xEA0EA0EA0EA0EALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = (EQKitLayoutTable::LayoutCell *)&v12[280 * v8];
    v18[0] = v12;
    v18[1] = v15;
    int v19 = v15;
    double v20 = &v12[280 * v11];
    uint64_t v16 = 280 * a2;
    long long v17 = (EQKitLayoutTable::LayoutCell *)((char *)v15 + 280 * a2);
    do
    {
      EQKitLayoutTable::LayoutCell::LayoutCell(v15);
      uint64_t v15 = (EQKitLayoutTable::LayoutCell *)((char *)v15 + 280);
      v16 -= 280;
    }
    while (v16);
    int v19 = v17;
    std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(a1, v18);
    return (EQKitLayoutTable::LayoutCell *)std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_25586B73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  uint64_t v8 = v7;
  if (a2 + 8 != v7)
  {
    if ((void *)(v7 + 48) == a4) {
      return 1;
    }
    uint64_t v9 = *(void *)(v7 + 48);
    uint64_t v10 = *(void *)(v7 + 56);
LABEL_4:
    std::vector<EQKitLength>::__assign_with_size[abi:ne180100]<EQKitLength*,EQKitLength*>(a4, v9, v10, (v10 - v9) >> 4);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      if ((void *)(v14 + 48) == a4) {
        return 1;
      }
      uint64_t v9 = *(void *)(v14 + 48);
      uint64_t v10 = *(void *)(v14 + 56);
      goto LABEL_4;
    }
  }
  return result;
}

char *std::vector<EQKitLength>::__assign_with_size[abi:ne180100]<EQKitLength*,EQKitLength*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    long long v17 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v17;
    unint64_t v18 = (v17 - result) >> 4;
    if (v18 >= a4)
    {
      unint64_t v22 = result;
      if (a2 != a3)
      {
        double v23 = result;
        do
        {
          *(_DWORD *)double v23 = *(_DWORD *)v6;
          *((void *)v23 + 1) = *(void *)(v6 + 8);
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      int64_t v16 = v22 - result;
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v19 = a2 + 16 * v18;
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)uint64_t result = *(_DWORD *)v6;
          *((void *)result + 1) = *(void *)(v6 + 8);
          v6 += 16;
          result += 16;
        }
        while (v6 != v19);
      }
      double v20 = v12;
      if (v19 != a3)
      {
        uint64_t v21 = v12;
        do
        {
          *(_DWORD *)uint64_t v21 = *(_DWORD *)v19;
          *((void *)v21 + 1) = *(void *)(v19 + 8);
          v20 += 16;
          v19 += 16;
          v21 += 16;
        }
        while (v19 != a3);
      }
      int64_t v16 = v20 - v12;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        *(_DWORD *)uint64_t v15 = *(_DWORD *)v6;
        *((void *)v15 + 1) = *(void *)(v6 + 8);
        v15 += 16;
        v6 += 16;
      }
      while (v6 != a3);
    }
    int64_t v16 = v15 - v12;
  }
  void *v13 = &v12[v16];
  return result;
}

id EQKitLayoutFilterOutSpaceLike(void *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if (([v7 isSpaceLike] & 1) == 0) {
          [v2 addObject:v7];
        }
      }
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return (id)[v2 copy];
}

uint64_t EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t result, int a2)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + ++*(void *)(this + 8) = a2;
  *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

double EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + ++*(void *)(this + 8) = *(_DWORD *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

double EQKitAlignmentGroup::increaseWidth(EQKitAlignmentGroup *this, double a2)
{
  double result = *(double *)this + a2;
  *(double *)this = result;
  return result;
}

BOOL EQKitAlignmentGroup::needsDecimalAlignmentPoint(EQKitAlignmentGroup *this)
{
  return *((_DWORD *)this + 2) == 4 && *((double *)this + 2) == 1.79769313e308;
}

double EQKitAlignmentGroup::saveAlignmentPoint(EQKitAlignmentGroup *this, double a2)
{
  double result = *(double *)this + a2;
  *((double *)this + 2) = result;
  return result;
}

double EQKitAlignmentGroup::leftWidth(EQKitAlignmentGroup *this)
{
  double result = *((double *)this + 2);
  if (result == 1.79769313e308)
  {
    int v2 = *((_DWORD *)this + 2);
    if ((v2 - 3) >= 2)
    {
      double result = 0.0;
      if (v2 == 2) {
        return *(double *)this * 0.5;
      }
    }
    else
    {
      return *(double *)this;
    }
  }
  return result;
}

double EQKitAlignmentGroup::rightWidth(EQKitAlignmentGroup *this)
{
  double v1 = *(double *)this;
  double v2 = *((double *)this + 2);
  if (v2 == 1.79769313e308)
  {
    int v3 = *((_DWORD *)this + 2);
    double v2 = *(double *)this;
    if ((v3 - 3) >= 2)
    {
      double v2 = 0.0;
      if (v3 == 2) {
        double v2 = v1 * 0.5;
      }
    }
  }
  return v1 - v2;
}

void EQKitGroupAlignmentContext::addRow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v6 > (a1[1] - *a1) >> 3)
  {
    uint64_t v15 = 0;
    std::vector<double>::resize((uint64_t)a1, v6, &v15);
    uint64_t v15 = 0;
    std::vector<double>::resize((uint64_t)(a1 + 3), v6, &v15);
  }
  if (v4 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6;
    }
    do
    {
      long long v10 = (EQKitAlignmentGroup *)(*a2 + v7);
      uint64_t v11 = *a1;
      double v12 = EQKitAlignmentGroup::leftWidth(v10);
      if (*(double *)(v11 + 8 * v8) >= v12) {
        double v12 = *(double *)(v11 + 8 * v8);
      }
      *(double *)(*a1 + 8 * v++*(void *)(this + 8) = v12;
      uint64_t v13 = a1[3];
      double v14 = EQKitAlignmentGroup::rightWidth(v10);
      if (*(double *)(v13 + 8 * v8) >= v14) {
        double v14 = *(double *)(v13 + 8 * v8);
      }
      *(double *)(a1[3] + 8 * v8++) = v14;
      v7 += 24;
    }
    while (v9 != v8);
  }
}

void EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  if (a3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) {
    EQKitAlignmentGroup::leftWidth(a2);
  }
}

void EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  if (a3 < (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3) {
    EQKitAlignmentGroup::rightWidth(a2);
  }
}

double EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(EQKitGroupAlignmentContext *this, uint64_t a2)
{
  uint64_t v2 = a2 + 1;
  int v3 = (double *)*((void *)this + 1);
  double result = 0.0;
  if (a2 + 1 < (unint64_t)(((uint64_t)v3 - *(void *)this) >> 3))
  {
    uint64_t v5 = (double *)(*(void *)this + 8 * v2);
    double v6 = 0.0;
    if (v5 != v3)
    {
      float v7 = 0.0;
      do
      {
        double v8 = *v5++;
        float v7 = v8 + v7;
      }
      while (v5 != v3);
      double v6 = v7 + 0.0;
    }
    uint64_t v9 = (double *)*((void *)this + 4);
    long long v10 = (double *)(*((void *)this + 3) + 8 * v2);
    if (v10 != v9)
    {
      float v11 = 0.0;
      do
      {
        double v12 = *v10++;
        float v11 = v12 + v11;
      }
      while (v10 != v9);
      double result = v11;
    }
    return v6 + result;
  }
  return result;
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, EQKitBox *a2, double a3)
{
  *(void *)this = a2;
  *((double *)this + 1) = a3;
  return this;
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, id *a2)
{
  *(void *)this = *a2;
  *((void *)this + 1) = a2[1];
  return this;
}

void EQKit::ILayoutOffset::~ILayoutOffset(id *this)
{
}

uint64_t EQKit::ILayoutOffset::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(void *)a1 = *(id *)a2;
    *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(a2 + 8);
  }
  return a1;
}

double EQKit::ILayoutOffset::offsetInBox(EQKit::ILayoutOffset *this, EQKitBox *a2)
{
  if (!*(void *)this) {
    return 1.79769313e308;
  }
  if (a2)
  {
    -[EQKitBox transformFromDescendant:](a2, "transformFromDescendant:");
    double v3 = 0.0 * 0.0;
  }
  else
  {
    double v3 = 0.0;
  }
  return v3 + 0.0 * *((double *)this + 1) + 0.0;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, EQKitBox *a2)
{
  double v3 = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v3;
  *((void *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + ++*(void *)(this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return this;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  *(void *)this = *(id *)a2;
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:ne180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *((_DWORD *)this + ++*(void *)(this + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  return this;
}

void EQKit::ILayout::~ILayout(EQKit::ILayout *this)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 8, *((id **)this + 2));
}

uint64_t EQKit::ILayout::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(void *)a1 = *(id *)a2;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

EQKitBox *EQKit::ILayout::setBox(EQKitBox *this, EQKitBox *a2)
{
  if ((EQKitBox *)this->super.isa != a2)
  {
    double v3 = this;

    this = a2;
    v3->super.Class isa = (Class)this;
  }
  return this;
}

uint64_t EQKit::ILayout::setIsOverAccentTokenWithBaseToken(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFEFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setIsUserSpace(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 512;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFDFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setVerticalContentClassification(uint64_t result, char a2)
{
  *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0xE3FF | ((a2 & 7) << 10);
  return result;
}

BOOL EQKit::ILayout::getOffsetOfKind(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v3 = a1 + 16;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      long long v10 = (uint64_t *)v4;
    }
    else {
      long long v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3 || *(_DWORD *)(v7 + 32) > a2) {
    return 0;
  }
  EQKit::ILayoutOffset::operator=((uint64_t)a3, v7 + 40);
  return *a3 != 0;
}

void EQKit::ILayout::setOffsetOfKind(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  int v5 = a2;
  id v6 = *(id *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(v4, &v5, (uint64_t)&v5);
}

void sub_25586C24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t *EQKit::ILayout::removeOffsetOfKind(uint64_t *result, int a2)
{
  __int16 v2 = result + 2;
  uint64_t v3 = result[2];
  if (v3)
  {
    ++result;
    uint64_t v4 = (uint64_t)v2;
    do
    {
      int v5 = *(_DWORD *)(v3 + 32);
      BOOL v6 = v5 < a2;
      if (v5 >= a2) {
        uint64_t v7 = (uint64_t *)v3;
      }
      else {
        uint64_t v7 = (uint64_t *)(v3 + 8);
      }
      if (!v6) {
        uint64_t v4 = v3;
      }
      uint64_t v3 = *v7;
    }
    while (*v7);
    if ((uint64_t *)v4 != v2 && *(_DWORD *)(v4 + 32) <= a2) {
      return std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase((uint64_t **)result, v4);
    }
  }
  return result;
}

void EQKit::ILayout::takeMissingOffsetsFromLayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  __int16 v2 = (char *)*((void *)a2 + 1);
  uint64_t v3 = (char *)a2 + 16;
  if (v2 != (char *)a2 + 16)
  {
    uint64_t v4 = (char *)this + 8;
    int v5 = (void *)((char *)this + 16);
    do
    {
      uint64_t v6 = *v5;
      int v7 = *((_DWORD *)v2 + 8);
      if (!*v5) {
        goto LABEL_13;
      }
      int v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < v7;
        if (v9 >= v7) {
          float v11 = (uint64_t *)v6;
        }
        else {
          float v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          int v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 8))
      {
LABEL_13:
        int v15 = *((_DWORD *)v2 + 8);
        id v16 = *((id *)v2 + 5);
        uint64_t v17 = *((void *)v2 + 6);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)v4, &v15, (uint64_t)&v15);
      }
      double v12 = (char *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (char *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v13 == (void)v2;
          __int16 v2 = v13;
        }
        while (!v14);
      }
      __int16 v2 = v13;
    }
    while (v13 != v3);
  }
}

void sub_25586C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

void EQKit::Layout::Config::newConfigFromDictionary(EQKit::Layout::Config *this, const EQKit::Environment::Version *a2, NSDictionary *a3)
{
}

void sub_25586C518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _BOOL(NSDictionary *a1, NSString *a2)
{
  uint64_t v4 = objc_opt_class();
  int v5 = (void *)EQKitUtilDynamicCast(v4, (uint64_t)[(NSDictionary *)a1 objectForKey:a2]);

  return [v5 BOOLValue];
}

EQKit::Font::Manager *EQKit::Font::Manager::Manager(EQKit::Font::Manager *this, EQKitEnvironment *a2, NSDictionary *a3, const EQKit::Environment::Version *a4)
{
  *(void *)this = &unk_27045AB00;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  uint64_t v7 = [(NSDictionary *)a3 copy];
  uint64_t v8 = *(void *)a4;
  *((void *)this + 3) = v7;
  *((void *)this + 4) = v8;
  *((void *)this + 5) = 0;
  return this;
}

void EQKit::Font::Manager::~Manager(EQKit::Font::Manager *this)
{
  *(void *)this = &unk_27045AB00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t vars8;

  EQKit::Font::Manager::~Manager(this);

  JUMPOUT(0x25A290040);
}

uint64_t EQKit::Font::Manager::fontCollection(EQKit::Font::Manager *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result)
  {
    EQKit::Font::Manager::reloadFonts(this);
    return *((void *)this + 2);
  }
  return result;
}

uint64_t EQKit::Font::Manager::reloadFonts(EQKit::Font::Manager *this)
{
  if ([*((id *)this + 1) usesLegacySTIXFonts])
  {
    uint64_t v3 = (char *)this + 16;
    uint64_t v2 = (const void *)*((void *)this + 2);
    if (!v2) {
      goto LABEL_17;
    }
    CFStringRef v4 = 0;
  }
  else
  {
    CFStringRef v4 = (const __CFString *)[*((id *)this + 1) mathFontName];
    uint64_t v3 = (char *)this + 16;
    uint64_t v2 = (const void *)*((void *)this + 2);
    if (!v2) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = v5;
  if (v4)
  {
    if (!v5
      || !(*(unsigned int (**)(void *))(*(void *)v5 + 16))(v5)
      || (CFStringRef v7 = (const __CFString *)*((void *)v6 + 1)) != 0 && CFStringCompare(v4, v7, 0))
    {
      uint64_t v8 = *(void *)v3;
      if (!*(void *)v3) {
LABEL_16:
      }
        operator new();
LABEL_14:
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      goto LABEL_15;
    }
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)v3;
    if (!*(void *)v3) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (!*(void *)v3)
  {
LABEL_15:
    if (v4) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v9 = objc_opt_class();
    EQKitUtilDynamicCast(v9, [*((id *)this + 3) objectForKeyedSubscript:@"STIX"]);
    operator new();
  }
  BOOL v10 = *(uint64_t (**)(void))(**(void **)v3 + 24);

  return v10();
}

void sub_25586C9F4(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x10E1C40DA3C5C2ALL);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::Manager::beginLayout(uint64_t this)
{
  return this;
}

uint64_t EQKit::Font::Manager::endLayout(EQKit::Font::Manager *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))();
}

void EQKit::Font::Manager::reloadFonts(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v1 = 138412546;
  uint64_t v2 = a1;
  __int16 v3 = 2112;
  CFStringRef v4 = +[EQKitEnvironment defaultMathFontName];
  _os_log_error_impl(&dword_255834000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to load math font \"%@\". Falling back to \"%@\"", (uint8_t *)&v1, 0x16u);
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, NSString *a2, const __CTFont *a3)
{
  if (!a2 || !a3) {
    return 0;
  }
  id v5 = objc_alloc(NSDictionary);
  uint64_t v6 = objc_msgSend(v5, "initWithObjectsAndKeys:", a3, *MEMORY[0x263F039A0], *MEMORY[0x263EFFB40], *MEMORY[0x263F03C68], &unk_2704646A0, *MEMORY[0x263F03D88], 0);
  uint64_t v7 = [objc_alloc(MEMORY[0x263F086A0]) initWithString:a2 attributes:v6];

  return v7;
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, int a2, const __CTFont *a3)
{
  if ((a2 - 0x10000) >> 20)
  {
    uint64_t v6 = 1;
    LOWORD(v5) = a2;
  }
  else
  {
    unsigned int v5 = ((a2 + 67043328) >> 10) - 10240;
    v10[1] = a2 & 0x3FF | 0xDC00;
    uint64_t v6 = 2;
  }
  v10[0] = v5;
  uint64_t v7 = (void *)[[NSString alloc] initWithCharacters:v10 length:v6];
  uint64_t v8 = (*(uint64_t (**)(EQKit::Font::Collection *, void *, const __CTFont *))(*(void *)this + 144))(this, v7, a3);

  return v8;
}

void *EQKit::Font::CompositeStretch::CompositeStretch(void *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

uint64_t EQKit::Font::CompositeStretch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFStringRef v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(a2 + 8);
  }
  return a1;
}

void EQKit::Font::CompositeStretch::~CompositeStretch(const void **this)
{
  int v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void EQKit::Font::CompositeStretch::defineCompositeStretch(const __CFString *this@<X0>, const __CFString *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  int v9 = (int)a2;
  v62[1] = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = -1;
  int v60 = 0;
  double v61 = 0;
  v62[0] = 0;
  if (a2)
  {
    double v12 = (UniChar *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, 1);
    *double v12 = v9;
    BOOL v14 = v12 + 1;
    int v60 = v12;
    v62[0] = &v12[v13];
    double v61 = v12 + 1;
    if (!a3) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v14 = 0;
    if (!a3)
    {
LABEL_3:
      if (!a4) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  if ((unint64_t)v14 >= v62[0])
  {
    id v16 = v60;
    uint64_t v17 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = v17 >> 1;
    if (v62[0] - (void)v60 <= (unint64_t)((v17 >> 1) + 1)) {
      uint64_t v19 = v18 + 1;
    }
    else {
      uint64_t v19 = v62[0] - (void)v60;
    }
    if (v62[0] - (void)v60 >= 0x7FFFFFFFFFFFFFFEuLL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    if (v20)
    {
      uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, v20);
      id v16 = v60;
      BOOL v14 = v61;
    }
    else
    {
      uint64_t v21 = 0;
    }
    unint64_t v22 = (UniChar *)&v21[2 * v18];
    double v23 = &v21[2 * v20];
    *unint64_t v22 = a3;
    int v15 = v22 + 1;
    while (v14 != v16)
    {
      UniChar v24 = *--v14;
      *--unint64_t v22 = v24;
    }
    int v60 = v22;
    double v61 = v15;
    v62[0] = v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *BOOL v14 = a3;
    int v15 = v14 + 1;
  }
  double v61 = v15;
  BOOL v14 = v15;
  if (!a4)
  {
LABEL_4:
    if (!a5) {
      goto LABEL_5;
    }
LABEL_44:
    if ((unint64_t)v14 >= v62[0])
    {
      double v36 = v60;
      uint64_t v37 = (char *)v14 - (char *)v60;
      if ((char *)v14 - (char *)v60 <= -3) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v37 >> 1;
      if (v62[0] - (void)v60 <= (unint64_t)((v37 >> 1) + 1)) {
        uint64_t v39 = v38 + 1;
      }
      else {
        uint64_t v39 = v62[0] - (void)v60;
      }
      if (v62[0] - (void)v60 >= 0x7FFFFFFFFFFFFFFEuLL) {
        uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v40 = v39;
      }
      if (v40)
      {
        double v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, v40);
        double v36 = v60;
        BOOL v14 = v61;
      }
      else
      {
        double v41 = 0;
      }
      double v42 = (UniChar *)&v41[2 * v38];
      double v43 = &v41[2 * v40];
      UniChar *v42 = a5;
      double v35 = v42 + 1;
      while (v14 != v36)
      {
        UniChar v44 = *--v14;
        *--double v42 = v44;
      }
      int v60 = v42;
      double v61 = v35;
      v62[0] = v43;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *BOOL v14 = a5;
      double v35 = v14 + 1;
    }
    double v61 = v35;
    BOOL v14 = v35;
    if (!this) {
      goto LABEL_78;
    }
    goto LABEL_62;
  }
LABEL_26:
  if ((unint64_t)v14 >= v62[0])
  {
    id v26 = v60;
    uint64_t v27 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v27 >> 1;
    if (v62[0] - (void)v60 <= (unint64_t)((v27 >> 1) + 1)) {
      uint64_t v29 = v28 + 1;
    }
    else {
      uint64_t v29 = v62[0] - (void)v60;
    }
    if (v62[0] - (void)v60 >= 0x7FFFFFFFFFFFFFFEuLL) {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v30 = v29;
    }
    if (v30)
    {
      uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, v30);
      id v26 = v60;
      BOOL v14 = v61;
    }
    else
    {
      uint64_t v31 = 0;
    }
    int v32 = (UniChar *)&v31[2 * v28];
    double v33 = &v31[2 * v30];
    UniChar *v32 = a4;
    uint64_t v25 = v32 + 1;
    while (v14 != v26)
    {
      UniChar v34 = *--v14;
      *--int v32 = v34;
    }
    int v60 = v32;
    double v61 = v25;
    v62[0] = v33;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *BOOL v14 = a4;
    uint64_t v25 = v14 + 1;
  }
  double v61 = v25;
  BOOL v14 = v25;
  if (a5) {
    goto LABEL_44;
  }
LABEL_5:
  if (!this) {
    goto LABEL_78;
  }
LABEL_62:
  CTFontRef v45 = CTFontCreateWithName(this, 12.0, 0);
  id v46 = v45;
  if (v14 != v60 && v45)
  {
    MEMORY[0x270FA5388]((void *)(2 * (v14 - v60)), v45);
    id v48 = (CGGlyph *)((char *)&v55 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (CTFontGetGlyphsForCharacters(v46, v60, v48, v49))
    {
      if (v9)
      {
        CGGlyph v50 = *v48;
        uint64_t v51 = 1;
        if (a3) {
          goto LABEL_67;
        }
      }
      else
      {
        uint64_t v51 = 0;
        CGGlyph v50 = -1;
        if (a3)
        {
LABEL_67:
          __int16 v52 = v48[v51++];
          if (a4) {
            goto LABEL_68;
          }
          goto LABEL_74;
        }
      }
      __int16 v52 = -1;
      if (a4)
      {
LABEL_68:
        __int16 v53 = v48[v51++];
        if (a5)
        {
LABEL_69:
          __int16 v54 = v48[v51];
LABEL_76:
          CGGlyph v56 = v50;
          __int16 v57 = v52;
          __int16 v58 = v53;
          __int16 v59 = v54;
          CFStringRef v55 = this;
          CFRetain(this);
          EQKit::Font::CompositeStretch::operator=((uint64_t)a6, (uint64_t)&v55);
          EQKit::Font::CompositeStretch::~CompositeStretch((const void **)&v55);
          goto LABEL_77;
        }
LABEL_75:
        __int16 v54 = -1;
        goto LABEL_76;
      }
LABEL_74:
      __int16 v53 = -1;
      if (a5) {
        goto LABEL_69;
      }
      goto LABEL_75;
    }
LABEL_77:
    CFRelease(v46);
    goto LABEL_78;
  }
  if (v45) {
    goto LABEL_77;
  }
LABEL_78:
  if (v60)
  {
    double v61 = v60;
    operator delete(v60);
  }
}

void sub_25586D174(_Unwind_Exception *a1)
{
  EQKit::Font::CompositeStretch::~CompositeStretch((const void **)(v2 - 128));
  CFStringRef v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(void *)(v2 - 104) = v4;
    operator delete(v4);
  }
  EQKit::Font::CompositeStretch::~CompositeStretch(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::Collection::supportsOpenTypeMATHTables(EQKit::Font::Collection *this)
{
  return 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(uint64_t **a1@<X0>, const EQKit::StemStretch::Key *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  uint64_t v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    uint64_t v9 = v7[6];
    BOOL v10 = (std::__shared_weak_count *)v7[7];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = v9;
    a3[1] = v10;
  }
  else
  {
    BOOL v10 = 0;
  }
  pthread_rwlock_unlock(v6);
  if (!v8 && ((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v6);
    float v11 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
    if (v11)
    {
      v11[8] = **a1;
      uint64_t v12 = v11[6];
      uint64_t v13 = v11[7];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v16 = **a1;
      uint64_t v17 = a2;
      BOOL v14 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v17);
      int v15 = (std::__shared_weak_count *)v14[7];
      v14[6] = 0;
      v14[7] = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      v14[8] = v16;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4++*(void *)(this + 8) = 1;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *a3 = v12;
    a3[1] = v13;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    pthread_rwlock_unlock(v6);
  }
}

void sub_25586D3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

BOOL EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(EQKit::Font::STIXCollection *this, const unsigned __int16 *a2, const __CTFont **a3, double *a4, double *a5)
{
  if (!*a3) {
    return 0;
  }
  uint64_t v8 = (EQKitPath *)EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*a2, *a3, (const __CTFont *)a3);
  if (!*a3)
  {
    double v10 = 0.0;
    if (v8) {
      goto LABEL_4;
    }
    return 0;
  }
  CGFloat SlantAngle = CTFontGetSlantAngle(*a3);
  double v10 = fabs(tan(SlantAngle * 3.14159265 / 180.0));
  if (!v8) {
    return 0;
  }
LABEL_4:
  BOOL v11 = *(void *)v8 != 0;
  if (*(void *)v8)
  {
    if (v10 == 0.0)
    {
      *a4 = 0.0;
      *a5 = 0.0;
    }
    else
    {
      EQKitPath::extractPath(v8);
      uint64_t v12 = (double *)*((void *)v8 + 1);
      uint64_t v13 = (double *)*((void *)v8 + 2);
      double v14 = 0.0;
      if (v12 == v13)
      {
        double v15 = 2.22507386e-308;
        double v16 = 1.79769313e308;
        double v17 = 1.79769313e308;
        double v19 = 2.22507386e-308;
        double v25 = 1.79769313e308;
      }
      else
      {
        double v15 = 2.22507386e-308;
        double v16 = 1.79769313e308;
        double v17 = 1.79769313e308;
        double v18 = 0.0;
        double v19 = 2.22507386e-308;
        uint64_t v20 = (double *)*((void *)v8 + 1);
        do
        {
          double v22 = *v20;
          double v21 = v20[1];
          if (v21 > v19) {
            double v19 = v20[1];
          }
          if (v21 < v16) {
            double v16 = v20[1];
          }
          if (v22 < v17 || (v22 == v17 ? (BOOL v23 = v21 < v18) : (BOOL v23 = 0), v23))
          {
            double v18 = v20[1];
            double v17 = *v20;
          }
          if (v22 > v15 || (v22 == v15 ? (BOOL v24 = v21 < v14) : (BOOL v24 = 0), v24))
          {
            double v14 = v20[1];
            double v15 = *v20;
          }
          v20 += 2;
        }
        while (v20 != v13);
        if (v12 == v13)
        {
          double v25 = 1.79769313e308;
        }
        else
        {
          double v25 = 1.79769313e308;
          do
          {
            double v26 = v12[1];
            if (v26 <= v18)
            {
              double v27 = *v12 + (v26 - v16) * v10;
              if (v27 < v25) {
                double v25 = v27;
              }
            }
            v12 += 2;
          }
          while (v12 != v13);
        }
      }
      double v28 = v15 + (v14 - v16) * v10;
      double v29 = (v17 + v15) * 0.5;
      *a5 = (v28 + v25) * 0.5 - v29;
      *a4 = (v28 - (v19 - v16) * v10 + v25 - (v19 - v16) * v10) * 0.5 - v29;
    }
  }
  EQKitPath::~EQKitPath(v8);
  MEMORY[0x25A290040]();
  return v11;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = a2;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + ++*(void *)(this + 64) = v7;
  if (*(void *)(a1 + 32) > a2) {
    *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 1;
  }
  pthread_rwlock_unlock(v6);

  return EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune((uint64_t **)a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = a2;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + ++*(void *)(this + 64) = v7;
  if (*(void *)(a1 + 32) > a2) {
    *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 1;
  }
  pthread_rwlock_unlock(v6);

  return EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune((uint64_t **)a1);
}

void EQKit::Font::STIXCollection::STIXCollection(EQKit::Font::STIXCollection *this, NSDictionary *a2, const EQKit::Environment::Version *a3, const EQKitCacheLRUCounter *a4)
{
  *(void *)this = &unk_27045AC00;
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168), a4);
}

void sub_25586DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::Font::STIXCollection::SizeVariant *a9, uint64_t a10, char a11)
{
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v12 + 304, *v15);
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v13, *v14);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(v11);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(a9);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 328);
  if (v2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    if (*(void *)a2) {
      CFStringRef v4 = (char *)[*(id *)a2 UTF8String];
    }
    else {
      CFStringRef v4 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, v4);
    v6[0] = v3;
    v6[1] = 13;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v5;
    }
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v2 + 48, (uint64_t)v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_25586DF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2(uint64_t a1, const EQKit::StemStretch::Key *a2, _DWORD *a3)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(*(uint64_t ***)(*(void *)(a1 + 32) + 384), a2, &v6);
  int v4 = (int)v6;
  if (v6) {
    int v4 = *v6;
  }
  *a3 = v4;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 1;
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(void *)a2)
  {
    std::string v5 = CTFontCreateWithName(*(CFStringRef *)a2, *(CGFloat *)(a2 + 8), 0);
    double v14 = v5;
    if (v5)
    {
      uint64_t v6 = v5;
      double v12 = 0.0;
      double v13 = 0.0;
      unsigned __int16 v11 = *(_WORD *)(a2 + 16);
      BOOL v7 = EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(v5, &v11, &v14, &v13, &v12);
      double v9 = v12;
      double v8 = v13;
      if (!v7)
      {
        double v9 = 0.0;
        double v8 = 0.0;
      }
      *a3 = v8;
      a3[1] = v9;
      CFRelease(v6);
    }
  }
  return 1;
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 208)) = a2[1];
  int v4 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 1);
  if (v4)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v4);
    MEMORY[0x25A290040]();
    *((void *)this + 1) = 0;
  }
  std::string v5 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 3);
  if (v5)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v5);
    MEMORY[0x25A290040]();
    *((void *)this + 3) = 0;
  }
  uint64_t v6 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 2);
  if (v6)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v6);
    MEMORY[0x25A290040]();
    *((void *)this + 2) = 0;
  }
  BOOL v7 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 4);
  if (v7)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v7);
    MEMORY[0x25A290040]();
    *((void *)this + 4) = 0;
  }
  double v8 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 7);
  if (v8)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v8);
    MEMORY[0x25A290040]();
    *((void *)this + 7) = 0;
  }
  double v9 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 9);
  if (v9)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v9);
    MEMORY[0x25A290040]();
    *((void *)this + 9) = 0;
  }
  double v10 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 8);
  if (v10)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v10);
    MEMORY[0x25A290040]();
    *((void *)this + ++*(void *)(this + 8) = 0;
  }
  unsigned __int16 v11 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 10);
  if (v11)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v11);
    MEMORY[0x25A290040]();
    *((void *)this + 10) = 0;
  }
  double v12 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 11);
  if (v12)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v12);
    MEMORY[0x25A290040]();
    *((void *)this + 11) = 0;
  }
  double v13 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 12);
  if (v13)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v13);
    MEMORY[0x25A290040]();
    *((void *)this + 12) = 0;
  }
  double v14 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 13);
  if (v14)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v14);
    MEMORY[0x25A290040]();
    *((void *)this + 13) = 0;
  }
  double v15 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 14);
  if (v15)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v15);
    MEMORY[0x25A290040]();
    *((void *)this + 14) = 0;
  }
  double v16 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 15);
  if (v16)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v16);
    MEMORY[0x25A290040]();
    *((void *)this + 15) = 0;
  }
  double v17 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 16);
  if (v17)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v17);
    MEMORY[0x25A290040]();
    *((void *)this + 16) = 0;
  }
  double v18 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 17);
  if (v18)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v18);
    MEMORY[0x25A290040]();
    *((void *)this + 17) = 0;
  }
  double v19 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 18);
  if (v19)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v19);
    MEMORY[0x25A290040]();
    *((void *)this + 1++*(void *)(this + 8) = 0;
  }
  uint64_t v20 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 19);
  if (v20)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v20);
    MEMORY[0x25A290040]();
    *((void *)this + 19) = 0;
  }
  double v21 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 20);
  if (v21)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v21);
    MEMORY[0x25A290040]();
    *((void *)this + 20) = 0;
  }
  double v22 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 5);
  if (v22)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v22);
    MEMORY[0x25A290040]();
    *((void *)this + 5) = 0;
  }
  BOOL v23 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 6);
  if (v23)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v23);
    MEMORY[0x25A290040]();
    *((void *)this + 6) = 0;
  }
  BOOL v24 = (char **)*((void *)this + 41);
  if (v24)
  {
    EQKit::Font::CharacterProperty::Map::~Map(v24);
    MEMORY[0x25A290040]();
  }
  uint64_t v25 = *((void *)this + 42);
  if (v25) {
    MEMORY[0x25A290040](v25, 0x1000C40E670F890);
  }
  uint64_t v26 = *((void *)this + 43);
  if (v26)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((void *)this + 43), *(void **)(v26 + 8));
    MEMORY[0x25A290040](v26, 0x1020C4062D53EE8);
  }
  uint64_t v27 = *((void *)this + 44);
  if (v27)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((void *)this + 44), *(void **)(v27 + 8));
    MEMORY[0x25A290040](v27, 0x1020C4062D53EE8);
  }
  uint64_t v28 = *((void *)this + 45);
  if (v28)
  {
    double v29 = *(void **)v28;
    if (*(void *)v28)
    {
      *(void *)(v28 + ++*(void *)(this + 8) = v29;
      operator delete(v29);
    }
    MEMORY[0x25A290040](v28, 0x10C402FEFCB83);
  }
  uint64_t v30 = *((void *)this + 46);
  if (v30)
  {
    uint64_t v31 = *(void **)v30;
    if (*(void *)v30)
    {
      *(void *)(v30 + ++*(void *)(this + 8) = v31;
      operator delete(v31);
    }
    MEMORY[0x25A290040](v30, 0x10C402FEFCB83);
  }
  uint64_t v32 = *((void *)this + 48);
  if (v32)
  {
    uint64_t v33 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(v32);
    MEMORY[0x25A290040](v33, 0x10E0C40B27302BALL);
  }
  uint64_t v34 = *((void *)this + 47);
  if (v34)
  {
    uint64_t v35 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(v34);
    MEMORY[0x25A290040](v35, 0x10E0C40B27302BALL);
  }
  uint64_t v36 = *((void *)this + 49);
  if (v36)
  {
    uint64_t v37 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(v36);
    MEMORY[0x25A290040](v37, 0x10E0C40B27302BALL);
  }
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 280, *((void **)this + 36));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 224));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168));
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x25A290040);
}

uint64_t EQKit::Font::STIXCollection::pruneCaches(uint64_t ***this)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(this[48]);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(this[47]);
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[27]);
  uint64_t v2 = this[34];

  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(v2);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      uint64_t v20 = 0;
      double v21 = 0;
      unint64_t v22 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6[8];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          uint64_t v19 = v5 - v7;
          double v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            double v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((void *)v8 + 4) = v19;
            double v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          double v21 = v9;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v18);
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        double v10 = v20;
        unsigned __int16 v11 = v21;
      }
      else
      {
        unsigned __int16 v11 = 0;
        double v10 = 0;
      }
      unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      BOOL v23 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      double v15 = a1[8];
      unint64_t v16 = v14 - (void)v15;
      if (v14 > (unint64_t)v15)
      {
        uint64_t v17 = 40 * (void)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((unsigned char *)a1 + 4++*(void *)(this + 8) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_25586E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      uint64_t v20 = 0;
      double v21 = 0;
      unint64_t v22 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6[7];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          uint64_t v19 = v5 - v7;
          double v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            double v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((void *)v8 + 4) = v19;
            double v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          double v21 = v9;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v18);
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        double v10 = v20;
        unsigned __int16 v11 = v21;
      }
      else
      {
        unsigned __int16 v11 = 0;
        double v10 = 0;
      }
      unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      BOOL v23 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      double v15 = a1[8];
      unint64_t v16 = v14 - (void)v15;
      if (v14 > (unint64_t)v15)
      {
        uint64_t v17 = 40 * (void)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((unsigned char *)a1 + 4++*(void *)(this + 8) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_25586E96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void EQKit::Font::STIXCollection::reloadFonts(EQKit::Font::STIXCollection::FontInfo **this)
{
}

void _fontInfoWithName(EQKit::Font::STIXCollection::FontInfo **a1, const __CFString *a2)
{
  int v3 = *a1;
  if (v3)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v3);
    MEMORY[0x25A290040]();
    *a1 = 0;
  }
  operator new();
}

void sub_25586EC58(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1072C40BE800170);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::STIXCollection::fontsLoadedCorrectly(EQKit::Font::STIXCollection *this)
{
  char v1 = *(unsigned char *)(*((void *)this + 1) + 40);
  if (v1)
  {
    char v1 = *(unsigned char *)(*((void *)this + 3) + 40);
    if (v1)
    {
      char v1 = *(unsigned char *)(*((void *)this + 2) + 40);
      if (v1)
      {
        char v1 = *(unsigned char *)(*((void *)this + 4) + 40);
        if (v1)
        {
          char v1 = *(unsigned char *)(*((void *)this + 5) + 40);
          if (v1)
          {
            char v1 = *(unsigned char *)(*((void *)this + 6) + 40);
            if (v1)
            {
              char v1 = *(unsigned char *)(*((void *)this + 17) + 40);
              if (v1)
              {
                char v1 = *(unsigned char *)(*((void *)this + 18) + 40);
                if (v1)
                {
                  char v1 = *(unsigned char *)(*((void *)this + 15) + 40);
                  if (v1)
                  {
                    char v1 = *(unsigned char *)(*((void *)this + 16) + 40);
                    if (v1)
                    {
                      char v1 = *(unsigned char *)(*((void *)this + 19) + 40);
                      if (v1)
                      {
                        char v1 = *(unsigned char *)(*((void *)this + 20) + 40);
                        if (v1)
                        {
                          char v1 = *(unsigned char *)(*((void *)this + 11) + 40);
                          if (v1)
                          {
                            char v1 = *(unsigned char *)(*((void *)this + 12) + 40);
                            if (v1)
                            {
                              char v1 = *(unsigned char *)(*((void *)this + 13) + 40);
                              if (v1)
                              {
                                char v1 = *(unsigned char *)(*((void *)this + 14) + 40);
                                if (v1)
                                {
                                  char v1 = *(unsigned char *)(*((void *)this + 8) + 40);
                                  if (v1)
                                  {
                                    char v1 = *(unsigned char *)(*((void *)this + 9) + 40);
                                    if (v1)
                                    {
                                      char v1 = *(unsigned char *)(*((void *)this + 10) + 40);
                                      if (v1)
                                      {
                                        char v1 = *(unsigned char *)(*((void *)this + 7) + 40);
                                        if (v1)
                                        {
                                          BOOL v2 = 0;
                                          for (unint64_t i = 0; i != 6; ++i)
                                          {
                                            uint64_t v4 = *((void *)this + i + 21);
                                            if (v4 && !*(unsigned char *)(v4 + 40)) {
                                              break;
                                            }
                                            BOOL v2 = i > 4;
                                          }
                                          char v1 = 0;
                                          if (v2)
                                          {
                                            for (unint64_t j = 0; j != 6; ++j)
                                            {
                                              uint64_t v6 = *((void *)this + j + 28);
                                              if (v6 && !*(unsigned char *)(v6 + 40)) {
                                                break;
                                              }
                                              char v1 = j > 4;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v1 & 1;
}

void EQKit::Font::STIXCollection::characterPropertyLengthForScript(EQKit::Font::STIXCollection *a1@<X0>, int a2@<W1>, const EQKit::Script::Info *a3@<X2>, EQKit::Unicode *a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = (int)a4;
  EQKit::Font::STIXCollection::fontNameForCharacterWithScript(a1, a3, a4, &__s);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
    {
      std::string __p = __s;
      goto LABEL_6;
    }
LABEL_8:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + ++*(void *)(this + 8) = 0;
    goto LABEL_9;
  }
  if (!__s.__r_.__value_.__l.__size_) {
    goto LABEL_8;
  }
  std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
LABEL_6:
  EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)a1, a2, (uint64_t)&__p, v5, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_25586EEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::fontNameForCharacterWithScript(EQKit::Font::STIXCollection *this@<X0>, const EQKit::Script::Info *a2@<X2>, EQKit::Unicode *a3@<X1>, std::string *a4@<X8>)
{
  UTF32Char v5 = a3;
  UTF32Char v8 = EQKit::Font::STIXCollection::lookupChar(this, a3, a2, 0);
  CFCharacterSetRef v9 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v8, 0, a2, 0);
  if (v9
    || v8 != v5
    && (CFCharacterSetRef v9 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v5, 0, a2, 0)) != 0)
  {
    if (*((char *)v9 + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v9 + 2), *((void *)v9 + 3));
    }
    else {
      std::string __p = *(std::string *)((char *)v9 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a4 = __p;
  }
}

void sub_25586EFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::characterPropertyLengthForFont(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 328);
  if (!v6) {
    goto LABEL_9;
  }
  v9[0] = a4;
  v9[1] = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v7 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v6 + 24, (uint64_t)v9);
  UTF32Char v8 = (void *)(v6 + 32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 == v7)
  {
LABEL_9:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + ++*(void *)(this + 8) = 0;
  }
  else
  {
    *(_DWORD *)a5 = *((_DWORD *)v7 + 16);
    *(void *)(a5 + ++*(void *)(this + 8) = v7[9];
  }
}

void sub_25586F0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double EQKit::Font::STIXCollection::lengthMetricWithScriptAndRule(uint64_t a1, unsigned int a2, EQKit::Script::Info *a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 336);
  if (v4) {
    return EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v4 + 384 * a2), a3, a4);
  }
  else {
    return 0.0;
  }
}

double EQKit::Font::STIXCollection::floatMetric(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 336);
  if (v2) {
    return *(double *)(v2 + 8 * a2 + 21504);
  }
  else {
    return 0.0;
  }
}

CTFontRef EQKit::Font::STIXCollection::newFontWithScript(EQKit::Font::STIXCollection *this, CGFloat *a2)
{
  int v4 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)a2) & 3;
  UTF32Char v5 = (const __CTFont ***)((char *)this + 24);
  uint64_t v6 = (const __CTFont ***)((char *)this + 8);
  if (v4 == 1) {
    uint64_t v6 = (const __CTFont ***)((char *)this + 16);
  }
  if (v4 != 2) {
    UTF32Char v5 = v6;
  }
  if (v4 == 3) {
    uint64_t v7 = (const __CTFont ***)((char *)this + 32);
  }
  else {
    uint64_t v7 = v5;
  }
  UTF32Char v8 = *v7;
  if (!v8) {
    return 0;
  }
  CFCharacterSetRef v9 = *v8;
  if (!*v8) {
    return 0;
  }
  CGFloat v10 = a2[2];

  return CTFontCreateCopyWithAttributes(v9, v10, 0, 0);
}

uint64_t EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v5 = EQKit::Script::Info::symbolicFontTraits(a3) & 3;
  uint64_t v6 = (uint64_t *)((char *)this + 32);
  uint64_t v7 = (char *)this + 24;
  UTF32Char v8 = (char *)this + 8;
  if (v5 == 1) {
    UTF32Char v8 = (char *)this + 16;
  }
  if (v5 != 2) {
    uint64_t v7 = v8;
  }
  if (v5 != 3) {
    uint64_t v6 = (uint64_t *)v7;
  }
  uint64_t v9 = *v6;
  if (!*v6 || (CFCharacterSetRef v10 = *(const __CFCharacterSet **)(v9 + 8)) == 0 || !CFCharacterSetIsLongCharacterMember(v10, a2))
  {
    uint64_t v11 = v5 - 1;
    if ((v5 - 1) <= 2)
    {
      uint64_t v12 = 0;
      unint64_t v13 = qword_2558BE588[v11];
      uint64_t v14 = (uint64_t)*(&off_2653C5098 + (int)v11);
      double v15 = (char *)this + 32;
      unint64_t v16 = (char *)this + 8;
      uint64_t v17 = (char *)this + 24;
      double v18 = (char *)this + 16;
      while (1)
      {
        int v19 = *(_DWORD *)(v14 + 4 * v12) & 3;
        uint64_t v20 = (uint64_t *)v18;
        if (v19 != 1)
        {
          uint64_t v20 = (uint64_t *)v15;
          if (v19 != 3)
          {
            if (v19 == 2) {
              uint64_t v20 = (uint64_t *)v17;
            }
            else {
              uint64_t v20 = (uint64_t *)v16;
            }
          }
        }
        uint64_t v9 = *v20;
        if (!*v20) {
          goto LABEL_21;
        }
        CFCharacterSetRef v21 = *(const __CFCharacterSet **)(v9 + 8);
        if (v21) {
          break;
        }
        uint64_t v9 = 0;
LABEL_22:
        if (++v12 >= v13) {
          return v9;
        }
      }
      if (!CFCharacterSetIsLongCharacterMember(v21, a2)) {
        uint64_t v9 = 0;
      }
LABEL_21:
      if (v9) {
        return v9;
      }
      goto LABEL_22;
    }
    return 0;
  }
  return v9;
}

uint64_t EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v5 = EQKit::Script::Info::symbolicFontTraits(a3) & 3;
  uint64_t v6 = (uint64_t *)((char *)this + 80);
  uint64_t v7 = (char *)this + 72;
  UTF32Char v8 = (char *)this + 56;
  if (v5 == 1) {
    UTF32Char v8 = (char *)this + 64;
  }
  if (v5 != 2) {
    uint64_t v7 = v8;
  }
  if (v5 != 3) {
    uint64_t v6 = (uint64_t *)v7;
  }
  uint64_t v9 = *v6;
  if (!*v6 || (CFCharacterSetRef v10 = *(const __CFCharacterSet **)(v9 + 8)) == 0 || !CFCharacterSetIsLongCharacterMember(v10, a2))
  {
    uint64_t v11 = v5 - 1;
    if ((v5 - 1) <= 2)
    {
      uint64_t v12 = 0;
      unint64_t v13 = qword_2558BE588[v11];
      uint64_t v14 = (uint64_t)*(&off_2653C5098 + (int)v11);
      double v15 = (char *)this + 80;
      unint64_t v16 = (char *)this + 56;
      uint64_t v17 = (char *)this + 72;
      double v18 = (char *)this + 64;
      while (1)
      {
        int v19 = *(_DWORD *)(v14 + 4 * v12) & 3;
        uint64_t v20 = (uint64_t *)v18;
        if (v19 != 1)
        {
          uint64_t v20 = (uint64_t *)v15;
          if (v19 != 3)
          {
            if (v19 == 2) {
              uint64_t v20 = (uint64_t *)v17;
            }
            else {
              uint64_t v20 = (uint64_t *)v16;
            }
          }
        }
        uint64_t v9 = *v20;
        if (!*v20) {
          goto LABEL_21;
        }
        CFCharacterSetRef v21 = *(const __CFCharacterSet **)(v9 + 8);
        if (v21) {
          break;
        }
        uint64_t v9 = 0;
LABEL_22:
        if (++v12 >= v13) {
          return v9;
        }
      }
      if (!CFCharacterSetIsLongCharacterMember(v21, a2)) {
        uint64_t v9 = 0;
      }
LABEL_21:
      if (v9) {
        return v9;
      }
      goto LABEL_22;
    }
    return 0;
  }
  return v9;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  int v4 = (char *)this + 136;
  uint64_t v3 = *((void *)this + 17);
  if (!v3) {
    return 0;
  }
  CFCharacterSetRef result = *(const __CFCharacterSet **)(v3 + 8);
  if (!result) {
    return result;
  }
  if (!CFCharacterSetIsLongCharacterMember(result, a2)) {
    return 0;
  }
  char v9 = EQKit::Script::Info::symbolicFontTraits(a3);
  if (*(void *)a3)
  {
    CFCharacterSetRef v10 = (char *)this + 152;
    if ((v9 & 2) != 0) {
      CFCharacterSetRef v10 = (char *)this + 160;
    }
    uint64_t v11 = (char *)this + 104;
    uint64_t v12 = (char *)this + 112;
LABEL_18:
    if ((v9 & 2) != 0) {
      uint64_t v11 = v12;
    }
    if (v9) {
      CFCharacterSetRef v10 = v11;
    }
    goto LABEL_22;
  }
  if (!*((unsigned char *)a3 + 8) || !*((unsigned char *)a3 + 10))
  {
    CFCharacterSetRef v10 = (char *)this + 144;
    if ((v9 & 2) == 0) {
      CFCharacterSetRef v10 = v4;
    }
    uint64_t v11 = (char *)this + 8;
    uint64_t v12 = (char *)this + 24;
    goto LABEL_18;
  }
  CFCharacterSetRef v10 = v4 - 48;
  unint64_t v13 = (char *)this + 120;
  if ((v9 & 2) != 0)
  {
    unint64_t v13 = (char *)this + 128;
    CFCharacterSetRef v10 = (char *)this + 96;
  }
  if ((v9 & 1) == 0) {
    CFCharacterSetRef v10 = v13;
  }
LABEL_22:
  uint64_t v14 = *(void *)v10;
  if (!*(void *)v10) {
    return 0;
  }
  CFCharacterSetRef result = *(const __CFCharacterSet **)(v14 + 8);
  if (result)
  {
    if (CFCharacterSetIsLongCharacterMember(result, a2)) {
      return (const __CFCharacterSet *)v14;
    }
    else {
      return 0;
    }
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, uint64_t a3, const EQKit::Script::Info *a4)
{
  if (a3 == 1) {
    goto LABEL_29;
  }
  if (!*((_DWORD *)a4 + 6))
  {
    uint64_t v15 = *((void *)this + 45);
    if (v15)
    {
      unint64_t v16 = *(_DWORD **)v15;
      uint64_t v17 = *(_DWORD **)(v15 + 8);
      if (v17 != v16)
      {
        unint64_t v18 = v17 - v16;
        do
        {
          unint64_t v19 = v18 >> 1;
          uint64_t v20 = &v16[v18 >> 1];
          UTF32Char v22 = *v20;
          CFCharacterSetRef v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          if (v22 < theChar) {
            unint64_t v16 = v21;
          }
          else {
            unint64_t v18 = v19;
          }
        }
        while (v18);
      }
      if (v16 != v17 && *v16 == theChar)
      {
LABEL_29:
        int v6 = *((_DWORD *)a4 + 3);
        if (v6 == 4 || v6 == 2)
        {
          char v9 = (char *)this + 48;
          uint64_t v8 = *((void *)this + 6);
          if (v8)
          {
            CFCharacterSetRef v10 = *(const __CFCharacterSet **)(v8 + 8);
            if (v10)
            {
              if (CFCharacterSetIsLongCharacterMember(v10, theChar)) {
                return *(const __CFCharacterSet **)v9;
              }
            }
          }
        }
        uint64_t v13 = *((void *)this + 5);
        uint64_t v12 = (char *)this + 40;
        uint64_t v11 = v13;
        if (v13)
        {
          CFCharacterSetRef result = *(const __CFCharacterSet **)(v11 + 8);
          if (!result) {
            return result;
          }
          char v9 = v12;
          if (CFCharacterSetIsLongCharacterMember(result, theChar)) {
            return *(const __CFCharacterSet **)v9;
          }
        }
      }
    }
  }
  return 0;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  if (*((unsigned char *)a3 + 10)) {
    BOOL v3 = *((unsigned char *)a3 + 8) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  char v6 = EQKit::Script::Info::symbolicFontTraits(a3);
  uint64_t v7 = (char *)this + 224;
  if ((v6 & 2) == 0) {
    uint64_t v7 = (char *)this + 168;
  }
  CFCharacterSetRef v8 = (const __CFCharacterSet *)*((void *)v7 + 1);
  if (!v8 || (CFCharacterSetRef v9 = (const __CFCharacterSet *)*((void *)v8 + 1)) == 0)
  {
    if ((v6 & 2) == 0) {
      return 0;
    }
    goto LABEL_16;
  }
  int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v9, a2);
  if (IsLongCharacterMember) {
    CFCharacterSetRef result = v8;
  }
  else {
    CFCharacterSetRef result = 0;
  }
  if ((v6 & 2) != 0 && !IsLongCharacterMember)
  {
LABEL_16:
    uint64_t v12 = *((void *)this + 22);
    if (v12)
    {
      CFCharacterSetRef result = *(const __CFCharacterSet **)(v12 + 8);
      if (result)
      {
        if (CFCharacterSetIsLongCharacterMember(result, a2)) {
          return (const __CFCharacterSet *)v12;
        }
        else {
          return 0;
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::lookupChar(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3, int a4)
{
  BOOL v5 = (a2 & 0xFFFFFFDF) - 65 > 0x19 || (*((_DWORD *)a3 + 3) - 2) >= 3;
  if (!v5 || (a2 - 945) < 0x19 || (a2 - 913) < 0x19) {
    return (uint64_t)a2;
  }
  uint64_t result = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  if (!result)
  {
    uint64_t v9 = *((void *)this + 43);
    uint64_t result = (uint64_t)a2;
    if (v9)
    {
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      uint64_t result = (uint64_t)a2;
      if (v12)
      {
        uint64_t v13 = v10;
        do
        {
          unsigned int v14 = *(_DWORD *)(v11 + 28);
          BOOL v15 = v14 >= a2;
          if (v14 >= a2) {
            unint64_t v16 = (uint64_t *)v11;
          }
          else {
            unint64_t v16 = (uint64_t *)(v11 + 8);
          }
          if (v15) {
            uint64_t v13 = v11;
          }
          uint64_t v11 = *v16;
        }
        while (*v16);
        uint64_t result = (uint64_t)a2;
        if (v13 != v10)
        {
          uint64_t result = (uint64_t)a2;
          if (*(_DWORD *)(v13 + 28) <= a2) {
            uint64_t result = *(unsigned int *)(v13 + 32);
          }
        }
      }
    }
    if (a4)
    {
      uint64_t v17 = *((void *)this + 44);
      if (v17)
      {
        if (result == a2)
        {
          uint64_t v20 = *(void *)(v17 + 8);
          uint64_t v18 = v17 + 8;
          uint64_t v19 = v20;
          if (v20)
          {
            uint64_t v21 = v18;
            do
            {
              unsigned int v22 = *(_DWORD *)(v19 + 28);
              BOOL v23 = v22 >= a2;
              if (v22 >= a2) {
                BOOL v24 = (uint64_t *)v19;
              }
              else {
                BOOL v24 = (uint64_t *)(v19 + 8);
              }
              if (v23) {
                uint64_t v21 = v19;
              }
              uint64_t v19 = *v24;
            }
            while (*v24);
            if (v21 != v18)
            {
              uint64_t result = (uint64_t)a2;
              if (*(_DWORD *)(v21 + 28) <= a2) {
                return *(unsigned int *)(v21 + 32);
              }
              return result;
            }
          }
          return (uint64_t)a2;
        }
      }
    }
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::lookupFontForCh(const __CFCharacterSet **this, UTF32Char a2, uint64_t a3, const EQKit::Script::Info *a4, const FontInfo *a5)
{
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result) {
    return result;
  }
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result) {
    return result;
  }
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript((EQKit::Font::STIXCollection *)this, a2, a3, a4);
  if (!a5 || result)
  {
    if (result) {
      return result;
    }
  }
  else
  {
    CFCharacterSetRef v11 = (const __CFCharacterSet *)a5[1];
    if (v11)
    {
      int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v11, a2);
      CFCharacterSetRef result = (const __CFCharacterSet *)a5;
      if (IsLongCharacterMember) {
        return result;
      }
    }
  }
  CFCharacterSetRef result = (const __CFCharacterSet *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result) {
    return result;
  }
  CFCharacterSetRef v13 = this[22];
  if (!v13) {
    goto LABEL_15;
  }
  CFCharacterSetRef result = (const __CFCharacterSet *)*((void *)v13 + 1);
  if (result)
  {
    if (CFCharacterSetIsLongCharacterMember(result, a2))
    {
      CFCharacterSetRef result = this[22];
      goto LABEL_16;
    }
LABEL_15:
    CFCharacterSetRef result = 0;
  }
LABEL_16:
  if ((a2 - 57344) >> 11 <= 2 && !result)
  {
    return (const __CFCharacterSet *)EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::newAttributedStringWithScript(EQKit::Font::STIXCollection *this, NSString *a2, CGFloat *a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  NSUInteger v4 = [(NSString *)a2 length];
  NSUInteger v5 = v4;
  uint64_t v6 = 4 * v4;
  if (v4 >= 0x40)
  {
    uint64_t v7 = (unsigned int *)malloc_type_malloc(4 * v4, 0x100004052888210uLL);
    if (!v7) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = (unsigned int *)v46;
  }
  unint64_t v43 = 0;
  if (-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, v6, &v43, 2617245952, 0, 0, v5, 0))
  {
    unint64_t v8 = v43;
    unint64_t v9 = v43 >> 2;
    double v42 = 0;
    int v10 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)a3) & 3;
    CFCharacterSetRef v11 = (const FontInfo **)((char *)this + 24);
    uint64_t v12 = (const FontInfo **)((char *)this + 8);
    if (v10 == 1) {
      uint64_t v12 = (const FontInfo **)((char *)this + 16);
    }
    if (v10 != 2) {
      CFCharacterSetRef v11 = v12;
    }
    if (v10 == 3) {
      CFCharacterSetRef v13 = (const FontInfo **)((char *)this + 32);
    }
    else {
      CFCharacterSetRef v13 = v11;
    }
    unint64_t v36 = v8;
    if (v8 < 4)
    {
      unsigned int v14 = 0;
      char v38 = 0;
      NSUInteger v15 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
      if (v15 || v36 < 4 || !v14 || (v38 & 1) != 0)
      {
        uint64_t v21 = 0;
        if (v15 == 0x7FFFFFFFFFFFFFFFLL || v9 <= v15 || !v14) {
          goto LABEL_80;
        }
        v52.location = v15;
        v52.length = v9 - v15;
        _updateAttributedString((id *)&v42, v7, v52, v14, a3[2]);
      }
      else if (*v14)
      {
        CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(*v14, a3[2], 0, 0);
        CTFontRef v17 = CopyWithAttributes;
        if (CopyWithAttributes)
        {
          uint64_t v18 = *MEMORY[0x263F03C68];
          v44[0] = *MEMORY[0x263F039A0];
          v44[1] = v18;
          uint64_t v19 = *MEMORY[0x263EFFB40];
          v45[0] = CopyWithAttributes;
          v45[1] = v19;
          v44[2] = *MEMORY[0x263F03D88];
          v45[2] = &unk_2704646B8;
          uint64_t v20 = [NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:3];
          uint64_t v21 = [objc_alloc(MEMORY[0x263F086A0]) initWithString:a2 attributes:v20];
          CFRelease(v17);
          goto LABEL_80;
        }
      }
      uint64_t v21 = 0;
LABEL_80:
      uint64_t v34 = v42;
      if (!v21 && v42) {
        uint64_t v21 = [(NSMutableAttributedString *)v42 copy];
      }

      goto LABEL_84;
    }
    char v38 = 0;
    unsigned int v22 = 0;
    NSUInteger v23 = 0;
    uint64_t v40 = *v13;
    NSUInteger v24 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v39 = v9;
    while (1)
    {
      uint64_t v25 = (EQKit::Unicode *)v7[v23];
      NSUInteger v26 = v23 + 1;
      uint64_t v27 = v23 + 1 >= v9 ? 0 : EQKit::Unicode::variationSelector((EQKit::Unicode *)v7[v26]);
      UTF32Char v28 = EQKit::Font::STIXCollection::lookupChar(this, v25, (const EQKit::Script::Info *)a3, 0);
      CFCharacterSetRef v29 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v28, v27, (const EQKit::Script::Info *)a3, v40);
      unsigned int v14 = (CTFontRef *)v29;
      if (!v29 || v25 == v28)
      {
        if (!v29)
        {
          unsigned int v14 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)v25, 0, (const EQKit::Script::Info *)a3, v40);
          if (!v14)
          {
            double v31 = EQKit::Unicode::emSize(v25);
            if (v31 <= 0.0)
            {
              if (*((void *)a3 + 4)) {
                operator new();
              }
              if (!v23)
              {
LABEL_72:
                unsigned int v14 = 0;
                if (!v27) {
                  NSUInteger v26 = v23;
                }
                goto LABEL_64;
              }
            }
            else
            {
              if (!v42) {
                double v42 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x263F089B8]);
              }
              +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v31 * a3[2]);
              if (!v23) {
                goto LABEL_72;
              }
            }
            if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_72;
            }
            unsigned int v14 = 0;
            NSUInteger v32 = v23 - v24;
LABEL_55:
            NSUInteger v15 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_58:
            if (v24 != 0x7FFFFFFFFFFFFFFFLL && v22)
            {
              v50.location = v24;
              v50.length = v32;
              _updateAttributedString((id *)&v42, v7, v50, v22, a3[2]);
            }
            if (!v27)
            {
LABEL_66:
              NSUInteger v26 = v23;
              goto LABEL_67;
            }
            goto LABEL_62;
          }
        }
      }
      else
      {
        v7[v23] = v28;
        char v38 = 1;
      }
      if (v28 == 8242) {
        break;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL)
      {
        NSUInteger v15 = v23;
        if (!v27) {
          goto LABEL_66;
        }
      }
      else
      {
        if (v22 != v14)
        {
          NSUInteger v32 = v23 - v24;
          NSUInteger v15 = v23;
          goto LABEL_58;
        }
        NSUInteger v15 = v24;
        unsigned int v14 = v22;
        if (!v27) {
          goto LABEL_66;
        }
      }
LABEL_62:
      if (v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v51.length = v26 - v15;
        v51.location = v15;
        _updateAttributedString((id *)&v42, v7, v51, v14, a3[2]);
        unsigned int v14 = 0;
      }
LABEL_64:
      NSUInteger v15 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_67:
      NSUInteger v23 = v26 + 1;
      NSUInteger v24 = v15;
      unsigned int v22 = v14;
      unint64_t v9 = v39;
      if (v26 + 1 >= v39) {
        goto LABEL_14;
      }
    }
    double v33 = a3[2];
    if (v24 == 0x7FFFFFFFFFFFFFFFLL)
    {
      unsigned int v22 = 0;
    }
    else
    {
      NSUInteger v32 = v23 - v24;
      if (!v22)
      {
LABEL_48:
        if (!v42) {
          double v42 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x263F089B8]);
        }
        if (v33 * 0.0 != 0.0) {
          +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v33 * 0.0);
        }
        v49.location = v23;
        v49.length = 1;
        _updateAttributedString((id *)&v42, v7, v49, v14, a3[2]);
        if (v33 * -0.111111111 != 0.0) {
          +[EQKitAdjustableSpace appendSpaceToAttributedString:v42 ascent:0.0 descent:0.0 width:v33 * -0.111111111];
        }
        unsigned int v14 = 0;
        goto LABEL_55;
      }
      v48.location = v24;
      v48.length = v23 - v24;
      _updateAttributedString((id *)&v42, v7, v48, v22, a3[2]);
    }
    NSUInteger v32 = 0;
    NSUInteger v24 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_48;
  }
  uint64_t v21 = 0;
LABEL_84:
  if (v7 != (unsigned int *)v46) {
    free(v7);
  }
  return v21;
}

void sub_25586FEC8(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1072C40BE800170);
  _Unwind_Resume(a1);
}

void _updateAttributedString(id *a1, const unsigned int *a2, _NSRange a3, CTFontRef *a4, CGFloat a5)
{
  v19[3] = *MEMORY[0x263EF8340];
  if (a3.length)
  {
    NSUInteger length = a3.length;
    NSUInteger location = a3.location;
    if (!*a1) {
      *a1 = objc_alloc_init(MEMORY[0x263F089B8]);
    }
    if (*a4)
    {
      CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(*a4, a5, 0, 0);
      if (CopyWithAttributes)
      {
        CTFontRef v12 = CopyWithAttributes;
        CFCharacterSetRef v13 = (void *)[[NSString alloc] initWithBytes:&a2[location] length:4 * length encoding:2617245952];
        uint64_t v14 = *MEMORY[0x263F03C68];
        v18[0] = *MEMORY[0x263F039A0];
        v18[1] = v14;
        uint64_t v15 = *MEMORY[0x263EFFB40];
        v19[0] = v12;
        v19[1] = v15;
        void v18[2] = *MEMORY[0x263F03D88];
        v19[2] = &unk_2704646D0;
        uint64_t v16 = [NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:3];
        CTFontRef v17 = (void *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:v13 attributes:v16];
        [*a1 appendAttributedString:v17];

        CFRelease(v12);
      }
    }
  }
}

CTFontRef EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript(EQKit::Font::STIXCollection *a1, unsigned int *a2, int a3, EQKit::Script::Info *this, double a5)
{
  char v10 = EQKit::Script::Info::symbolicFontTraits(this);
  char v11 = v10;
  if ((v10 & 2) != 0) {
    uint64_t v12 = (uint64_t)a1 + 224;
  }
  else {
    uint64_t v12 = (uint64_t)a1 + 168;
  }
  if ((v10 & 2) != 0) {
    uint64_t v13 = (uint64_t)a1 + 168;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar(a1, (EQKit::Unicode *)*a2, this, 1);
  unsigned int v15 = v14;
  *a2 = v14;
  if (a3 == 1)
  {
    uint64_t v22 = *((void *)a1 + 39);
    if (!v22)
    {
LABEL_30:
      NSUInteger v26 = (uint64_t **)*((void *)a1 + 47);
      EQKit::Font::STIXCollection::stemStretchKey((CGFloat *)this, (const __CFCharacterSet **)a1, v14, a3, (uint64_t)v29);
      BOOL v27 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v26, (const EQKit::StemStretch::Key *)v29) != a3;
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v29);
      unsigned int v15 = *a2;
      goto LABEL_31;
    }
    CTFontRef v17 = (void *)((char *)a1 + 312);
    uint64_t v18 = (void *)((char *)a1 + 312);
    do
    {
      unsigned int v23 = *(_DWORD *)(v22 + 32);
      BOOL v24 = v23 >= v14;
      if (v23 >= v14) {
        uint64_t v25 = (uint64_t *)v22;
      }
      else {
        uint64_t v25 = (uint64_t *)(v22 + 8);
      }
      if (v24) {
        uint64_t v18 = (void *)v22;
      }
      uint64_t v22 = *v25;
    }
    while (*v25);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_30;
    }
    uint64_t v16 = *((void *)a1 + 36);
    if (!v16) {
      goto LABEL_30;
    }
    CTFontRef v17 = (void *)((char *)a1 + 288);
    uint64_t v18 = (void *)((char *)a1 + 288);
    do
    {
      unsigned int v19 = *(_DWORD *)(v16 + 32);
      BOOL v20 = v19 >= v14;
      if (v19 >= v14) {
        uint64_t v21 = (uint64_t *)v16;
      }
      else {
        uint64_t v21 = (uint64_t *)(v16 + 8);
      }
      if (v20) {
        uint64_t v18 = (void *)v16;
      }
      uint64_t v16 = *v21;
    }
    while (*v21);
  }
  if (v18 == v17 || v14 < *((_DWORD *)v18 + 8)) {
    goto LABEL_30;
  }
  BOOL v27 = 0;
LABEL_31:
  CTFontRef result = EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v12, v15, a3, (uint64_t)this, v27, a5);
  if (!result && (v11 & 2) != 0) {
    return EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v13, *a2, a3, (uint64_t)this, v27, a5);
  }
  return result;
}

void sub_255870200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(uint64_t **a1, const EQKit::StemStretch::Key *a2)
{
  NSUInteger v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  NSUInteger v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5) {
    goto LABEL_2;
  }
  pthread_rwlock_unlock(v4);
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = 0;
  if (!((unsigned int (*)(void))a1[34][2])()) {
    return v6;
  }
  pthread_rwlock_wrlock(v4);
  NSUInteger v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5)
  {
LABEL_2:
    v5[7] = **a1;
    uint64_t v6 = *((unsigned int *)v5 + 12);
  }
  else
  {
    uint64_t v10 = **a1;
    char v11 = a2;
    unint64_t v8 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
    uint64_t v6 = v9;
    *((_DWORD *)v8 + 12) = v9;
    v8[7] = v10;
    if (a1[4] > a1[7]) {
      *((unsigned char *)a1 + 4++*(void *)(this + 8) = 1;
    }
  }
  pthread_rwlock_unlock(v4);
  return v6;
}

void EQKit::Font::STIXCollection::stemStretchKey(CGFloat *this@<X2>, const __CFCharacterSet **a2@<X0>, const __CTFont *a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)this) & 2;
  if (v10) {
    uint64_t v11 = (uint64_t)(a2 + 28);
  }
  else {
    uint64_t v11 = (uint64_t)(a2 + 21);
  }
  uint64_t v12 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v11, a3, a4, (uint64_t)this, 1, 1.79769313e308);
  if (v12) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v10 == 0;
  }
  if (!v13) {
    uint64_t v12 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript((uint64_t)(a2 + 21), a3, a4, (uint64_t)this, 1, 1.79769313e308);
  }
  if (v12)
  {
    EQKit::StemStretch::Key::Key(a5);
  }
  else
  {
    uint64_t v12 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh(a2, (UTF32Char)a3, 0, (const EQKit::Script::Info *)this, 0);
    EQKit::StemStretch::Key::Key(a5);
    if (!v12) {
      return;
    }
  }
  if (*v12)
  {
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(*v12, this[2], 0, 0);
    if (CopyWithAttributes)
    {
      double v15 = EQKit::Font::STIXCollection::ruleThicknessWithScript(a2, this);
      EQKit::StemStretch::Key::keyForFontAndCharacter(CopyWithAttributes, a3, v15, (uint64_t)v16);
      EQKit::StemStretch::Key::operator=(a5, (uint64_t)v16);
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v16);
      CFRelease(CopyWithAttributes);
    }
  }
}

void sub_255870474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)&a9);
  EQKit::StemStretch::Key::~Key(v9);
  _Unwind_Resume(a1);
}

CTFontRef EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  uint64_t v7 = (const __CTFont **)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(a1, a2, a3, a4, a5, a6);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = *v7;
  if (!v8) {
    return 0;
  }
  CGFloat v9 = *(double *)(a4 + 16);

  return CTFontCreateCopyWithAttributes(v8, v9, 0, 0);
}

uint64_t EQKit::Font::STIXCollection::compositeStretchForCharacter(uint64_t a1, unsigned int a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v9 = *(void *)(a1 + 312);
    if (!v9) {
      return 0;
    }
    uint64_t v4 = a1 + 312;
    uint64_t v5 = a1 + 312;
    do
    {
      unsigned int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = (uint64_t *)v9;
      }
      else {
        uint64_t v12 = (uint64_t *)(v9 + 8);
      }
      if (v11) {
        uint64_t v5 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
  }
  else
  {
    if (a3 != 2) {
      return 0;
    }
    uint64_t v3 = *(void *)(a1 + 288);
    if (!v3) {
      return 0;
    }
    uint64_t v4 = a1 + 288;
    uint64_t v5 = a1 + 288;
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = (uint64_t *)v3;
      }
      else {
        unint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  if (v5 == v4) {
    return 0;
  }
  unsigned int v13 = *(_DWORD *)(v5 + 32);
  uint64_t v14 = v5 + 40;
  if (v13 <= a2) {
    return v14;
  }
  else {
    return 0;
  }
}

double EQKit::Font::STIXCollection::accentUnderHAdjustment(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  double v6 = 0.0;
  unsigned int v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  double result = v6;
  if (!v3) {
    return 0.0;
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::accentHAdjustment(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3, double *a4, double *a5)
{
  __int16 v10 = *((_WORD *)a3 + 4);
  char v11 = *((unsigned char *)a3 + 10);
  int v12 = *((_DWORD *)a3 + 3);
  int v13 = *((_DWORD *)a3 + 6);
  uint64_t v14 = *((void *)a3 + 4);
  uint64_t v33 = *(void *)a3;
  __int16 v34 = v10;
  char v35 = v11;
  int v36 = v12;
  CGFloat size = 12.0;
  int v38 = v13;
  uint64_t v39 = v14;
  CFCharacterSetRef result = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, (const EQKit::Script::Info *)&v33, 0);
  if (result)
  {
    CFCharacterSetRef result = *(const __CFCharacterSet **)result;
    if (result)
    {
      CFCharacterSetRef result = CTFontCreateCopyWithAttributes(result, size, 0, 0);
      if (result)
      {
        uint64_t v16 = result;
        EQKit::Font::SlantKey::SlantKey((EQKit::Font::SlantKey *)v32, result, a2);
        double v17 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(*((uint64_t ***)this + 49), (uint64_t)v32);
        double v19 = v18;
        if (v32[0]) {
          BOOL v20 = (char *)[(id)v32[0] UTF8String];
        }
        else {
          BOOL v20 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v20);
        EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)this, 2, (uint64_t)__p, a2, (uint64_t)&v30);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        if (v30)
        {
          double v21 = CTFontGetSize(v16);
          double v17 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)&v30, v21);
        }
        *a4 = v17;
        *a4 = v17 * (*((double *)a3 + 2) / size);
        if (v32[0]) {
          uint64_t v22 = (char *)[(id)v32[0] UTF8String];
        }
        else {
          uint64_t v22 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(v24, v22);
        EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)this, 1, (uint64_t)v24, a2, (uint64_t)&v26);
        int v30 = v26;
        uint64_t v31 = v27;
        if (v25 < 0)
        {
          operator delete(v24[0]);
          if (!v30)
          {
LABEL_19:
            *a5 = v19;
            *a5 = v19 * (*((double *)a3 + 2) / size);
            CFRelease(v16);
            EQKit::Font::SlantKey::~SlantKey(v32);
            return (const __CFCharacterSet *)1;
          }
        }
        else if (!v26)
        {
          goto LABEL_19;
        }
        double v23 = CTFontGetSize(v16);
        double v19 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)&v30, v23);
        goto LABEL_19;
      }
    }
  }
  return result;
}

void sub_2558707D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,const void *a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  EQKit::Font::SlantKey::~SlantKey(&a25);
  _Unwind_Resume(a1);
}

double EQKit::Font::STIXCollection::accentOverHAdjustment(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  double v5 = 0.0;
  unsigned int v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  double result = v5;
  if (!v3) {
    return 0.0;
  }
  return result;
}

double EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  double v5 = (double *)std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
  if (v5)
  {
    *((void *)v5 + 7) = **a1;
    double v6 = v5[5];
LABEL_10:
    pthread_rwlock_unlock(v4);
    return v6;
  }
  pthread_rwlock_unlock(v4);
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  double v6 = 0.0;
  if (((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v4);
    BOOL v7 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
    if (v7)
    {
      unint64_t v8 = (double *)(v7 + 5);
      v7[7] = **a1;
    }
    else
    {
      uint64_t v12 = **a1;
      uint64_t v13 = a2;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v13);
      *(_OWORD *)(v9 + 5) = v11;
      v9[7] = v12;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4++*(void *)(this + 8) = 1;
      }
      unint64_t v8 = (double *)&v11;
    }
    double v6 = *v8;
    goto LABEL_10;
  }
  return v6;
}

BOOL EQKit::Font::STIXCollection::isCharacterStretchableInAxis(uint64_t a1, EQKit::Unicode *a2, int a3, uint64_t *a4)
{
  __int16 v6 = *((_WORD *)a4 + 4);
  char v7 = *((unsigned char *)a4 + 10);
  int v8 = *((_DWORD *)a4 + 3);
  int v9 = *((_DWORD *)a4 + 6);
  uint64_t v10 = a4[4];
  uint64_t v31 = *a4;
  __int16 v32 = v6;
  char v33 = v7;
  int v34 = v8;
  uint64_t v35 = 0x4028000000000000;
  int v36 = v9;
  uint64_t v37 = v10;
  long long v11 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar((EQKit::Font::STIXCollection *)a1, a2, (const EQKit::Script::Info *)&v31, 1);
  unsigned int v12 = v11;
  if (a3 == 1)
  {
    uint64_t v19 = *(void *)(a1 + 312);
    if (!v19) {
      goto LABEL_24;
    }
    uint64_t v14 = a1 + 312;
    uint64_t v15 = a1 + 312;
    do
    {
      unsigned int v20 = *(_DWORD *)(v19 + 32);
      BOOL v21 = v20 >= v11;
      if (v20 >= v11) {
        uint64_t v22 = (uint64_t *)v19;
      }
      else {
        uint64_t v22 = (uint64_t *)(v19 + 8);
      }
      if (v21) {
        uint64_t v15 = v19;
      }
      uint64_t v19 = *v22;
    }
    while (*v22);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_24;
    }
    uint64_t v13 = *(void *)(a1 + 288);
    if (!v13) {
      goto LABEL_24;
    }
    uint64_t v14 = a1 + 288;
    uint64_t v15 = a1 + 288;
    do
    {
      unsigned int v16 = *(_DWORD *)(v13 + 32);
      BOOL v17 = v16 >= v11;
      if (v16 >= v11) {
        double v18 = (uint64_t *)v13;
      }
      else {
        double v18 = (uint64_t *)(v13 + 8);
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      uint64_t v13 = *v18;
    }
    while (*v18);
  }
  if (v15 != v14 && v11 >= *(_DWORD *)(v15 + 32)) {
    return 1;
  }
LABEL_24:
  double v23 = *(uint64_t ***)(a1 + 376);
  EQKit::Font::STIXCollection::stemStretchKey((CGFloat *)&v31, (const __CFCharacterSet **)a1, v11, a3, (uint64_t)v28);
  LODWORD(v23) = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v23, (const EQKit::StemStretch::Key *)v28);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v28);
  if (v23 == a3) {
    return 1;
  }
  v26[0] = v12;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 216), v26, (uint64_t)v28);
  if (v30 - 1 > 0xFD)
  {
    unsigned int v38 = v12;
    EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 272), &v38, (uint64_t)v26);
    return v27 - 1 < 0xFE && v26[12] == a3;
  }
  else
  {
    return v29 == a3;
  }
}

void sub_255870B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

BOOL EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  __int16 v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, (UTF32Char)a2, a3);
  UTF32Char v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == a2) {
      CFCharacterSetRef v8 = 0;
    }
    else {
      CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)a2, 0, a3, 0);
    }
  }
  if (v8 == *((const __CFCharacterSet **)this + 14)
    || v8 == *((const __CFCharacterSet **)this + 13)
    || v8 == *((const __CFCharacterSet **)this + 18)
    || v8 == *((const __CFCharacterSet **)this + 17)
    || v8 == *((const __CFCharacterSet **)this + 20)
    || v8 == *((const __CFCharacterSet **)this + 19))
  {
    __int16 v6 = (const FontInfo *)v8;
  }
  return v6 == (const FontInfo *)v8;
}

BOOL EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  __int16 v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, (UTF32Char)a2, a3);
  UTF32Char v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == a2) {
      CFCharacterSetRef v8 = 0;
    }
    else {
      CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)a2, 0, a3, 0);
    }
  }
  if (v6 != (const FontInfo *)v8) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 46);
  if (!v10) {
    return 1;
  }
  long long v11 = *(_DWORD **)v10;
  unsigned int v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    unint64_t v13 = v12 - v11;
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = &v11[v13 >> 1];
      unsigned int v17 = *v15;
      unsigned int v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        long long v11 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  return v11 == v12 || *v11 != a2;
}

BOOL EQKit::Font::STIXCollection::isCharacterSymmetricWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  __int16 v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, (UTF32Char)a2, a3);
  UTF32Char v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == a2) {
      CFCharacterSetRef v8 = 0;
    }
    else {
      CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)a2, 0, a3, 0);
    }
  }
  if (v6 != (const FontInfo *)v8) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 46);
  if (!v10) {
    return 1;
  }
  long long v11 = *(_DWORD **)v10;
  unsigned int v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    unint64_t v13 = v12 - v11;
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = &v11[v13 >> 1];
      unsigned int v17 = *v15;
      unsigned int v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        long long v11 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  return v11 == v12 || *v11 != a2;
}

CGFloat EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, CGFloat *a3)
{
  int v4 = (int)a2;
  UTF32Char v6 = EQKit::Font::STIXCollection::lookupChar(this, a2, (const EQKit::Script::Info *)a3, 0);
  CFCharacterSetRef v7 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v6, 0, (const EQKit::Script::Info *)a3, 0);
  CGSize v8 = *(CGSize *)(MEMORY[0x263F001A8] + 16);
  boundingRects.origin = (CGPoint)*MEMORY[0x263F001A8];
  boundingRects.CGFloat size = v8;
  if (v7)
  {
    int v9 = *(const __CTFont **)v7;
    if (v9)
    {
      CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v9, a3[2], 0, 0);
      CGGlyph v17 = -1;
      if (CopyWithAttributes)
      {
        long long v11 = CopyWithAttributes;
        if ((v4 - 0x10000) >> 20)
        {
          CFIndex v13 = 1;
          LOWORD(v12) = v4;
        }
        else
        {
          unsigned int v12 = ((v4 + 67043328) >> 10) - 10240;
          characters[1] = v4 & 0x3FF | 0xDC00;
          CFIndex v13 = 2;
        }
        characters[0] = v12;
        if (CTFontGetGlyphsForCharacters(CopyWithAttributes, characters, glyphs, v13))
        {
          CGGlyph v17 = glyphs[0];
          if (glyphs[0] != 0xFFFF)
          {
            CTFontGetBoundingRectsForGlyphs(v11, kCTFontOrientationHorizontal, &v17, &boundingRects, 1);
            boundingRects.origin.CGFloat y = -CGRectGetMaxY(boundingRects);
          }
        }
        CFRelease(v11);
      }
    }
  }
  return boundingRects.origin.x;
}

double EQKit::Font::STIXCollection::ruleThicknessWithScript(const __CFCharacterSet **this, CGFloat *a2)
{
  CFCharacterSetRef v3 = EQKit::Font::STIXCollection::lookupFontForCh(this, 0x2212u, 0, (const EQKit::Script::Info *)a2, 0);
  double v4 = 0.0;
  if (v3)
  {
    double v5 = *(const __CTFont **)v3;
    if (v5)
    {
      CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v5, a2[2], 0, 0);
      if (CopyWithAttributes)
      {
        CGSize v8 = CopyWithAttributes;
        int v9 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)0x2212, CopyWithAttributes, v7);
        if (v9)
        {
          uint64_t v10 = v9;
          if (*((unsigned char *)v9 + 120)) {
            long long v11 = (CGFloat *)((char *)v9 + 88);
          }
          else {
            long long v11 = EQKitPath::computePathBounds((CGFloat *)v9);
          }
          double v4 = v11[3];
          EQKitPath::~EQKitPath(v10);
          MEMORY[0x25A290040]();
        }
        CFRelease(v8);
      }
    }
  }
  return v4;
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  unsigned int v16 = a2;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 48), &v16, (uint64_t)v15);
  if (v15[12] != a3) {
    return 0;
  }
  double v11 = *(double *)(a4 + 16);
  if (v11 == 0.0) {
    return 0;
  }
  unint64_t v12 = EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength((EQKit::Font::STIXCollection::StretchInfo *)v15, a6 * 12.0 / v11, 0.0, a5);
  if (v12 > 5) {
    return 0;
  }
  CFIndex v13 = *(void **)(a1 + 8 * v12);
  if (!v13) {
    return 0;
  }
  if (*v13) {
    return *(void *)(a1 + 8 * v12);
  }
  return 0;
}

uint64_t EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript(EQKit::Font::STIXCollection *a1, EQKit::Unicode *a2, uint64_t a3, CGFloat *this, CGSize *a5, double a6)
{
  char v12 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)this);
  char v13 = v12;
  if ((v12 & 2) != 0) {
    uint64_t v14 = (uint64_t)a1 + 224;
  }
  else {
    uint64_t v14 = (uint64_t)a1 + 168;
  }
  if ((v12 & 2) != 0) {
    uint64_t v15 = (uint64_t)a1 + 168;
  }
  else {
    uint64_t v15 = 0;
  }
  CGSize v35 = (CGSize)*MEMORY[0x263F001B0];
  if (a3 == 2)
  {
    uint64_t v16 = *((void *)a1 + 42);
    if (v16) {
      double v17 = EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v16 + 10752), (const EQKit::Script::Info *)this, 0.0);
    }
    else {
      double v17 = 0.0;
    }
    a6 = v17 + a6;
  }
  uint64_t v18 = EQKit::Font::STIXCollection::lookupChar(a1, a2, (const EQKit::Script::Info *)this, 1);
  uint64_t v19 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v14, v18, a3, (uint64_t)this, 1, a6);
  if (!v19 && (v13 & 2) != 0) {
    uint64_t v19 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v15, v18, a3, (uint64_t)this, 1, a6);
  }
  if (v19)
  {
    uint64_t v20 = EQKit::Font::STIXCollection::compositeStretchForCharacter((uint64_t)a1, v18, a3);
    CGGlyph width_low = -1;
  }
  else
  {
    uint64_t v19 = (uint64_t)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)a1, v18, 0, (const EQKit::Script::Info *)this, 0);
    uint64_t v20 = EQKit::Font::STIXCollection::compositeStretchForCharacter((uint64_t)a1, v18, a3);
    CGGlyph width_low = -1;
    if (!v19)
    {
      double v23 = 0;
      double v21 = 0.0;
LABEL_36:
      double v26 = 0.0;
      double MinX = 0.0;
      if (!v20) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  double v21 = 0.0;
  if (!*(void *)v19)
  {
    LODWORD(v19) = 0;
    double v23 = 0;
    goto LABEL_36;
  }
  CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(*(CTFontRef *)v19, this[2], 0, 0);
  double v23 = CopyWithAttributes;
  if ((v18 - 1114112) >= 0xFFF00000)
  {
    unsigned int v24 = ((v18 + 67043328) >> 10) - 10240;
    WORD1(characters[0].origin.x) = v18 & 0x3FF | 0xDC00;
  }
  else
  {
    LOWORD(v24) = v18;
  }
  LOWORD(characters[0].origin.x) = v24;
  if (!CopyWithAttributes)
  {
    LODWORD(v19) = 0;
    goto LABEL_36;
  }
  if ((v18 - 1114112) < 0xFFF00000) {
    CFIndex v25 = 1;
  }
  else {
    CFIndex v25 = 2;
  }
  if (!CTFontGetGlyphsForCharacters(CopyWithAttributes, (const UniChar *)characters, (CGGlyph *)&glyphs, v25)
    || (CGGlyph width_low = LOWORD(glyphs.width), LOWORD(glyphs.width) == 0xFFFF))
  {
    LODWORD(v19) = 1;
    goto LABEL_36;
  }
  CTFontGetBoundingRectsForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, characters, 1);
  CTFontGetAdvancesForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, &glyphs, 1);
  double v26 = 0.0;
  double MinX = 0.0;
  if (a3 == 2)
  {
    double MinX = CGRectGetMinX(characters[0]);
    double width = glyphs.width;
    double v26 = width - CGRectGetWidth(characters[0]) - MinX;
    double v21 = -CGRectGetMinY(characters[0]);
  }
  LODWORD(v19) = 1;
  if (v20)
  {
LABEL_37:
    EQKitCompositeGlyph::EQKitCompositeGlyph(characters, this, a3, v20);
    uint64_t v20 = (uint64_t)EQKitCompositeGlyph::createPathWithLength((EQKitCompositeGlyph *)characters, a6, &v35);
    EQKitCompositeGlyph::~EQKitCompositeGlyph((EQKitCompositeGlyph *)characters);
  }
LABEL_38:
  char v29 = v19 ^ 1;
  if (v20) {
    char v29 = 1;
  }
  if ((v29 & 1) == 0)
  {
    unsigned __int8 v30 = (uint64_t **)*((void *)a1 + 48);
    EQKit::Font::STIXCollection::stemStretchKey(this, (const __CFCharacterSet **)a1, (const __CTFont *)v18, a3, (uint64_t)characters);
    EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(v30, (const EQKit::StemStretch::Key *)characters, &glyphs);
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)characters);
    if (*(void *)&glyphs.width && **(_DWORD **)&glyphs.width == a3) {
      uint64_t v20 = (uint64_t)EQKit::StemStretch::Glyph::newPathWithLength(*(EQKit::StemStretch::Glyph **)&glyphs.width, a6, &v35);
    }
    else {
      uint64_t v20 = 0;
    }
    if (*(void *)&glyphs.height) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&glyphs.height);
    }
  }
  if (v20)
  {
    *a5 = v35;
    a5[1].double width = MinX;
    a5[1].CGFloat height = v26;
    a5[2].double width = v21;
  }
  if (v19) {
    CFRelease(v23);
  }
  return v20;
}

void sub_255871498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::SizeVariant::SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this, const EQKitCacheLRUCounter *a2)
{
}

void sub_255871598(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit4Font14STIXCollection11SizeVariantC2ERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, UTF32Char *a2, uint64_t a3)
{
  return 1;
}

double EQKit::Font::STIXCollection::StretchInfo::setupForCharacterWithVariant(uint64_t a1, UTF32Char theChar, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = 0;
  unint64_t v8 = 0;
  v36[11] = *MEMORY[0x263EF8340];
  int v9 = &v35;
  uint64_t v10 = (double *)MEMORY[0x263F001B0];
  do
  {
    long long v11 = *(_OWORD *)v10;
    *(_OWORD *)int v9 = *(_OWORD *)v10;
    char v12 = *(CTFontRef **)(a3 + 8 * v6);
    if (v12)
    {
      CFCharacterSetRef v13 = v12[1];
      if (v13)
      {
        if (CFCharacterSetIsLongCharacterMember(v13, theChar))
        {
          if (*v12)
          {
            uint64_t v15 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)(unsigned __int16)theChar, *v12, v14);
            if (v15)
            {
              uint64_t v16 = v15;
              if (*((unsigned char *)v15 + 120)) {
                double v17 = (CGFloat *)((char *)v15 + 88);
              }
              else {
                double v17 = EQKitPath::computePathBounds((CGFloat *)v15);
              }
              *(_OWORD *)int v9 = *((_OWORD *)v17 + 1);
              v7 |= 1 << v6;
              ++v8;
              EQKitPath::~EQKitPath(v16);
              MEMORY[0x25A290040](v18, 0x1070C40036CD406, v19, v20);
            }
          }
        }
      }
    }
    ++v6;
    v9 += 16;
  }
  while (v6 != 6);
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 4++*(void *)(this + 8) = 0;
  if (v8 > 1)
  {
    uint64_t v21 = 0;
    double v22 = *v10;
    double v23 = v10[1];
    unsigned int v24 = (double *)v36;
    char v25 = 1;
    double v26 = *v10;
    double v27 = v23;
    do
    {
      if ((v7 >> v21))
      {
        double v22 = *(v24 - 1);
        double v23 = *v24;
        if (v25)
        {
          double v27 = *v24;
          double v26 = *(v24 - 1);
        }
        char v25 = 0;
      }
      ++v21;
      v24 += 2;
    }
    while (v21 != 6);
    *(double *)&long long v11 = v22 - v26;
    double v28 = v23 - v27;
    if (*(double *)&v11 <= 0.0 || v28 <= 0.0)
    {
      if (*(double *)&v11 <= 0.0 && v28 > 0.0) {
        int v30 = 2;
      }
      else {
        int v30 = *(double *)&v11 > 0.0;
      }
      BOOL v29 = *(double *)&v11 > 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0);
      if (*(double *)&v11 <= 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0)) {
        return *(double *)&v11;
      }
    }
    else
    {
      BOOL v29 = *(double *)&v11 > v28;
      if (*(double *)&v11 > v28) {
        int v30 = 1;
      }
      else {
        int v30 = 2;
      }
    }
    uint64_t v31 = 0;
    *(_DWORD *)(a1 + 4++*(void *)(this + 8) = v30;
    *(unsigned char *)(a1 + 52) = v7;
    __int16 v32 = &v35;
    do
    {
      char v33 = v32 + 8;
      if (v29) {
        char v33 = v32;
      }
      *(void *)&long long v11 = *(void *)v33;
      *(void *)(a1 + v31) = *(void *)v33;
      v31 += 8;
      v32 += 16;
    }
    while (v31 != 48);
  }
  return *(double *)&v11;
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = a2;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + ++*(void *)(this + 64) = v7;
  if (*(void *)(a1 + 32) > a2) {
    *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 1;
  }
  pthread_rwlock_unlock(v6);

  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune((uint64_t **)a1);
}

void EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this)
{
  for (uint64_t i = 0; i != 48; i += 8)
  {
    CFCharacterSetRef v3 = *(EQKit::Font::STIXCollection::FontInfo **)((char *)this + i);
    if (v3)
    {
      EQKit::Font::STIXCollection::FontInfo::~FontInfo(v3);
      MEMORY[0x25A290040]();
      *(void *)((char *)this + i) = 0;
    }
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      std::string __p = 0;
      double v27 = 0;
      double v28 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = v5 - v6[10];
          int v9 = *((_DWORD *)v6 + 4);
          if (v7 >= v28)
          {
            uint64_t v10 = __p;
            uint64_t v11 = (v7 - __p) >> 4;
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 60) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v13 = v28 - __p;
            if ((v28 - __p) >> 3 > v12) {
              unint64_t v12 = v13 >> 3;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)&v28, v14);
              uint64_t v10 = __p;
              unint64_t v7 = v27;
            }
            else
            {
              uint64_t v15 = 0;
            }
            uint64_t v16 = &v15[16 * v11];
            *(_DWORD *)uint64_t v16 = v9;
            *((void *)v16 + 1) = v8;
            double v17 = v16;
            if (v7 != v10)
            {
              do
              {
                *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
                v17 -= 16;
                v7 -= 16;
              }
              while (v7 != v10);
              uint64_t v10 = __p;
            }
            unint64_t v7 = v16 + 16;
            std::string __p = v17;
            double v28 = &v15[16 * v14];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v7 = v9;
            *((void *)v7 + 1) = v8;
            v7 += 16;
          }
          double v27 = v7;
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        uint64_t v18 = (uint64_t)__p;
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v18 = 0;
      }
      unint64_t v19 = 126 - 2 * __clz((uint64_t)&v7[-v18] >> 4);
      BOOL v29 = EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU;
      if (v7 == (char *)v18) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v19;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v18, (int *)v7, (uint64_t (**)(int *, int *))&v29, v20, 1);
      uint64_t v21 = __p;
      unint64_t v22 = (v27 - __p) >> 4;
      double v23 = a1[8];
      unint64_t v24 = v22 - (void)v23;
      if (v22 > (unint64_t)v23)
      {
        uint64_t v25 = 16 * (void)v23;
        do
        {
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]))
          {
            std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]);
          }
          v25 += 16;
          --v24;
        }
        while (v24);
        uint64_t v21 = __p;
      }
      *((unsigned char *)a1 + 4++*(void *)(this + 8) = 0;
      if (v21) {
        operator delete(v21);
      }
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_255871B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength(EQKit::Font::STIXCollection::StretchInfo *this, double a2, double a3, int a4)
{
  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  while (((*((unsigned __int8 *)this + 52) >> v4) & 1) == 0)
  {
    uint64_t v9 = v7;
    double v8 = v5;
LABEL_10:
    ++v4;
    double v5 = v8;
    uint64_t v7 = v9;
    if (v4 == 6) {
      goto LABEL_11;
    }
  }
  double v8 = *((double *)this + v4);
  if (v8 + a3 <= a2)
  {
    uint64_t v9 = v7;
    double v8 = v5;
    goto LABEL_8;
  }
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v9 = v4;
LABEL_8:
    uint64_t v6 = v4;
    goto LABEL_10;
  }
  uint64_t v9 = v4;
  uint64_t v6 = v4;
  if (vabdd_f64(v5, a2) >= vabdd_f64(v8, a2)) {
    goto LABEL_10;
  }
  uint64_t v9 = v7;
  uint64_t v6 = v4;
LABEL_11:
  if (a4) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v9 == 0x7FFFFFFFFFFFFFFFLL) {
    return v10;
  }
  else {
    return v9;
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup@<X0>(uint64_t **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 4++*(void *)(this + 8) = 0;
  *(unsigned char *)(a3 + 52) = -1;
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
  if (!v7)
  {
    pthread_rwlock_unlock(v6);
    int v20 = 0;
    char v21 = -1;
    uint64_t v22 = 0;
    uint64_t result = ((uint64_t (*)(void))a1[34][2])();
    if (!result) {
      return result;
    }
    pthread_rwlock_wrlock(v6);
    uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
    if (v11)
    {
      unint64_t v12 = (long long *)(v11 + 3);
      v11[10] = **a1;
      if (v11 + 3 == (uint64_t *)a3) {
        return pthread_rwlock_unlock(v6);
      }
      *(_DWORD *)(a3 + 4++*(void *)(this + 8) = *((_DWORD *)v11 + 18);
      uint64_t v13 = (char *)v11 + 76;
    }
    else
    {
      uint64_t v22 = **a1;
      double v23 = a2;
      unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v23);
      if (v14 + 3 != (void *)v19)
      {
        *((_DWORD *)v14 + 1++*(void *)(this + 8) = v20;
        *((unsigned char *)v14 + 76) = v21;
        long long v16 = v19[1];
        long long v15 = v19[2];
        *(_OWORD *)(v14 + 3) = v19[0];
        *(_OWORD *)(v14 + 5) = v16;
        *(_OWORD *)(v14 + 7) = v15;
      }
      v14[10] = v22;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4++*(void *)(this + 8) = 1;
      }
      if (v19 == (_OWORD *)a3) {
        return pthread_rwlock_unlock(v6);
      }
      uint64_t v13 = &v21;
      *(_DWORD *)(a3 + 4++*(void *)(this + 8) = v20;
      unint64_t v12 = v19;
    }
    *(unsigned char *)(a3 + 52) = *v13;
    long long v17 = *v12;
    long long v18 = v12[2];
    *(_OWORD *)(a3 + 16) = v12[1];
    *(_OWORD *)(a3 + 32) = v18;
    *(_OWORD *)a3 = v17;
    return pthread_rwlock_unlock(v6);
  }
  v7[10] = **a1;
  if (v7 + 3 != (uint64_t *)a3)
  {
    *(_DWORD *)(a3 + 4++*(void *)(this + 8) = *((_DWORD *)v7 + 18);
    *(unsigned char *)(a3 + 52) = *((unsigned char *)v7 + 76);
    long long v8 = *(_OWORD *)(v7 + 3);
    long long v9 = *(_OWORD *)(v7 + 7);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v7 + 5);
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)a3 = v8;
  }

  return pthread_rwlock_unlock(v6);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  unsigned int v62 = 8730;
  EQKitPath::EQKitPath((EQKitPath *)&v58, 0);
  memset(&v57, 0, sizeof(v57));
  unint64_t v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, double))(*(void *)a1 + 88))(a1, &v62, 2, a2, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14, v62);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    if (v58)
    {
      long long v15 = (__CFString *)CTFontCopyPostScriptName(v14);
      std::string::__assign_external(&v57, (const std::string::value_type *)[(__CFString *)v15 UTF8String]);
      CFRelease(v15);
      long long v16 = v61 ? (CGFloat *)v60 : EQKitPath::computePathBounds((CGFloat *)&v58);
      v63.origin.CGFloat x = *v16;
      v63.origin.CGFloat y = v16[1];
      CGFloat v17 = v16[2];
      CGFloat v18 = v16[3];
      v63.size.double width = v17;
      v63.size.CGFloat height = v18;
      CGFloat MaxY = CGRectGetMaxY(v63);
      *(CGFloat *)a4 = v17;
      *(CGFloat *)(a4 + ++*(void *)(this + 8) = v18;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(CGFloat *)(a4 + 32) = MaxY;
      if (v58) {
        goto LABEL_15;
      }
    }
    CFRelease(v14);
  }
  else if (v58)
  {
    unint64_t v14 = 0;
    goto LABEL_15;
  }
  unint64_t v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 96))(a1, v62, 2, a2, a4, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    CFRelease(v14);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      v57.__r_.__value_.__l.__size_ = 22;
      int v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&v57.__r_.__value_.__s + 23) = 22;
      int v20 = &v57;
    }
    strcpy((char *)v20, "STIXSizeOneSym-Regular");
    unsigned int v62 = 9143;
    unint64_t v14 = CTFontCreateWithName(@"STIXSizeOneSym-Regular", *(CGFloat *)(a2 + 16), 0);
  }
LABEL_15:
  if (v61) {
    char v21 = (CGFloat *)v60;
  }
  else {
    char v21 = EQKitPath::computePathBounds((CGFloat *)&v58);
  }
  double v22 = *v21;
  double v23 = v21[1];
  CGFloat v24 = v21[2];
  CGFloat v25 = v21[3];
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = v57;
  }
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 4, (uint64_t)&v53, v62, (uint64_t)v54);
  if (v14)
  {
    double Size = CTFontGetSize(v14);
    double v27 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, Size);
  }
  else
  {
    double v27 = 0.0;
  }
  *a3 = v27;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = v57;
  }
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 5, (uint64_t)&v52, v62, (uint64_t)v54);
  if (v14)
  {
    double v28 = CTFontGetSize(v14);
    double v29 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v28);
  }
  else
  {
    double v29 = 0.0;
  }
  a3[1] = v29;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v51, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = v57;
  }
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 6, (uint64_t)&v51, v62, (uint64_t)v54);
  if (v14)
  {
    double v30 = CTFontGetSize(v14);
    double v31 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v30);
  }
  else
  {
    double v31 = 0.0;
  }
  a3[2] = v31;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = v57;
  }
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 7, (uint64_t)&v50, v62, (uint64_t)v54);
  if (v14)
  {
    double v32 = CTFontGetSize(v14);
    double v33 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v32);
  }
  else
  {
    double v33 = 0.0;
  }
  a3[3] = v33;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v57;
  }
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 8, (uint64_t)&v49, v62, (uint64_t)v54);
  if (v14)
  {
    double v34 = CTFontGetSize(v14);
    double v35 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v34);
  }
  else
  {
    double v35 = 0.0;
  }
  a3[4] = v35;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  *a3 = *(double *)(a4 + 32) + *a3;
  v64.origin.CGFloat x = v22;
  v64.origin.CGFloat y = v23;
  v64.size.double width = v24;
  v64.size.CGFloat height = v25;
  a3[1] = a3[1] - CGRectGetMinX(v64);
  v65.origin.CGFloat x = v22;
  v65.origin.CGFloat y = v23;
  v65.size.double width = v24;
  v65.size.CGFloat height = v25;
  a3[2] = a3[2] - CGRectGetMinX(v65);
  if (v14) {
    CFRelease(v14);
  }
  double v36 = a3[3];
  double v37 = a3[4];
  EQKitPath::findStemForEdge(&v58, 1, (uint64_t)v54);
  if (v54[0])
  {
    EQKitPath::extractPath((EQKitPath *)&v58);
    uint64_t v38 = v59 + 16 * v55;
    double v40 = *(double *)v38;
    uint64_t v39 = *(void *)(v38 + 8);
    EQKitPath::extractPath((EQKitPath *)&v58);
    double v41 = *(double *)(v59 + 16 * v56);
    if (v40 >= v41) {
      double v42 = *(double *)(v59 + 16 * v56);
    }
    else {
      double v42 = v40;
    }
    if (v40 >= v41) {
      double v41 = v40;
    }
    double v43 = v36 + v37 + a6 + v41 - v42;
    uint64_t v44 = v39;
    double v45 = a7;
    EQKitPath::appendSubpathRect((EQKitPath *)&v58, *(CGRect *)&v42);
  }
  CGMutablePathRef Mutable = CGPathCreateMutable();
  memset(&v48, 0, sizeof(v48));
  CGAffineTransformMakeTranslation(&v48, -v22, -v23);
  EQKitPath::appendToCGPath((uint64_t *)&v58, Mutable, &v48, 0);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  EQKitPath::~EQKitPath((EQKitPath *)&v58);
  return Mutable;
}

void sub_2558723BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  EQKitPath::~EQKitPath((EQKitPath *)&a61);
  _Unwind_Resume(a1);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2, double a3, double a4, double *a5)
{
  v19.origin.CGFloat x = (*(double (**)(EQKit::Font::STIXCollection *, uint64_t, const EQKit::Script::Info *))(*(void *)this + 136))(this, 10188, a2);
  CGFloat MaxY = CGRectGetMaxY(v19);
  long long v16 = *MEMORY[0x263F001B0];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v10 = (const CGPath *)(*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, uint64_t, const EQKit::Script::Info *, long long *, double))(*(void *)this + 96))(this, 10188, 2, a2, &v16, a3 - MaxY);
  EQKitPath::EQKitPath((EQKitPath *)v15, v10);
  CGPathRelease(v10);
  EQKitPath::findStemForEdge(v15, 2, (uint64_t)v14);
  if (v14[0])
  {
    CGMutablePathRef Mutable = CGPathCreateMutable();
    long long v13 = *MEMORY[0x263F00148];
    EQKitPath::appendToCGPathWithModifiedStem((uint64_t)v15, Mutable, (double *)&v13, 0, (uint64_t)v14, a4);
  }
  else
  {
    CGMutablePathRef Mutable = 0;
  }
  EQKitPath::~EQKitPath((EQKitPath *)v15);
  return Mutable;
}

void sub_2558725E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

EQKit::Font::SlantKey *EQKit::Font::SlantKey::SlantKey(EQKit::Font::SlantKey *this, CTFontRef font, int a3)
{
  *((void *)this + 1) = 0;
  *((_WORD *)this + ++*(void *)(this + 8) = -1;
  *((_DWORD *)this + 5) = a3;
  if (font)
  {
    if ((a3 - 0x10000) >> 20)
    {
      CFIndex v6 = 1;
      LOWORD(v5) = a3;
    }
    else
    {
      unsigned int v5 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      CFIndex v6 = 2;
    }
    characters[0] = v5;
    if (CTFontGetGlyphsForCharacters(font, characters, glyphs, v6)) {
      *((_WORD *)this + ++*(void *)(this + 8) = glyphs[0];
    }
    *(void *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

void EQKit::Font::SlantKey::~SlantKey(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

BOOL EQKit::Font::SlantKey::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  CFStringRef v2 = *(const __CFString **)a1;
  CFStringRef v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3) {
    return 1;
  }
  BOOL result = 0;
  if (v2 && v3) {
    return CFEqual(v2, v3);
  }
  return result;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = (void *)(a1 + 8);
  CFStringRef v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unsigned int v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = EQKit::Font::CharacterProperty::Map::Key::operator<((uint64_t)(v3 + 4), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      unsigned int v5 = v3;
    }
    CFStringRef v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || EQKit::Font::CharacterProperty::Map::Key::operator<(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

BOOL EQKit::Font::CharacterProperty::Map::Key::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4) {
    return 1;
  }
  return v3 == v4
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 8), (void **)(a2 + 8)) & 0x80u) != 0;
}

void EQKit::Font::CharacterProperty::Map::~Map(char **this)
{
}

void std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

EQKit::Font::STIXCollection::FontInfo *EQKit::Font::STIXCollection::FontInfo::FontInfo(EQKit::Font::STIXCollection::FontInfo *this, CFStringRef name)
{
  *(_OWORD *)((char *)this + ++*(void *)(this + 8) = 0u;
  int v4 = (CFCharacterSetRef *)((char *)this + 8);
  unsigned int v5 = (std::string *)((char *)this + 16);
  *((unsigned char *)this + ++*(void *)(this + 40) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  BOOL v6 = CTFontCreateWithName(name, 12.0, 0);
  *(void *)this = v6;
  if (v6)
  {
    uint64_t v7 = (__CFString *)CTFontCopyPostScriptName(v6);
    if (v7)
    {
      *((unsigned char *)this + ++*(void *)(this + 40) = CFEqual(name, v7);
      std::string::__assign_external(v5, (const std::string::value_type *)[(__CFString *)v7 UTF8String]);
      CFRelease(v7);
    }
    *int v4 = CTFontCopyCharacterSet(*(CTFontRef *)this);
  }
  return this;
}

void sub_2558729BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::FontInfo::~FontInfo(EQKit::Font::STIXCollection::FontInfo *this)
{
  CFStringRef v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(void *)this = 0;
  }
  int v3 = (const void *)*((void *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 1) = 0;
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, a2[1]);
    EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)(a2 + 5));
    operator delete(a2);
  }
}

void std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:ne180100]<EQKit::StemStretch::Glyph,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_255872B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:ne180100]((EQKit::StemStretch::Glyph **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25A290040);
}

EQKit::StemStretch::Glyph *std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::__on_zero_shared(uint64_t a1)
{
  BOOL result = *(EQKit::StemStretch::Glyph **)(a1 + 24);
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x25A290040);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

EQKit::StemStretch::Glyph *std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:ne180100](EQKit::StemStretch::Glyph **a1, EQKit::StemStretch::Glyph *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x25A290040);
  }
  return result;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(this + 40) = 1065353216;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_2558BE170;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_255872CA8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  CFStringRef v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFStringRef v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<EQKit::StemStretch::Key const,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,0>((EQKit::StemStretch::Key *)(v2 + 2));
      operator delete(v2);
      CFStringRef v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<EQKit::StemStretch::Key const,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,0>(EQKit::StemStretch::Key *this)
{
  CFStringRef v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  EQKit::StemStretch::Key::~Key(this);
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(void *a1, uint64_t a2)
{
  CFHashCode v4 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v4 = CFHash((CFTypeRef)v4);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(void *)&v5) {
      CFHashCode v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v6;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::StemStretch::Key::operator==((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
  unint64_t v10 = v8 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8 ^ v9;
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  double v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *double v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  long long v15 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:ne180100](v26, 0);
  return v15;
}

void sub_2558730F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++*(void *)(this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *CFHashCode v8 = 0;
  v8[1] = a2;
  uint64_t result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25587317C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<EQKit::StemStretch::Key const,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,0>((EQKit::StemStretch::Key *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(this + 40) = 1065353216;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_2558BE170;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_255873260(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(this + 40) = 1065353216;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_2558BE170;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_255873368(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (const void **)*v2;
      EQKit::Font::SlantKey::~SlantKey(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  CFHashCode v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        CFHashCode v8 = (uint64_t *)v5;
        unsigned int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        CFHashCode v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        CFHashCode v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFHashCode v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    CFHashCode v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100]((uint64_t *)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CFHashCode v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(void *)(this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  uint64_t result = EQKit::Font::CompositeStretch::CompositeStretch((void *)v6 + 5);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_255873524(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)(v2 + 40));
    }
    operator delete((void *)v2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  CFHashCode v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        CFHashCode v8 = (uint64_t *)v5;
        unsigned int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        CFHashCode v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        CFHashCode v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFHashCode v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    CFHashCode v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100]((uint64_t *)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CFHashCode v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(void *)(this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  uint64_t result = EQKit::Font::CompositeStretch::CompositeStretch((void *)v6 + 5);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2558736BC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(uint64_t a1)
{
  return a1;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(uint64_t a1)
{
  return a1;
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(uint64_t a1)
{
  return a1;
}

BOOL EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>(uint64_t *a1, const EQKit::StemStretch::Key *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (EQKit::StemStretch::Key *)&v10[40 * v4];
  long long v15 = v14;
  unint64_t v16 = &v10[40 * v9];
  EQKit::StemStretch::Key::Key(v14, a2);
  *((void *)v14 + 4) = *((void *)a2 + 4);
  long long v15 = (EQKit::StemStretch::Key *)((char *)v15 + 40);
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2558738AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(a7 + v11 - 40), (const EQKit::StemStretch::Key *)(a3 + v11 - 40));
      *(void *)(a7 + v11 - ++*(void *)(this + 8) = *(void *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2558739C0(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 40)
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const EQKit::StemStretch::Key *, uint64_t))
{
  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    char v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (const EQKit::StemStretch::Key *)a1;
      do
      {
        unint64_t v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v13, v9);
          uint64_t v14 = *((void *)v8 + 9);
          uint64_t v10 = v7;
          while (1)
          {
            EQKit::StemStretch::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(void *)(a1 + v10 + 72) = *(void *)(a1 + v10 + 32);
            if (!v10) {
              break;
            }
            char v11 = (*a3)((const EQKit::StemStretch::Key *)v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          EQKit::StemStretch::Key::operator=(v12, (uint64_t)v13);
          *(void *)(v12 + 32) = v14;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v13);
        }
        char v5 = (const EQKit::StemStretch::Key *)((char *)v9 + 40);
        v7 += 40;
        uint64_t v8 = v9;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_255873F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const EQKit::StemStretch::Key *, uint64_t))
{
  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    uint64_t v4 = a1;
    char v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if ((*a3)(v5, v4))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v8, v7);
          uint64_t v9 = *(void *)(v4 + 72);
          do
          {
            EQKit::StemStretch::Key::operator=(v4 + 40, v4);
            *(void *)(v4 + 72) = *(void *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)((const EQKit::StemStretch::Key *)v8, v4) & 1) != 0);
          EQKit::StemStretch::Key::operator=(v4 + 40, (uint64_t)v8);
          *(void *)(v4 + 72) = v9;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v8);
        }
        char v5 = (const EQKit::StemStretch::Key *)((char *)v7 + 40);
        uint64_t v4 = (uint64_t)v7;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v7 + 40) != a2);
    }
  }
}

void sub_255874030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, uint64_t a3, uint64_t (**a4)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)((EQKit::StemStretch::Key *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a2, a3);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v10 = a1;
    uint64_t v11 = (uint64_t)a2;
    goto LABEL_9;
  }
  if (!result)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)a2);
    if (!(*a4)((EQKit::StemStretch::Key *)a3, a2)) {
      return 1;
    }
    uint64_t v10 = a2;
    uint64_t v11 = a3;
LABEL_9:
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, a3);
  return 1;
}

EQKit::StemStretch::Key *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(unsigned char *, EQKit::StemStretch::Key *))
{
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
  uint64_t v11 = *((void *)a1 + 4);
  if ((*a3)(v10, (EQKit::StemStretch::Key *)(a2 - 40)))
  {
    char v6 = a1;
    do
      char v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (EQKit::StemStretch::Key *)((char *)a1 + 40);
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = (*a3)(v10, v7);
      uint64_t v7 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v6, a2);
    do
      char v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  if ((EQKit::StemStretch::Key *)((char *)v6 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v6 - 40);
    *((void *)a1 + 4) = *((void *)v6 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v6 - 40, (uint64_t)v10);
  *((void *)v6 - 1) = v11;
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v10);
  return v6;
}

void sub_255874278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(char *, unsigned char *))
{
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, a1);
  uint64_t v6 = 0;
  uint64_t v13 = *((void *)a1 + 4);
  do
  {
    char v7 = (*a3)((char *)a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  int v8 = (char *)a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if ((unint64_t)v8 >= a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)((char *)a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)((char *)a2, v12));
  }
  uint64_t v9 = (EQKit::StemStretch::Key *)((char *)a1 + v6);
  if ((unint64_t)v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v9, v10);
      do
        uint64_t v9 = (EQKit::StemStretch::Key *)((char *)v9 + 40);
      while (((*a3)((char *)v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)((char *)v10, v12));
    }
    while ((unint64_t)v9 < v10);
  }
  if ((EQKit::StemStretch::Key *)((char *)v9 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v9 - 40);
    *((void *)a1 + 4) = *((void *)v9 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v9 - 40, (uint64_t)v12);
  *((void *)v9 - 1) = v13;
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v12);
  return (uint64_t)v9 - 40;
}

void sub_255874404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  BOOL v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((EQKit::StemStretch::Key *)((char *)a2 - 40), (EQKit::StemStretch::Key *)a1)) {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100]((EQKit::StemStretch::Key *)a1, (uint64_t)a2 - 40);
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (uint64_t)a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (EQKit::StemStretch::Key *)(a1 + 120), (uint64_t)a2 - 40, a3);
      return v6;
    default:
      char v7 = (EQKit::StemStretch::Key *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), a1 + 80, a3);
      int v8 = (EQKit::StemStretch::Key *)(a1 + 120);
      if ((EQKit::StemStretch::Key *)(a1 + 120) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    char v7 = v8;
    v9 += 40;
    int v8 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
    if (v8 == a2) {
      return 1;
    }
  }
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v8);
  uint64_t v16 = *((void *)v8 + 4);
  uint64_t v11 = v9;
  while (1)
  {
    EQKit::StemStretch::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(void *)(a1 + v11 + 152) = *(void *)(a1 + v11 + 112);
    if (v11 == -80) {
      break;
    }
    char v12 = (*a3)((EQKit::StemStretch::Key *)v15, (EQKit::StemStretch::Key *)(a1 + v11 + 40));
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  uint64_t v13 = a1;
LABEL_12:
  EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
  *(void *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v15);
    goto LABEL_14;
  }
  BOOL v6 = (EQKit::StemStretch::Key *)((char *)v8 + 40) == a2;
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v15);
  return v6;
}

void sub_255874638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](EQKit::StemStretch::Key *a1, uint64_t a2)
{
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v5, a1);
  EQKit::StemStretch::Key::operator=((uint64_t)a1, a2);
  EQKit::StemStretch::Key::operator=(a2, (uint64_t)v5);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v5);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
}

void sub_2558746D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t a4, uint64_t (**a5)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((EQKit::StemStretch::Key *)a4, a3))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
      {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, EQKit::StemStretch::Key *a4, uint64_t a5, uint64_t (**a6)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((EQKit::StemStretch::Key *)a5, a4))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
        {
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)a2);
        }
      }
    }
  }
}

EQKit::StemStretch::Key *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = (EQKit::StemStretch::Key *)((char *)a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, v12);
        char v12 = (const EQKit::StemStretch::Key *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((EQKit::StemStretch::Key *)v6 != a3)
    {
      uint64_t v14 = (EQKit::StemStretch::Key *)v6;
      do
      {
        if ((*a4)((uint64_t)v14, (uint64_t)a1))
        {
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v14, (uint64_t)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, a1);
        }
        uint64_t v14 = (EQKit::StemStretch::Key *)((char *)v14 + 40);
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 41)
    {
      unint64_t v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return (EQKit::StemStretch::Key *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, const EQKit::StemStretch::Key *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 40 * v10;
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        int64_t v10 = v12;
      }
      if (((*a2)(v11, (uint64_t)v5) & 1) == 0)
      {
        EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v5);
        uint64_t v16 = *((void *)v5 + 4);
        do
        {
          uint64_t v13 = v11;
          EQKit::StemStretch::Key::operator=((uint64_t)v5, v11);
          *((void *)v5 + 4) = *(void *)(v11 + 32);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          uint64_t v11 = a1 + 40 * v14;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            int64_t v10 = v14;
          }
          char v5 = (const EQKit::StemStretch::Key *)v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
        *(void *)(v13 + 32) = v16;
        EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v15);
      }
    }
  }
}

void sub_255874B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
    uint64_t v11 = *((void *)a1 + 4);
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::StemStretch::Key::operator=(v8, (uint64_t)v10);
      *(void *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::StemStretch::Key::operator=(v8, a2 - 40);
      *(void *)(v9 + 32) = *(void *)(a2 - 8);
      EQKit::StemStretch::Key::operator=(a2 - 40, (uint64_t)v10);
      *(void *)(a2 - ++*(void *)(this + 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v9 + 40, (uint64_t (**)(uint64_t, uint64_t))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - (uint64_t)a1) >> 3));
    }
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v10);
  }
}

void sub_255874C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      uint64_t v10 = v11;
    }
    EQKit::StemStretch::Key::operator=(a1, v9);
    *(void *)(a1 + 32) = *(void *)(v9 + 32);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 40 * (v4 >> 1);
    uint64_t v10 = (const EQKit::StemStretch::Key *)(a2 - 40);
    if ((*a3)(v9, a2 - 40))
    {
      EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, v10);
      uint64_t v13 = *(void *)(a2 - 8);
      do
      {
        uint64_t v11 = v9;
        EQKit::StemStretch::Key::operator=((uint64_t)v10, v9);
        *((void *)v10 + 4) = *(void *)(v9 + 32);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 40 * v8;
        uint64_t v10 = (const EQKit::StemStretch::Key *)v11;
      }
      while (((*a3)(v9, (uint64_t)v12) & 1) != 0);
      EQKit::StemStretch::Key::operator=(v11, (uint64_t)v12);
      *(void *)(v11 + 32) = v13;
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v12);
    }
  }
}

void sub_255874E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:ne180100](v4, 0);
    return 1;
  }
  return result;
}

void std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    char v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v4 - 40));
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](v4, 0);
    return 1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
  unint64_t v10 = v8 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8 ^ v9;
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *char v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v15 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](v26, 0);
  return v15;
}

void sub_25587523C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++*(void *)(this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *CFHashCode v8 = 0;
  v8[1] = a2;
  uint64_t result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  *((_DWORD *)v8 + 12) = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2558752C0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(void *a1, uint64_t a2)
{
  CFHashCode v4 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v4 = CFHash((CFTypeRef)v4);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(void *)&v5) {
      CFHashCode v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v6;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::Font::SlantKey::operator==((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
  unint64_t v10 = v8 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8 ^ v9;
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::Font::SlantKey::operator==((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *char v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v15 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v15;
}

void sub_255875654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++*(void *)(this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *CFHashCode v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:ne180100]<EQKit::Font::SlantKey const&>((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2558756C4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:ne180100]<EQKit::Font::SlantKey const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (v3) {
    CFRetain(v3);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + ++*(void *)(this + 40) = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      EQKit::Font::SlantKey::~SlantKey(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(this + 40) = 1065353216;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_2558BE170;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2558757FC(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(a2 - 4, (int *)v11);
          if (result)
          {
            int v23 = *(_DWORD *)v11;
            *(_DWORD *)uint64_t v11 = *(a2 - 4);
            *(a2 - 4) = v23;
            uint64_t v24 = *(void *)(v11 + 8);
            *(void *)(v11 + ++*(void *)(this + 8) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v24;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v11, (int *)(v11 + 16), a2 - 4, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 4), a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, v11 + 16, v11 + 32, v11 + 48, (uint64_t)(a2 - 4), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(v11, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v11, (int *)(v11 + 16 * (v15 >> 1)), a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v11 + 16), (int *)(v17 - 16), a2 - 8, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v11 + 32), (int *)(v11 + 16 + 16 * v16), a2 - 12, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v17 - 16), (int *)v17, (int *)(v11 + 16 + 16 * v16), a3);
      int v18 = *(_DWORD *)v11;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v17;
      *(_DWORD *)unint64_t v17 = v18;
      uint64_t v19 = *(void *)(v11 + 8);
      *(void *)(v11 + ++*(void *)(this + 8) = *(void *)(v17 + 8);
      *(void *)(v17 + ++*(void *)(this + 8) = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v11 + 16 * (v15 >> 1)), (int *)v11, a2 - 4, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)((int *)(v11 - 16), (int *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v11, (unint64_t)a2, (uint64_t (**)(long long *, int *))a3);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v11, (unint64_t)a2, (uint64_t (**)(int *, long long *))a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, v20, a3);
    uint64_t v11 = (uint64_t)(v20 + 4);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((uint64_t)(v20 + 4), a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v20 + 4);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    uint64_t v6 = result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v6 + v12);
            *(void *)(v13 + 24) = *(void *)(v6 + v12 + 8);
            if (!v12) {
              break;
            }
            v12 -= 16;
            uint64_t result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(_DWORD *)uint64_t v14 = v15;
          *(void *)(v14 + ++*(void *)(this + 8) = *((void *)&v15 + 1);
        }
        uint64_t v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    uint64_t v6 = (_OWORD *)result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = result - 16;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *v6;
          uint64_t v11 = v9;
          do
          {
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 16);
            *(void *)(v11 + ++*(void *)(this + 40) = *(void *)(v11 + 24);
            uint64_t result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_DWORD *)(v11 + 32) = v12;
          *(void *)(v11 + ++*(void *)(this + 40) = *((void *)&v12 + 1);
        }
        uint64_t v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(int *a1, int *a2, int *a3, uint64_t (**a4)(int *, int *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v11 = (uint64_t *)(a3 + 2);
      uint64_t result = 1;
      long long v12 = (uint64_t *)(a1 + 2);
LABEL_9:
      long long v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    uint64_t v17 = *((void *)a1 + 1);
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v17;
    if ((*a4)(a3, a2))
    {
      int v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v11 = (uint64_t *)(a3 + 2);
      uint64_t result = 2;
      long long v12 = (uint64_t *)(a2 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    long long v15 = (uint64_t *)(a2 + 2);
    uint64_t v14 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v14;
    if ((*a4)(a2, a1))
    {
      int v16 = *a1;
      *a1 = *a2;
      long long v12 = (uint64_t *)(a1 + 2);
      *a2 = v16;
      uint64_t result = 2;
LABEL_10:
      uint64_t v19 = *v12;
      *long long v12 = *v15;
      *long long v15 = v19;
      return result;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(long long *, int *))
{
  unint64_t v4 = a2;
  long long v12 = *(_OWORD *)a1;
  if ((*a3)(&v12, (int *)(a2 - 16)))
  {
    uint64_t v6 = a1;
    do
      v6 += 4;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 4;
    do
    {
      uint64_t v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v12, v7);
      uint64_t v7 = v6 + 4;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    int v9 = *v6;
    *uint64_t v6 = *(_DWORD *)v4;
    *(_DWORD *)unint64_t v4 = v9;
    uint64_t v10 = *((void *)v6 + 1);
    *((void *)v6 + 1) = *(void *)(v4 + 8);
    *(void *)(v4 + ++*(void *)(this + 8) = v10;
    do
      v6 += 4;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  if (v6 - 4 != a1)
  {
    *a1 = *(v6 - 4);
    *((void *)a1 + 1) = *((void *)v6 - 1);
  }
  *(v6 - 4) = v12;
  *((void *)v6 - 1) = *((void *)&v12 + 1);
  return v6;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(int *, long long *))
{
  uint64_t v6 = 0;
  long long v13 = *(_OWORD *)a1;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  unint64_t v7 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 16;
    }
    while (((*a3)((int *)a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((int *)a2, &v13));
  }
  int v8 = (long long *)&a1[v6];
  if (v7 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      int v10 = *(_DWORD *)v8;
      *(_DWORD *)int v8 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = v10;
      uint64_t v11 = *((void *)v8 + 1);
      *((void *)v8 + 1) = *(void *)(v9 + 8);
      *(void *)(v9 + ++*(void *)(this + 8) = v11;
      do
        ++v8;
      while (((*a3)((int *)v8, &v13) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((int *)v9, &v13));
    }
    while ((unint64_t)v8 < v9);
  }
  uint64_t result = (int *)(v8 - 1);
  if (v8 - 1 != (long long *)a1)
  {
    *a1 = *((_DWORD *)v8 - 4);
    *((void *)a1 + 1) = *((void *)v8 - 1);
  }
  *((_DWORD *)v8 - 4) = v13;
  *((void *)v8 - 1) = *((void *)&v13 + 1);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 4, (int *)a1))
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + ++*(void *)(this + 8) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), a2 - 4, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 4), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 4), a3);
      return 1;
    default:
      int v10 = (int *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a3);
      uint64_t v11 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_DWORD *)(v15 + 4++*(void *)(this + 8) = *(_DWORD *)(a1 + v14 + 32);
        *(void *)(v15 + 56) = *(void *)(a1 + v14 + 40);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (((*a3)((int *)&v17, (int *)(v15 + 16)) & 1) == 0)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v17;
      *(void *)(v16 + ++*(void *)(this + 8) = *((void *)&v17 + 1);
      if (++v13 == 8) {
        return v11 + 4 == a2;
      }
    }
    int v10 = v11;
    v12 += 16;
    v11 += 4;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(int *, int *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)a2, (int *)a3, a5);
  uint64_t result = (*a5)((int *)a4, (int *)a3);
  if (result)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + ++*(void *)(this + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + ++*(void *)(this + 8) = v12;
    uint64_t result = (*a5)((int *)a3, (int *)a2);
    if (result)
    {
      int v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + ++*(void *)(this + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + ++*(void *)(this + 8) = v14;
      uint64_t result = (*a5)((int *)a2, (int *)a1);
      if (result)
      {
        int v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + ++*(void *)(this + 8) = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(int *, int *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((int *)a5, (int *)a4);
  if (result)
  {
    int v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + ++*(void *)(this + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + ++*(void *)(this + 8) = v14;
    uint64_t result = (*a6)((int *)a4, (int *)a3);
    if (result)
    {
      int v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      uint64_t v16 = *(void *)(a3 + 8);
      *(void *)(a3 + ++*(void *)(this + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + ++*(void *)(this + 8) = v16;
      uint64_t result = (*a6)((int *)a3, (int *)a2);
      if (result)
      {
        int v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        uint64_t v18 = *(void *)(a2 + 8);
        *(void *)(a2 + ++*(void *)(this + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + ++*(void *)(this + 8) = v18;
        uint64_t result = (*a6)((int *)a2, (int *)a1);
        if (result)
        {
          int v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          uint64_t v20 = *(void *)(a1 + 8);
          *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + ++*(void *)(this + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          int v15 = *(_DWORD *)v14;
          *(_DWORD *)uint64_t v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          uint64_t v16 = *(void *)(v14 + 8);
          *(void *)(v14 + ++*(void *)(this + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + ++*(void *)(this + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, (long long *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v17 = (unint64_t)v8 >> 4;
      uint64_t v18 = a2 - 16;
      do
      {
        int v19 = *(_DWORD *)a1;
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)uint64_t v21 = v19;
          *(void *)(v21 + ++*(void *)(this + 8) = v20;
        }
        else
        {
          *(_DWORD *)uint64_t v21 = *(_DWORD *)v18;
          *(void *)(v21 + ++*(void *)(this + 8) = *(void *)(v18 + 8);
          *(_DWORD *)uint64_t v18 = v19;
          *(void *)(v18 + ++*(void *)(this + 8) = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, v21 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v21 + 16 - a1) >> 4);
        }
        v18 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    unint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 3;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = result + 16 * (v12 + 1);
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        long long v19 = *v7;
        do
        {
          uint64_t v16 = v14;
          *(_DWORD *)unint64_t v7 = *(_DWORD *)v14;
          *((void *)v7 + 1) = *(void *)(v14 + 8);
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = v8 + 16 * v17;
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, &v19);
          unint64_t v7 = (long long *)v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *(_DWORD *)uint64_t v16 = v19;
        *(void *)(v16 + ++*(void *)(this + 8) = *((void *)&v19 + 1);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      uint64_t v10 = v11;
    }
    *(_DWORD *)a1 = *(_DWORD *)v9;
    *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(v9 + 8);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = result + 16 * (v6 >> 1);
    uint64_t v11 = (long long *)(a2 - 16);
    uint64_t result = (*a3)(v10, a2 - 16);
    if (result)
    {
      long long v13 = *v11;
      do
      {
        uint64_t v12 = v10;
        *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
        *((void *)v11 + 1) = *(void *)(v10 + 8);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v8 + 16 * v9;
        uint64_t result = (*a3)(v10, (uint64_t)&v13);
        uint64_t v11 = (long long *)v12;
      }
      while ((result & 1) != 0);
      *(_DWORD *)uint64_t v12 = v13;
      *(void *)(v12 + ++*(void *)(this + 8) = *((void *)&v13 + 1);
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x58uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 1++*(void *)(this + 8) = 0;
  *((unsigned char *)v11 + 76) = -1;
  v11[10] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_255876CC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

EQKit::Font::OpenTypeFontCollection *EQKit::Font::OpenTypeFontCollection::OpenTypeFontCollection(EQKit::Font::OpenTypeFontCollection *this, const __CFString *a2)
{
  *(void *)this = &unk_27045AE40;
  *((void *)this + 1) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  (*(void (**)(EQKit::Font::OpenTypeFontCollection *))(*(void *)this + 24))(this);
  return this;
}

void sub_255876D70(_Unwind_Exception *a1)
{
  EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)(v1 + 24));
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType(v3);
  EQKit::AutoCFType<__CFString const*>::~AutoCFType(v2);
  _Unwind_Resume(a1);
}

void EQKit::Font::OpenTypeFontCollection::~OpenTypeFontCollection(const void **this, const void **a2)
{
  unint64_t v3 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v3 - 26)) = a2[1];
  EQKit::AutoCFType<__CFData const*>::~AutoCFType(this + 3);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType(this + 2);
  EQKit::AutoCFType<__CFString const*>::~AutoCFType(this + 1);
}

void EQKit::Font::OpenTypeFontCollection::~OpenTypeFontCollection(const void **this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x25A290040);
}

BOOL EQKit::Font::OpenTypeFontCollection::supportsOpenTypeMATHTables(EQKit::Font::OpenTypeFontCollection *this)
{
  return *((void *)this + 3) != 0;
}

uint64_t EQKit::Font::OpenTypeFontCollection::reloadFonts(EQKit::Font::OpenTypeFontCollection *this)
{
  CTFontRef v7 = 0;
  int8x8_t v2 = (const void *)*((void *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    CTFontRef v3 = v7;
  }
  else
  {
    CTFontRef v3 = 0;
  }
  CTFontRef v7 = 0;
  *((void *)this + 3) = v3;
  EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)&v7);
  *((void *)this + 4) = 0;
  CTFontRef v4 = CTFontCreateWithName(*((CFStringRef *)this + 1), 12.0, 0);
  CTFontRef v7 = v4;
  if (*((void *)this + 2))
  {
    CFRelease(*((CFTypeRef *)this + 2));
    CTFontRef v4 = v7;
  }
  CTFontRef v7 = 0;
  *((void *)this + 2) = v4;
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v7);
  uint64_t result = (*(uint64_t (**)(EQKit::Font::OpenTypeFontCollection *))(*(void *)this + 32))(this);
  if (result)
  {
    *((double *)this + 5) = (double)CTFontGetUnitsPerEm(*((CTFontRef *)this + 2));
    CFDataRef v6 = CTFontCopyTable(*((CTFontRef *)this + 2), 0x4D415448u, 0);
    CTFontRef v7 = v6;
    if (*((void *)this + 3))
    {
      CFRelease(*((CFTypeRef *)this + 3));
      CFDataRef v6 = v7;
    }
    CTFontRef v7 = 0;
    *((void *)this + 3) = v6;
    EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)&v7);
    uint64_t result = *((void *)this + 3);
    if (result)
    {
      uint64_t result = (uint64_t)MathHeaderFromTableData((CFDataRef)result);
      *((void *)this + 4) = result;
    }
  }
  return result;
}

void sub_255876FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::Font::OpenTypeFontCollection::fontsLoadedCorrectly(EQKit::Font::OpenTypeFontCollection *this)
{
  int8x8_t v2 = (const __CTFont *)*((void *)this + 2);
  if (v2)
  {
    CFStringRef v3 = CTFontCopyPostScriptName(v2);
    uint64_t v4 = *((void *)this + 2);
    CTFontRef v7 = (__CFString *)v3;
    if (v4) {
      BOOL v5 = CFEqual(v3, *((CFStringRef *)this + 1));
    }
    else {
      BOOL v5 = 0;
    }
  }
  else
  {
    BOOL v5 = 0;
    CTFontRef v7 = &stru_27045C2A0;
  }
  EQKit::AutoCFType<__CFString const*>::~AutoCFType((const void **)&v7);
  return v5;
}

void sub_25587706C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::AutoCFType<__CFString const*>::~AutoCFType((const void **)va);
  _Unwind_Resume(a1);
}

unsigned __int16 *EQKit::Font::OpenTypeFontCollection::characterPropertyLengthForScript@<X0>(EQKit::Unicode *a1@<X3>, uint64_t a2@<X0>, int a3@<W1>, const EQKit::Script::Info *a4@<X2>, uint64_t a5@<X8>)
{
  unsigned int v8 = EQKit::Font::OpenTypeFontCollection::glyphForCharacterInScript((EQKit::Font::OpenTypeFontCollection *)a2, a1, a4);
  uint64_t result = (unsigned __int16 *)MathHeaderGetMathGlyphInfo(*(void *)(a2 + 32));
  if (a3 == 14)
  {
    ItalicsCorrectionInfo = (unsigned __int16 *)MathGlyphInfoGetItalicsCorrectionInfo(result);
    float v13 = (unsigned __int16 *)MathGlyphInfoGetItalicsCorrectionInfo(ItalicsCorrectionInfo);
    uint64_t result = (unsigned __int16 *)CoverageTableGetIndexOfGlyphID(v13, v8);
    if (result == (unsigned __int16 *)-1) {
      goto LABEL_10;
    }
    uint64_t result = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex((uint64_t)ItalicsCorrectionInfo, (unsigned __int16)result);
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    if (a3 != 1) {
      goto LABEL_10;
    }
    TopAttachment = (unsigned __int16 *)MathGlyphInfoGetTopAttachment((uint64_t)result);
    uint64_t v11 = (unsigned __int16 *)MathGlyphInfoGetItalicsCorrectionInfo(TopAttachment);
    uint64_t result = (unsigned __int16 *)CoverageTableGetIndexOfGlyphID(v11, v8);
    if (result == (unsigned __int16 *)-1) {
      goto LABEL_10;
    }
    uint64_t result = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex((uint64_t)TopAttachment, (unsigned __int16)result);
    if (!result) {
      goto LABEL_10;
    }
  }
  uint64_t result = (unsigned __int16 *)MathValueRecordGetValue(result);
  double v14 = (double)(int)result / *(double *)(a2 + 40);
  if (v14 == 1.79769313e308)
  {
LABEL_10:
    int v15 = 0;
    double v14 = 0.0;
    goto LABEL_11;
  }
  int v15 = 3;
LABEL_11:
  *(_DWORD *)a5 = v15;
  *(double *)(a5 + ++*(void *)(this + 8) = v14;
  return result;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphForCharacterInScript(EQKit::Font::OpenTypeFontCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  int v4 = (int)a2;
  int v6 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = v4;
  }
  if (*((unsigned char *)a3 + 8)) {
    BOOL v8 = *((unsigned char *)a3 + 10) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    return EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, v7);
  }
  else
  {
    return EQKit::Font::OpenTypeFontCollection::glyphDisplayVariantForCharacter(this, v7);
  }
}

double EQKit::Font::OpenTypeFontCollection::lengthMetricWithScriptAndRule(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t HorizGlyphCoverageTable = MathVariantsGetHorizGlyphCoverageTable(*(void *)(a1 + 32));
  double v7 = 0.0;
  switch(a2)
  {
    case 0:
      BOOL v8 = (unsigned __int16 *)MathConstantsSubscriptShiftDown(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 1:
      if (*(unsigned char *)(a3 + 9)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsSuperscriptShiftUpCramped(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsSuperscriptShiftUp(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 3:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionNumeratorDisplayStyleShiftUp(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionNumeratorShiftUp(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 4:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionDenominatorDisplayStyleShiftDown(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionDenominatorShiftDown(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 5:
      BOOL v8 = (unsigned __int16 *)MathConstantsSuperscriptBaselineDropMax(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 6:
      BOOL v8 = (unsigned __int16 *)MathConstantsSubscriptBaselineDropMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 7:
      BOOL v8 = (unsigned __int16 *)MathConstantsSuperscriptBottomMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 8:
      BOOL v8 = (unsigned __int16 *)MathConstantsSubscriptTopMax(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 9:
      BOOL v8 = (unsigned __int16 *)MathConstantsSubSuperscriptGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 10:
      BOOL v8 = (unsigned __int16 *)MathConstantsSuperscriptBottomMaxWithSubscript(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 11:
    case 47:
      BOOL v8 = (unsigned __int16 *)MathConstantsUpperLimitGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 12:
    case 46:
      BOOL v8 = (unsigned __int16 *)MathConstantsUpperLimitBaselineRiseMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 13:
      BOOL v8 = (unsigned __int16 *)MathConstantsLowerLimitGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 14:
      BOOL v8 = (unsigned __int16 *)MathConstantsLowerLimitBaselineDropMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 15:
      BOOL v8 = (unsigned __int16 *)MathConstantsMathLeading(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 16:
    case 41:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsStackDisplayStyleGapMin(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsStackGapMin(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 18:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsRadicalDisplayStyleVerticalGap(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsRadicalVerticalGap(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 33:
      BOOL v8 = (unsigned __int16 *)MathConstantsAxisHeight(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 34:
      BOOL v8 = (unsigned __int16 *)MathConstantsAccentBaseHeight(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 35:
      BOOL v8 = (unsigned __int16 *)MathConstantsFractionRuleThickness(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 36:
      BOOL v8 = (unsigned __int16 *)MathConstantsSpaceAfterScript(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 37:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionNumDisplayStyleGapMin(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionNumeratorGapMin(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 38:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionDenomDisplayStyleGapMin(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsFractionDenominatorGapMin(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 39:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsStackTopDisplayStyleShiftUp(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsStackTopShiftUp(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 40:
      if (*(unsigned char *)(a3 + 8)) {
        BOOL v8 = (unsigned __int16 *)MathConstantsStackBottomDisplayStyleShiftDown(HorizGlyphCoverageTable);
      }
      else {
        BOOL v8 = (unsigned __int16 *)MathConstantsStackBottomShiftDown(HorizGlyphCoverageTable);
      }
      goto LABEL_57;
    case 42:
      BOOL v8 = (unsigned __int16 *)MathConstantsStretchStackBottomShiftDown(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 43:
      BOOL v8 = (unsigned __int16 *)MathConstantsStretchStackGapAboveMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 44:
      BOOL v8 = (unsigned __int16 *)MathConstantsStretchStackTopShiftUp(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 45:
      BOOL v8 = (unsigned __int16 *)MathConstantsStretchStackGapBelowMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 48:
      BOOL v8 = (unsigned __int16 *)MathConstantsUnderbarVerticalGap(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 49:
      BOOL v8 = (unsigned __int16 *)MathConstantsUnderbarExtraDescender(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 50:
      BOOL v8 = (unsigned __int16 *)MathConstantsOverbarVerticalGap(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 51:
      BOOL v8 = (unsigned __int16 *)MathConstantsOverbarExtraAscender(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 52:
      BOOL v8 = (unsigned __int16 *)MathConstantsRadicalExtraAscender(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 53:
      BOOL v8 = (unsigned __int16 *)MathConstantsRadicalRuleThickness(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 54:
      BOOL v8 = (unsigned __int16 *)MathConstantsRadicalKernBeforeDegree(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 55:
      BOOL v8 = (unsigned __int16 *)MathConstantsRadicalKernAfterDegree(HorizGlyphCoverageTable);
LABEL_57:
      if (v8) {
        double v7 = (double)(int)MathValueRecordGetValue(v8) / *(double *)(a1 + 40) * *(double *)(a3 + 16);
      }
      break;
    default:
      return v7;
  }
  return v7;
}

unsigned __int16 *EQKit::Font::OpenTypeFontCollection::floatMetric(uint64_t a1, int a2)
{
  uint64_t result = (unsigned __int16 *)MathVariantsGetHorizGlyphCoverageTable(*(void *)(a1 + 32));
  switch(a2)
  {
    case 2:
    case 4:
      uint64_t result = (unsigned __int16 *)MathConstantsScriptScriptPercentScaleDown((uint64_t)result);
      break;
    case 3:
      uint64_t result = (unsigned __int16 *)MathValueRecordGetValue(result);
      break;
    case 5:
      MathConstantsRadicalDegreeBottomRaisePercent((uint64_t)result);
      uint64_t result = (unsigned __int16 *)CFStringCompare(@"STIXTwoMath-Regular", *(CFStringRef *)(a1 + 8), 0);
      break;
    default:
      return result;
  }
  return result;
}

const __CTFont *EQKit::Font::OpenTypeFontCollection::newFontWithScript(EQKit::Font::OpenTypeFontCollection *this, CGFloat *a2)
{
  uint64_t result = (const __CTFont *)*((void *)this + 2);
  if (result) {
    return CTFontCreateCopyWithAttributes(result, a2[2], 0, 0);
  }
  return result;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphForCharacter(EQKit::Font::OpenTypeFontCollection *this, int a2)
{
  int8x8_t v2 = (const __CTFont *)*((void *)this + 2);
  *(_DWORD *)UniChar characters = 0;
  *(_DWORD *)CGSize glyphs = -1;
  if ((a2 - 0x10000) >> 20)
  {
    CFIndex v4 = 1;
    LOWORD(v3) = a2;
  }
  else
  {
    unsigned int v3 = ((a2 + 67043328) >> 10) - 10240;
    characters[1] = a2 & 0x3FF | 0xDC00;
    CFIndex v4 = 2;
  }
  characters[0] = v3;
  BOOL GlyphsForCharacters = CTFontGetGlyphsForCharacters(v2, characters, glyphs, v4);
  CGGlyph v6 = glyphs[0];
  if (!GlyphsForCharacters) {
    return (CGGlyph)-1;
  }
  return v6;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphDisplayVariantForCharacter(EQKit::Font::OpenTypeFontCollection *this, int a2)
{
  uint64_t HorizGlyphCoverageTable = MathVariantsGetHorizGlyphCoverageTable(*((void *)this + 4));
  unsigned int FullAdvance = GlyphPartRecordGetFullAdvance(HorizGlyphCoverageTable);
  unsigned int v6 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, a2);
  uint64_t v7 = EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)this, v6, 2);
  if (!v7) {
    return 0xFFFFLL;
  }
  uint64_t v8 = v7;
  uint64_t result = glyphVariantForMinAdvance(FullAdvance, v7);
  if (result == 0xFFFF)
  {
    return largestGlyphVariantInConstruction(v8);
  }
  return result;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 == 0xFFFF) {
    return 0;
  }
  uint64_t MathVariants = MathHeaderGetMathVariants(*(void *)(a1 + 32));
  uint64_t v6 = MathVariants;
  if (a3 == 2)
  {
    TopAttachment = (unsigned __int16 *)MathGlyphInfoGetTopAttachment(MathVariants);
    uint64_t IndexOfGlyphID = CoverageTableGetIndexOfGlyphID(TopAttachment, a2);
    if (IndexOfGlyphID != -1)
    {
      return MathVariantsGetVertGlyphConstructionAtIndex(v6, (unsigned __int16)IndexOfGlyphID);
    }
    return 0;
  }
  uint64_t HorizGlyphCoverageTable = (unsigned __int16 *)MathVariantsGetHorizGlyphCoverageTable(MathVariants);
  uint64_t v11 = CoverageTableGetIndexOfGlyphID(HorizGlyphCoverageTable, a2);
  if (v11 == -1) {
    return 0;
  }

  return MathVariantsGetHorizGlyphConstructionAtIndex(v6, (unsigned __int16)v11);
}

uint64_t glyphVariantForMinAdvance(unsigned int a1, uint64_t a2)
{
  unsigned int StartConnectorLength = GlyphPartRecordGetStartConnectorLength(a2);
  if (!StartConnectorLength) {
    return 0xFFFFLL;
  }
  unsigned int v5 = StartConnectorLength;
  unsigned __int16 v6 = 0;
  while (1)
  {
    GlyphVariantAtIndeCGFloat x = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex(a2, v6);
    if (GlyphPartRecordGetStartConnectorLength((uint64_t)GlyphVariantAtIndex) >= a1) {
      break;
    }
    if (v5 <= ++v6) {
      return 0xFFFFLL;
    }
  }

  return GlyphPartRecordGetGlyphID(GlyphVariantAtIndex);
}

uint64_t largestGlyphVariantInConstruction(uint64_t a1)
{
  __int16 StartConnectorLength = GlyphPartRecordGetStartConnectorLength(a1);
  GlyphVariantAtIndeCGFloat x = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex(a1, (unsigned __int16)(StartConnectorLength - 1));

  return GlyphPartRecordGetGlyphID(GlyphVariantAtIndex);
}

uint64_t EQKit::Font::OpenTypeFontCollection::newAttributedStringWithScript(EQKit::Font::OpenTypeFontCollection *this, NSString *a2, CGFloat *a3)
{
  v41[3] = *MEMORY[0x263EF8340];
  NSUInteger v6 = [(NSString *)a2 length];
  uint64_t v7 = (unsigned int *)malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  unint64_t v37 = 0;
  if (-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, 4 * v6, &v37, 2617245952, 0, 0, v6, 0))
  {
    unint64_t v9 = v37;
    unint64_t v10 = v37 >> 2;
    if (v37 >= 4)
    {
      if (v10 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v37 >> 2;
      }
      unint64_t v12 = v7;
      do
      {
        int v13 = *v12;
        unsigned int v14 = EQKit::Unicode::lookupChar(*v12, (uint64_t)a3, v8);
        if (v14) {
          BOOL v15 = v14 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15) {
          *unint64_t v12 = v14;
        }
        ++v12;
        --v11;
      }
      while (v11);
    }
    unint64_t v16 = (const __CTFont *)*((void *)this + 2);
    if (v16) {
      CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v16, a3[2], 0, 0);
    }
    else {
      CTFontRef CopyWithAttributes = 0;
    }
    id v19 = [NSString alloc];
    double v36 = (int *)v7;
    uint64_t v20 = (void *)[v19 initWithBytes:v7 length:v37 encoding:2617245952];
    v40[0] = *MEMORY[0x263F039A0];
    CFTypeRef v21 = (id)CFMakeCollectable(CopyWithAttributes);
    uint64_t v22 = *MEMORY[0x263F03C68];
    uint64_t v23 = *MEMORY[0x263EFFB40];
    v41[0] = v21;
    v41[1] = v23;
    uint64_t v24 = *MEMORY[0x263F03D88];
    v40[1] = v22;
    v40[2] = v24;
    v41[2] = &unk_2704646E8;
    uint64_t v25 = [NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:3];
    double v26 = (void *)[objc_alloc(MEMORY[0x263F089B8]) initWithString:v20 attributes:v25];

    if (*((unsigned char *)a3 + 8) && *((unsigned char *)a3 + 10) && v9 >= 4)
    {
      uint64_t v27 = 0;
      uint64_t v28 = *MEMORY[0x263F03C78];
      if (v10 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v10;
      }
      double v30 = v36;
      do
      {
        int v31 = EQKit::Font::OpenTypeFontCollection::glyphDisplayVariantForCharacter(this, *v30);
        if (v31 != 0xFFFF)
        {
          CGGlyph v32 = v31;
          double v33 = (__CFString *)[[NSString alloc] initWithBytes:v30 length:4 encoding:2617245952];
          CTGlyphInfoRef v34 = CTGlyphInfoCreateWithGlyph(v32, CopyWithAttributes, v33);

          uint64_t v38 = v28;
          CFTypeRef v39 = (id)CFMakeCollectable(v34);
          objc_msgSend(v26, "addAttributes:range:", objc_msgSend(NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1), v27, 1);
        }
        ++v27;
        ++v30;
      }
      while (v29 != v27);
    }
    free(v36);
    uint64_t v18 = [v26 copy];
  }
  else
  {
    free(v7);
    return 0;
  }
  return v18;
}

CTFontRef EQKit::Font::OpenTypeFontCollection::newFontForStretchedCharacterWithScript(EQKit::Font::OpenTypeFontCollection *a1, int *a2, const EQKit::Script::Info *a3, uint64_t a4)
{
  int v5 = (int)a3;
  int v7 = *a2;
  int v8 = EQKit::Unicode::lookupChar(*a2, a4, a3);
  if (v8) {
    int v9 = v8;
  }
  else {
    int v9 = v7;
  }
  unsigned int v10 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(a1, v9);
  if (v10 == 0xFFFF) {
    return 0;
  }
  if (EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)a1, v10, v5)) {
    return 0;
  }
  unint64_t v12 = (const __CTFont *)*((void *)a1 + 2);
  if (!v12) {
    return 0;
  }
  CGFloat v13 = *(double *)(a4 + 16);

  return CTFontCreateCopyWithAttributes(v12, v13, 0, 0);
}

CGMutablePathRef EQKit::Font::OpenTypeFontCollection::newCGPathForStretchedCharacterWithScript(uint64_t a1, EQKit::Unicode *this, const EQKit::Script::Info *a3, uint64_t a4, uint64_t a5, double a6)
{
  int v9 = (int)a3;
  int v10 = (int)this;
  int v12 = EQKit::Unicode::lookupChar((uint64_t)this, a4, a3);
  if (v12) {
    int v13 = v12;
  }
  else {
    int v13 = v10;
  }
  unsigned int v14 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter((EQKit::Font::OpenTypeFontCollection *)a1, v13);
  uint64_t v15 = EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph(a1, v14, v9);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = (_WORD *)v15;
  if (v9 == 2) {
    a6 = (*(double (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 56))(a1, 15, a4, 0.0) + a6;
  }
  CGFloat v72 = 0.0;
  CTFontRef CopyWithAttributes = *(const __CTFont **)(a1 + 16);
  if (CopyWithAttributes) {
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, *(CGFloat *)(a4 + 16), 0, 0);
  }
  uint64_t v71 = CopyWithAttributes;
  double v18 = CTFontGetSize(CopyWithAttributes) / *(double *)(a1 + 40);
  unsigned int v19 = llround(a6 / v18);
  int v20 = glyphVariantForMinAdvance(v19, (uint64_t)v16);
  CGGlyph glyphs = v20;
  if (v20 == 0xFFFF)
  {
    GlyphAssemblCGFloat y = MathGlyphConstructionGetGlyphAssembly(v16);
    if (GlyphAssembly)
    {
      uint64_t MathVariants = (unsigned __int16 *)MathHeaderGetMathVariants(*(void *)(a1 + 32));
      unsigned __int16 Value = MathValueRecordGetValue(MathVariants);
      v73.CGFloat a = 0.0;
      *(void *)&v73.b = &v73;
      *(void *)&v73.c = 0x5012000000;
      *(void *)&v73.d = __Block_byref_object_copy__11;
      *(void *)&v73.tCGFloat x = __Block_byref_object_dispose__12;
      *(void *)&v73.tCGFloat y = &unk_2558F564B;
      v74[0] = xmmword_2558BE5D8;
      v74[1] = unk_2558BE5E8;
      int EndConnectorLength = GlyphPartRecordGetEndConnectorLength((uint64_t)GlyphAssembly);
      *(void *)&cf.CGFloat a = MEMORY[0x263EF8330];
      *(void *)&cf.b = 3221225472;
      *(void *)&cf.c = ___ZL26getGlyphAssemblyParametersPK14_GlyphAssemblyddP23GlyphAssemblyParameters_block_invoke;
      *(void *)&cf.d = &unk_2653C50E0;
      *(void *)&cf.tCGFloat x = &v73;
      LOWORD(cf.ty) = EndConnectorLength;
      enumerateGlyphAssembly((uint64_t)GlyphAssembly, 1u, (uint64_t)&cf);
      unsigned int v27 = *(unsigned __int16 *)(*(void *)&v73.b + 72);
      int v28 = *(unsigned __int16 *)(*(void *)&v73.b + 74);
      if (EndConnectorLength != (unsigned __int16)(v28 + v27)) {
        __assert_rtn("getGlyphAssemblyParameters", "EQKitOpenTypeFontCollection.mm", 869, "glyphAssemblyPartsCount(metrics, 1) == basePartsCount");
      }
      double v29 = (double)v19;
      double v30 = *(double *)(*(void *)&v73.b + 48);
      double v31 = *(double *)(*(void *)&v73.b + 56);
      uint64_t v32 = vcvtpd_s64_f64(((double)v19 - (v31 + v30 * 0.0 - (double)Value * (double)(v28 - 1)))/ (v30 - (double)Value * (double)v27));
      int v33 = v32 & ~(v32 >> 63);
      unsigned int v34 = (unsigned __int16)(v28 + v27 * (v32 & ~(unsigned __int16)(v32 >> 63)));
      double v35 = (v31
           + (double)(unsigned __int16)(v32 & ~(unsigned __int16)(v32 >> 63)) * v30
           + (double)(int)(v34 - 1) * -0.0
           - v29)
          / (double)v34;
      if (v35 >= *(double *)(*(void *)&v73.b + 64)) {
        double v36 = *(double *)(*(void *)&v73.b + 64);
      }
      else {
        double v36 = v35;
      }
      _Block_object_dispose(&v73, 8);
      v73.CGFloat a = 0.0;
      *(void *)&v73.b = &v73;
      *(void *)&v73.c = 0x2020000000;
      v73.d = 0.0;
      CGFloat a = COERCE_DOUBLE(CGPathCreateMutable());
      cf.CGFloat a = a;
      v64[0] = MEMORY[0x263EF8330];
      v64[1] = 3321888768;
      v64[2] = ___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke;
      v64[3] = &unk_27045AF18;
      v65[0] = v71;
      if (v71)
      {
        CFRetain(v71);
        CGFloat a = cf.a;
      }
      v64[4] = &v73;
      v65[1] = *(const void **)&v36;
      __int16 v66 = v33;
      int v69 = v9;
      double v67 = v18;
      CGFloat v68 = a;
      if (a != 0.0) {
        CFRetain(*(CFTypeRef *)&a);
      }
      enumerateGlyphAssembly((uint64_t)GlyphAssembly, (unsigned __int16)v33, (uint64_t)v64);
      CGMutablePathRef MutableCopy = (CGSize *)CGPathCreateMutableCopy(*(CGPathRef *)&cf.a);
      advances[0] = MutableCopy;
      if (v72 != 0.0)
      {
        CFRelease(*(CFTypeRef *)&v72);
        CGMutablePathRef MutableCopy = advances[0];
      }
      advances[0] = 0;
      CGFloat v72 = *(double *)&MutableCopy;
      EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)advances);
      EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)&v68);
      EQKit::AutoCFType<__CTFont const*>::~AutoCFType(v65);
      EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)&cf);
      _Block_object_dispose(&v73, 8);
      int v20 = 0xFFFF;
      goto LABEL_25;
    }
    int v20 = largestGlyphVariantInConstruction((uint64_t)v16);
    CGGlyph glyphs = v20;
    CGPathRef PathForGlyph = CTFontCreatePathForGlyph(v71, v20, 0);
    *(void *)&v73.CGFloat a = PathForGlyph;
  }
  else
  {
    CGPathRef PathForGlyph = CTFontCreatePathForGlyph(v71, v20, 0);
    *(void *)&v73.CGFloat a = PathForGlyph;
  }
  CGFloat v72 = *(double *)&PathForGlyph;
  v73.CGFloat a = 0.0;
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v73);
LABEL_25:
  CFTypeRef v39 = *(const CGPath **)&v72;
  if (v72 != 0.0)
  {
    CGRect PathBoundingBox = CGPathGetPathBoundingBox(*(CGPathRef *)&v72);
    CGFloat x = PathBoundingBox.origin.x;
    CGFloat y = PathBoundingBox.origin.y;
    CGFloat width = PathBoundingBox.size.width;
    CGFloat height = PathBoundingBox.size.height;
    memset(&cf, 0, sizeof(cf));
    CGFloat MaxY = CGRectGetMaxY(PathBoundingBox);
    CGAffineTransformMakeTranslation(&v62, 0.0, MaxY);
    CGAffineTransformScale(&cf, &v62, 1.0, -1.0);
    CGFloat v45 = COERCE_DOUBLE(MEMORY[0x25A28F920](*(void *)&v72, &cf));
    v73.CGFloat a = v45;
    if (v72 != 0.0)
    {
      CFRelease(*(CFTypeRef *)&v72);
      CGFloat v45 = v73.a;
    }
    CGFloat v72 = v45;
    v73.CGFloat a = 0.0;
    EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v73);
    if (v20 == 0xFFFF)
    {
      std::string v51 = MathGlyphConstructionGetGlyphAssembly(v16);
      unsigned int v52 = GlyphPartRecordGetEndConnectorLength((uint64_t)v51);
      v73.CGFloat a = 0.0;
      *(void *)&v73.b = &v73;
      *(void *)&v73.c = 0x4812000000;
      *(void *)&v73.d = __Block_byref_object_copy__0;
      *(void *)&v73.tCGFloat x = __Block_byref_object_dispose__0;
      *(void *)&v73.tCGFloat y = &unk_2558F564B;
      uint64_t v53 = v52;
      LOWORD(advances[0]) = 0;
      std::vector<unsigned short>::vector(v74, v52, advances);
      v61[0] = MEMORY[0x263EF8330];
      v61[1] = 3221225472;
      v61[2] = ___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke_8;
      v61[3] = &unk_2653C50B8;
      v61[4] = &v73;
      enumerateGlyphAssembly((uint64_t)v51, 1u, (uint64_t)v61);
      std::vector<CGSize>::vector(advances, v52, MEMORY[0x263F001B0]);
      CTFontGetAdvancesForGlyphs(v71, kCTFontOrientationHorizontal, *(const CGGlyph **)(*(void *)&v73.b + 48), advances[0], v52);
      double v54 = 0.0;
      if (v52)
      {
        uint64_t v55 = advances[0];
        do
        {
          double v56 = v55->width;
          ++v55;
          double v57 = v56;
          if (v54 < v56) {
            double v54 = v57;
          }
          --v53;
        }
        while (v53);
      }
      v79.origin.CGFloat x = x;
      v79.origin.CGFloat y = y;
      v79.size.CGFloat width = width;
      v79.size.CGFloat height = height;
      CGFloat v58 = CGRectGetWidth(v79);
      *(CGFloat *)a5 = width;
      *(CGFloat *)(a5 + ++*(void *)(this + 8) = height;
      *(void *)(a5 + 16) = 0;
      *(double *)(a5 + 24) = fmax(v54 - v58, 0.0);
      *(void *)(a5 + 32) = 0;
      if (advances[0])
      {
        advances[1] = advances[0];
        operator delete(advances[0]);
      }
      _Block_object_dispose(&v73, 8);
      if (*(void *)&v74[0])
      {
        *((void *)&v74[0] + 1) = *(void *)&v74[0];
        operator delete(*(void **)&v74[0]);
      }
    }
    else
    {
      double AdvancesForGlyphs = CTFontGetAdvancesForGlyphs(v71, kCTFontOrientationHorizontal, &glyphs, 0, 1);
      v76.origin.CGFloat x = x;
      v76.origin.CGFloat y = y;
      v76.size.CGFloat width = width;
      v76.size.CGFloat height = height;
      double v47 = CGRectGetWidth(v76);
      v77.origin.CGFloat x = x;
      v77.origin.CGFloat y = y;
      v77.size.CGFloat width = width;
      v77.size.CGFloat height = height;
      CGFloat MinY = CGRectGetMinY(v77);
      *(CGFloat *)a5 = width;
      *(CGFloat *)(a5 + ++*(void *)(this + 8) = height;
      *(void *)(a5 + 16) = 0;
      *(double *)(a5 + 24) = fmax(AdvancesForGlyphs - v47, 0.0);
      *(CGFloat *)(a5 + 32) = -MinY;
      if (AdvancesForGlyphs == 0.0)
      {
        memset(&v73, 0, sizeof(v73));
        v78.origin.CGFloat x = x;
        v78.origin.CGFloat y = y;
        v78.size.CGFloat width = width;
        v78.size.CGFloat height = height;
        CGFloat MinX = CGRectGetMinX(v78);
        CGAffineTransformMakeTranslation(&v73, -MinX, 0.0);
        std::string v50 = (CGSize *)MEMORY[0x25A28F920](*(void *)&v72, &v73);
        advances[0] = v50;
        if (v72 != 0.0)
        {
          CFRelease(*(CFTypeRef *)&v72);
          std::string v50 = advances[0];
        }
        advances[0] = 0;
        CGFloat v72 = *(double *)&v50;
        EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)advances);
      }
    }
    CFTypeRef v39 = *(const CGPath **)&v72;
  }
  CGMutablePathRef v22 = CGPathCreateMutableCopy(v39);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v71);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v72);
  return v22;
}

void sub_2558783EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v23 - 208));
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)(v23 - 224));
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v23 - 216));
  _Unwind_Resume(a1);
}

uint64_t enumerateGlyphAssembly(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = GlyphPartRecordGetEndConnectorLength(a1);
  if (!result) {
    return result;
  }
  unsigned int v7 = result;
  unsigned __int16 v8 = 0;
  while (1)
  {
    PartAtIndeCGFloat x = GlyphAssemblyGetPartAtIndex(a1, v8);
    uint64_t result = GlyphPartRecordGetPartFlags(PartAtIndex);
    if ((result & 1) == 0)
    {
      char v11 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, char *))(a3 + 16))(a3, v8, PartAtIndex, &v11);
      if (v11) {
        return result;
      }
      goto LABEL_10;
    }
    if (a2) {
      break;
    }
LABEL_10:
    if (v7 <= ++v8) {
      return result;
    }
  }
  int v10 = 0;
  while (1)
  {
    char v12 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, char *))(a3 + 16))(a3, v8, PartAtIndex, &v12);
    if (v12) {
      return result;
    }
    if (++v10 >= a2) {
      goto LABEL_10;
    }
  }
}

const void **___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v5 = *(const __CTFont **)(a1 + 40);
  CGGlyph GlyphID = GlyphPartRecordGetGlyphID(a3);
  CGPathRef PathForGlyph = CTFontCreatePathForGlyph(v5, GlyphID, 0);
  CGPathRef v14 = PathForGlyph;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  double v9 = *(double *)(v8 + 24);
  if (v9 > 0.0) {
    *(double *)(v8 + 24) = v9 - *(double *)(a1 + 48);
  }
  memset(&v13, 0, sizeof(v13));
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    double v10 = 0.0;
    double v11 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) * *(double *)(a1 + 64);
  }
  else
  {
    double v11 = 0.0;
    double v10 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) * *(double *)(a1 + 64);
  }
  CGAffineTransformMakeTranslation(&v13, v10, v11);
  CGPathAddPath(*(CGMutablePathRef *)(a1 + 72), &v13, PathForGlyph);
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24)
                                                              + (double)GlyphPartRecordGetFullAdvance((uint64_t)a3);
  return EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v14);
}

void sub_2558786EC(_Unwind_Exception *a1)
{
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_40c38_ZTSKN5EQKit10AutoCFTypeIPK8__CTFontEE72c35_ZTSKN5EQKit10AutoCFTypeIP6CGPathEE(uint64_t a1, uint64_t a2)
{
  EQKit::AutoCFType<__CTFont const*>::AutoCFType((const void **)(a1 + 40), (const void **)(a2 + 40));

  return EQKit::AutoCFType<CGPath *>::AutoCFType((const void **)(a1 + 72), (const void **)(a2 + 72));
}

const void **__destroy_helper_block_e8_40c38_ZTSKN5EQKit10AutoCFTypeIPK8__CTFontEE72c35_ZTSKN5EQKit10AutoCFTypeIP6CGPathEE(uint64_t a1)
{
  uint64_t v1 = (const void **)(a1 + 40);
  EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)(a1 + 72));

  return EQKit::AutoCFType<__CTFont const*>::~AutoCFType(v1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke_8(uint64_t a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result = GlyphPartRecordGetGlyphID(a3);
  *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 2 * a2) = result;
  return result;
}

BOOL EQKit::Font::OpenTypeFontCollection::isCharacterStretchableInAxis(EQKit::Font::OpenTypeFontCollection *a1, EQKit::Unicode *this, const EQKit::Script::Info *a3, uint64_t a4)
{
  int v4 = (int)a3;
  int v5 = (int)this;
  int v7 = EQKit::Unicode::lookupChar((uint64_t)this, a4, a3);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = v5;
  }
  unsigned int v9 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(a1, v8);
  return v9 != 0xFFFF && EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)a1, v9, v4) != 0;
}

BOOL EQKit::Font::OpenTypeFontCollection::isCharacterNaturalSizeWithScript(EQKit::Font::OpenTypeFontCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  if (*((unsigned char *)a3 + 8)) {
    BOOL v3 = *((unsigned char *)a3 + 10) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 1;
  }
  int v4 = (int)a2;
  int v6 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  int v7 = v6 ? v6 : v4;
  unsigned int v8 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, v7);
  return v8 == 0xFFFF || EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)this, v8, 2) != 0;
}

BOOL EQKit::Font::OpenTypeFontCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::OpenTypeFontCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  int v3 = (int)a2;
  int v5 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = v3;
  }
  unsigned int v7 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, v6);
  if (v7 == 0xFFFF) {
    return 0;
  }
  unsigned int v8 = v7;
  uint64_t MathGlyphInfo = MathHeaderGetMathGlyphInfo(*((void *)this + 4));
  ExtendedShapesCoverageTable = (unsigned __int16 *)MathGlyphInfoGetExtendedShapesCoverageTable(MathGlyphInfo);
  return CoverageTableGetIndexOfGlyphID(ExtendedShapesCoverageTable, v8) == -1;
}

uint64_t EQKit::Font::OpenTypeFontCollection::isCharacterSymmetricWithScript(EQKit::Font::OpenTypeFontCollection *this, unsigned int a2, const EQKit::Script::Info *a3)
{
  return 1;
}

CGFloat EQKit::Font::OpenTypeFontCollection::naturalBoundsOfCharacterWithScript(const __CTFont **this, EQKit::Unicode *a2, CGFloat *a3)
{
  int v4 = (int)a2;
  int v6 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, (const EQKit::Script::Info *)a3);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = v4;
  }
  CGGlyph glyphs = EQKit::Font::OpenTypeFontCollection::glyphForCharacter((EQKit::Font::OpenTypeFontCollection *)this, v7);
  CTFontRef CopyWithAttributes = this[2];
  if (CopyWithAttributes) {
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, a3[2], 0, 0);
  }
  double v11 = CopyWithAttributes;
  CGSize v9 = *(CGSize *)(MEMORY[0x263F001A8] + 16);
  boundingRects.origin = (CGPoint)*MEMORY[0x263F001A8];
  boundingRects.CGFloat size = v9;
  CTFontGetBoundingRectsForGlyphs(CopyWithAttributes, kCTFontOrientationHorizontal, &glyphs, &boundingRects, 1);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v11);
  return boundingRects.origin.x;
}

void sub_255878A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t EQKit::Font::OpenTypeFontCollection::newCGPathForRadicalWithOverbar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  CGPathRef path = (CGPathRef)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 8730, 2, a2, a4);
  CGRect PathBoundingBox = CGPathGetPathBoundingBox(path);
  double x = PathBoundingBox.origin.x;
  double y = PathBoundingBox.origin.y;
  CGFloat width = PathBoundingBox.size.width;
  CGFloat height = PathBoundingBox.size.height;
  double v24 = a6;
  CGMutablePathRef MutableCopy = CGPathCreateMutableCopy(path);
  v29.origin.double x = x;
  v29.origin.double y = y;
  v29.size.CGFloat width = width;
  v29.size.CGFloat height = height;
  double MaxX = CGRectGetMaxX(v29);
  v30.origin.double x = x;
  v30.origin.double y = y;
  v30.size.CGFloat width = width;
  v30.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v30);
  double v16 = a7 * 0.5;
  CGFloat v17 = MaxX - a7 * 0.5;
  double v19 = *(double *)(a3 + 24);
  double v18 = *(double *)(a3 + 32);
  CGPathMoveToPoint(MutableCopy, 0, v17, MinY);
  CGFloat v20 = MinY + a7;
  CGPathAddLineToPoint(MutableCopy, 0, v17, v20);
  CGFloat v21 = v17 + v16 + v19 + v18 + v24;
  CGPathAddLineToPoint(MutableCopy, 0, v21, v20);
  CGPathAddLineToPoint(MutableCopy, 0, v21, MinY);
  CGPathCloseSubpath(MutableCopy);
  memset(&v25, 0, sizeof(v25));
  CGAffineTransformMakeTranslation(&v25, -x, -y);
  uint64_t v22 = MEMORY[0x25A28F920](MutableCopy, &v25);
  EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)&MutableCopy);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&path);
  return v22;
}

void sub_255878BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  double v10 = va_arg(va1, const void *);
  EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)va);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)va1);
  _Unwind_Resume(a1);
}

CGPath *EQKit::Font::OpenTypeFontCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::OpenTypeFontCollection *this, CGFloat *a2, double a3, double a4, double *a5)
{
  unsigned int v8 = (const __CTFont *)*((void *)this + 2);
  *(_DWORD *)UniChar characters = 10188;
  *(_DWORD *)CGGlyph glyphs = -1;
  if (CTFontGetGlyphsForCharacters(v8, characters, glyphs, 1)) {
    CGGlyph v9 = glyphs[0];
  }
  else {
    CGGlyph v9 = -1;
  }
  CTFontRef CopyWithAttributes = (const __CTFont *)*((void *)this + 2);
  if (CopyWithAttributes) {
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, a2[2], 0, 0);
  }
  CGFloat v20 = CopyWithAttributes;
  CGPathRef PathForGlyph = CTFontCreatePathForGlyph(CopyWithAttributes, v9, 0);
  CGRect PathBoundingBox = CGPathGetPathBoundingBox(PathForGlyph);
  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeTranslation(&v17, 0.0, PathBoundingBox.size.height);
  CGAffineTransformScale(&v18, &v17, 1.0, -1.0);
  double v11 = (const CGPath *)MEMORY[0x25A28F920](PathForGlyph, &v18);
  *(void *)UniChar characters = v11;
  if (PathForGlyph)
  {
    CFRelease(PathForGlyph);
    double v11 = *(const CGPath **)characters;
  }
  *(void *)UniChar characters = 0;
  CGPathRef PathForGlyph = v11;
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)characters);
  EQKitPath::EQKitPath((EQKitPath *)characters, PathForGlyph);
  EQKitPath::findStemForEdge((unint64_t **)characters, 2, (uint64_t)glyphs);
  if (LOBYTE(glyphs[0]))
  {
    CGMutablePathRef Mutable = CGPathCreateMutable();
    long long v14 = *MEMORY[0x263F00148];
    EQKitPath::appendToCGPathWithModifiedStem((uint64_t)characters, Mutable, (double *)&v14, 0, (uint64_t)glyphs, a4);
  }
  else
  {
    CGMutablePathRef Mutable = 0;
  }
  EQKitPath::~EQKitPath((EQKitPath *)characters);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&PathForGlyph);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v20);
  return Mutable;
}

void sub_255878D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v11 - 64));
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)(v11 - 56));
  _Unwind_Resume(a1);
}

void sub_255878DC0()
{
}

double EQKit::Font::OpenTypeFontCollection::accentOverHAdjustment(EQKit::Font::OpenTypeFontCollection *this, unsigned int a2, const EQKit::Script::Info *a3)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 48))(v5);
  return EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v5, *((double *)a3 + 2)) * 0.5;
}

double EQKit::Font::OpenTypeFontCollection::accentUnderHAdjustment(EQKit::Font::OpenTypeFontCollection *this, unsigned int a2, const EQKit::Script::Info *a3)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 48))(v5);
  return EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v5, *((double *)a3 + 2)) * 0.5;
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (_WORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_255878F08(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::vector<CGSize>::vector(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (_OWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_255878FCC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 4++*(void *)(this + 8) = result;
  *(_OWORD *)(a1 + ++*(void *)(this + 64) = v3;
  return result;
}

uint64_t ___ZL26getGlyphAssemblyParametersPK14_GlyphAssemblyddP23GlyphAssemblyParameters_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = GlyphPartRecordGetPartFlags(a3) & 1;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v6)
  {
    ++*(_WORD *)(v7 + 72);
    uint64_t result = GlyphPartRecordGetFullAdvance(a3);
    CGGlyph v9 = (double *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  }
  else
  {
    ++*(_WORD *)(v7 + 74);
    uint64_t result = GlyphPartRecordGetFullAdvance(a3);
    CGGlyph v9 = (double *)(*(void *)(*(void *)(a1 + 32) + 8) + 56);
  }
  *CGGlyph v9 = *v9 + (double)result;
  if (v6 | a2)
  {
    uint64_t result = GlyphPartRecordGetStartConnectorLength(a3);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(double *)(v10 + 64) > (double)result) {
      *(double *)(v10 + ++*(void *)(this + 64) = (double)result;
    }
  }
  if (v6 || *(unsigned __int16 *)(a1 + 40) - 1 > a2)
  {
    uint64_t result = GlyphPartRecordGetEndConnectorLength(a3);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(double *)(v11 + 64) > (double)result) {
      *(double *)(v11 + ++*(void *)(this + 64) = (double)result;
    }
  }
  return result;
}

const void **EQKit::AutoCFType<__CFString const*>::~AutoCFType(const void **a1)
{
  int8x8_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **EQKit::AutoCFType<__CFData const*>::~AutoCFType(const void **a1)
{
  int8x8_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **EQKit::AutoCFType<CGPath *>::~AutoCFType(const void **a1)
{
  int8x8_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **EQKit::AutoCFType<__CTFont const*>::AutoCFType(const void **a1, const void **a2)
{
  long long v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

const void **EQKit::AutoCFType<CGPath *>::AutoCFType(const void **a1, const void **a2)
{
  long long v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void EQKit::Font::CharacterProperty::Map::newMapFromDictionary(EQKit::Font::CharacterProperty::Map *this, NSDictionary *a2, const EQKit::Environment::Version *a3)
{
}

void sub_2558798E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKit::Font::CharacterProperty::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Font::CharacterProperty::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255879A0C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!EQKit::Font::CharacterProperty::Map::Key::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!EQKit::Font::CharacterProperty::Map::Key::operator<(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(void *)(this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = EQKit::Font::CharacterProperty::Map::Key::Key(v6 + 4, *a2);
  *((_DWORD *)v6 + 16) = 1;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_255879BC0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *EQKit::Font::CharacterProperty::Map::Key::Key(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(void *)(this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:ne180100]<EQKit::Font::CharacterProperty::Map::Key const&>(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_255879D94(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:ne180100]<EQKit::Font::CharacterProperty::Map::Key const&>(void *a1, uint64_t a2)
{
  uint64_t v3 = EQKit::Font::CharacterProperty::Map::Key::Key(a1, a2);
  EQKit::StemStretch::Config::Entry::Entry((uint64_t)(v3 + 4));
  return a1;
}

void sub_255879DE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::Metric::LengthEntry::LengthEntry(uint64_t this)
{
  for (uint64_t i = 0; i != 128; i += 16)
  {
    uint64_t v2 = this + i;
    *(_DWORD *)uint64_t v2 = 1;
    *(void *)(v2 + ++*(void *)(this + 8) = 0;
  }
  uint64_t v3 = 128;
  do
  {
    uint64_t v4 = this + v3;
    *(_DWORD *)uint64_t v4 = 1;
    *(void *)(v4 + ++*(void *)(this + 8) = 0;
    v3 += 16;
  }
  while (v4 + 16 != this + 256);
  uint64_t v5 = 256;
  do
  {
    uint64_t v6 = this + v5;
    *(_DWORD *)uint64_t v6 = 1;
    *(void *)(v6 + ++*(void *)(this + 8) = 0;
    v5 += 16;
  }
  while (v6 + 16 != this + 384);
  for (uint64_t j = 0; j != 128; j += 16)
  {
    uint64_t v8 = this + j;
    *(_DWORD *)uint64_t v8 = 0;
    *(void *)(v8 + ++*(void *)(this + 8) = 0;
    *(_DWORD *)(v8 + 12++*(void *)(this + 8) = 0;
    *(void *)(v8 + 136) = 0;
    *(_DWORD *)(v8 + 256) = 0;
    *(void *)(v8 + 2++*(void *)(this + 64) = 0;
  }
  return this;
}

double EQKit::Font::Metric::LengthEntry::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    for (uint64_t i = 0; i != 128; i += 16)
    {
      uint64_t v3 = a1 + i;
      *(_DWORD *)uint64_t v3 = *(_DWORD *)(a2 + i);
      *(void *)(v3 + ++*(void *)(this + 8) = *(void *)(a2 + i + 8);
      *(_DWORD *)(v3 + 12++*(void *)(this + 8) = *(_DWORD *)(a2 + i + 128);
      *(void *)(v3 + 136) = *(void *)(a2 + i + 136);
      *(_DWORD *)(v3 + 256) = *(_DWORD *)(a2 + i + 256);
      double result = *(double *)(a2 + i + 264);
      *(double *)(v3 + 2++*(void *)(this + 64) = result;
    }
  }
  return result;
}

double EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule(EQKit::Font::Metric::LengthEntry *this, const EQKit::Script::Info *a2, double a3)
{
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 >= 2uLL) {
    uint64_t v6 = 2;
  }
  if (v6) {
    uint64_t v7 = 2 * v6 + 2;
  }
  else {
    uint64_t v7 = 2 * (*((unsigned char *)a2 + 8) == 0);
  }
  uint64_t v8 = v7 + *((unsigned __int8 *)a2 + 9);
  uint64_t v9 = (_DWORD *)((char *)this + 16 * v8);
  if ((*v9 & 0xFFFFFFFD) != 0) {
    double v10 = EQKitLength::resolveToAbsoluteWithSizeAndRule((EQKit::Font::Metric::LengthEntry *)((char *)this + 16 * v8), *((double *)a2 + 2), a3);
  }
  else {
    double v10 = 0.0;
  }
  int v12 = v9[32];
  uint64_t v11 = (EQKitLength *)(v9 + 32);
  if ((v12 & 0xFFFFFFFD) != 0)
  {
    double v13 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v11, *((double *)a2 + 2), a3);
    if (v10 < v13) {
      double v10 = v13;
    }
  }
  if ((*((_DWORD *)this + 4 * v8 + 64) & 0xFFFFFFFD) != 0)
  {
    double v14 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v11, *((double *)a2 + 2), a3);
    if (v10 > v14) {
      return v14;
    }
  }
  return v10;
}

uint64_t EQKit::Font::Metric::LengthEntry::fromString(const std::string *a1, uint64_t a2)
{
  EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)v59);
  int v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v4 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 0;
  }
  std::string::size_type v7 = 0;
  while (memchr(" \t\n", v5->__r_.__value_.__s.__data_[v7], 3uLL))
  {
    if (size == ++v7) {
      return 0;
    }
  }
  if (v7 == -1) {
    return 0;
  }
  uint64_t v54 = a2;
  unint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    int v9 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      std::string::size_type v11 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v11 = a1->__r_.__value_.__r.__words[0];
    }
    if (v10) {
      std::string::size_type v12 = a1->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    if (v12 <= v7)
    {
LABEL_31:
      unint64_t v16 = -1;
    }
    else
    {
      double v13 = (unsigned __int8 *)(v11 + v7);
      double v14 = (unsigned __int8 *)(v11 + v12);
LABEL_22:
      uint64_t v15 = 0;
      while (*v13 != asc_2558E2677[v15])
      {
        if (++v15 == 3)
        {
          if (++v13 != v14) {
            goto LABEL_22;
          }
          goto LABEL_31;
        }
      }
      if (v13 == v14) {
        goto LABEL_31;
      }
      unint64_t v16 = (unint64_t)&v13[-v11];
      CGAffineTransform v17 = &v13[-v11 - v7];
      if (v16 != -1) {
        std::string::size_type v12 = (std::string::size_type)v17;
      }
    }
    std::string::basic_string(&__str, a1, v7, v12, (std::allocator<char> *)&v57);
    int v18 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v18 >= 0) {
      double v19 = a1;
    }
    else {
      double v19 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    }
    if (v18 >= 0) {
      unint64_t v20 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      unint64_t v20 = a1->__r_.__value_.__l.__size_;
    }
    if (v20 <= v16)
    {
LABEL_41:
      std::string::size_type v7 = -1;
    }
    else
    {
      while (memchr(" \t\n", v19->__r_.__value_.__s.__data_[v16], 3uLL))
      {
        if (v20 == ++v16) {
          goto LABEL_41;
        }
      }
      std::string::size_type v7 = v16;
    }
    std::string::size_type v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v21 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (!v21) {
      goto LABEL_54;
    }
    uint64_t v23 = 0;
    while (p_str->__r_.__value_.__s.__data_[v23] != 61)
    {
      if (v21 == ++v23) {
        goto LABEL_54;
      }
    }
    if (v21 == v23)
    {
LABEL_54:
      BOOL v24 = 0;
      int v25 = 0;
      int v26 = 0;
      uint64_t v27 = 0;
      uint64_t v23 = -1;
      goto LABEL_55;
    }
    if (v23)
    {
      if (v23 == -1)
      {
        BOOL v24 = 0;
        int v25 = 0;
        int v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_55;
      }
      BOOL v24 = p_str->__r_.__value_.__s.__data_[v23 - 1] == 39;
    }
    else
    {
      BOOL v24 = 0;
    }
    std::string::basic_string(&v57, &__str, 0, v23 - v24, (std::allocator<char> *)&v55);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v57.__r_.__value_.__l.__size_;
    }
    switch(v35)
    {
      case 4uLL:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v37 = &v57;
        }
        else {
          unint64_t v37 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if (!memcmp(v37, "Dmin", 4uLL))
        {
LABEL_109:
          uint64_t v27 = 0;
          int v25 = 0;
          int v26 = 1;
          goto LABEL_127;
        }
        if (LODWORD(v37->__r_.__value_.__l.__data_) == 2019650884) {
          goto LABEL_108;
        }
        if (!memcmp(v37, "Tmin", 4uLL))
        {
          int v25 = 0;
          int v26 = 1;
LABEL_124:
          uint64_t v27 = 2;
          goto LABEL_127;
        }
        if (LODWORD(v37->__r_.__value_.__l.__data_) == 2019650900)
        {
          int v26 = 0;
          int v25 = 1;
          goto LABEL_124;
        }
        if (!memcmp(v37, "Smin", 4uLL))
        {
          int v25 = 0;
          int v26 = 1;
          goto LABEL_126;
        }
        if (LODWORD(v37->__r_.__value_.__l.__data_) == 2019650899)
        {
          int v26 = 0;
          int v25 = 1;
LABEL_126:
          uint64_t v27 = 4;
          goto LABEL_127;
        }
        break;
      case 3uLL:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v38 = &v57;
        }
        else {
          uint64_t v38 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if (!memcmp(v38, "min", 3uLL)) {
          goto LABEL_109;
        }
        if (LOWORD(v38->__r_.__value_.__l.__data_) == 24941 && v38->__r_.__value_.__s.__data_[2] == 120)
        {
LABEL_108:
          uint64_t v27 = 0;
          int v26 = 0;
          int v25 = 1;
          goto LABEL_127;
        }
        break;
      case 1uLL:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v36 = &v57;
        }
        else {
          double v36 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if (v36->__r_.__value_.__s.__data_[0] == 68)
        {
          uint64_t v27 = 0;
          int v26 = 0;
          int v25 = 0;
LABEL_127:
          int v40 = 1;
          goto LABEL_128;
        }
        if (!memcmp(v36, "T", 1uLL))
        {
          int v26 = 0;
          int v25 = 0;
          int v40 = 1;
          uint64_t v27 = 2;
          goto LABEL_128;
        }
        if (!memcmp(v36, "S", 1uLL))
        {
          int v26 = 0;
          int v25 = 0;
          int v40 = 1;
          uint64_t v27 = 4;
          goto LABEL_128;
        }
        break;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v57.__r_.__value_.__l.__data_, "SS"))
    {
      int v26 = 0;
      int v25 = 0;
      int v40 = 1;
      uint64_t v27 = 6;
      goto LABEL_128;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v57.__r_.__value_.__l.__data_, "SSmin"))
    {
      int v25 = 0;
      int v26 = 1;
      uint64_t v27 = 6;
      goto LABEL_127;
    }
    BOOL v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v57.__r_.__value_.__l.__data_, "SSmax");
    int v25 = v41;
    int v26 = 0;
    if (v41) {
      uint64_t v27 = 6;
    }
    else {
      uint64_t v27 = 0;
    }
    int v40 = v41;
LABEL_128:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v57.__r_.__value_.__l.__data_);
      if (!v40)
      {
LABEL_132:
        int v33 = 0;
        goto LABEL_69;
      }
    }
    else if (!v40)
    {
      goto LABEL_132;
    }
LABEL_55:
    std::string::basic_string(&v57, &__str, v23 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    EQKitLength::EQKitLength(&v55, &v57, 1);
    if ((v55 & 0xFFFFFFFD) != 0)
    {
      unint64_t v28 = v27 + v24;
      if (v26)
      {
        CGRect v29 = &v59[4 * v28];
        unsigned char v29[32] = v55;
        *((void *)v29 + 17) = v56;
      }
      else if (v25)
      {
        CGRect v30 = &v59[4 * v28];
        v30[64] = v55;
        *((void *)v30 + 33) = v56;
      }
      else
      {
        if (v28 < v8 || v8 == 0x7FFFFFFFFFFFFFFFLL) {
          unint64_t v8 = v27 + v24;
        }
        uint64_t v32 = &v59[4 * v28];
        _DWORD *v32 = v55;
        *((void *)v32 + 1) = v56;
      }
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    int v33 = 1;
LABEL_69:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v7 == -1) {
      char v34 = 0;
    }
    else {
      char v34 = v33;
    }
  }
  while ((v34 & 1) != 0);
  if (v8) {
    int v42 = 0;
  }
  else {
    int v42 = v33;
  }
  if (v42 != 1) {
    return 0;
  }
  if (!v61)
  {
    int v61 = v59[0];
    uint64_t v62 = v60;
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  CGFloat v45 = &v63;
  uint64_t v46 = 2;
  uint64_t v47 = 1;
  do
  {
    int v48 = *(_DWORD *)v45;
    uint64_t v49 = v47;
    if (!*(_DWORD *)v45)
    {
      std::string v50 = &v59[8 * v44];
      int v48 = *v50;
      *(_DWORD *)CGFloat v45 = *v50;
      v45[1] = *((void *)v50 + 1);
      uint64_t v49 = v44;
    }
    uint64_t v51 = v47;
    if (!*((_DWORD *)v45 + 4))
    {
      uint64_t v52 = v46;
      uint64_t v51 = v47;
      if (v47 != v49)
      {
        uint64_t v52 = (2 * v43) | 1;
        int v48 = v59[4 * v52];
        uint64_t v51 = v43;
      }
      *((_DWORD *)v45 + 4) = v48;
      void v45[3] = *(&v60 + 2 * v52);
    }
    ++v47;
    v46 += 2;
    v45 += 4;
    uint64_t v43 = v51;
    uint64_t v44 = v49;
  }
  while (v47 != 4);
  EQKit::Font::Metric::LengthEntry::operator=(v54, (uint64_t)v59);
  return 1;
}

void sub_25587A634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *EQKit::Font::Metric::Map::defaultForLengthMetric(int a1)
{
  if ((a1 - 11) > 0x15) {
    return 0;
  }
  else {
    return off_2653C5428[a1 - 11];
  }
}

void EQKit::Font::Metric::Map::newMapFromDictionary(EQKit::Font::Metric::Map *this, NSDictionary *a2)
{
}

void sub_25587A9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 89) < 0) {
    operator delete(*(void **)(v21 - 112));
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::CharacterMapping::newMapFromDictionary(EQKit::Font::CharacterMapping *this, NSDictionary *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  std::string::size_type v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        std::string::size_type v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        std::string::size_type v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    std::string::size_type v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 2++*(void *)(this + 8) = **a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void EQKit::Font::CharacterArray::newArrayFromArray(EQKit::Font::CharacterArray *this, NSArray *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

void _appendFromWideString(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  id v6 = (id)[[NSString alloc] initWithBytes:(char *)v5 + 4 * a3 length:4 * a4 encoding:2617245952];
  [a1 appendString:v6];
}

void sub_25587C48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 145) < 0) {
    operator delete(*(void **)(v20 - 168));
  }
  _Unwind_Resume(exception_object);
}

std::string *EQKit::AttributeCollection::setValueForKey(uint64_t a1, const std::string *a2, int a3, uint64_t a4)
{
  uint64_t v7 = a4;
  int v8 = a3;
  int v9 = &v7;
  uint64_t v5 = (std::string *)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 80), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return std::string::operator=(v5 + 2, a2);
}

CGColorRef EQKitMathMLParserCreateCGColorFromString(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(_OWORD *)components = xmmword_2558BE600;
  long long v17 = unk_2558BE610;
  unsigned int v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80) != 0)
  {
    std::string::size_type v2 = *(void *)(a1 + 8);
    if (v2 <= 1) {
      return 0;
    }
    if (**(unsigned char **)a1 != 35)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, v2);
      goto LABEL_10;
    }
LABEL_7:
    if (EQKitMathMLParserConvertHexColorStringToRGBFloatValues((std::string *)a1, components, &components[1], (double *)&v17))goto LABEL_31; {
    return 0;
    }
  }
  if (v1 < 2) {
    return 0;
  }
  if (*(unsigned char *)a1 == 35) {
    goto LABEL_7;
  }
  std::string __p = *(std::string *)a1;
LABEL_10:
  std::string::size_type v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
  }
  if (!v6)
  {
LABEL_28:
    int v12 = EQKitMathMLParserConvertNamedColorStringToRGBFloatValues((std::string::size_type)&__p, components, &components[1], (double *)&v17);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    int v9 = p_p->__r_.__value_.__s.__data_[0];
    if (p_p->__r_.__value_.__s.__data_[0] > 90) {
      break;
    }
    if ((char)v9 < 65) {
      goto LABEL_33;
    }
    p_p->__r_.__value_.__s.__data_[0] = v9 + 32;
    std::string::size_type v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
LABEL_21:
    p_p = (std::string *)((char *)p_p + 1);
    if ((v4 & 0x80u) == 0) {
      unsigned int v10 = &__p;
    }
    else {
      unsigned int v10 = (std::string *)v7;
    }
    if ((v4 & 0x80u) == 0) {
      std::string::size_type v11 = v4;
    }
    else {
      std::string::size_type v11 = size;
    }
    if (p_p == (std::string *)((char *)v10 + v11)) {
      goto LABEL_28;
    }
  }
  if ((v9 - 97) <= 0x19) {
    goto LABEL_21;
  }
LABEL_33:
  int v12 = 0;
  if ((v4 & 0x80) != 0) {
LABEL_29:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  if (v12)
  {
LABEL_31:
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    CGColorRef v3 = CGColorCreate(DeviceRGB, components);
    CGColorSpaceRelease(DeviceRGB);
    return v3;
  }
  return 0;
}

void sub_25587C898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **EQKit::AttributeCollection::setValueForKey(uint64_t a1, CFTypeRef *a2, int a3, uint64_t a4)
{
  uint64_t v7 = a4;
  int v8 = a3;
  int v9 = &v7;
  uint64_t v5 = (const void **)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 536), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return EQKitTypes::CFRetainRelease::operator=(v5 + 6, a2);
}

void sub_25587CAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _contentAppendStringIfNeeded(id *a1, std::string *a2, unsigned char *a3, unsigned char *a4, int a5)
{
  if (!*a3) {
    return;
  }
  int v8 = a2;
  if (*a4)
  {
    int v10 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v10 >= 0) {
      std::string::size_type v11 = a2;
    }
    else {
      std::string::size_type v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_41;
    }
    std::string::size_type v13 = 0;
    while (memchr(" \t\n", v11->__r_.__value_.__s.__data_[v13], 3uLL))
    {
      if (size == ++v13) {
        goto LABEL_41;
      }
    }
    if (v13 == -1) {
      goto LABEL_41;
    }
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  std::string::size_type v14 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  if (a5)
  {
    std::string::size_type v15 = v8->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0) {
      unint64_t v16 = v8;
    }
    else {
      unint64_t v16 = (std::string *)v8->__r_.__value_.__r.__words[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v17 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v17 = v8->__r_.__value_.__l.__size_;
    }
    uint64_t v18 = (uint64_t)&v16[-1].__r_.__value_.__r.__words[2] + 7;
    while (v17)
    {
      if (!memchr(" \t\n", *(char *)(v18 + v17--), 3uLL)) {
        goto LABEL_31;
      }
    }
    uint64_t v17 = -1;
    if (v13) {
      goto LABEL_38;
    }
  }
  else
  {
    std::string::size_type v15 = v8->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v20 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v8->__r_.__value_.__l.__size_;
    }
    uint64_t v17 = v20 - 1;
LABEL_31:
    if (v13) {
      goto LABEL_38;
    }
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v21 = v14;
  }
  else {
    std::string::size_type v21 = v15;
  }
  if (v17 != v21 - 1)
  {
LABEL_38:
    std::string::basic_string(&v27, v8, v13, v17 - v13 + 1, (std::allocator<char> *)&v28);
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8->__r_.__value_.__l.__data_);
    }
    *int v8 = v27;
  }
LABEL_41:
  id v22 = [NSString alloc];
  if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = (uint64_t *)v8;
  }
  else {
    uint64_t v23 = (uint64_t *)v8->__r_.__value_.__r.__words[0];
  }
  uint64_t v24 = [v22 initWithUTF8String:v23];
  if (v24)
  {
    int v25 = (void *)v24;
    id v26 = *a1;
    if (!*a1)
    {
      id v26 = objc_alloc_init(MEMORY[0x263EFF980]);
      *a1 = v26;
    }
    [v26 addObject:v25];
  }
  if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
  {
    v8->__r_.__value_.__l.__size_ = 0;
    int v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v8->__r_.__value_.__s + 23) = 0;
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  *a3 = 0;
  *a4 = 0;
}

void sub_25587CFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

xmlEntityPtr EQKitMathMLParserGetEntity(void *a1, char *__s)
{
  if (_entityMap(void)::onceToken != -1) {
    dispatch_once(&_entityMap(void)::onceToken, &__block_literal_global_142);
  }
  uint64_t v4 = _entityMap(void)::sMap;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v5 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(v4, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)(v4 + 8) == v5) {
    return xmlSAX2GetEntity(a1, (const xmlChar *)__s);
  }
  xmlEntityPtr result = (xmlEntityPtr)v5[7];
  if (!result) {
    return xmlSAX2GetEntity(a1, (const xmlChar *)__s);
  }
  return result;
}

void sub_25587D2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string::size_type a1, double *a2, double *a3, double *a4)
{
  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken != -1) {
    dispatch_once(&EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken, &__block_literal_global_0);
  }
  if (!EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap) {
    return 1;
  }
  std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v9 = a1;
  }
  else {
    std::string::size_type v9 = *(void *)a1;
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  __dst.__r_.__value_.__r.__words[0] = v9;
  __dst.__r_.__value_.__l.__size_ = v8;
  uint64_t v10 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>(EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap, (uint64_t)&__dst);
  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap + 8 == v10) {
    return 0;
  }
  std::string::size_type v11 = *(void *)(v10 + 56);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v12 = *(const void **)(v10 + 48);
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_19;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v10 + 56);
  p_dst = &__dst;
  if (v11) {
LABEL_19:
  }
    memmove(p_dst, v12, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  uint64_t v14 = EQKitMathMLParserConvertHexColorStringToRGBFloatValues(&__dst, a2, a3, a4);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_25587D440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke()
{
  xmlEntityPtr result = (uint64_t **)operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    unsigned int v1 = result;
    result[2] = 0;
    result[1] = 0;
    *xmlEntityPtr result = (uint64_t *)(result + 1);
    std::string::size_type v2 = &_HTMLColors;
    uint64_t v3 = 147;
    do
    {
      uint64_t v4 = v2;
      xmlEntityPtr result = (uint64_t **)std::__tree<std::__value_type<std::string_view,std::string_view>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::string_view>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::string_view>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v1, (uint64_t)v2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4);
      *((_OWORD *)result + 3) = *((_OWORD *)v2 + 1);
      v2 += 4;
      --v3;
    }
    while (v3);
    EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap = (uint64_t)v1;
  }
  return result;
}

uint64_t EQKitMathMLParserConvertHexColorStringToRGBFloatValues(std::string *__str, double *a2, double *a3, double *a4)
{
  int v4 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = __str;
  }
  else {
    std::string::size_type v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v7 = v6->__r_.__value_.__s.__data_[0];
  std::string::size_type v8 = size - (v7 == 35);
  if (v8 != 6 && v8 != 3) {
    return 0;
  }
  if (size)
  {
    uint64_t v14 = 0;
    while (memchr("#0123456789abcdefABCDEF", v6->__r_.__value_.__s.__data_[v14], 0x17uLL))
    {
      if (size == ++v14) {
        goto LABEL_19;
      }
    }
    if (v14 != -1) {
      return 0;
    }
  }
LABEL_19:
  unint64_t v16 = 3;
  if (v7 == 35) {
    unint64_t v16 = 4;
  }
  char v17 = size > v16;
  if (v17) {
    std::string::size_type v18 = 2;
  }
  else {
    std::string::size_type v18 = 1;
  }
  if (v17) {
    double v19 = 255.0;
  }
  else {
    double v19 = 15.0;
  }
  std::string::basic_string(&v22, __str, (-3 << v17) + size, v18, (std::allocator<char> *)&v21);
  std::string::basic_string(&v21, __str, size - 2 * v18, v18, (std::allocator<char> *)&__p);
  std::string::basic_string(&__p, __str, size - v18, v18, (std::allocator<char> *)&v23);
  *a2 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v22) / v19;
  *a3 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v21) / v19;
  *a4 = (double)(unint64_t)EQKitMathMLParserHexToDec(&__p) / v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_25587D6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserHexToDec(const std::string *a1)
{
  std::istringstream::basic_istringstream[abi:ne180100](v4, a1, 8);
  uint64_t v3 = 0;
  *(_DWORD *)((char *)&v4[1] + *(void *)(v4[0] - 24)) = *(_DWORD *)((unsigned char *)&v4[1] + *(void *)(v4[0] - 24)) & 0xFFFFFFB5 | 8;
  MEMORY[0x25A28FEA0](v4, &v3);
  uint64_t v1 = v3;
  v4[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  _WORD v4[2] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A28FFF0](&v6);
  return v1;
}

void sub_25587D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    int v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>(uint64_t a1, void *a2, uint64_t *a3)
{
  char v5 = *(uint64_t **)(a1 + 8);
  xmlEntityPtr result = (uint64_t *)(a1 + 8);
  int v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unsigned int v7 = *((_DWORD *)a3 + 2);
    do
    {
      while (1)
      {
        std::string::size_type v8 = v4;
        unint64_t v9 = v4[4];
        BOOL v10 = v6 < v9;
        unsigned int v11 = *((_DWORD *)v8 + 10);
        if (v9 == v6) {
          BOOL v10 = v7 < v11;
        }
        if (!v10) {
          break;
        }
        int v4 = (uint64_t *)*v8;
        xmlEntityPtr result = v8;
        if (!*v8) {
          goto LABEL_14;
        }
      }
      BOOL v12 = v11 < v7;
      BOOL v13 = v9 == v6;
      BOOL v14 = v9 < v6;
      if (v13) {
        BOOL v14 = v12;
      }
      if (!v14) {
        break;
      }
      xmlEntityPtr result = v8 + 1;
      int v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    std::string::size_type v8 = result;
  }
LABEL_14:
  *a2 = v8;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKit::ScriptLevel,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKit::ScriptLevel>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x40uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    *((unsigned char *)v7 + 56) = 1;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x40uLL);
    unsigned __int16 v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 1;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitLength>>(uint64_t a1, uint64_t **a2, uint64_t *a3, _OWORD *a4)
{
  unint64_t v6 = a4;
  xmlEntityPtr result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (uint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3) {
    return std::vector<EQKitLength>::__assign_with_size[abi:ne180100]<EQKitLength*,EQKitLength*>(result, *a3, a3[1], (a3[1] - *a3) >> 4);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x48uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + ++*(void *)(this + 8) = 0;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitTypes::VAlign::Enum>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a4;
  xmlEntityPtr result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (uint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3) {
    return std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(result, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  return result;
}

void EQKit::AttributeCollection::setValueForKey<std::vector<std::string>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a4;
  char v5 = (std::vector<std::wstring> *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (uint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (v5 != (std::vector<std::wstring> *)a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitPseudoUnitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitPseudoUnitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x48uLL);
    unsigned __int16 v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 1;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + ++*(void *)(this + 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = **a4;
    *((_WORD *)v7 + 24) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v12, a2);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x38uLL);
    v10[1] = a1 + 1;
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    char v11 = 1;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::string::size_type v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      EQKitTypes::CFRetainRelease::~CFRetainRelease(v2 + 6);
    }
    operator delete(v2);
  }
}

uint64_t std::deque<EQKitMathMLParserState>::~deque[abi:ne180100](void *a1)
{
  std::string::size_type v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      std::string::size_type v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unsigned int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

void ___ZL10_entityMapv_block_invoke()
{
}

void sub_25587E0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,_xmlEntity *>,std::__map_value_compare<std::string,std::__value_type<std::string,_xmlEntity *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_xmlEntity *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x40uLL);
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _DWORD v9[2] = 0;
    *unint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::deque<EQKitMathMLParserState>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<EQKitMathMLParserState>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<EQKitMathMLParserState>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      std::string::size_type v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      std::string::size_type v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  std::string v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  CGRect v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25587E4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitMathMLParserState>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_OWORD *std::__tree<std::__value_type<std::string_view,std::string_view>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::string_view>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::string_view>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_25587EBD0(_Unwind_Exception *a1)
{
}

uint64_t std::set<EQKitTypes::Attributes::Enum>::set[abi:ne180100]<EQKitTypes::Attributes::Enum const*>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_25587EC74(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    double v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      double v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_25587EFC0(_Unwind_Exception *a1)
{
}

void sub_25587F148(_Unwind_Exception *a1)
{
}

void *EQKit::AttributeCollection::AttributeCollection(void *this)
{
  this[2] = 0;
  *this = &unk_27045AFC0;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  this[8] = 0;
  this[6] = 0;
  this[7] = this + 8;
  this[11] = 0;
  this[9] = 0;
  this[10] = this + 11;
  this[14] = 0;
  this[12] = 0;
  this[13] = this + 14;
  this[17] = 0;
  this[20] = 0;
  this[15] = 0;
  this[16] = this + 17;
  this[18] = 0;
  this[19] = this + 20;
  this[23] = 0;
  this[21] = 0;
  this[22] = this + 23;
  this[26] = 0;
  this[24] = 0;
  this[25] = this + 26;
  this[29] = 0;
  this[27] = 0;
  this[28] = this + 29;
  this[32] = 0;
  this[33] = 0;
  this[30] = 0;
  this[31] = this + 32;
  this[34] = this + 35;
  this[35] = 0;
  this[38] = 0;
  this[39] = 0;
  this[36] = 0;
  this[37] = this + 38;
  this[40] = this + 41;
  this[41] = 0;
  this[44] = 0;
  this[45] = 0;
  this[42] = 0;
  this[43] = this + 44;
  this[46] = this + 47;
  this[47] = 0;
  this[50] = 0;
  this[51] = 0;
  this[48] = 0;
  this[49] = this + 50;
  this[52] = this + 53;
  this[53] = 0;
  this[56] = 0;
  this[57] = 0;
  this[54] = 0;
  this[55] = this + 56;
  this[58] = this + 59;
  this[59] = 0;
  this[62] = 0;
  this[63] = 0;
  this[60] = 0;
  this[61] = this + 62;
  this[66] = 0;
  this[65] = 0;
  this[64] = this + 65;
  this[69] = 0;
  this[68] = 0;
  this[67] = this + 68;
  return this;
}

void EQKit::AttributeCollection::~AttributeCollection(EQKit::AttributeCollection *this)
{
  EQKit::AttributeCollection::~AttributeCollection(this);

  JUMPOUT(0x25A290040);
}

{
  *(void *)this = &unk_27045AFC0;
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy((uint64_t)this + 536, *((const void ***)this + 68));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 512, *((void **)this + 65));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 488, *((void **)this + 62));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 464, *((void **)this + 59));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 440, *((void **)this + 56));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 416, *((void **)this + 53));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 392, *((void **)this + 50));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 344, *((void **)this + 44));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 248, *((void **)this + 32));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 224, *((void **)this + 29));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 176, *((void **)this + 23));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(uint64_t a1, const void **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, a2[1]);
    EQKitTypes::CFRetainRelease::~CFRetainRelease(a2 + 6);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *((void *)a2 + 1));
    if (a2[71] < 0) {
      operator delete(*((void **)a2 + 6));
    }
    operator delete(a2);
  }
}

void sub_25587F8A0(_Unwind_Exception *a1)
{
}

void sub_25587FB18(_Unwind_Exception *a1)
{
}

void sub_25587FD74(_Unwind_Exception *a1)
{
}

void sub_25587FFA0(_Unwind_Exception *a1)
{
}

void sub_25588011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2558801E8(_Unwind_Exception *a1)
{
}

void sub_2558802DC(_Unwind_Exception *a1)
{
}

void sub_2558803C8(_Unwind_Exception *a1)
{
}

void sub_255880AA8(_Unwind_Exception *a1)
{
}

void sub_255880BC8(_Unwind_Exception *a1)
{
}

void sub_2558811DC(_Unwind_Exception *a1)
{
}

void sub_255881438(_Unwind_Exception *a1)
{
}

void sub_25588171C(_Unwind_Exception *a1)
{
}

void sub_255881BD4(_Unwind_Exception *a1)
{
}

void sub_255881CCC(_Unwind_Exception *a1)
{
}

void sub_255882008(_Unwind_Exception *a1)
{
}

void sub_25588235C(_Unwind_Exception *a1)
{
}

void sub_2558827B4(_Unwind_Exception *a1)
{
}

void sub_255882CD0(_Unwind_Exception *a1)
{
}

void sub_255883078(_Unwind_Exception *a1)
{
}

void sub_2558832F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_255883388(_Unwind_Exception *a1)
{
}

void sub_2558836BC(_Unwind_Exception *a1)
{
}

void sub_2558837E0(_Unwind_Exception *a1)
{
}

void sub_255883B80(_Unwind_Exception *a1)
{
}

uint64_t EQKitMathMLElement::fromString(uint64_t *a1)
{
  {
    unint64_t v5 = a1;
    a1 = v5;
    if (v6)
    {
      std::map<std::string_view const,EQKitMathMLElement::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitMathMLElement::Enum> const*>((uint64_t)&EQKitMathMLElement::fromString(std::string const&)::sMap, (uint64_t)&EQKitMathMLElement::sData, (uint64_t)(&EQKitMathMLElement::sData + 525));
      a1 = v5;
    }
  }
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = a1[1];
  }
  v7[0] = v2;
  v7[1] = v1;
  uint64_t v3 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitMathMLElement::fromString(std::string const&)::sMap, (uint64_t)v7);
  if ((_UNKNOWN *)v3 == &unk_269EFE708) {
    return 0;
  }
  else {
    return *(unsigned int *)(v3 + 48);
  }
}

void sub_255884248(_Unwind_Exception *a1)
{
}

uint64_t EQKitTypes::Display::displayFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Display::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Display::Enum> const*>((uint64_t)&EQKitTypes::Display::displayFromMathMLString(std::string const&,EQKitTypes::Display::Enum)::sMap, (uint64_t)&EQKitTypes::Display::sData, (uint64_t)&EQKit::Script::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Display::displayFromMathMLString(std::string const&,EQKitTypes::Display::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE728) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_25588431C(_Unwind_Exception *a1)
{
}

uint64_t EQKit::Script::variantFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKit::Script::Variant>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Script::Variant> const*>((uint64_t)&EQKit::Script::variantFromMathMLString(std::string const&,EQKit::Script::Variant)::sMap, (uint64_t)&EQKit::Script::sData, (uint64_t)&EQKit::Config::Operator::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKit::Script::variantFromMathMLString(std::string const&,EQKit::Script::Variant)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE748) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_2558843F0(_Unwind_Exception *a1)
{
}

uint64_t EQKit::Config::Operator::formFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKit::Config::Operator::Form>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Config::Operator::Form> const*>((uint64_t)&EQKit::Config::Operator::formFromMathMLString(std::string const&,EQKit::Config::Operator::Form)::sMap, (uint64_t)&EQKit::Config::Operator::sData, (uint64_t)&EQKitTypes::Align::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKit::Config::Operator::formFromMathMLString(std::string const&,EQKit::Config::Operator::Form)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE768) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_2558844C4(_Unwind_Exception *a1)
{
}

uint64_t EQKitTypes::Align::alignFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Align::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Align::Enum> const*>((uint64_t)&EQKitTypes::Align::alignFromMathMLString(std::string const&,EQKitTypes::Align::Enum)::sMap, (uint64_t)&EQKitTypes::Align::sData, (uint64_t)&EQKitTypes::VAlign::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Align::alignFromMathMLString(std::string const&,EQKitTypes::Align::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE788) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_255884598(_Unwind_Exception *a1)
{
}

uint64_t EQKitTypes::VAlign::vAlignFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::VAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::VAlign::Enum> const*>((uint64_t)&EQKitTypes::VAlign::vAlignFromMathMLString(std::string const&,EQKitTypes::VAlign::Enum)::sMap, (uint64_t)&EQKitTypes::VAlign::sData, (uint64_t)&EQKitTypes::Boolean::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::VAlign::vAlignFromMathMLString(std::string const&,EQKitTypes::VAlign::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE7A8) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_25588466C(_Unwind_Exception *a1)
{
}

uint64_t EQKitTypes::Boolean::BOOLeanFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Boolean::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Boolean::Enum> const*>((uint64_t)&EQKitTypes::Boolean::BOOLeanFromMathMLString(std::string const&,EQKitTypes::Boolean::Enum)::sMap, (uint64_t)&EQKitTypes::Boolean::sData, (uint64_t)&EQKitTypes::Attributes::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Boolean::BOOLeanFromMathMLString(std::string const&,EQKitTypes::Boolean::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE7C8) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_255884740(_Unwind_Exception *a1)
{
}

uint64_t EQKitTypes::Attributes::attributeFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Attributes::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Attributes::Enum> const*>((uint64_t)&EQKitTypes::Attributes::attributeFromMathMLString(std::string const&,EQKitTypes::Attributes::Enum)::sMap, (uint64_t)&EQKitTypes::Attributes::sData, (uint64_t)&EQKitTypes::Crossout::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Attributes::attributeFromMathMLString(std::string const&,EQKitTypes::Attributes::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE7E8) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_255884814(_Unwind_Exception *a1)
{
}

void EQKitTypes::Align::alignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      int v7 = __str;
    }
    else {
      int v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      unint64_t v8 = (unsigned __int8 *)v7 + v4;
      unint64_t v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_2558E2677[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::Align::alignFromMathMLString((uint64_t *)&__p, 0);
    int v13 = v12;
    if (v12)
    {
      int v15 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *a2;
        uint64_t v18 = (v15 - *a2) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
          uint64_t v17 = *a2;
          int v15 = a2[1];
        }
        else
        {
          int v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        *(_DWORD *)uint64_t v23 = v13;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)int v15 = v12;
        uint64_t v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      uint64_t v26 = __str;
    }
    else {
      uint64_t v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_44:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_44;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_255884A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + ++*(void *)(this + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::VAlign::vAlignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      int v7 = __str;
    }
    else {
      int v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      unint64_t v8 = (unsigned __int8 *)v7 + v4;
      unint64_t v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_2558E2677[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::VAlign::vAlignFromMathMLString((uint64_t *)&__p, 0);
    int v13 = v12;
    if (v12)
    {
      int v15 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *a2;
        uint64_t v18 = (v15 - *a2) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
          uint64_t v17 = *a2;
          int v15 = a2[1];
        }
        else
        {
          int v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        *(_DWORD *)uint64_t v23 = v13;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)int v15 = v12;
        uint64_t v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      uint64_t v26 = __str;
    }
    else {
      uint64_t v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_44:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_44;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_255884C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + ++*(void *)(this + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::Strings::separatorsFromString(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(void *)(this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  id v4 = [NSString alloc];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  uint64_t v6 = (void *)[v4 initWithUTF8String:v5];
  if (v6)
  {
    objc_msgSend(v6, "rangeOfCharacterFromSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceAndNewlineCharacterSet"));
    if (v7)
    {
      id v8 = (id)objc_msgSend(v6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceAndNewlineCharacterSet"));
    }
    else
    {
      unint64_t v9 = [v6 length];
      if (v9)
      {
        unint64_t v10 = 0;
        id v8 = 0;
        do
        {
          uint64_t v11 = [v6 rangeOfComposedCharacterSequenceAtIndex:v10];
          uint64_t v13 = v12;
          if (v12)
          {
            uint64_t v14 = objc_msgSend(v6, "substringWithRange:", v11, v12);
            if (!v8) {
              id v8 = objc_alloc_init(MEMORY[0x263EFF980]);
            }
            [v8 addObject:v14];
          }
          else
          {
            uint64_t v13 = 1;
          }
          v10 += v13;
        }
        while (v10 < v9);
      }
      else
      {
        id v8 = 0;
      }
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v15 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v34, v39, 16, v6);
    if (v15)
    {
      uint64_t v16 = *(void *)v35;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v35 != v16) {
            objc_enumerationMutation(v8);
          }
          uint64_t v18 = (char *)[*(id *)(*((void *)&v34 + 1) + 8 * i) UTF8String];
          if (v18)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, v18);
            unint64_t v20 = *(void *)(a2 + 8);
            unint64_t v19 = *(void *)(a2 + 16);
            if (v20 >= v19)
            {
              unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(void *)a2) >> 3);
              unint64_t v23 = v22 + 1;
              if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(void *)a2) >> 3);
              if (2 * v24 > v23) {
                unint64_t v23 = 2 * v24;
              }
              if (v24 >= 0x555555555555555) {
                unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v25 = v23;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
              if (v25) {
                uint64_t v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v25);
              }
              else {
                uint64_t v26 = 0;
              }
              std::string::size_type v27 = v26 + v22;
              __v.__first_ = v26;
              __v.__begin_ = v27;
              __v.__end_cap_.__value_ = &v26[v25];
              long long v28 = *(_OWORD *)__p;
              v27->__r_.__value_.__r.__words[2] = v33;
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
              __p[1] = 0;
              std::string::size_type v33 = 0;
              __p[0] = 0;
              __v.__end_ = v27 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
              uint64_t v29 = *(void *)(a2 + 8);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
              int v30 = SHIBYTE(v33);
              *(void *)(a2 + ++*(void *)(this + 8) = v29;
              if (v30 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v21 = *(_OWORD *)__p;
              *(void *)(v20 + 16) = v33;
              *(_OWORD *)unint64_t v20 = v21;
              *(void *)(a2 + ++*(void *)(this + 8) = v20 + 24;
            }
          }
        }
        uint64_t v15 = [v8 countByEnumeratingWithState:&v34 objects:v39 count:16];
      }
      while (v15);
    }
  }
}

void sub_255884FBC(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::wstring> *a17)
{
}

uint64_t EQKitTypes::Integer::integerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v8 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v5, a1, 8);
  MEMORY[0x25A28FE90](v5, &v8);
  *a2 = (*(_DWORD *)((unsigned char *)&v5[4] + *(void *)(v5[0] - 24)) & 7) == 2;
  uint64_t v3 = v8;
  v5[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  void v5[2] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A28FFF0](&v7);
  return v3;
}

void sub_25588518C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::UInteger::uIntegerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v8 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v5, a1, 8);
  MEMORY[0x25A28FEA0](v5, &v8);
  *a2 = (*(_DWORD *)((unsigned char *)&v5[4] + *(void *)(v5[0] - 24)) & 7) == 2;
  uint64_t v3 = v8;
  v5[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  void v5[2] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A28FFF0](&v7);
  return v3;
}

void sub_255885304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Crossout::crossoutFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Crossout::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Crossout::Enum> const*>((uint64_t)&EQKitTypes::Crossout::crossoutFromMathMLString(std::string const&,EQKitTypes::Crossout::Enum)::sMap, (uint64_t)&EQKitTypes::Crossout::sData, (uint64_t)&EQKitTypes::Notation::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Crossout::crossoutFromMathMLString(std::string const&,EQKitTypes::Crossout::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE808) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_2558853D4(_Unwind_Exception *a1)
{
}

void EQKitTypes::Crossout::crossoutVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v7 = __str;
    }
    else {
      uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      uint64_t v8 = (unsigned __int8 *)v7 + v4;
      unint64_t v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_2558E2677[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::Crossout::crossoutFromMathMLString((uint64_t *)&__p, 0);
    int v13 = v12;
    uint64_t v15 = a2[1];
    unint64_t v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = *a2;
      uint64_t v18 = (v15 - *a2) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
        uint64_t v17 = *a2;
        uint64_t v15 = a2[1];
      }
      else
      {
        unint64_t v22 = 0;
      }
      unint64_t v23 = &v22[4 * v18];
      *(_DWORD *)unint64_t v23 = v13;
      uint64_t v16 = v23 + 4;
      while (v15 != v17)
      {
        int v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v15 = v12;
      uint64_t v16 = v15 + 4;
    }
    a2[1] = v16;
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      uint64_t v26 = __str;
    }
    else {
      uint64_t v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_42:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_42;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_2558855F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + ++*(void *)(this + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::Notation::notationFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Notation::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Notation::Enum> const*>((uint64_t)&EQKitTypes::Notation::notationFromMathMLString(std::string const&,EQKitTypes::Notation::Enum)::sMap, (uint64_t)&EQKitTypes::Notation::sData, (uint64_t)&EQKitTypes::GroupAlign::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Notation::notationFromMathMLString(std::string const&,EQKitTypes::Notation::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE828) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_2558856EC(_Unwind_Exception *a1)
{
}

void EQKitTypes::Notation::notationVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v7 = __str;
    }
    else {
      uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      uint64_t v8 = (unsigned __int8 *)v7 + v4;
      unint64_t v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_2558E2677[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::Notation::notationFromMathMLString((uint64_t *)&__p, 0);
    int v13 = v12;
    uint64_t v15 = a2[1];
    unint64_t v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = *a2;
      uint64_t v18 = (v15 - *a2) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
        uint64_t v17 = *a2;
        uint64_t v15 = a2[1];
      }
      else
      {
        unint64_t v22 = 0;
      }
      unint64_t v23 = &v22[4 * v18];
      *(_DWORD *)unint64_t v23 = v13;
      uint64_t v16 = v23 + 4;
      while (v15 != v17)
      {
        int v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v15 = v12;
      uint64_t v16 = v15 + 4;
    }
    a2[1] = v16;
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      uint64_t v26 = __str;
    }
    else {
      uint64_t v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_42:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_42;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_255885910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + ++*(void *)(this + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::GroupAlign::groupAlignFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::GroupAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::GroupAlign::Enum> const*>((uint64_t)&EQKitTypes::GroupAlign::groupAlignFromMathMLString(std::string const&,EQKitTypes::GroupAlign::Enum)::sMap, (uint64_t)&EQKitTypes::GroupAlign::sData, (uint64_t)&EQKitTypes::Edge::sData);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::GroupAlign::groupAlignFromMathMLString(std::string const&,EQKitTypes::GroupAlign::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE848) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_255885A04(_Unwind_Exception *a1)
{
}

uint64_t EQKitTypes::Edge::edgeFromMathMLString(uint64_t *a1, uint64_t a2)
{
  {
    std::map<std::string_view const,EQKitTypes::Edge::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Edge::Enum> const*>((uint64_t)&EQKitTypes::Edge::edgeFromMathMLString(std::string const&,EQKitTypes::Edge::Enum)::sMap, (uint64_t)&EQKitTypes::Edge::sData, (uint64_t)&__block_descriptor_40_e5_v8__0l);
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  v8[0] = v5;
  v8[1] = v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Edge::edgeFromMathMLString(std::string const&,EQKitTypes::Edge::Enum)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_269EFE868) {
    return *(unsigned int *)(v6 + 48);
  }
  return a2;
}

void sub_255885AD8(_Unwind_Exception *a1)
{
}

uint64_t std::map<std::string_view const,EQKitMathMLElement::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitMathMLElement::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885B5C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Display::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Display::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885BE0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKit::Script::Variant>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Script::Variant> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885C64(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKit::Config::Operator::Form>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Config::Operator::Form> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885CE8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Align::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Align::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885D6C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::VAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::VAlign::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885DF0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Boolean::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Boolean::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885E74(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Attributes::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Attributes::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885EF8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Crossout::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Crossout::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255885F7C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Notation::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Notation::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255886000(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::GroupAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::GroupAlign::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255886084(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Edge::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Edge::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_255886108(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_2558863C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886490()
{
}

void sub_255886510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_255886CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_255886E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255886F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_255886F90(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_255887058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2558870E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255887180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255887230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588740C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2558877F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGFloat EQKitBox_ContextScale(CGContext *a1)
{
  memset(&v4, 0, sizeof(v4));
  CGContextGetCTM(&v4, a1);
  CGAffineTransform v2 = v4;
  memset(&v3, 0, sizeof(v3));
  CGAffineTransformDecompose(&v3, &v2);
  return v3.scale.height;
}

void sub_255887AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255887D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255887FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588816C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2558881D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EQKitRule;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_255888384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255888598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_255888780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2558887FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EQKitStringBox;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_255888898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588899C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255888B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255888C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255888D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255888FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EQKitPathBox;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_255889570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_255889F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588A114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588A378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588A538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588A6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588A8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588AA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588AB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588ABB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588AC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588ADFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588AFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588B15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588B32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588B428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588B5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25588B7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588B964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588BF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588C98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588CF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25588D6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void blahtex::translateToken(blahtex *this@<X0>, blahtex::Token *a2@<X8>)
{
  {
    std::unordered_map<wchar_t,std::wstring_view>::unordered_map<std::pair<wchar_t,std::wstring_view> const*>((uint64_t)blahtex::translateToken(blahtex::Token const&)::equivalentInputSymbolsTable, (int *)&blahtex::equivalentInputSymbolsArray, (int *)&blahtex::equivalentInputSymbolsArray + 2442);
  }
  int v5 = *((char *)this + 23);
  if (v5 < 0)
  {
    if (*((void *)this + 1) != 1)
    {
LABEL_12:
      blahtex::Token::Token(a2, this);
      return;
    }
    uint64_t v6 = *(int **)this;
  }
  else
  {
    uint64_t v6 = (int *)this;
    if (v5 != 1) {
      goto LABEL_12;
    }
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(blahtex::translateToken(blahtex::Token const&)::equivalentInputSymbolsTable, v6);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = v7[4];
  if (v8 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = (const void *)v7[3];
  if (v8 >= 5)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v8 | 1) != 5) {
      uint64_t v11 = v8 | 1;
    }
    uint64_t v10 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v11 + 1);
    __dst[1] = (void *)v8;
    unint64_t v14 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_18;
  }
  HIBYTE(v14) = v7[4];
  uint64_t v10 = __dst;
  if (v8) {
LABEL_18:
  }
    memmove(v10, v9, 4 * v8);
  *((_DWORD *)v10 + v++*(void *)(this + 8) = 0;
  blahtex::Token::Token(a2, __dst, *((void *)this + 3));
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_25588D8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t std::unordered_map<wchar_t,std::wstring_view>::unordered_map<std::pair<wchar_t,std::wstring_view> const*>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    int v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t,std::wstring_view> const&>(a1, v5, (uint64_t)v5);
      v5 += 6;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_25588D968(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t,std::wstring_view> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)uint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *(void *)uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25588DB8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (xmlEntityPtr result = *v6; result; xmlEntityPtr result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void blahtex::Interface::ProcessInput()
{
}

void sub_25588DCDC(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1032C408BA9FD94);
  _Unwind_Resume(a1);
}

uint64_t blahtex::Interface::GetMathml@<X0>(blahtex::Interface *this@<X0>, std::wstringbuf::string_type *a2@<X8>)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  blahtex::Manager::GenerateMathml(*(void *)this, (long long *)((char *)this + 8));
  blahtex::MathmlNode::Print((uint64_t)v6, &v7, (uint64_t)this + 32, *((unsigned __int8 *)this + 121), 0);
  std::wstringbuf::str(a2, &v8);
  if (v6)
  {
    blahtex::MathmlNode::~MathmlNode(v6);
    MEMORY[0x25A290040](v4);
  }
  if (SHIBYTE(v8.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x25A290000](&v9);
}

void sub_25588DE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = &unk_27045B0A8;
  *(void *)(a1 + 112) = &unk_27045B0D0;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)(a1 + 8));
  *(void *)(a1 + 24++*(void *)(this + 8) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::wstreambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8++*(void *)(this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_25588DF4C(_Unwind_Exception *a1)
{
  std::wostream::~wostream();
  MEMORY[0x25A290000](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x25A290000](v2);
  return a1;
}

void virtual thunk to'std::wostringstream::~wostringstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[95] < 0) {
    operator delete(*((void **)v1 + 9));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();

  JUMPOUT(0x25A290000);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[95] < 0) {
    operator delete(*((void **)v1 + 9));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x25A290000](v1 + 112);

  JUMPOUT(0x25A290040);
}

void std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v1 = a1 + 112;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x25A290000](v1);

  JUMPOUT(0x25A290040);
}

uint64_t std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }

  return std::wstreambuf::~wstreambuf();
}

void std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::wstreambuf::~wstreambuf();

  JUMPOUT(0x25A290040);
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekoff(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf::pos_type *this, std::wstringbuf::off_type a3, std::ios_base::seekdir __way, std::ios_base::openmode __wch)
{
  unint64_t v5 = *(&this->__st_._mbstateL + 11);
  unint64_t v6 = *(&this->__st_._mbstateL + 6);
  if (v5 < v6)
  {
    *(&this->__st_._mbstateL + 11) = v6;
    unint64_t v5 = v6;
  }
  if ((__wch & 0x18) == 0 || __way == cur && (__wch & 0x18) == 0x18) {
    goto LABEL_14;
  }
  if (!v5)
  {
    uint64_t v8 = 0;
    if (__way) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v11 = __way;
    goto LABEL_21;
  }
  unint64_t v7 = &this->__st_._mbstateL + 8;
  if (this->__st_.__mbstate8[87] < 0) {
    unint64_t v7 = (uint64_t *)*v7;
  }
  uint64_t v8 = (uint64_t)(v5 - (void)v7) >> 2;
  if (__way == beg) {
    goto LABEL_17;
  }
LABEL_10:
  if (__way == end)
  {
    uint64_t v11 = v8;
    goto LABEL_21;
  }
  if (__way != cur)
  {
LABEL_14:
    std::streamoff v10 = -1;
    goto LABEL_15;
  }
  if ((__wch & 8) != 0) {
    uint64_t v9 = *(&this->__st_._mbstateL + 3) - *(&this->__st_._mbstateL + 2);
  }
  else {
    uint64_t v9 = v6 - *(&this->__st_._mbstateL + 5);
  }
  uint64_t v11 = v9 >> 2;
LABEL_21:
  std::streamoff v10 = -1;
  uint64_t v12 = v11 + a3;
  if (v12 >= 0
    && v8 >= v12
    && (!v12 || ((__wch & 8) == 0 || *(&this->__st_._mbstateL + 3)) && ((__wch & 0x10) == 0 || v6)))
  {
    if ((__wch & 8) != 0)
    {
      *(&this->__st_._mbstateL + 3) = *(&this->__st_._mbstateL + 2) + 4 * v12;
      *(&this->__st_._mbstateL + 4) = v5;
    }
    if ((__wch & 0x10) != 0) {
      *(&this->__st_._mbstateL + 6) = *(&this->__st_._mbstateL + 5) + 4 * v12;
    }
    std::streamoff v10 = v12;
  }
LABEL_15:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = v10;
  return this;
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekpos(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf *this, std::wstringbuf::pos_type *__sp, std::ios_base::openmode __wch)
{
  return (std::wstringbuf::pos_type *)((std::wstringbuf::pos_type *(*)(std::wstringbuf::pos_type *__return_ptr))this->seekoff)(retstr);
}

std::wstringbuf::int_type std::wstringbuf::underflow(std::wstringbuf *this)
{
  huint64_t m = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    huint64_t m = nout;
  }
  if ((this->__mode_ & 8) == 0) {
    return -1;
  }
  einp = this->__einp_;
  if (einp < hm)
  {
    this->__einp_ = hm;
    einp = hm;
  }
  ninp = this->__ninp_;
  if (ninp < einp) {
    return *ninp;
  }
  else {
    return -1;
  }
}

std::wstringbuf::int_type std::wstringbuf::pbackfail(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  huint64_t m = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    huint64_t m = nout;
  }
  ninp = this->__ninp_;
  if (this->__binp_ < ninp)
  {
    if (__c == -1)
    {
      __c = 0;
      unint64_t v5 = ninp - 1;
      goto LABEL_10;
    }
    if ((this->__mode_ & 0x10) != 0 || *(ninp - 1) == __c)
    {
      *(ninp - 1) = __c;
      unint64_t v5 = ninp - 1;
LABEL_10:
      this->__ninp_ = v5;
      this->__einp_ = hm;
      return __c;
    }
  }
  return -1;
}

std::wstringbuf::int_type std::wstringbuf::overflow(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  if (__c == -1)
  {
    LODWORD(v2) = 0;
    return v2;
  }
  uint64_t v2 = *(void *)&__c;
  binp = this->__binp_;
  ninp = this->__ninp_;
  nout = this->__nout_;
  eout = this->__eout_;
  if (nout != eout)
  {
    huint64_t m = this->__hm_;
    goto LABEL_14;
  }
  if ((this->__mode_ & 0x10) == 0)
  {
    LODWORD(v2) = -1;
    return v2;
  }
  bout = this->__bout_;
  std::streamoff v10 = this->__hm_;
  p_str = &this->__str_;
  std::wstring::push_back(&this->__str_, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0) {
    std::wstring::size_type v12 = (this->__str_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else {
    std::wstring::size_type v12 = 4;
  }
  std::wstring::resize(&this->__str_, v12, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::wstringbuf::string_type *)this->__str_.__r_.__value_.__l.__data_;
    std::wstring::size_type size = this->__str_.__r_.__value_.__l.__size_;
  }
  else
  {
    std::wstring::size_type size = HIBYTE(this->__str_.__r_.__value_.__r.__words[2]);
  }
  eout = (std::wstreambuf::char_type *)((char *)p_str + 4 * size);
  nout = (std::wstreambuf::char_type *)((char *)p_str + 4 * (nout - bout));
  this->__bout_ = (std::wstreambuf::char_type *)p_str;
  this->__nout_ = nout;
  this->__eout_ = eout;
  huint64_t m = (std::wstringbuf::char_type *)((char *)p_str + 4 * (v10 - bout));
LABEL_14:
  if (nout + 1 >= hm) {
    huint64_t m = nout + 1;
  }
  this->__hm_ = hm;
  if ((this->__mode_ & 8) != 0)
  {
    BOOL v14 = &this->__str_;
    if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0) {
      BOOL v14 = (std::wstringbuf::string_type *)v14->__r_.__value_.__r.__words[0];
    }
    this->__binp_ = (std::wstreambuf::char_type *)v14;
    this->__ninp_ = (std::wstreambuf::char_type *)((char *)v14 + 4 * (ninp - binp));
    this->__einp_ = hm;
  }
  if (nout != eout)
  {
    this->__nout_ = nout + 1;
    std::wstreambuf::char_type *nout = v2;
    return v2;
  }
  overflow = this->overflow;

  return ((uint64_t (*)(std::wstringbuf *, uint64_t))overflow)(this, v2);
}

void sub_25588E728(void *a1)
{
}

blahtex::MathmlNode *std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](blahtex::MathmlNode **a1, blahtex::MathmlNode *a2)
{
  xmlEntityPtr result = *a1;
  *a1 = a2;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    JUMPOUT(0x25A290040);
  }
  return result;
}

std::wstringbuf::string_type *__cdecl std::wstringbuf::str(std::wstringbuf::string_type *__return_ptr retstr, std::wstringbuf::string_type *this)
{
  std::wstring::value_type v2 = this[4].__r_.__value_.__s.__data_[0];
  if ((v2 & 0x10) != 0)
  {
    std::wstring::size_type size = (int *)this[3].__r_.__value_.__r.__words[2];
    datCGFloat a = this[2].__r_.__value_.__l.__data_;
    if (size < data)
    {
      this[3].__r_.__value_.__r.__words[2] = (std::wstring::size_type)data;
      std::wstring::size_type size = data;
    }
    unint64_t v5 = (int *)this[1].__r_.__value_.__r.__words[2];
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = 0uLL;
      retstr->__r_.__value_.__r.__words[2] = 0;
      return this;
    }
    unint64_t v5 = (int *)this->__r_.__value_.__r.__words[2];
    std::wstring::size_type size = (int *)this[1].__r_.__value_.__l.__size_;
  }
  return (std::wstringbuf::string_type *)std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(retstr, v5, size, size - v5);
}

void *std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(void *result, int *a2, int *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 4)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5) {
      uint64_t v8 = a4 | 1;
    }
    xmlEntityPtr result = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    _WORD v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    int v10 = *a2++;
    *(_DWORD *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 4);
  }
  *(_DWORD *)uint64_t v4 = 0;
  return result;
}

uint64_t blahtex::MathmlEnvironment::MathmlEnvironment(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(this + ++*(void *)(this + 8) = a3;
  *(unsigned char *)this = a2 == 0;
  if (a2 >= 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected style value in MathmlEnvironment::MathmlEnvironment");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(_DWORD *)(this + 4) = dword_2558C30E0[a2];
  return this;
}

void sub_25588E8F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Row::~Row(blahtex::LayoutTree::Row *this)
{
  *(void *)this = &unk_27045B1A0;
  uint64_t v1 = (void *)((char *)this + 24);
  for (uint64_t i = (void *)*((void *)this + 4); i != v1; uint64_t i = (void *)i[1])
  {
    uint64_t v3 = i[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v1);
}

{
  uint64_t vars8;

  blahtex::LayoutTree::Row::~Row(this);

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Table::~Table(blahtex::LayoutTree::Table *this)
{
  *(void *)this = &unk_27045B1D8;
  std::wstring::value_type v2 = (void **)((char *)this + 24);
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  while (v3 != v4)
  {
    unint64_t v6 = *(void **)v3;
    unint64_t v5 = *(void **)(v3 + 8);
    if (*(void **)v3 != v5)
    {
      do
      {
        if (*v6)
        {
          (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
          unint64_t v5 = *(void **)(v3 + 8);
        }
        ++v6;
      }
      while (v6 != v5);
      uint64_t v4 = *((void *)this + 4);
    }
    v3 += 24;
  }
  unint64_t v7 = v2;
  std::vector<std::vector<blahtex::LayoutTree::Node *>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

{
  uint64_t vars8;

  blahtex::LayoutTree::Table::~Table(this);

  JUMPOUT(0x25A290040);
}

unsigned int *blahtex::LayoutTree::IncrementNodeCount(unsigned int *this, unsigned int *a2)
{
  unsigned int v2 = *this + 1;
  *this = v2;
  if (v2 >= 0x9C4)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v7, dword_2558C2268);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v6, &dword_2558C22B4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v5, &dword_2558C22B4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v4, &dword_2558C22B4);
    blahtex::Exception::Exception(exception, &v7, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
  }
  return this;
}

void sub_25588EBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v28 - 33) < 0)
  {
    operator delete(*(void **)(v28 - 56));
    if ((v27 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v26);
  goto LABEL_12;
}

void blahtex::Exception::~Exception(void **this)
{
  unsigned int v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t blahtex::LayoutTree::FormatColour@<X0>(std::wstringbuf::string_type *a1@<X8>)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v7, (uint64_t)"#", 1);
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + ++*(void *)(this + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  int v6 = 48;
  uint64_t v4 = std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(v3, &v6);
  *(void *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 6;
  std::wostream::operator<<();
  std::wstringbuf::str(a1, &v8);
  if (SHIBYTE(v8.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x25A290000](&v9);
}

void sub_25588EDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(void *a1, int *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C110]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[3].__on_zero_shared)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_25588EEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *blahtex::LayoutTree::AdjustMathmlEnvironment@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  if ((a2 & 1) != (a4 & 1)
    || HIDWORD(a2) != HIDWORD(a4)
    || a3 != a5
    || (long long v7 = (_DWORD *)*result, *(_DWORD *)*result == 18))
  {
    operator new();
  }
  *xmlEntityPtr result = 0;
  *a6 = v7;
  return result;
}

void sub_25588F2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v21 - 112), 0);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Row::BuildMathmlTree()
{
}

void sub_2558901F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, blahtex::MathmlNode **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,blahtex::MathmlNode *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a42, 0);
  if (*(char *)(v50 - 169) < 0) {
    operator delete(*(void **)(v50 - 192));
  }
  uint64_t v52 = *(void **)(v50 - 160);
  if (v52)
  {
    *(void *)(v50 - 152) = v52;
    operator delete(v52);
  }
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](a9, 0);
  _Unwind_Resume(a1);
}

void blahtex::ForcedSpaceOpsTable(blahtex *this)
{
  {
    std::unordered_set<std::wstring_view>::unordered_set<std::wstring_view const*>((uint64_t)&blahtex::ForcedSpaceOpsTable(void)::forcedSpaceOpsTable, &blahtex::forcedSpaceOpsArray, &blahtex::Manager::gTexvcCompatibilityMacros);
  }
}

void sub_255890468(_Unwind_Exception *a1)
{
}

uint64_t std::list<blahtex::MathmlNode *>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    unint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        long long v7 = a4;
        do
        {
          long long v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + ++*(void *)(this + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + ++*(void *)(this + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t blahtex::LayoutTree::FixOutOfSequenceMathmlCharacter(uint64_t a1)
{
  if ((int)a1 > 120075)
  {
    if ((int)a1 <= 120121)
    {
      switch(a1)
      {
        case 0x1D50C:
          return 8465;
        case 0x1D515:
          return 8476;
        case 0x1D51D:
          return 8488;
        default:
          return a1;
      }
    }
    else
    {
      switch((int)a1)
      {
        case 120127:
          return 8461;
        case 120128:
        case 120129:
        case 120130:
        case 120131:
        case 120132:
        case 120134:
          return a1;
        case 120133:
          return 8469;
        case 120135:
          return 8473;
        case 120136:
          return 8474;
        case 120137:
          return 8477;
        default:
          if (a1 == 120122)
          {
            uint64_t result = 8450;
          }
          else
          {
            if (a1 != 120145) {
              return a1;
            }
            uint64_t result = 8484;
          }
          break;
      }
    }
  }
  else
  {
    int v2 = a1 - 119965;
    uint64_t result = 8492;
    switch(v2)
    {
      case 0:
        return result;
      case 1:
      case 2:
      case 5:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
        return a1;
      case 3:
        return 8496;
      case 4:
        return 8497;
      case 6:
        return 8459;
      case 7:
        return 8464;
      case 10:
        return 8466;
      case 11:
        return 8499;
      case 16:
        return 8475;
      default:
        if (a1 == 120070)
        {
          uint64_t result = 8493;
        }
        else
        {
          if (a1 != 120075) {
            return a1;
          }
          uint64_t result = 8460;
        }
        break;
    }
  }
  return result;
}

void blahtex::LayoutTree::SymbolIdentifier::BuildMathmlTree()
{
}

void sub_255890A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,blahtex::MathmlNode *a22)
{
}

void blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(uint64_t a1)
{
  {
    std::unordered_set<wchar_t>::unordered_set<wchar_t const*>((uint64_t)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::_stretchyByDefaultTable, (int *)"(", blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::symmetricOpsArray);
  }
  {
    std::unordered_set<wchar_t>::unordered_set<wchar_t const*>((uint64_t)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::_symmetricOpsTable, blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::symmetricOpsArray, dword_2558C2430);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C2430);
  BOOL v2 = blahtex::Token::operator==((const __int32 *)(a1 + 24), (const __int32 *)__p);
  BOOL v3 = v2;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
LABEL_5:
    }
      operator new();
  }
  else if (v2)
  {
    goto LABEL_5;
  }
  {
    {
      std::unordered_set<wchar_t>::unordered_set<wchar_t const*>((uint64_t)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::accentByDefaultTable, (int *)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::accentByDefaultArray, dword_2558C246C);
    }
  }
  operator new();
}

void sub_2558911EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_2558913AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2558913A4);
}

void blahtex::LayoutTree::SymbolNumber::BuildMathmlTree()
{
}

void sub_2558914A8(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1032C40C8D585AALL);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::SymbolText::BuildMathmlTree()
{
}

void sub_2558915D8(_Unwind_Exception *a1)
{
  MEMORY[0x25A290040](v1, 0x1032C40C8D585AALL);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Phantom::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v11, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(blahtex::MathmlNode **__return_ptr))(**(void **)(a1 + 56) + 24))(&v10);
  uint64_t v9 = 0;
  uint64_t v6 = v10;
  if (*(_DWORD *)v10 != 5) {
    operator new();
  }
  int v10 = 0;
  *(_DWORD *)uint64_t v6 = 14;
  uint64_t v9 = 0;
  uint64_t v8 = v6;
  blahtex::LayoutTree::AdjustMathmlEnvironment(&v8, *(void *)a2, *(_DWORD *)(a2 + 8), v11, v12, a3);
  if (v8)
  {
    blahtex::MathmlNode::~MathmlNode(v8);
    MEMORY[0x25A290040]();
  }
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex::MathmlNode *)MEMORY[0x25A290040]();
  }
  return result;
}

void sub_2558917EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,blahtex::MathmlNode *a23,blahtex::MathmlNode *a24)
{
}

blahtex::MathmlNode *blahtex::LayoutTree::Cancel::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v14, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(uint64_t ***__return_ptr))(**(void **)(a1 + 56) + 24))(&v13);
  int v12 = 0;
  uint64_t v6 = v13;
  if (*(_DWORD *)v13 != 5) {
    operator new();
  }
  float v13 = 0;
  int v12 = v6;
  *(_DWORD *)uint64_t v6 = 15;
  int v11 = 20;
  std::string __p = &v11;
  long long v7 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v6 + 1, &v11, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
  MEMORY[0x25A28FDC0](v7 + 5, dword_2558C246C);
  int v12 = 0;
  uint64_t v9 = (blahtex::MathmlNode *)v6;
  blahtex::LayoutTree::AdjustMathmlEnvironment(&v9, *(void *)a2, *(_DWORD *)(a2 + 8), v14, v15, a3);
  if (v9)
  {
    blahtex::MathmlNode::~MathmlNode(v9);
    MEMORY[0x25A290040]();
  }
  uint64_t result = (blahtex::MathmlNode *)v13;
  float v13 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex::MathmlNode *)MEMORY[0x25A290040]();
  }
  return result;
}

void sub_255891ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,blahtex::MathmlNode *a25)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v25 - 72), 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Sqrt::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v12, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(blahtex::MathmlNode **__return_ptr))(**(void **)(a1 + 56) + 24))(&v11);
  int v10 = 0;
  uint64_t v6 = v11;
  if (*(_DWORD *)v11 != 5) {
    operator new();
  }
  int v10 = v11;
  int v11 = 0;
  *(_DWORD *)uint64_t v6 = 16;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C22B4);
  blahtex::Token::Token(&v9, __p, *(void *)(a1 + 48));
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  blahtex::Token::operator=((std::wstring *)((char *)v6 + 32), &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  int v10 = 0;
  uint64_t v8 = v6;
  blahtex::LayoutTree::AdjustMathmlEnvironment(&v8, *(void *)a2, *(_DWORD *)(a2 + 8), v12, v13, a3);
  if (v8)
  {
    blahtex::MathmlNode::~MathmlNode(v8);
    MEMORY[0x25A290040]();
  }
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex::MathmlNode *)MEMORY[0x25A290040]();
  }
  return result;
}

void sub_255891D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, blahtex::MathmlNode *a17, blahtex::MathmlNode *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void blahtex::LayoutTree::Root::BuildMathmlTree()
{
}

void sub_25589201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, blahtex::MathmlNode *a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void blahtex::LayoutTree::Scripts::BuildMathmlTree(uint64_t a1)
{
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)v8, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  int v5 = v8[0];
  LOBYTE(v5) = 0;
  int v6 = v8[1] + 1;
  int v7 = v8[2];
  int v4 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v2 + 24))(&__p);
    int v4 = (blahtex::MathmlNode *)__p;
    operator new();
  }
  operator new();
}

void sub_255892550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, blahtex::MathmlNode *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,blahtex::MathmlNode *a31)
{
}

void blahtex::LayoutTree::Fraction::BuildMathmlTree(uint64_t a1)
{
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  uint64_t v1 = v3;
  int v2 = v4;
  if ((_BYTE)v3) {
    LOBYTE(v1) = 0;
  }
  else {
    ++HIDWORD(v1);
  }
  operator new();
}

void sub_255892870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2558928B8()
{
  MEMORY[0x25A290040](v0, 0x1032C40C8D585AALL);
  JUMPOUT(0x2558928B0);
}

void blahtex::LayoutTree::Space::BuildMathmlTree(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28)) {
    operator new();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Unexpected lonely automatic space in Space::BuildMathmlTree");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_255892B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

blahtex *blahtex::LayoutTree::Fenced::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 88);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)__p, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  uint64_t result = (blahtex *)(*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, void **, uint64_t))(*(void *)v8 + 24))(&v16, v8, a2, __p, a3);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(void *)(a1 + 64))
    {
LABEL_7:
      if (*(_DWORD *)v16 == 5) {
        operator new();
      }
      if (*(char *)(v16 + 55) < 0)
      {
        if (!*(void *)(v16 + 40)) {
          goto LABEL_19;
        }
      }
      else if (!*(unsigned char *)(v16 + 55))
      {
        goto LABEL_19;
      }
      blahtex::ForcedSpaceOpsTable(result);
      if (*(char *)(v16 + 55) < 0)
      {
        int v10 = *(void **)(v16 + 32);
        int v11 = *(void **)(v16 + 40);
      }
      else
      {
        int v10 = (void *)(v16 + 32);
        int v11 = (void *)*(unsigned __int8 *)(v16 + 55);
      }
      __p[0] = v10;
      __p[1] = v11;
      if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ForcedSpaceOpsTable(void)::forcedSpaceOpsTable, (uint64_t)__p))
      {
        LODWORD(v15) = 4;
        __p[0] = &v15;
        uint64_t v12 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v16 + 8), (int *)&v15, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
        MEMORY[0x25A28FDC0](v12 + 5, "0");
        LODWORD(v15) = 5;
        __p[0] = &v15;
        int v13 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v16 + 8), (int *)&v15, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
        MEMORY[0x25A28FDC0](v13 + 5, "0");
      }
LABEL_19:
      operator new();
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
    goto LABEL_7;
  }
  *a4 = v16;
  return result;
}

void sub_255893118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v31 - 80), 0);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Stretchy::BuildMathmlTree()
{
}

void sub_255893350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)va, 0);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Table::BuildMathmlTree()
{
}

void sub_255893ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v50 - 104), 0);
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::onlyPlainLatinLetters(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  BOOL v2 = v1 < 0;
  uint64_t v3 = *(unsigned int **)a1;
  if (v1 >= 0) {
    uint64_t v3 = (unsigned int *)a1;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (v2) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4) {
    return 1;
  }
  uint64_t v5 = 4 * v4;
  while (1)
  {
    unsigned int v6 = *v3;
    if ((int)*v3 >= 97) {
      break;
    }
    if (v6 - 91 < 0xFFFFFFE6) {
      return 0;
    }
LABEL_11:
    ++v3;
    v5 -= 4;
    if (!v5) {
      return 1;
    }
  }
  if (v6 <= 0x7A) {
    goto LABEL_11;
  }
  return 0;
}

void blahtex::LayoutTree::Row::Optimise(blahtex::LayoutTree::Row *this)
{
  int v1 = (char *)this + 24;
  BOOL v2 = (char *)*((void *)this + 4);
  if (v2 != (char *)this + 24)
  {
    uint64_t v4 = (char *)this + 24;
    uint64_t v5 = (char *)this + 24;
    do
    {
      (*(void (**)(void))(**((void **)v2 + 2) + 16))(*((void *)v2 + 2));
      unsigned int v6 = (const void *)*((void *)v2 + 2);
      if (v6)
      {
        if (v7)
        {
          if (v4 != v1)
          {
            uint64_t v8 = v7;
            std::wstring v9 = (void *)*((void *)v4 + 2);
            if (v9) {
            if (*((unsigned char *)v9 + 28))
            }
              v8[28] = 1;
            *((_DWORD *)v8 + 6) += *((_DWORD *)v9 + 6);
            uint64_t v10 = *(void *)v4;
            *(void *)(v10 + ++*(void *)(this + 8) = *((void *)v4 + 1);
            **((void **)v4 + 1) = v10;
            --*((void *)this + 5);
            operator delete(v4);
          }
          uint64_t v4 = v2;
          goto LABEL_53;
        }
      }
      if (v5 == v1 {
        || v4 != v1
      }
      {
        goto LABEL_15;
      }
      {
        std::unordered_map<std::wstring_view,std::wstring_view>::unordered_map<std::pair<std::wstring_view,std::wstring_view> const*>((uint64_t)blahtex::LayoutTree::Row::Optimise(void)::negationTable, &blahtex::LayoutTree::gNegationArray, &blahtex::LayoutTree::Node::PrintFields(void)const::gFlavourStrings);
      }
      int v11 = (const void *)*((void *)v5 + 2);
      if (v11) {
      else
      }
        uint64_t v12 = 0;
      int v13 = (const void *)*((void *)v2 + 2);
      if (v13)
      {
        if (v12) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if (v12)
        {
LABEL_23:
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_2558C2430);
          BOOL v15 = blahtex::Token::operator==(v12 + 6, (const __int32 *)&__p);
          if (v14) {
            BOOL v16 = v15;
          }
          else {
            BOOL v16 = 0;
          }
          if (v16)
          {
            if (*((char *)v14 + 47) < 0)
            {
              size_t v17 = (void *)v14[3];
              uint64_t v18 = (void *)v14[4];
            }
            else
            {
              size_t v17 = v14 + 3;
              uint64_t v18 = (void *)*((unsigned __int8 *)v14 + 47);
            }
            v46[0] = v17;
            v46[1] = v18;
            unint64_t v20 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::LayoutTree::Row::Optimise(void)::negationTable, (uint64_t)v46);
            BOOL v21 = v20 != 0;
          }
          else
          {
            unint64_t v20 = 0;
            BOOL v21 = 0;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v21)
            {
LABEL_49:
              if (v4 != v1)
              {
                uint64_t v24 = *(void *)v4;
                *(void *)(v24 + ++*(void *)(this + 8) = *((void *)v4 + 1);
                **((void **)v4 + 1) = v24;
                --*((void *)this + 5);
                operator delete(v4);
              }
              MEMORY[0x25A28FDD0](v14 + 3, v20[4], v20[5]);
              uint64_t v25 = *(void *)v5;
              *(void *)(v25 + ++*(void *)(this + 8) = *((void *)v5 + 1);
              **((void **)v5 + 1) = v25;
              --*((void *)this + 5);
              operator delete(v5);
LABEL_52:
              uint64_t v5 = v2;
              uint64_t v4 = v1;
              goto LABEL_53;
            }
          }
          else if (v21)
          {
            goto LABEL_49;
          }
          int v13 = (const void *)*((void *)v2 + 2);
          if (v13) {
            goto LABEL_31;
          }
LABEL_34:
          uint64_t v45 = 0;
          char v44 = 1;
          goto LABEL_37;
        }
      }
      if (!v13) {
        goto LABEL_34;
      }
LABEL_31:
      while (1)
      {
        if (!v19 || !v19[24]) {
          break;
        }
        int v13 = (const void *)*((void *)v19 + 4);
        if (!v13) {
          goto LABEL_34;
        }
      }
      char v44 = 0;
LABEL_37:
      unint64_t v22 = (const void *)*((void *)v5 + 2);
      if (!v22) {
        goto LABEL_52;
      }
      if (!v45) {
        goto LABEL_52;
      }
      if (!v23) {
        goto LABEL_52;
      }
      if (v45[2].__r_.__value_.__s.__data_[2] != v23[2].__r_.__value_.__s.__data_[2]) {
        goto LABEL_52;
      }
      if (v45->__r_.__value_.__s.__data_[2] != v23->__r_.__value_.__s.__data_[2]) {
        goto LABEL_52;
      }
      uint64_t v43 = v23;
      if (HIDWORD(v45->__r_.__value_.__r.__words[2]) != HIDWORD(v23->__r_.__value_.__r.__words[2])) {
        goto LABEL_52;
      }
      if (v44)
      {
        BOOL v41 = 0;
        uint64_t v42 = 0;
      }
      else
      {
      }
      int v27 = v26;
      if (v12) {
        BOOL v28 = v42 == 0;
      }
      else {
        BOOL v28 = 1;
      }
      int v29 = !v28;
      if (v28)
      {
        if (!v26 || !v41) {
          goto LABEL_91;
        }
LABEL_70:
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, (__int32 *)".");
        if (blahtex::Token::operator==(v41 + 6, (const __int32 *)&__p))
        {
          BOOL v31 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, (__int32 *)",");
          BOOL v31 = blahtex::Token::operator==(v41 + 6, (const __int32 *)v46);
          if (v47 < 0) {
            operator delete(v46[0]);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (!v29)
        {
          if (v31) {
            goto LABEL_84;
          }
          goto LABEL_91;
        }
        goto LABEL_79;
      }
      int v30 = v12 + 6;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v50, (__int32 *)".");
      if (blahtex::Token::operator==(v30, (const __int32 *)v50))
      {
        LOBYTE(v31) = 1;
        goto LABEL_81;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v48, (__int32 *)",");
      if (blahtex::Token::operator==(v30, (const __int32 *)v48))
      {
        LOBYTE(v31) = 1;
      }
      else
      {
        LOBYTE(v31) = 0;
        if (v27 && v41) {
          goto LABEL_70;
        }
      }
LABEL_79:
      if (v49 < 0) {
        operator delete(v48[0]);
      }
LABEL_81:
      if (v51 < 0) {
        operator delete(v50[0]);
      }
      if (v31)
      {
LABEL_84:
        if (v4 != v1)
        {
          uint64_t v32 = *(void *)v4;
          *(void *)(v32 + ++*(void *)(this + 8) = *((void *)v4 + 1);
          **((void **)v4 + 1) = v32;
          --*((void *)this + 5);
          operator delete(v4);
        }
        std::string::size_type v33 = (const blahtex::Token *)&v43[1];
        long long v34 = v45 + 1;
        blahtex::Token::append(v43 + 1, (std::wstring::size_type *)&v45[1]);
        if (!v42)
        {
          uint64_t v40 = *(void *)v2;
          *(void *)(v40 + ++*(void *)(this + 8) = *((void *)v2 + 1);
          **((void **)v2 + 1) = v40;
          --*((void *)this + 5);
          operator delete(v2);
          BOOL v2 = v5;
          goto LABEL_16;
        }
        blahtex::Token::Token((blahtex::Token *)&__p, v33);
        blahtex::Token::operator=((std::wstring *)v33, v34);
        blahtex::Token::operator=(v34, &__p);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }
LABEL_91:
      if (v44) {
        goto LABEL_52;
      }
               0)))
      {
        uint64_t v39 = (const void *)*((void *)v5 + 2);
        if (!v39
        {
          goto LABEL_15;
        }
      }
      if (v4 != v1)
      {
        uint64_t v38 = *(void *)v4;
        *(void *)(v38 + ++*(void *)(this + 8) = *((void *)v4 + 1);
        **((void **)v4 + 1) = v38;
        --*((void *)this + 5);
        operator delete(v4);
      }
      blahtex::Token::append(v43 + 1, (std::wstring::size_type *)&v45[1]);
      blahtex::Token::Token((blahtex::Token *)&__p, (const blahtex::Token *)&v43[1]);
      blahtex::Token::operator=(v43 + 1, v45 + 1);
      blahtex::Token::operator=(v45 + 1, &__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
LABEL_88:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_89:
      uint64_t v35 = *(void *)v5;
      *(void *)(v35 + ++*(void *)(this + 8) = *((void *)v5 + 1);
      **((void **)v5 + 1) = v35;
      --*((void *)this + 5);
      operator delete(v5);
LABEL_15:
      uint64_t v5 = v2;
LABEL_16:
      uint64_t v4 = v1;
LABEL_53:
      BOOL v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v1);
  }
}

void sub_255894738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
}

uint64_t blahtex::LayoutTree::Scripts::Optimise(blahtex::LayoutTree::Scripts *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v5();
  }
  return result;
}

uint64_t blahtex::LayoutTree::Fraction::Optimise(blahtex::LayoutTree::Fraction *this)
{
  (*(void (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 8) + 16);

  return v2();
}

uint64_t blahtex::LayoutTree::Fenced::Optimise(blahtex::LayoutTree::Fenced *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 11) + 16))();
}

uint64_t blahtex::LayoutTree::Phantom::Optimise(blahtex::LayoutTree::Phantom *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 16))();
}

uint64_t blahtex::LayoutTree::Cancel::Optimise(blahtex::LayoutTree::Cancel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 16))();
}

uint64_t blahtex::LayoutTree::Sqrt::Optimise(blahtex::LayoutTree::Sqrt *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 16))();
}

uint64_t blahtex::LayoutTree::Root::Optimise(blahtex::LayoutTree::Root *this)
{
  (*(void (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 8) + 16);

  return v2();
}

uint64_t blahtex::LayoutTree::Table::Optimise(uint64_t this)
{
  uint64_t v2 = *(uint64_t ***)(this + 24);
  int v1 = *(uint64_t ***)(this + 32);
  if (v2 != v1)
  {
    uint64_t v3 = this;
    do
    {
      uint64_t v4 = *v2;
      if (*v2 != v2[1])
      {
        do
        {
          uint64_t v5 = *v4++;
          this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
        }
        while (v4 != v2[1]);
        int v1 = *(uint64_t ***)(v3 + 32);
      }
      v2 += 3;
    }
    while (v2 != v1);
  }
  return this;
}

uint64_t blahtex::LayoutTree::Node::PrintFields@<X0>(blahtex::LayoutTree::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((unsigned int *)this + 3);
  uint64_t v4 = &(&blahtex::LayoutTree::Node::PrintFields(void)const::gFlavourStrings)[2 * v3];
  unint64_t v5 = (unint64_t)v4[1];
  if (v5 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v7 = *v4;
  if (v5 >= 5)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v5 | 1) != 5) {
      uint64_t v9 = v5 | 1;
    }
    uint64_t v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a2, v9 + 1);
    *(void *)(a2 + ++*(void *)(this + 8) = v5;
    *(void *)(a2 + 16) = v10 | 0x8000000000000000;
    *(void *)a2 = v8;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v5;
    uint64_t v8 = (void *)a2;
    if (!v5)
    {
      uint64_t v8 = (void *)a2;
      goto LABEL_9;
    }
  }
  memmove(v8, v7, 4 * v5);
  LODWORD(v3) = *((_DWORD *)this + 3);
LABEL_9:
  *((_DWORD *)v8 + v5) = 0;
  if (v3 == 1)
  {
    std::wstring::append((std::wstring *)a2, dword_2558C2810);
    int v11 = (const std::wstring::value_type **)(&blahtex::LayoutTree::Node::PrintFields(void)const::gLimitsStrings
                                            + 2 * *((unsigned int *)this + 4));
    std::wstring::append((std::wstring *)a2, *v11, (std::wstring::size_type)v11[1]);
  }
  std::wstring::append((std::wstring *)a2, dword_2558C2810);
  uint64_t v12 = (const std::wstring::value_type **)(&blahtex::LayoutTree::Node::PrintFields(void)const::gStyleStrings
                                          + 2 * *((unsigned int *)this + 2));
  std::wstring::append((std::wstring *)a2, *v12, (std::wstring::size_type)v12[1]);
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  int v13 = v22;
  *(_DWORD *)((char *)&v22 + (void)*(v22 - 3) + ++*(void *)(this + 8) = *(_DWORD *)((unsigned char *)&v22 + (void)*(v22 - 3) + 8) & 0xFFFFFFB5 | 8;
  *(std::wstreambuf::char_type **)((char *)&v23.__binp_ + (void)*(v13 - 3)) = (std::wstreambuf::char_type *)6;
  LODWORD(__p[0]) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(&v22, (int *)__p);
  std::wostream::operator<<();
  std::wstringbuf::str(&v19, &v23);
  uint64_t v14 = std::wstring::insert(&v19, 0, dword_2558C2818);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v21 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::wstring __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v21 >= 0) {
    BOOL v16 = __p;
  }
  else {
    BOOL v16 = (void **)__p[0];
  }
  if (v21 >= 0) {
    std::wstring::size_type v17 = HIBYTE(v21);
  }
  else {
    std::wstring::size_type v17 = (std::wstring::size_type)__p[1];
  }
  std::wstring::append((std::wstring *)a2, (const std::wstring::value_type *)v16, v17);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x25A290000](&v24);
}

void sub_255894D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::wostringstream::~wostringstream((uint64_t)&a22);
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Row::Print(blahtex::LayoutTree::Node *a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v19, 2 * a3, 32);
  if ((v20 & 0x80u) == 0) {
    unsigned int v6 = v19;
  }
  else {
    unsigned int v6 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v7 = v20;
  }
  else {
    uint64_t v7 = (uint64_t)v19[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2828, 4);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v18 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v11 = v18;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  int v13 = std::locale::use_facet(&v21, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v21);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v14 = (void *)((char *)a1 + 24);
  uint64_t v15 = *((void *)a1 + 4);
  if ((void *)v15 != v14)
  {
    uint64_t v16 = (a3 + 1);
    do
    {
      (*(void (**)(void, void *, uint64_t))(**(void **)(v15 + 16) + 32))(*(void *)(v15 + 16), a2, v16);
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while ((void *)v15 != v14);
  }
}

void sub_255894F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolIdentifier::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v23, 2 * a3, 32);
  if ((v24 & 0x80u) == 0) {
    unint64_t v5 = v23;
  }
  else {
    unint64_t v5 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = (uint64_t)v23[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558C283C, 18);
  int v9 = *(char *)(a1 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558C2888, 2);
  uint64_t v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)dword_2558C2810, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v22 & 0x80u) == 0) {
    std::wstring::size_type v17 = __p;
  }
  else {
    std::wstring::size_type v17 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v18 = v22;
  }
  else {
    uint64_t v18 = (uint64_t)__p[1];
  }
  std::wstringbuf::string_type v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  unsigned __int8 v20 = std::locale::use_facet(&v25, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
}

void sub_255895188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolNumber::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v23, 2 * a3, 32);
  if ((v24 & 0x80u) == 0) {
    unint64_t v5 = v23;
  }
  else {
    unint64_t v5 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = (uint64_t)v23[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558C2894, 14);
  int v9 = *(char *)(a1 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558C2888, 2);
  uint64_t v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)dword_2558C2810, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v22 & 0x80u) == 0) {
    std::wstring::size_type v17 = __p;
  }
  else {
    std::wstring::size_type v17 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v18 = v22;
  }
  else {
    uint64_t v18 = (uint64_t)__p[1];
  }
  std::wstringbuf::string_type v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  unsigned __int8 v20 = std::locale::use_facet(&v25, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
}

void sub_255895378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolText::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v23, 2 * a3, 32);
  if ((v24 & 0x80u) == 0) {
    unint64_t v5 = v23;
  }
  else {
    unint64_t v5 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = (uint64_t)v23[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558C28D0, 12);
  int v9 = *(char *)(a1 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558C2888, 2);
  uint64_t v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)dword_2558C2810, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v22 & 0x80u) == 0) {
    std::wstring::size_type v17 = __p;
  }
  else {
    std::wstring::size_type v17 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v18 = v22;
  }
  else {
    uint64_t v18 = (uint64_t)__p[1];
  }
  std::wstringbuf::string_type v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  unsigned __int8 v20 = std::locale::use_facet(&v25, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
}

void sub_255895568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolOperator::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](&__p, 2 * a3, 32);
  if ((v33 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v6 = v33;
  }
  else {
    uint64_t v6 = v32;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558C2904, 16);
  int v9 = *(char *)(a1 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558C2888, 2);
  uint64_t v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  if (*(unsigned char *)(a1 + 60)) {
    uint64_t v16 = &unk_2558C2948;
  }
  else {
    uint64_t v16 = &unk_2558C2970;
  }
  if (*(unsigned char *)(a1 + 60)) {
    uint64_t v17 = 9;
  }
  else {
    uint64_t v17 = 13;
  }
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)v16, v17);
  if (*(unsigned char *)(a1 + 88)) {
    std::wstringbuf::string_type v19 = (__int32 *)&unk_2558C29A8;
  }
  else {
    std::wstringbuf::string_type v19 = &dword_2558C22B4;
  }
  if (*(unsigned char *)(a1 + 88)) {
    uint64_t v20 = 7;
  }
  else {
    uint64_t v20 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)v19, v20);
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_36;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
    goto LABEL_36;
  }
  std::locale v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558C29C8, 7);
  int v22 = *(char *)(a1 + 87);
  if (v22 >= 0) {
    uint64_t v23 = a1 + 64;
  }
  else {
    uint64_t v23 = *(void *)(a1 + 64);
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v24 = *(void *)(a1 + 72);
  }
  std::locale v25 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v21, v23, v24);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v25, (uint64_t)&unk_2558C29E8, 1);
LABEL_36:
  uint64_t v26 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558C2810, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)&__p);
  if ((v33 & 0x80u) == 0) {
    int v27 = &__p;
  }
  else {
    int v27 = __p;
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v28 = v33;
  }
  else {
    uint64_t v28 = v32;
  }
  int v29 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v26, (uint64_t)v27, v28);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  int v30 = std::locale::use_facet(&v34, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[3].__on_zero_shared)(v30, 10);
  std::locale::~locale(&v34);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v33 < 0) {
    operator delete(__p);
  }
}

void sub_255895810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::Space::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v11 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558C29F0, 6);
  std::wostream::operator<<();
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 28)) {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558C2A0C, 17);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[3].__on_zero_shared)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::wostream::put();
  return std::wostream::flush();
}

void sub_255895968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void blahtex::LayoutTree::Scripts::Print(uint64_t a1, void *a2, int a3)
{
  int v6 = 2 * a3;
  std::wstring::basic_string[abi:ne180100](&v36, 2 * a3, 32);
  if ((v38 & 0x80u) == 0) {
    uint64_t v7 = &v36;
  }
  else {
    uint64_t v7 = v36;
  }
  if ((v38 & 0x80u) == 0) {
    uint64_t v8 = v38;
  }
  else {
    uint64_t v8 = v37;
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_2558C2A54, 8);
  if (*(unsigned char *)(a1 + 24)) {
    unsigned __int8 v11 = &unk_2558C2A78;
  }
  else {
    unsigned __int8 v11 = &unk_2558C2A98;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v12 = 7;
  }
  else {
    uint64_t v12 = 9;
  }
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v10, (uint64_t)v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)dword_2558C2810, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v35 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v35 & 0x80u) == 0) {
    uint64_t v16 = v35;
  }
  else {
    uint64_t v16 = (uint64_t)__p[1];
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet(&v39, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[3].__on_zero_shared)(v18, 10);
  std::locale::~locale(&v39);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v35 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v38 < 0) {
    operator delete(v36);
  }
  if (*(void *)(a1 + 32))
  {
    std::wstring::basic_string[abi:ne180100](&v36, v6 + 2, 32);
    if ((v38 & 0x80u) == 0) {
      std::wstringbuf::string_type v19 = &v36;
    }
    else {
      std::wstringbuf::string_type v19 = v36;
    }
    if ((v38 & 0x80u) == 0) {
      uint64_t v20 = v38;
    }
    else {
      uint64_t v20 = v37;
    }
    std::locale v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v19, v20);
    int v22 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v21, (uint64_t)&unk_2558C2AC0, 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
    uint64_t v23 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[3].__on_zero_shared)(v23, 10);
    std::locale::~locale((std::locale *)__p);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v38 < 0) {
      operator delete(v36);
    }
    (*(void (**)(void, void *, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), a2, (a3 + 2));
  }
  if (*(void *)(a1 + 40))
  {
    std::wstring::basic_string[abi:ne180100](&v36, v6 + 2, 32);
    if ((v38 & 0x80u) == 0) {
      uint64_t v24 = &v36;
    }
    else {
      uint64_t v24 = v36;
    }
    if ((v38 & 0x80u) == 0) {
      uint64_t v25 = v38;
    }
    else {
      uint64_t v25 = v37;
    }
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v24, v25);
    int v27 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v26, (uint64_t)&unk_2558C2AD4, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
    uint64_t v28 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[3].__on_zero_shared)(v28, 10);
    std::locale::~locale((std::locale *)__p);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v38 < 0) {
      operator delete(v36);
    }
    (*(void (**)(void, void *, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, (a3 + 2));
  }
  if (*(void *)(a1 + 48))
  {
    std::wstring::basic_string[abi:ne180100](&v36, v6 + 2, 32);
    if ((v38 & 0x80u) == 0) {
      int v29 = &v36;
    }
    else {
      int v29 = v36;
    }
    if ((v38 & 0x80u) == 0) {
      uint64_t v30 = v38;
    }
    else {
      uint64_t v30 = v37;
    }
    BOOL v31 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v29, v30);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v31, (uint64_t)&unk_2558C2AEC, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    unsigned __int8 v33 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[3].__on_zero_shared)(v33, 10);
    std::locale::~locale((std::locale *)__p);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v38 < 0) {
      operator delete(v36);
    }
    (*(void (**)(void, void *, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), a2, (a3 + 2));
  }
}

void sub_255895E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Fraction::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](&__p, 2 * a3, 32);
  if ((v17 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v7 = v17;
  }
  else {
    uint64_t v7 = v16;
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, v7);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2B04, 9);
  if ((char)v17 < 0) {
    operator delete(__p);
  }
  if (!*(unsigned char *)(a1 + 72)) {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558C2B2C, 18);
  }
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)&__p);
  if ((v17 & 0x80u) == 0) {
    int v9 = &__p;
  }
  else {
    int v9 = __p;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v10 = v17;
  }
  else {
    uint64_t v10 = v16;
  }
  unsigned __int8 v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v18, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 10);
  std::locale::~locale(&v18);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v17 < 0) {
    operator delete(__p);
  }
  uint64_t v13 = (a3 + 1);
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), a2, v13);
  return (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 64) + 32))(*(void *)(a1 + 64), a2, v13);
}

void sub_25589608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::Fenced::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v27, 2 * a3, 32);
  if ((v28 & 0x80u) == 0) {
    int v6 = v27;
  }
  else {
    int v6 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v7 = v28;
  }
  else {
    uint64_t v7 = (uint64_t)v27[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2B78, 8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558C2B9C, 3);
  int v15 = *(char *)(a1 + 79);
  if (v15 >= 0) {
    uint64_t v16 = a1 + 56;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 56);
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 64);
  }
  std::locale v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, v16, v17);
  std::wstringbuf::string_type v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)&unk_2558C2888, 2);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v26 & 0x80u) == 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v21 = v26;
  }
  else {
    uint64_t v21 = (uint64_t)__p[1];
  }
  int v22 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  uint64_t v23 = std::locale::use_facet(&v29, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[3].__on_zero_shared)(v23, 10);
  std::locale::~locale(&v29);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 88) + 32))(*(void *)(a1 + 88), a2, (a3 + 1));
}

void sub_2558962AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::Stretchy::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v20, 2 * a3, 32);
  if ((v21 & 0x80u) == 0) {
    unint64_t v5 = v20;
  }
  else {
    unint64_t v5 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v6 = v21;
  }
  else {
    uint64_t v6 = (uint64_t)v20[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558C2B78, 8);
  int v9 = *(char *)(a1 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558C2B9C, 3);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v19 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = v19;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  uint64_t v17 = std::locale::use_facet(&v22, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v22);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
}

void sub_255896474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Phantom::Print(blahtex::LayoutTree::Node *a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v17, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)v17[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2BAC, 8);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return (*(uint64_t (**)(void *, void *, void))(**((void **)a1 + 7) + 32))(*((void **)a1 + 7), a2, (a3 + 1));
}

void sub_255896644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Cancel::Print(blahtex::LayoutTree::Node *a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v17, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)v17[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2BD0, 7);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return (*(uint64_t (**)(void *, void *, void))(**((void **)a1 + 7) + 32))(*((void **)a1 + 7), a2, (a3 + 1));
}

void sub_255896814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Sqrt::Print(blahtex::LayoutTree::Node *a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v17, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)v17[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2BF0, 5);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return (*(uint64_t (**)(void *, void *, void))(**((void **)a1 + 7) + 32))(*((void **)a1 + 7), a2, (a3 + 1));
}

void sub_2558969E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Root::Print(blahtex::LayoutTree::Node *a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](v18, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v18;
  }
  else {
    uint64_t v6 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)v18[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558C2C08, 5);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v17 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v11 = v17;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  uint64_t v13 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v18[0]);
  }
  uint64_t v14 = (a3 + 1);
  (*(void (**)(void *, void *, uint64_t))(**((void **)a1 + 7) + 32))(*((void **)a1 + 7), a2, v14);
  return (*(uint64_t (**)(void *, void *, uint64_t))(**((void **)a1 + 8) + 32))(*((void **)a1 + 8), a2, v14);
}

void sub_255896BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::Table::Print(uint64_t a1, void *a2, int a3)
{
  int v6 = 2 * a3;
  std::wstring::basic_string[abi:ne180100](&v31, 2 * a3, 32);
  if ((v33 & 0x80u) == 0) {
    uint64_t v7 = &v31;
  }
  else {
    uint64_t v7 = v31;
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v8 = v33;
  }
  else {
    uint64_t v8 = v32;
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_2558C2C64, 6);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v30 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v12 = v30;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v10, (uint64_t)v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)dword_2558C2810, 1);
  uint64_t v15 = (uint64_t *)(&blahtex::LayoutTree::Table::Print(std::wostream &,int)const::gAlignStrings
                  + 2 * *(unsigned int *)(a1 + 48));
  unsigned __int8 v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, *v15, v15[1]);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  unsigned __int8 v17 = std::locale::use_facet(&v34, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v34);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v33 < 0) {
    operator delete(v31);
  }
  unsigned __int8 v18 = *(uint64_t ***)(a1 + 24);
  if (v18 != *(uint64_t ***)(a1 + 32))
  {
    unint64_t v19 = v6 + 2;
    uint64_t v20 = (a3 + 2);
    unsigned __int8 v21 = (std::locale::id *)MEMORY[0x263F8C110];
    do
    {
      std::wstring::basic_string[abi:ne180100](&v31, v19, 32);
      if ((v33 & 0x80u) == 0) {
        std::locale v22 = &v31;
      }
      else {
        std::locale v22 = v31;
      }
      if ((v33 & 0x80u) == 0) {
        uint64_t v23 = v33;
      }
      else {
        uint64_t v23 = v32;
      }
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v22, v23);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v24, (uint64_t)&unk_2558C2C80, 9);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      unsigned __int8 v26 = std::locale::use_facet((const std::locale *)__p, v21);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[3].__on_zero_shared)(v26, 10);
      std::locale::~locale((std::locale *)__p);
      std::wostream::put();
      std::wostream::flush();
      if ((char)v33 < 0) {
        operator delete(v31);
      }
      for (uint64_t i = *v18; i != v18[1]; ++i)
      {
        uint64_t v28 = *i;
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v28 + 32))(v28, a2, v20);
      }
      v18 += 3;
    }
    while (v18 != *(uint64_t ***)(a1 + 32));
  }
}

void sub_255896F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolIdentifier::~SymbolIdentifier(void **this)
{
  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::SymbolNumber::~SymbolNumber(void **this)
{
  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::SymbolText::~SymbolText(void **this)
{
  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::SymbolOperator::~SymbolOperator(void **this)
{
  *this = &unk_27045B388;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B388;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  *this = &unk_27045B678;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Space::~Space(blahtex::LayoutTree::Space *this)
{
}

void blahtex::LayoutTree::Scripts::~Scripts(blahtex::LayoutTree::Scripts *this)
{
  *(void *)this = &unk_27045B3F8;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_27045B3F8;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Fraction::~Fraction(blahtex::LayoutTree::Fraction *this)
{
  *(void *)this = &unk_27045B430;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + ++*(void *)(this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_27045B430;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + ++*(void *)(this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Fenced::~Fenced(blahtex::LayoutTree::Fenced *this)
{
  *(void *)this = &unk_27045B480;
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B480;
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Stretchy::~Stretchy(void **this)
{
  *this = &unk_27045B4D0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B4D0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Phantom::~Phantom(blahtex::LayoutTree::Phantom *this)
{
  *(void *)this = &unk_27045B520;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B520;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Cancel::~Cancel(blahtex::LayoutTree::Cancel *this)
{
  *(void *)this = &unk_27045B570;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B570;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Sqrt::~Sqrt(blahtex::LayoutTree::Sqrt *this)
{
  *(void *)this = &unk_27045B5C0;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B5C0;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::LayoutTree::Root::~Root(blahtex::LayoutTree::Root *this)
{
  *(void *)this = &unk_27045B610;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + ++*(void *)(this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_27045B610;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + ++*(void *)(this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x25A290040);
}

std::wstring *blahtex::Exception::Exception(std::wstring *this, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (v10)
  {
    std::wstring::size_type v11 = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>((uint64_t *)&this[1], (long long *)a3);
    this[1].__r_.__value_.__l.__size_ = v11;
  }
  else
  {
    std::wstring::size_type v11 = 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(a4 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a4 + 8);
  }
  if (v12)
  {
    if (v11 >= this[1].__r_.__value_.__r.__words[2])
    {
      std::wstring::size_type v11 = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>((uint64_t *)&this[1], (long long *)a4);
    }
    else
    {
      std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>((uint64_t)&this[1], (long long *)a4);
      v11 += 24;
    }
    this[1].__r_.__value_.__l.__size_ = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(a5 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a5 + 8);
  }
  if (v13)
  {
    if (v11 >= this[1].__r_.__value_.__r.__words[2])
    {
      std::wstring::size_type v14 = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>((uint64_t *)&this[1], (long long *)a5);
    }
    else
    {
      std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>((uint64_t)&this[1], (long long *)a5);
      std::wstring::size_type v14 = v11 + 24;
    }
    this[1].__r_.__value_.__l.__size_ = v14;
  }
  return this;
}

void sub_255897E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(*(std::wstring **)(a1 + 8), *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + ++*(void *)(this + 8) = v3 + 24;
}

void sub_255897EBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::wstring>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(end, *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::wstring>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::wstring>::__swap_out_circular_buffer((std::vector<std::wstring> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_255897FD4(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::wstring>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - ++*(void *)(this + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - ++*(void *)(this + 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t blahtex::MathmlNode::MathmlNode(uint64_t a1, int a2, blahtex::Token *a3)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + ++*(void *)(this + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  blahtex::Token::Token((blahtex::Token *)(a1 + 32), a3);
  *(void *)(a1 + ++*(void *)(this + 64) = a1 + 64;
  *(void *)(a1 + 72) = a1 + 64;
  *(void *)(a1 + 8std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = 0;
  return a1;
}

void sub_255898194(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::wstring_view>::unordered_set<std::wstring_view const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    do
    {
      std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::__emplace_unique_key_args<std::wstring_view,std::wstring_view const&>(a1, (uint64_t)v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_255898214(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::__emplace_unique_key_args<std::wstring_view,std::wstring_view const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x20uLL);
  *long long v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *a3;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *long long v14 = *v23;
LABEL_38:
    *uint64_t v23 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_255898474(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<wchar_t>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, 4 * a3);
}

BOOL std::equal_to<std::wstring_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(const std::wstring_view::value_type **)a2;
  v5.__size_ = *(void *)(a2 + 8);
  v5.__data_ = *(const std::wstring_view::value_type **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  v8.__data_ = v4;
  v8.__size_ = v5.__size_;
  return v5.__size_ == v6 && std::wstring_view::compare(&v8, v5) == 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

int std::wstring_view::compare(const std::wstring_view *this, std::wstring_view __sv)
{
  std::basic_string_view<_CharT, _Traits>::size_type size = __sv.__size_;
  std::basic_string_view<_CharT, _Traits>::size_type v3 = this->__size_;
  if (__sv.__size_ >= v3) {
    __sv.__size_ = this->__size_;
  }
  if (__sv.__size_)
  {
    int result = wmemcmp(this->__data_, __sv.__data_, __sv.__size_);
    if (result) {
      return result;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v3 = this->__size_;
  }
  BOOL v6 = v3 == size;
  if (v3 < size) {
    int v7 = -1;
  }
  else {
    int v7 = 1;
  }
  if (v6) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t std::wstring::basic_string[abi:ne180100]<0>(uint64_t a1, __int32 *a2)
{
  size_t v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 5)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5) {
      uint64_t v7 = v4 | 1;
    }
    BOOL v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a1, v7 + 1);
    *(void *)(a1 + ++*(void *)(this + 8) = v5;
    *(void *)(a1 + 16) = v8 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 23) = v4;
    BOOL v6 = (void *)a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::wstring::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5) {
      std::wstring::size_type v6 = __sz | 1;
    }
    uint64_t v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    size_t v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, 4 * __sz + 4);
}

void std::vector<std::vector<blahtex::LayoutTree::Node *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<blahtex::LayoutTree::Node *>>::__clear[abi:ne180100]((uint64_t *)v2);
    std::basic_string_view<_CharT, _Traits>::size_type v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<blahtex::LayoutTree::Node *>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      std::wstring::size_type v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A28FED0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + 4 * a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, a2, v11, a2 + 4 * a3, v6, v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x25A28FEE0](v13);
  return a1;
}

void sub_255898CF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x25A28FEE0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x255898CD8);
}

void sub_255898D4C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= (a4 - a2) >> 2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - ((a4 - a2) >> 2);
    }
    if (a3 - a2 >= 1
      && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != (unint64_t)(a3 - a2) >> 2)
    {
      return 0;
    }
    if (v12 >= 1)
    {
      std::wstring::basic_string[abi:ne180100](__p, v12, a6);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v6 + 96))(v6, a3, (unint64_t)v15 >> 2) == (unint64_t)v15 >> 2)
    {
      *(void *)(a5 + 24) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_255898ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

long long *std::__list_imp<blahtex::MathmlNode *>::swap(long long *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v2;
  long long v3 = *result;
  *int result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((void *)result + 2))
  {
    **((void **)result + 1) = result;
    uint64_t v4 = *(long long **)result;
  }
  else
  {
    *(void *)int result = result;
    uint64_t v4 = result;
  }
  *((void *)v4 + 1) = result;
  if (a2[2])
  {
    *(void *)a2[1] = a2;
    size_t v5 = (uint64_t *)*a2;
  }
  else
  {
    *a2 = (uint64_t)a2;
    size_t v5 = a2;
  }
  v5[1] = (uint64_t)a2;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<blahtex::MathmlEnvironment>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void *std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v6 == v13)
      {
        if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::wstring::basic_string[abi:ne180100](void *a1, unint64_t a2, int a3)
{
  long long v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 5)
  {
    uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5) {
      uint64_t v6 = a2 | 1;
    }
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *long long v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

uint64_t std::unordered_set<wchar_t>::unordered_set<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    int8x8_t v5 = a2;
    do
    {
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_255899284(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2558994A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,std::wstring_view>::unordered_map<std::pair<std::wstring_view,std::wstring_view> const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    int8x8_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,std::wstring_view> const&>(a1, (uint64_t)v5, v5);
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_25589951C(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,std::wstring_view> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  BOOL v14 = operator new(0x30uLL);
  *BOOL v14 = 0;
  v14[1] = v9;
  long long v16 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *BOOL v14 = *v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_25589977C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void blahtex::StripReservedSuffix(std::wstring *__str@<X0>, std::wstring *a2@<X8>)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::wstring::size_type size = __str->__r_.__value_.__l.__size_;
    if (size <= 7)
    {
LABEL_16:
      std::wstring::__init_copy_ctor_external(a2, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      return;
    }
  }
  else
  {
    std::wstring::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size <= 7) {
      goto LABEL_13;
    }
  }
  std::wstring::basic_string(&__p, __str, size - 8, 8uLL, (std::allocator<wchar_t> *)&v9);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 8)
    {
      p_p = &__p;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_ != 8)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
    if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_9:
  int v6 = wmemcmp((const __int32 *)p_p, dword_2558C30F0, 8uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v6)
  {
    if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_13:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      return;
    }
    goto LABEL_16;
  }
  std::wstring::size_type v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) != 0) {
    std::wstring::size_type v7 = __str->__r_.__value_.__l.__size_;
  }
  std::wstring::basic_string(a2, __str, 0, v7 - 8, (std::allocator<wchar_t> *)&__p);
}

uint64_t blahtex::MacroProcessor::MacroProcessor(uint64_t a1, blahtex::Token **a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + ++*(void *)(this + 40) = 0;
  unint64_t v3 = (std::wstring *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 4++*(void *)(this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  int8x8_t v5 = *a2;
  unint64_t v4 = a2[1];
  if (v4 == *a2)
  {
    unint64_t v8 = a2[1];
  }
  else
  {
    std::wstring::size_type v7 = 0;
    do
    {
      unint64_t v4 = (blahtex::Token *)((char *)v4 - 32);
      std::wstring::size_type v7 = (const blahtex::Token *)((char *)std::vector<blahtex::Token>::insert(v3, v7, v4) + 32);
    }
    while (v4 != v5);
    unint64_t v4 = *a2;
    unint64_t v8 = a2[1];
  }
  *(_DWORD *)(a1 + 6++*(void *)(this + 8) = (unint64_t)(v8 - v4) >> 5;
  *(unsigned char *)(a1 + ++*(void *)(this + 64) = 0;
  return a1;
}

void sub_255899954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void blahtex::MacroProcessor::Advance(blahtex::MacroProcessor *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (*((void *)this + 5) != v1)
  {
    unint64_t v3 = (void **)(v1 - 32);
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*v3);
    }
    *((void *)this + 6) = v3;
    ++*((_DWORD *)this + 17);
    *((unsigned char *)this + ++*(void *)(this + 64) = 0;
  }
}

void blahtex::MacroProcessor::SkipWhitespace(blahtex::MacroProcessor *this)
{
  while (1)
  {
    blahtex::MacroProcessor::Peek(this, (uint64_t)v5);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C3114);
    BOOL v2 = blahtex::Token::operator==((const __int32 *)v5, (const __int32 *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    if (!v2) {
      break;
    }
    blahtex::MacroProcessor::Advance(this);
  }
}

void sub_255899A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::MacroProcessor::Peek(blahtex::MacroProcessor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = *((void *)this + 6);
  int8x8_t v5 = (uint64_t *)((char *)this + 40);
  if (v4 == v3)
  {
LABEL_53:
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v62, &dword_2558C3178);
    blahtex::Token::Token(a2, v62, 0);
    if (v63 < 0) {
      operator delete(v62[0]);
    }
    return;
  }
  while (1)
  {
    uint64_t v7 = (*((_DWORD *)this + 17) + 1);
    *((_DWORD *)this + 17) = v7;
    if ((unint64_t)(v7 + ((v3 - v4) >> 5)) >> 5 >= 0x271)
    {
      exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C33A8);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_2558C3178);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_2558C3178);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
      blahtex::Exception::Exception(exception, (long long *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
    }
    unint64_t v8 = (const __int32 *)(v3 - 32);
    if (*((unsigned char *)this + 64))
    {
      blahtex::Token::Token((blahtex::Token *)a2, (const blahtex::Token *)(v3 - 32));
      return;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C33E0);
    if (blahtex::Token::operator==(v8, (const __int32 *)&v64))
    {
      BOOL v9 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, dword_2558C3418);
      if (blahtex::Token::operator==(v8, (const __int32 *)v69))
      {
        BOOL v9 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_2558C3468);
        BOOL v9 = blahtex::Token::operator==(v8, (const __int32 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (v70 < 0) {
        operator delete(v69[0]);
      }
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    blahtex::Token::Token((blahtex::Token *)a2, (const blahtex::Token *)(*((void *)this + 6) - 32));
    if (v9) {
      break;
    }
    unint64_t v10 = (int *)std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::find<std::wstring>(this, a2);
    if (!v10) {
      goto LABEL_105;
    }
    uint64_t v11 = *((void *)this + 6);
    unint64_t v12 = (void **)(v11 - 32);
    if (*(char *)(v11 - 9) < 0) {
      operator delete(*v12);
    }
    *((void *)this + 6) = v12;
    std::vector<std::vector<blahtex::Token>>::vector(v69, v10[10]);
    if (v10[10] >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        if (!blahtex::MacroProcessor::ReadArgument((uint64_t)this, (uint64_t *)((char *)v69[0] + v13)))
        {
          uint64_t v56 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C335C);
          blahtex::StripReservedSuffix((std::wstring *)a2, &__p);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v66, &dword_2558C3178);
          blahtex::Exception::Exception(v56, (long long *)&v64, (uint64_t)&__p, (uint64_t)v67, (uint64_t)v66);
        }
        ++v14;
        v13 += 24;
      }
      while (v14 < v10[10]);
    }
    memset(&__p, 0, sizeof(__p));
    unint64_t v15 = (void *)*((void *)v10 + 6);
    if (v15 != *((void **)v10 + 7))
    {
      while (1)
      {
        ++*((_DWORD *)this + 17);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C355C);
        BOOL v16 = blahtex::Token::operator==((const __int32 *)v15, (const __int32 *)&v64);
        BOOL v17 = v16;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v64.__r_.__value_.__l.__data_);
          if (v17)
          {
LABEL_25:
            float v18 = (int **)(v15 + 4);
            if (v15 + 4 == *((void **)v10 + 7)) {
              goto LABEL_115;
            }
            int v19 = *((char *)v15 + 55);
            if (v19 < 0)
            {
              if (v15[5] != 1)
              {
LABEL_115:
                CGFloat v58 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C3564);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v66, &dword_2558C3178);
                blahtex::Exception::Exception(v58, (long long *)&v64, a2, (uint64_t)v67, (uint64_t)v66);
              }
              unint64_t v20 = *v18;
            }
            else
            {
              unint64_t v20 = (int *)(v15 + 4);
              if (v19 != 1) {
                goto LABEL_115;
              }
            }
            int v21 = *v20;
            unsigned int v22 = v21 - 49;
            if (v21 < 49 || (int)v22 >= v10[10])
            {
              std::string v57 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C3564);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v66, &dword_2558C3178);
              blahtex::Exception::Exception(v57, (long long *)&v64, a2, (uint64_t)v67, (uint64_t)v66);
            }
            uint64_t v23 = (char *)v69[0] + 24 * v22;
            unint64_t v25 = *(blahtex::Token **)v23;
            unint64_t v24 = (blahtex::Token *)*((void *)v23 + 1);
            if (*(blahtex::Token **)v23 == v24)
            {
              uint64_t v27 = *(void *)v23;
            }
            else
            {
              do
              {
                std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&__p, v25);
                unint64_t v25 = (blahtex::Token *)((char *)v25 + 32);
              }
              while (v25 != v24);
              uint64_t v26 = (char *)v69[0] + 24 * v22;
              unint64_t v25 = *(blahtex::Token **)v26;
              uint64_t v27 = *((void *)v26 + 1);
            }
            *((_DWORD *)this + 17) += (unint64_t)(v27 - (void)v25) >> 5;
            goto LABEL_44;
          }
        }
        else if (v16)
        {
          goto LABEL_25;
        }
        blahtex::Token::Token((blahtex::Token *)&v64, (const blahtex::Token *)v15);
        if (!v65) {
          uint64_t v65 = *(void *)(a2 + 24);
        }
        std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&__p, (blahtex::Token *)&v64);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        float v18 = (int **)v15;
LABEL_44:
        unint64_t v15 = v18 + 4;
        if (v18 + 4 == *((int ***)v10 + 7))
        {
          std::wstring::size_type size = (blahtex::Token *)__p.__r_.__value_.__l.__size_;
          std::wstring::size_type v28 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
          {
            std::wstring::size_type v30 = __p.__r_.__value_.__r.__words[0];
          }
          else
          {
            do
            {
              std::wstring::size_type size = (blahtex::Token *)((char *)size - 32);
              std::vector<blahtex::Token>::push_back[abi:ne180100](v5, size);
            }
            while (size != (blahtex::Token *)v28);
            std::wstring::size_type v30 = __p.__r_.__value_.__l.__size_;
            std::wstring::size_type v28 = __p.__r_.__value_.__r.__words[0];
          }
          goto LABEL_50;
        }
      }
    }
    std::wstring::size_type v28 = 0;
    std::wstring::size_type v30 = 0;
LABEL_50:
    *((_DWORD *)this + 17) += (v30 - v28) >> 5;
    v64.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&__p;
    std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    v64.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v69;
    std::vector<std::vector<blahtex::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v4 = *((void *)this + 5);
    uint64_t v3 = *((void *)this + 6);
    if (v4 == v3) {
      goto LABEL_53;
    }
  }
  uint64_t v31 = *((void *)this + 6);
  uint64_t v32 = (void **)(v31 - 32);
  if (*(char *)(v31 - 9) < 0) {
    operator delete(*v32);
  }
  *((void *)this + 6) = v32;
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  uint64_t v33 = *((void *)this + 6);
  if (*((void *)this + 5) == v33) {
    goto LABEL_93;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C327C);
  BOOL v34 = blahtex::Token::operator==((const __int32 *)(v33 - 32), (const __int32 *)&v64);
  BOOL v35 = v34;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (v35) {
      goto LABEL_61;
    }
LABEL_93:
    uint64_t v47 = *(unsigned __int8 *)(a2 + 23);
    BOOL v48 = (v47 & 0x80u) != 0;
    if ((v47 & 0x80u) != 0) {
      uint64_t v47 = *(void *)(a2 + 8);
    }
    if (v48) {
      char v49 = *(__int32 **)a2;
    }
    else {
      char v49 = (__int32 *)a2;
    }
    uint64_t v50 = &v49[v47];
    if (v47 >= 8)
    {
      uint64_t v53 = v49;
      do
      {
        if (v47 == 7) {
          break;
        }
        long long v54 = wmemchr(v53, 82, v47 - 7);
        if (!v54) {
          break;
        }
        char v51 = v54;
        if (!wmemcmp(v54, dword_2558C30F0, 8uLL)) {
          goto LABEL_100;
        }
        uint64_t v53 = v51 + 1;
        uint64_t v55 = (char *)v50 - (char *)(v51 + 1);
        uint64_t v47 = (unint64_t)v55 >> 2;
      }
      while (v55 > 31);
    }
    char v51 = v50;
LABEL_100:
    if (v51 == v50) {
      std::wstring::size_type v52 = -1;
    }
    else {
      std::wstring::size_type v52 = v51 - v49;
    }
    std::wstring::erase((std::wstring *)a2, v52, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_104;
  }
  if (!v34) {
    goto LABEL_93;
  }
LABEL_61:
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C3124);
  blahtex::Token::operator=((std::wstring *)(*((void *)this + 6) - 32), &v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  uint64_t v36 = (const __int32 *)(*((void *)this + 6) - 32);
  if (v36 == *((const __int32 **)this + 5)) {
    goto LABEL_80;
  }
  int v37 = 0;
  while (1)
  {
    if (v37 <= 0)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C3300);
      unint64_t v38 = (std::wstring *)(v36 - 8);
      BOOL v39 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v36 - 8, (const __int32 *)&v64);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (!v39) {
        break;
      }
    }
    ++*((_DWORD *)this + 17);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C3124);
    v36 -= 8;
    BOOL v40 = blahtex::Token::operator==(v36, (const __int32 *)&v64);
    BOOL v41 = v40;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if (v41)
      {
LABEL_71:
        ++v37;
        goto LABEL_79;
      }
    }
    else if (v40)
    {
      goto LABEL_71;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C311C);
    BOOL v42 = blahtex::Token::operator==(v36, (const __int32 *)&v64);
    BOOL v43 = v42;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if (v43)
      {
LABEL_77:
        if (v37 <= 0)
        {
          uint64_t v60 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C34BC);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_2558C3178);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_2558C3178);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
          blahtex::Exception::Exception(v60, (long long *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
        }
        --v37;
      }
    }
    else if (v42)
    {
      goto LABEL_77;
    }
LABEL_79:
    if (v36 == (const __int32 *)*v5) {
      goto LABEL_80;
    }
  }
  if (v36 == (const __int32 *)*v5)
  {
LABEL_80:
    char v44 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C3308);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
    blahtex::Exception::Exception(v44, (long long *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C3300);
  BOOL v45 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v36 - 8, (const __int32 *)&v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (v45)
  {
    int v61 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C335C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, dword_2558C350C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_2558C3178);
    blahtex::Exception::Exception(v61, (long long *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2558C311C);
  blahtex::Token::operator=(v38, &v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C33E0);
  BOOL v46 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (v46)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2558C3524);
    blahtex::Token::operator=((std::wstring *)a2, &v64);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
  }
LABEL_104:
  std::vector<blahtex::Token>::push_back[abi:ne180100](v5, (blahtex::Token *)a2);
LABEL_105:
  *((unsigned char *)this + ++*(void *)(this + 64) = 1;
}

void sub_25589A544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v39 + 23) < 0) {
        operator delete(*(void **)v39);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v40);
  goto LABEL_12;
}

void blahtex::MacroProcessor::SkipWhitespaceRaw(blahtex::MacroProcessor *this)
{
  for (uint64_t i = *((void *)this + 6); *((void *)this + 5) != i; uint64_t i = *((void *)this + 6))
  {
    uint64_t v3 = (const __int32 *)(i - 32);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C3114);
    BOOL v4 = blahtex::Token::operator==(v3, (const __int32 *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (!v4) {
      break;
    }
    blahtex::MacroProcessor::Advance(this);
  }
}

void sub_25589A974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL blahtex::MacroProcessor::ReadArgument(uint64_t a1, uint64_t *a2)
{
  blahtex::MacroProcessor::SkipWhitespaceRaw((blahtex::MacroProcessor *)a1);
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 40) == v4) {
    return 0;
  }
  blahtex::Token::Token((blahtex::Token *)v27, (const blahtex::Token *)(v4 - 32));
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = (void **)(v5 - 32);
  if (*(char *)(v5 - 9) < 0) {
    operator delete(*v6);
  }
  *(void *)(a1 + 4++*(void *)(this + 8) = v6;
  ++*(_DWORD *)(a1 + 68);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C311C);
  BOOL v7 = blahtex::Token::operator==((const __int32 *)v27, (const __int32 *)__p);
  BOOL v8 = v7;
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      goto LABEL_36;
    }
  }
  else if (v7)
  {
    goto LABEL_36;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C3124);
  BOOL v10 = blahtex::Token::operator==((const __int32 *)v27, (const __int32 *)__p);
  BOOL v11 = v10;
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_11;
    }
LABEL_34:
    std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)v27);
    goto LABEL_35;
  }
  if (!v10) {
    goto LABEL_34;
  }
LABEL_11:
  int v12 = 1;
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 40) == v13) {
      break;
    }
    ++*(_DWORD *)(a1 + 68);
    blahtex::Token::Token((blahtex::Token *)__p, (const blahtex::Token *)(v13 - 32));
    uint64_t v14 = *(void *)(a1 + 48);
    unint64_t v15 = (void **)(v14 - 32);
    if (*(char *)(v14 - 9) < 0) {
      operator delete(*v15);
    }
    *(void *)(a1 + 4++*(void *)(this + 8) = v15;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, (__int32 *)&unk_2558C3124);
    BOOL v16 = blahtex::Token::operator==((const __int32 *)__p, (const __int32 *)v23);
    BOOL v17 = v16;
    if (v24 < 0)
    {
      operator delete(v23[0]);
      if (v17)
      {
LABEL_17:
        ++v12;
LABEL_26:
        std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)__p);
        char v18 = 1;
        goto LABEL_27;
      }
    }
    else if (v16)
    {
      goto LABEL_17;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, (__int32 *)&unk_2558C311C);
    if (!blahtex::Token::operator==((const __int32 *)__p, (const __int32 *)v23))
    {
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      goto LABEL_26;
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (--v12) {
      goto LABEL_26;
    }
    char v18 = 0;
LABEL_27:
    if (v26 < 0)
    {
      operator delete(__p[0]);
      if ((v18 & 1) == 0) {
        break;
      }
    }
    else if ((v18 & 1) == 0)
    {
      break;
    }
  }
  if (v12 >= 1)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C312C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v21, &dword_2558C3178);
    blahtex::Exception::Exception(exception, (long long *)__p, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21);
  }
LABEL_35:
  *(unsigned char *)(a1 + ++*(void *)(this + 64) = 0;
LABEL_36:
  BOOL v9 = !v8;
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  return v9;
}

void sub_25589AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v35 - 73) < 0) {
        operator delete(*(void **)(v35 - 96));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

uint64_t std::vector<blahtex::Token>::push_back[abi:ne180100](uint64_t *a1, blahtex::Token *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v14;
    BOOL v16 = (blahtex::Token *)&v14[32 * v10];
    char v18 = &v14[32 * v13];
    blahtex::Token::Token(v16, a2);
    BOOL v17 = (char *)v16 + 32;
    std::vector<blahtex::Token>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = blahtex::Token::Token(*(blahtex::Token **)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  blahtex::Token *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v14;
    BOOL v16 = (blahtex::Token *)&v14[32 * v10];
    char v18 = &v14[32 * v13];
    blahtex::Token::Token(v16, a2);
    BOOL v17 = (char *)v16 + 32;
    std::vector<blahtex::Token>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = blahtex::Token::Token(*(blahtex::Token **)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_25589AE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + ++*(void *)(this + 8) = v11;
  _Unwind_Resume(exception_object);
}

void blahtex::MacroProcessor::Get(blahtex::MacroProcessor *this@<X0>, uint64_t a2@<X8>)
{
  blahtex::MacroProcessor::Peek(this, a2);

  blahtex::MacroProcessor::Advance(this);
}

void blahtex::MacroProcessor::HandleNewcommand(blahtex::MacroProcessor *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (void **)(v2 - 32);
  if (*(char *)(v2 - 9) < 0) {
    operator delete(*v3);
  }
  *((void *)this + 6) = v3;
  ++*((_DWORD *)this + 17);
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  uint64_t v4 = *((void *)this + 6);
  if (*((void *)this + 5) == v4) {
    goto LABEL_52;
  }
  unint64_t v5 = (const __int32 *)(v4 - 32);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C3124);
  BOOL v6 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v5, (const __int32 *)__p);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v6)
  {
LABEL_52:
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C317C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C31D4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
    blahtex::Exception::Exception(exception, (long long *)__p, (uint64_t)&v47, (uint64_t)v46, (uint64_t)v45);
  }
  uint64_t v7 = *((void *)this + 6);
  BOOL v8 = (void **)(v7 - 32);
  if (*(char *)(v7 - 9) < 0) {
    operator delete(*v8);
  }
  *((void *)this + 6) = v8;
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  uint64_t v9 = *((void *)this + 6);
  if (*((void *)this + 5) == v9)
  {
LABEL_51:
    int v34 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C3204);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
    blahtex::Exception::Exception(v34, (long long *)__p, (uint64_t)&v47, (uint64_t)v46, (uint64_t)v45);
  }
  uint64_t v10 = (const blahtex::Token *)(v9 - 32);
  int v11 = *(char *)(v9 - 9);
  if (v11 < 0)
  {
    if (!*(void *)(v9 - 24)) {
      goto LABEL_51;
    }
    uint64_t v12 = *(_DWORD **)v10;
  }
  else
  {
    uint64_t v12 = (_DWORD *)(v9 - 32);
    if (!v11) {
      goto LABEL_51;
    }
  }
  if (*v12 != 92) {
    goto LABEL_51;
  }
  blahtex::Token::Token((blahtex::Token *)__p, v10);
  uint64_t v13 = *((void *)this + 6);
  uint64_t v14 = (void **)(v13 - 32);
  if (*(char *)(v13 - 9) < 0) {
    operator delete(*v14);
  }
  *((void *)this + 6) = v14;
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  uint64_t v15 = *((void *)this + 6);
  if (*((void *)this + 5) == v15)
  {
    uint64_t v36 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C312C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_2558C3178);
    blahtex::Exception::Exception(v36, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, (__int32 *)&unk_2558C311C);
  BOOL v16 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)(v15 - 32), (const __int32 *)&v47);
  if (v48 < 0) {
    operator delete((void *)v47);
  }
  if (v16)
  {
    int v37 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C3204);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_2558C3178);
    blahtex::Exception::Exception(v37, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
  }
  uint64_t v17 = *((void *)this + 6);
  char v18 = (void **)(v17 - 32);
  if (*(char *)(v17 - 9) < 0) {
    operator delete(*v18);
  }
  *((void *)this + 6) = v18;
  *(void *)&long long v47 = __p;
  uint64_t v19 = std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>((uint64_t)this, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v47);
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  uint64_t v20 = *((void *)this + 6);
  if (*((void *)this + 5) != v20)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, (__int32 *)&unk_2558C327C);
    BOOL v21 = blahtex::Token::operator==((const __int32 *)(v20 - 32), (const __int32 *)&v47);
    BOOL v22 = v21;
    if (v48 < 0)
    {
      operator delete((void *)v47);
      if (!v22) {
        goto LABEL_47;
      }
    }
    else if (!v21)
    {
      goto LABEL_47;
    }
    uint64_t v23 = *((void *)this + 6);
    char v24 = (void **)(v23 - 32);
    if (*(char *)(v23 - 9) < 0) {
      operator delete(*v24);
    }
    *((void *)this + 6) = v24;
    blahtex::MacroProcessor::SkipWhitespaceRaw(this);
    uint64_t v25 = *((void *)this + 6);
    if (*((void *)this + 5) == v25)
    {
LABEL_56:
      uint64_t v39 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C3284);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
      blahtex::Exception::Exception(v39, &v47, (uint64_t)__p, (uint64_t)v46, (uint64_t)v45);
    }
    char v26 = (void **)(v25 - 32);
    int v27 = *(char *)(v25 - 9);
    if (v27 < 0)
    {
      if (*(void *)(v25 - 24) != 1) {
        goto LABEL_56;
      }
      char v28 = (int *)*v26;
    }
    else
    {
      char v28 = (int *)(v25 - 32);
      if (v27 != 1) {
        goto LABEL_56;
      }
    }
    int v29 = *v28;
    *((_DWORD *)v19 + 1std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = v29 - 48;
    if ((v29 - 58) <= 0xFFFFFFF6)
    {
      int v41 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C3284);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
      blahtex::Exception::Exception(v41, &v47, (uint64_t)__p, (uint64_t)v46, (uint64_t)v45);
    }
    if (*(char *)(v25 - 9) < 0) {
      operator delete(*v26);
    }
    *((void *)this + 6) = v26;
    blahtex::MacroProcessor::SkipWhitespaceRaw(this);
    uint64_t v30 = *((void *)this + 6);
    if (*((void *)this + 5) == v30) {
      goto LABEL_57;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, (__int32 *)&unk_2558C3300);
    BOOL v31 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)(v30 - 32), (const __int32 *)&v47);
    if (v48 < 0) {
      operator delete((void *)v47);
    }
    if (v31)
    {
LABEL_57:
      BOOL v40 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C3308);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_2558C3178);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_2558C3178);
      blahtex::Exception::Exception(v40, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
    }
    uint64_t v32 = *((void *)this + 6);
    uint64_t v33 = (void **)(v32 - 32);
    if (*(char *)(v32 - 9) < 0) {
      operator delete(*v33);
    }
    *((void *)this + 6) = v33;
  }
LABEL_47:
  if (!blahtex::MacroProcessor::ReadArgument((uint64_t)this, v19 + 6))
  {
    unint64_t v38 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2558C335C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, dword_2558C31D4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_2558C3178);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_2558C3178);
    blahtex::Exception::Exception(v38, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
}

void sub_25589B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v35 - 33) < 0)
  {
    operator delete(*(void **)(v35 - 56));
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (a20 < 0) {
        operator delete(a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

void sub_25589B8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + ++*(void *)(this + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<blahtex::Token>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<blahtex::Token>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::wstring const,blahtex::MacroProcessor::Macro>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::wstring const,blahtex::MacroProcessor::Macro>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

const blahtex::Token *std::vector<blahtex::Token>::insert(std::wstring *a1, blahtex::Token *this, blahtex::Token *a3)
{
  uint64_t v4 = this;
  std::wstring::size_type size = (blahtex::Token *)a1->__r_.__value_.__l.__size_;
  unint64_t v9 = a1->__r_.__value_.__r.__words[2];
  uint64_t v7 = (uint64_t)&a1->__r_.__value_.__r.__words[2];
  unint64_t v8 = v9;
  if ((unint64_t)size >= v9)
  {
    std::wstring::size_type v10 = a1->__r_.__value_.__r.__words[0];
    unint64_t v11 = ((uint64_t)((uint64_t)size - a1->__r_.__value_.__r.__words[0]) >> 5) + 1;
    if (v11 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (uint64_t)((uint64_t)this - v10) >> 5;
    uint64_t v13 = v8 - v10;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= v11) {
      uint64_t v14 = ((uint64_t)((uint64_t)size - a1->__r_.__value_.__r.__words[0]) >> 5) + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      BOOL v16 = (blahtex::Token *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v7, v15);
    }
    else {
      BOOL v16 = 0;
    }
    char v18 = v16;
    uint64_t v19 = (char *)v16 + 32 * v12;
    uint64_t v20 = v19;
    BOOL v21 = (char *)v16 + 32 * v15;
    std::__split_buffer<blahtex::Token>::push_back[abi:ne180100](&v18, a3);
    uint64_t v4 = (const blahtex::Token *)std::vector<blahtex::Token>::__swap_out_circular_buffer((uint64_t)a1, (uint64_t)&v18, v4);
    std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v18);
  }
  else if (this == size)
  {
    blahtex::Token::Token(this, a3);
    a1->__r_.__value_.__l.__size_ = (std::wstring::size_type)v4 + 32;
  }
  else
  {
    std::vector<blahtex::Token>::__move_range(a1, (uint64_t)this, (unint64_t)size, (uint64_t)this + 32);
    if (v4 <= a3) {
      a3 = (blahtex::Token *)((char *)a3 + 32 * (a1->__r_.__value_.__l.__size_ > (unint64_t)a3));
    }
    blahtex::Token::operator=((std::wstring *)v4, (std::wstring *)a3);
  }
  return v4;
}

void sub_25589BBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + ++*(void *)(this + 8) = v10;
  _Unwind_Resume(exception_object);
}

std::wstring *std::vector<blahtex::Token>::__move_range(std::wstring *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v6 = result;
  std::wstring::size_type size = result->__r_.__value_.__l.__size_;
  uint64_t v8 = size - a4;
  unint64_t v9 = (const blahtex::Token *)(a2 + size - a4);
  if ((unint64_t)v9 >= a3)
  {
    uint64_t v11 = (blahtex::Token *)result->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v11 = (blahtex::Token *)result->__r_.__value_.__l.__size_;
    do
    {
      uint64_t result = (std::wstring *)blahtex::Token::Token(v11, v9);
      unint64_t v9 = (const blahtex::Token *)((char *)v9 + 32);
      uint64_t v11 = (blahtex::Token *)((char *)v11 + 32);
    }
    while ((unint64_t)v9 < a3);
  }
  v6->__r_.__value_.__l.__size_ = (std::wstring::size_type)v11;
  if (size != a4)
  {
    uint64_t v12 = (std::wstring *)(size - 32);
    uint64_t v13 = 32 * (v8 >> 5);
    uint64_t v14 = a2 - 32;
    do
    {
      uint64_t result = blahtex::Token::operator=(v12, (std::wstring *)(v14 + v13));
      uint64_t v12 = (std::wstring *)((char *)v12 - 32);
      v13 -= 32;
    }
    while (v13);
  }
  return result;
}

void sub_25589BC90(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<blahtex::Token>::push_back[abi:ne180100](blahtex::Token **a1, blahtex::Token *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    unint64_t v5 = (std::wstring *)a1[1];
    uint64_t v6 = (char *)v5 - (char *)*a1;
    if (v5 <= (std::wstring *)*a1)
    {
      if (v4 == *a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - *a1) >> 4;
      }
      uint64_t v14 = (uint64_t)a1[4];
      int v29 = a1[4];
      unint64_t v15 = (blahtex::Token *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v14, v13);
      BOOL v16 = (blahtex::Token *)((char *)v15 + 32 * (v13 >> 2));
      char v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      char v18 = (char *)v15 + 32 * v17;
      v27.i64[1] = (uint64_t)v16;
      char v28 = v18;
      uint64_t v19 = a1[1];
      uint64_t v20 = a1[2] - v19;
      if (v20)
      {
        BOOL v21 = (blahtex::Token *)((char *)v16 + (v20 & 0xFFFFFFFFFFFFFFE0));
        uint64_t v22 = 32 * (v20 >> 5);
        do
        {
          blahtex::Token::Token(v16, v19);
          BOOL v16 = (blahtex::Token *)((char *)v16 + 32);
          uint64_t v19 = (const blahtex::Token *)((char *)v19 + 32);
          v22 -= 32;
        }
        while (v22);
        unint64_t v15 = v26;
        BOOL v16 = (blahtex::Token *)v27.i64[0];
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
        char v18 = v28;
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v19);
        BOOL v21 = v16;
      }
      char v26 = *a1;
      *a1 = v15;
      a1[1] = v16;
      int64x2_t v27 = v23;
      char v24 = (char *)a1[3];
      a1[2] = v21;
      a1[3] = (blahtex::Token *)v18;
      char v28 = v24;
      std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v26);
      uint64_t v4 = a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 5;
      BOOL v8 = v6 >> 5 < -1;
      uint64_t v9 = (v6 >> 5) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      if (v5 == (std::wstring *)v4)
      {
        uint64_t v12 = (blahtex::Token *)((char *)v5 - 32 * (v10 >> 1));
      }
      else
      {
        do
        {
          blahtex::Token::operator=((std::wstring *)((char *)v5 + 32 * v11), v5);
          unint64_t v5 = (std::wstring *)((char *)v5 + 32);
        }
        while (v5 != (std::wstring *)v4);
        uint64_t v4 = a1[1];
        uint64_t v12 = (blahtex::Token *)((char *)v5 + 32 * v11);
      }
      a1[1] = (blahtex::Token *)((char *)v4 + 32 * v11);
      a1[2] = v12;
      uint64_t v4 = v12;
    }
  }
  uint64_t result = blahtex::Token::Token(v4, a2);
  a1[2] = (blahtex::Token *)((char *)a1[2] + 32);
  return result;
}

void sub_25589BE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<blahtex::Token>::__swap_out_circular_buffer(uint64_t a1, uint64_t a2, const blahtex::Token *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>>(a1 + 16, (uint64_t)a3, a3, *(void *)a1, *(const blahtex::Token **)a1, v6, v6);
  *(void *)(a2 + ++*(void *)(this + 8) = v8;
  *(void *)(a2 + 16) = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(v7, a3, *(blahtex::Token **)(a1 + 8), *(blahtex::Token **)(a2 + 16));
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a2 + ++*(void *)(this + 8) = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(void *)(this + 8) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v11;
  *(void *)a2 = *(void *)(a2 + 8);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>>(uint64_t a1, uint64_t a2, const blahtex::Token *a3, uint64_t a4, const blahtex::Token *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v9 = (const blahtex::Token *)((char *)v9 - 32);
      blahtex::Token::Token((blahtex::Token *)(v7 - 32), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_25589BF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

blahtex::Token *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(uint64_t a1, blahtex::Token *a2, blahtex::Token *a3, blahtex::Token *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      blahtex::Token::Token(v4, v6);
      uint64_t v6 = (const blahtex::Token *)((char *)v6 + 32);
      uint64_t v4 = (blahtex::Token *)((char *)v11 + 32);
      uint64_t v11 = (blahtex::Token *)((char *)v11 + 32);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_25589C020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

uint64_t std::__split_buffer<blahtex::Token>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<blahtex::Token>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<blahtex::Token>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>>((uint64_t)(a1 + 2), a1[1], (const blahtex::Token *)a1[1], *a1, (const blahtex::Token *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (std::equal_to<std::wstring>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int64x2_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int64x2_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  long long v15 = (void *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v15;
}

void sub_25589C4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++*(void *)(this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::wstring *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(v9, *(const std::wstring::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 1std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = 0;
  *((void *)v8 + 7) = 0;
  *((void *)v8 + ++*(void *)(this + 8) = 0;
  *((void *)v8 + 6) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25589C568(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<wchar_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v2 = v3;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, 4 * v2);
}

BOOL std::equal_to<std::wstring>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    size_t v3 = *(void *)(a2 + 8);
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v3 != v5) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  if (v6 >= 0) {
    uint64_t v7 = (const __int32 *)a3;
  }
  else {
    uint64_t v7 = *(const __int32 **)a3;
  }
  if (v4 >= 0) {
    uint64_t v8 = (const __int32 *)a2;
  }
  else {
    uint64_t v8 = *(const __int32 **)a2;
  }
  return wmemcmp(v8, v7, v3) == 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::wstring const,blahtex::MacroProcessor::Macro>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::find<std::wstring>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::wstring>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::vector<std::vector<blahtex::Token>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_25589C834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<blahtex::Token>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void blahtex::Tokenise(uint64_t *a1, uint64_t *a2, int a3)
{
  if (a1[1])
  {
    uint64_t v6 = MEMORY[0x263EF8318];
    uint8x8_t v7 = (unsigned int *)*a1;
    do
    {
      uint64_t v8 = *v7;
      if (v8 <= 0x7F)
      {
        if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
        {
LABEL_17:
          int v13 = *v7;
          if (*v7 != 92)
          {
            if (v13 < 32 || v13 == 127)
            {
              exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_2558C35E8);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v40, &dword_2558C362C);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_2558C362C);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_2558C362C);
              blahtex::Exception::Exception(exception, &v43, (uint64_t)&v40, (uint64_t)v39, (uint64_t)v38);
            }
            char v37 = 1;
            uint64_t v36 = (void *)v13;
            blahtex::Token::Token(&v43, &v36, 0);
            std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)&v43);
            if (v44 < 0) {
              operator delete((void *)v43);
            }
            if (v37 < 0) {
              operator delete(v36);
            }
            unint64_t v10 = v7 + 1;
            goto LABEL_78;
          }
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v40, (__int32 *)&unk_2558C3630);
          if (v7 + 1 == (unsigned int *)(*a1 + 4 * a1[1]))
          {
            BOOL v31 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_2558C3638);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_2558C362C);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_2558C362C);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, &dword_2558C362C);
            blahtex::Exception::Exception(v31, &v43, (uint64_t)v39, (uint64_t)v38, (uint64_t)v35);
          }
          uint64_t v14 = v7[1];
          if ((v14 & 0xFFFFFFDF) - 65 <= 0x19)
          {
            long long v15 = v7 + 2;
            do
            {
              unint64_t v10 = v15;
              std::wstring::push_back(&v40, v14);
              if (v10 == (unsigned int *)(*a1 + 4 * a1[1])) {
                break;
              }
              long long v15 = v10 + 1;
              LODWORD(v14) = *v10;
            }
            while ((*v10 & 0xFFFFFFDF) - 65 < 0x1A);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              int v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
              if (HIBYTE(v40.__r_.__value_.__r.__words[2]) == 6)
              {
                float v17 = &v40;
                goto LABEL_46;
              }
LABEL_49:
              if (v16 == 4)
              {
                size_t v22 = &v40;
                goto LABEL_54;
              }
              goto LABEL_69;
            }
            std::wstring::size_type size = v40.__r_.__value_.__l.__size_;
            if (v40.__r_.__value_.__l.__size_ == 6)
            {
              float v17 = (std::wstring *)v40.__r_.__value_.__r.__words[0];
LABEL_46:
              if (wmemcmp((const __int32 *)v17, dword_2558C3690, 6uLL))
              {
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  int v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
                  goto LABEL_49;
                }
                std::wstring::size_type size = v40.__r_.__value_.__l.__size_;
                goto LABEL_52;
              }
            }
            else
            {
LABEL_52:
              if (size != 4) {
                goto LABEL_69;
              }
              size_t v22 = (std::wstring *)v40.__r_.__value_.__r.__words[0];
LABEL_54:
              if (wmemcmp((const __int32 *)v22, dword_2558C36AC, 4uLL))
              {
LABEL_69:
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
                  std::wstring::__init_copy_ctor_external(&v34, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
                }
                else {
                  std::wstring v34 = v40;
                }
                blahtex::Token::Token(&v43, &v34, 0);
                std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)&v43);
                if (v44 < 0) {
                  operator delete((void *)v43);
                }
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v34.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v40.__r_.__value_.__l.__data_);
                }
                goto LABEL_78;
              }
            }
            uint64_t v23 = *a1;
            uint64_t v24 = a1[1];
            while (v10 != (unsigned int *)(v23 + 4 * v24))
            {
              uint64_t v25 = *v10;
              if (v25 <= 0x7F)
              {
                if ((*(_DWORD *)(v6 + 4 * v25 + 60) & 0x4000) == 0) {
                  break;
                }
              }
              else
              {
                int v26 = __maskrune(v25, 0x4000uLL);
                uint64_t v23 = *a1;
                uint64_t v24 = a1[1];
                if (!v26) {
                  break;
                }
              }
              ++v10;
            }
            if (v10 == (unsigned int *)(v23 + 4 * v24) || *v10 != 123)
            {
              uint64_t v33 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_2558C36C0);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_2558C362C);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_2558C362C);
              blahtex::Exception::Exception(v33, &v43, (uint64_t)&v40, (uint64_t)v39, (uint64_t)v38);
            }
            std::wstring::push_back(&v40, 123);
            for (uint64_t i = (std::wstring::value_type *)(v10 + 1); ; ++i)
            {
              if (i == (std::wstring::value_type *)(*a1 + 4 * a1[1]))
              {
                uint64_t v30 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_2558C3718);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_2558C362C);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_2558C362C);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, &dword_2558C362C);
                blahtex::Exception::Exception(v30, &v43, (uint64_t)v39, (uint64_t)v38, (uint64_t)v35);
              }
              std::wstring::value_type v28 = *i;
              if (*i == 125) {
                break;
              }
              std::wstring::push_back(&v40, v28);
            }
            std::wstring::push_back(&v40, 125);
            unint64_t v10 = (unsigned int *)(i + 1);
            goto LABEL_69;
          }
          if (v14 <= 0x7F)
          {
            if ((*(_DWORD *)(v6 + 4 * v14 + 60) & 0x4000) != 0)
            {
LABEL_35:
              std::wstring::append(&v40, dword_2558C35E0);
              float v18 = v7 + 2;
              do
              {
                unint64_t v10 = v18;
                if (v18 == (unsigned int *)(*a1 + 4 * a1[1])) {
                  break;
                }
                uint64_t v19 = *v18;
                int v20 = v19 <= 0x7F ? *(_DWORD *)(v6 + 4 * v19 + 60) & 0x4000 : __maskrune(v19, 0x4000uLL);
                float v18 = v10 + 1;
              }
              while (v20);
              goto LABEL_69;
            }
          }
          else if (__maskrune(v14, 0x4000uLL))
          {
            goto LABEL_35;
          }
          std::wstring::push_back(&v40, v7[1]);
          unint64_t v10 = v7 + 2;
          goto LABEL_69;
        }
      }
      else if (!__maskrune(v8, 0x4000uLL))
      {
        goto LABEL_17;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C35E0);
      blahtex::Token::Token(&v43, __p, 0);
      std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)&v43);
      if (v44 < 0) {
        operator delete((void *)v43);
      }
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v9 = v7 + 1;
      do
      {
        unint64_t v10 = v9;
        if (v9 == (unsigned int *)(*a1 + 4 * a1[1])) {
          break;
        }
        uint64_t v11 = *v9;
        int v12 = v11 <= 0x7F ? *(_DWORD *)(v6 + 4 * v11 + 60) & 0x4000 : __maskrune(v11, 0x4000uLL);
        unint64_t v9 = v10 + 1;
      }
      while (v12);
LABEL_78:
      uint64_t v29 = *a1;
      if (a3)
      {
        blahtex::Token::setSource(a2[1] - 32, v29, (uint64_t)v7, (uint64_t)v10);
        uint64_t v29 = *a1;
      }
      uint8x8_t v7 = v10;
    }
    while (v10 != (unsigned int *)(v29 + 4 * a1[1]));
  }
}

void sub_25589CF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v52 - 97) < 0)
  {
    operator delete(*(void **)(v52 - 120));
    if ((v51 & 1) == 0)
    {
LABEL_10:
      if (a44 < 0) {
        operator delete(a39);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v50);
  goto LABEL_10;
}

BOOL std::operator==[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(const __int32 *a1, __int32 *a2)
{
  size_t v4 = wcslen(a2);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == *((void *)a1 + 1))
    {
      if (v4 != -1)
      {
        a1 = *(const __int32 **)a1;
        if (!v4) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
LABEL_13:
      std::wstring::__throw_out_of_range[abi:ne180100]();
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 != -1)
    {
      if (!v4) {
        goto LABEL_10;
      }
LABEL_9:
      int v5 = wmemcmp(a1, a2, v4);
      if (v5) {
        return v5 == 0;
      }
LABEL_10:
      int v5 = 0;
      return v5 == 0;
    }
    goto LABEL_13;
  }
  return 0;
}

double blahtex::Manager::Manager(blahtex::Manager *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + ++*(void *)(this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  return result;
}

void blahtex::Manager::ProcessInput(uint64_t a1, std::wstring::size_type a2, int a3)
{
  {
    std::unordered_set<std::wstring>::unordered_set<std::wstring_view const*>((uint64_t)blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::reservedCommandTable, (uint64_t)&blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::reservedCommandArray, (uint64_t)&__block_descriptor_tmp_0);
  }
  size_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::wstring::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0) {
    std::wstring::size_type v7 = a2;
  }
  else {
    std::wstring::size_type v7 = *(void *)a2;
  }
  if ((v6 & 0x80u) != 0) {
    std::wstring::size_type v6 = *(void *)(a2 + 8);
  }
  v21.__r_.__value_.__r.__words[0] = v7;
  v21.__r_.__value_.__l.__size_ = v6;
  blahtex::Tokenise((uint64_t *)&v21, (uint64_t *)&v22, 1);
  *(unsigned char *)(a1 + 16) = 0;
  for (uint64_t i = (uint64_t)v22; (blahtex::Token *)i != v23; i += 32)
  {
    if (std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::reservedCommandTable, i))
    {
      std::wstring::append((std::wstring *)i, dword_2558C7D5C);
      continue;
    }
    unsigned int v9 = *(unsigned __int8 *)(i + 23);
    if (*(char *)(i + 23) < 0)
    {
      if (*(void *)(i + 8) <= 7uLL) {
        goto LABEL_27;
      }
      uint64_t v10 = *(void *)(i + 8);
    }
    else
    {
      if (v9 <= 7) {
        goto LABEL_28;
      }
      uint64_t v10 = *(unsigned __int8 *)(i + 23);
    }
    std::wstring::basic_string(&v21, (const std::wstring *)i, v10 - 8, 8uLL, (std::allocator<wchar_t> *)&v20);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v11 = (std::wstring *)v21.__r_.__value_.__r.__words[0];
      if (v21.__r_.__value_.__l.__size_ == 8) {
        goto LABEL_21;
      }
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) == 8)
    {
      uint64_t v11 = &v21;
LABEL_21:
      int v12 = wmemcmp((const __int32 *)v11, dword_2558C7D5C, 8uLL);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (!v12)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v21, dword_2558C7D80);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v20, &dword_2558C362C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_2558C362C);
        blahtex::Exception::Exception(exception, (long long *)&v21, i, (uint64_t)&v20, (uint64_t)v19);
      }
    }
    unsigned int v9 = *(unsigned __int8 *)(i + 23);
LABEL_27:
    if ((v9 & 0x80) == 0)
    {
LABEL_28:
      int v13 = (const __int32 *)i;
      if (v9 == 14) {
        goto LABEL_32;
      }
      continue;
    }
    if (*(void *)(i + 8) == 14)
    {
      int v13 = *(const __int32 **)i;
LABEL_32:
      if (!wmemcmp(v13, dword_2558C7DC0, 0xEuLL))
      {
        *(unsigned char *)(a1 + 16) = 1;
        MEMORY[0x25A28FDC0](i, dword_2558C35E0);
      }
    }
  }
  memset(&v21, 0, sizeof(v21));
  {
    blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gStandardMacrosTokenised = 0;
    *(void *)algn_269EFEA08 = 0;
    qword_269EFEA10 = 0;
  }
  {
    blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised = 0;
    *(void *)algn_269EFEA28 = 0;
    qword_269EFEA30 = 0;
  }
  if (blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::onceToken == -1)
  {
    if (!a3)
    {
LABEL_39:
      uint64_t v14 = (blahtex::Token *)blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gStandardMacrosTokenised;
      long long v15 = *(blahtex::Token **)algn_269EFEA08;
      while (v14 != v15)
      {
        std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&v21, v14);
        uint64_t v14 = (blahtex::Token *)((char *)v14 + 32);
      }
      int v16 = v22;
      float v17 = v23;
      while (v16 != v17)
      {
        std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&v21, v16);
        int v16 = (blahtex::Token *)((char *)v16 + 32);
      }
      v19[0] = 0;
      blahtex::Parser::DoParse();
    }
  }
  else
  {
    dispatch_once(&blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::onceToken, &__block_literal_global_2);
    if (!a3) {
      goto LABEL_39;
    }
  }
  std::vector<blahtex::Token>::__assign_with_size[abi:ne180100]<blahtex::Token*,blahtex::Token*>((uint64_t)&v21, (blahtex::Token *)blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised, *(blahtex::Token **)algn_269EFEA28, (*(void *)algn_269EFEA28- blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised) >> 5);
  goto LABEL_39;
}

void sub_25589D754(_Unwind_Exception *a1)
{
}

void sub_25589D768(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v30 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v30)
  {
LABEL_10:
    a23 = &a29;
    std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
    JUMPOUT(0x25589D90CLL);
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

void sub_25589D7E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 == 1)
  {
    int v12 = (const __int32 *)__cxa_begin_catch(a1);
    if (std::operator==[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v12, dword_2558C7DFC))
    {
      *(unsigned char *)(v11 + 17) = 1;
      blahtex::Exception::operator=(v11 + 24, (uint64_t)v12);
      uint64_t v13 = *(void *)(v11 + 8);
      *(void *)(v11 + ++*(void *)(this + 8) = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      __cxa_end_catch();
      JUMPOUT(0x25589D5D4);
    }
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    blahtex::Exception::Exception(exception, (const blahtex::Exception *)v12);
  }
  uint64_t v15 = a11;
  a11 = 0;
  if (v15) {
    std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100]((uint64_t)&a11, v15);
  }
  JUMPOUT(0x25589D8ECLL);
}

void sub_25589D894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_free_exception(v11);
  __cxa_end_catch();
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  JUMPOUT(0x25589D8ECLL);
}

void sub_25589D8D4()
{
}

void sub_25589D8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t **a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a14 = &a17;
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&a14);
  a17 = &a20;
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&a17);
  JUMPOUT(0x25589D90CLL);
}

void ___ZN7blahtex7Manager12ProcessInputERKNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEbb_block_invoke()
{
  blahtex::Tokenise((uint64_t *)&blahtex::Manager::gTexvcCompatibilityMacros, &blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised, 0);

  blahtex::Tokenise((uint64_t *)&blahtex::Manager::gStandardMacros, &blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gStandardMacrosTokenised, 0);
}

uint64_t blahtex::Exception::operator=(uint64_t a1, uint64_t a2)
{
  std::wstring::operator=((std::wstring *)a1, (const std::wstring *)a2);
  if (a1 != a2) {
    std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 24), *(std::wstring **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  return a1;
}

std::wstring *blahtex::Exception::Exception(std::wstring *this, const blahtex::Exception *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_25589DA30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::Manager::GenerateMathml(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 17))
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    blahtex::Exception::Exception(exception, (const blahtex::Exception *)(a1 + 24));
    std::wstring::size_type v7 = (void (*)(void *))blahtex::Exception::~Exception;
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)exception, "Layout tree not yet built in Manager::GenerateMathml");
    std::wstring::size_type v6 = (struct type_info *)MEMORY[0x263F8C1E0];
    std::wstring::size_type v7 = (void (*)(void *))MEMORY[0x263F8C048];
LABEL_8:
    __cxa_throw(exception, v6, v7);
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (*(unsigned char *)(a1 + 16)) {
    LODWORD(v1std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = 0;
  }
  int v9 = 0;
  blahtex::MathmlEnvironment::MathmlEnvironment((blahtex::MathmlEnvironment *)v8, BYTE4(v10) == 0, 0xFFFFFFFF);
  return (*(uint64_t (**)(uint64_t, long long *, unsigned char *, int *))(*(void *)v2 + 24))(v2, &v10, v8, &v9);
}

void sub_25589DB5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(void *a1, const char *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  MEMORY[0x25A28FED0](v22, a1);
  if (v22[0])
  {
    size_t v4 = strlen(a2);
    size_t v5 = v4;
    if (v4 < 0x65)
    {
      std::wstring::size_type v7 = 0;
      std::wstring::size_type v6 = &v24;
    }
    else
    {
      std::wstring::size_type v6 = (char *)malloc_type_malloc(4 * v4, 0x100004052888210uLL);
      std::wstring::size_type v7 = v6;
      if (!v6) {
        std::__throw_bad_alloc();
      }
    }
    char v8 = *a2;
    if (*a2)
    {
      int v9 = (unsigned __int8 *)(a2 + 1);
      long long v10 = (std::locale::id *)MEMORY[0x263F8C110];
      uint64_t v11 = v6;
      do
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
        uint64_t v12 = std::locale::use_facet(&v23, v10);
        int v13 = ((uint64_t (*)(const std::locale::facet *, void))v12->__vftable[3].__on_zero_shared)(v12, v8);
        std::locale::~locale(&v23);
        *(_DWORD *)uint64_t v11 = v13;
        v11 += 4;
        int v14 = *v9++;
        char v8 = v14;
      }
      while (v14);
    }
    uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v16 = *(void *)(v15 + 40);
    int v17 = *(_DWORD *)(v15 + 8);
    int v18 = *(_DWORD *)(v15 + 144);
    if (v18 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v19 = std::locale::use_facet(&v23, MEMORY[0x263F8C110]);
      int v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[3].__on_zero_shared)(v19, 32);
      std::locale::~locale(&v23);
      *(_DWORD *)(v15 + 144) = v18;
    }
    if ((v17 & 0xB0) == 0x20) {
      uint64_t v20 = (uint64_t)&v6[4 * v5];
    }
    else {
      uint64_t v20 = (uint64_t)v6;
    }
    if (!std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v6, v20, (uint64_t)&v6[4 * v5], v15, v18))std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5); {
    if (v7)
    }
      free(v7);
  }
  MEMORY[0x25A28FEE0](v22);
  return a1;
}

void sub_25589DDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  if (a2)
  {
    std::locale::~locale(&a11);
    if (v12) {
      free(v12);
    }
    MEMORY[0x25A28FEE0](&a9);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x25589DD7CLL);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::vector<std::wstring> *this, std::wstring *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    int v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::wstring>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_25589DFC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25589DFCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, long long *a2, long long *a3, std::wstring *this)
{
  size_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    std::wstring::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((void *)v6 + 1));
        size_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      std::wstring::size_type v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25589E080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::wstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(std::wstring *__str, std::wstring *a2, std::wstring *this)
{
  size_t v4 = __str;
  if (__str != a2)
  {
    do
      std::wstring::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::wstring *)v4;
}

std::wstring *std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::wstring *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::wstring::size_type v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::wstring *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::wstring::size_type)result;
  }
  return result;
}

void sub_25589E194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++*(void *)(this + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    size_t v4 = (void **)(a2 + 40);
    std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v3 = std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::~__hash_table(a2);
    MEMORY[0x25A290040](v3, 0x10A0C40106B2905);
  }
}

void std::wstring::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2653C4BB0, MEMORY[0x263F8C068]);
}

void sub_25589E270(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t std::unordered_set<std::wstring>::unordered_set<std::wstring_view const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__emplace_unique_impl<std::wstring_view const&>((void *)a1, v5);
      v5 += 16;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_25589E31C(_Unwind_Exception *a1)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__emplace_unique_impl<std::wstring_view const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__construct_node<std::wstring_view const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::wstring __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_25589E398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__construct_node<std::wstring_view const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  long long v7 = operator new(0x28uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + ++*(void *)(this + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  void *v7 = 0;
  v7[1] = 0;
  std::allocator<std::__hash_node<std::wstring,void *>>::construct[abi:ne180100]<std::wstring,std::wstring_view const&>(v6, (unsigned char *)v7 + 16, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_25589E44C(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = std::__string_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void std::allocator<std::__hash_node<std::wstring,void *>>::construct[abi:ne180100]<std::wstring,std::wstring_view const&>(int a1, unsigned char *__dst, uint64_t a3)
{
  uint64_t v3 = __dst;
  unint64_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = *(const void **)a3;
  if (v4 >= 5)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5) {
      uint64_t v6 = v4 | 1;
    }
    long long v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v6 + 1);
    v3[1] = v4;
    v3[2] = v8 | 0x8000000000000000;
    *uint64_t v3 = v7;
    uint64_t v3 = v7;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, 4 * v4);
LABEL_9:
  *((_DWORD *)v3 + v4) = 0;
}

void *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == a2)
          {
            if (std::equal_to<std::wstring>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v11 + 2), a3)) {
              return v11;
            }
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4) {
                v12 %= v4;
              }
            }
            else
            {
              v12 &= v4 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *unint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    int8x8_t v2 = __p;
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v6 == v13)
      {
        if (std::equal_to<std::wstring>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::vector<blahtex::Token>::__assign_with_size[abi:ne180100]<blahtex::Token*,blahtex::Token*>(uint64_t a1, blahtex::Token *a2, blahtex::Token *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(std::wstring **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<blahtex::Token>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<blahtex::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(v8, v6, a3, *(blahtex::Token **)(a1 + 8));
LABEL_15:
    *(void *)(a1 + ++*(void *)(this + 8) = v13;
    return;
  }
  float v14 = *(std::wstring **)(a1 + 8);
  unint64_t v15 = ((char *)v14 - (char *)v9) >> 5;
  if (v15 < a4)
  {
    unint64_t v16 = (blahtex::Token *)((char *)a2 + 32 * v15);
    if (v14 != v9)
    {
      uint64_t v17 = 32 * v15;
      do
      {
        blahtex::Token::operator=(v9, (std::wstring *)v6);
        unint64_t v6 = (blahtex::Token *)((char *)v6 + 32);
        unint64_t v9 = (std::wstring *)((char *)v9 + 32);
        v17 -= 32;
      }
      while (v17);
      unint64_t v9 = *(std::wstring **)(a1 + 8);
    }
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(v8, v16, a3, (blahtex::Token *)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *(void *)a1;
  }
  else
  {
    uint64_t v18 = *(void *)a1;
    do
    {
      blahtex::Token::operator=(v9, (std::wstring *)v6);
      unint64_t v6 = (blahtex::Token *)((char *)v6 + 32);
      unint64_t v9 = (std::wstring *)((char *)v9 + 32);
      v18 += 32;
    }
    while (v6 != a3);
    float v14 = *(std::wstring **)(a1 + 8);
  }
  while (v14 != (std::wstring *)v18)
  {
    if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[1]) < 0) {
      operator delete((void *)v14[-2].__r_.__value_.__r.__words[2]);
    }
    float v14 = (std::wstring *)((char *)v14 - 32);
  }
  *(void *)(a1 + ++*(void *)(this + 8) = v18;
}

void sub_25589EAF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(this + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<blahtex::Token>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<blahtex::Token>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<blahtex::Token>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

blahtex::Token *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(uint64_t a1, blahtex::Token *a2, blahtex::Token *a3, blahtex::Token *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      blahtex::Token::Token(v4, v6);
      unint64_t v6 = (const blahtex::Token *)((char *)v6 + 32);
      uint64_t v4 = (blahtex::Token *)((char *)v11 + 32);
      uint64_t v11 = (blahtex::Token *)((char *)v11 + 32);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_25589EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **blahtex::MathmlFontString(unsigned int a1)
{
  return &(&blahtex::gMathmlFontStrings)[2 * a1];
}

void blahtex::MathmlNode::~MathmlNode(blahtex::MathmlNode *this)
{
  uint64_t v2 = (void *)((char *)this + 64);
  for (uint64_t i = *((void *)this + 9); (void *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(blahtex::MathmlNode **)(i + 16);
    if (v4)
    {
      blahtex::MathmlNode::~MathmlNode(v4);
      MEMORY[0x25A290040]();
    }
  }
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v2);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

uint64_t blahtex::MathmlNode::AddFontAttributes(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (*(unsigned char *)(a3 + 5))
  {
    int v5 = *(_DWORD *)result;
    if (a2 - 4 > 4)
    {
      if (v5)
      {
        int v9 = 0;
      }
      else
      {
        if (*(char *)(result + 55) < 0) {
          uint64_t v11 = *(void *)(result + 40);
        }
        else {
          uint64_t v11 = *(unsigned __int8 *)(result + 55);
        }
        int v9 = v11 == 1;
      }
      unsigned int v14 = (a2 < 0xD) & (0x180Cu >> a2);
      if (v9 != v14)
      {
        if (v14) {
          unint64_t v15 = "i";
        }
        else {
          unint64_t v15 = "n";
        }
        int v19 = 17;
        uint64_t v20 = &v19;
        unint64_t v16 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(result + 8), &v19, (uint64_t)&std::piecewise_construct, &v20);
        unint64_t result = MEMORY[0x25A28FDC0](v16 + 5, v15);
      }
      if (a2 <= 0xC && ((1 << a2) & 0x140A) != 0)
      {
        int v19 = 18;
        uint64_t v20 = &v19;
        uint64_t v17 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v4 + 8), &v19, (uint64_t)&std::piecewise_construct, &v20);
        unint64_t result = MEMORY[0x25A28FDC0](v17 + 5, "b");
      }
      if (a2 - 9 > 3)
      {
        if (a2 != 13) {
          return result;
        }
        int v19 = 16;
        uint64_t v20 = &v19;
        unint64_t v6 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v4 + 8), &v19, (uint64_t)&std::piecewise_construct, &v20)+ 5;
        uint8x8_t v7 = "m";
      }
      else
      {
        int v19 = 16;
        uint64_t v20 = &v19;
        unint64_t v6 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v4 + 8), &v19, (uint64_t)&std::piecewise_construct, &v20)+ 5;
        uint8x8_t v7 = "s";
      }
    }
    else
    {
      if (v5 != 2 || a2 != 8 && a2 != 5)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unexpected font/symbol combination in MathmlNode::AddFontAttributes");
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      int v19 = 18;
      uint64_t v20 = &v19;
      unint64_t v6 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(result + 8), &v19, (uint64_t)&std::piecewise_construct, &v20)+ 5;
      uint8x8_t v7 = "b";
    }
    return MEMORY[0x25A28FDC0](v6, v7);
  }
  else
  {
    if (*(_DWORD *)result)
    {
      int v8 = 0;
    }
    else
    {
      if (*(char *)(result + 55) < 0) {
        uint64_t v10 = *(void *)(result + 40);
      }
      else {
        uint64_t v10 = *(unsigned __int8 *)(result + 55);
      }
      int v8 = 2 * (v10 == 1);
    }
    if (v8 != a2)
    {
      unint64_t v12 = &(&blahtex::gMathmlFontStrings)[2 * a2];
      int v19 = 2;
      uint64_t v20 = &v19;
      unint64_t v13 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(result + 8), &v19, (uint64_t)&std::piecewise_construct, &v20);
      return MEMORY[0x25A28FDD0](v13 + 5, *v12, v12[1]);
    }
  }
  return result;
}

void sub_25589EF8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *blahtex::MathmlNode::PrintType(unsigned int *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (v2 >= 0x16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Illegal node type in MathmlNode::PrintType");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  unint64_t v3 = (uint64_t *)(&blahtex::gTypeArray + 2 * v2);
  uint64_t v4 = v3[1];
  uint64_t v6 = *v3;

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v6, v4);
}

void sub_25589F028(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *blahtex::MathmlNode::PrintAttributes(void *result, void *a2)
{
  uint64_t v2 = (void *)result[1];
  unint64_t v3 = result + 2;
  if (v2 != result + 2)
  {
    do
    {
      if (*((_DWORD *)v2 + 8) >= 0x16u)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Illegal attribute in MathmlNode::PrintAttributes");
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      int v5 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 1);
      uint64_t v6 = (uint64_t *)(&blahtex::gAttributeArray + 2 * *((unsigned int *)v2 + 8));
      uint8x8_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v5, *v6, v6[1]);
      int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)"=", 2);
      int v9 = *((char *)v2 + 63);
      if (v9 >= 0) {
        uint64_t v10 = (uint64_t)(v2 + 5);
      }
      else {
        uint64_t v10 = v2[5];
      }
      if (v9 >= 0) {
        uint64_t v11 = *((unsigned __int8 *)v2 + 63);
      }
      else {
        uint64_t v11 = v2[6];
      }
      unint64_t v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
      unint64_t result = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)"\"", 1);
      unint64_t v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          unsigned int v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unsigned int v14 = (void *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          uint64_t v2 = v14;
        }
        while (!v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v3);
  }
  return result;
}

void sub_25589F17C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *blahtex::MathmlNode::Print(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = a5;
  if (a5 > 0) {
    int v10 = a4;
  }
  else {
    int v10 = 0;
  }
  if (v10 == 1)
  {
    int v11 = a5;
    do
    {
      std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 2);
      --v11;
    }
    while (v11);
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)"<", 1);
  blahtex::MathmlNode::PrintType((unsigned int *)a1, a2);
  blahtex::MathmlNode::PrintAttributes((void *)a1, a2);
  if (*(unsigned char *)(a3 + 6) && *(void *)(a1 + 56))
  {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 7);
    unint64_t v12 = (void *)std::wostream::operator<<();
    std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, ",");
    unint64_t v13 = (void *)std::wostream::operator<<();
    std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, "'");
  }
  uint64_t v14 = *(unsigned __int8 *)(a1 + 55);
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(void *)(a1 + 40)) {
      goto LABEL_15;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    goto LABEL_15;
  }
  if (!*(void *)(a1 + 80))
  {
    std::wstring v21 = "/";
    size_t v22 = a2;
    uint64_t v23 = 2;
    goto LABEL_33;
  }
LABEL_15:
  if ((v14 & 0x80) != 0) {
    uint64_t v14 = *(void *)(a1 + 40);
  }
  BOOL v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)">", 1);
  if (v14)
  {
    unint64_t v16 = v15;
    blahtex::XmlEncode((uint64_t *)(a1 + 32), a3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::wstring::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::wstring::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (a4)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      int v19 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C110]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[3].__on_zero_shared)(v19, 10);
      std::locale::~locale((std::locale *)&__p);
      std::wostream::put();
      std::wostream::flush();
    }
    for (uint64_t i = *(void *)(a1 + 72); i != a1 + 64; uint64_t i = *(void *)(i + 8))
      blahtex::MathmlNode::Print(*(void *)(i + 16), a2, a3, a4, (v5 + 1));
    if (v10)
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 2);
        --v5;
      }
      while (v5);
    }
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)"<", 2);
  blahtex::MathmlNode::PrintType((unsigned int *)a1, a2);
  std::wstring v21 = ">";
  size_t v22 = a2;
  uint64_t v23 = 1;
LABEL_33:
  unint64_t result = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v22, (uint64_t)v21, v23);
  if (a4)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v25 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[3].__on_zero_shared)(v25, 10);
    std::locale::~locale((std::locale *)&__p);
    std::wostream::put();
    return (void *)std::wostream::flush();
  }
  return result;
}

void sub_25589F4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *blahtex::MathTokenTable(blahtex *this)
{
  {
    std::unordered_map<std::wstring,blahtex::Parser::TokenCode>::unordered_map<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const*>((uint64_t)&blahtex::MathTokenTable(void)::gMathTokenTable, (uint64_t)&blahtex::gMathTokenArray, (uint64_t)(&blahtex::gMathTokenArray + 2127));
  }
  return &blahtex::MathTokenTable(void)::gMathTokenTable;
}

void sub_25589F56C(_Unwind_Exception *a1)
{
}

void *blahtex::TextTokenTable(blahtex *this)
{
  {
    std::unordered_map<std::wstring,blahtex::Parser::TokenCode>::unordered_map<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const*>((uint64_t)&blahtex::TextTokenTable(void)::gTextTokenTable, (uint64_t)&blahtex::gTextTokenArray, (uint64_t)&blahtex::gDelimiterArray);
  }
  return &blahtex::TextTokenTable(void)::gTextTokenTable;
}

void sub_25589F5F0(_Unwind_Exception *a1)
{
}

uint64_t blahtex::Parser::GetMathTokenCode(blahtex::Parser *this, const blahtex::Token *a2)
{
  blahtex::MathTokenTable(this);
  blahtex::translateToken(a2, (blahtex::Token *)v24);
  unint64_t v3 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::MathTokenTable(void)::gMathTokenTable, (uint64_t)v24);
  if (v3)
  {
    uint64_t v4 = *((unsigned int *)v3 + 10);
    if (v4 == 3)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C8790);
      if (blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)__p))
      {
        BOOL v8 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, (__int32 *)&unk_2558C8798);
        if (blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)v20))
        {
          BOOL v8 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, (__int32 *)&unk_2558C87A0);
          BOOL v8 = blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)v18);
          if (v19 < 0) {
            operator delete(v18[0]);
          }
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v8)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C87A8);
        std::operator+<wchar_t>((const __int32 *)&unk_2558C882C, v24, v20);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
        blahtex::Exception::Exception(exception, (long long *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C8838);
      if (blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)__p))
      {
        BOOL v14 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, (__int32 *)&unk_2558C8840);
        BOOL v14 = blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)v20);
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v14)
      {
        BOOL v15 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C8848);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
        blahtex::Exception::Exception(v15, (long long *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
      }
      unint64_t v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "Unexpected illegal character in Parser::GetMathTokenCode");
      __cxa_throw(v16, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v25 < 0) {
      goto LABEL_24;
    }
    return v4;
  }
  if ((v25 & 0x80000000) == 0)
  {
    unsigned int v5 = v24[0];
    if (LODWORD(v24[0]) != 92)
    {
      if (SLODWORD(v24[0]) < 128)
      {
        if (SLODWORD(v24[0]) > 96)
        {
          if (LODWORD(v24[0]) >= 0x7B) {
            goto LABEL_32;
          }
          return 26;
        }
        if (SLODWORD(v24[0]) > 64)
        {
          if (LODWORD(v24[0]) >= 0x5B) {
            goto LABEL_32;
          }
          return 26;
        }
        if (SLODWORD(v24[0]) < 48) {
          goto LABEL_32;
        }
        goto LABEL_22;
      }
LABEL_35:
      unint64_t v13 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C88FC);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_2558C8834);
      blahtex::Exception::Exception(v13, (long long *)__p, (uint64_t)v20, (uint64_t)v18, (uint64_t)v17);
    }
LABEL_33:
    blahtex::TextTokenTable(0);
    int v11 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::TextTokenTable(void)::gTextTokenTable, (uint64_t)v24);
    unint64_t v12 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    if (!v11)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C88AC);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
      blahtex::Exception::Exception(v12, (long long *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C8848);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
    blahtex::Exception::Exception(v12, (long long *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
  }
  int v6 = *(_DWORD *)v24[0];
  if (*(_DWORD *)v24[0] == 92) {
    goto LABEL_33;
  }
  if (v6 > 127) {
    goto LABEL_35;
  }
  if ((v6 - 97) < 0x1A || v6 > 64 && *(int *)v24[0] < 91) {
    goto LABEL_23;
  }
  unsigned int v5 = *(_DWORD *)v24[0];
  if (*(int *)v24[0] <= 47)
  {
LABEL_32:
    int v10 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C88AC);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
    blahtex::Exception::Exception(v10, (long long *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
  }
LABEL_22:
  if (v5 >= 0x3A) {
    goto LABEL_32;
  }
LABEL_23:
  uint64_t v4 = 26;
  if (v25 < 0) {
LABEL_24:
  }
    operator delete((void *)v24[0]);
  return v4;
}

void sub_25589FB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v33 & 1) == 0)
    {
LABEL_10:
      if (*(char *)(v34 - 41) < 0) {
        operator delete(*(void **)(v34 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v32);
  goto LABEL_10;
}

uint64_t std::operator+<wchar_t>@<X0>(const __int32 *a1@<X0>, const void **a2@<X1>, void **a3@<X8>)
{
  size_t v6 = wcslen(a1);
  size_t v7 = v6;
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v8 = (unint64_t)a2[1];
  }
  uint64_t result = std::wstring::basic_string[abi:ne180100]((uint64_t)a3, v8 + v6);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v7) {
    uint64_t result = (uint64_t)memmove(a3, a1, 4 * v7);
  }
  if (v8)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v10 = a2;
    }
    else {
      int v10 = *a2;
    }
    uint64_t result = (uint64_t)memmove((char *)a3 + 4 * v7, v10, 4 * v8);
  }
  *((_DWORD *)a3 + v7 + v++*(void *)(this + 8) = 0;
  return result;
}

void blahtex::Token::~Token(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t blahtex::Parser::GetTextTokenCode(blahtex::Parser *this, int **a2)
{
  blahtex::TextTokenTable(this);
  unint64_t v3 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::TextTokenTable(void)::gTextTokenTable, (uint64_t)a2);
  if (!v3)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 < 0)
    {
      int v9 = **a2;
      if (v9 != 92)
      {
        if ((v9 - 97) < 0x1A) {
          return 26;
        }
        int v10 = *a2;
        int v11 = **a2;
        if (v11 >= 65 && v11 < 0x5B) {
          return 26;
        }
        if (v11 <= 47) {
          goto LABEL_26;
        }
        int v8 = *v10;
        goto LABEL_24;
      }
    }
    else
    {
      int v8 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 != 92)
      {
        if (v8 >= 97)
        {
          if (v8 < 0x7B) {
            return 26;
          }
          goto LABEL_25;
        }
        if (v8 > 64)
        {
          if (v8 < 0x5B) {
            return 26;
          }
LABEL_25:
          int v10 = *a2;
LABEL_26:
          if (v7 >= 0) {
            unint64_t v12 = (int *)a2;
          }
          else {
            unint64_t v12 = v10;
          }
          if (*v12 > 127) {
            return 26;
          }
LABEL_34:
          exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C88AC);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558C8834);
          blahtex::Exception::Exception(exception, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
        }
        if (v8 <= 47) {
          goto LABEL_34;
        }
LABEL_24:
        if (v8 < 58) {
          return 26;
        }
        goto LABEL_25;
      }
    }
    blahtex::MathTokenTable(0);
    unint64_t v13 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::MathTokenTable(void)::gMathTokenTable, (uint64_t)a2);
    BOOL v14 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    if (!v13)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C88AC);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558C8834);
      blahtex::Exception::Exception(v14, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C8A70);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558C8834);
    blahtex::Exception::Exception(v14, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
  }
  uint64_t result = *((unsigned int *)v3 + 10);
  if (result == 3)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, (__int32 *)&unk_2558C8948);
    if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v28))
    {
      BOOL v5 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C8950);
      if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)__p))
      {
        BOOL v5 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, (__int32 *)&unk_2558C8790);
        if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)v24))
        {
          BOOL v5 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, (__int32 *)&unk_2558C8798);
          if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)v22))
          {
            BOOL v5 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, (__int32 *)&unk_2558C87A0);
            BOOL v5 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)v20);
            if (v21 < 0) {
              operator delete(v20[0]);
            }
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
      }
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v29 < 0) {
      operator delete((void *)v28);
    }
    if (v5)
    {
      size_t v6 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C8958);
      std::operator+<wchar_t>((const __int32 *)&unk_2558C882C, (const void **)a2, __p);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558C8834);
      blahtex::Exception::Exception(v6, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C89DC);
    BOOL v16 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v28);
    if (v29 < 0) {
      operator delete((void *)v28);
    }
    if (v16)
    {
      uint64_t v17 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C8958);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C89DC);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, dword_2558C89E8);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, &dword_2558C8834);
      blahtex::Exception::Exception(v17, &v28, (uint64_t)__p, (uint64_t)v24, (uint64_t)v22);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, (__int32 *)&unk_2558C8A24);
    BOOL v18 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v28);
    if (v29 < 0) {
      operator delete((void *)v28);
    }
    char v19 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    if (v18)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C8958);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C8A24);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, dword_2558C8A2C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, &dword_2558C8834);
      blahtex::Exception::Exception(v19, &v28, (uint64_t)__p, (uint64_t)v24, (uint64_t)v22);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_2558C8A70);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558C8834);
    blahtex::Exception::Exception(v19, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
  }
  return result;
}

void sub_2558A0420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

void blahtex::Parser::DoParse()
{
}

void sub_2558A0994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((v29 & 1) == 0)
    {
LABEL_12:
      uint64_t v32 = *v27;
      *char v27 = 0;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void blahtex::Parser::ParseMathList(uint64_t *__return_ptr a1@<X8>, blahtex::Parser *this@<X0>)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, this);
  uint64_t v5 = v3;
  uint64_t v4 = v2;
  operator new();
}

uint64_t std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100](uint64_t a1)
{
  return *(void *)a1;
}

uint64_t *std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void blahtex::Parser::ParseMathField(blahtex::MacroProcessor **this)
{
  blahtex::MacroProcessor::SkipWhitespace(*this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)__p);
  blahtex::translateToken((blahtex *)__p, (blahtex::Token *)v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  int MathTokenCode = blahtex::Parser::GetMathTokenCode(v2, (const blahtex::Token *)v14);
  if (MathTokenCode != 4)
  {
    if (MathTokenCode == 26) {
      operator new();
    }
    if (!MathTokenCode)
    {
      exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C8C7C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v10, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v9, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v8, &dword_2558C8834);
      blahtex::Exception::Exception(exception, (long long *)__p, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8);
    }
    size_t v6 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C8CD4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v10, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v9, &dword_2558C8834);
    blahtex::Exception::Exception(v6, (long long *)__p, (uint64_t)v14, (uint64_t)v10, (uint64_t)v9);
  }
  blahtex::Parser::ParseMathList((blahtex::Parser *)this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)__p);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v10, (__int32 *)&unk_2558C8C28);
  BOOL v4 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)__p, (const __int32 *)v10);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v4)
  {
    int v7 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C8C30);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v10, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v9, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v8, &dword_2558C8834);
    blahtex::Exception::Exception(v7, (long long *)__p, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_2558A4DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v35 & 1) == 0)
    {
LABEL_12:
      uint64_t v38 = *v33;
      *uint64_t v33 = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
      if (*(char *)(v36 - 41) < 0) {
        operator delete(*(void **)(v36 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v34);
  goto LABEL_12;
}

blahtex::ParseTree::MathSymbol *blahtex::ParseTree::MathSymbol::MathSymbol(blahtex::ParseTree::MathSymbol *this, const blahtex::Token *a2)
{
  *(void *)this = &unk_27045BC60;
  blahtex::Token::Token((blahtex::ParseTree::MathSymbol *)((char *)this + 8), a2);
  return this;
}

void *std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

void blahtex::Parser::ParseMathTable(blahtex::Parser *this)
{
}

void sub_2558A5690(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_2558A5788(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2558A56F0);
}

void std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    *(void *)BOOL v14 = *a2;
    int v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      BOOL v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v7 = *a2;
    int v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t std::unique_ptr<blahtex::ParseTree::MathNode>::release[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  return v1;
}

BOOL std::vector<blahtex::ParseTree::MathNode *>::empty[abi:ne180100](void *a1)
{
  return *a1 == a1[1];
}

void *blahtex::Parser::PrepareScripts(blahtex::Parser *this, blahtex::ParseTree::MathList *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  if (*((void *)a2 + 1) == v2) {
    operator new();
  }
  uint64_t v3 = *(const void **)(v2 - 8);
  if (!v3
  {
    operator new();
  }
  return v4;
}

uint64_t std::vector<blahtex::ParseTree::MathNode *>::back[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 8;
}

uint64_t std::unique_ptr<blahtex::ParseTree::MathNode>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void blahtex::Parser::ParseColourName(blahtex::MacroProcessor **this@<X0>, uint64_t a2@<X8>)
{
  blahtex::MacroProcessor::SkipWhitespace(*this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)v23);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"{");
  BOOL v4 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v23, (const __int32 *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (v4)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, (__int32 *)"M");
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"\\"");
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_2558C8834);
    blahtex::Exception::Exception(exception, (long long *)v23, (uint64_t)__p, (uint64_t)v20, (uint64_t)v19);
  }
  char v5 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(void *)(this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    while (1)
    {
      blahtex::MacroProcessor::Get(*this, (uint64_t)v23);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558C8C28);
      BOOL v6 = blahtex::Token::operator==((const __int32 *)v23, (const __int32 *)__p);
      BOOL v7 = v6;
      if (v22 < 0)
      {
        operator delete(__p[0]);
        if (v7)
        {
LABEL_9:
          if (blahtex::lookupColour(a2) == 0x10000000)
          {
            char v15 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"I");
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_2558C8834);
            blahtex::Exception::Exception(v15, (long long *)__p, a2, (uint64_t)v20, (uint64_t)v19);
          }
          char v5 = 1;
          unsigned __int8 v8 = v24;
          goto LABEL_36;
        }
      }
      else if (v6)
      {
        goto LABEL_9;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
      BOOL v9 = blahtex::Token::operator==((const __int32 *)v23, (const __int32 *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v9)
      {
        BOOL v16 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558C8C30);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_2558C8834);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_2558C8834);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
        blahtex::Exception::Exception(v16, (long long *)__p, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18);
      }
      uint64_t v10 = (v24 & 0x80u) == 0 ? (const std::wstring::value_type *)v23 : (const std::wstring::value_type *)v23[0];
      uint64_t v11 = (v24 & 0x80u) == 0 ? (void *)v24 : v23[1];
      std::wstring::append((std::wstring *)a2, v10, (std::wstring::size_type)v11);
      unsigned __int8 v8 = v24;
      if ((char)v24 < 0) {
        break;
      }
      if (v24 != 1) {
        goto LABEL_43;
      }
      unsigned int v12 = v23[0];
      if (SLODWORD(v23[0]) <= 64) {
        goto LABEL_28;
      }
      if (LODWORD(v23[0]) >= 0x5B)
      {
        if (SLODWORD(v23[0]) >= 97)
        {
          if (LODWORD(v23[0]) >= 0x7B) {
            goto LABEL_43;
          }
          goto LABEL_37;
        }
LABEL_28:
        if (SLODWORD(v23[0]) < 48) {
          goto LABEL_43;
        }
        goto LABEL_35;
      }
LABEL_37:
      if (v7) {
        goto LABEL_40;
      }
    }
    if (v23[1] != (void *)1) {
      goto LABEL_43;
    }
    unsigned int v13 = *(_DWORD *)v23[0];
    if (*(int *)v23[0] >= 65 && (v13 < 0x5B || v13 - 97 < 0x1A)) {
      goto LABEL_36;
    }
    unsigned int v12 = *(_DWORD *)v23[0];
    if (*(int *)v23[0] <= 47) {
      goto LABEL_43;
    }
LABEL_35:
    if (v12 >= 0x3A)
    {
LABEL_43:
      BOOL v14 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"I");
      std::operator+[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((__int32 *)".", (const void **)a2, v20);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_2558C8834);
      blahtex::Exception::Exception(v14, (long long *)__p, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18);
    }
LABEL_36:
    if ((v8 & 0x80) == 0) {
      goto LABEL_37;
    }
    operator delete(v23[0]);
  }
  while (!v7);
LABEL_40:
  if (!(v5 & 1 | (*(char *)(a2 + 23) >= 0))) {
    operator delete(*(void **)a2);
  }
}

void sub_2558A5F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0)
  {
    operator delete(a33);
    if ((v39 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v39)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v38);
  goto LABEL_12;
}

uint64_t std::wstring::size[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    return *(void *)(a1 + 8);
  }
  else {
    return *(unsigned __int8 *)(a1 + 23);
  }
}

uint64_t std::operator+[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>@<X0>(__int32 *a1@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v6 = (unint64_t)a2[1];
  }
  size_t v7 = wcslen(a1);
  uint64_t result = std::wstring::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v9 = a2;
    }
    else {
      BOOL v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, 4 * v6);
  }
  if (v7) {
    uint64_t result = (uint64_t)memmove((char *)a3 + 4 * v6, a1, 4 * v7);
  }
  *((_DWORD *)a3 + v6 + v7) = 0;
  return result;
}

void *blahtex::ParseTree::MathList::MathList(void *this)
{
  *this = &unk_27045BCB0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *std::unique_ptr<blahtex::ParseTree::MathList>::unique_ptr[abi:ne180100]<true,void>(void *result)
{
  *uint64_t result = 0;
  return result;
}

BOOL std::wstring::empty[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  }
  return v1 == 0;
}

void *std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

uint64_t blahtex::ParseTree::MathCommand2Args::MathCommand2Args(uint64_t a1, const blahtex::Token *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  *(void *)a1 = &unk_27045B760;
  blahtex::Token::Token((blahtex::Token *)(a1 + 8), a2);
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(a1 + ++*(void *)(this + 40) = v9;
  uint64_t v10 = *a4;
  *a4 = 0;
  *(void *)(a1 + 4++*(void *)(this + 8) = v10;
  *(unsigned char *)(a1 + 56) = a5;
  return a1;
}

uint64_t std::vector<blahtex::ParseTree::MathNode *>::size[abi:ne180100](void *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 3;
}

void *std::vector<blahtex::ParseTree::MathNode *>::clear[abi:ne180100](void *result)
{
  result[1] = *result;
  return result;
}

void *blahtex::ParseTree::MathGroup::MathGroup(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_27045B850;
  result[1] = v2;
  return result;
}

std::wstring *std::wstring::substr[abi:ne180100]@<X0>(std::wstring *__str@<X0>, std::wstring::size_type __pos@<X1>, std::wstring::size_type __n@<X2>, std::wstring *a4@<X8>)
{
  return std::wstring::basic_string(a4, __str, __pos, __n, (std::allocator<wchar_t> *)&v5);
}

BOOL std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(const __int32 *a1, const __int32 *a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (!v3) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(const __int32 **)a2;
  }
  if (v2 < 0) {
    a1 = *(const __int32 **)a1;
  }
  return wmemcmp(a1, a2, v3) != 0;
}

BOOL std::operator!=[abi:ne180100]<blahtex::ParseTree::MathTableRow **>(void *a1, void *a2)
{
  return *a1 != *a2;
}

uint64_t std::vector<blahtex::ParseTree::MathTableRow *>::end[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t std::__wrap_iter<blahtex::ParseTree::MathTableRow **>::operator++[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 += 8;
  return v1;
}

uint64_t blahtex::ParseTree::MathEnvironment::MathEnvironment(uint64_t a1, const blahtex::Token *a2, uint64_t *a3, char a4)
{
  *(void *)a1 = &unk_27045B9E0;
  blahtex::Token::Token((blahtex::Token *)(a1 + 8), a2);
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + ++*(void *)(this + 40) = v7;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = a4;
  return a1;
}

void blahtex::Parser::ParseTextField(blahtex::MacroProcessor **this)
{
  blahtex::MacroProcessor::SkipWhitespace(*this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)v11);
  int TextTokenCode = blahtex::Parser::GetTextTokenCode(v3, v11);
  if (TextTokenCode != 4)
  {
    if (TextTokenCode == 26) {
      operator new();
    }
    if (!TextTokenCode)
    {
      exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v10, dword_2558C8C7C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v8, &dword_2558C8834);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v7, &dword_2558C8834);
      blahtex::Exception::Exception(exception, &v10, (uint64_t)__p, (uint64_t)v8, (uint64_t)v7);
    }
    unint64_t v6 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v10, dword_2558C8CD4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_2558C8834);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v8, &dword_2558C8834);
    blahtex::Exception::Exception(v6, &v10, (uint64_t)v11, (uint64_t)__p, (uint64_t)v8);
  }
  operator new();
}

void sub_2558A674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v35 & 1) == 0)
    {
LABEL_12:
      void *v32 = 0;
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      if (*(char *)(v36 - 57) < 0) {
        operator delete(*(void **)(v36 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v34);
  goto LABEL_12;
}

void *blahtex::ParseTree::EnterTextMode::EnterTextMode(void *a1, const blahtex::Token *a2, uint64_t *a3)
{
  *a1 = &unk_27045BA30;
  blahtex::Token::Token((blahtex::Token *)(a1 + 1), a2);
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[5] = v5;
  return a1;
}

void *blahtex::ParseTree::MathPhantom::MathPhantom(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_27045B8A0;
  result[1] = v2;
  return result;
}

void *blahtex::ParseTree::MathCancel::MathCancel(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_27045B8F0;
  result[1] = v2;
  return result;
}

BOOL std::unordered_map<std::wstring_view,std::wstring_view>::count[abi:ne180100](void *a1, uint64_t a2)
{
  return std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(a1, a2) != 0;
}

char *std::wstring::operator std::wstring_view[abi:ne180100](char *result)
{
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

blahtex::ParseTree::MathMiddle *blahtex::ParseTree::MathMiddle::MathMiddle(blahtex::ParseTree::MathMiddle *this, const blahtex::Token *a2)
{
  *(void *)this = &unk_27045B7B0;
  blahtex::Token::Token((blahtex::ParseTree::MathMiddle *)((char *)this + 8), a2);
  return this;
}

uint64_t *std::unique_ptr<blahtex::ParseTree::MathNode>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *blahtex::ParseTree::MathLimits::MathLimits(void *a1, const blahtex::Token *a2, uint64_t *a3)
{
  *a1 = &unk_27045B940;
  blahtex::Token::Token((blahtex::Token *)(a1 + 1), a2);
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[5] = v5;
  return a1;
}

blahtex::ParseTree::MathStateChange *blahtex::ParseTree::MathStateChange::MathStateChange(blahtex::ParseTree::MathStateChange *this, const blahtex::Token *a2)
{
  *(void *)this = &unk_27045BD90;
  blahtex::Token::Token((blahtex::ParseTree::MathStateChange *)((char *)this + 8), a2);
  return this;
}

void *blahtex::ParseTree::MathCommand1Arg::MathCommand1Arg(void *a1, const blahtex::Token *a2, uint64_t *a3)
{
  *a1 = &unk_27045B710;
  blahtex::Token::Token((blahtex::Token *)(a1 + 1), a2);
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[5] = v5;
  return a1;
}

void blahtex::Parser::ParseTextList(blahtex::Parser *this)
{
}

void sub_2558A77DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v41 - 97) < 0)
  {
    operator delete(*(void **)(v41 - 120));
    if ((v40 & 1) == 0)
    {
LABEL_12:
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v39);
  goto LABEL_12;
}

void *blahtex::ParseTree::MathDelimited::MathDelimited(void *a1, uint64_t *a2, blahtex::Token *a3, const blahtex::Token *a4)
{
  uint64_t v6 = *a2;
  *a2 = 0;
  *a1 = &unk_27045B990;
  a1[1] = v6;
  blahtex::Token::Token((blahtex::Token *)(a1 + 2), a3);
  blahtex::Token::Token((blahtex::Token *)(a1 + 6), a4);
  return a1;
}

void sub_2558A7C0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 8);
  *(void *)(v1 + ++*(void *)(this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

blahtex::ParseTree::MathBig *blahtex::ParseTree::MathBig::MathBig(blahtex::ParseTree::MathBig *this, const blahtex::Token *a2, const blahtex::Token *a3)
{
  *(void *)this = &unk_27045B800;
  uint64_t v5 = (blahtex::ParseTree::MathBig *)((char *)this + 40);
  blahtex::Token::Token((blahtex::ParseTree::MathBig *)((char *)this + 8), a2);
  blahtex::Token::Token(v5, a3);
  return this;
}

void sub_2558A7CC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

blahtex::ParseTree::MathColour *blahtex::ParseTree::MathColour::MathColour(blahtex::ParseTree::MathColour *this, const blahtex::Token *a2)
{
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v5, (__int32 *)"\\"");
  blahtex::Token::Token(__p, v5, 0);
  *(void *)this = &unk_27045BD90;
  blahtex::Token::Token((blahtex::ParseTree::MathColour *)((char *)this + 8), (const blahtex::Token *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  *(void *)this = &unk_27045BDE8;
  blahtex::Token::Token((blahtex::ParseTree::MathColour *)((char *)this + 40), a2);
  return this;
}

void sub_2558A7DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)uint64_t v21 = v23;
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(exception_object);
}

blahtex::ParseTree::TextColour *blahtex::ParseTree::TextColour::TextColour(blahtex::ParseTree::TextColour *this, const blahtex::Token *a2)
{
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v5, (__int32 *)"\\"");
  blahtex::Token::Token(__p, v5, 0);
  *(void *)this = &unk_27045BE40;
  blahtex::Token::Token((blahtex::ParseTree::TextColour *)((char *)this + 8), (const blahtex::Token *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  *(void *)this = &unk_27045BE98;
  blahtex::Token::Token((blahtex::ParseTree::TextColour *)((char *)this + 40), a2);
  return this;
}

void sub_2558A7ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)uint64_t v21 = v23;
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::wstring,blahtex::Parser::TokenCode>::unordered_map<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>((void *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558A7F80(_Unwind_Exception *a1)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__construct_node<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::wstringbuf::string_type __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_2558A7FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__construct_node<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + ++*(void *)(this + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  void *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2558A80A4(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void *std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(void *__dst, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = *(const void **)a2;
  if (v3 >= 5)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v3 | 1) != 5) {
      uint64_t v7 = v3 | 1;
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v7 + 1);
    __dst[1] = v3;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    uint64_t v6 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v6, v5, 4 * v3);
LABEL_9:
  *((_DWORD *)v6 + v3) = 0;
  *((_DWORD *)__dst + 6) = *(_DWORD *)(a2 + 16);
  return __dst;
}

uint64_t std::wstring::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 4)
  {
    unint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5) {
      unint64_t v4 = a2 | 1;
    }
    if (v4 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(4 * (v4 + 1));
    *(void *)(a1 + ++*(void *)(this + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + ++*(void *)(this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

blahtex::Token *blahtex::Token::Token(blahtex::Token *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  MEMORY[0x25A28FDC0]();
  *((void *)this + 3) = 0;
  return this;
}

void sub_2558A824C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::wstring *blahtex::Token::Token(std::wstring *a1, const std::wstring *a2, std::wstring::size_type a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::wstring::operator=(a1, a2);
  a1[1].__r_.__value_.__r.__words[0] = a3;
  return a1;
}

void sub_2558A82A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::wstring *blahtex::Token::Token(std::wstring *this, const std::wstring *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::wstring::operator=(this, a2);
  this[1].__r_.__value_.__r.__words[0] = a2[1].__r_.__value_.__r.__words[0];
  return this;
}

void sub_2558A8300(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::wstring *blahtex::Token::operator=(std::wstring *this, std::wstring *a2)
{
  if (this != a2)
  {
    std::wstring::operator=(this, a2);
    this[1].__r_.__value_.__r.__words[0] = a2[1].__r_.__value_.__r.__words[0];
  }
  return this;
}

uint64_t blahtex::Token::setSource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = (unint64_t)(a4 - a3) >= 0x800 || a4 == a3;
  unint64_t v5 = ((unint64_t)(a4 - a3) >> 2) | ((a3 - a2) << 7);
  if (v4) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 24) = v5;
  return result;
}

unint64_t blahtex::Token::append(std::wstring *this, std::wstring::size_type *a2)
{
  uint64_t v2 = (const blahtex::Token *)a2;
  std::wstring::size_type v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    std::wstring::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (std::wstring::size_type *)*a2;
    std::wstring::size_type v5 = v4;
  }
  std::wstring::append(this, (const std::wstring::value_type *)a2, v5);
  unint64_t result = blahtex::_combineTokenSource((blahtex *)this, v2, v6);
  if (result) {
    this[1].__r_.__value_.__r.__words[0] = result;
  }
  return result;
}

unint64_t blahtex::_combineTokenSource(blahtex *this, const blahtex::Token *a2, const blahtex::Token *a3)
{
  uint64_t v3 = *((void *)this + 3);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = *((void *)a2 + 3);
  if (!v4 || (*((void *)this + 3) & 0x1FFLL) + (*((void *)this + 3) >> 9) != v4 >> 9) {
    return 0;
  }
  unint64_t v5 = (*((void *)a2 + 3) & 0x1FFLL) + (*((void *)this + 3) & 0x1FFLL);
  unint64_t v6 = v5 | v3 & 0xFFFFFFFFFFFFFE00;
  if (v5 <= 0x1FE) {
    return v6;
  }
  else {
    return 0;
  }
}

unint64_t blahtex::Token::sourcePrefixedBy(blahtex::Token *this, const blahtex::Token *a2, const blahtex::Token *a3)
{
  unint64_t result = blahtex::_combineTokenSource(a2, this, a3);
  if (result) {
    *((void *)this + 3) = result;
  }
  return result;
}

std::wstring *blahtex::Token::operator=(std::wstring *a1, const std::wstring *a2)
{
  std::wstring::operator=(a1, a2);
  return a1;
}

BOOL blahtex::Token::operator==(const __int32 *a1, const __int32 *a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(const __int32 **)a2;
  }
  if (v2 < 0) {
    a1 = *(const __int32 **)a1;
  }
  return wmemcmp(a1, a2, v3) == 0;
}

void *blahtex::DelimiterTable(blahtex *this)
{
  {
    std::unordered_map<std::wstring_view,std::wstring_view>::unordered_map<std::pair<std::wstring_view,std::wstring_view> const*>((uint64_t)&blahtex::DelimiterTable(void)::gDelimiterTable, &blahtex::gDelimiterArray, &blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandArray);
  }
  return &blahtex::DelimiterTable(void)::gDelimiterTable;
}

void sub_2558A8560(_Unwind_Exception *a1)
{
}

void blahtex::ParseTree::MathList::BuildLayoutTree()
{
}

void sub_2558A89E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::list<blahtex::LayoutTree::Node *>::splice(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + ++*(void *)(this + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + ++*(void *)(this + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + ++*(void *)(this + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + ++*(void *)(this + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (const __int32 *)(a1 + 8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF71C);
  BOOL v7 = blahtex::Token::operator==(v6, (const __int32 *)&v33);
  BOOL v8 = v7;
  if (SHIBYTE(v34) < 0)
  {
    operator delete((void *)v33);
    if (v8) {
LABEL_3:
    }
      operator new();
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF734);
  BOOL v9 = blahtex::Token::operator==(v6, (const __int32 *)&v33);
  BOOL v10 = v9;
  if (SHIBYTE(v34) < 0)
  {
    operator delete((void *)v33);
    if (v10) {
LABEL_7:
    }
      operator new();
  }
  else if (v9)
  {
    goto LABEL_7;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF758);
  BOOL v11 = blahtex::Token::operator==(v6, (const __int32 *)&v33);
  BOOL v12 = v11;
  if (SHIBYTE(v34) < 0)
  {
    operator delete((void *)v33);
    if (v12) {
LABEL_11:
    }
      operator new();
  }
  else if (v11)
  {
    goto LABEL_11;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF778);
  if (blahtex::Token::operator==(v6, (const __int32 *)&v33))
  {
    BOOL v13 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v35, dword_2558CF7A8);
    BOOL v13 = blahtex::Token::operator==(v6, (const __int32 *)&v35);
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v13)
  {
    long long v35 = *a2;
    uint64_t v36 = *((void *)a2 + 2);
    uint64_t v14 = *((int *)a2 + 4);
    if (v14 < 4) {
      LODWORD(v36) = dword_2558D11B0[v14];
    }
    operator new();
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF7EC);
  if (blahtex::Token::operator==(v6, (const __int32 *)&v33))
  {
    BOOL v15 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v35, dword_2558CF818);
    BOOL v15 = blahtex::Token::operator==(v6, (const __int32 *)&v35);
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v15) {
    operator new();
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF858);
  BOOL v16 = blahtex::Token::operator==(v6, (const __int32 *)&v33);
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v16) {
    operator new();
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CF890);
  if (blahtex::Token::operator==(v6, (const __int32 *)&v33))
  {
    BOOL v17 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v35, dword_2558CF8C8);
    BOOL v17 = blahtex::Token::operator==(v6, (const __int32 *)&v35);
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v17)
  {
    long long v33 = *a2;
    uint64_t v34 = *((void *)a2 + 2);
    LODWORD(v33) = 1;
    (*(void (**)(void, long long *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v33);
    *(_DWORD *)(*a3 + 12) = 1;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v35, dword_2558CF890);
    if (blahtex::Token::operator==(v6, (const __int32 *)&v35)) {
      int v18 = 2;
    }
    else {
      int v18 = 0;
    }
    *(_DWORD *)(*a3 + 16) = v18;
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
  }
  else
  {
    {
      std::unordered_map<std::wstring_view,blahtex::LayoutTree::Node::Flavour>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const*>((uint64_t)blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandTable, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandArray, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandArray);
    }
    if (*(char *)(a1 + 31) < 0)
    {
      uint64_t v20 = *(const __int32 **)(a1 + 8);
      uint64_t v19 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 31);
      uint64_t v20 = v6;
    }
    *(void *)&long long v33 = v20;
    *((void *)&v33 + 1) = v19;
    uint64_t v21 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandTable, (uint64_t)&v33);
    if (v21)
    {
      char v22 = v21;
      (*(void (**)(void, long long *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), a2);
      int v23 = *((_DWORD *)v22 + 8);
      uint64_t v24 = *a3;
      *(_DWORD *)(*a3 + 12) = v23;
      if (v23 == 1) {
        *(_DWORD *)(v24 + 16) = 0;
      }
    }
    else
    {
      {
        std::unordered_map<std::wstring_view,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>((uint64_t)blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandTable, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandArray, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandArray);
      }
      if (*(char *)(a1 + 31) < 0)
      {
        int v26 = *(const __int32 **)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v25 = *(unsigned __int8 *)(a1 + 31);
        int v26 = v6;
      }
      *(void *)&long long v33 = v26;
      *((void *)&v33 + 1) = v25;
      char v27 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandTable, (uint64_t)&v33);
      if (v27)
      {
        long long v33 = *a2;
        uint64_t v34 = *((void *)a2 + 2);
        LODWORD(v33) = *((_DWORD *)v27 + 8);
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, dword_2558CFB6C);
        BOOL v28 = blahtex::Token::operator==(v6, (const __int32 *)&v33);
        if (SHIBYTE(v34) < 0) {
          operator delete((void *)v33);
        }
        if (!v28)
        {
          {
            std::unordered_map<std::wstring_view,blahtex::ParseTree::AccentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const*>((uint64_t)blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandTable, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandArray, (uint64_t)&blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandArray);
          }
          if (*(char *)(a1 + 31) < 0)
          {
            uint64_t v30 = *(const __int32 **)(a1 + 8);
            uint64_t v29 = *(void *)(a1 + 16);
          }
          else
          {
            uint64_t v29 = *(unsigned __int8 *)(a1 + 31);
            uint64_t v30 = v6;
          }
          *(void *)&long long v33 = v30;
          *((void *)&v33 + 1) = v29;
          if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandTable, (uint64_t)&v33))
          {
            (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v32);
            operator new();
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Unexpected command in MathCommand1Arg::BuildLayoutTree");
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        long long v33 = *a2;
        uint64_t v34 = *((void *)a2 + 2);
        BYTE4(v33) = 1;
        LODWORD(v33) = 0;
      }
      (*(void (**)(void, long long *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v33);
    }
  }
}

void sub_2558A9AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
}

void *std::wstring::basic_string<std::wstring_view,0>(void *__dst, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = *(const void **)a2;
  if (v3 >= 5)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v3 | 1) != 5) {
      uint64_t v6 = v3 | 1;
    }
    uint64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *std::string __dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, 4 * v3);
LABEL_9:
  *((_DWORD *)v5 + v3) = 0;
  return __dst;
}

void blahtex::ParseTree::MathStateChange::BuildLayoutTree()
{
}

void blahtex::ParseTree::MathColour::BuildLayoutTree()
{
}

void blahtex::ParseTree::TextStateChange::BuildLayoutTree()
{
}

void blahtex::ParseTree::TextColour::BuildLayoutTree()
{
}

void blahtex::ParseTree::MathCommand2Args::BuildLayoutTree(uint64_t a1, long long *a2)
{
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v27, &dword_2558CF518);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v26, &dword_2558CF518);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558CFFD4);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22))
  {
    BOOL v4 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558CFFEC);
    BOOL v4 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (v4) {
      goto LABEL_30;
    }
  }
  else if (v4)
  {
    goto LABEL_30;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D0004);
  BOOL v5 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22);
  BOOL v6 = v5;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (v6)
    {
LABEL_30:
      long long v24 = *a2;
      uint64_t v25 = *((void *)a2 + 2);
      unsigned int v12 = *((_DWORD *)a2 + 4);
      if (v12 <= 2) {
        LODWORD(v25) = v12 + 1;
      }
      operator new();
    }
  }
  else if (v5)
  {
    goto LABEL_30;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D001C);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22))
  {
    BOOL v7 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0038);
    BOOL v7 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (v7) {
      goto LABEL_19;
    }
  }
  else if (v7)
  {
LABEL_19:
    MEMORY[0x25A28FDC0](&v27, &unk_2558CF870);
    BOOL v8 = &unk_2558CF888;
LABEL_29:
    MEMORY[0x25A28FDC0](&v26, v8);
    goto LABEL_30;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D0058);
  BOOL v9 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22);
  BOOL v10 = v9;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (v10) {
      goto LABEL_23;
    }
  }
  else if (v9)
  {
LABEL_23:
    MEMORY[0x25A28FDC0](&v27, &unk_2558D0074);
    BOOL v8 = &unk_2558D007C;
    goto LABEL_29;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D0084);
  BOOL v11 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22);
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  if (!v11)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D00B0);
    BOOL v13 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    if (v13)
    {
      uint64_t v23 = *((void *)a2 + 2);
      *(_OWORD *)char v22 = *a2;
      LODWORD(v23) = 3;
      operator new();
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D00E8);
    BOOL v14 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    if (v14)
    {
      uint64_t v23 = *((void *)a2 + 2);
      *(_OWORD *)char v22 = *a2;
      LODWORD(v23) = 1;
      operator new();
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D0104);
    if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22))
    {
      BOOL v15 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0154);
      BOOL v15 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    if (v15)
    {
      *(_OWORD *)std::wstringbuf::string_type __p = *a2;
      uint64_t v21 = *((void *)a2 + 2);
      uint64_t v16 = *((int *)a2 + 4);
      if (v16 < 4) {
        LODWORD(v21) = dword_2558D11B0[v16];
      }
      operator new();
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, dword_2558D01A8);
    if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v22))
    {
      BOOL v17 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D01CC);
      BOOL v17 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    if (v17)
    {
      *(_OWORD *)char v22 = *a2;
      uint64_t v23 = *((void *)a2 + 2);
      uint64_t v18 = *((int *)a2 + 4);
      if (v18 < 4) {
        LODWORD(v23) = dword_2558D11B0[v18];
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D01A8);
      blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 16))(__p);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 48) + 16))(__p);
      operator new();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected command in MathCommand2Args::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  MEMORY[0x25A28FDC0](&v27, &unk_2558D00A0);
  BOOL v8 = &unk_2558D00A8;
  goto LABEL_29;
}

void sub_2558AAD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (*(char *)(v59 - 81) < 0) {
    operator delete(*(void **)(v59 - 104));
  }
  _Unwind_Resume(exception_object);
}

void sub_2558AB150()
{
}

void blahtex::ParseTree::MathScripts::BuildLayoutTree(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 16))(&v9);
  }
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v5 = *((int *)a2 + 4);
  if (v5 <= 3) {
    LODWORD(v1std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = dword_2558D11B0[v5];
  }
  uint64_t v6 = a1[2];
  if (v6) {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 16))(&v8);
  }
  uint64_t v7 = a1[3];
  if (v7) {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 16))(&v8);
  }
  operator new();
}

void sub_2558AB318(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void blahtex::ParseTree::MathLimits::BuildLayoutTree(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40));
  if (*(_DWORD *)(*(void *)a2 + 12) != 1)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D01F4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v14, &dword_2558CF518);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_2558CF518);
    blahtex::Exception::Exception(exception, (long long *)__p, a1 + 8, (uint64_t)v14, (uint64_t)v13);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0234);
  uint64_t v4 = (const __int32 *)(a1 + 8);
  BOOL v5 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
  BOOL v6 = v5;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v5)
  {
LABEL_4:
    int v7 = 1;
    goto LABEL_14;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0254);
  BOOL v8 = blahtex::Token::operator==(v4, (const __int32 *)__p);
  BOOL v9 = v8;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_8;
    }
  }
  else if (v8)
  {
LABEL_8:
    int v7 = 2;
    goto LABEL_14;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D027C);
  BOOL v10 = blahtex::Token::operator==(v4, (const __int32 *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (!v10)
  {
    unsigned int v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Unexpected command in MathLimits::BuildLayoutTree.");
    __cxa_throw(v12, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  int v7 = 0;
LABEL_14:
  *(_DWORD *)(*(void *)a2 + 16) = v7;
}

void sub_2558AB588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v29 = *v27;
  *long long v27 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::ParseTree::MathGroup::BuildLayoutTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  *(_DWORD *)(*(void *)a2 + 12) = 0;
  return result;
}

uint64_t blahtex::ParseTree::MathPhantom::BuildLayoutTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  *(_DWORD *)(*(void *)a2 + 12) = 0;
  return result;
}

uint64_t blahtex::ParseTree::MathCancel::BuildLayoutTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  *(_DWORD *)(*(void *)a2 + 12) = 0;
  return result;
}

void blahtex::ParseTree::MathDelimited::BuildLayoutTree(blahtex *a1)
{
}

void sub_2558ABA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a9) {
    blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree();
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  MEMORY[0x25A290040](v38, 0x10B3C4046C60783);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathMiddle::BuildLayoutTree(blahtex *a1)
{
}

void sub_2558ABC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  MEMORY[0x25A290040](v23, 0x1093C40C1F8B455);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathBig::BuildLayoutTree(uint64_t a1)
{
  {
    std::unordered_map<std::wstring_view,blahtex::ParseTree::BigInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const*>((uint64_t)blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandTable, (uint64_t)&blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandArray, (uint64_t)&blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    unint64_t v3 = *(void **)(a1 + 16);
  }
  else
  {
    uint64_t v2 = (void *)(a1 + 8);
    unint64_t v3 = (void *)*(unsigned __int8 *)(a1 + 31);
  }
  __p[0] = v2;
  __p[1] = v3;
  if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandTable, (uint64_t)__p))
  {
    operator new();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Unknown command in MathBig::BuildLayoutTree");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2558ABEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void blahtex::ParseTree::MathTableRow::BuildLayoutTree()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Arrived unexpectedly in MathTableRow::BuildLayoutTree");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2558ABFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTable::BuildLayoutTree()
{
}

void sub_2558AC228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

uint64_t std::vector<std::vector<blahtex::LayoutTree::Node *>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<blahtex::LayoutTree::Node *>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2558AC354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<blahtex::LayoutTree::Node *>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    BOOL v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)BOOL v14 = 0;
    *(_OWORD *)BOOL v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + ++*(void *)(this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<blahtex::LayoutTree::Node *>>::__swap_out_circular_buffer(a1, v16);
    BOOL v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)int v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + ++*(void *)(this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    BOOL v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2558AC494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathEnvironment::BuildLayoutTree(uint64_t a1@<X0>, long long *a2@<X1>, void **a3@<X8>)
{
  {
    std::unordered_map<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const*>((uint64_t)blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentTable, &blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentArray, &blahtex::ParseTree::EnterTextMode::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandArray);
  }
  unint64_t v6 = (const __int32 *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    BOOL v8 = *(void **)(a1 + 8);
    int v7 = *(void **)(a1 + 16);
  }
  else
  {
    int v7 = (void *)*(unsigned __int8 *)(a1 + 31);
    BOOL v8 = (void *)(a1 + 8);
  }
  v25[0] = v8;
  v25[1] = v7;
  unint64_t v9 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentTable, (uint64_t)v25);
  if (!v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected environment name in MathEnvironment::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  unint64_t v10 = v9;
  long long v37 = *a2;
  uint64_t v38 = *((void *)a2 + 2);
  LODWORD(v37) = 0;
  BYTE4(v37) = *((unsigned char *)a2 + 4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558D0564);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v25))
  {
    BOOL v11 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0594);
    BOOL v11 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v26 < 0)
  {
    operator delete(v25[0]);
    if (v11) {
      goto LABEL_12;
    }
LABEL_14:
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558D051C);
    if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v25))
    {
      BOOL v12 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D05B8);
      if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p))
      {
        BOOL v12 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D05D0);
        if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v35))
        {
          BOOL v12 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v33, dword_2558D05EC);
          if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v33))
          {
            BOOL v12 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)lpsrc, dword_2558D0604);
            if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)lpsrc))
            {
              BOOL v12 = 1;
            }
            else
            {
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v29, dword_2558D0624);
              if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v29))
              {
                BOOL v12 = 1;
              }
              else
              {
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v27, dword_2558D053C);
                BOOL v12 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v27);
                if (v28 < 0) {
                  operator delete(v27[0]);
                }
              }
              if (v30 < 0) {
                operator delete(v29[0]);
              }
            }
            if (v32 < 0) {
              operator delete(lpsrc[0]);
            }
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
      }
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v26 < 0)
    {
      operator delete(v25[0]);
      if (v12) {
        goto LABEL_40;
      }
    }
    else if (v12)
    {
LABEL_40:
      LODWORD(v3++*(void *)(this + 8) = 0;
      goto LABEL_43;
    }
    LODWORD(v3++*(void *)(this + 8) = 1;
    goto LABEL_43;
  }
  if (!v11) {
    goto LABEL_14;
  }
LABEL_12:
  LODWORD(v3++*(void *)(this + 8) = 2;
LABEL_43:
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 16))(lpsrc);
  if (!lpsrc[0]
  {
    uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Unexpected node type in MathEnvironment::BuildLayoutTree");
    __cxa_throw(v21, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  BOOL v14 = v13;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558D0594);
  BOOL v15 = blahtex::Token::operator==(v6, (const __int32 *)v25);
  BOOL v16 = v15;
  if ((v26 & 0x80000000) == 0)
  {
    if (!v15) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  operator delete(v25[0]);
  if (v16) {
LABEL_47:
  }
    v14[13] = 1;
LABEL_48:
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558D051C);
  if (blahtex::Token::operator==(v6, (const __int32 *)v25))
  {
    BOOL v17 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D05B8);
    if (blahtex::Token::operator==(v6, (const __int32 *)__p))
    {
      BOOL v17 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D05D0);
      if (blahtex::Token::operator==(v6, (const __int32 *)v35))
      {
        BOOL v17 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v33, dword_2558D05EC);
        BOOL v17 = blahtex::Token::operator==(v6, (const __int32 *)v33);
        if (v34 < 0) {
          operator delete(v33[0]);
        }
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v26 < 0)
  {
    operator delete(v25[0]);
    if (v17) {
      goto LABEL_64;
    }
  }
  else if (v17)
  {
LABEL_64:
    int v18 = 2;
LABEL_82:
    v14[12] = v18;
    goto LABEL_83;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558D0604);
  if (blahtex::Token::operator==(v6, (const __int32 *)v25))
  {
    BOOL v19 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0624);
    if (blahtex::Token::operator==(v6, (const __int32 *)__p))
    {
      BOOL v19 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D053C);
      BOOL v19 = blahtex::Token::operator==(v6, (const __int32 *)v35);
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v26 < 0)
  {
    operator delete(v25[0]);
    if (v19) {
      goto LABEL_76;
    }
  }
  else if (v19)
  {
LABEL_76:
    int v18 = 3;
    goto LABEL_82;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558D0504);
  BOOL v20 = blahtex::Token::operator==(v6, (const __int32 *)v25);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v20)
  {
    int v18 = 0;
    goto LABEL_82;
  }
LABEL_83:
  if (v10[5] || v10[7]) {
    operator new();
  }
  *a3 = lpsrc[0];
}

void sub_2558ACCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
}

uint64_t blahtex::ParseTree::EnterTextMode::BuildLayoutTree(uint64_t a1, long long *a2)
{
  {
    std::unordered_map<std::wstring_view,blahtex::TexTextFont>::unordered_map<std::pair<std::wstring_view,blahtex::TexTextFont> const*>((uint64_t)blahtex::ParseTree::EnterTextMode::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandTable, (uint64_t)&blahtex::ParseTree::EnterTextMode::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandArray, (uint64_t)&blahtex::ParseTree::TextSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
    uint64_t v5 = a1 + 8;
  }
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v4;
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(blahtex::ParseTree::EnterTextMode::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandTable, (uint64_t)&v14);
  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected command in EnterTextMode::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  DWORD2(v14) = *((_DWORD *)v6 + 8);
  WORD6(v14) = *((_WORD *)v6 + 18);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v12, dword_2558D0660);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v12))
  {
    BOOL v7 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D0648);
    BOOL v7 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if (!v7) {
      return (*(uint64_t (**)(void, long long *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v14);
    }
    goto LABEL_12;
  }
  if (v7) {
LABEL_12:
  }
    LODWORD(v15) = 1;
  return (*(uint64_t (**)(void, long long *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v14);
}

void sub_2558AD094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void blahtex::ParseTree::TextList::BuildLayoutTree()
{
}

void sub_2558AD30C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextSymbol::BuildLayoutTree(uint64_t a1)
{
  {
    std::unordered_map<std::wstring_view,std::wstring_view>::unordered_map<std::pair<std::wstring_view,std::wstring_view> const*>((uint64_t)blahtex::ParseTree::TextSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandTable, &blahtex::ParseTree::TextSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandArray, &blahtex::operatorArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    unint64_t v3 = *(void **)(a1 + 8);
    uint64_t v2 = *(void **)(a1 + 16);
  }
  else
  {
    uint64_t v2 = (void *)*(unsigned __int8 *)(a1 + 31);
    unint64_t v3 = (void *)(a1 + 8);
  }
  __p[0] = v3;
  __p[1] = v2;
  if (std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(blahtex::ParseTree::TextSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandTable, (uint64_t)__p))
  {
    operator new();
  }
  operator new();
}

void sub_2558AD5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t blahtex::ParseTree::TextGroup::BuildLayoutTree(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t blahtex::ParseTree::TextPhantom::BuildLayoutTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  *(_DWORD *)(*(void *)a2 + 12) = 0;
  return result;
}

uint64_t blahtex::ParseTree::TextCancel::BuildLayoutTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  *(_DWORD *)(*(void *)a2 + 12) = 0;
  return result;
}

uint64_t blahtex::ParseTree::TextCommand1Arg::BuildLayoutTree(uint64_t a1, long long *a2)
{
  long long v37 = *a2;
  uint64_t v38 = *((void *)a2 + 2);
  unint64_t v3 = (const __int32 *)(a1 + 8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D0690);
  BOOL v4 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  BOOL v5 = v4;
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (v4)
  {
LABEL_3:
    DWORD2(v37) = 0;
    goto LABEL_13;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D0728);
  BOOL v6 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  BOOL v7 = v6;
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if (v7) {
      goto LABEL_7;
    }
  }
  else if (v6)
  {
LABEL_7:
    int v8 = 2;
LABEL_12:
    DWORD2(v37) = v8;
    goto LABEL_13;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D0708);
  BOOL v9 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  BOOL v10 = v9;
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if (v10) {
      goto LABEL_11;
    }
  }
  else if (v9)
  {
LABEL_11:
    int v8 = 1;
    goto LABEL_12;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D06E8);
  BOOL v16 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  BOOL v17 = v16;
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if (v17) {
      goto LABEL_25;
    }
  }
  else if (v16)
  {
LABEL_25:
    char v18 = 1;
LABEL_31:
    BYTE13(v37) = v18;
    goto LABEL_13;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D06D0);
  BOOL v19 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v19)
  {
    char v18 = BYTE13(v37) ^ 1;
    goto LABEL_31;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D06B0);
  BOOL v20 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v20)
  {
    BYTE12(v37) = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558D0678);
    if (blahtex::Token::operator==(v3, (const __int32 *)v35))
    {
      BOOL v21 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v33, dword_2558D0660);
      if (blahtex::Token::operator==(v3, (const __int32 *)v33))
      {
        BOOL v21 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v31, dword_2558D0648);
        if (blahtex::Token::operator==(v3, (const __int32 *)v31))
        {
          BOOL v21 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v29, dword_2558D0748);
          if (blahtex::Token::operator==(v3, (const __int32 *)v29))
          {
            BOOL v21 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v27, dword_2558D075C);
            if (blahtex::Token::operator==(v3, (const __int32 *)v27))
            {
              BOOL v21 = 1;
            }
            else
            {
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_2558CF734);
              if (blahtex::Token::operator==(v3, (const __int32 *)v25))
              {
                BOOL v21 = 1;
              }
              else
              {
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558CF758);
                BOOL v21 = blahtex::Token::operator==(v3, (const __int32 *)__p);
                if (v24 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (v26 < 0) {
                operator delete(v25[0]);
              }
            }
            if (v28 < 0) {
              operator delete(v27[0]);
            }
          }
          if (v30 < 0) {
            operator delete(v29[0]);
          }
        }
        if (v32 < 0) {
          operator delete(v31[0]);
        }
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (!v21)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected command in TextCommand1Arg::BuildLayoutTree");
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
  }
LABEL_13:
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558CF734);
  BOOL v11 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  BOOL v12 = v11;
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if (v12) {
LABEL_15:
    }
      operator new();
  }
  else if (v11)
  {
    goto LABEL_15;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, dword_2558CF758);
  BOOL v13 = blahtex::Token::operator==(v3, (const __int32 *)v35);
  BOOL v14 = v13;
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if (v14) {
LABEL_19:
    }
      operator new();
  }
  else if (v13)
  {
    goto LABEL_19;
  }
  return (*(uint64_t (**)(void, long long *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v37);
}

void sub_2558ADC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v38 - 105) < 0) {
    operator delete(*(void **)(v38 - 128));
  }
  if (*(char *)(v38 - 81) < 0) {
    operator delete(*(void **)(v38 - 104));
  }
  _Unwind_Resume(exception_object);
}

void blahtex::ParseTree::MathCommand1Arg::~MathCommand1Arg(blahtex::ParseTree::MathCommand1Arg *this)
{
  *(void *)this = &unk_27045B710;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B710;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathCommand2Args::~MathCommand2Args(blahtex::ParseTree::MathCommand2Args *this)
{
  *(void *)this = &unk_27045B760;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_27045B760;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathMiddle::~MathMiddle(void **this)
{
  *this = &unk_27045B7B0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B7B0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathBig::~MathBig(void **this)
{
  *this = &unk_27045B800;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045B800;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathGroup::~MathGroup(blahtex::ParseTree::MathGroup *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045B850;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045B850;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathPhantom::~MathPhantom(blahtex::ParseTree::MathPhantom *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045B8A0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045B8A0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathCancel::~MathCancel(blahtex::ParseTree::MathCancel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045B8F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045B8F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathLimits::~MathLimits(blahtex::ParseTree::MathLimits *this)
{
  *(void *)this = &unk_27045B940;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B940;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathDelimited::~MathDelimited(void **this)
{
  *this = &unk_27045B990;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  uint64_t v2 = this[1];
  this[1] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_27045B990;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  uint64_t v2 = this[1];
  this[1] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathEnvironment::~MathEnvironment(blahtex::ParseTree::MathEnvironment *this)
{
  *(void *)this = &unk_27045B9E0;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045B9E0;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::EnterTextMode::~EnterTextMode(blahtex::ParseTree::EnterTextMode *this)
{
  *(void *)this = &unk_27045BA30;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045BA30;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextGroup::~TextGroup(blahtex::ParseTree::TextGroup *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045BA80;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045BA80;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextPhantom::~TextPhantom(blahtex::ParseTree::TextPhantom *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045BAD0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045BAD0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextCancel::~TextCancel(blahtex::ParseTree::TextCancel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045BB20;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27045BB20;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextSymbol::~TextSymbol(void **this)
{
  *this = &unk_27045BB70;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045BB70;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextCommand1Arg::~TextCommand1Arg(blahtex::ParseTree::TextCommand1Arg *this)
{
  *(void *)this = &unk_27045BBC0;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_27045BBC0;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathScripts::~MathScripts(blahtex::ParseTree::MathScripts *this)
{
  *(void *)this = &unk_27045BC10;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_27045BC10;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x25A290040);
}

uint64_t blahtex::LayoutTree::SymbolOperator::SymbolOperator(uint64_t a1, char a2, uint64_t a3, char a4, const std::wstring *a5, int a6, int a7, int a8, int a9, int a10)
{
  *(_DWORD *)(a1 + ++*(void *)(this + 8) = a7;
  *(_DWORD *)(a1 + 12) = a8;
  *(_DWORD *)(a1 + 16) = a9;
  *(_DWORD *)(a1 + 2std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = a10;
  *(void *)a1 = &unk_27045B678;
  blahtex::Token::Token((std::wstring *)(a1 + 24), a5);
  *(_DWORD *)(a1 + 56) = a6;
  *(void *)a1 = &unk_27045B388;
  *(unsigned char *)(a1 + 6std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = a2;
  uint64_t v15 = (void *)(a1 + 64);
  unint64_t v16 = *(void *)(a3 + 8);
  if (v16 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v17 = *(const void **)a3;
  if (v16 >= 5)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v16 | 1) != 5) {
      uint64_t v18 = v16 | 1;
    }
    uint64_t v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a1 + 64, v18 + 1);
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 8std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = v19 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(this + 64) = v15;
  }
  else
  {
    *(unsigned char *)(a1 + 87) = v16;
    if (!v16) {
      goto LABEL_9;
    }
  }
  memmove(v15, v17, 4 * v16);
LABEL_9:
  *((_DWORD *)v15 + v16) = 0;
  *(unsigned char *)(a1 + 8++*(void *)(this + 8) = a4;
  return a1;
}

void sub_2558AF0C4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Fenced::Fenced(uint64_t a1, int a2, int a3, const std::wstring *a4, const std::wstring *a5, uint64_t *a6)
{
  *(_DWORD *)(a1 + ++*(void *)(this + 8) = a2;
  *(void *)(a1 + 12) = 7;
  *(_DWORD *)(a1 + 2std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = a3;
  *(void *)a1 = &unk_27045B480;
  blahtex::Token::Token((std::wstring *)(a1 + 24), a4);
  blahtex::Token::Token((std::wstring *)(a1 + 56), a5);
  uint64_t v9 = *a6;
  *a6 = 0;
  *(void *)(a1 + 8++*(void *)(this + 8) = v9;
  return a1;
}

void sub_2558AF170(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::LayoutTree::Node::Flavour>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558AF1F4(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  BOOL v14 = operator new(0x28uLL);
  *BOOL v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + ++*(void *)(this + 8) = *(_DWORD *)(a3 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *BOOL v14 = *v23;
LABEL_38:
    *uint64_t v23 = v14;
    goto LABEL_39;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558AF45C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558AF4D8(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  BOOL v14 = operator new(0x28uLL);
  *BOOL v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + ++*(void *)(this + 8) = *(_DWORD *)(a3 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *BOOL v14 = *v23;
LABEL_38:
    *uint64_t v23 = v14;
    goto LABEL_39;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558AF740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::ParseTree::AccentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558AF7BC(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  BOOL v14 = operator new(0x38uLL);
  *BOOL v14 = 0;
  v14[1] = v9;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v16;
  v14[6] = *(void *)(a3 + 32);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *BOOL v14 = *v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558AFA24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::piecewise_construct_t const&,std::tuple<std::wstring_view&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v15 = operator new(0x30uLL);
  *unint64_t v15 = 0;
  v15[1] = v10;
  *((_OWORD *)v15 + 1) = **a4;
  void v15[4] = 0;
  v15[5] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *unint64_t v15 = *v24;
LABEL_38:
    *unint64_t v24 = v15;
    goto LABEL_39;
  }
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return v15;
}

void sub_2558AFC8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::ParseTree::BigInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558AFD08(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  BOOL v14 = operator new(0x38uLL);
  *BOOL v14 = 0;
  v14[1] = v9;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v16;
  v14[6] = *(void *)(a3 + 32);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *BOOL v14 = *v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558AFF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<blahtex::LayoutTree::Node *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++*(void *)(this + 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - ++*(void *)(this + 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + ++*(void *)(this + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::unordered_map<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const&>(a1, (uint64_t)v5, v5);
      v5 += 3;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B021C(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x40uLL);
  *long long v14 = 0;
  v14[1] = v9;
  long long v16 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = a3[2];
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *long long v14 = *v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558B0484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::TexTextFont>::unordered_map<std::pair<std::wstring_view,blahtex::TexTextFont> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexTextFont> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B0500(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexTextFont> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x28uLL);
  *long long v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  void v14[4] = *(void *)(a3 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *long long v14 = *v23;
LABEL_38:
    *uint64_t v23 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558B0768(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree()
{
  OUTLINED_FUNCTION_0_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void blahtex::ParseTree::MathSymbol::BuildLayoutTree(uint64_t a1, void **a2)
{
  unint64_t v4 = (const __int32 *)(a1 + 8);
  int v5 = *(char *)(a1 + 31);
  if (v5 < 0)
  {
    if (*(void *)(a1 + 16) != 1) {
      goto LABEL_34;
    }
    unint64_t v6 = *a2;
    v39[0] = *a2;
    int v8 = **(_DWORD **)v4;
    if (v8 >= 65 && (v8 < 0x5B || (v8 - 97) < 0x1A)) {
      goto LABEL_14;
    }
    uint8x8_t v7 = *(int **)v4;
    int v15 = **(_DWORD **)v4;
    if (v15 <= 47)
    {
LABEL_31:
      if (v5 < 0) {
        LODWORD(v7) = **(_DWORD **)v4;
      }
LABEL_33:
      if ((int)v7 >= 128)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unexpected non-ASCII character in MathSymbol::BuildLayoutTree");
        goto LABEL_110;
      }
LABEL_34:
      {
        std::unordered_map<std::wstring_view,wchar_t>::unordered_map<std::pair<std::wstring_view,wchar_t> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::lowercaseGreekTable, (uint64_t)&blahtex::lowercaseGreekArray, (uint64_t)&blahtex::uppercaseGreekArray);
      }
      if (*(char *)(a1 + 31) < 0)
      {
        float v17 = *(const __int32 **)(a1 + 8);
        uint64_t v16 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v16 = *(unsigned __int8 *)(a1 + 31);
        float v17 = v4;
      }
      *(void *)&long long v41 = v17;
      *((void *)&v41 + 1) = v16;
      if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::lowercaseGreekTable, (uint64_t)&v41))
      {
        operator new();
      }
      {
        std::unordered_map<std::wstring_view,wchar_t>::unordered_map<std::pair<std::wstring_view,wchar_t> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::uppercaseGreekTable, (uint64_t)&blahtex::uppercaseGreekArray, (uint64_t)&blahtex::spaceArray);
      }
      if (*(char *)(a1 + 31) < 0)
      {
        unint64_t v19 = *(const __int32 **)(a1 + 8);
        uint64_t v18 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(a1 + 31);
        unint64_t v19 = v4;
      }
      *(void *)&long long v41 = v19;
      *((void *)&v41 + 1) = v18;
      if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::uppercaseGreekTable, (uint64_t)&v41))
      {
        switch(*a2)
        {
          case 0u:
            LODWORD(v39[0]) = 1;
            break;
          case 6u:
            uint64_t v38 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D11D0);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v45, dword_2558D1268);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, &dword_2558D1264);
            blahtex::Exception::Exception(v38, &v41, (uint64_t)v4, (uint64_t)&v45, (uint64_t)v43);
          case 7u:
            long long v37 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D11D0);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v45, dword_2558D1254);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, &dword_2558D1264);
            blahtex::Exception::Exception(v37, &v41, (uint64_t)v4, (uint64_t)&v45, (uint64_t)v43);
          case 8u:
            char v36 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D11D0);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v45, dword_2558D1274);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, &dword_2558D1264);
            blahtex::Exception::Exception(v36, &v41, (uint64_t)v4, (uint64_t)&v45, (uint64_t)v43);
          default:
            break;
        }
        operator new();
      }
      {
        std::unordered_map<std::wstring_view,int>::unordered_map<std::pair<std::wstring_view,int> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::spaceTable, (uint64_t)&blahtex::spaceArray, (uint64_t)&blahtex::identifierArray);
      }
      if (*(char *)(a1 + 31) < 0)
      {
        size_t v21 = *(const __int32 **)(a1 + 8);
        uint64_t v20 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v20 = *(unsigned __int8 *)(a1 + 31);
        size_t v21 = v4;
      }
      *(void *)&long long v41 = v21;
      *((void *)&v41 + 1) = v20;
      if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::spaceTable, (uint64_t)&v41))
      {
        operator new();
      }
      {
        std::unordered_map<std::wstring_view,blahtex::OperatorInfo>::unordered_map<std::pair<std::wstring_view,blahtex::OperatorInfo> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::operatorTable, (uint64_t)&blahtex::operatorArray, (uint64_t)(&blahtex::operatorArray + 2210));
      }
      if (*(char *)(a1 + 31) < 0)
      {
        uint64_t v23 = *(const __int32 **)(a1 + 8);
        uint64_t v22 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v22 = *(unsigned __int8 *)(a1 + 31);
        uint64_t v23 = v4;
      }
      *(void *)&long long v41 = v23;
      *((void *)&v41 + 1) = v22;
      if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::operatorTable, (uint64_t)&v41))
      {
        operator new();
      }
      {
        std::unordered_map<std::wstring_view,blahtex::IdentifierInfo>::unordered_map<std::pair<std::wstring_view,blahtex::IdentifierInfo> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::identifierTable, &blahtex::identifierArray, &blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandArray);
      }
      if (*(char *)(a1 + 31) < 0)
      {
        unint64_t v25 = *(const __int32 **)(a1 + 8);
        uint64_t v24 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v24 = *(unsigned __int8 *)(a1 + 31);
        unint64_t v25 = v4;
      }
      *(void *)&long long v41 = v25;
      *((void *)&v41 + 1) = v24;
      char v26 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::identifierTable, (uint64_t)&v41);
      if (v26)
      {
        BOOL v45 = *a2;
        if (*((unsigned char *)v26 + 32)) {
          int v27 = 3;
        }
        else {
          int v27 = 1;
        }
        LODWORD(v45) = v27;
        operator new();
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D1288);
      BOOL v28 = blahtex::Token::operator==(v4, (const __int32 *)&v41);
      if (v42 < 0) {
        operator delete((void *)v41);
      }
      if (v28) {
        operator new();
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D12A4);
      BOOL v29 = blahtex::Token::operator==(v4, (const __int32 *)&v41);
      if (v42 < 0) {
        operator delete((void *)v41);
      }
      if (v29) {
        operator new();
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D12C0);
      BOOL v30 = blahtex::Token::operator==(v4, (const __int32 *)&v41);
      if (v42 < 0) {
        operator delete((void *)v41);
      }
      if (v30) {
        operator new();
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D12E4);
      BOOL v31 = blahtex::Token::operator==(v4, (const __int32 *)&v41);
      if (v42 < 0) {
        operator delete((void *)v41);
      }
      if (v31) {
        operator new();
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D130C);
      BOOL v32 = blahtex::Token::operator==(v4, (const __int32 *)&v41);
      if (v42 < 0) {
        operator delete((void *)v41);
      }
      if (v32) {
        operator new();
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D1320);
      if (blahtex::Token::operator==(v4, (const __int32 *)&v41))
      {
        BOOL v33 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v45, dword_2558D134C);
        if (blahtex::Token::operator==(v4, (const __int32 *)&v45))
        {
          BOOL v33 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, dword_2558D137C);
          if (blahtex::Token::operator==(v4, (const __int32 *)v43))
          {
            BOOL v33 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, dword_2558D13A8);
            BOOL v33 = blahtex::Token::operator==(v4, (const __int32 *)v39);
            if (v40 < 0) {
              operator delete(v39[0]);
            }
          }
          if (v44 < 0) {
            operator delete(v43[0]);
          }
        }
        if (v46 < 0) {
          operator delete(v45);
        }
      }
      if (v42 < 0) {
        operator delete((void *)v41);
      }
      if (v33) {
        operator new();
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected command in MathSymbol::BuildLayoutTree");
LABEL_110:
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
  }
  else
  {
    if (v5 != 1) {
      goto LABEL_34;
    }
    unint64_t v6 = *a2;
    v39[0] = *a2;
    LODWORD(v7) = *v4;
    if (*v4 > 64)
    {
      if (v7 < 0x5B) {
        goto LABEL_14;
      }
      if ((int)v7 >= 97)
      {
        if (v7 >= 0x7B) {
          goto LABEL_33;
        }
LABEL_14:
        char v10 = 0;
        int v11 = 3;
        if (v6)
        {
LABEL_15:
          if (v6 == 7) {
            char v12 = v10 ^ 1;
          }
          else {
            char v12 = 1;
          }
          if ((v12 & 1) == 0)
          {
            long long v35 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D11D0);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v45, dword_2558D1254);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, &dword_2558D1264);
            blahtex::Exception::Exception(v35, &v41, (uint64_t)v4, (uint64_t)&v45, (uint64_t)v43);
          }
          if (v6 == 6) {
            char v13 = v10 ^ 1;
          }
          else {
            char v13 = 1;
          }
          if ((v13 & 1) == 0)
          {
            long long v14 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v41, dword_2558D11D0);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v45, dword_2558D1268);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, &dword_2558D1264);
            blahtex::Exception::Exception(v14, &v41, (uint64_t)v4, (uint64_t)&v45, (uint64_t)v43);
          }
LABEL_30:
          operator new();
        }
LABEL_29:
        LODWORD(v39[0]) = v11;
        goto LABEL_30;
      }
    }
    int v15 = *v4;
    if ((int)v7 < 48) {
      goto LABEL_34;
    }
  }
  if (v15 <= 0x39)
  {
    char v10 = 1;
    int v11 = 1;
    if (v6) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
  goto LABEL_31;
}

void sub_2558B24C0(_Unwind_Exception *a1)
{
}

void blahtex::ParseTree::MathSymbol::~MathSymbol(void **this)
{
  *this = &unk_27045BC60;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045BC60;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

uint64_t std::unordered_map<std::wstring_view,wchar_t>::unordered_map<std::pair<std::wstring_view,wchar_t> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,wchar_t>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,wchar_t>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,wchar_t> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B2C08(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,wchar_t>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,wchar_t>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,wchar_t> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x28uLL);
  *long long v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + ++*(void *)(this + 8) = *(_DWORD *)(a3 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *long long v14 = *v23;
LABEL_38:
    *uint64_t v23 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558B2E70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,int>::unordered_map<std::pair<std::wstring_view,int> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,int>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,int>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,int> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B2EEC(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,int>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,int>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x28uLL);
  *long long v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + ++*(void *)(this + 8) = *(_DWORD *)(a3 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *long long v14 = *v23;
LABEL_38:
    *uint64_t v23 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558B3154(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::OperatorInfo>::unordered_map<std::pair<std::wstring_view,blahtex::OperatorInfo> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::OperatorInfo> const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B31D0(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::OperatorInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x38uLL);
  *long long v14 = 0;
  v14[1] = v9;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v16;
  v14[6] = *(void *)(a3 + 32);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *long long v14 = *v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558B3438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::IdentifierInfo>::unordered_map<std::pair<std::wstring_view,blahtex::IdentifierInfo> const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::IdentifierInfo> const&>(a1, (uint64_t)v5, v5);
      v5 += 3;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B34B4(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::IdentifierInfo> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x40uLL);
  *long long v14 = 0;
  v14[1] = v9;
  long long v16 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = a3[2];
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *long long v14 = *v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2558B371C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t blahtex::lookupColour(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0x10000000;
  }
  {
    std::unordered_map<std::wstring,unsigned int>::unordered_map<std::pair<std::wstring_view,unsigned int> const*>((uint64_t)blahtex::lookupColour(std::wstring const&)::gColourTable, (uint64_t)&blahtex::gColourArray, (uint64_t)&blahtex::gUnicodeNameArray);
  }
  unint64_t v3 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::lookupColour(std::wstring const&)::gColourTable, a1);
  if (v3) {
    return *((unsigned int *)v3 + 10);
  }
  int v5 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6 != 6)
    {
LABEL_21:
      if (v6 == 3)
      {
        uint64_t v11 = 0;
        LODWORD(result) = 0;
        if ((v5 & 0x80u) == 0) {
          uint64_t v12 = a1;
        }
        else {
          uint64_t v12 = *(void *)a1;
        }
        do
        {
          int v13 = *(_DWORD *)(v12 + v11);
          int v14 = v13 - 48;
          if ((v13 - 48) >= 0xA)
          {
            if ((v13 - 65) > 5)
            {
              if ((v13 - 103) < 0xFFFFFFFA) {
                return 0x10000000;
              }
              int v14 = v13 - 87;
            }
            else
            {
              int v14 = v13 - 55;
            }
          }
          v11 += 4;
          uint64_t result = (17 * v14 + (result << 8));
        }
        while (v11 != 12);
        return result;
      }
      return 0x10000000;
    }
  }
  else if (v5 != 6)
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  LODWORD(result) = 0;
  if ((v5 & 0x80u) == 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)a1;
  }
  do
  {
    int v9 = *(_DWORD *)(v8 + v7);
    int v10 = v9 - 48;
    if ((v9 - 48) >= 0xA)
    {
      if ((v9 - 65) > 5)
      {
        if ((v9 - 103) < 0xFFFFFFFA) {
          return 0x10000000;
        }
        int v10 = v9 - 87;
      }
      else
      {
        int v10 = v9 - 55;
      }
    }
    v7 += 4;
    uint64_t result = (v10 + 16 * result);
  }
  while (v7 != 24);
  return result;
}

void sub_2558B38C4(_Unwind_Exception *a1)
{
}

uint64_t blahtex::TexMathFont::GetMathmlApproximation(blahtex::TexMathFont *this)
{
  int v1 = *(_DWORD *)this - 1;
  if (v1 >= 8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected TexMathFont data");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v2 = (unsigned int *)&unk_2558DB83C;
  if (!*((unsigned char *)this + 4)) {
    uint64_t v2 = (unsigned int *)&unk_2558DB85C;
  }
  return v2[v1];
}

void sub_2558B3960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t blahtex::TexTextFont::GetMathmlApproximation(blahtex::TexTextFont *this)
{
  int v1 = *(_DWORD *)this;
  if (*(_DWORD *)this == 2) {
    return 13;
  }
  if (v1 == 1)
  {
    int v2 = *((unsigned __int8 *)this + 4);
    if (*((unsigned char *)this + 5)) {
      unsigned int v3 = 11;
    }
    else {
      unsigned int v3 = 9;
    }
    if (*((unsigned char *)this + 5)) {
      unsigned int v4 = 12;
    }
    else {
      unsigned int v4 = 10;
    }
  }
  else
  {
    if (v1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected TexTextFont data");
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    int v2 = *((unsigned __int8 *)this + 4);
    unsigned int v3 = 2 * (*((unsigned char *)this + 5) != 0);
    if (*((unsigned char *)this + 5)) {
      unsigned int v4 = 3;
    }
    else {
      unsigned int v4 = 1;
    }
  }
  if (v2) {
    return v4;
  }
  else {
    return v3;
  }
}

void sub_2558B3A34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathList::~MathList(blahtex::ParseTree::MathList *this)
{
  *(void *)this = &unk_27045BCB0;
  unsigned int v3 = (void *)*((void *)this + 1);
  int v2 = (void *)*((void *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        int v2 = (void *)*((void *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    unsigned int v3 = (void *)*((void *)this + 1);
  }
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  blahtex::ParseTree::MathList::~MathList(this);

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathTableRow::~MathTableRow(blahtex::ParseTree::MathTableRow *this)
{
  *(void *)this = &unk_27045BCE8;
  unsigned int v3 = (void *)*((void *)this + 1);
  int v2 = (void *)*((void *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        int v2 = (void *)*((void *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    unsigned int v3 = (void *)*((void *)this + 1);
  }
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  blahtex::ParseTree::MathTableRow::~MathTableRow(this);

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathTable::~MathTable(blahtex::ParseTree::MathTable *this)
{
  *(void *)this = &unk_27045BD20;
  unsigned int v3 = (void *)*((void *)this + 1);
  int v2 = (void *)*((void *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        int v2 = (void *)*((void *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    unsigned int v3 = (void *)*((void *)this + 1);
  }
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  blahtex::ParseTree::MathTable::~MathTable(this);

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextList::~TextList(blahtex::ParseTree::TextList *this)
{
  *(void *)this = &unk_27045BD58;
  unsigned int v3 = (void *)*((void *)this + 1);
  int v2 = (void *)*((void *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        int v2 = (void *)*((void *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    unsigned int v3 = (void *)*((void *)this + 1);
  }
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  blahtex::ParseTree::TextList::~TextList(this);

  JUMPOUT(0x25A290040);
}

void *blahtex::ParseTree::MathStateChange::Apply(uint64_t a1, _DWORD *a2)
{
  {
    std::unordered_map<std::wstring,blahtex::LayoutTree::Node::Style>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const*>((uint64_t)blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandTable, (uint64_t)&blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandArray, (uint64_t)&blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandArray);
  }
  uint64_t v4 = a1 + 8;
  uint64_t result = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandTable, v4);
  if (result)
  {
    a2[4] = *((_DWORD *)result + 10);
  }
  else
  {
    {
      std::unordered_map<std::wstring,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>((uint64_t)blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandTable, (uint64_t)&blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandArray, (uint64_t)&blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandArray);
    }
    uint64_t result = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandTable, v4);
    if (!result)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected command in MathStateChange::Apply");
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    *a2 = *((_DWORD *)result + 10);
  }
  return result;
}

void sub_2558B3ED4(_Unwind_Exception *a1)
{
}

void *blahtex::ParseTree::TextStateChange::Apply(uint64_t a1, uint64_t a2)
{
  {
    std::unordered_map<std::wstring_view,blahtex::TexTextFont>::unordered_map<std::pair<std::wstring_view,blahtex::TexTextFont> const*>((uint64_t)blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandTable, (uint64_t)&blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandArray, (uint64_t)&blahtex::ParseTree::FontEncodingName);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  v9[0] = v4;
  v9[1] = v5;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandTable, (uint64_t)v9);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected command in TextStateChange::Apply");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  int v7 = *((_DWORD *)result + 8);
  *(_WORD *)(a2 + 12) = *((_WORD *)result + 18);
  *(_DWORD *)(a2 + ++*(void *)(this + 8) = v7;
  return result;
}

void sub_2558B3FF8(_Unwind_Exception *a1)
{
}

uint64_t blahtex::ParseTree::MathColour::Apply(uint64_t a1, uint64_t a2)
{
  uint64_t result = blahtex::lookupColour(a1 + 40);
  if (result == 0x10000000)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot find colour name in MathColour::Apply");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(_DWORD *)(a2 + 2std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = result;
  return result;
}

void sub_2558B4090(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextColour::Apply(uint64_t a1, uint64_t a2)
{
  uint64_t result = blahtex::lookupColour(a1 + 40);
  if (result == 0x10000000)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot find colour name in TextColour::Apply");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(_DWORD *)(a2 + 2std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = result;
  return result;
}

void sub_2558B4114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *blahtex::ParseTree::MathSymbol::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7124, 1);
  int v7 = *(char *)(a1 + 31);
  if (v7 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 16);
  }

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v6, v8, v9);
}

void blahtex::LatexFeatures::Update(uint64_t a1, const __int32 *a2)
{
  {
    std::unordered_set<std::wstring_view>::unordered_set<std::wstring_view const*>((uint64_t)blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmsmathTable, &blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmsmathArray, &blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmssymbArray);
  }
  {
    std::unordered_set<std::wstring_view>::unordered_set<std::wstring_view const*>((uint64_t)blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmssymbTable, &blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmssymbArray, &blahtex::gColourArray);
  }
  int v4 = *((char *)a2 + 23);
  if ((v4 & 0x80000000) == 0)
  {
    if (*a2 != 92) {
      return;
    }
    uint64_t v5 = a2;
    if (v4 != 4) {
      goto LABEL_11;
    }
LABEL_9:
    if (!wmemcmp(v5, dword_2558D7714, 4uLL))
    {
      *(unsigned char *)(a1 + 3) = 1;
      *(unsigned char *)(a1 + 5) = 1;
    }
    goto LABEL_11;
  }
  uint64_t v5 = *(const __int32 **)a2;
  if (**(_DWORD **)a2 != 92) {
    return;
  }
  if (*((void *)a2 + 1) == 4) {
    goto LABEL_9;
  }
LABEL_11:
  int v6 = *((char *)a2 + 23);
  if (v6 < 0)
  {
    if (*((void *)a2 + 1) != 4) {
      goto LABEL_18;
    }
    int v7 = *(const __int32 **)a2;
  }
  else
  {
    int v7 = a2;
    if (v6 != 4) {
      goto LABEL_18;
    }
  }
  if (!wmemcmp(v7, dword_2558D7728, 4uLL)) {
    *(_WORD *)(a1 + 6) = 257;
  }
LABEL_18:
  if (!*(unsigned char *)(a1 + 1))
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (*((void *)a2 + 1) != 7) {
        goto LABEL_46;
      }
      int v13 = *(const __int32 **)a2;
    }
    else
    {
      int v12 = *((unsigned __int8 *)a2 + 23);
      int v13 = a2;
      if (v12 != 7)
      {
LABEL_44:
        int v14 = a2;
        if (v12 != 9) {
          goto LABEL_19;
        }
        goto LABEL_48;
      }
    }
    if (!wmemcmp(v13, dword_2558DABEC, 7uLL)) {
      goto LABEL_49;
    }
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      int v12 = *((unsigned __int8 *)a2 + 23);
      goto LABEL_44;
    }
LABEL_46:
    if (*((void *)a2 + 1) != 9) {
      goto LABEL_19;
    }
    int v14 = *(const __int32 **)a2;
LABEL_48:
    if (wmemcmp(v14, dword_2558DAC0C, 9uLL)) {
      goto LABEL_19;
    }
LABEL_49:
    *(unsigned char *)(a1 + 1) = 1;
  }
LABEL_19:
  if (!*(unsigned char *)a1)
  {
    uint64_t v8 = *((unsigned __int8 *)a2 + 23);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(const __int32 **)a2;
    }
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)a2 + 1);
    }
    unint64_t v15 = v9;
    uint64_t v16 = v8;
    if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmsmathTable, (uint64_t)&v15))
    {
      *(unsigned char *)a1 = 1;
    }
  }
  if (!*(unsigned char *)(a1 + 2))
  {
    uint64_t v10 = *((unsigned __int8 *)a2 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(const __int32 **)a2;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)a2 + 1);
    }
    unint64_t v15 = v11;
    uint64_t v16 = v10;
    if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmssymbTable, (uint64_t)&v15))
    {
      *(unsigned char *)(a1 + 2) = 1;
    }
  }
}

void sub_2558B4414(_Unwind_Exception *a1)
{
}

void *blahtex::ParseTree::MathCommand1Arg::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  int v9 = *(char *)(a1 + 31);
  if (v9 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  int v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v10, v11);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
}

void *blahtex::ParseTree::MathStateChange::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  int v6 = *(char *)(a1 + 31);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v7, v8);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_2558D7124, 1);
}

void *blahtex::ParseTree::MathColour::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 4) = 1;
  int v4 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D713C, 7);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = a1 + 40;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v4, v9, v10);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)&unk_2558D7134, 1);
}

void *blahtex::ParseTree::MathCommand2Args::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v8 = (const __int32 *)(a1 + 8);
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  if (!*(unsigned char *)(a1 + 56))
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D715C);
    BOOL v15 = blahtex::Token::operator==(v8, (const __int32 *)__p);
    BOOL v16 = v15;
    if (v25 < 0)
    {
      operator delete(__p[0]);
      if (v16) {
        goto LABEL_13;
      }
    }
    else if (v15)
    {
LABEL_13:
      std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7194, 7);
      (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, a4);
      float v17 = &unk_2558D71B4;
      float v18 = a2;
      uint64_t v19 = 3;
LABEL_22:
      std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)v17, v19);
      (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2, a3, a4);
      return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
    }
    int v20 = *(char *)(a1 + 31);
    if (v20 >= 0) {
      uint64_t v21 = (uint64_t)v8;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 8);
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      uint64_t v22 = *(void *)(a1 + 16);
    }
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v21, v22);
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v23, (uint64_t)&unk_2558D712C, 1);
    (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, a4);
    float v17 = &unk_2558D71C4;
    float v18 = a2;
    uint64_t v19 = 2;
    goto LABEL_22;
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, a4);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)v8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
}

void sub_2558B48B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *blahtex::ParseTree::MathGroup::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
}

void *blahtex::ParseTree::MathPhantom::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D71D0, 9);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
}

void *blahtex::ParseTree::MathCancel::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D71F8, 8);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
}

uint64_t blahtex::ParseTree::MathList::GetPurifiedTex(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

void *blahtex::ParseTree::MathScripts::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void **)(a1 + 8);
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, void *, uint64_t, uint64_t))(*result + 24))(result, a2, a3, a4);
  }
  if (*(void *)(a1 + 16))
  {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D721C, 2);
    (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a2, a3, a4);
    uint64_t result = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
  }
  if (*(void *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7228, 2);
    (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), a2, a3, a4);
    return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7134, 1);
  }
  return result;
}

void *blahtex::ParseTree::MathLimits::GetPurifiedTex(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = a1 + 8;
  uint64_t v4 = v6;
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v9 = *(void *)(v5 + 8);
  }

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v8, v9);
}

void *blahtex::ParseTree::MathDelimited::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 16;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 16));
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 48));
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7234, 5);
  int v10 = *(char *)(a1 + 39);
  if (v10 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);
  int v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D724C, 6);
  int v14 = *(char *)(a1 + 71);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 48;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 48);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 56);
  }

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, v15, v16);
}

void *blahtex::ParseTree::MathMiddle::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7268, 7);
  int v7 = *(char *)(a1 + 31);
  if (v7 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 16);
  }

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v6, v8, v9);
}

void *blahtex::ParseTree::MathBig::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 40));
  int v7 = *(char *)(a1 + 31);
  if (v7 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  int v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v8, v9);
  int v11 = *(char *)(a1 + 63);
  if (v11 >= 0) {
    uint64_t v12 = a1 + 40;
  }
  else {
    uint64_t v12 = *(void *)(a1 + 40);
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 48);
  }

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v10, v12, v13);
}

uint64_t blahtex::ParseTree::MathTableRow::GetPurifiedTex(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    uint64_t v8 = result;
    do
    {
      if (v4 != *(uint64_t **)(v8 + 8)) {
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7288, 2);
      }
      uint64_t v9 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

uint64_t blahtex::ParseTree::MathTable::GetPurifiedTex(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    uint64_t v8 = result;
    do
    {
      if (v4 != *(uint64_t **)(v8 + 8)) {
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7294, 3);
      }
      uint64_t v9 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

void blahtex::ParseTree::MathEnvironment::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v22[2] = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  uint64_t v19 = 0;
  long long v20 = 0uLL;
  if (*(unsigned char *)(a1 + 48))
  {
    std::operator+<wchar_t>((const __int32 *)&unk_2558D72A4, (const void **)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::wstring __p = v18;
    blahtex::LatexFeatures::Update(a3, (const __int32 *)&__p);
    std::wstring::append(&__p, dword_2558D712C);
    MEMORY[0x25A28FDC0](&v19, dword_2558D7134);
  }
  else
  {
    std::operator+<wchar_t>(dword_2558D72AC, (const void **)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_);
    uint64_t v8 = std::wstring::append(&v18, dword_2558D7134);
    std::wstring::size_type v9 = v8->__r_.__value_.__r.__words[0];
    v22[0] = v8->__r_.__value_.__l.__size_;
    *(void *)((char *)v22 + 7) = *(std::wstring::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
    char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v9;
    __p.__r_.__value_.__l.__size_ = v22[0];
    *(std::wstring::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v22 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v10;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    blahtex::LatexFeatures::Update(a3, (const __int32 *)&__p);
    std::operator+<wchar_t>(dword_2558D72CC, (const void **)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_);
    int v11 = std::wstring::append(&v18, dword_2558D7134);
    uint64_t v12 = (void *)v11->__r_.__value_.__r.__words[0];
    v22[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v22 + 7) = *(std::wstring::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19);
    }
    uint64_t v19 = v12;
    *(void *)&long long v20 = v22[0];
    *(void *)((char *)&v20 + 7) = *(void *)((char *)v22 + 7);
    HIBYTE(v2std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0) = v13;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::wstring::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::wstring::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, size);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, a4);
  if (v20 >= 0) {
    uint64_t v16 = &v19;
  }
  else {
    uint64_t v16 = v19;
  }
  if (v20 >= 0) {
    uint64_t v17 = HIBYTE(v20);
  }
  else {
    uint64_t v17 = v20;
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v16, v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2558B52E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::ParseTree::TextList::GetPurifiedTex(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

void *blahtex::ParseTree::TextGroup::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558D7134, 1);
}

void *blahtex::ParseTree::TextPhantom::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D71D0, 9);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558D7134, 1);
}

void *blahtex::ParseTree::TextCancel::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D71F8, 8);
  (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558D7134, 1);
}

uint64_t blahtex::ParseTree::FormatCodePoint@<X0>(std::wstringbuf::string_type *a1@<X8>)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  unsigned int v3 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v8, (uint64_t)&unk_2558D72E4, 2);
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + ++*(void *)(this + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  int v7 = 48;
  uint64_t v4 = std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(v3, &v7);
  uint64_t v5 = *v4;
  *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 8) |= 0x4000u;
  *(uint64_t *)((char *)v4 + *(void *)(v5 - 24) + 24) = 8;
  std::wostream::operator<<();
  std::wstringbuf::str(a1, &v9);
  if (SHIBYTE(v9.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x25A290000](&v10);
}

void sub_2558B572C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *blahtex::ParseTree::TextSymbol::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  {
    std::set<wchar_t>::set[abi:ne180100]<wchar_t const*>((uint64_t)&blahtex::ParseTree::TextSymbol::GetPurifiedTex(std::wostream &,blahtex::LatexFeatures &,blahtex::FontEncoding)const::gSimpleUnicodeTable, blahtex::ParseTree::TextSymbol::GetPurifiedTex(std::wostream &,blahtex::LatexFeatures &,blahtex::FontEncoding)const::gSimpleUnicodeArray, dword_2558D7638);
  }
  uint64_t v8 = (int *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(void *)(a1 + 16) <= 1uLL)
    {
      int v9 = **(_DWORD **)v8;
      if (v9 > 127) {
        goto LABEL_21;
      }
    }
LABEL_8:
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_2558D7124);
    BOOL v10 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (a4) {
      BOOL v11 = v10;
    }
    else {
      BOOL v11 = 0;
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v11)
    {
      exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D7638);
      std::wstring::basic_string<std::wstring_view,0>(&__dst, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, &dword_2558D7680);
      blahtex::Exception::Exception(exception, (long long *)__p, a1 + 8, (uint64_t)&__dst, (uint64_t)v25);
    }
    blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
    int v12 = *(char *)(a1 + 31);
    if (v12 >= 0) {
      char v13 = (void **)(a1 + 8);
    }
    else {
      char v13 = *(void ***)(a1 + 8);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      uint64_t v14 = *(void *)(a1 + 16);
    }
    uint64_t v15 = a2;
    return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)v13, v14);
  }
  if (*(unsigned __int8 *)(a1 + 31) > 1u) {
    goto LABEL_8;
  }
  int v9 = *v8;
  if (*v8 < 128) {
    goto LABEL_8;
  }
LABEL_21:
  for (uint64_t i = qword_269EFEDE0; i; uint64_t i = *(void *)i)
  {
    int v17 = *(_DWORD *)(i + 28);
    if (v9 >= v17)
    {
      if (v17 >= v9)
      {
        if (a4)
        {
          uint64_t v23 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D7638);
          blahtex::ParseTree::FormatCodePoint(&__dst);
          std::wstring::basic_string<std::wstring_view,0>(v25, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558D7680);
          blahtex::Exception::Exception(v23, (long long *)__p, (uint64_t)&__dst, (uint64_t)v25, (uint64_t)v24);
        }
        *(unsigned char *)(a3 + 3) = 1;
LABEL_38:
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D7684, 9);
        uint64_t v15 = (void *)std::wostream::operator<<();
        char v13 = (void **)dword_2558D7134;
        goto LABEL_39;
      }
      i += 8;
    }
  }
  if ((v9 - 1024) <= 0x5F)
  {
    if (a4 != 1)
    {
      uint64_t v21 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D76AC);
      blahtex::ParseTree::FormatCodePoint(&__dst);
      std::wstring::basic_string<std::wstring_view,0>(v25, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, dword_2558D7714);
      blahtex::Exception::Exception(v21, (long long *)__p, (uint64_t)&__dst, (uint64_t)v25, (uint64_t)v24);
    }
    *(unsigned char *)(a3 + 3) = 1;
    *(unsigned char *)(a3 + 5) = 1;
    goto LABEL_38;
  }
  if ((v9 - 12352) >= 0xC0
    && (v9 - 13312) >> 10 >= 0x1B
    && (v9 - 63744) > 0x1E0)
  {
    long long v20 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D773C);
    blahtex::ParseTree::FormatCodePoint(&__dst);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, &dword_2558D7680);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_2558D7680);
    blahtex::Exception::Exception(v20, (long long *)__p, (uint64_t)&__dst, (uint64_t)v25, (uint64_t)v24);
  }
  if (a4 != 2)
  {
    uint64_t v22 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2558D76AC);
    blahtex::ParseTree::FormatCodePoint(&__dst);
    std::wstring::basic_string<std::wstring_view,0>(v25, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, dword_2558D7728);
    blahtex::Exception::Exception(v22, (long long *)__p, (uint64_t)&__dst, (uint64_t)v25, (uint64_t)v24);
  }
  *(_WORD *)(a3 + 6) = 257;
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v8 = *(int **)v8;
  }
  LODWORD(__p[0]) = *v8;
  char v13 = __p;
  uint64_t v15 = a2;
LABEL_39:
  uint64_t v14 = 1;
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)v13, v14);
}

void sub_2558B5C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void *blahtex::ParseTree::TextStateChange::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  int v6 = *(char *)(a1 + 31);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v7, v8);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_2558D77A0, 2);
}

void *blahtex::ParseTree::TextColour::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 4) = 1;
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2558D713C, 7);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = a1 + 40;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  BOOL v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v4, v9, v10);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)dword_2558D7134, 1);
}

uint64_t blahtex::ParseTree::HandleFontEncodingCommand(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  if (*(char *)(result + 23) < 0)
  {
    if (*(void *)(result + 8) != 4) {
      goto LABEL_11;
    }
    uint64_t result = *(void *)result;
LABEL_6:
    uint64_t result = wmemcmp((const __int32 *)result, dword_2558D7714, 4uLL);
    if (!result)
    {
      int v5 = 1;
      goto LABEL_16;
    }
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      int v4 = *(unsigned __int8 *)(v3 + 23);
      goto LABEL_9;
    }
LABEL_11:
    if (*(void *)(v3 + 8) != 4) {
      return result;
    }
    uint64_t v3 = *(void *)v3;
    goto LABEL_13;
  }
  int v4 = *(unsigned __int8 *)(result + 23);
  if (v4 == 4) {
    goto LABEL_6;
  }
LABEL_9:
  if (v4 != 4) {
    return result;
  }
LABEL_13:
  uint64_t result = wmemcmp((const __int32 *)v3, dword_2558D7728, 4uLL);
  if (result) {
    return result;
  }
  int v5 = 2;
LABEL_16:
  if (*a2)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v10, dword_2558D77AC);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v9, &dword_2558D7680);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v8, &dword_2558D7680);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v7, &dword_2558D7680);
    blahtex::Exception::Exception(exception, &v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7);
  }
  *a2 = v5;
  return result;
}

void sub_2558B5F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v28 - 33) < 0)
  {
    operator delete(*(void **)(v28 - 56));
    if ((v27 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v26);
  goto LABEL_12;
}

void *blahtex::ParseTree::TextCommand1Arg::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v13 = a4;
  uint64_t v7 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  blahtex::ParseTree::HandleFontEncodingCommand(v7, (int *)&v13);
  int v8 = *(char *)(a1 + 31);
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 16);
  }
  BOOL v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v9, v10);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)dword_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, v13);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558D7134, 1);
}

void *blahtex::ParseTree::EnterTextMode::GetPurifiedTex(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v13 = a4;
  uint64_t v7 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  blahtex::ParseTree::HandleFontEncodingCommand(v7, (int *)&v13);
  int v8 = *(char *)(a1 + 31);
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 16);
  }
  BOOL v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v9, v10);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)dword_2558D712C, 1);
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, a3, v13);

  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2558D7134, 1);
}

void blahtex::ParseTree::MathSymbol::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7818, 12);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  int v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B6318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathCommand1Arg::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7854, 17);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  uint64_t v15 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, (a3 + 1));
}

void sub_2558B64BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathCommand2Args::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D789C, 18);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  uint64_t v15 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = (a3 + 1);
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, v16);
  return (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), a2, v16);
}

void sub_2558B6694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathGroup::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D78E8, 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B6804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathPhantom::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7910, 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B6974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathCancel::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7940, 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B6AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathList::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D796C, 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v16, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    uint64_t v12 = (a3 + 1);
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_2558B6C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathScripts::Print(void **a1, void *a2, int a3)
{
  int v6 = 2 * a3;
  std::wstring::basic_string[abi:ne180100](&__p, 2 * a3, 32);
  if ((v29 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v8 = v29;
  }
  else {
    uint64_t v8 = v28;
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_2558D7990, 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet(&v30, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 10);
  std::locale::~locale(&v30);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v29 < 0) {
    operator delete(__p);
  }
  if (a1[1])
  {
    std::wstring::basic_string[abi:ne180100](&__p, v6 + 2, 32);
    if ((v29 & 0x80u) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = __p;
    }
    if ((v29 & 0x80u) == 0) {
      uint64_t v13 = v29;
    }
    else {
      uint64_t v13 = v28;
    }
    std::locale v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v12, v13);
    unsigned __int8 v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, (uint64_t)&unk_2558D79C0, 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    std::locale v16 = std::locale::use_facet(&v30, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[3].__on_zero_shared)(v16, 10);
    std::locale::~locale(&v30);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    (*(void (**)(void *, void *, void))(*a1[1] + 32))(a1[1], a2, (a3 + 2));
  }
  if (a1[2])
  {
    std::wstring::basic_string[abi:ne180100](&__p, v6 + 2, 32);
    if ((v29 & 0x80u) == 0) {
      int v17 = &__p;
    }
    else {
      int v17 = __p;
    }
    if ((v29 & 0x80u) == 0) {
      uint64_t v18 = v29;
    }
    else {
      uint64_t v18 = v28;
    }
    unsigned __int8 v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v17, v18);
    std::locale v20 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v19, (uint64_t)&unk_2558D79D4, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    uint64_t v21 = std::locale::use_facet(&v30, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[3].__on_zero_shared)(v21, 10);
    std::locale::~locale(&v30);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    (*(void (**)(void *, void *, void))(*a1[2] + 32))(a1[2], a2, (a3 + 2));
  }
  if (a1[3])
  {
    std::wstring::basic_string[abi:ne180100](&__p, v6 + 2, 32);
    if ((v29 & 0x80u) == 0) {
      uint64_t v22 = &__p;
    }
    else {
      uint64_t v22 = __p;
    }
    if ((v29 & 0x80u) == 0) {
      uint64_t v23 = v29;
    }
    else {
      uint64_t v23 = v28;
    }
    unint64_t v24 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v22, v23);
    char v25 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v24, (uint64_t)&unk_2558D79EC, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
    char v26 = std::locale::use_facet(&v30, MEMORY[0x263F8C110]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[3].__on_zero_shared)(v26, 10);
    std::locale::~locale(&v30);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    (*(void (**)(void *, void *, void))(*a1[3] + 32))(a1[3], a2, (a3 + 2));
  }
}

void sub_2558B70D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathLimits::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7A04, 12);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  std::locale v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  unsigned __int8 v15 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, (a3 + 1));
}

void sub_2558B7290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathStateChange::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7A38, 17);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  unsigned __int8 v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  std::locale v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  int v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B73F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathColour::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7A80, 12);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = a1 + 40;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  unsigned __int8 v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  std::locale v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  int v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B7558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathDelimited::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v23 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v7 = v23;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7AB4, 15);
  int v10 = *(char *)(a1 + 39);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 16;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D7AF4, 3);
  int v15 = *(char *)(a1 + 71);
  if (v15 >= 0) {
    uint64_t v16 = a1 + 48;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 48);
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 56);
  }
  unsigned __int8 v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, v16, v17);
  unsigned __int8 v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  std::locale v20 = std::locale::use_facet(&v24, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v24);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B7730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathMiddle::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7B04, 12);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  int v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  uint64_t v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B7894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathBig::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v24 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7B38, 9);
  int v9 = *(char *)(a1 + 31);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 8;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  int v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_2558D7AF4, 3);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v15 = a1 + 40;
  uint64_t v14 = v16;
  int v17 = *(char *)(v15 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v14;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    uint64_t v19 = *(void *)(v15 + 8);
  }
  std::locale v20 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, v18, v19);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v20, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v22 = std::locale::use_facet(&v25, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[3].__on_zero_shared)(v22, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B7A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTableRow::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7B60, 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(&v16, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    uint64_t v12 = (a3 + 1);
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_2558B7BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTable::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7B94, 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(&v16, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    uint64_t v12 = (a3 + 1);
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_2558B7D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathEnvironment::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v7 = v17;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7BBC, 17);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D784C, 1);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 48)) {
    std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, " (short)");
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[3].__on_zero_shared)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::wostream::put();
  std::wostream::flush();
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, (a3 + 1));
}

void sub_2558B7EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t blahtex::ParseTree::EnterTextMode::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7C04, 15);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  unsigned __int8 v15 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, (a3 + 1));
}

void sub_2558B8098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextList::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7C44, 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v16, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    uint64_t v12 = (a3 + 1);
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_2558B8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextSymbol::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7C68, 12);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  unsigned __int8 v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  std::locale v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  unsigned __int8 v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B8388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextCommand1Arg::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7C9C, 17);
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  unsigned __int8 v15 = std::locale::use_facet(&v19, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, (a3 + 1));
}

void sub_2558B852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextStateChange::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7CE4, 17);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  unsigned __int8 v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  std::locale v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  unsigned __int8 v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B8690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextColour::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2558D7D2C, 12);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = a1 + 40;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  unsigned __int8 v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  std::locale v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_2558D784C, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  unsigned __int8 v17 = std::locale::use_facet(&v20, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2558B87F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextGroup::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7D60, 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextPhantom::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7D88, 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B8AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextCancel::Print(uint64_t a1, void *a2, int a3)
{
  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_2558D7DB8, 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C110]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void, void *, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, (a3 + 1));
}

void sub_2558B8C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathStateChange::~MathStateChange(void **this)
{
  *this = &unk_27045BD90;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045BD90;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::MathColour::~MathColour(void **this)
{
  *this = &unk_27045BDE8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_27045BD90;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045BDE8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_27045BD90;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextStateChange::~TextStateChange(void **this)
{
  *this = &unk_27045BE40;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045BE40;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

void blahtex::ParseTree::TextColour::~TextColour(void **this)
{
  *this = &unk_27045BE98;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_27045BE40;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_27045BE98;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_27045BE40;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x25A290040);
}

uint64_t std::unordered_map<std::wstring,unsigned int>::unordered_map<std::pair<std::wstring_view,unsigned int> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__emplace_unique_impl<std::pair<std::wstring_view,unsigned int> const&>((void *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B9084(_Unwind_Exception *a1)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__emplace_unique_impl<std::pair<std::wstring_view,unsigned int> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__construct_node<std::pair<std::wstring_view,unsigned int> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::wstring __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_2558B9100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__construct_node<std::pair<std::wstring_view,unsigned int> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + ++*(void *)(this + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  void *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2558B91A8(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring,blahtex::LayoutTree::Node::Style>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>((void *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B9228(_Unwind_Exception *a1)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__construct_node<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::wstring __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_2558B92A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__construct_node<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + ++*(void *)(this + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  void *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2558B934C(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>((void *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B93CC(_Unwind_Exception *a1)
{
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__construct_node<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::wstring __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_2558B9448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__construct_node<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + ++*(void *)(this + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  void *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2558B94F0(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<wchar_t>::set[abi:ne180100]<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  char v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2558B9578(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *blahtex::UnicodeNameTable(blahtex *this)
{
  {
    std::unordered_map<wchar_t,blahtex::UnicodeNameInfo>::unordered_map<std::pair<wchar_t,blahtex::UnicodeNameInfo> const*>((uint64_t)&blahtex::UnicodeNameTable(void)::gUnicodeNameTable, (int *)&blahtex::gUnicodeNameArray, (int *)&blahtex::gUnicodeNameArray + 5290);
  }
  return &blahtex::UnicodeNameTable(void)::gUnicodeNameTable;
}

void sub_2558B9600(_Unwind_Exception *a1)
{
}

uint64_t blahtex::XmlEncode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::wstringbuf::string_type *a3@<X8>)
{
  uint64_t v6 = (uint64_t *)std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
  uint64_t v7 = *((unsigned __int8 *)a1 + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = a1[1];
  }
  if (v7)
  {
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = (uint64_t *)*a1;
    }
    while (1)
    {
      int v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 == 62) {
        break;
      }
      if (v10 == 60)
      {
        uint64_t v11 = &unk_2558DB894;
        goto LABEL_13;
      }
      if (v10 == 38)
      {
        uint64_t v11 = &unk_2558DB87C;
        uint64_t v12 = 5;
LABEL_14:
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v26, (uint64_t)v11, v12);
        goto LABEL_15;
      }
      if (v10 <= 127) {
        goto LABEL_32;
      }
      blahtex::UnicodeNameTable((blahtex *)v6);
      uint64_t v6 = std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(blahtex::UnicodeNameTable(void)::gUnicodeNameTable, (int *)v9);
      unsigned __int8 v15 = v6;
      if (!v6)
      {
        if (!*(unsigned char *)(a2 + 4))
        {
          unsigned __int8 v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v26, (uint64_t)&unk_2558DB8BC, 3);
          *(_DWORD *)((char *)v18 + *(void *)(*v18 - 24) + ++*(void *)(this + 8) = *(_DWORD *)((unsigned char *)v18
                                                                              + *(void *)(*v18 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          unsigned __int8 v19 = (void *)std::wostream::operator<<();
          uint64_t v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v19, (uint64_t)&unk_2558DB8CC, 1);
          goto LABEL_15;
        }
LABEL_32:
        v29[0] = *(_DWORD *)v9;
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v26, (uint64_t)v29, 1);
        goto LABEL_15;
      }
      unsigned int v16 = *(_DWORD *)a2;
      if (!*(unsigned char *)(a2 + 5))
      {
        int v17 = v16 <= 2 ? 2 : *(_DWORD *)a2;
        if (*((_WORD *)v9 + 1)) {
          unsigned int v16 = v17;
        }
      }
      switch(v16)
      {
        case 0u:
          goto LABEL_32;
        case 1u:
          goto LABEL_39;
        case 2u:
          goto LABEL_36;
        case 3u:
          std::locale v20 = v6 + 6;
          if (v6[6])
          {
            uint64_t v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v26, (uint64_t)&unk_2558DB8D4, 1);
            uint64_t v22 = v15 + 5;
LABEL_38:
            unsigned __int8 v23 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v21, *v22, *v20);
            goto LABEL_40;
          }
LABEL_36:
          if (v6[4])
          {
            uint64_t v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v26, (uint64_t)&unk_2558DB8D4, 1);
            uint64_t v22 = v15 + 3;
            std::locale v20 = v15 + 4;
            goto LABEL_38;
          }
LABEL_39:
          unsigned __int8 v24 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v26, (uint64_t)&unk_2558DB8BC, 3);
          *(_DWORD *)((char *)v24 + *(void *)(*v24 - 24) + ++*(void *)(this + 8) = *(_DWORD *)((unsigned char *)v24
                                                                              + *(void *)(*v24 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          unsigned __int8 v23 = (void *)std::wostream::operator<<();
LABEL_40:
          uint64_t v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v23, (uint64_t)&unk_2558DB8CC, 1);
          break;
        default:
          break;
      }
LABEL_15:
      uint64_t v9 = (uint64_t *)((char *)v9 + 4);
      uint64_t v13 = *((unsigned __int8 *)a1 + 23);
      if ((v13 & 0x80u) == 0) {
        std::locale v14 = a1;
      }
      else {
        std::locale v14 = (uint64_t *)*a1;
      }
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = a1[1];
      }
      if (v9 == (uint64_t *)((char *)v14 + 4 * v13)) {
        goto LABEL_41;
      }
    }
    uint64_t v11 = &unk_2558DB8A8;
LABEL_13:
    uint64_t v12 = 4;
    goto LABEL_14;
  }
LABEL_41:
  std::wstringbuf::str(a3, &v27);
  if (SHIBYTE(v27.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x25A290000](&v28);
}

void sub_2558B999C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<wchar_t,blahtex::UnicodeNameInfo>::unordered_map<std::pair<wchar_t,blahtex::UnicodeNameInfo> const*>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t,blahtex::UnicodeNameInfo> const&>(a1, v5, (uint64_t)v5);
      v5 += 10;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2558B9A38(_Unwind_Exception *a1)
{
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,blahtex::UnicodeNameInfo>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t,blahtex::UnicodeNameInfo> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  int v10 = (char *)operator new(0x38uLL);
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v10 + ++*(void *)(this + 40) = *(_OWORD *)(a3 + 24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unsigned __int8 v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)int v10 = *v19;
LABEL_38:
    *unsigned __int8 v19 = v10;
    goto LABEL_39;
  }
  *(void *)int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unsigned __int8 v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2558B9C64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2558B9C80()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_2558B9C90()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_2558B9CA0()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_2558B9CB0()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_2558B9CC0()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t sub_2558B9CD0()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t sub_2558B9CE0()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t sub_2558B9CF0()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_2558B9D00()
{
  return MEMORY[0x270EF1D50]();
}

uint64_t sub_2558B9D10()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_2558B9D30()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_2558B9D40()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_2558B9D50()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_2558B9D60()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_2558B9D70()
{
  return MEMORY[0x270F9FC78]();
}

uint64_t sub_2558B9D80()
{
  return MEMORY[0x270F9FC90]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x270EE4768](theSet, *(void *)&theChar);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x270EE4A48](cf);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4B20](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x270EE50F8](alloc, chars, numChars);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CGAffineTransformComponents *__cdecl CGAffineTransformDecompose(CGAffineTransformComponents *__return_ptr retstr, CGAffineTransform *transform)
{
  return (CGAffineTransformComponents *)MEMORY[0x270EE5968](retstr, transform);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59D8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B70](gray, alpha);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B80](red, green, blue, alpha);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x270EE5B98](color1, color2);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextEOFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x270EE5FC0](retstr, c);
}

CGAffineTransform *__cdecl CGContextGetTextMatrix(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x270EE6030](retstr, c);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x270EE6FD8](path);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7008](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
{
  return (CGMutablePathRef)MEMORY[0x270EE7038](path);
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return MEMORY[0x270EE7068](path1, path2);
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7090](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CFCharacterSetRef CTFontCopyCharacterSet(CTFontRef font)
{
  return (CFCharacterSetRef)MEMORY[0x270EE9A10](font);
}

CFStringRef CTFontCopyFamilyName(CTFontRef font)
{
  return (CFStringRef)MEMORY[0x270EE9A28](font);
}

CFStringRef CTFontCopyPostScriptName(CTFontRef font)
{
  return (CFStringRef)MEMORY[0x270EE9A78](font);
}

CFDataRef CTFontCopyTable(CTFontRef font, CTFontTableTag table, CTFontTableOptions options)
{
  return (CFDataRef)MEMORY[0x270EE9A88](font, *(void *)&table, *(void *)&options);
}

CFDictionaryRef CTFontCopyTraits(CTFontRef font)
{
  return (CFDictionaryRef)MEMORY[0x270EE9A98](font);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x270EE9AB8](font, matrix, attributes, size);
}

CTFontRef CTFontCreateForString(CTFontRef currentFont, CFStringRef string, CFRange range)
{
  return (CTFontRef)MEMORY[0x270EE9AC8](currentFont, string, range.location, range.length);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return (CGPathRef)MEMORY[0x270EE9AD0](font, glyph, matrix);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AE0](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B60](attributes);
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  MEMORY[0x270EE9BE0](font, *(void *)&orientation, glyphs, advances, count);
  return result;
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  MEMORY[0x270EE9BE8](font);
  return result;
}

CGRect CTFontGetBoundingRectsForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count)
{
  MEMORY[0x270EE9BF8](font, *(void *)&orientation, glyphs, boundingRects, count);
  result.size.CGFloat height = v8;
  result.size.CGFloat width = v7;
  result.origin.double y = v6;
  result.origin.double x = v5;
  return result;
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  MEMORY[0x270EE9C10](font);
  return result;
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return MEMORY[0x270EE9C28](font, characters, glyphs, count);
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  MEMORY[0x270EE9C38](font);
  return result;
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x270EE9C40](font);
  return result;
}

CGFloat CTFontGetSlantAngle(CTFontRef font)
{
  MEMORY[0x270EE9C50](font);
  return result;
}

unsigned int CTFontGetUnitsPerEm(CTFontRef font)
{
  return MEMORY[0x270EE9C88](font);
}

CGFloat CTFontGetXHeight(CTFontRef font)
{
  MEMORY[0x270EE9CA0](font);
  return result;
}

CTGlyphInfoRef CTGlyphInfoCreateWithGlyph(CGGlyph glyph, CTFontRef font, CFStringRef baseString)
{
  return (CTGlyphInfoRef)MEMORY[0x270EE9D50](glyph, font, baseString);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x270EE9D70](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x270EE9DC0](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  MEMORY[0x270EE9DC8](line, context);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CGFloat CTLineGetOffsetForStringIndex(CTLineRef line, CFIndex charIndex, CGFloat *secondaryOffset)
{
  MEMORY[0x270EE9DD0](line, charIndex, secondaryOffset);
  return result;
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  MEMORY[0x270EE9E00](line, ascent, descent, leading);
  return result;
}

CTRunDelegateRef CTRunDelegateCreate(const CTRunDelegateCallbacks *callbacks, void *refCon)
{
  return (CTRunDelegateRef)MEMORY[0x270EE9E30](callbacks, refCon);
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x270EE9E50](run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x270EE9E68](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x270EF2C28](range.location, range.length);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98318](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::wstring *__cdecl std::wstring::erase(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  return (std::wstring *)MEMORY[0x270F98570](this, __pos, __n);
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, const std::wstring::value_type *__s)
{
  return (std::wstring *)MEMORY[0x270F98578](this, __s);
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __n)
{
  return (std::wstring *)MEMORY[0x270F98580](this, __s, __n);
}

std::wstring *__cdecl std::wstring::assign(std::wstring *this, const std::wstring::value_type *__s)
{
  return (std::wstring *)MEMORY[0x270F98588](this, __s);
}

std::wstring *__cdecl std::wstring::assign(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __n)
{
  return (std::wstring *)MEMORY[0x270F98590](this, __s, __n);
}

std::wstring *__cdecl std::wstring::insert(std::wstring *this, std::wstring::size_type __pos, const std::wstring::value_type *__s)
{
  return (std::wstring *)MEMORY[0x270F98598](this, __pos, __s);
}

void std::wstring::resize(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
}

void std::wstring::push_back(std::wstring *this, std::wstring::value_type __c)
{
}

std::wstring *__cdecl std::wstring::basic_string(std::wstring *this, const std::wstring *__str)
{
  return (std::wstring *)MEMORY[0x270F985C0](this, __str);
}

std::wstring *__cdecl std::wstring::basic_string(std::wstring *this, const std::wstring *__str, std::wstring::size_type __pos, std::wstring::size_type __n, std::allocator<wchar_t> *__a)
{
  return (std::wstring *)MEMORY[0x270F985C8](this, __str, __pos, __n, __a);
}

void std::wstring::~wstring(std::wstring *this)
{
}

std::wstring *__cdecl std::wstring::operator=(std::wstring *this, const std::wstring *__str)
{
  return (std::wstring *)MEMORY[0x270F985D8](this, __str);
}

uint64_t std::istream::peek()
{
  return MEMORY[0x270F98670]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986E8]();
}

{
  return MEMORY[0x270F98700]();
}

{
  return MEMORY[0x270F98708]();
}

uint64_t std::wostream::put()
{
  return MEMORY[0x270F987E8]();
}

uint64_t std::wostream::flush()
{
  return MEMORY[0x270F987F0]();
}

uint64_t std::wostream::sentry::sentry()
{
  return MEMORY[0x270F98800]();
}

uint64_t std::wostream::sentry::~sentry()
{
  return MEMORY[0x270F98808]();
}

uint64_t std::wostream::~wostream()
{
  return MEMORY[0x270F98810]();
}

uint64_t std::wostream::operator<<()
{
  return MEMORY[0x270F98818]();
}

{
  return MEMORY[0x270F98820]();
}

{
  return MEMORY[0x270F98828]();
}

{
  return MEMORY[0x270F98830]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

uint64_t std::wstreambuf::basic_streambuf()
{
  return MEMORY[0x270F988B8]();
}

uint64_t std::wstreambuf::~wstreambuf()
{
  return MEMORY[0x270F988C0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x270F98BF0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

uint64_t std::wios::~wios()
{
  return MEMORY[0x270F98DF0]();
}

void std::__throw_bad_alloc(void)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x270ED87A0](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void free(void *a1)
{
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFC8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x270EDAFD0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFD8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF0](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF8](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x270EDBBA0](a1);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}

int wmemcmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  return MEMORY[0x270EDBBF0](a1, a2, a3);
}

xmlNodePtr xmlAddChild(xmlNodePtr parent, xmlNodePtr cur)
{
  return (xmlNodePtr)MEMORY[0x270F9BAF8](parent, cur);
}

const xmlChar *__cdecl xmlBufferContent(const xmlBuffer *buf)
{
  return (const xmlChar *)MEMORY[0x270F9BB40](buf);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return (xmlBufferPtr)MEMORY[0x270F9BB48]();
}

void xmlBufferFree(xmlBufferPtr buf)
{
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x270F9BC50](doc);
}

xmlNodePtr xmlDocSetRootElement(xmlDocPtr doc, xmlNodePtr root)
{
  return (xmlNodePtr)MEMORY[0x270F9BC58](doc, root);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlExternalEntityLoader xmlGetExternalEntityLoader(void)
{
  return (xmlExternalEntityLoader)MEMORY[0x270F9BCE8]();
}

int xmlIsBlankNode(const xmlNode *node)
{
  return MEMORY[0x270F9BDD0](node);
}

int xmlKeepBlanksDefault(int val)
{
  return MEMORY[0x270F9BDE0](*(void *)&val);
}

xmlNodePtr xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len)
{
  return (xmlNodePtr)MEMORY[0x270F9BE20](doc, content, *(void *)&len);
}

xmlNodePtr xmlNewChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
{
  return (xmlNodePtr)MEMORY[0x270F9BE28](parent, ns, name, content);
}

xmlDocPtr xmlNewDoc(const xmlChar *version)
{
  return (xmlDocPtr)MEMORY[0x270F9BE38](version);
}

xmlEntityPtr xmlNewEntity(xmlDocPtr doc, const xmlChar *name, int type, const xmlChar *ExternalID, const xmlChar *SystemID, const xmlChar *content)
{
  return (xmlEntityPtr)MEMORY[0x270F9BE70](doc, name, *(void *)&type, ExternalID, SystemID, content);
}

xmlNodePtr xmlNewNode(xmlNsPtr ns, const xmlChar *name)
{
  return (xmlNodePtr)MEMORY[0x270F9BE88](ns, name);
}

xmlAttrPtr xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
{
  return (xmlAttrPtr)MEMORY[0x270F9BEA8](node, name, value);
}

int xmlNodeBufGetContent(xmlBufferPtr buffer, const xmlNode *cur)
{
  return MEMORY[0x270F9BF10](buffer, cur);
}

int xmlNodeIsText(const xmlNode *node)
{
  return MEMORY[0x270F9BF40](node);
}

xmlChar *__cdecl xmlNodeListGetString(xmlDocPtr doc, const xmlNode *list, int inLine)
{
  return (xmlChar *)MEMORY[0x270F9BF48](doc, list, *(void *)&inLine);
}

xmlOutputBufferPtr xmlOutputBufferCreateIO(xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, xmlCharEncodingHandlerPtr encoder)
{
  return (xmlOutputBufferPtr)MEMORY[0x270F9BF78](iowrite, ioclose, ioctx, encoder);
}

xmlEntityPtr xmlSAX2GetEntity(void *ctx, const xmlChar *name)
{
  return (xmlEntityPtr)MEMORY[0x270F9C010](ctx, name);
}

xmlDocPtr xmlSAXParseMemory(xmlSAXHandlerPtr sax, const char *buffer, int size, int recovery)
{
  return (xmlDocPtr)MEMORY[0x270F9C030](sax, buffer, *(void *)&size, *(void *)&recovery);
}

int xmlSAXVersion(xmlSAXHandler *hdlr, int version)
{
  return MEMORY[0x270F9C038](hdlr, *(void *)&version);
}

int xmlSaveFormatFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding, int format)
{
  return MEMORY[0x270F9C048](buf, cur, encoding, *(void *)&format);
}

xmlNsPtr xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar *href)
{
  return (xmlNsPtr)MEMORY[0x270F9C0C8](doc, node, href);
}

void xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
{
}

int xmlSubstituteEntitiesDefault(int val)
{
  return MEMORY[0x270F9C188](*(void *)&val);
}