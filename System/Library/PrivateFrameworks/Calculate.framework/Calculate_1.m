void functionFabs(uint64_t a1, uint64_t a2)
{
  void v2[5];

  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionFabs_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionFabs_block_invoke(uint64_t a1, int *a2, __n128 result)
{
  if (g_GeneratingConvertTerm == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)(v4 + 204) = 11;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0x7C00000000000000;
    return result;
  }
  g_isTrivial = 0;
  v6 = *(int **)(a1 + 32);
  int v7 = *v6;
  if (*v6 == 4) {
    goto LABEL_6;
  }
  if (v7 == 2)
  {
    int v13 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v19 = 4;
      }
      else {
        int v19 = 0;
      }
      unint64_t v14 = __binary64_to_bid128(v19, &my_fpsf, *((double *)a2 + 4));
    }
    else if (v13 == 2)
    {
      unint64_t v14 = *((void *)a2 + 6);
      uint64_t v20 = *((void *)a2 + 7);
    }
    else
    {
      if (v13 == 4) {
        unint64_t v14 = *((void *)a2 + 8);
      }
      else {
        unint64_t v14 = 0;
      }
      uint64_t v20 = 0x3040000000000000;
    }
    *((void *)v6 + 6) = v14;
    *((void *)v6 + 7) = v20 & 0x7FFFFFFFFFFFFFFFLL;
    v6 = *(int **)(a1 + 32);
  }
  else if (v7 == 1)
  {
LABEL_6:
    int v8 = *a2;
    if (*a2 == 1)
    {
      double v9 = *((double *)a2 + 4);
    }
    else if (v8 == 2)
    {
      unint64_t v15 = *((void *)a2 + 6);
      unint64_t v16 = *((void *)a2 + 7);
      if (my_rnd_mode) {
        int v17 = 4;
      }
      else {
        int v17 = 0;
      }
      double v9 = __bid128_to_binary64(v15, v16, v17, &my_fpsf);
    }
    else
    {
      double v9 = 0.0;
      if (v8 == 4)
      {
        unint64_t v10 = *((void *)a2 + 8);
        unint64_t v11 = (uint64_t)rint(1.79769313e308);
        BOOL v12 = (uint64_t)rint(2.22507386e-308) < v10 && v11 > v10;
        double v9 = (double)v10;
        if (!v12) {
          double v9 = NAN;
        }
      }
    }
    double v18 = fabs(v9);
    *((double *)v6 + 4) = v18;
    *((void *)v6 + 8) = (uint64_t)rint(v18);
  }
  long long v21 = *(_OWORD *)(a2 + 18);
  long long v22 = *(_OWORD *)(a2 + 22);
  long long v23 = *(_OWORD *)(a2 + 26);
  *(_OWORD *)(v6 + 30) = *(_OWORD *)(a2 + 30);
  *(_OWORD *)(v6 + 26) = v23;
  *(_OWORD *)(v6 + 22) = v22;
  *(_OWORD *)(v6 + 18) = v21;
  result = *(__n128 *)(a2 + 34);
  long long v24 = *(_OWORD *)(a2 + 38);
  long long v25 = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(v6 + 46) = *(_OWORD *)(a2 + 46);
  *(_OWORD *)(v6 + 42) = v25;
  *(_OWORD *)(v6 + 38) = v24;
  *(__n128 *)(v6 + 34) = result;
  return result;
}

void functionJ0(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionJ0_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

unint64_t __functionJ0_block_invoke(unint64_t result, int *a2)
{
  unint64_t v2 = result;
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v3 = 11;
LABEL_22:
      uint64_t v12 = *(void *)(result + 32);
      *(_DWORD *)(v12 + 204) = v3;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_21:
    int v3 = 9;
    goto LABEL_22;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6) {
      goto LABEL_9;
    }
  }
  unint64_t v4 = 15;
LABEL_9:
  if (v4 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_21;
  }
  g_isTrivial = 0;
  int v7 = *a2;
  if (*a2 == 1)
  {
    double v8 = *((double *)a2 + 4);
  }
  else if (v7 == 2)
  {
    if (my_rnd_mode) {
      int v13 = 4;
    }
    else {
      int v13 = 0;
    }
    double v8 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v13, &my_fpsf);
  }
  else
  {
    double v8 = 0.0;
    if (v7 == 4)
    {
      unint64_t v9 = *((void *)a2 + 8);
      unint64_t v10 = (uint64_t)rint(1.79769313e308);
      BOOL v11 = (uint64_t)rint(2.22507386e-308) < v9 && v10 > v9;
      double v8 = (double)v9;
      if (!v11) {
        double v8 = NAN;
      }
    }
  }
  double v14 = j0(v8);
  uint64_t v15 = *(void *)(v2 + 32);
  *(double *)(v15 + 32) = v14;
  *(void *)(v15 + 64) = (uint64_t)rint(v14);
  if (my_rnd_mode) {
    int v16 = 4;
  }
  else {
    int v16 = 0;
  }
  result = __binary64_to_bid128(v16, &my_fpsf, v14);
  *(void *)(v15 + 48) = result;
  *(void *)(v15 + 56) = v17;
  return result;
}

void functionJ1(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionJ1_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

unint64_t __functionJ1_block_invoke(unint64_t result, int *a2)
{
  unint64_t v2 = result;
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v3 = 11;
LABEL_22:
      uint64_t v12 = *(void *)(result + 32);
      *(_DWORD *)(v12 + 204) = v3;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_21:
    int v3 = 9;
    goto LABEL_22;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6) {
      goto LABEL_9;
    }
  }
  unint64_t v4 = 15;
LABEL_9:
  if (v4 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_21;
  }
  g_isTrivial = 0;
  int v7 = *a2;
  if (*a2 == 1)
  {
    double v8 = *((double *)a2 + 4);
  }
  else if (v7 == 2)
  {
    if (my_rnd_mode) {
      int v13 = 4;
    }
    else {
      int v13 = 0;
    }
    double v8 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v13, &my_fpsf);
  }
  else
  {
    double v8 = 0.0;
    if (v7 == 4)
    {
      unint64_t v9 = *((void *)a2 + 8);
      unint64_t v10 = (uint64_t)rint(1.79769313e308);
      BOOL v11 = (uint64_t)rint(2.22507386e-308) < v9 && v10 > v9;
      double v8 = (double)v9;
      if (!v11) {
        double v8 = NAN;
      }
    }
  }
  double v14 = j1(v8);
  uint64_t v15 = *(void *)(v2 + 32);
  *(double *)(v15 + 32) = v14;
  *(void *)(v15 + 64) = (uint64_t)rint(v14);
  if (my_rnd_mode) {
    int v16 = 4;
  }
  else {
    int v16 = 0;
  }
  result = __binary64_to_bid128(v16, &my_fpsf, v14);
  *(void *)(v15 + 48) = result;
  *(void *)(v15 + 56) = v17;
  return result;
}

void functionY0(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionY0_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

unint64_t __functionY0_block_invoke(unint64_t result, int *a2)
{
  unint64_t v2 = result;
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v3 = 11;
LABEL_22:
      uint64_t v12 = *(void *)(result + 32);
      *(_DWORD *)(v12 + 204) = v3;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_21:
    int v3 = 9;
    goto LABEL_22;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6) {
      goto LABEL_9;
    }
  }
  unint64_t v4 = 15;
LABEL_9:
  if (v4 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_21;
  }
  g_isTrivial = 0;
  int v7 = *a2;
  if (*a2 == 1)
  {
    double v8 = *((double *)a2 + 4);
  }
  else if (v7 == 2)
  {
    if (my_rnd_mode) {
      int v13 = 4;
    }
    else {
      int v13 = 0;
    }
    double v8 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v13, &my_fpsf);
  }
  else
  {
    double v8 = 0.0;
    if (v7 == 4)
    {
      unint64_t v9 = *((void *)a2 + 8);
      unint64_t v10 = (uint64_t)rint(1.79769313e308);
      BOOL v11 = (uint64_t)rint(2.22507386e-308) < v9 && v10 > v9;
      double v8 = (double)v9;
      if (!v11) {
        double v8 = NAN;
      }
    }
  }
  double v14 = y0(v8);
  uint64_t v15 = *(void *)(v2 + 32);
  *(double *)(v15 + 32) = v14;
  *(void *)(v15 + 64) = (uint64_t)rint(v14);
  if (my_rnd_mode) {
    int v16 = 4;
  }
  else {
    int v16 = 0;
  }
  result = __binary64_to_bid128(v16, &my_fpsf, v14);
  *(void *)(v15 + 48) = result;
  *(void *)(v15 + 56) = v17;
  return result;
}

void functionY1(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionY1_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

unint64_t __functionY1_block_invoke(unint64_t result, int *a2)
{
  unint64_t v2 = result;
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v3 = 11;
LABEL_22:
      uint64_t v12 = *(void *)(result + 32);
      *(_DWORD *)(v12 + 204) = v3;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_21:
    int v3 = 9;
    goto LABEL_22;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6) {
      goto LABEL_9;
    }
  }
  unint64_t v4 = 15;
LABEL_9:
  if (v4 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_21;
  }
  g_isTrivial = 0;
  int v7 = *a2;
  if (*a2 == 1)
  {
    double v8 = *((double *)a2 + 4);
  }
  else if (v7 == 2)
  {
    if (my_rnd_mode) {
      int v13 = 4;
    }
    else {
      int v13 = 0;
    }
    double v8 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v13, &my_fpsf);
  }
  else
  {
    double v8 = 0.0;
    if (v7 == 4)
    {
      unint64_t v9 = *((void *)a2 + 8);
      unint64_t v10 = (uint64_t)rint(1.79769313e308);
      BOOL v11 = (uint64_t)rint(2.22507386e-308) < v9 && v10 > v9;
      double v8 = (double)v9;
      if (!v11) {
        double v8 = NAN;
      }
    }
  }
  double v14 = y1(v8);
  uint64_t v15 = *(void *)(v2 + 32);
  *(double *)(v15 + 32) = v14;
  *(void *)(v15 + 64) = (uint64_t)rint(v14);
  if (my_rnd_mode) {
    int v16 = 4;
  }
  else {
    int v16 = 0;
  }
  result = __binary64_to_bid128(v16, &my_fpsf, v14);
  *(void *)(v15 + 48) = result;
  *(void *)(v15 + 56) = v17;
  return result;
}

void functionRInt(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionRInt_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionRInt_block_invoke(uint64_t a1, int *a2, __n128 result)
{
  if (g_GeneratingConvertTerm == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)(v4 + 204) = 11;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0x7C00000000000000;
  }
  else
  {
    g_isTrivial = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(_DWORD *)v6 == 4 || *(_DWORD *)v6 == 1)
    {
      int v8 = *a2;
      if (*a2 == 1)
      {
        double v9 = *((double *)a2 + 4);
      }
      else if (v8 == 2)
      {
        unint64_t v15 = *((void *)a2 + 6);
        unint64_t v16 = *((void *)a2 + 7);
        if (my_rnd_mode) {
          int v17 = 4;
        }
        else {
          int v17 = 0;
        }
        double v9 = __bid128_to_binary64(v15, v16, v17, &my_fpsf);
      }
      else
      {
        double v9 = 0.0;
        if (v8 == 4)
        {
          unint64_t v10 = *((void *)a2 + 8);
          unint64_t v11 = (uint64_t)rint(1.79769313e308);
          BOOL v12 = (uint64_t)rint(2.22507386e-308) < v10 && v11 > v10;
          double v9 = (double)v10;
          if (!v12) {
            double v9 = NAN;
          }
        }
      }
      double v18 = rint(v9);
      *(double *)(v6 + 32) = v18;
      *(void *)(v6 + 64) = (uint64_t)rint(v18);
    }
    else
    {
      int v13 = *a2;
      if (*a2 == 1)
      {
        if (my_rnd_mode) {
          int v19 = 4;
        }
        else {
          int v19 = 0;
        }
        unint64_t v14 = __binary64_to_bid128(v19, &my_fpsf, *((double *)a2 + 4));
      }
      else if (v13 == 2)
      {
        unint64_t v14 = *((void *)a2 + 6);
        uint64_t v20 = *((void *)a2 + 7);
      }
      else
      {
        if (v13 == 4) {
          unint64_t v14 = *((void *)a2 + 8);
        }
        else {
          unint64_t v14 = 0;
        }
        uint64_t v20 = 0x3040000000000000;
      }
      *(void *)(v6 + 48) = __bid128_round_integral_exact(v14, v20, 0, &my_fpsf);
      *(void *)(v6 + 56) = v21;
      uint64_t v6 = *(void *)(a1 + 32);
    }
    long long v22 = *(_OWORD *)(a2 + 18);
    long long v23 = *(_OWORD *)(a2 + 22);
    long long v24 = *(_OWORD *)(a2 + 26);
    *(_OWORD *)(v6 + 120) = *(_OWORD *)(a2 + 30);
    *(_OWORD *)(v6 + 104) = v24;
    *(_OWORD *)(v6 + 88) = v23;
    *(_OWORD *)(v6 + 72) = v22;
    result = *(__n128 *)(a2 + 34);
    long long v25 = *(_OWORD *)(a2 + 38);
    long long v26 = *(_OWORD *)(a2 + 42);
    *(_OWORD *)(v6 + 184) = *(_OWORD *)(a2 + 46);
    *(_OWORD *)(v6 + 168) = v26;
    *(_OWORD *)(v6 + 152) = v25;
    *(__n128 *)(v6 + 136) = result;
  }
  return result;
}

void functionLGamma(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionLGamma_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionLGamma_block_invoke(uint64_t a1, int *a2, __n128 result)
{
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v4 = 11;
LABEL_27:
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)(v16 + 204) = v4;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_26:
    int v4 = 9;
    goto LABEL_27;
  }
  uint64_t v5 = (long long *)(a2 + 18);
  unint64_t v6 = -1;
  uint64_t v7 = 21;
  while (v6 != 14)
  {
    int v8 = a2[v7];
    ++v6;
    v7 += 2;
    if (v8) {
      goto LABEL_9;
    }
  }
  unint64_t v6 = 15;
LABEL_9:
  if (v6 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_26;
  }
  g_isTrivial = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(_DWORD *)v9 == 4 || *(_DWORD *)v9 == 1)
  {
    int v11 = *a2;
    if (*a2 == 1)
    {
      double v12 = *((double *)a2 + 4);
    }
    else if (v11 == 2)
    {
      if (my_rnd_mode) {
        int v19 = 4;
      }
      else {
        int v19 = 0;
      }
      double v12 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v19, &my_fpsf);
    }
    else
    {
      double v12 = 0.0;
      if (v11 == 4)
      {
        unint64_t v13 = *((void *)a2 + 8);
        unint64_t v14 = (uint64_t)rint(1.79769313e308);
        BOOL v15 = (uint64_t)rint(2.22507386e-308) < v13 && v14 > v13;
        double v12 = (double)v13;
        if (!v15) {
          double v12 = NAN;
        }
      }
    }
    double v20 = lgamma(v12);
    uint64_t v21 = *(void *)(a1 + 32);
    *(double *)(v21 + 32) = v20;
    *(void *)(v21 + 64) = (uint64_t)rint(v20);
  }
  else
  {
    int v17 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v22 = 4;
      }
      else {
        int v22 = 0;
      }
      unint64_t v18 = __binary64_to_bid128(v22, &my_fpsf, *((double *)a2 + 4));
      unint64_t v24 = v23;
    }
    else if (v17 == 2)
    {
      unint64_t v18 = *((void *)a2 + 6);
      unint64_t v24 = *((void *)a2 + 7);
    }
    else
    {
      if (v17 == 4) {
        unint64_t v18 = *((void *)a2 + 8);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v24 = 0x3040000000000000;
    }
    if (my_rnd_mode) {
      unsigned int v25 = 4;
    }
    else {
      unsigned int v25 = 0;
    }
    *(void *)(v9 + 48) = __bid128_lgamma(v18, v24, v25);
    *(void *)(v9 + 56) = v26;
    uint64_t v21 = *(void *)(a1 + 32);
  }
  long long v27 = *v5;
  long long v28 = v5[1];
  long long v29 = v5[2];
  *(_OWORD *)(v21 + 120) = v5[3];
  *(_OWORD *)(v21 + 104) = v29;
  *(_OWORD *)(v21 + 88) = v28;
  *(_OWORD *)(v21 + 72) = v27;
  result = (__n128)v5[4];
  long long v30 = v5[5];
  long long v31 = v5[6];
  *(_OWORD *)(v21 + 184) = v5[7];
  *(_OWORD *)(v21 + 168) = v31;
  *(_OWORD *)(v21 + 152) = v30;
  *(__n128 *)(v21 + 136) = result;
  return result;
}

void functionERF(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionERF_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionERF_block_invoke(uint64_t a1, int *a2, __n128 result)
{
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v4 = 11;
LABEL_27:
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)(v16 + 204) = v4;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_26:
    int v4 = 9;
    goto LABEL_27;
  }
  uint64_t v5 = (long long *)(a2 + 18);
  unint64_t v6 = -1;
  uint64_t v7 = 21;
  while (v6 != 14)
  {
    int v8 = a2[v7];
    ++v6;
    v7 += 2;
    if (v8) {
      goto LABEL_9;
    }
  }
  unint64_t v6 = 15;
LABEL_9:
  if (v6 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_26;
  }
  g_isTrivial = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(_DWORD *)v9 == 4 || *(_DWORD *)v9 == 1)
  {
    int v11 = *a2;
    if (*a2 == 1)
    {
      double v12 = *((double *)a2 + 4);
    }
    else if (v11 == 2)
    {
      if (my_rnd_mode) {
        int v20 = 4;
      }
      else {
        int v20 = 0;
      }
      double v12 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v20, &my_fpsf);
    }
    else
    {
      double v12 = 0.0;
      if (v11 == 4)
      {
        unint64_t v13 = *((void *)a2 + 8);
        unint64_t v14 = (uint64_t)rint(1.79769313e308);
        BOOL v15 = (uint64_t)rint(2.22507386e-308) < v13 && v14 > v13;
        double v12 = (double)v13;
        if (!v15) {
          double v12 = NAN;
        }
      }
    }
    double v21 = erf(v12);
    *(double *)(v9 + 32) = v21;
    *(void *)(v9 + 64) = (uint64_t)rint(v21);
    goto LABEL_62;
  }
  int v17 = *a2;
  if (*a2 == 1)
  {
    if (my_rnd_mode) {
      int v22 = 4;
    }
    else {
      int v22 = 0;
    }
    unint64_t v18 = __binary64_to_bid128(v22, &my_fpsf, *((double *)a2 + 4));
    unint64_t v19 = v23;
  }
  else if (v17 == 2)
  {
    unint64_t v18 = *((void *)a2 + 6);
    unint64_t v19 = *((void *)a2 + 7);
  }
  else
  {
    if (v17 != 4)
    {
      unint64_t v18 = 0;
      if (my_rnd_mode) {
        unsigned int v24 = 4;
      }
      else {
        unsigned int v24 = 0;
      }
      unint64_t v19 = 0x3040000000000000;
      goto LABEL_57;
    }
    unint64_t v18 = *((void *)a2 + 8);
    unint64_t v19 = 0x3040000000000000;
  }
  if (my_rnd_mode) {
    unsigned int v24 = 4;
  }
  else {
    unsigned int v24 = 0;
  }
  if ((~v19 & 0x7C00000000000000) == 0)
  {
    if ((~v19 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((v19 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || (unint64_t v25 = v19 & 0xFC003FFFFFFFFFFFLL, v18 >= 0x38C15B0A00000000) && (v19 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      unint64_t v18 = 0;
      unint64_t v25 = v19 & 0xFC00000000000000;
    }
    goto LABEL_61;
  }
LABEL_57:
  __n128 v34 = 0uLL;
  v33[0] = 0;
  v33[1] = 0;
  v35[0] = __bid128_to_binary128(v18, v19, v24, &my_fpsf);
  v35[1] = v26;
  memset(v36, 0, sizeof(v36));
  __dpml_bid_unpack_x_or_y__(v35, 0, (uint64_t)v36, &qword_1BDDBAE40, (uint64_t)v33, v37);
  if (bid_f128_cmp(v33, (uint64_t *)&c_1em2000, 1u))
  {
    unint64_t v27 = __bid128_mul(0xF009A099F5C1B689, 0x2FFE37A225BAA150, v18, v19, v24, &my_fpsf);
  }
  else
  {
    __dpml_bid_C_ux_erf__(v35, 0x1A9uLL, &v34, v37);
    unint64_t v27 = __binary128_to_bid128(v34.n128_u64[0], v34.n128_u64[1], v24, &my_fpsf);
  }
  unint64_t v18 = v27;
LABEL_61:
  *(void *)(v9 + 48) = v18;
  *(void *)(v9 + 56) = v25;
  uint64_t v9 = *(void *)(a1 + 32);
LABEL_62:
  long long v28 = *v5;
  long long v29 = v5[1];
  long long v30 = v5[2];
  *(_OWORD *)(v9 + 120) = v5[3];
  *(_OWORD *)(v9 + 104) = v30;
  *(_OWORD *)(v9 + 88) = v29;
  *(_OWORD *)(v9 + 72) = v28;
  result = (__n128)v5[4];
  long long v31 = v5[5];
  long long v32 = v5[6];
  *(_OWORD *)(v9 + 184) = v5[7];
  *(_OWORD *)(v9 + 168) = v32;
  *(_OWORD *)(v9 + 152) = v31;
  *(__n128 *)(v9 + 136) = result;
  return result;
}

void functionERFC(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionERFC_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionERFC_block_invoke(uint64_t a1, int *a2, __n128 result)
{
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v4 = 11;
LABEL_27:
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)(v16 + 204) = v4;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_26:
    int v4 = 9;
    goto LABEL_27;
  }
  uint64_t v5 = (long long *)(a2 + 18);
  unint64_t v6 = -1;
  uint64_t v7 = 21;
  while (v6 != 14)
  {
    int v8 = a2[v7];
    ++v6;
    v7 += 2;
    if (v8) {
      goto LABEL_9;
    }
  }
  unint64_t v6 = 15;
LABEL_9:
  if (v6 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_26;
  }
  g_isTrivial = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(_DWORD *)v9 == 4 || *(_DWORD *)v9 == 1)
  {
    int v11 = *a2;
    if (*a2 == 1)
    {
      double v12 = *((double *)a2 + 4);
    }
    else if (v11 == 2)
    {
      if (my_rnd_mode) {
        int v20 = 4;
      }
      else {
        int v20 = 0;
      }
      double v12 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v20, &my_fpsf);
    }
    else
    {
      double v12 = 0.0;
      if (v11 == 4)
      {
        unint64_t v13 = *((void *)a2 + 8);
        unint64_t v14 = (uint64_t)rint(1.79769313e308);
        BOOL v15 = (uint64_t)rint(2.22507386e-308) < v13 && v14 > v13;
        double v12 = (double)v13;
        if (!v15) {
          double v12 = NAN;
        }
      }
    }
    double v21 = erfc(v12);
    *(double *)(v9 + 32) = v21;
    *(void *)(v9 + 64) = (uint64_t)rint(v21);
    goto LABEL_72;
  }
  int v17 = *a2;
  if (*a2 == 1)
  {
    if (my_rnd_mode) {
      int v22 = 4;
    }
    else {
      int v22 = 0;
    }
    unint64_t v18 = __binary64_to_bid128(v22, &my_fpsf, *((double *)a2 + 4));
    uint64_t v19 = v23;
  }
  else if (v17 == 2)
  {
    unint64_t v18 = *((void *)a2 + 6);
    uint64_t v19 = *((void *)a2 + 7);
  }
  else
  {
    if (v17 != 4)
    {
      unint64_t v18 = 0;
      if (my_rnd_mode) {
        unsigned int v24 = 4;
      }
      else {
        unsigned int v24 = 0;
      }
      uint64_t v19 = 0x3040000000000000;
      goto LABEL_57;
    }
    unint64_t v18 = *((void *)a2 + 8);
    uint64_t v19 = 0x3040000000000000;
  }
  if (my_rnd_mode) {
    unsigned int v24 = 4;
  }
  else {
    unsigned int v24 = 0;
  }
  if ((~v19 & 0x7C00000000000000) == 0)
  {
    if ((~v19 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((v19 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || (unint64_t v25 = v19 & 0xFC003FFFFFFFFFFFLL, (v19 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93) && v18 >= 0x38C15B0A00000000)
    {
      unint64_t v18 = 0;
      unint64_t v25 = v19 & 0xFC00000000000000;
    }
    goto LABEL_71;
  }
LABEL_57:
  if (!__bid128_isZero(v18, v19))
  {
    v61[0] = 0;
    v61[1] = 0;
    __n128 v60 = 0uLL;
    __n128 v59 = 0uLL;
    __n128 v58 = 0uLL;
    __n128 v57 = 0uLL;
    __n128 v56 = 0uLL;
    v55[0] = 0;
    v55[1] = 0;
    unint64_t v62 = __bid128_to_binary128(v18, v19, v24, &my_fpsf);
    uint64_t v63 = v26;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    __dpml_bid_unpack_x_or_y__((uint64_t *)&v62, 0, (uint64_t)&v64, &qword_1BDDBAE40, (uint64_t)v55, v67);
    if (bid_f128_cmp(v55, (uint64_t *)&c_1em40_1114, 1u))
    {
      unint64_t v27 = __bid128_sub(1uLL, 0x3040000000000000, v18, v19, v24, &my_fpsf);
    }
    else
    {
      if (v19 < 0)
      {
        unint64_t v62 = __bid128_to_binary128(v18, v19, v24, &my_fpsf);
        uint64_t v63 = v31;
        __dpml_bid_C_ux_erf__((uint64_t *)&v62, 0x8000FE56uLL, &v60, v67);
        unint64_t v29 = v60.n128_u64[1];
        unint64_t v28 = v60.n128_u64[0];
        int v30 = v24;
      }
      else
      {
        if (!bid_f128_cmp((uint64_t *)&v62, (uint64_t *)&c_105, 1u))
        {
          if (bid_f128_cmp((uint64_t *)&v62, (uint64_t *)&c_120, 4u))
          {
            unint64_t v32 = 1;
            uint64_t v33 = 0x160000000000000;
            unint64_t v34 = 1;
            uint64_t v35 = 0x160000000000000;
          }
          else
          {
            unint64_t v36 = __bid128_mul(v18, v19, v18, v19, v24, &my_fpsf);
            unint64_t v38 = v37 ^ 0x8000000000000000;
            unint64_t v39 = bid128_ext_fma(v67, (int *)&v64, (int *)&v54, (int *)&v53, v18, v19, v18, v19, v36, v37 ^ 0x8000000000000000, v24, &my_fpsf);
            unint64_t v41 = v40 ^ 0x8000000000000000;
            unint64_t v42 = __bid128_exp(v36, v38, v24, &my_fpsf);
            uint64_t v44 = bid128_ext_fma(v67, (int *)&v64, (int *)&v54, (int *)&v53, v42, v43, v39, v41, v42, v43, v24, &my_fpsf);
            uint64_t v46 = v45;
            bid_f128_div(&v59, (uint64_t *)&c_one_1115, (uint64_t *)&v62);
            bid_f128_mul(&v58, (uint64_t *)&v59, (uint64_t *)&v59);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&c12);
            bid_f128_add(&v57, (uint64_t *)&c11, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c10, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c9, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c8, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c7, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c6, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c5, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c4, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c3, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c2, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c1, (uint64_t *)&v57);
            bid_f128_mul(&v57, (uint64_t *)&v58, (uint64_t *)&v57);
            bid_f128_add(&v57, (uint64_t *)&c_one_1115, (uint64_t *)&v57);
            bid_f128_mul(&v56, (uint64_t *)&v59, (uint64_t *)&c_1_ov_sqrt_pi);
            bid_f128_mul(&v57, (uint64_t *)&v56, (uint64_t *)&v57);
            unint64_t v34 = __binary128_to_bid128(v57.n128_u64[0], v57.n128_u64[1], v24, &my_fpsf);
            uint64_t v35 = v47;
            unint64_t v32 = v44;
            uint64_t v33 = v46;
          }
          unint64_t v27 = __bid128_mul(v32, v33, v34, v35, v24, &my_fpsf);
          goto LABEL_70;
        }
        __n128 v54 = 0uLL;
        __n128 v53 = 0uLL;
        bid128_to_binary128_2part(&v62, (unint64_t *)v61, v18, v19);
        bid_f128_mul(&v54, (uint64_t *)&v62, (uint64_t *)&v62);
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        __dpml_bid_unpack_x_or_y__((uint64_t *)&v54, 0, (uint64_t)&v64, &__dpml_bid_bid_x_table, (uint64_t)&v54, v67);
        bid_f128_exp(&v54, (uint64_t *)&v54);
        bid_f128_mul(&v54, (uint64_t *)&c_2_ov_sqrt_pi, (uint64_t *)&v54);
        bid_f128_mul(&v54, (uint64_t *)&v54, v61);
        __dpml_bid_C_ux_erf__((uint64_t *)&v62, 0x8000FE56uLL, &v53, v67);
        bid_f128_sub(&v60, (uint64_t *)&v53, (uint64_t *)&v54);
        unint64_t v29 = v60.n128_u64[1];
        unint64_t v28 = v60.n128_u64[0];
        int v30 = v24;
      }
      unint64_t v27 = __binary128_to_bid128(v28, v29, v30, &my_fpsf);
    }
LABEL_70:
    unint64_t v18 = v27;
    goto LABEL_71;
  }
  unint64_t v25 = 0x3040000000000000;
  unint64_t v18 = 1;
LABEL_71:
  *(void *)(v9 + 48) = v18;
  *(void *)(v9 + 56) = v25;
  uint64_t v9 = *(void *)(a1 + 32);
LABEL_72:
  long long v48 = *v5;
  long long v49 = v5[1];
  long long v50 = v5[2];
  *(_OWORD *)(v9 + 120) = v5[3];
  *(_OWORD *)(v9 + 104) = v50;
  *(_OWORD *)(v9 + 88) = v49;
  *(_OWORD *)(v9 + 72) = v48;
  result = (__n128)v5[4];
  long long v51 = v5[5];
  long long v52 = v5[6];
  *(_OWORD *)(v9 + 184) = v5[7];
  *(_OWORD *)(v9 + 168) = v52;
  *(_OWORD *)(v9 + 152) = v51;
  *(__n128 *)(v9 + 136) = result;
  return result;
}

void functionFactorial(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionFactorial_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionFactorial_block_invoke(uint64_t a1, int *a2, __n128 result)
{
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v4 = 11;
LABEL_17:
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)(v12 + 204) = v4;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_16:
    int v4 = 9;
    goto LABEL_17;
  }
  unint64_t v6 = (long long *)(a2 + 18);
  unint64_t v7 = -1;
  uint64_t v8 = 21;
  while (v7 != 14)
  {
    int v9 = a2[v8];
    ++v7;
    v8 += 2;
    if (v9) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 15;
LABEL_9:
  if (v7 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_16;
  }
  int v10 = *a2;
  if (*a2 == 1)
  {
    if (my_rnd_mode) {
      int v13 = 4;
    }
    else {
      int v13 = 0;
    }
    unint64_t v11 = __binary64_to_bid128(v13, &my_fpsf, *((double *)a2 + 4));
  }
  else if (v10 == 2)
  {
    unint64_t v11 = *((void *)a2 + 6);
    uint64_t v14 = *((void *)a2 + 7);
  }
  else
  {
    if (v10 == 4) {
      unint64_t v11 = *((void *)a2 + 8);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v14 = 0x3040000000000000;
  }
  if (__bid128_quiet_greater(v11, v14, 0x67uLL, 0x3040000000000000, &my_fpsf))
  {
    my_fpsf |= 8u;
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = 3;
LABEL_40:
    *(_DWORD *)(v15 + 204) = v16;
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0x7C00000000000000;
    return result;
  }
  int v17 = *a2;
  if (*a2 == 1)
  {
    if (my_rnd_mode) {
      int v19 = 4;
    }
    else {
      int v19 = 0;
    }
    unint64_t v18 = __binary64_to_bid128(v19, &my_fpsf, *((double *)a2 + 4));
  }
  else if (v17 == 2)
  {
    unint64_t v18 = *((void *)a2 + 6);
    unint64_t v20 = *((void *)a2 + 7);
  }
  else
  {
    if (v17 == 4) {
      unint64_t v18 = *((void *)a2 + 8);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v20 = 0x3040000000000000;
  }
  if (__bid128_quiet_equal(v18, v20, 1uLL, 0xB040000000000000, &my_fpsf))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = 4;
    goto LABEL_40;
  }
  g_isTrivial = 0;
  uint64_t v21 = *(void *)(a1 + 32);
  if (*(_DWORD *)v21 == 4 || *(_DWORD *)v21 == 1)
  {
    int v22 = *a2;
    if (*a2 == 1)
    {
      double v23 = *((double *)a2 + 4);
    }
    else if (v22 == 2)
    {
      if (my_rnd_mode) {
        int v29 = 4;
      }
      else {
        int v29 = 0;
      }
      double v23 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v29, &my_fpsf);
    }
    else
    {
      double v23 = 0.0;
      if (v22 == 4)
      {
        unint64_t v24 = *((void *)a2 + 8);
        unint64_t v25 = (uint64_t)rint(1.79769313e308);
        BOOL v26 = (uint64_t)rint(2.22507386e-308) < v24 && v25 > v24;
        double v23 = (double)v24;
        if (!v26) {
          double v23 = NAN;
        }
      }
    }
    double v30 = tgamma(v23 + 1.0);
    *(double *)(v21 + 32) = v30;
    *(void *)(v21 + 64) = (uint64_t)rint(v30);
  }
  else
  {
    int v27 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v31 = 4;
      }
      else {
        int v31 = 0;
      }
      unint64_t v28 = __binary64_to_bid128(v31, &my_fpsf, *((double *)a2 + 4));
    }
    else if (v27 == 2)
    {
      unint64_t v28 = *((void *)a2 + 6);
      uint64_t v32 = *((void *)a2 + 7);
    }
    else
    {
      if (v27 == 4) {
        unint64_t v28 = *((void *)a2 + 8);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v32 = 0x3040000000000000;
    }
    if (my_rnd_mode) {
      unsigned int v33 = 4;
    }
    else {
      unsigned int v33 = 0;
    }
    unint64_t v34 = 0x3040000000000000;
    unint64_t v35 = __bid128_add(v28, v32, 1uLL, 0x3040000000000000, v33, &my_fpsf);
    unint64_t v37 = __bid128_tgamma(v35, v36, v33);
    uint64_t v39 = v38;
    int v40 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v42 = 4;
      }
      else {
        int v42 = 0;
      }
      unint64_t v41 = __binary64_to_bid128(v42, &my_fpsf, *((double *)a2 + 4));
      unint64_t v34 = v43;
    }
    else if (v40 == 2)
    {
      uint64_t v44 = a2 + 12;
      unint64_t v41 = *((void *)a2 + 6);
      unint64_t v34 = *((void *)v44 + 1);
    }
    else if (v40 == 4)
    {
      unint64_t v41 = *((void *)a2 + 8);
    }
    else
    {
      unint64_t v41 = 0;
    }
    int v55 = 0;
    unint64_t v45 = __bid128_round_integral_exact(v41, v34, 4, &v55);
    if (__bid128_quiet_equal(v41, v34, v45, v46, &v55))
    {
      if (my_rnd_mode) {
        int v47 = 4;
      }
      else {
        int v47 = 0;
      }
      unint64_t v37 = __bid128_round_integral_exact(v37, v39, v47, &my_fpsf);
      uint64_t v39 = v48;
    }
    uint64_t v49 = *(void *)(a1 + 32);
    *(void *)(v49 + 48) = v37;
    *(void *)(v49 + 56) = v39;
    uint64_t v21 = *(void *)(a1 + 32);
  }
  long long v50 = *v6;
  long long v51 = v6[1];
  long long v52 = v6[2];
  *(_OWORD *)(v21 + 120) = v6[3];
  *(_OWORD *)(v21 + 104) = v52;
  *(_OWORD *)(v21 + 88) = v51;
  *(_OWORD *)(v21 + 72) = v50;
  result = (__n128)v6[4];
  long long v53 = v6[5];
  long long v54 = v6[6];
  *(_OWORD *)(v21 + 184) = v6[7];
  *(_OWORD *)(v21 + 168) = v54;
  *(_OWORD *)(v21 + 152) = v53;
  *(__n128 *)(v21 + 136) = result;
  return result;
}

void functionRoot(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionRoot_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

void __functionRoot_block_invoke(uint64_t a1, int *a2, int *a3)
{
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6)
    {
      if (v4 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v7 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7) {
      int v9 = 11;
    }
    else {
      int v9 = 9;
    }
    *(_DWORD *)(v8 + 204) = v9;
    *(void *)(v8 + 48) = 0;
    *(void *)(v8 + 56) = 0x7C00000000000000;
    return;
  }
  unint64_t v10 = -1;
  uint64_t v11 = 21;
  while (v10 != 14)
  {
    int v12 = a3[v11];
    ++v10;
    v11 += 2;
    if (v12) {
      goto LABEL_17;
    }
  }
  unint64_t v10 = 15;
LABEL_17:
  int v7 = g_GeneratingConvertTerm;
  if (v10 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(_DWORD *)v13 == 4 || *(_DWORD *)v13 == 1)
  {
    int v15 = *a2;
    if (*a2 == 1)
    {
      double v16 = *((double *)a2 + 4);
    }
    else if (v15 == 2)
    {
      if (my_rnd_mode) {
        int v22 = 4;
      }
      else {
        int v22 = 0;
      }
      double v16 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v22, &my_fpsf);
    }
    else
    {
      double v16 = 0.0;
      if (v15 == 4)
      {
        unint64_t v17 = *((void *)a2 + 8);
        unint64_t v18 = (uint64_t)rint(1.79769313e308);
        if ((uint64_t)rint(2.22507386e-308) < v17 && v18 > v17) {
          double v16 = (double)v17;
        }
        else {
          double v16 = NAN;
        }
      }
    }
    int v23 = *a3;
    if (*a3 == 1)
    {
      double v24 = *((double *)a3 + 4);
    }
    else if (v23 == 2)
    {
      if (my_rnd_mode) {
        int v28 = 4;
      }
      else {
        int v28 = 0;
      }
      double v24 = __bid128_to_binary64(*((void *)a3 + 6), *((void *)a3 + 7), v28, &my_fpsf);
    }
    else
    {
      double v24 = 0.0;
      if (v23 == 4)
      {
        unint64_t v25 = *((void *)a3 + 8);
        unint64_t v26 = (uint64_t)rint(1.79769313e308);
        if ((uint64_t)rint(2.22507386e-308) < v25 && v26 > v25) {
          double v24 = (double)v25;
        }
        else {
          double v24 = NAN;
        }
      }
    }
    double v29 = modf(v24, &v57);
    if (v16 >= 0.0)
    {
      double v32 = pow(v16, 1.0 / v24);
    }
    else
    {
      double v30 = v29;
      double v31 = fmod(v24, 2.0);
      double v32 = NAN;
      if (v31 != 0.0 && v30 == 0.0) {
        double v32 = -pow(-v16, 1.0 / v24);
      }
    }
    *(double *)(v13 + 32) = v32;
    *(void *)(v13 + 64) = (uint64_t)rint(v32);
  }
  else
  {
    int v20 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v33 = 4;
      }
      else {
        int v33 = 0;
      }
      unint64_t v21 = __binary64_to_bid128(v33, &my_fpsf, *((double *)a2 + 4));
      unint64_t v35 = v34;
    }
    else if (v20 == 2)
    {
      unint64_t v21 = *((void *)a2 + 6);
      unint64_t v35 = *((void *)a2 + 7);
    }
    else
    {
      if (v20 == 4) {
        unint64_t v21 = *((void *)a2 + 8);
      }
      else {
        unint64_t v21 = 0;
      }
      unint64_t v35 = 0x3040000000000000;
    }
    int v36 = *a3;
    if (*a3 == 1)
    {
      if (my_rnd_mode) {
        int v38 = 4;
      }
      else {
        int v38 = 0;
      }
      unint64_t v37 = __binary64_to_bid128(v38, &my_fpsf, *((double *)a3 + 4));
      unint64_t v40 = v39;
    }
    else if (v36 == 2)
    {
      unint64_t v41 = a3 + 12;
      unint64_t v37 = *((void *)a3 + 6);
      unint64_t v40 = *((void *)v41 + 1);
    }
    else
    {
      if (v36 == 4) {
        unint64_t v37 = *((void *)a3 + 8);
      }
      else {
        unint64_t v37 = 0;
      }
      unint64_t v40 = 0x3040000000000000;
    }
    if (__bid128_quiet_less(v21, v35, 0, 0x3040000000000000, &my_fpsf))
    {
      int v58 = 0;
      unint64_t v42 = __bid128_round_integral_exact(v37, v40, 4, &v58);
      BOOL v44 = __bid128_quiet_equal(v37, v40, v42, v43, &v58);
      unint64_t v45 = __bid128_fmod(v37, v40, 2uLL, 0x3040000000000000uLL, &my_fpsf);
      BOOL v47 = __bid128_quiet_equal(v45, v46, 0, 0x3040000000000000uLL, &my_fpsf);
      if (!v44 || v47)
      {
        *(_DWORD *)(v13 + 204) = 4;
        *(void *)(v13 + 48) = 0;
        *(void *)(v13 + 56) = 0x7C00000000000000;
      }
      else
      {
        unint64_t v48 = v35 ^ 0x8000000000000000;
        if (my_rnd_mode) {
          unsigned int v49 = 4;
        }
        else {
          unsigned int v49 = 0;
        }
        unint64_t v50 = __bid128_div(1uLL, 0x3040000000000000uLL, v37, v40, v49, &my_fpsf);
        *(void *)(v13 + 48) = __bid128_pow(v21, v48, v50, v51, v49, &my_fpsf);
        *(void *)(v13 + 56) = v52 ^ 0x8000000000000000;
      }
    }
    else
    {
      if (my_rnd_mode) {
        unsigned int v53 = 4;
      }
      else {
        unsigned int v53 = 0;
      }
      unint64_t v54 = __bid128_div(1uLL, 0x3040000000000000uLL, v37, v40, v53, &my_fpsf);
      *(void *)(v13 + 48) = __bid128_pow(v21, v35, v54, v55, v53, &my_fpsf);
      *(void *)(v13 + 56) = v56;
    }
  }
}

void functionFMod(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionFMod_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

void __functionFMod_block_invoke(uint64_t a1, int *a2, int *a3)
{
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(a1 + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_17;
    }
  }
  unint64_t v11 = 15;
LABEL_17:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  uint64_t v14 = *(void *)(a1 + 32);
  if (*(_DWORD *)v14 == 1)
  {
    int v17 = *a2;
    if (*a2 == 1)
    {
      double v18 = *((double *)a2 + 4);
    }
    else if (v17 == 2)
    {
      unint64_t v28 = *((void *)a2 + 6);
      unint64_t v29 = *((void *)a2 + 7);
      if (my_rnd_mode) {
        int v30 = 4;
      }
      else {
        int v30 = 0;
      }
      double v18 = __bid128_to_binary64(v28, v29, v30, &my_fpsf);
    }
    else
    {
      double v18 = 0.0;
      if (v17 == 4)
      {
        unint64_t v19 = *((void *)a2 + 8);
        unint64_t v20 = (uint64_t)rint(1.79769313e308);
        if ((uint64_t)rint(2.22507386e-308) < v19 && v20 > v19) {
          double v18 = (double)v19;
        }
        else {
          double v18 = NAN;
        }
      }
    }
    int v31 = *a3;
    if (*a3 == 1)
    {
      double v32 = *((double *)a3 + 4);
    }
    else if (v31 == 2)
    {
      if (my_rnd_mode) {
        int v42 = 4;
      }
      else {
        int v42 = 0;
      }
      double v32 = __bid128_to_binary64(*((void *)a3 + 6), *((void *)a3 + 7), v42, &my_fpsf);
    }
    else
    {
      double v32 = 0.0;
      if (v31 == 4)
      {
        unint64_t v33 = *((void *)a3 + 8);
        unint64_t v34 = (uint64_t)rint(1.79769313e308);
        BOOL v35 = (uint64_t)rint(2.22507386e-308) < v33 && v34 > v33;
        double v32 = NAN;
        if (v35) {
          double v32 = (double)v33;
        }
      }
    }
    *(long double *)(v14 + 32) = fmod(v18, v32);
  }
  else if (*(_DWORD *)v14 == 4)
  {
    int v15 = *a2;
    if (*a2 == 1)
    {
      unint64_t v16 = (uint64_t)rint(*((double *)a2 + 4));
    }
    else if (v15 == 2)
    {
      unint64_t v24 = *((void *)a2 + 6);
      unint64_t v25 = *((void *)a2 + 7);
      int v81 = 0;
      unint64_t v16 = __bid128_to_uint64_int(v24, v25, &v81);
    }
    else if (v15 == 4)
    {
      unint64_t v16 = *((void *)a2 + 8);
    }
    else
    {
      unint64_t v16 = 0;
    }
    int v26 = *a3;
    if (*a3 == 1)
    {
      unint64_t v27 = (uint64_t)rint(*((double *)a3 + 4));
    }
    else if (v26 == 2)
    {
      unint64_t v40 = *((void *)a3 + 6);
      unint64_t v41 = *((void *)a3 + 7);
      int v82 = 0;
      unint64_t v27 = __bid128_to_uint64_int(v40, v41, &v82);
    }
    else if (v26 == 4)
    {
      unint64_t v27 = *((void *)a3 + 8);
    }
    else
    {
      unint64_t v27 = 0;
    }
    *(void *)(v14 + 64) = v16 % v27;
  }
  else
  {
    int v22 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v36 = 4;
      }
      else {
        int v36 = 0;
      }
      unint64_t v23 = __binary64_to_bid128(v36, &my_fpsf, *((double *)a2 + 4));
    }
    else if (v22 == 2)
    {
      unint64_t v23 = *((void *)a2 + 6);
      unint64_t v37 = *((void *)a2 + 7);
    }
    else
    {
      if (v22 == 4) {
        unint64_t v23 = *((void *)a2 + 8);
      }
      else {
        unint64_t v23 = 0;
      }
      unint64_t v37 = 0x3040000000000000;
    }
    if (__bid128_quiet_less(v23, v37, 0, 0x3040000000000000, &my_fpsf)
      || ((int v38 = *a3, *a3 == 1)
        ? (!my_rnd_mode ? (v43 = 0) : (v43 = 4), unint64_t v39 = __binary64_to_bid128(v43, &my_fpsf, *((double *)a3 + 4)))
        : v38 == 2
        ? (unint64_t v39 = *((void *)a3 + 6), v44 = *((void *)a3 + 7))
        : (v38 != 4 ? (unint64_t v39 = 0) : (unint64_t v39 = *((void *)a3 + 8)), v44 = 0x3040000000000000),
          __bid128_quiet_less(v39, v44, 0, 0x3040000000000000, &my_fpsf)))
    {
      int v45 = *a2;
      if (*a2 == 1)
      {
        if (my_rnd_mode) {
          int v46 = 4;
        }
        else {
          int v46 = 0;
        }
        unint64_t v80 = __binary64_to_bid128(v46, &my_fpsf, *((double *)a2 + 4));
        uint64_t v48 = v47;
      }
      else if (v45 == 2)
      {
        uint64_t v48 = *((void *)a2 + 7);
        unint64_t v80 = *((void *)a2 + 6);
      }
      else
      {
        if (v45 == 4) {
          unint64_t v80 = *((void *)a2 + 8);
        }
        else {
          unint64_t v80 = 0;
        }
        uint64_t v48 = 0x3040000000000000;
      }
      int v49 = *a3;
      if (*a3 == 1)
      {
        if (my_rnd_mode) {
          int v51 = 4;
        }
        else {
          int v51 = 0;
        }
        unint64_t v50 = __binary64_to_bid128(v51, &my_fpsf, *((double *)a3 + 4));
        uint64_t v53 = v52;
      }
      else if (v49 == 2)
      {
        unint64_t v50 = *((void *)a3 + 6);
        uint64_t v53 = *((void *)a3 + 7);
      }
      else
      {
        if (v49 == 4) {
          unint64_t v50 = *((void *)a3 + 8);
        }
        else {
          unint64_t v50 = 0;
        }
        uint64_t v53 = 0x3040000000000000;
      }
      int v54 = *a2;
      if (*a2 == 1)
      {
        if (my_rnd_mode) {
          int v56 = 4;
        }
        else {
          int v56 = 0;
        }
        unint64_t v55 = __binary64_to_bid128(v56, &my_fpsf, *((double *)a2 + 4));
        unint64_t v58 = v57;
      }
      else if (v54 == 2)
      {
        __n128 v59 = a2 + 12;
        unint64_t v55 = *((void *)a2 + 6);
        unint64_t v58 = *((void *)v59 + 1);
      }
      else
      {
        if (v54 == 4) {
          unint64_t v55 = *((void *)a2 + 8);
        }
        else {
          unint64_t v55 = 0;
        }
        unint64_t v58 = 0x3040000000000000;
      }
      int v60 = *a3;
      if (*a3 == 1)
      {
        if (my_rnd_mode) {
          int v62 = 4;
        }
        else {
          int v62 = 0;
        }
        unint64_t v61 = __binary64_to_bid128(v62, &my_fpsf, *((double *)a3 + 4));
        unint64_t v64 = v63;
      }
      else if (v60 == 2)
      {
        unint64_t v61 = *((void *)a3 + 6);
        unint64_t v64 = *((void *)a3 + 7);
      }
      else
      {
        if (v60 == 4) {
          unint64_t v61 = *((void *)a3 + 8);
        }
        else {
          unint64_t v61 = 0;
        }
        unint64_t v64 = 0x3040000000000000;
      }
      if (my_rnd_mode) {
        unsigned int v65 = 4;
      }
      else {
        unsigned int v65 = 0;
      }
      unint64_t v66 = __bid128_div(v55, v58, v61, v64, v65, &my_fpsf);
      unint64_t v68 = __bid128_round_integral_negative(v66, v67, &my_fpsf);
      unint64_t v71 = __bid128_mul(v50, v53, v68, v69, v65, &my_fpsf);
      if (my_rnd_mode) {
        int v72 = 4;
      }
      else {
        int v72 = 0;
      }
      unint64_t v73 = __bid128_sub(v80, v48, v71, v70, v72, &my_fpsf);
    }
    else
    {
      unint64_t v75 = treeDecimalValue((double *)a2);
      unint64_t v77 = v76;
      unint64_t v78 = treeDecimalValue((double *)a3);
      unint64_t v73 = __bid128_fmod(v75, v77, v78, v79, &my_fpsf);
    }
    *(void *)(v14 + 48) = v73;
    *(void *)(v14 + 56) = v74;
  }
}

void functionHypot(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionHypot_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

void __functionHypot_block_invoke(uint64_t a1, int *a2, int *a3)
{
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6)
    {
      if (v4 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v7 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7) {
      int v9 = 11;
    }
    else {
      int v9 = 9;
    }
    *(_DWORD *)(v8 + 204) = v9;
    *(void *)(v8 + 48) = 0;
    *(void *)(v8 + 56) = 0x7C00000000000000;
    return;
  }
  unint64_t v10 = -1;
  uint64_t v11 = 21;
  while (v10 != 14)
  {
    int v12 = a3[v11];
    ++v10;
    v11 += 2;
    if (v12) {
      goto LABEL_17;
    }
  }
  unint64_t v10 = 15;
LABEL_17:
  int v7 = g_GeneratingConvertTerm;
  if (v10 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(_DWORD *)v13 == 4 || *(_DWORD *)v13 == 1)
  {
    int v15 = *a2;
    if (*a2 == 1)
    {
      double v16 = *((double *)a2 + 4);
    }
    else if (v15 == 2)
    {
      if (my_rnd_mode) {
        int v22 = 4;
      }
      else {
        int v22 = 0;
      }
      double v16 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v22, &my_fpsf);
    }
    else
    {
      double v16 = 0.0;
      if (v15 == 4)
      {
        unint64_t v17 = *((void *)a2 + 8);
        unint64_t v18 = (uint64_t)rint(1.79769313e308);
        if ((uint64_t)rint(2.22507386e-308) < v17 && v18 > v17) {
          double v16 = (double)v17;
        }
        else {
          double v16 = NAN;
        }
      }
    }
    int v23 = *a3;
    if (*a3 == 1)
    {
      double v24 = *((double *)a3 + 4);
    }
    else if (v23 == 2)
    {
      if (my_rnd_mode) {
        int v28 = 4;
      }
      else {
        int v28 = 0;
      }
      double v24 = __bid128_to_binary64(*((void *)a3 + 6), *((void *)a3 + 7), v28, &my_fpsf);
    }
    else
    {
      double v24 = 0.0;
      if (v23 == 4)
      {
        unint64_t v25 = *((void *)a3 + 8);
        unint64_t v26 = (uint64_t)rint(1.79769313e308);
        BOOL v27 = (uint64_t)rint(2.22507386e-308) < v25 && v26 > v25;
        double v24 = NAN;
        if (v27) {
          double v24 = (double)v25;
        }
      }
    }
    double v29 = hypot(v16, v24);
    *(double *)(v13 + 32) = v29;
    *(void *)(v13 + 64) = (uint64_t)rint(v29);
  }
  else
  {
    int v20 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v30 = 4;
      }
      else {
        int v30 = 0;
      }
      unint64_t v21 = __binary64_to_bid128(v30, &my_fpsf, *((double *)a2 + 4));
      unint64_t v32 = v31;
    }
    else if (v20 == 2)
    {
      unint64_t v21 = *((void *)a2 + 6);
      unint64_t v32 = *((void *)a2 + 7);
    }
    else
    {
      if (v20 == 4) {
        unint64_t v21 = *((void *)a2 + 8);
      }
      else {
        unint64_t v21 = 0;
      }
      unint64_t v32 = 0x3040000000000000;
    }
    int v33 = *a3;
    if (*a3 == 1)
    {
      if (my_rnd_mode) {
        int v35 = 4;
      }
      else {
        int v35 = 0;
      }
      unint64_t v34 = __binary64_to_bid128(v35, &my_fpsf, *((double *)a3 + 4));
      unint64_t v37 = v36;
    }
    else if (v33 == 2)
    {
      unint64_t v34 = *((void *)a3 + 6);
      unint64_t v37 = *((void *)a3 + 7);
    }
    else
    {
      if (v33 == 4) {
        unint64_t v34 = *((void *)a3 + 8);
      }
      else {
        unint64_t v34 = 0;
      }
      unint64_t v37 = 0x3040000000000000;
    }
    if (my_rnd_mode) {
      int v38 = 4;
    }
    else {
      int v38 = 0;
    }
    *(void *)(v13 + 48) = __bid128_hypot(v21, v32, v34, v37, v38);
    *(void *)(v13 + 56) = v39;
  }
}

void functionRem(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionRem_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

void __functionRem_block_invoke(uint64_t a1, int *a2, int *a3)
{
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v4 = -1;
  uint64_t v5 = 21;
  while (v4 != 14)
  {
    int v6 = a2[v5];
    ++v4;
    v5 += 2;
    if (v6)
    {
      if (v4 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v7 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7) {
      int v9 = 11;
    }
    else {
      int v9 = 9;
    }
    *(_DWORD *)(v8 + 204) = v9;
    *(void *)(v8 + 48) = 0;
    *(void *)(v8 + 56) = 0x7C00000000000000;
    return;
  }
  unint64_t v10 = -1;
  uint64_t v11 = 21;
  while (v10 != 14)
  {
    int v12 = a3[v11];
    ++v10;
    v11 += 2;
    if (v12) {
      goto LABEL_17;
    }
  }
  unint64_t v10 = 15;
LABEL_17:
  int v7 = g_GeneratingConvertTerm;
  if (v10 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(_DWORD *)v13 == 4 || *(_DWORD *)v13 == 1)
  {
    int v15 = *a2;
    if (*a2 == 1)
    {
      double v16 = *((double *)a2 + 4);
    }
    else if (v15 == 2)
    {
      if (my_rnd_mode) {
        int v22 = 4;
      }
      else {
        int v22 = 0;
      }
      double v16 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v22, &my_fpsf);
    }
    else
    {
      double v16 = 0.0;
      if (v15 == 4)
      {
        unint64_t v17 = *((void *)a2 + 8);
        unint64_t v18 = (uint64_t)rint(1.79769313e308);
        if ((uint64_t)rint(2.22507386e-308) < v17 && v18 > v17) {
          double v16 = (double)v17;
        }
        else {
          double v16 = NAN;
        }
      }
    }
    int v23 = *a3;
    if (*a3 == 1)
    {
      double v24 = *((double *)a3 + 4);
    }
    else if (v23 == 2)
    {
      if (my_rnd_mode) {
        int v28 = 4;
      }
      else {
        int v28 = 0;
      }
      double v24 = __bid128_to_binary64(*((void *)a3 + 6), *((void *)a3 + 7), v28, &my_fpsf);
    }
    else
    {
      double v24 = 0.0;
      if (v23 == 4)
      {
        unint64_t v25 = *((void *)a3 + 8);
        unint64_t v26 = (uint64_t)rint(1.79769313e308);
        BOOL v27 = (uint64_t)rint(2.22507386e-308) < v25 && v26 > v25;
        double v24 = NAN;
        if (v27) {
          double v24 = (double)v25;
        }
      }
    }
    double v29 = remainder(v16, v24);
    *(double *)(v13 + 32) = v29;
    *(void *)(v13 + 64) = (uint64_t)rint(v29);
  }
  else
  {
    int v20 = *a2;
    if (*a2 == 1)
    {
      if (my_rnd_mode) {
        int v30 = 4;
      }
      else {
        int v30 = 0;
      }
      unint64_t v21 = __binary64_to_bid128(v30, &my_fpsf, *((double *)a2 + 4));
      unint64_t v32 = v31;
    }
    else if (v20 == 2)
    {
      unint64_t v21 = *((void *)a2 + 6);
      unint64_t v32 = *((void *)a2 + 7);
    }
    else
    {
      if (v20 == 4) {
        unint64_t v21 = *((void *)a2 + 8);
      }
      else {
        unint64_t v21 = 0;
      }
      unint64_t v32 = 0x3040000000000000;
    }
    int v33 = *a3;
    if (*a3 == 1)
    {
      if (my_rnd_mode) {
        int v35 = 4;
      }
      else {
        int v35 = 0;
      }
      unint64_t v34 = __binary64_to_bid128(v35, &my_fpsf, *((double *)a3 + 4));
      unint64_t v37 = v36;
    }
    else if (v33 == 2)
    {
      unint64_t v34 = *((void *)a3 + 6);
      unint64_t v37 = *((void *)a3 + 7);
    }
    else
    {
      if (v33 == 4) {
        unint64_t v34 = *((void *)a3 + 8);
      }
      else {
        unint64_t v34 = 0;
      }
      unint64_t v37 = 0x3040000000000000;
    }
    *(void *)(v13 + 48) = __bid128_rem(v21, v32, v34, v37);
    *(void *)(v13 + 56) = v38;
  }
}

void functionMin(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionMin_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

void __functionMin_block_invoke(uint64_t a1, int *a2, int *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (g_GeneratingConvertTerm == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)(v4 + 204) = 11;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0x7C00000000000000;
  }
  else
  {
    g_isTrivial = 0;
    memset(v64, 0, sizeof(v64));
    int v62 = 0;
    int v7 = *a3;
    if (*a3 == 1)
    {
      if (my_rnd_mode) {
        int v9 = 4;
      }
      else {
        int v9 = 0;
      }
      unint64_t v8 = __binary64_to_bid128(v9, &my_fpsf, *((double *)a3 + 4));
    }
    else if (v7 == 2)
    {
      unint64_t v8 = *((void *)a3 + 6);
      unint64_t v10 = *((void *)a3 + 7);
    }
    else
    {
      if (v7 == 4) {
        unint64_t v8 = *((void *)a3 + 8);
      }
      else {
        unint64_t v8 = 0;
      }
      unint64_t v10 = 0x3040000000000000;
    }
    uint64_t v11 = (uint64_t)(a3 + 18);
    int v12 = (long long *)(a2 + 18);
    unint64_t v13 = UnitCountConvert(v8, v10, v11, (uint64_t)(a2 + 18), v64, &v62);
    unint64_t v15 = v13;
    unint64_t v16 = v14;
    if ((~v14 & 0x7C00000000000000) != 0)
    {
      int v18 = *a2;
      if (*a2 == 1)
      {
        if (my_rnd_mode) {
          int v20 = 4;
        }
        else {
          int v20 = 0;
        }
        unint64_t v19 = __binary64_to_bid128(v20, &my_fpsf, *((double *)a2 + 4));
      }
      else if (v18 == 2)
      {
        unint64_t v19 = *((void *)a2 + 6);
        unint64_t v21 = *((void *)a2 + 7);
      }
      else
      {
        if (v18 == 4) {
          unint64_t v19 = *((void *)a2 + 8);
        }
        else {
          unint64_t v19 = 0;
        }
        unint64_t v21 = 0x3040000000000000;
      }
      if (__bid128_quiet_less(v19, v21, v15, v16, &my_fpsf))
      {
        if (!a2[19])
        {
          int v22 = a2 + 21;
          unint64_t v23 = -1;
          do
          {
            if (v23 == 14)
            {
              int v12 = v64;
              goto LABEL_43;
            }
            int v24 = *v22;
            v22 += 2;
            ++v23;
          }
          while (!v24);
          if (v23 >= 0xF) {
            int v12 = v64;
          }
        }
LABEL_43:
        uint64_t v29 = *(void *)(a1 + 32);
        long long v30 = *v12;
        long long v31 = v12[1];
        long long v32 = v12[2];
        *(_OWORD *)(v29 + 120) = v12[3];
        *(_OWORD *)(v29 + 104) = v32;
        *(_OWORD *)(v29 + 88) = v31;
        *(_OWORD *)(v29 + 72) = v30;
        long long v33 = v12[4];
        long long v34 = v12[5];
        long long v35 = v12[6];
        *(_OWORD *)(v29 + 184) = v12[7];
        *(_OWORD *)(v29 + 168) = v35;
        *(_OWORD *)(v29 + 152) = v34;
        *(_OWORD *)(v29 + 136) = v33;
        unint64_t v36 = *(double **)(a1 + 32);
        int v37 = *(_DWORD *)v36;
        if (*(_DWORD *)v36 == 1)
        {
          int v40 = *a2;
          if (*a2 == 1)
          {
            double v41 = *((double *)a2 + 4);
          }
          else if (v40 == 2)
          {
            if (my_rnd_mode) {
              int v59 = 4;
            }
            else {
              int v59 = 0;
            }
            double v41 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v59, &my_fpsf);
          }
          else
          {
            double v41 = 0.0;
            if (v40 == 4)
            {
              unint64_t v42 = *((void *)a2 + 8);
              unint64_t v43 = (uint64_t)rint(1.79769313e308);
              BOOL v44 = (uint64_t)rint(2.22507386e-308) < v42 && v43 > v42;
              double v41 = (double)v42;
              if (!v44) {
                double v41 = NAN;
              }
            }
          }
          v36[4] = v41;
        }
        else if (v37 == 2)
        {
          int v45 = *a2;
          if (*a2 == 1)
          {
            if (my_rnd_mode) {
              int v60 = 4;
            }
            else {
              int v60 = 0;
            }
            unint64_t v46 = __binary64_to_bid128(v60, &my_fpsf, *((double *)a2 + 4));
          }
          else if (v45 == 2)
          {
            unint64_t v46 = *((void *)a2 + 6);
            uint64_t v61 = *((void *)a2 + 7);
          }
          else
          {
            if (v45 == 4) {
              unint64_t v46 = *((void *)a2 + 8);
            }
            else {
              unint64_t v46 = 0;
            }
            uint64_t v61 = 0x3040000000000000;
          }
          *((void *)v36 + 6) = v46;
          *((void *)v36 + 7) = v61;
        }
        else if (v37 == 4)
        {
          int v38 = *a2;
          if (*a2 == 1)
          {
            unint64_t v39 = (uint64_t)rint(*((double *)a2 + 4));
          }
          else if (v38 == 2)
          {
            unint64_t v57 = *((void *)a2 + 6);
            unint64_t v58 = *((void *)a2 + 7);
            int v63 = 0;
            unint64_t v39 = __bid128_to_uint64_int(v57, v58, &v63);
          }
          else if (v38 == 4)
          {
            unint64_t v39 = *((void *)a2 + 8);
          }
          else
          {
            unint64_t v39 = 0;
          }
          *((void *)v36 + 8) = v39;
        }
      }
      else
      {
        unint64_t v25 = v64;
        if (!DWORD1(v64[0]))
        {
          unint64_t v26 = -1;
          uint64_t v27 = 12;
          do
          {
            if (v26 == 14)
            {
              unint64_t v25 = (long long *)(a2 + 18);
              goto LABEL_64;
            }
            int v28 = *(_DWORD *)((char *)v64 + v27);
            ++v26;
            v27 += 8;
          }
          while (!v28);
          unint64_t v25 = v64;
          if (v26 >= 0xF) {
            unint64_t v25 = (long long *)(a2 + 18);
          }
        }
LABEL_64:
        uint64_t v47 = *(void *)(a1 + 32);
        long long v48 = *v25;
        long long v49 = v25[1];
        long long v50 = v25[2];
        *(_OWORD *)(v47 + 120) = v25[3];
        *(_OWORD *)(v47 + 104) = v50;
        *(_OWORD *)(v47 + 88) = v49;
        *(_OWORD *)(v47 + 72) = v48;
        long long v51 = v25[4];
        long long v52 = v25[5];
        long long v53 = v25[6];
        *(_OWORD *)(v47 + 184) = v25[7];
        *(_OWORD *)(v47 + 168) = v53;
        *(_OWORD *)(v47 + 152) = v52;
        *(_OWORD *)(v47 + 136) = v51;
        int v54 = *(double **)(a1 + 32);
        int v55 = *(_DWORD *)v54;
        if (*(_DWORD *)v54 == 1)
        {
          if (my_rnd_mode) {
            int v56 = 4;
          }
          else {
            int v56 = 0;
          }
          v54[4] = __bid128_to_binary64(v15, v16, v56, &my_fpsf);
        }
        else if (v55 == 2)
        {
          *((void *)v54 + 6) = v15;
          *((void *)v54 + 7) = v16;
        }
        else if (v55 == 4)
        {
          int v63 = 0;
          *((void *)v54 + 8) = __bid128_to_uint64_int(v15, v16, &v63);
        }
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)(v17 + 204) = v62;
      *(void *)(v17 + 48) = v13;
      *(void *)(v17 + 56) = v14;
    }
  }
}

void functionMax(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionMax_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

void __functionMax_block_invoke(uint64_t a1, int *a2, int *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (g_GeneratingConvertTerm == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)(v4 + 204) = 11;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0x7C00000000000000;
  }
  else
  {
    g_isTrivial = 0;
    memset(v64, 0, sizeof(v64));
    int v62 = 0;
    int v7 = *a3;
    if (*a3 == 1)
    {
      if (my_rnd_mode) {
        int v9 = 4;
      }
      else {
        int v9 = 0;
      }
      unint64_t v8 = __binary64_to_bid128(v9, &my_fpsf, *((double *)a3 + 4));
    }
    else if (v7 == 2)
    {
      unint64_t v8 = *((void *)a3 + 6);
      unint64_t v10 = *((void *)a3 + 7);
    }
    else
    {
      if (v7 == 4) {
        unint64_t v8 = *((void *)a3 + 8);
      }
      else {
        unint64_t v8 = 0;
      }
      unint64_t v10 = 0x3040000000000000;
    }
    uint64_t v11 = (uint64_t)(a3 + 18);
    int v12 = (long long *)(a2 + 18);
    unint64_t v13 = UnitCountConvert(v8, v10, v11, (uint64_t)(a2 + 18), v64, &v62);
    unint64_t v15 = v13;
    unint64_t v16 = v14;
    if ((~v14 & 0x7C00000000000000) != 0)
    {
      int v18 = *a2;
      if (*a2 == 1)
      {
        if (my_rnd_mode) {
          int v20 = 4;
        }
        else {
          int v20 = 0;
        }
        unint64_t v19 = __binary64_to_bid128(v20, &my_fpsf, *((double *)a2 + 4));
      }
      else if (v18 == 2)
      {
        unint64_t v19 = *((void *)a2 + 6);
        uint64_t v21 = *((void *)a2 + 7);
      }
      else
      {
        if (v18 == 4) {
          unint64_t v19 = *((void *)a2 + 8);
        }
        else {
          unint64_t v19 = 0;
        }
        uint64_t v21 = 0x3040000000000000;
      }
      if (__bid128_quiet_greater(v19, v21, v15, v16, &my_fpsf))
      {
        if (!a2[19])
        {
          int v22 = a2 + 21;
          unint64_t v23 = -1;
          do
          {
            if (v23 == 14)
            {
              int v12 = v64;
              goto LABEL_43;
            }
            int v24 = *v22;
            v22 += 2;
            ++v23;
          }
          while (!v24);
          if (v23 >= 0xF) {
            int v12 = v64;
          }
        }
LABEL_43:
        uint64_t v29 = *(void *)(a1 + 32);
        long long v30 = *v12;
        long long v31 = v12[1];
        long long v32 = v12[2];
        *(_OWORD *)(v29 + 120) = v12[3];
        *(_OWORD *)(v29 + 104) = v32;
        *(_OWORD *)(v29 + 88) = v31;
        *(_OWORD *)(v29 + 72) = v30;
        long long v33 = v12[4];
        long long v34 = v12[5];
        long long v35 = v12[6];
        *(_OWORD *)(v29 + 184) = v12[7];
        *(_OWORD *)(v29 + 168) = v35;
        *(_OWORD *)(v29 + 152) = v34;
        *(_OWORD *)(v29 + 136) = v33;
        unint64_t v36 = *(double **)(a1 + 32);
        int v37 = *(_DWORD *)v36;
        if (*(_DWORD *)v36 == 1)
        {
          int v40 = *a2;
          if (*a2 == 1)
          {
            double v41 = *((double *)a2 + 4);
          }
          else if (v40 == 2)
          {
            if (my_rnd_mode) {
              int v59 = 4;
            }
            else {
              int v59 = 0;
            }
            double v41 = __bid128_to_binary64(*((void *)a2 + 6), *((void *)a2 + 7), v59, &my_fpsf);
          }
          else
          {
            double v41 = 0.0;
            if (v40 == 4)
            {
              unint64_t v42 = *((void *)a2 + 8);
              unint64_t v43 = (uint64_t)rint(1.79769313e308);
              BOOL v44 = (uint64_t)rint(2.22507386e-308) < v42 && v43 > v42;
              double v41 = (double)v42;
              if (!v44) {
                double v41 = NAN;
              }
            }
          }
          v36[4] = v41;
        }
        else if (v37 == 2)
        {
          int v45 = *a2;
          if (*a2 == 1)
          {
            if (my_rnd_mode) {
              int v60 = 4;
            }
            else {
              int v60 = 0;
            }
            unint64_t v46 = __binary64_to_bid128(v60, &my_fpsf, *((double *)a2 + 4));
          }
          else if (v45 == 2)
          {
            unint64_t v46 = *((void *)a2 + 6);
            uint64_t v61 = *((void *)a2 + 7);
          }
          else
          {
            if (v45 == 4) {
              unint64_t v46 = *((void *)a2 + 8);
            }
            else {
              unint64_t v46 = 0;
            }
            uint64_t v61 = 0x3040000000000000;
          }
          *((void *)v36 + 6) = v46;
          *((void *)v36 + 7) = v61;
        }
        else if (v37 == 4)
        {
          int v38 = *a2;
          if (*a2 == 1)
          {
            unint64_t v39 = (uint64_t)rint(*((double *)a2 + 4));
          }
          else if (v38 == 2)
          {
            unint64_t v57 = *((void *)a2 + 6);
            unint64_t v58 = *((void *)a2 + 7);
            int v63 = 0;
            unint64_t v39 = __bid128_to_uint64_int(v57, v58, &v63);
          }
          else if (v38 == 4)
          {
            unint64_t v39 = *((void *)a2 + 8);
          }
          else
          {
            unint64_t v39 = 0;
          }
          *((void *)v36 + 8) = v39;
        }
      }
      else
      {
        unint64_t v25 = v64;
        if (!DWORD1(v64[0]))
        {
          unint64_t v26 = -1;
          uint64_t v27 = 12;
          do
          {
            if (v26 == 14)
            {
              unint64_t v25 = (long long *)(a2 + 18);
              goto LABEL_64;
            }
            int v28 = *(_DWORD *)((char *)v64 + v27);
            ++v26;
            v27 += 8;
          }
          while (!v28);
          unint64_t v25 = v64;
          if (v26 >= 0xF) {
            unint64_t v25 = (long long *)(a2 + 18);
          }
        }
LABEL_64:
        uint64_t v47 = *(void *)(a1 + 32);
        long long v48 = *v25;
        long long v49 = v25[1];
        long long v50 = v25[2];
        *(_OWORD *)(v47 + 120) = v25[3];
        *(_OWORD *)(v47 + 104) = v50;
        *(_OWORD *)(v47 + 88) = v49;
        *(_OWORD *)(v47 + 72) = v48;
        long long v51 = v25[4];
        long long v52 = v25[5];
        long long v53 = v25[6];
        *(_OWORD *)(v47 + 184) = v25[7];
        *(_OWORD *)(v47 + 168) = v53;
        *(_OWORD *)(v47 + 152) = v52;
        *(_OWORD *)(v47 + 136) = v51;
        int v54 = *(double **)(a1 + 32);
        int v55 = *(_DWORD *)v54;
        if (*(_DWORD *)v54 == 1)
        {
          if (my_rnd_mode) {
            int v56 = 4;
          }
          else {
            int v56 = 0;
          }
          v54[4] = __bid128_to_binary64(v15, v16, v56, &my_fpsf);
        }
        else if (v55 == 2)
        {
          *((void *)v54 + 6) = v15;
          *((void *)v54 + 7) = v16;
        }
        else if (v55 == 4)
        {
          int v63 = 0;
          *((void *)v54 + 8) = __bid128_to_uint64_int(v15, v16, &v63);
        }
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)(v17 + 204) = v62;
      *(void *)(v17 + 48) = v13;
      *(void *)(v17 + 56) = v14;
    }
  }
}

void functionAND(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionAND_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionAND_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(result + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return result;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 15;
LABEL_18:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v14 = *a2;
  if (*a2 == 1)
  {
    unint64_t v15 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v14 == 2)
  {
    unint64_t v16 = *((void *)a2 + 6);
    unint64_t v17 = *((void *)a2 + 7);
    int v22 = 0;
    unint64_t v15 = __bid128_to_uint64_int(v16, v17, &v22);
  }
  else if (v14 == 4)
  {
    unint64_t v15 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v15 = 0;
  }
  int v18 = *a3;
  if (*a3 == 1)
  {
    result = (uint64_t)rint(*((double *)a3 + 4));
  }
  else if (v18 == 2)
  {
    unint64_t v19 = *((void *)a3 + 6);
    unint64_t v20 = *((void *)a3 + 7);
    int v23 = 0;
    result = __bid128_to_uint64_int(v19, v20, &v23);
  }
  else if (v18 == 4)
  {
    result = *((void *)a3 + 8);
  }
  else
  {
    result = 0;
  }
  uint64_t v21 = *(void *)(v3 + 32);
  *(_DWORD *)uint64_t v21 = 4;
  *(void *)(v21 + 64) = result & v15;
  return result;
}

void functionOR(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionOR_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionOR_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(result + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return result;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 15;
LABEL_18:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v14 = *a2;
  if (*a2 == 1)
  {
    unint64_t v15 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v14 == 2)
  {
    unint64_t v16 = *((void *)a2 + 6);
    unint64_t v17 = *((void *)a2 + 7);
    int v22 = 0;
    unint64_t v15 = __bid128_to_uint64_int(v16, v17, &v22);
  }
  else if (v14 == 4)
  {
    unint64_t v15 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v15 = 0;
  }
  int v18 = *a3;
  if (*a3 == 1)
  {
    result = (uint64_t)rint(*((double *)a3 + 4));
  }
  else if (v18 == 2)
  {
    unint64_t v19 = *((void *)a3 + 6);
    unint64_t v20 = *((void *)a3 + 7);
    int v23 = 0;
    result = __bid128_to_uint64_int(v19, v20, &v23);
  }
  else if (v18 == 4)
  {
    result = *((void *)a3 + 8);
  }
  else
  {
    result = 0;
  }
  uint64_t v21 = *(void *)(v3 + 32);
  *(_DWORD *)uint64_t v21 = 4;
  *(void *)(v21 + 64) = result | v15;
  return result;
}

void functionNOR(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionNOR_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionNOR_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(result + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return result;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 15;
LABEL_18:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v14 = *a2;
  if (*a2 == 1)
  {
    unint64_t v15 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v14 == 2)
  {
    unint64_t v16 = *((void *)a2 + 6);
    unint64_t v17 = *((void *)a2 + 7);
    int v22 = 0;
    unint64_t v15 = __bid128_to_uint64_int(v16, v17, &v22);
  }
  else if (v14 == 4)
  {
    unint64_t v15 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v15 = 0;
  }
  int v18 = *a3;
  if (*a3 == 1)
  {
    result = (uint64_t)rint(*((double *)a3 + 4));
  }
  else if (v18 == 2)
  {
    unint64_t v19 = *((void *)a3 + 6);
    unint64_t v20 = *((void *)a3 + 7);
    int v23 = 0;
    result = __bid128_to_uint64_int(v19, v20, &v23);
  }
  else if (v18 == 4)
  {
    result = *((void *)a3 + 8);
  }
  else
  {
    result = 0;
  }
  uint64_t v21 = *(void *)(v3 + 32);
  *(_DWORD *)uint64_t v21 = 4;
  *(void *)(v21 + 64) = ~(result | v15);
  return result;
}

void functionXOR(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionXOR_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionXOR_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(result + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return result;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 15;
LABEL_18:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v14 = *a2;
  if (*a2 == 1)
  {
    unint64_t v15 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v14 == 2)
  {
    unint64_t v16 = *((void *)a2 + 6);
    unint64_t v17 = *((void *)a2 + 7);
    int v22 = 0;
    unint64_t v15 = __bid128_to_uint64_int(v16, v17, &v22);
  }
  else if (v14 == 4)
  {
    unint64_t v15 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v15 = 0;
  }
  int v18 = *a3;
  if (*a3 == 1)
  {
    result = (uint64_t)rint(*((double *)a3 + 4));
  }
  else if (v18 == 2)
  {
    unint64_t v19 = *((void *)a3 + 6);
    unint64_t v20 = *((void *)a3 + 7);
    int v23 = 0;
    result = __bid128_to_uint64_int(v19, v20, &v23);
  }
  else if (v18 == 4)
  {
    result = *((void *)a3 + 8);
  }
  else
  {
    result = 0;
  }
  uint64_t v21 = *(void *)(v3 + 32);
  *(_DWORD *)uint64_t v21 = 4;
  *(void *)(v21 + 64) = result ^ v15;
  return result;
}

void functionLeftShift(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionLeftShift_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionLeftShift_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (!a2[19])
  {
    unint64_t v6 = -1;
    uint64_t v7 = 21;
    while (v6 != 14)
    {
      int v8 = a2[v7];
      ++v6;
      v7 += 2;
      if (v8)
      {
        if (v6 < 0xF) {
          goto LABEL_7;
        }
        break;
      }
    }
    if (!a3[19])
    {
      unint64_t v12 = -1;
      uint64_t v13 = 21;
      while (v12 != 14)
      {
        int v14 = a3[v13];
        ++v12;
        v13 += 2;
        if (v14) {
          goto LABEL_18;
        }
      }
      unint64_t v12 = 15;
LABEL_18:
      int v9 = g_GeneratingConvertTerm;
      if (v12 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
        goto LABEL_8;
      }
      g_isTrivial = 0;
      int v15 = *a3;
      if (*a3 == 1)
      {
        result = (uint64_t)rint(*((double *)a3 + 4));
      }
      else if (v15 == 2)
      {
        unint64_t v16 = *((void *)a3 + 6);
        unint64_t v17 = *((void *)a3 + 7);
        int v26 = 0;
        result = __bid128_to_uint64_int(v16, v17, &v26);
      }
      else
      {
        if (v15 != 4) {
          goto LABEL_27;
        }
        result = *((void *)a3 + 8);
      }
      if (result > 0x3F)
      {
        unint64_t v20 = 0;
LABEL_43:
        uint64_t v25 = *(void *)(v3 + 32);
        *(_DWORD *)uint64_t v25 = 4;
        *(void *)(v25 + 64) = v20;
        return result;
      }
LABEL_27:
      int v18 = *a2;
      if (*a2 == 1)
      {
        unint64_t v19 = (uint64_t)rint(*((double *)a2 + 4));
      }
      else if (v18 == 2)
      {
        unint64_t v21 = *((void *)a2 + 6);
        unint64_t v22 = *((void *)a2 + 7);
        int v27 = 0;
        unint64_t v19 = __bid128_to_uint64_int(v21, v22, &v27);
      }
      else if (v18 == 4)
      {
        unint64_t v19 = *((void *)a2 + 8);
      }
      else
      {
        unint64_t v19 = 0;
      }
      switch(v15)
      {
        case 1:
          result = (uint64_t)rint(*((double *)a3 + 4));
          break;
        case 2:
          unint64_t v23 = *((void *)a3 + 6);
          unint64_t v24 = *((void *)a3 + 7);
          int v28 = 0;
          result = __bid128_to_uint64_int(v23, v24, &v28);
          break;
        case 4:
          result = *((void *)a3 + 8);
          break;
        default:
          result = 0;
          break;
      }
      unint64_t v20 = v19 << result;
      goto LABEL_43;
    }
  }
LABEL_7:
  int v9 = g_GeneratingConvertTerm;
LABEL_8:
  uint64_t v10 = *(void *)(result + 32);
  if (v9) {
    int v11 = 11;
  }
  else {
    int v11 = 9;
  }
  *(_DWORD *)(v10 + 204) = v11;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0x7C00000000000000;
  return result;
}

void functionRightShift(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionRightShift_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionRightShift_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (!a2[19])
  {
    unint64_t v6 = -1;
    uint64_t v7 = 21;
    while (v6 != 14)
    {
      int v8 = a2[v7];
      ++v6;
      v7 += 2;
      if (v8)
      {
        if (v6 < 0xF) {
          goto LABEL_7;
        }
        break;
      }
    }
    if (!a3[19])
    {
      unint64_t v12 = -1;
      uint64_t v13 = 21;
      while (v12 != 14)
      {
        int v14 = a3[v13];
        ++v12;
        v13 += 2;
        if (v14) {
          goto LABEL_18;
        }
      }
      unint64_t v12 = 15;
LABEL_18:
      int v9 = g_GeneratingConvertTerm;
      if (v12 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
        goto LABEL_8;
      }
      g_isTrivial = 0;
      int v15 = *a3;
      if (*a3 == 1)
      {
        result = (uint64_t)rint(*((double *)a3 + 4));
      }
      else if (v15 == 2)
      {
        unint64_t v16 = *((void *)a3 + 6);
        unint64_t v17 = *((void *)a3 + 7);
        int v26 = 0;
        result = __bid128_to_uint64_int(v16, v17, &v26);
      }
      else
      {
        if (v15 != 4) {
          goto LABEL_27;
        }
        result = *((void *)a3 + 8);
      }
      if (result > 0x3F)
      {
        unint64_t v20 = 0;
LABEL_43:
        uint64_t v25 = *(void *)(v3 + 32);
        *(_DWORD *)uint64_t v25 = 4;
        *(void *)(v25 + 64) = v20;
        return result;
      }
LABEL_27:
      int v18 = *a2;
      if (*a2 == 1)
      {
        unint64_t v19 = (uint64_t)rint(*((double *)a2 + 4));
      }
      else if (v18 == 2)
      {
        unint64_t v21 = *((void *)a2 + 6);
        unint64_t v22 = *((void *)a2 + 7);
        int v27 = 0;
        unint64_t v19 = __bid128_to_uint64_int(v21, v22, &v27);
      }
      else if (v18 == 4)
      {
        unint64_t v19 = *((void *)a2 + 8);
      }
      else
      {
        unint64_t v19 = 0;
      }
      switch(v15)
      {
        case 1:
          result = (uint64_t)rint(*((double *)a3 + 4));
          break;
        case 2:
          unint64_t v23 = *((void *)a3 + 6);
          unint64_t v24 = *((void *)a3 + 7);
          int v28 = 0;
          result = __bid128_to_uint64_int(v23, v24, &v28);
          break;
        case 4:
          result = *((void *)a3 + 8);
          break;
        default:
          result = 0;
          break;
      }
      unint64_t v20 = v19 >> result;
      goto LABEL_43;
    }
  }
LABEL_7:
  int v9 = g_GeneratingConvertTerm;
LABEL_8:
  uint64_t v10 = *(void *)(result + 32);
  if (v9) {
    int v11 = 11;
  }
  else {
    int v11 = 9;
  }
  *(_DWORD *)(v10 + 204) = v11;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0x7C00000000000000;
  return result;
}

void functionLeftRotate(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionLeftRotate_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionLeftRotate_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(result + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return result;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 15;
LABEL_18:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v14 = *a2;
  if (*a2 == 1)
  {
    unint64_t v15 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v14 == 2)
  {
    unint64_t v16 = *((void *)a2 + 6);
    unint64_t v17 = *((void *)a2 + 7);
    int v22 = 0;
    unint64_t v15 = __bid128_to_uint64_int(v16, v17, &v22);
  }
  else if (v14 == 4)
  {
    unint64_t v15 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v15 = 0;
  }
  int v18 = *a3;
  if (*a3 == 1)
  {
    result = (uint64_t)rint(*((double *)a3 + 4));
  }
  else if (v18 == 2)
  {
    unint64_t v19 = *((void *)a3 + 6);
    unint64_t v20 = *((void *)a3 + 7);
    int v23 = 0;
    result = __bid128_to_uint64_int(v19, v20, &v23);
  }
  else if (v18 == 4)
  {
    result = *((void *)a3 + 8);
  }
  else
  {
    result = 0;
  }
  uint64_t v21 = *(void *)(v3 + 32);
  *(_DWORD *)uint64_t v21 = 4;
  *(void *)(v21 + 64) = __ROR8__(v15, -(char)result);
  return result;
}

void functionRightRotate(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionRightRotate_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

unint64_t __functionRightRotate_block_invoke(unint64_t result, int *a2, int *a3)
{
  unint64_t v3 = result;
  if (a2[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7)
    {
      if (v5 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a3[19])
  {
LABEL_7:
    int v8 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v9 = *(void *)(result + 32);
    if (v8) {
      int v10 = 11;
    }
    else {
      int v10 = 9;
    }
    *(_DWORD *)(v9 + 204) = v10;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0x7C00000000000000;
    return result;
  }
  unint64_t v11 = -1;
  uint64_t v12 = 21;
  while (v11 != 14)
  {
    int v13 = a3[v12];
    ++v11;
    v12 += 2;
    if (v13) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 15;
LABEL_18:
  int v8 = g_GeneratingConvertTerm;
  if (v11 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v14 = *a2;
  if (*a2 == 1)
  {
    unint64_t v15 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v14 == 2)
  {
    unint64_t v16 = *((void *)a2 + 6);
    unint64_t v17 = *((void *)a2 + 7);
    int v22 = 0;
    unint64_t v15 = __bid128_to_uint64_int(v16, v17, &v22);
  }
  else if (v14 == 4)
  {
    unint64_t v15 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v15 = 0;
  }
  int v18 = *a3;
  if (*a3 == 1)
  {
    result = (uint64_t)rint(*((double *)a3 + 4));
  }
  else if (v18 == 2)
  {
    unint64_t v19 = *((void *)a3 + 6);
    unint64_t v20 = *((void *)a3 + 7);
    int v23 = 0;
    result = __bid128_to_uint64_int(v19, v20, &v23);
  }
  else if (v18 == 4)
  {
    result = *((void *)a3 + 8);
  }
  else
  {
    result = 0;
  }
  uint64_t v21 = *(void *)(v3 + 32);
  *(_DWORD *)uint64_t v21 = 4;
  *(void *)(v21 + 64) = __ROR8__(v15, result);
  return result;
}

void functionNOT(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionNOT_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionNOT_block_invoke(uint64_t a1, int *a2)
{
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v3 = 11;
LABEL_17:
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)(v10 + 204) = v3;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_16:
    int v3 = 9;
    goto LABEL_17;
  }
  uint64_t v4 = a2 + 18;
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7) {
      goto LABEL_9;
    }
  }
  unint64_t v5 = 15;
LABEL_9:
  if (v5 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_16;
  }
  g_isTrivial = 0;
  int v8 = *a2;
  if (*a2 == 1)
  {
    unint64_t v9 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v8 == 2)
  {
    unint64_t v11 = *((void *)a2 + 6);
    unint64_t v12 = *((void *)a2 + 7);
    int v20 = 0;
    unint64_t v9 = __bid128_to_uint64_int(v11, v12, &v20);
  }
  else if (v8 == 4)
  {
    unint64_t v9 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  *(_DWORD *)uint64_t v13 = 4;
  *(void *)(v13 + 64) = ~v9;
  long long v14 = *((_OWORD *)v4 + 6);
  long long v15 = *((_OWORD *)v4 + 7);
  long long v16 = *((_OWORD *)v4 + 5);
  *(_OWORD *)(v13 + 136) = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v13 + 184) = v15;
  *(_OWORD *)(v13 + 168) = v14;
  *(_OWORD *)(v13 + 152) = v16;
  __n128 result = *(__n128 *)v4;
  long long v18 = *((_OWORD *)v4 + 1);
  long long v19 = *((_OWORD *)v4 + 2);
  *(_OWORD *)(v13 + 120) = *((_OWORD *)v4 + 3);
  *(_OWORD *)(v13 + 104) = v19;
  *(_OWORD *)(v13 + 88) = v18;
  *(__n128 *)(v13 + 72) = result;
  return result;
}

void functionNEG(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionNEG_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

__n128 __functionNEG_block_invoke(uint64_t a1, int *a2)
{
  if (a2[19])
  {
    if (g_GeneratingConvertTerm)
    {
LABEL_3:
      int v3 = 11;
LABEL_17:
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)(v10 + 204) = v3;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0x7C00000000000000;
      return result;
    }
LABEL_16:
    int v3 = 9;
    goto LABEL_17;
  }
  uint64_t v4 = a2 + 18;
  unint64_t v5 = -1;
  uint64_t v6 = 21;
  while (v5 != 14)
  {
    int v7 = a2[v6];
    ++v5;
    v6 += 2;
    if (v7) {
      goto LABEL_9;
    }
  }
  unint64_t v5 = 15;
LABEL_9:
  if (v5 < 0xF || g_GeneratingConvertTerm)
  {
    if (g_GeneratingConvertTerm) {
      goto LABEL_3;
    }
    goto LABEL_16;
  }
  g_isTrivial = 0;
  int v8 = *a2;
  if (*a2 == 1)
  {
    unint64_t v9 = (uint64_t)rint(*((double *)a2 + 4));
  }
  else if (v8 == 2)
  {
    unint64_t v11 = *((void *)a2 + 6);
    unint64_t v12 = *((void *)a2 + 7);
    int v20 = 0;
    unint64_t v9 = __bid128_to_uint64_int(v11, v12, &v20);
  }
  else if (v8 == 4)
  {
    unint64_t v9 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  *(_DWORD *)uint64_t v13 = 4;
  *(void *)(v13 + 64) = -(uint64_t)v9;
  long long v14 = *((_OWORD *)v4 + 6);
  long long v15 = *((_OWORD *)v4 + 7);
  long long v16 = *((_OWORD *)v4 + 5);
  *(_OWORD *)(v13 + 136) = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v13 + 184) = v15;
  *(_OWORD *)(v13 + 168) = v14;
  *(_OWORD *)(v13 + 152) = v16;
  __n128 result = *(__n128 *)v4;
  long long v18 = *((_OWORD *)v4 + 1);
  long long v19 = *((_OWORD *)v4 + 2);
  *(_OWORD *)(v13 + 120) = *((_OWORD *)v4 + 3);
  *(_OWORD *)(v13 + 104) = v19;
  *(_OWORD *)(v13 + 88) = v18;
  *(__n128 *)(v13 + 72) = result;
  return result;
}

void functionFlip(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionFlip_block_invoke;
  v2[3] = &__block_descriptor_40_e161_v24__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_16l;
  v2[4] = a2;
  evaluateBinary(a1, a2, v2);
}

__n128 __functionFlip_block_invoke(uint64_t a1, int *a2, int *a3)
{
  if (a3[19]) {
    goto LABEL_7;
  }
  unint64_t v5 = a3 + 18;
  unint64_t v6 = -1;
  uint64_t v7 = 21;
  while (v6 != 14)
  {
    int v8 = a3[v7];
    ++v6;
    v7 += 2;
    if (v8)
    {
      if (v6 < 0xF) {
        goto LABEL_7;
      }
      break;
    }
  }
  if (a2[19])
  {
LABEL_7:
    int v9 = g_GeneratingConvertTerm;
LABEL_8:
    uint64_t v10 = *(void *)(a1 + 32);
    if (v9) {
      int v11 = 11;
    }
    else {
      int v11 = 9;
    }
    *(_DWORD *)(v10 + 204) = v11;
    goto LABEL_12;
  }
  unint64_t v12 = -1;
  uint64_t v13 = 21;
  while (v12 != 14)
  {
    int v14 = a2[v13];
    ++v12;
    v13 += 2;
    if (v14) {
      goto LABEL_19;
    }
  }
  unint64_t v12 = 15;
LABEL_19:
  int v9 = g_GeneratingConvertTerm;
  if (v12 < 0xF || (g_GeneratingConvertTerm & 1) != 0) {
    goto LABEL_8;
  }
  g_isTrivial = 0;
  int v15 = *a2;
  if (*a2 == 1)
  {
    result.n128_f64[0] = rint(*((double *)a2 + 4));
    unint64_t v16 = (uint64_t)result.n128_f64[0];
  }
  else if (v15 == 2)
  {
    unint64_t v18 = *((void *)a2 + 6);
    unint64_t v19 = *((void *)a2 + 7);
    int v34 = 0;
    unint64_t v16 = __bid128_to_uint64_int(v18, v19, &v34);
  }
  else if (v15 == 4)
  {
    unint64_t v16 = *((void *)a2 + 8);
  }
  else
  {
    unint64_t v16 = 0;
  }
  int v20 = *a3;
  if (*a3 == 1)
  {
    result.n128_f64[0] = rint(*((double *)a3 + 4));
    unint64_t v21 = (uint64_t)result.n128_f64[0];
  }
  else if (v20 == 2)
  {
    unint64_t v22 = *((void *)a3 + 6);
    unint64_t v23 = *((void *)a3 + 7);
    int v35 = 0;
    unint64_t v21 = __bid128_to_uint64_int(v22, v23, &v35);
  }
  else if (v20 == 4)
  {
    unint64_t v21 = *((void *)a3 + 8);
  }
  else
  {
    unint64_t v21 = 0;
  }
  if (v16 == 8)
  {
    if (v21)
    {
      unint64_t v27 = 0;
      do
      {
        unint64_t v25 = v21 | (v27 << 8);
        unint64_t v27 = v25;
        BOOL v26 = v21 >= 0x100;
        v21 >>= 8;
      }
      while (v26);
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (v16 == 16)
  {
    if (v21)
    {
      unint64_t v24 = 0;
      do
      {
        unint64_t v25 = (unsigned __int16)v21 | (v24 << 16);
        unint64_t v24 = v25;
        BOOL v26 = v21 >= 0x10000;
        v21 >>= 16;
      }
      while (v26);
      goto LABEL_47;
    }
LABEL_46:
    unint64_t v25 = 0;
LABEL_47:
    uint64_t v28 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t v28 = 4;
    *(void *)(v28 + 64) = v25;
    long long v29 = *((_OWORD *)v5 + 6);
    long long v30 = *((_OWORD *)v5 + 7);
    long long v31 = *((_OWORD *)v5 + 5);
    *(_OWORD *)(v28 + 136) = *((_OWORD *)v5 + 4);
    *(_OWORD *)(v28 + 184) = v30;
    *(_OWORD *)(v28 + 168) = v29;
    *(_OWORD *)(v28 + 152) = v31;
    __n128 result = *(__n128 *)v5;
    long long v32 = *((_OWORD *)v5 + 1);
    long long v33 = *((_OWORD *)v5 + 2);
    *(_OWORD *)(v28 + 120) = *((_OWORD *)v5 + 3);
    *(_OWORD *)(v28 + 104) = v33;
    *(_OWORD *)(v28 + 88) = v32;
    *(__n128 *)(v28 + 72) = result;
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  *(_DWORD *)uint64_t v10 = 2;
LABEL_12:
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0x7C00000000000000;
  return result;
}

void functionCompose(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionCompose_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

void __functionCompose_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)uint64_t v4 = *a2;
  int v16 = 0;
  int v5 = *a2;
  if (*a2 == 1)
  {
    if (my_rnd_mode) {
      int v7 = 4;
    }
    else {
      int v7 = 0;
    }
    unint64_t v6 = __binary64_to_bid128(v7, &my_fpsf, *((double *)a2 + 4));
  }
  else if (v5 == 2)
  {
    unint64_t v6 = *((void *)a2 + 6);
    unint64_t v8 = *((void *)a2 + 7);
  }
  else
  {
    if (v5 == 4) {
      unint64_t v6 = *((void *)a2 + 8);
    }
    else {
      unint64_t v6 = 0;
    }
    unint64_t v8 = 0x3040000000000000;
  }
  unint64_t v9 = UnitCountCompose(v6, v8, (uint64_t)(a2 + 18), (_OWORD *)(v4 + 72), &v16);
  unint64_t v11 = v10;
  int v17 = 0;
  unint64_t v12 = __bid128_to_uint64_int(v9, v10, &v17);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)(v13 + 64) = v12;
  if (my_rnd_mode) {
    int v14 = 4;
  }
  else {
    int v14 = 0;
  }
  *(double *)(v13 + 32) = __bid128_to_binary64(v9, v11, v14, &my_fpsf);
  *(void *)(v13 + 48) = v9;
  *(void *)(v13 + 56) = v11;
  if (v16)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    *(_DWORD *)(v15 + 204) = v16;
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0x7C00000000000000;
  }
}

void _functionConvert(int *a1, int *a2, int a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  long long v105 = 0u;
  long long v103 = 0u;
  memset(v104, 0, sizeof(v104));
  long long v102 = 0u;
  memset(v101, 0, sizeof(v101));
  long long v99 = 0u;
  memset(v100, 0, sizeof(v100));
  memset(v98, 0, sizeof(v98));
  evaluateTree(*((void *)a1 + 2), (uint64_t)v101);
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = objc_opt_new();
  int v7 = 1;
  g_GeneratingConvertTerm = 1;
  g_PowNestingLevel = 0;
  uint64_t v8 = g_unitSuggestions;
  uint64_t v9 = g_unitSuggestionsSet;
  unint64_t v68 = (void *)v6;
  uint64_t v69 = (void *)v5;
  g_unitSuggestions = v6;
  g_unitSuggestionsSet = v5;
  unint64_t v10 = a2;
  evaluateTree(*((void *)a1 + 3), (uint64_t)v98);
  g_unitSuggestions = v8;
  g_unitSuggestionsSet = v9;
  g_GeneratingConvertTerm = 0;
  *((void *)a2 + 1) = functionNoOp;
  *a2 = *a1;
  my_rnd_mode = 1;
  my_fpsf = 0;
  int v11 = HIDWORD(v105);
  if (HIDWORD(v105)) {
    goto LABEL_3;
  }
  int v11 = HIDWORD(v100[17]);
  if (HIDWORD(v100[17])) {
    goto LABEL_3;
  }
  if ((~*((void *)&v103 + 1) & 0x7C00000000000000) != 0 && (~*((void *)&v99 + 1) & 0x7C00000000000000) != 0)
  {
    int v70 = 0;
    long long v75 = *(_OWORD *)&v100[9];
    long long v76 = *(_OWORD *)&v100[11];
    long long v77 = *(_OWORD *)&v100[13];
    long long v78 = *(_OWORD *)&v100[15];
    long long v71 = *(_OWORD *)&v100[1];
    long long v72 = *(_OWORD *)&v100[3];
    long long v73 = *(_OWORD *)&v100[5];
    long long v74 = *(_OWORD *)&v100[7];
    unint64_t v13 = UnitCountDecompose(1, 0x3040000000000000, (uint64_t)&v100[1], &v94, &v70);
    unint64_t v66 = v14;
    if (LODWORD(v101[0]) == 1)
    {
      if (my_rnd_mode) {
        int v18 = 4;
      }
      else {
        int v18 = 0;
      }
      unint64_t v15 = __binary64_to_bid128(v18, &my_fpsf, *(double *)&v102);
    }
    else if (LODWORD(v101[0]) == 2)
    {
      uint64_t v17 = *((void *)&v103 + 1);
      unint64_t v15 = v103;
    }
    else
    {
      if (LODWORD(v101[0]) == 4) {
        unint64_t v15 = v104[0];
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v17 = 0x3040000000000000;
    }
    unint64_t v19 = UnitCountDecompose(v15, v17, (uint64_t)&v104[1], v93, &v70);
    if (a3) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = &v70;
    }
    unint64_t v22 = UnitCountConvert(v19, v20, (uint64_t)v93, (uint64_t)&v94, v92, v21);
    if ((~v23 & 0x7C00000000000000) != 0) {
      int v24 = 0;
    }
    else {
      int v24 = a3;
    }
    if (v24 == 1)
    {
      unint64_t v25 = treeDecimalValue(v98);
      unint64_t v27 = UnitCountMultiply((uint64_t)&v104[1], v25, v26, (uint64_t)&v100[1], (uint64_t)(a2 + 18), &v70);
      uint64_t v29 = v28;
      unint64_t v30 = treeDecimalValue(v101);
      if (my_rnd_mode) {
        unsigned int v32 = 4;
      }
      else {
        unsigned int v32 = 0;
      }
      uint64_t v33 = __bid128_mul(v30, v31, v27, v29, v32, &my_fpsf);
      long long v34 = *(_OWORD *)(v10 + 38);
      long long v88 = *(_OWORD *)(v10 + 34);
      long long v89 = v34;
      long long v35 = *(_OWORD *)(v10 + 46);
      long long v90 = *(_OWORD *)(v10 + 42);
      long long v91 = v35;
      long long v36 = *(_OWORD *)(v10 + 22);
      long long v84 = *(_OWORD *)(v10 + 18);
      long long v85 = v36;
      long long v37 = *(_OWORD *)(v10 + 30);
      long long v86 = *(_OWORD *)(v10 + 26);
      long long v87 = v37;
      unint64_t v39 = UnitCountCompose(v33, v38, (uint64_t)&v84, v10 + 18, &v70);
    }
    else
    {
      if (my_rnd_mode) {
        int v41 = 4;
      }
      else {
        int v41 = 0;
      }
      uint64_t v64 = __bid128_div(v22, v23, v13, v66, v41, &my_fpsf);
      unint64_t v65 = v42;
      uint64_t v43 = g_unitSuggestions;
      unint64_t v63 = v13;
      uint64_t v44 = g_unitSuggestionsSet;
      g_unitSuggestions = (uint64_t)v68;
      g_unitSuggestionsSet = (uint64_t)v69;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      unint64_t v62 = UnitCountCompose(1, 0x3040000000000000uLL, (uint64_t)&v94, &v84, &v70);
      uint64_t v46 = v45;
      g_unitSuggestions = v43;
      g_unitSuggestionsSet = v44;
      if (my_rnd_mode) {
        int v47 = 4;
      }
      else {
        int v47 = 0;
      }
      unint64_t v48 = __bid128_div(1uLL, 0x3040000000000000uLL, v63, v66, v47, &my_fpsf);
      unint64_t v50 = __bid128_sub(v48, v49, v62, v46, v47, &my_fpsf);
      unint64_t v52 = v51 & 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v53 = __bid128_div(1uLL, 0x3040000000000000uLL, 0x28uLL, 0x3040000000000000uLL, v47, &my_fpsf);
      if (__bid128_quiet_less(v50, v52, v53, v54, &my_fpsf))
      {
        long long v75 = v88;
        long long v76 = v89;
        long long v77 = v90;
        long long v78 = v91;
        long long v71 = v84;
        long long v72 = v85;
        long long v73 = v86;
        long long v74 = v87;
      }
      long long v55 = v76;
      *(_OWORD *)(v10 + 34) = v75;
      *(_OWORD *)(v10 + 38) = v55;
      long long v56 = v78;
      *(_OWORD *)(v10 + 42) = v77;
      *(_OWORD *)(v10 + 46) = v56;
      long long v57 = v72;
      *(_OWORD *)(v10 + 18) = v71;
      *(_OWORD *)(v10 + 22) = v57;
      long long v58 = v74;
      *(_OWORD *)(v10 + 26) = v73;
      *(_OWORD *)(v10 + 30) = v58;
      unint64_t v39 = v64;
      unint64_t v40 = v65;
    }
    int v16 = v10[51];
    if (!v16)
    {
      int v59 = v70;
      if (v70)
      {
        v10[51] = v70;
        int v16 = v59;
      }
    }
    int v60 = *v10;
    if (*v10 == 1)
    {
      if (my_rnd_mode) {
        int v61 = 4;
      }
      else {
        int v61 = 0;
      }
      *((double *)v10 + 4) = __bid128_to_binary64(v39, v40, v61, &my_fpsf);
      int v16 = v10[51];
    }
    else if (v60 == 2)
    {
      *((void *)v10 + 6) = v39;
      *((void *)v10 + 7) = v40;
    }
    else if (v60 == 4)
    {
      LODWORD(v84) = 0;
      *((void *)v10 + 8) = __bid128_to_uint64_int(v39, v40, &v84);
    }
    int v7 = v24 ^ 1;
    if (!v16)
    {
      if ((my_fpsf & 4) != 0)
      {
        int v16 = 1;
      }
      else if ((my_fpsf & 8) != 0)
      {
        int v16 = 3;
      }
      else if ((my_fpsf & 0x10) != 0)
      {
        int v16 = 2;
      }
      else
      {
        int v16 = 4 * (my_fpsf & 1);
      }
      v10[51] = v16;
    }
  }
  else
  {
    *((void *)a2 + 4) = 0x7FF8000000000000;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0x7C00000000000000;
    int v16 = a2[51];
  }
  if (!v16 && (~*((void *)v10 + 7) & 0x7C00000000000000) == 0)
  {
    int v11 = 4;
LABEL_3:
    v10[51] = v11;
  }
  if (g_usingNewAPI == 1)
  {
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v79 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = (unint64_t)v101;
    unint64_t v12 = malloc_type_calloc(1uLL, 0xD0uLL, 0x10A00405A5B035DuLL);
    *(void *)&long long v94 = MEMORY[0x1E4F143A8];
    *((void *)&v94 + 1) = 3221225472;
    v95 = __functionCompose_block_invoke;
    v96 = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
    v97 = v12;
    evaluateUnary((uint64_t)&v71, (uint64_t)v12, &v94);
    if (v7)
    {
      g_beforeConvertTree = (uint64_t)v12;
      g_isTrivial = 0;
    }
  }
}

void functionConvert(int *a1, int *a2)
{
}

void functionImplicitConvert(int *a1, int *a2)
{
}

void functionFail(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionFail_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

uint64_t __functionFail_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0x7C00000000000000;
  *(_DWORD *)(*(void *)(result + 32) + 204) = 7;
  return result;
}

void functionUnsupportedMath(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __functionUnsupportedMath_block_invoke;
  v2[3] = &__block_descriptor_40_e83_v16__0__TreeObject_i____TreeObject___TreeObject_d____2Q__Q_16_UnitCount_ii__BBBBi_8l;
  v2[4] = a2;
  evaluateUnary(a1, a2, v2);
}

uint64_t __functionUnsupportedMath_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_DWORD *)(v1 + 204) = 15;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0x7C00000000000000;
  return result;
}

void sub_1BDD79FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t resultTree(void *a1, const char *a2)
{
  return [a1 performSelector:sel_resultTree];
}

id CalculateDefaultNumberFormatter(uint64_t a1)
{
  return +[CalculateResult defaultNumberFormatter:a1];
}

id CalculateEvaluateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return +[Calculate evaluate:a1 options:a2 error:a3 needsUpdate:a4];
}

uint64_t CalculateResultConvertFrom(void *a1, const char *a2, uint64_t a3)
{
  return [a1 convertedTo:a2 from:a3];
}

id CalculateTermDecimalString(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = [a1 decimalValue];
  if ((~v2 & 0x7C00000000000000) != 0)
  {
    __bid128_to_string((uint64_t)v5, v1, v2);
    int v3 = [NSString stringWithUTF8String:v5];
  }
  else
  {
    int v3 = 0;
  }
  return v3;
}

id CalculateTermFormatDecimalString(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v25 = 0;
  id v7 = a1;
  uint64_t v8 = objc_opt_new();
  id v9 = v7;
  unint64_t v10 = (unsigned __int8 *)[v9 UTF8String];

  uint64_t v11 = __bid128_from_string(v10, 4, &v25);
  if (v25)
  {
    unint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    objc_msgSend(v8, "setDecimalValue:", v11, v12);
    int v16 = +[CalculateResult decimalNumberWithDecimal128:](CalculateResult, "decimalNumberWithDecimal128:", v14, v15);
    [v8 setValue:v16];

    uint64_t v17 = +[CalculateKeys keysWithOptions:]((uint64_t)CalculateKeys, v5);
    int v18 = -[CalculateKeys numberFormatter]((uint64_t)v17);
    if (!v18)
    {
      unint64_t v19 = -[CalculateKeys locales]((uint64_t)v17);
      unint64_t v20 = v19;
      if (!v19 || ![v19 count])
      {
        uint64_t v21 = +[Localize systemLocales];

        unint64_t v20 = (void *)v21;
      }
      unint64_t v22 = [v20 firstObject];
      int v18 = +[CalculateResult defaultNumberFormatter:v22];
    }
    unint64_t v23 = objc_opt_new();
    [v23 setNumberFormatter:v18];
    [v23 setAutoScientificNotation:-[CalculateKeys autoScientificNotation]((uint64_t)v17)];
    [v23 setScientificNotationFormat:-[CalculateKeys scientificNotationFormat]((uint64_t)v17)];
    [v8 setResult:v23];
    [v8 setForceScientificNotation:v6];
    unint64_t v13 = [v8 formattedValue];
  }
  return v13;
}

void sub_1BDD80A94(_Unwind_Exception *a1)
{
}

void sub_1BDD810C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BDD83984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__388(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__389(uint64_t a1)
{
}

BOOL CalculatePerformExpression(char *a1, int a2, char a3, uint64_t a4)
{
  return CalculateExpressionError(a1, a2, a3, a4, 1024, 0);
}

BOOL CalculateExpressionError(char *a1, int a2, char a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v29 = 0;
  if (!a1 || !a4)
  {
    uint64_t v21 = CalculateLogForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BDCDE000, v21, OS_LOG_TYPE_INFO, "Calculate: CalculateExpressionError no expression or result", buf, 2u);
    }

    return 0;
  }
  if (strchr(a1, 35)) {
    return 0;
  }
  size_t v12 = strlen(a1);
  unint64_t v13 = (char *)malloc_type_calloc(v12 + 1, 1uLL, 0x100004077774924uLL);
  uint64_t v14 = v13;
  LOBYTE(v15) = *a1;
  i = v13;
  if (*a1)
  {
    uint64_t v17 = 0;
    do
    {
      v13[v17] = v15;
      int v15 = a1[++v17];
    }
    while (v15);
    int v18 = &v13[v17];
    BOOL v19 = v18 > v13;
    *int v18 = 0;
    for (i = v18 - 1; v19; *i-- = 0)
    {
      unsigned int v20 = *i - 32;
      if (v20 > 0x3E) {
        break;
      }
      if (((1 << v20) & 0x101) == 0)
      {
        if (((1 << v20) & 0x400000000000EC00) == 0) {
          break;
        }
        goto LABEL_18;
      }
      BOOL v19 = i > v13;
    }
  }
  else
  {
LABEL_18:
    char *i = 0;
  }
  unint64_t v23 = (void *)MEMORY[0x1C1886920]();
  +[Calculate _lock];
  g_allowUnits = 0;
  g_allowPartialExpressions = 1;
  g_allowCurrencyConversions = 1;
  g_usingNewAPI = 0;
  if ((a3 & 7) == 2) {
    int v24 = 4;
  }
  else {
    int v24 = 2;
  }
  if ((a3 & 7) == 4) {
    int v25 = 1;
  }
  else {
    int v25 = v24;
  }
  int v26 = calc_parser_read_buffer((uint64_t)v14, v12, v25, a2, a4, a5, &v29);
  unint64_t v27 = CalculateLogForCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v31 = v26;
    _os_log_impl(&dword_1BDCDE000, v27, OS_LOG_TYPE_INFO, "Calculate: CalculateExpressionError ret = %d", buf, 8u);
  }

  +[Calculate _unlock];
  if (a6)
  {
    *a6 = v29;
    uint64_t v28 = CalculateLogForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v31 = v29;
      _os_log_error_impl(&dword_1BDCDE000, v28, OS_LOG_TYPE_ERROR, "Calculate: CalculateExpressionError error = %d", buf, 8u);
    }
  }
  free(v14);
  return (v26 | v29) == 0;
}

BOOL CalculateExpression(char *a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  return CalculateExpressionError(a1, a2, a3, a4, a5, 0);
}

BOOL CalculateInternationalExpression(void *a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  id v9 = (void *)[a1 copy];
  size_t v10 = [v9 length];
  uint64_t v11 = (__int16 *)malloc_type_calloc(v10, 2uLL, 0x1000040BDFB0063uLL);
  [v9 getCharacters:v11];
  if (v10)
  {
    size_t v12 = v11;
    size_t v13 = v10;
    while (1)
    {
      UChar32 v14 = (unsigned __int16)*v12;
      if (u_isdigit(v14)) {
        break;
      }
      if (v14 == 1643)
      {
        __int16 v15 = 46;
        goto LABEL_7;
      }
LABEL_8:
      ++v12;
      if (!--v13) {
        goto LABEL_9;
      }
    }
    __int16 v15 = u_charDigitValue(v14) + 48;
LABEL_7:
    *size_t v12 = v15;
    goto LABEL_8;
  }
LABEL_9:
  id v16 = (id) [[NSString alloc] initWithCharactersNoCopy:v11 length:v10 freeWhenDone:1];
  BOOL v17 = CalculateExpressionError((char *)[v16 UTF8String], a2, a3, a4, a5, 0);

  return v17;
}

uint64_t calc_yyparse(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  int v158 = 0;
  int v156 = 0;
  uint64_t v2 = 0;
  v164[50] = *MEMORY[0x1E4F143B8];
  int v3 = v163;
  unint64_t v4 = 200;
  id v5 = (__int16 *)&yypact;
  id v6 = (unsigned __int8 *)&yystos;
  memset(__dst, 0, 504);
  yynerrs = 0;
  yychar = -2;
  __src = v163;
  id v7 = (char *)v164;
  uint64_t v8 = (char *)v164;
  while (1)
  {
    *(_WORD *)id v7 = v2;
    if (&v8[2 * v4 - 2] <= v7)
    {
      if (v4 >> 4 > 0x270)
      {
        uint64_t v148 = 2;
        goto LABEL_543;
      }
      id v9 = v6;
      if (2 * v4 >= 0x2710) {
        uint64_t v10 = 10000;
      }
      else {
        uint64_t v10 = 2 * v4;
      }
      uint64_t v11 = (char *)malloc_type_malloc(1026 * v10 + 1023, 0xDFB92F49uLL);
      if (!v11)
      {
        uint64_t v148 = 2;
LABEL_561:
        id v6 = v9;
        goto LABEL_543;
      }
      size_t v12 = v11;
      size_t v13 = v5;
      uint64_t v14 = (v7 - v8) >> 1;
      uint64_t v15 = v10;
      uint64_t v16 = v14 + 1;
      memcpy(v11, v8, 2 * (v14 + 1));
      int64_t v17 = v15;
      unint64_t v18 = (2 * v15 + 1023) & 0xFFFFFFFFFFFFFC00;
      BOOL v19 = v8;
      unsigned int v20 = &v12[v18];
      memcpy(&v12[v18], __src, (v14 + 1) << 10);
      if (v19 != (char *)v164) {
        free(v19);
      }
      id v7 = &v12[2 * v14];
      int v3 = &v20[1024 * v16 - 1024];
      if (v17 <= v16)
      {
        uint64_t v148 = 1;
        uint64_t v8 = v12;
        goto LABEL_561;
      }
      unint64_t v4 = v17;
      __src = v20;
      uint64_t v8 = v12;
      id v5 = v13;
      id v6 = v9;
    }
    int v21 = v5[(int)v2];
    unint64_t v160 = v4;
    if (v21 == -114) {
      goto LABEL_261;
    }
    int v22 = yychar;
    if (yychar == -2)
    {
      int v158 = v21;
      if ((yy_init & 1) == 0)
      {
        yy_init = 1;
        if ((yy_start & 1) == 0) {
          yy_start = 1;
        }
        if (!calc_yyin) {
          calc_yyin = *MEMORY[0x1E4F143D0];
        }
        if (!calc_yyout) {
          calc_yyout = *MEMORY[0x1E4F143D8];
        }
        if (!yy_buffer_stack || (buffer = *(uint64_t **)yy_buffer_stack) == 0)
        {
          calc_yyensure_buffer_stack();
          buffer = (uint64_t *)calc_yy_create_buffer(calc_yyin);
          *(void *)yy_buffer_stack = buffer;
        }
        yy_n_chars = buffer[4];
        yy_c_buf_p = buffer[2];
        calc_yytext = yy_c_buf_p;
        calc_yyin = *buffer;
        yy_hold_char = *(unsigned char *)yy_c_buf_p;
      }
LABEL_25:
      int v24 = v6;
      int v25 = (char *)yy_c_buf_p;
      *(unsigned char *)yy_c_buf_p = yy_hold_char;
      int previous_state = yy_start;
      uint64_t v27 = (uint64_t)v25;
      while (1)
      {
LABEL_26:
        uint64_t v28 = &qword_1EA0DF000;
        do
        {
          uint64_t v29 = yy_ec[*v25];
          if (yy_accept[previous_state])
          {
            yy_last_accepting_state = previous_state;
            yy_last_accepting_cpos = (uint64_t)v25;
          }
          uint64_t v30 = previous_state;
          uint64_t v31 = yy_base[previous_state] + v29;
          if (previous_state != (__int16)yy_chk[v31])
          {
            do
            {
              uint64_t v30 = yy_def[v30];
              if (v30 >= 532) {
                uint64_t v29 = *((unsigned __int8 *)&yy_meta + v29);
              }
              uint64_t v31 = yy_base[v30] + v29;
            }
            while (yy_chk[v31] != (unsigned __int16)v30);
          }
          int previous_state = yy_nxt[v31];
          ++v25;
        }
        while (previous_state != 531);
        uint64_t v32 = (char *)yy_last_accepting_cpos;
        int v33 = yy_last_accepting_state;
        id v6 = v24;
LABEL_35:
        int v34 = (__int16)yy_accept[v33];
        calc_yytext = v27;
        calc_yyleng = (uint64_t)&v32[-v27];
        yy_hold_char = *v32;
        *uint64_t v32 = 0;
        yy_c_buf_p = (uint64_t)v32;
        if (v33 != 3)
        {
          if (yy_rule_can_match_eol[v34])
          {
            uint64_t v35 = calc_yyleng;
            if (calc_yyleng)
            {
              int v36 = *((_DWORD *)v28 + 216);
              long long v37 = (unsigned __int8 *)calc_yytext;
              do
              {
                int v38 = *v37++;
                if (v38 == 10) {
                  *((_DWORD *)v28 + 216) = ++v36;
                }
                --v35;
              }
              while (v35);
            }
          }
        }
        while (2)
        {
          switch(v34)
          {
            case 0:
              *uint64_t v32 = yy_hold_char;
              goto LABEL_113;
            case 1:
              long long v76 = v6;
              uint64_t v77 = calc_yytext;
              size_t v78 = strlen((const char *)calc_yytext);
              size_t v79 = 0;
              if (v78)
              {
                long long v80 = &yylval;
                do
                {
                  if (*(unsigned char *)(v77 + v79) == 44) {
                    ++v79;
                  }
                  if (v79 < v78) {
                    *(unsigned char *)long long v80 = *(unsigned char *)(v77 + v79);
                  }
                  ++v79;
                  long long v80 = (uint64_t *)((char *)v80 + 1);
                }
                while (v79 < v78);
              }
              *((unsigned char *)&yylval + v79) = 0;
              int v22 = 0x103u;
              id v6 = v76;
              goto LABEL_246;
            case 2:
              int v22 = 0x102u;
              goto LABEL_246;
            case 3:
              int v22 = 0x10Bu;
              goto LABEL_246;
            case 4:
              int v22 = 0x10Cu;
              goto LABEL_246;
            case 5:
              int v22 = 0x10Du;
              goto LABEL_246;
            case 6:
              int v22 = 0x10Eu;
              goto LABEL_246;
            case 7:
              int v22 = 0x10Fu;
              goto LABEL_246;
            case 8:
              int v22 = 0x110u;
              goto LABEL_246;
            case 9:
              int v22 = 0x111u;
              goto LABEL_246;
            case 10:
              int v22 = 0x112u;
              goto LABEL_246;
            case 11:
              int v22 = 0x113u;
              goto LABEL_246;
            case 12:
              int v22 = 0x114u;
              goto LABEL_246;
            case 13:
              int v22 = 0x115u;
              goto LABEL_246;
            case 14:
              int v22 = 0x116u;
              goto LABEL_246;
            case 15:
              int v22 = 0x117u;
              goto LABEL_246;
            case 16:
              int v22 = 0x11Bu;
              goto LABEL_246;
            case 17:
              int v22 = 0x11Cu;
              goto LABEL_246;
            case 18:
              int v22 = 0x11Du;
              goto LABEL_246;
            case 19:
              int v22 = 0x121u;
              goto LABEL_246;
            case 20:
              int v22 = 0x122u;
              goto LABEL_246;
            case 21:
              int v22 = 0x123u;
              goto LABEL_246;
            case 22:
              int v22 = 0x118u;
              goto LABEL_246;
            case 23:
              int v22 = 0x119u;
              goto LABEL_246;
            case 24:
              int v22 = 0x11Au;
              goto LABEL_246;
            case 25:
              int v22 = 0x11Eu;
              goto LABEL_246;
            case 26:
              int v22 = 0x11Fu;
              goto LABEL_246;
            case 27:
              int v22 = 0x120u;
              goto LABEL_246;
            case 28:
              int v22 = 0x124u;
              goto LABEL_246;
            case 29:
              int v22 = 0x125u;
              goto LABEL_246;
            case 30:
              int v22 = 0x126u;
              goto LABEL_246;
            case 31:
              int v22 = 0x127u;
              goto LABEL_246;
            case 32:
              int v22 = 0x12Au;
              goto LABEL_246;
            case 33:
              int v22 = 0x12Du;
              goto LABEL_246;
            case 34:
              int v22 = 0x12Eu;
              goto LABEL_246;
            case 35:
              int v22 = 0x12Fu;
              goto LABEL_246;
            case 36:
              int v22 = 0x130u;
              goto LABEL_246;
            case 37:
              int v22 = 0x131u;
              goto LABEL_246;
            case 38:
              int v22 = 0x132u;
              goto LABEL_246;
            case 39:
              int v22 = 0x133u;
              goto LABEL_246;
            case 40:
              int v22 = 0x134u;
              goto LABEL_246;
            case 41:
              int v22 = 0x135u;
              goto LABEL_246;
            case 42:
              int v22 = 0x136u;
              goto LABEL_246;
            case 43:
              int v22 = 0x137u;
              goto LABEL_246;
            case 44:
              int v22 = 0x128u;
              goto LABEL_246;
            case 45:
              int v22 = 0x129u;
              goto LABEL_246;
            case 46:
              int v22 = 0x12Bu;
              goto LABEL_246;
            case 47:
              int v22 = 0x12Cu;
              goto LABEL_246;
            case 48:
              int v22 = 0x138u;
              goto LABEL_246;
            case 49:
              int v22 = 0x139u;
              goto LABEL_246;
            case 50:
              int v22 = 0x13Au;
              goto LABEL_246;
            case 51:
              int v22 = 0x13Bu;
              goto LABEL_246;
            case 52:
              int v22 = 0x13Cu;
              goto LABEL_246;
            case 53:
              int v22 = 0x13Du;
              goto LABEL_246;
            case 54:
              int v22 = 0x13Eu;
              goto LABEL_246;
            case 55:
              int v22 = 0x13Fu;
              goto LABEL_246;
            case 56:
              int v22 = 0x140u;
              goto LABEL_246;
            case 57:
              int v22 = 0x141u;
              goto LABEL_246;
            case 58:
              int v22 = 0x142u;
              goto LABEL_246;
            case 59:
              int v22 = 0x143u;
              goto LABEL_246;
            case 60:
              int v22 = 0x144u;
              goto LABEL_246;
            case 61:
              int v22 = 0x145u;
              goto LABEL_246;
            case 62:
              int v22 = 0x146u;
              goto LABEL_246;
            case 63:
              int v22 = 0x147u;
              goto LABEL_246;
            case 64:
              int v22 = 0x148u;
              goto LABEL_246;
            case 65:
              int v22 = 0x149u;
              goto LABEL_246;
            case 66:
              int v22 = 0x14Au;
              goto LABEL_246;
            case 67:
            case 68:
              int v22 = 0x14Bu;
              goto LABEL_246;
            case 69:
              int v22 = 0x14Cu;
              goto LABEL_246;
            case 70:
              int v22 = 0x14Du;
              goto LABEL_246;
            case 71:
              int v22 = 0x14Eu;
              goto LABEL_246;
            case 72:
              int v22 = 0x14Fu;
              goto LABEL_246;
            case 73:
              cleanUnit();
              int v22 = 0x104u;
              goto LABEL_246;
            case 74:
              cleanCurrency();
              int v22 = 0x106u;
              goto LABEL_246;
            case 75:
              cleanCurrency();
              int v22 = 0x105u;
              goto LABEL_246;
            case 76:
              int v22 = 0x107u;
              goto LABEL_246;
            case 77:
              int v22 = 0x108u;
              goto LABEL_246;
            case 78:
              int v22 = 0x109u;
              goto LABEL_246;
            case 79:
              int v22 = 0x10Au;
              goto LABEL_246;
            case 80:
              goto LABEL_25;
            case 81:
              int v22 = 1u;
              goto LABEL_246;
            case 82:
              int v22 = *(char *)calc_yytext;
              goto LABEL_246;
            case 83:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 336;
              goto LABEL_244;
            case 84:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 337;
              goto LABEL_244;
            case 85:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 332;
              goto LABEL_244;
            case 86:
            case 87:
            case 88:
            case 89:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 331;
              goto LABEL_244;
            case 90:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 267;
              goto LABEL_244;
            case 91:
            case 93:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 338;
              goto LABEL_244;
            case 92:
            case 94:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 339;
              goto LABEL_244;
            case 95:
            case 97:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 340;
              goto LABEL_244;
            case 96:
            case 98:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 341;
              goto LABEL_244;
            case 99:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 342;
              goto LABEL_244;
            case 100:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 343;
              goto LABEL_244;
            case 101:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 344;
              goto LABEL_244;
            case 102:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 345;
              goto LABEL_244;
            case 103:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 346;
              goto LABEL_244;
            case 104:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 348;
              goto LABEL_244;
            case 105:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 347;
              goto LABEL_244;
            case 106:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 349;
              goto LABEL_244;
            case 107:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 351;
              goto LABEL_244;
            case 108:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 350;
              goto LABEL_244;
            case 109:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 352;
              goto LABEL_244;
            case 110:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 354;
              goto LABEL_244;
            case 111:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 353;
              goto LABEL_244;
            case 112:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 355;
              goto LABEL_244;
            case 113:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 356;
              goto LABEL_244;
            case 114:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 357;
              goto LABEL_244;
            case 115:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 358;
              goto LABEL_244;
            case 116:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 359;
              goto LABEL_244;
            case 117:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 360;
              goto LABEL_244;
            case 118:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 361;
              goto LABEL_244;
            case 119:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 317;
              goto LABEL_244;
            case 120:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 318;
              goto LABEL_244;
            case 121:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 362;
              goto LABEL_244;
            case 122:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 333;
              goto LABEL_244;
            case 123:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 280;
              goto LABEL_244;
            case 124:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 281;
              goto LABEL_244;
            case 125:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 282;
              goto LABEL_244;
            case 126:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 292;
              goto LABEL_244;
            case 127:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 293;
              goto LABEL_244;
            case 128:
              BOOL v75 = g_allowLaTeX == 0;
              int v22 = 294;
LABEL_244:
              if (v75) {
                int v22 = 258;
              }
              goto LABEL_246;
            case 129:
              fwrite((const void *)calc_yytext, calc_yyleng, 1uLL, (FILE *)calc_yyout);
              goto LABEL_25;
            case 130:
              v154 = v8;
              uint64_t v39 = calc_yytext;
              *uint64_t v32 = yy_hold_char;
              uint64_t v40 = yy_buffer_stack;
              uint64_t v41 = *(void *)yy_buffer_stack;
              if (*(_DWORD *)(*(void *)yy_buffer_stack + 64))
              {
                uint64_t v42 = yy_n_chars;
              }
              else
              {
                uint64_t v42 = *(void *)(v41 + 32);
                yy_n_chars = v42;
                *(void *)uint64_t v41 = calc_yyin;
                uint64_t v41 = *(void *)v40;
                *(_DWORD *)(*(void *)v40 + 64) = 1;
              }
              LODWORD(v43) = yy_c_buf_p;
              uint64_t v44 = *(unsigned char **)(v41 + 8);
              if (yy_c_buf_p > (unint64_t)&v44[v42])
              {
                uint64_t v152 = v39;
                if (yy_c_buf_p > (unint64_t)&v44[v42 + 1]) {
                  yy_fatal_error("fatal flex scanner internal error--end of buffer missed");
                }
                uint64_t v45 = (char *)calc_yytext;
                if (!*(_DWORD *)(v41 + 60))
                {
                  id v6 = (unsigned __int8 *)&yystos;
                  uint64_t v8 = v154;
                  id v5 = (__int16 *)&yypact;
                  if (yy_c_buf_p - calc_yytext != 1) {
                    goto LABEL_105;
                  }
LABEL_99:
                  yy_c_buf_p = (uint64_t)v45;
                  int v34 = 131;
                  continue;
                }
                uint64_t v46 = ~calc_yytext + yy_c_buf_p;
                if ((int)v46 >= 1)
                {
                  int v47 = ~calc_yytext + yy_c_buf_p;
                  do
                  {
                    char v48 = *v45++;
                    *v44++ = v48;
                    --v47;
                  }
                  while (v47);
                  uint64_t v41 = *(void *)v40;
                }
                int v49 = *(_DWORD *)(v41 + 64);
                uint64_t v157 = (int)v46;
                uint64_t v153 = v2;
                if (v49 == 2)
                {
                  yy_n_chars = 0;
                  goto LABEL_55;
                }
                int v50 = ~v46;
                int v51 = *(_DWORD *)(v41 + 24);
                unsigned int v52 = v51 + ~v46;
                if (!v52)
                {
                  size_t __nitems = v46;
                  do
                  {
                    if (!*(_DWORD *)(v41 + 40))
                    {
                      *(void *)(v41 + _Block_object_dispose(&STACK[0x940], 8) = 0;
LABEL_567:
                      yy_fatal_error("fatal error - scanner input buffer overflow");
                    }
                    unint64_t v53 = *(void **)(v41 + 8);
                    int v54 = 2 * v51;
                    *(_DWORD *)(v41 + 24) = v54;
                    long long v55 = malloc_type_realloc(v53, v54 + 2, 0xFA553FE1uLL);
                    *(void *)(v41 + _Block_object_dispose(&STACK[0x940], 8) = v55;
                    if (!v55) {
                      goto LABEL_567;
                    }
                    uint64_t v43 = (uint64_t)v55 + (int)v43 - (int)v53;
                    yy_c_buf_p = v43;
                    uint64_t v41 = *(void *)yy_buffer_stack;
                    int v51 = *(_DWORD *)(*(void *)yy_buffer_stack + 24);
                    unsigned int v52 = v51 + v50;
                  }
                  while (!(v51 + v50));
                  uint64_t v46 = __nitems;
                }
                uint64_t v56 = v46;
                if (v52 >= 0x2000) {
                  size_t v57 = 0x2000;
                }
                else {
                  size_t v57 = v52;
                }
                size_t __nitems = v57;
                if (*(_DWORD *)(v41 + 44))
                {
                  size_t v58 = 0;
                  do
                  {
                    int v59 = getc((FILE *)calc_yyin);
                    BOOL v60 = v59 == -1 || v59 == 10;
                    if (v60) {
                      goto LABEL_75;
                    }
                    *(unsigned char *)(*(void *)(*(void *)yy_buffer_stack + 8) + v157 + v58++) = v59;
                  }
                  while (__nitems != v58);
                  size_t v58 = __nitems;
LABEL_75:
                  if (v59 == -1)
                  {
                    if (ferror((FILE *)calc_yyin)) {
LABEL_568:
                    }
                      yy_fatal_error("input in flex scanner failed");
                  }
                  else if (v59 == 10)
                  {
                    *(unsigned char *)(*(void *)(*(void *)yy_buffer_stack + 8) + v157 + v58++) = 10;
                  }
                  yy_n_chars = v58;
LABEL_85:
                  uint64_t v40 = yy_buffer_stack;
                  uint64_t v41 = *(void *)yy_buffer_stack;
                  *(void *)(*(void *)yy_buffer_stack + 32) = v58;
                  uint64_t v46 = v56;
                  if (v58)
                  {
                    int v62 = 0;
                    goto LABEL_93;
                  }
                }
                else
                {
                  *__error() = 0;
                  while (1)
                  {
                    size_t v61 = fread((void *)(*(void *)(*(void *)yy_buffer_stack + 8) + v157), 1uLL, __nitems, (FILE *)calc_yyin);
                    size_t v58 = (int)v61;
                    yy_n_chars = (int)v61;
                    if (v61 << 32) {
                      goto LABEL_85;
                    }
                    if (!ferror((FILE *)calc_yyin)) {
                      break;
                    }
                    if (*__error() != 4) {
                      goto LABEL_568;
                    }
                    *__error() = 0;
                    clearerr((FILE *)calc_yyin);
                  }
                  uint64_t v40 = yy_buffer_stack;
                  uint64_t v41 = *(void *)yy_buffer_stack;
                  uint64_t v46 = v56;
LABEL_55:
                  *(void *)(v41 + 32) = 0;
                }
                if (v46)
                {
                  size_t v58 = 0;
                  int v62 = 2;
                  *(_DWORD *)(v41 + 64) = 2;
                }
                else
                {
                  size_t __nitems = v46;
                  uint64_t v63 = calc_yyin;
                  if (!yy_buffer_stack || (uint64_t v64 = *(void *)yy_buffer_stack) == 0)
                  {
                    calc_yyensure_buffer_stack();
                    uint64_t v64 = calc_yy_create_buffer(calc_yyin);
                    *(void *)yy_buffer_stack = v64;
                  }
                  calc_yy_init_buffer(v64, v63);
                  uint64_t v40 = yy_buffer_stack;
                  uint64_t v41 = *(void *)yy_buffer_stack;
                  size_t v58 = *(void *)(*(void *)yy_buffer_stack + 32);
                  yy_n_chars = v58;
                  yy_c_buf_p = *(void *)(v41 + 16);
                  calc_yytext = yy_c_buf_p;
                  calc_yyin = *(void *)v41;
                  yy_hold_char = *(unsigned char *)yy_c_buf_p;
                  int v62 = 1;
                  LODWORD(v46) = __nitems;
                }
LABEL_93:
                unint64_t v65 = v58 + (int)v46;
                uint64_t v2 = v153;
                if (v65 <= *(int *)(v41 + 24))
                {
                  uint64_t v68 = *(void *)(v41 + 8);
                  uint64_t v8 = v154;
                }
                else
                {
                  size_t v66 = v65 + (v58 >> 1);
                  uint64_t v67 = malloc_type_realloc(*(void **)(v41 + 8), v66, 0xFA553FE1uLL);
                  uint64_t v40 = yy_buffer_stack;
                  *(void *)(*(void *)yy_buffer_stack + _Block_object_dispose(&STACK[0x940], 8) = v67;
                  uint64_t v68 = *(void *)(*(void *)v40 + 8);
                  if (!v68) {
                    yy_fatal_error("out of dynamic memory in yy_get_next_buffer()");
                  }
                  *(_DWORD *)(*(void *)v40 + 24) = v66 - 2;
                  unint64_t v65 = yy_n_chars + v157;
                  uint64_t v8 = v154;
                }
                yy_n_chars = v65;
                *(unsigned char *)(v68 + v65) = 0;
                *(unsigned char *)(v65 + *(void *)(*(void *)v40 + 8) + 1) = 0;
                uint64_t v45 = *(char **)(*(void *)v40 + 8);
                calc_yytext = (uint64_t)v45;
                if (v62 == 1)
                {
                  id v6 = (unsigned __int8 *)&yystos;
                  id v5 = (__int16 *)&yypact;
                  goto LABEL_99;
                }
                if (!v62)
                {
                  int v25 = &v45[~v152 + (int)v32];
                  yy_c_buf_p = (uint64_t)v25;
                  int previous_state = yy_get_previous_state();
                  uint64_t v27 = (uint64_t)v45;
                  int v24 = (unsigned __int8 *)&yystos;
                  id v5 = (__int16 *)&yypact;
                  goto LABEL_26;
                }
                BOOL v60 = v62 == 2;
                id v6 = (unsigned __int8 *)&yystos;
                id v5 = (__int16 *)&yypact;
                if (!v60) {
                  goto LABEL_25;
                }
                uint64_t v44 = *(unsigned char **)(*(void *)yy_buffer_stack + 8);
                uint64_t v42 = yy_n_chars;
LABEL_105:
                uint64_t v32 = &v44[v42];
                yy_c_buf_p = (uint64_t)&v44[v42];
                int v33 = yy_get_previous_state();
                uint64_t v27 = (uint64_t)v45;
LABEL_114:
                uint64_t v28 = &qword_1EA0DF000;
                goto LABEL_35;
              }
              uint64_t v27 = calc_yytext;
              uint64_t v69 = calc_yytext + ~v39 + (int)v32;
              yy_c_buf_p = v69;
              int v70 = yy_get_previous_state();
              if (yy_accept[v70])
              {
                yy_last_accepting_state = v70;
                yy_last_accepting_cpos = v69;
              }
              uint64_t v71 = v70;
              uint64_t v72 = yy_base[v70] + 1;
              id v6 = (unsigned __int8 *)&yystos;
              uint64_t v8 = v154;
              id v5 = (__int16 *)&yypact;
              if (v70 != (__int16)yy_chk[v72])
              {
                do
                {
                  int v73 = (unsigned __int16)yy_def[v71];
                  uint64_t v71 = (__int16)v73;
                  uint64_t v72 = yy_base[(__int16)v73] + 1;
                }
                while (v73 != yy_chk[v72]);
              }
              int v74 = (unsigned __int16)yy_nxt[v72];
              if (!yy_nxt[v72] || v74 == 531)
              {
LABEL_113:
                uint64_t v32 = (char *)yy_last_accepting_cpos;
                int v33 = yy_last_accepting_state;
                goto LABEL_114;
              }
              int v24 = (unsigned __int8 *)&yystos;
              int previous_state = (__int16)v74;
              int v25 = (char *)(v69 + 1);
              yy_c_buf_p = v69 + 1;
              break;
            case 131:
              int v22 = 0u;
LABEL_246:
              yychar = v22;
              int v21 = v158;
              goto LABEL_247;
            default:
              yy_fatal_error("fatal flex scanner internal error--no action found");
          }
          break;
        }
      }
    }
LABEL_247:
    if (v22 <= 0)
    {
      int v81 = 0;
      yychar = 0;
    }
    else
    {
      int v81 = v22 > 0x16A ? 2 : yytranslate[v22];
    }
    uint64_t v82 = (v81 + v21);
    int v158 = v81;
    if (v82 > 0x8F4 || v81 != (__int16)yycheck[v82])
    {
LABEL_261:
      unsigned int v85 = yydefact[(int)v2];
      if (!yydefact[(int)v2]) {
        break;
      }
      goto LABEL_262;
    }
    uint64_t v83 = (__int16)yytable[v82];
    if ((int)v83 > 0)
    {
      if (v83 == 144) {
        goto LABEL_564;
      }
      int v84 = v156 - 1;
      if (!v156) {
        int v84 = 0;
      }
      int v156 = v84;
      if (v22 >= 1) {
        yychar = -2;
      }
      v3 += 1024;
      memcpy(v3, &yylval, 0x400uLL);
      goto LABEL_489;
    }
    if (!yytable[v82] || yytable[v82] == 65525) {
      break;
    }
    unsigned int v85 = -(int)v83;
LABEL_262:
    long long v86 = v8;
    uint64_t v157 = v85;
    uint64_t v87 = yyr2[v85];
    long long v88 = &v3[1024 * (1 - v87)];
    long long v89 = *(void **)v88;
    memcpy(__dst, v88 + 8, sizeof(__dst));
    switch(v85)
    {
      case 2u:
        v104 = (int *)newConstantNode("0.0");
        long long v105 = *(void **)v3;
        evaluateTree(*(void *)v3, (uint64_t)v104);
        g_ErrorCode = v104[51];
        if (g_ErrorCode && !g_forceResult)
        {
          if (g_ResultBuffer) {
            snprintf((char *)g_ResultBuffer, g_BufferLen, "");
          }
          goto LABEL_515;
        }
        if (g_usingNewAPI != 1)
        {
          displayNode(v104);
LABEL_515:
          freeTree(v105);
          freeTree(v104);
          goto LABEL_484;
        }
        g_parseTree = (uint64_t)v105;
        g_resultTree = (uint64_t)v104;
        int v128 = g_isTrivial;
        g_wasTrivial = g_isTrivial;
        if (g_containsCurrencyConversion == 1)
        {
          int v128 = 0;
          g_isTrivial = 0;
        }
        if ((g_foundFirstCoefficient & 1) == 0)
        {
          g_firstCoefficient_0 = 1;
          qword_1EBA2A5C8 = 0x3040000000000000;
        }
        if (g_negationCount == 1) {
          qword_1EBA2A5C8 ^= 0x8000000000000000;
        }
        if (v128)
        {
          int v161 = 0;
          unint64_t v129 = __bid128_div(1uLL, 0x3040000000000000uLL, 0x1EuLL, 0x3040000000000000uLL, 4, &v161);
          uint64_t v130 = qword_1EBA2A5C8;
          unint64_t v131 = g_firstCoefficient_0;
          v154 = (char *)v129;
          size_t __nitems = v132;
          LODWORD(v153) = __bid128_quiet_less(g_firstCoefficient_0, qword_1EBA2A5C8 & 0x7FFFFFFFFFFFFFFFLL, v129, v132, &v161);
          unint64_t v133 = treeDecimalValue((double *)v104);
          if (v153)
          {
            unint64_t v135 = __bid128_sub(v133, v134, v131, v130, 4, &v161);
          }
          else
          {
            unint64_t v144 = __bid128_div(v133, v134, v131, v130, 4, &v161);
            unint64_t v135 = __bid128_add(v144, v145, 1uLL, 0xB040000000000000, 4, &v161);
          }
          if (!__bid128_quiet_less(v135, v136 & 0x7FFFFFFFFFFFFFFFLL, (unint64_t)v154, __nitems, &v161))g_isTrivial = 0; {
        }
          }
LABEL_484:
        v125 = &v3[-1024 * v87];
        v7 -= 2 * v87;
        int v3 = v125 + 1024;
        *((void *)v125 + 12_Block_object_dispose(&STACK[0x940], 8) = v89;
        memcpy(v125 + 1032, __dst, 0x3F8uLL);
        uint64_t v126 = yyr1[v157] - 119;
        uint64_t v127 = (*(__int16 *)v7 + yypgoto[v126]);
        if (v127 <= 0x8F4 && yycheck[v127] == *(unsigned __int16 *)v7) {
          uint64_t v83 = (__int16)yytable[v127];
        }
        else {
          uint64_t v83 = yydefgoto[v126];
        }
        uint64_t v8 = v86;
        id v6 = (unsigned __int8 *)&yystos;
        break;
      case 4u:
        long long v90 = *(void **)v3;
        long long v91 = functionCompose;
        goto LABEL_480;
      case 5u:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        goto LABEL_321;
      case 6u:
        long long v90 = *(void **)v3;
        v97 = (double *)*((void *)v3 - 256);
LABEL_321:
        v98 = (void (*)(uint64_t, uint64_t))functionConvert;
        goto LABEL_428;
      case 7u:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        goto LABEL_324;
      case 8u:
        long long v90 = *(void **)v3;
        v97 = (double *)*((void *)v3 - 256);
LABEL_324:
        v98 = (void (*)(uint64_t, uint64_t))functionImplicitConvert;
        goto LABEL_428;
      case 0xCu:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionOR;
        goto LABEL_428;
      case 0xDu:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionNOR;
        goto LABEL_428;
      case 0xFu:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionXOR;
        goto LABEL_428;
      case 0x11u:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionLeftShift;
        goto LABEL_428;
      case 0x12u:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionRightShift;
        goto LABEL_428;
      case 0x13u:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionLeftRotate;
        goto LABEL_428;
      case 0x14u:
        if (g_allowLaTeX) {
          goto LABEL_346;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionRightRotate;
        goto LABEL_428;
      case 0x16u:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        if ((void (*)(uint64_t, uint64_t))v90[1] != functionPercent
          && *((void (**)(uint64_t, uint64_t))v97 + 1) == functionPercent
          && (uint64_t v138 = *((void *)v97 + 2)) != 0
          && ((v139 = *(void (**)(uint64_t, uint64_t))(v138 + 8), v139 == functionConstant)
           || *(unsigned char *)(v138 + 200)
           || (v139 == functionPow || v139 == functionFactorial)
           && (uint64_t v146 = *(void *)(v138 + 16)) != 0
           && (*(void (**)(uint64_t, uint64_t))(v146 + 8) == functionConstant || *(unsigned char *)(v146 + 200))))
        {
          v98 = functionPercentIncrease;
        }
        else
        {
          v98 = functionAdd;
        }
        goto LABEL_428;
      case 0x17u:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        if ((void (*)(uint64_t, uint64_t))v90[1] != functionPercent
          && *((void (**)(uint64_t, uint64_t))v97 + 1) == functionPercent
          && (uint64_t v140 = *((void *)v97 + 2)) != 0
          && ((v141 = *(void (**)(uint64_t, uint64_t))(v140 + 8), v141 == functionConstant)
           || *(unsigned char *)(v140 + 200)
           || (v141 == functionPow || v141 == functionFactorial)
           && (uint64_t v147 = *(void *)(v140 + 16)) != 0
           && (*(void (**)(uint64_t, uint64_t))(v147 + 8) == functionConstant || *(unsigned char *)(v147 + 200))))
        {
          v98 = functionPercentDecrease;
        }
        else
        {
          v98 = functionSubtract;
        }
        goto LABEL_428;
      case 0x19u:
        if (g_allowLaTeX)
        {
LABEL_346:
          long long v90 = *(void **)v3;
          goto LABEL_408;
        }
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionAND;
        goto LABEL_428;
      case 0x1Bu:
        uint64_t v106 = v3 - 1024;
        v107 = __calc_yyparse_block_invoke(*((void **)v3 - 128));
        v108 = __calc_yyparse_block_invoke(*(void **)v3);
        v109 = v108;
        if (v107)
        {
          if (v108)
          {
            if ((void (*)(uint64_t, uint64_t))v108[1] == functionConstant
              && (void (*)(uint64_t, uint64_t))v107[1] == functionUnit)
            {
              int SmallestID = UnitCountNextSmallestID((uint64_t)(v107 + 9));
              if (SmallestID)
              {
                v109 = newUnitIDNode(SmallestID);
                *(void *)int v3 = newTreeObject((uint64_t)functionCoefficientUnit, *(void *)v3, (uint64_t)v109);
              }
            }
          }
        }
        if (v107 && v109)
        {
          BOOL ShouldImplicitlyAdd = UnitCountShouldImplicitlyAdd((uint64_t)(v107 + 9), (uint64_t)(v109 + 9));
          long long v90 = *(void **)v106;
          v97 = *(double **)v3;
          if (ShouldImplicitlyAdd)
          {
            v98 = functionImplicitAdd;
            goto LABEL_428;
          }
        }
        else
        {
          long long v90 = *(void **)v106;
          v97 = *(double **)v3;
        }
        if (*((unsigned char *)v90 + 200)
          || *((unsigned char *)v97 + 200)
          || !g_ignoreProbableSearches
          || (v137 = (void (*)(uint64_t, uint64_t))*((void *)v97 + 1), v137 == functionPow)
          || v137 == functionSqrRootInline
          || v137 == functionCubeRootInline
          || *((unsigned char *)v97 + 203))
        {
LABEL_287:
          v98 = functionMultiply;
          goto LABEL_428;
        }
LABEL_294:
        v100 = functionFail;
        long long v90 = v89;
        goto LABEL_481;
      case 0x1Cu:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        if ((void (*)(uint64_t, uint64_t))v90[1] == functionConstant
          && *((void (**)(uint64_t, uint64_t))v97 + 1) == functionUnit)
        {
          goto LABEL_376;
        }
        goto LABEL_287;
      case 0x1Du:
        long long v90 = (void *)*((void *)v3 - 256);
        long long v89 = *(void **)v3;
        if (*((unsigned char *)v90 + 201)
          || (void (*)(uint64_t, uint64_t))v89[1] != functionCoefficientUnit
          || *((unsigned char *)v89 + 200))
        {
          v112 = functionDivide;
          goto LABEL_372;
        }
        uint64_t v142 = v89[2];
        v143 = functionDivide;
        goto LABEL_526;
      case 0x1Eu:
      case 0x1Fu:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        v98 = functionFMod;
        goto LABEL_428;
      case 0x20u:
      case 0x23u:
        long long v90 = (void *)*((void *)v3 - 128);
        long long v91 = functionPercent;
        goto LABEL_480;
      case 0x21u:
        v113 = (void *)*((void *)v3 - 128);
        v97 = newConstantNode("0.0174532925199432957692369076848861271344287188854172");
        v100 = functionMultiply;
        long long v90 = v113;
        goto LABEL_482;
      case 0x25u:
      case 0x37u:
      case 0x46u:
      case 0x48u:
        long long v90 = *(void **)v3;
        long long v91 = functionNegate;
        goto LABEL_480;
      case 0x27u:
        long long v90 = (void *)*((void *)v3 - 256);
        long long v89 = *(void **)v3;
        goto LABEL_368;
      case 0x28u:
        if (!g_allowLaTeX) {
          goto LABEL_477;
        }
        long long v90 = (void *)*((void *)v3 - 512);
        long long v89 = (void *)*((void *)v3 - 128);
LABEL_368:
        if (*((unsigned char *)v90 + 201)
          || (void (*)(uint64_t, uint64_t))v89[1] != functionCoefficientUnit
          || *((unsigned char *)v89 + 200))
        {
          v112 = functionPow;
LABEL_372:
          v100 = v112;
          v97 = (double *)v89;
          goto LABEL_482;
        }
        uint64_t v142 = v89[2];
        v143 = functionPow;
LABEL_526:
        v89[2] = newTreeObject((uint64_t)v143, (uint64_t)v90, v142);
        goto LABEL_484;
      case 0x2Au:
        long long v90 = (void *)*((void *)v3 - 128);
        long long v91 = functionFactorial;
        goto LABEL_480;
      case 0x2Cu:
        long long v90 = newTreeObject((uint64_t)functionSameCurrency, *((void *)v3 - 256), *(void *)v3);
        *((void *)v3 - 256) = v90;
        v97 = (double *)*((void *)v3 - 128);
        goto LABEL_287;
      case 0x2Du:
        long long v90 = (void *)*((void *)v3 - 128);
        v97 = *(double **)v3;
LABEL_376:
        v98 = functionCoefficientUnit;
        goto LABEL_428;
      case 0x2Eu:
      case 0x32u:
      case 0x49u:
      case 0x4Au:
        long long v90 = (void *)*((void *)v3 - 128);
        v97 = *(double **)v3;
        goto LABEL_287;
      case 0x34u:
        long long v90 = (void *)*((void *)v3 - 256);
        v97 = *(double **)v3;
        goto LABEL_427;
      case 0x35u:
        if (!g_allowLaTeX)
        {
LABEL_477:
          long long v99 = v3 - 1024;
          goto LABEL_478;
        }
        long long v90 = (void *)*((void *)v3 - 512);
LABEL_413:
        v122 = (double **)(v3 - 1024);
        goto LABEL_426;
      case 0x3Du:
      case 0x3Fu:
        long long v89 = newUnitNode(v3);
        if (!g_allowUnits) {
          goto LABEL_294;
        }
        goto LABEL_484;
      case 0x40u:
        v114 = newConstantNode((unsigned __int8 *)v3);
        goto LABEL_483;
      case 0x41u:
        v115 = "3.14159265358979323846264338327950288";
        goto LABEL_384;
      case 0x42u:
        v115 = "1.61803398874989484820458683436563811";
        goto LABEL_384;
      case 0x43u:
        v115 = "2.71828182845904523536028747135266249";
LABEL_384:
        long long v89 = newConstantNode((unsigned __int8 *)v115);
        *((unsigned char *)v89 + 203) = 1;
        goto LABEL_484;
      case 0x44u:
        v114 = newVariableNode(v3);
        goto LABEL_483;
      case 0x4Bu:
        v100 = (void (*)(uint64_t, uint64_t))*((void *)v3 - 128);
        long long v90 = *(void **)v3;
        goto LABEL_481;
      case 0x4Cu:
        uint64_t v116 = *((void *)v3 - 384);
        uint64_t v101 = *(void *)v3;
        goto LABEL_412;
      case 0x4Du:
        if (!g_allowLaTeX) {
          goto LABEL_429;
        }
        uint64_t v117 = *((void *)v3 - 640);
        uint64_t v118 = *(void *)v3;
        goto LABEL_425;
      case 0x4Eu:
        if (g_allowLaTeX)
        {
          v119 = v3 - 3072;
          goto LABEL_407;
        }
        v100 = (void (*)(uint64_t, uint64_t))*((void *)v3 - 640);
        long long v90 = (void *)*((void *)v3 - 384);
        v97 = (double *)*((void *)v3 - 128);
        goto LABEL_482;
      case 0x4Fu:
        long long v90 = (void *)*((void *)v3 - 384);
        if (!g_allowLaTeX) {
          goto LABEL_479;
        }
        goto LABEL_408;
      case 0x50u:
      case 0x65u:
        long long v90 = *(void **)v3;
        long long v91 = functionLog;
        goto LABEL_480;
      case 0x51u:
      case 0x66u:
        uint64_t v101 = *(void *)v3;
        long long v102 = functionLog;
        goto LABEL_411;
      case 0x52u:
        long long v90 = (void *)*((void *)v3 - 384);
        if (g_allowLaTeX) {
          goto LABEL_408;
        }
        v97 = (double *)*((void *)v3 - 128);
        goto LABEL_421;
      case 0x53u:
      case 0x5Bu:
      case 0x5Eu:
        if (g_allowLaTeX) {
          goto LABEL_406;
        }
        long long v99 = v3 - 3072;
        goto LABEL_478;
      case 0x54u:
        v120 = v3 - 1024;
        goto LABEL_420;
      case 0x55u:
      case 0x68u:
        long long v90 = (void *)*((void *)v3 - 128);
        long long v91 = functionCeil;
        goto LABEL_480;
      case 0x56u:
      case 0x69u:
        long long v90 = (void *)*((void *)v3 - 128);
        long long v91 = functionFloor;
        goto LABEL_480;
      case 0x57u:
        long long v90 = *(void **)v3;
        if (g_allowLaTeX) {
          goto LABEL_408;
        }
        long long v91 = functionRound;
        goto LABEL_480;
      case 0x58u:
        uint64_t v101 = *(void *)v3;
        long long v102 = functionRound;
        goto LABEL_411;
      case 0x59u:
        if (!g_allowLaTeX) {
          goto LABEL_429;
        }
        uint64_t v118 = *(void *)v3;
        v121 = functionRound;
        goto LABEL_424;
      case 0x5Au:
        if (g_allowLaTeX) {
          goto LABEL_406;
        }
        long long v90 = (void *)*((void *)v3 - 384);
        v97 = (double *)*((void *)v3 - 128);
        v98 = functionRoundNearest;
        goto LABEL_428;
      case 0x5Cu:
        long long v90 = (void *)*((void *)v3 - 384);
        v97 = (double *)*((void *)v3 - 128);
        v98 = functionFlip;
        goto LABEL_428;
      case 0x5Du:
        if (!g_allowLaTeX)
        {
          long long v90 = (void *)*((void *)v3 - 384);
          v97 = (double *)*((void *)v3 - 128);
LABEL_513:
          v98 = functionRoot;
          goto LABEL_428;
        }
LABEL_406:
        v119 = v3 - 1024;
LABEL_407:
        long long v90 = *(void **)v119;
LABEL_408:
        long long v91 = functionUnsupportedMath;
        goto LABEL_480;
      case 0x5Fu:
        long long v90 = *(void **)v3;
        goto LABEL_417;
      case 0x60u:
        uint64_t v101 = *(void *)v3;
        long long v102 = functionSqrRoot;
LABEL_411:
        uint64_t v116 = (uint64_t)v102;
LABEL_412:
        long long v90 = newTreeObject(v116, v101, 0);
        goto LABEL_413;
      case 0x61u:
        if (!g_allowLaTeX) {
          goto LABEL_429;
        }
        uint64_t v118 = *(void *)v3;
        v121 = functionSqrRoot;
        goto LABEL_424;
      case 0x62u:
        long long v90 = (void *)*((void *)v3 - 128);
LABEL_417:
        long long v91 = functionSqrRoot;
        goto LABEL_480;
      case 0x63u:
        long long v90 = (void *)*((void *)v3 - 128);
        v97 = (double *)*((void *)v3 - 512);
        goto LABEL_513;
      case 0x64u:
        v120 = v3 - 2048;
LABEL_420:
        long long v90 = *(void **)v120;
        v97 = *(double **)v3;
LABEL_421:
        v98 = functionLogBase;
        goto LABEL_428;
      case 0x67u:
        if (!g_allowLaTeX)
        {
LABEL_429:
          long long v99 = v3 - 2048;
LABEL_478:
          long long v90 = *(void **)v99;
          goto LABEL_479;
        }
        uint64_t v118 = *(void *)v3;
        v121 = functionLog;
LABEL_424:
        uint64_t v117 = (uint64_t)v121;
LABEL_425:
        long long v90 = newTreeObject(v117, v118, 0);
        v122 = (double **)(v3 - 2048);
LABEL_426:
        v97 = *v122;
LABEL_427:
        v98 = functionPow;
LABEL_428:
        v100 = v98;
        goto LABEL_482;
      case 0x6Au:
        long long v90 = (void *)*((void *)v3 - 128);
        long long v91 = functionFabs;
        goto LABEL_480;
      case 0x6Bu:
        long long v90 = (void *)*((void *)v3 - 512);
        v97 = (double *)*((void *)v3 - 128);
        v98 = functionDivide;
        goto LABEL_428;
      case 0x6Cu:
        long long v103 = functionSqrRootInline;
        goto LABEL_475;
      case 0x6Du:
        long long v103 = functionCubeRootInline;
        goto LABEL_475;
      case 0x6Eu:
        BOOL v123 = g_allowLaTeX == 0;
        v124 = functionSqrRoot;
        goto LABEL_450;
      case 0x6Fu:
        BOOL v123 = g_allowLaTeX == 0;
        v124 = functionCubeRoot;
        goto LABEL_450;
      case 0x70u:
        BOOL v123 = g_allowLaTeX == 0;
        v124 = functionExp;
        goto LABEL_450;
      case 0x71u:
      case 0x92u:
        long long v103 = functionLn;
        goto LABEL_475;
      case 0x72u:
      case 0x93u:
        long long v103 = functionSine;
        goto LABEL_475;
      case 0x73u:
      case 0x94u:
        long long v103 = functionCos;
        goto LABEL_475;
      case 0x74u:
      case 0x95u:
        long long v103 = functionTan;
        goto LABEL_475;
      case 0x75u:
        long long v103 = functionSinD;
        goto LABEL_475;
      case 0x76u:
        long long v103 = functionCosD;
        goto LABEL_475;
      case 0x77u:
        long long v103 = functionTanD;
        goto LABEL_475;
      case 0x78u:
      case 0x96u:
        long long v103 = functionASin;
        goto LABEL_475;
      case 0x79u:
      case 0x97u:
        long long v103 = functionACos;
        goto LABEL_475;
      case 0x7Au:
      case 0x98u:
        long long v103 = functionATan;
        goto LABEL_475;
      case 0x7Bu:
        long long v103 = functionASinD;
        goto LABEL_475;
      case 0x7Cu:
        long long v103 = functionACosD;
        goto LABEL_475;
      case 0x7Du:
        long long v103 = functionATanD;
        goto LABEL_475;
      case 0x7Eu:
      case 0x99u:
        long long v103 = functionSinH;
        goto LABEL_475;
      case 0x7Fu:
      case 0x9Au:
        long long v103 = functionCosH;
        goto LABEL_475;
      case 0x80u:
      case 0x9Bu:
        long long v103 = functionTanH;
        goto LABEL_475;
      case 0x81u:
        long long v103 = functionASinH;
        goto LABEL_475;
      case 0x82u:
        long long v103 = functionACosH;
        goto LABEL_475;
      case 0x83u:
        long long v103 = functionATanH;
        goto LABEL_475;
      case 0x84u:
        BOOL v123 = g_allowLaTeX == 0;
        v124 = functionCeil;
        goto LABEL_450;
      case 0x85u:
        BOOL v123 = g_allowLaTeX == 0;
        v124 = functionFloor;
        goto LABEL_450;
      case 0x86u:
        long long v103 = functionRInt;
        goto LABEL_475;
      case 0x87u:
        BOOL v123 = g_allowLaTeX == 0;
        v124 = functionFabs;
LABEL_450:
        if (v123) {
          long long v89 = v124;
        }
        else {
          long long v89 = functionUnsupportedMath;
        }
        goto LABEL_484;
      case 0x88u:
        long long v103 = functionJ0;
        goto LABEL_475;
      case 0x89u:
        long long v103 = functionJ1;
        goto LABEL_475;
      case 0x8Au:
        long long v103 = functionY0;
        goto LABEL_475;
      case 0x8Bu:
        long long v103 = functionY1;
        goto LABEL_475;
      case 0x8Cu:
        long long v103 = functionLGamma;
        goto LABEL_475;
      case 0x8Du:
        long long v103 = functionERF;
        goto LABEL_475;
      case 0x8Eu:
        long long v103 = functionERFC;
        goto LABEL_475;
      case 0x8Fu:
        long long v103 = functionFactorial;
        goto LABEL_475;
      case 0x90u:
        long long v103 = functionNOT;
        goto LABEL_475;
      case 0x91u:
        long long v103 = functionNEG;
        goto LABEL_475;
      case 0x9Cu:
        long long v103 = functionSec;
        goto LABEL_475;
      case 0x9Du:
        long long v103 = functionCsc;
        goto LABEL_475;
      case 0x9Eu:
        long long v103 = functionCot;
        goto LABEL_475;
      case 0x9Fu:
        long long v103 = functionSecH;
        goto LABEL_475;
      case 0xA0u:
        long long v103 = functionCscH;
        goto LABEL_475;
      case 0xA1u:
        long long v103 = functionCotH;
        goto LABEL_475;
      case 0xA2u:
        long long v103 = functionPow;
        goto LABEL_475;
      case 0xA3u:
        long long v103 = functionFMod;
        goto LABEL_475;
      case 0xA4u:
        long long v103 = functionHypot;
        goto LABEL_475;
      case 0xA5u:
        long long v103 = functionRem;
        goto LABEL_475;
      case 0xA6u:
        long long v103 = functionMin;
        goto LABEL_475;
      case 0xA7u:
        long long v103 = functionMax;
LABEL_475:
        long long v89 = v103;
        goto LABEL_484;
      case 0xA8u:
      case 0xA9u:
        *(unsigned char *)(*((void *)v3 - 128) + 200) = 1;
        long long v89 = (void *)*((void *)v3 - 128);
        goto LABEL_484;
      case 0xAAu:
      case 0xABu:
        if (g_allowPartialExpressions)
        {
          g_isPartialExpression = 1;
          *(unsigned char *)(*(void *)v3 + 200) = 1;
          long long v89 = *(void **)v3;
        }
        else
        {
          long long v90 = *(void **)v3;
LABEL_479:
          long long v91 = functionFail;
LABEL_480:
          v100 = v91;
LABEL_481:
          v97 = 0;
LABEL_482:
          v114 = newTreeObject((uint64_t)v100, (uint64_t)v90, (uint64_t)v97);
LABEL_483:
          long long v89 = v114;
        }
        goto LABEL_484;
      default:
        goto LABEL_484;
    }
LABEL_489:
    v7 += 2;
    uint64_t v2 = v83;
    unint64_t v4 = v160;
  }
  if (v156 == 3)
  {
    if (yychar <= 0)
    {
      if (!yychar)
      {
        uint64_t v148 = 1;
        goto LABEL_549;
      }
    }
    else
    {
      if ((v158 - 121) < 0x1B || (v158 - 150) <= 1) {
        freeTree((void *)yylval);
      }
      yychar = -2;
    }
  }
  else if (!v156)
  {
    ++yynerrs;
  }
  for (__int16 i = v21; ; __int16 i = v5[v96])
  {
    if (i >= -1)
    {
      uint64_t v93 = i + 1;
      if (yycheck[v93] == 1)
      {
        int v94 = (__int16)yytable[v93];
        if (v94 > 0)
        {
          uint64_t v83 = (unsigned __int16)v94;
          if ((unsigned __int16)v94 == 144)
          {
LABEL_564:
            uint64_t v148 = 0;
            goto LABEL_543;
          }
          v3 += 1024;
          memcpy(v3, &yylval, 0x400uLL);
          int v156 = 3;
          goto LABEL_489;
        }
      }
    }
    if (v7 == v8) {
      break;
    }
    int v95 = v6[(int)v2];
    if ((v95 - 121) < 0x1B || (v95 - 150) <= 1) {
      freeTree(*(void **)v3);
    }
    v3 -= 1024;
    uint64_t v96 = *((__int16 *)v7 - 1);
    v7 -= 2;
    LODWORD(v2) = v96;
  }
  uint64_t v148 = 1;
  id v7 = v8;
LABEL_543:
  BOOL v149 = yychar == -2 || yychar == 0;
  if (!v149 && ((v158 - 121) < 0x1B || (v158 - 150) <= 1)) {
    freeTree((void *)yylval);
  }
LABEL_549:
  while (v7 != v8)
  {
    int v150 = v6[*(__int16 *)v7];
    if ((v150 - 121) < 0x1B || (v150 - 150) <= 1) {
      freeTree(*(void **)v3);
    }
    v3 -= 1024;
    v7 -= 2;
  }
  if (v8 != (char *)v164) {
    free(v8);
  }
  return v148;
}

void *__calc_yyparse_block_invoke(void *result)
{
  for (; result; __n128 result = (void *)result[3])
  {
    unint64_t v1 = (void (*)(uint64_t, uint64_t))result[1];
    if (v1 == functionConstant) {
      break;
    }
    if (v1 == functionCoefficientUnit)
    {
      uint64_t v2 = result[2];
      if (v2)
      {
        if (*(void (**)(uint64_t, uint64_t))(v2 + 8) == functionConstant && !*(unsigned char *)(v2 + 200)) {
          return (void *)result[3];
        }
      }
    }
    if (v1 != functionImplicitAdd) {
      return 0;
    }
  }
  return result;
}

uint64_t calc_parser_read_buffer(uint64_t a1, unint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  if (a2 >= 0x401)
  {
    uint64_t v8 = (_DWORD *)&unk_1EBA2A000;
    int v9 = 14;
LABEL_9:
    v8[490] = v9;
    if (a7) {
      *a7 = v9;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = calc_yy_scan_bytes(a1, a2);
  if (!v14)
  {
    uint64_t v8 = &unk_1EBA2A000;
    int v9 = 7;
    goto LABEL_9;
  }
  uint64_t v16 = v14;
  g_PreferredType = a3;
  g_Precision = a4;
  g_ResultBuffer = a5;
  g_BufferLen = a6;
  g_ErrorCode = 0;
  uint64_t v17 = calc_yyparse((uint64_t)v14, v15);
  if (a7) {
    *a7 = g_ErrorCode;
  }
  if (yy_buffer_stack) {
    unint64_t v18 = *(char **)yy_buffer_stack;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 == v16) {
    *(void *)yy_buffer_stack = 0;
  }
  if (*((_DWORD *)v16 + 10)) {
    free(*((void **)v16 + 1));
  }
  free(v16);
  return v17;
}

size_t cleanUnit()
{
  uint64_t v0 = calc_yytext;
  size_t result = strlen((const char *)calc_yytext);
  if (result - 1 < 2)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 0;
    do
    {
      *((unsigned char *)&yylval + v2) = *(unsigned char *)(v0 + 1 + v2);
      ++v2;
    }
    while (result - 2 != v2);
  }
  *((unsigned char *)&yylval + v2) = 0;
  return result;
}

size_t cleanCurrency()
{
  size_t result = strlen((const char *)calc_yytext);
  if (result - 1 < 3)
  {
    size_t v1 = 0;
  }
  else
  {
    size_t v1 = result - 3;
    uint64_t v2 = (char *)(calc_yytext + 2);
    int v3 = &yylval;
    size_t v4 = result - 3;
    do
    {
      char v5 = *v2++;
      *(unsigned char *)int v3 = v5;
      int v3 = (uint64_t *)((char *)v3 + 1);
      --v4;
    }
    while (v4);
  }
  *((unsigned char *)&yylval + v1) = 0;
  return result;
}

void *calc_yyensure_buffer_stack()
{
  size_t result = (void *)yy_buffer_stack;
  if (!yy_buffer_stack)
  {
    size_t result = malloc_type_malloc(8uLL, 0xFE8DD733uLL);
    yy_buffer_stack = (uint64_t)result;
    if (result)
    {
      *size_t result = 0;
      uint64_t v2 = 1;
      goto LABEL_7;
    }
LABEL_9:
    yy_fatal_error("out of dynamic memory in yyensure_buffer_stack()");
  }
  if (yy_buffer_stack_max != 1) {
    return result;
  }
  size_t result = malloc_type_realloc((void *)yy_buffer_stack, 0x48uLL, 0xFA553FE1uLL);
  yy_buffer_stack = (uint64_t)result;
  if (!result) {
    goto LABEL_9;
  }
  size_t v1 = &result[yy_buffer_stack_max];
  *size_t v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  uint64_t v2 = 9;
LABEL_7:
  yy_buffer_stack_max = v2;
  return result;
}

uint64_t calc_yy_create_buffer(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x48uLL, 0xFE8DD733uLL);
  if (!v2 {
    || (uint64_t v3 = (uint64_t)v2,
  }
        v2[6] = 0x4000,
        size_t v4 = malloc_type_malloc(0x4002uLL, 0xFE8DD733uLL),
        (*(void *)(v3 + _Block_object_dispose(&STACK[0x940], 8) = v4) == 0))
  {
    yy_fatal_error("out of dynamic memory in yy_create_buffer()");
  }
  *(_DWORD *)(v3 + 40) = 1;
  calc_yy_init_buffer(v3, a1);
  return v3;
}

uint64_t yy_get_previous_state()
{
  uint64_t result = yy_start;
  size_t v1 = (unsigned char *)calc_yytext;
  if (calc_yytext < (unint64_t)yy_c_buf_p)
  {
    do
    {
      if (*v1) {
        uint64_t v2 = yy_ec[*v1];
      }
      else {
        uint64_t v2 = 1u;
      }
      if (yy_accept[(int)result])
      {
        yy_last_accepting_state = result;
        yy_last_accepting_cpos = (uint64_t)v1;
      }
      uint64_t v3 = (int)result;
      uint64_t v4 = yy_base[(int)result] + v2;
      if (result != (__int16)yy_chk[v4])
      {
        do
        {
          uint64_t v3 = yy_def[v3];
          if (v3 >= 532) {
            uint64_t v2 = *((unsigned __int8 *)&yy_meta + v2);
          }
          uint64_t v4 = yy_base[v3] + v2;
        }
        while (yy_chk[v4] != (unsigned __int16)v3);
      }
      uint64_t result = yy_nxt[v4];
      ++v1;
    }
    while (v1 != (unsigned char *)yy_c_buf_p);
  }
  return result;
}

void yy_fatal_error(const char *a1)
{
}

int *calc_yy_init_buffer(uint64_t a1, uint64_t a2)
{
  int v4 = *__error();
  *(void *)(a1 + 32) = 0;
  **(unsigned char **)(a1 + _Block_object_dispose(&STACK[0x940], 8) = 0;
  *(unsigned char *)(*(void *)(a1 + 8) + 1) = 0;
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x940], 8) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  char v5 = (uint64_t *)yy_buffer_stack;
  if (!yy_buffer_stack)
  {
    if (a1)
    {
      uint64_t v6 = 0;
      *(void *)a1 = a2;
      *(_DWORD *)(a1 + 60) = 1;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (*(void *)yy_buffer_stack == a1)
  {
LABEL_6:
    id v7 = *(uint64_t **)yy_buffer_stack;
    yy_n_chars = *(void *)(*(void *)yy_buffer_stack + 32);
    yy_c_buf_p = v7[2];
    calc_yytext = yy_c_buf_p;
    calc_yyin = *v7;
    yy_hold_char = *(unsigned char *)yy_c_buf_p;
  }
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  uint64_t v6 = *v5;
LABEL_8:
  if (v6 != a1) {
    *(void *)(a1 + 52) = 1;
  }
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t result = __error();
  *uint64_t result = v4;
  return result;
}

char *calc_yy_scan_bytes(uint64_t a1, unint64_t a2)
{
  int v4 = malloc_type_malloc(a2 + 2, 0xFE8DD733uLL);
  if (!v4) {
    yy_fatal_error("out of dynamic memory in yy_scan_bytes()");
  }
  char v5 = v4;
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      *((unsigned char *)v4 + v6) = *(unsigned char *)(a1 + v6);
      ++v6;
    }
    while (a2 != v6);
    *(_WORD *)((char *)v4 + a2) = 0;
    if (a2 > 0xFFFFFFFFFFFFFFFDLL) {
LABEL_16:
    }
      yy_fatal_error("bad buffer in yy_scan_bytes()");
  }
  else
  {
    *int v4 = 0;
  }
  if (*((unsigned char *)v4 + a2 + 1)) {
    goto LABEL_16;
  }
  id v7 = (char *)malloc_type_malloc(0x48uLL, 0xFE8DD733uLL);
  if (!v7) {
    yy_fatal_error("out of dynamic memory in yy_scan_buffer()");
  }
  uint64_t v8 = v7;
  *((_DWORD *)v7 + 6) = a2;
  *((void *)v7 + 1) = v5;
  *((void *)v7 + 2) = v5;
  *(void *)id v7 = 0;
  *((void *)v7 + 4) = (int)a2;
  *((void *)v7 + 5) = 0;
  *((_DWORD *)v7 + 12) = 1;
  *(void *)(v7 + 60) = 0;
  calc_yyensure_buffer_stack();
  uint64_t v9 = yy_buffer_stack;
  if (!yy_buffer_stack) {
    goto LABEL_14;
  }
  if (*(char **)yy_buffer_stack != v8)
  {
    if (*(void *)yy_buffer_stack)
    {
      uint64_t v10 = yy_c_buf_p;
      *(unsigned char *)yy_c_buf_p = yy_hold_char;
      *(void *)(*(void *)v9 + 16) = v10;
      *(void *)(*(void *)v9 + 32) = yy_n_chars;
    }
LABEL_14:
    *(void *)uint64_t v9 = v8;
    yy_n_chars = *((void *)v8 + 4);
    yy_c_buf_p = *((void *)v8 + 2);
    calc_yytext = yy_c_buf_p;
    calc_yyin = *(void *)v8;
    yy_hold_char = *(unsigned char *)yy_c_buf_p;
  }
  *((_DWORD *)v8 + 10) = 1;
  return v8;
}

unint64_t __dpml_bid_exception(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = *a1 >> 27;
  *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x940], 8) = v2;
  *a1 = v1 & 0xFFFFFFFF07FFFFFFLL;
  a1[3] = 0;
  if ((v1 & 0x8000000000000000) != 0) {
    return 0;
  }
  int v4 = (char *)&__dpml_response_table + 8 * (v1 & 0xFFFFFFFF07FFFFFFLL);
  int v5 = v4[6];
  *((unsigned char *)a1 + 49) = v4[6];
  a1[4] = (unint64_t)&__dpml_bid_globals_table + 32 * v4[7] + 8 * (char)v2;
  if (v5)
  {
    if (v5 < 3) {
      int v6 = 33;
    }
    else {
      int v6 = 34;
    }
    *__error() = v6;
    if ((a1[3] >> *((unsigned char *)a1 + 49))) {
      raise(8);
    }
  }
  return a1[4];
}

double bid_f128_mul(__n128 *a1, uint64_t *a2, uint64_t *a3)
{
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v7, 0, sizeof(v7));
  if ((__dpml_bid_unpack2__(a2, a3, (uint64_t)v10, (uint64_t)v9, qword_1BDDBAE60, (uint64_t)a1, (uint64_t *)v7) & 0x8000000000000000) == 0)
  {
    memset(v8, 0, sizeof(v8));
    __dpml_bid_multiply__(v10, v9, v8);
    if (LODWORD(v8[0])) {
      uint64_t v5 = 173;
    }
    else {
      uint64_t v5 = 172;
    }
    if (LODWORD(v8[0])) {
      uint64_t v6 = 175;
    }
    else {
      uint64_t v6 = 174;
    }
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v8, a1, v5, v6).n128_u64[0];
  }
  return result;
}

double bid_f128_div(__n128 *a1, uint64_t *a2, uint64_t *a3)
{
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v7, 0, sizeof(v7));
  if ((__dpml_bid_unpack2__(a2, a3, (uint64_t)v10, (uint64_t)v9, qword_1BDDBAE98, (uint64_t)a1, (uint64_t *)v7) & 0x8000000000000000) == 0)
  {
    memset(v8, 0, sizeof(v8));
    __dpml_bid_divide__((uint64_t)v10, v9, 0, (uint64_t)v8);
    if (LODWORD(v8[0])) {
      uint64_t v5 = 173;
    }
    else {
      uint64_t v5 = 172;
    }
    if (LODWORD(v8[0])) {
      uint64_t v6 = 175;
    }
    else {
      uint64_t v6 = 174;
    }
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v8, a1, v5, v6).n128_u64[0];
  }
  return result;
}

double bid_f128_add(__n128 *a1, uint64_t *a2, uint64_t *a3)
{
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v7, 0, sizeof(v7));
  if ((__dpml_bid_unpack2__(a2, a3, (uint64_t)v10, (uint64_t)v9, qword_1BDDBAEF0, (uint64_t)a1, (uint64_t *)v7) & 0x8000000000000000) == 0)
  {
    memset(v8, 0, sizeof(v8));
    __dpml_bid_addsub__((uint64_t)v10, v9, 0, (uint64_t)v8);
    if (LODWORD(v8[0])) {
      uint64_t v5 = 173;
    }
    else {
      uint64_t v5 = 172;
    }
    if (LODWORD(v8[0])) {
      uint64_t v6 = 175;
    }
    else {
      uint64_t v6 = 174;
    }
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v8, a1, v5, v6).n128_u64[0];
  }
  return result;
}

double bid_f128_sub(__n128 *a1, uint64_t *a2, uint64_t *a3)
{
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v7, 0, sizeof(v7));
  if ((__dpml_bid_unpack2__(a2, a3, (uint64_t)v10, (uint64_t)v9, qword_1BDDBAF28, (uint64_t)a1, (uint64_t *)v7) & 0x8000000000000000) == 0)
  {
    memset(v8, 0, sizeof(v8));
    __dpml_bid_addsub__((uint64_t)v10, v9, 1, (uint64_t)v8);
    if (LODWORD(v8[0])) {
      uint64_t v5 = 173;
    }
    else {
      uint64_t v5 = 172;
    }
    if (LODWORD(v8[0])) {
      uint64_t v6 = 175;
    }
    else {
      uint64_t v6 = 174;
    }
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v8, a1, v5, v6).n128_u64[0];
  }
  return result;
}

double bid_f128_itof(__n128 *a1, int a2)
{
  if (a2 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = -a2;
  }
  uint64_t v5 = v4 << 32;
  unint64_t v6 = 0xFFFF000000000000;
  unsigned int v7 = 32;
  unsigned int v8 = 16;
  do
  {
    char v9 = v8;
    BOOL v10 = (v6 & v5) == 0;
    if ((v6 & v5) != 0) {
      char v9 = 0;
    }
    v5 <<= v9;
    if (v10) {
      unsigned int v11 = v8;
    }
    else {
      unsigned int v11 = 0;
    }
    v7 -= v11;
    v6 <<= v8 >> 1;
    BOOL v12 = v8 > 1;
    v8 >>= 1;
  }
  while (v12);
  uint64_t v17 = v2;
  uint64_t v18 = v3;
  v14[0] = 0;
  v14[1] = v7;
  uint64_t v15 = v5;
  uint64_t v16 = 0;
  *(void *)&double result = __dpml_bid_pack__(v14, a1, 0, 0).n128_u64[0];
  return result;
}

uint64_t bid_f128_cmp(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  unsigned __int8 v4 = __dpml_bid_unpack2__(a1, a2, (uint64_t)v9, (uint64_t)v8, qword_1BDDBAE60, (uint64_t)&v6, (uint64_t *)v7);
  return (a3 >> __dpml_bid_ux_cmp__(v4 >> 4, v9, v4 & 0xF, (uint64_t)v8)) & 1;
}

uint64_t __dpml_bid_ux_cmp__(uint64_t a1, _DWORD *a2, char a3, uint64_t a4)
{
  uint64_t result = (cmpTable[a1] >> (3 * a3)) & 7;
  if (result == 4)
  {
    uint64_t v5 = (int)a2[1] - (uint64_t)*(int *)(a4 + 4);
    if (!v5)
    {
      uint64_t result = 0;
      LOBYTE(v5) = 1;
      while (1)
      {
        char v7 = v5;
        uint64_t v5 = *(void *)&a2[2 * result + 2] - *(void *)(a4 + 8 * result + 8);
        if (v5) {
          break;
        }
        uint64_t result = 1;
        if ((v7 & 1) == 0) {
          return result;
        }
      }
    }
    if (v5 < 0) {
      unsigned int v6 = 2 * (*a2 != 0);
    }
    else {
      unsigned int v6 = 1;
    }
    if (v5 >= 1) {
      return 2 * (*a2 == 0);
    }
    else {
      return v6;
    }
  }
  return result;
}

double bid_f128_nextafter(__n128 *a1, uint64_t *a2, uint64_t *a3)
{
  memset(v12, 0, sizeof(v12));
  uint64_t v10 = 0;
  long long v11 = 0uLL;
  memset(v9, 0, sizeof(v9));
  unint64_t v4 = __dpml_bid_unpack2__(a2, a3, (uint64_t)v12, (uint64_t)&v10, qword_1BDDBAE48, (uint64_t)a1, (uint64_t *)v9);
  if ((v4 & 0x8000000000000000) == 0)
  {
    int v6 = __dpml_bid_ux_cmp__(v4 >> 4, v12, v4 & 0xF, (uint64_t)&v10);
    HIDWORD(v10) = HIDWORD(v12[0]);
    if (v6 != 1)
    {
      LODWORD(v10) = (v6 != 0) << 31;
      long long v11 = xmmword_1BDDB5700;
      __dpml_bid_addsub__((uint64_t)v12, &v10, 0, (uint64_t)v12);
    }
    if (LODWORD(v12[0])) {
      uint64_t v7 = 173;
    }
    else {
      uint64_t v7 = 172;
    }
    if (LODWORD(v12[0])) {
      uint64_t v8 = 175;
    }
    else {
      uint64_t v8 = 174;
    }
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v12, a1, v7, v8).n128_u64[0];
  }
  return result;
}

double __dpml_bid_C_ux_erf__(uint64_t *a1, unint64_t a2, __n128 *a3, void *a4)
{
  v20[3] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  int8x8_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  if (a2) {
    uint64_t v7 = (uint64_t *)&__dpml_bid_erf_x_table;
  }
  else {
    uint64_t v7 = (uint64_t *)&unk_1BDDBB060;
  }
  if ((__dpml_bid_unpack_x_or_y__(a1, 0, (uint64_t)&v14, v7, (uint64_t)a3, a4) & 0x8000000000000000) == 0)
  {
    if (v14.i32[1] > 3)
    {
      if (v14.i32[1] == 4)
      {
        BOOL v10 = v15 >> 58 >= 0x23;
        uint64_t v9 = 1;
      }
      else
      {
        BOOL v10 = v14.i32[1] >= 8u;
        uint64_t v9 = 2;
      }
      if (v10) {
        ++v9;
      }
    }
    else
    {
      uint64_t v9 = v14.i32[1] > 0;
    }
    uint64_t v11 = v9 | (4 * (v14.i32[0] != 0));
    v14.i32[0] = 0;
    __int32 v12 = a2 & 0x80000000;
    switch(v11)
    {
      case 0:
        goto LABEL_22;
      case 1:
        v12 ^= 0x80000000;
        goto LABEL_14;
      case 2:
        if (a2) {
          goto LABEL_20;
        }
        __dpml_bid_divide__(0, &v14, 2, (uint64_t)v20);
        __dpml_bid_evaluate_rational__(v20, (uint64_t)&unk_1BDDBB208, 10, 0xC00000000000046uLL, (uint64_t)&v17);
        __int32 v12 = 0;
        goto LABEL_15;
      case 3:
        if (a2) {
          goto LABEL_20;
        }
        v17.i32[1] = -32768;
        long long v18 = xmmword_1BDDB5710;
        size_t v13 = &v17;
        break;
      case 4:
        v12 ^= 0x80000000;
LABEL_22:
        size_t v13 = &v17;
        __dpml_bid_evaluate_rational__(&v14, (uint64_t)&unk_1BDDBB098, 10, 0x46uLL, (uint64_t)&v17);
        break;
      case 5:
LABEL_14:
        __dpml_bid_evaluate_packed_poly__(&v14, 16, qword_1BDDBB378, 6, v19);
        __dpml_bid_evaluate_packed_poly__(&v14, 17, &qword_1BDDBB378[34], 5, v20);
        __dpml_bid_divide__((uint64_t)v19, v20, 2, (uint64_t)&v17);
LABEL_15:
        size_t v13 = &v17;
        __dpml_bid_extended_multiply__((uint64_t)&v14, (uint64_t)&v14, (uint64_t)v19, (uint64_t)v20);
        v19[0].i32[0] = 0x80000000;
        __dpml_bid_ux_exp_common__((uint64_t)v19, (uint64_t)v19);
        __dpml_bid_multiply__(v20, v19, v20);
        __dpml_bid_addsub__((uint64_t)v19, v20, 9, (uint64_t)v19);
        __dpml_bid_multiply__(v19, &v17, &v17);
        break;
      default:
LABEL_20:
        size_t v13 = (int8x8_t *)&unk_1BDDBB080;
        break;
    }
    v17.i32[0] = v12;
    v19[1] = (int8x8_t)(((a2 >> (2 * v11)) & 3) - 1);
    __dpml_bid_ffs_and_shift__((uint64_t)v19, 1);
    __dpml_bid_addsub__((uint64_t)v13, v19, 8, (uint64_t)&v17);
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)&v17, a3, 140, 0).n128_u64[0];
  }
  return result;
}

uint64_t __dpml_bid_ux_exp_common__(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  int v3 = __dpml_bid_ux_exp_reduce__(a1, (uint64_t)v5);
  uint64_t result = __dpml_bid_evaluate_rational__(v5, (uint64_t)&unk_1BDDBB628, 22, 1uLL, a2);
  *(_DWORD *)(a2 + 4) += v3;
  return result;
}

uint64_t __dpml_bid_ux_exp_reduce__(uint64_t a1, uint64_t a2)
{
  __int32 v4 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)(a1 + 4);
  if ((v3 - 18) > 0xFFFFFFEC)
  {
    unint64_t v7 = *(void *)(a1 + 8);
    int v8 = 61 - v3;
    int64_t v9 = ((1 << (60 - v3))
        + 1549082004 * (v7 >> 33)
        + ((1549082004 * (unint64_t)(v7 >> 1)) >> 32)
        + ((((2920020062u * (unint64_t)(v7 >> 1)) >> 32)
          + 2920020062u * (v7 >> 33)
          + ((1549082004 * (v7 >> 1)) & 0xFFFFFFFCLL)) >> 32)) & (-1 << (61 - v3));
    if (v9 >= 1)
    {
      do
      {
        v9 *= 2;
        ++v8;
      }
      while (v9 > 0);
    }
    int64_t v10 = ((2977044471u * (unint64_t)v9) >> 32)
        + 2977044471 * HIDWORD(v9)
        + ((((3520035244u * (unint64_t)v9) >> 32)
          + 3520035244 * HIDWORD(v9)
          + (-1317922825 * v9)) >> 32);
    int v11 = 63 - v8;
    char v12 = v10 > 0;
    *((void *)&v14 + 1) = v10;
    *(void *)&long long v14 = 0xB17217F7D1CF79ACLL * v9;
    int64_t v13 = v14 >> 63;
    if (v10 <= 0) {
      int v11 = 64 - v8;
    }
    v16[0] = *(_DWORD *)a1;
    v16[1] = v11;
    if (v10 > 0) {
      int64_t v10 = v13;
    }
    int64_t v17 = v10;
    unint64_t v18 = (0xB17217F7D1CF79ACLL * v9) << v12;
    __dpml_bid_addsub__(a1, v16, 1, (uint64_t)v16);
    v19[0].i32[0] = v4;
    v19[0].i32[1] = 64 - v8;
    v19[1] = (int8x8_t)v9;
    v19[2] = 0;
    __dpml_bid_multiply__(v19, qword_1BDDBB608, (void *)a2);
    __dpml_bid_addsub__((uint64_t)v16, (_DWORD *)a2, 9, a2);
    uint64_t v6 = (unint64_t)v9 >> v8;
    BOOL v5 = v4 == 0;
  }
  else
  {
    *(_DWORD *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v3;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x940], 8) = *(void *)(a1 + 8);
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
    if (v3 < 1) {
      return 0;
    }
    *(_DWORD *)(a2 + 4) = -128;
    BOOL v5 = v4 == 0;
    uint64_t v6 = 0x8000;
  }
  if (v5) {
    return v6;
  }
  else {
    return -v6;
  }
}

double bid_f128_exp(__n128 *a1, uint64_t *a2)
{
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if ((__dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)v6, (uint64_t *)&__dpml_bid_exp_x_table, (uint64_t)a1, v4) & 0x8000000000000000) == 0)
  {
    __dpml_bid_ux_exp_common__((uint64_t)v6, (uint64_t)v5);
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v5, a1, 34, 33).n128_u64[0];
  }
  return result;
}

void __dpml_bid_C_ux_hyperbolic__(__n128 *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(v15, 0, sizeof(v15));
  if ((__dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)v15, a3, (uint64_t)a1, a6) & 0x8000000000000000) != 0)
  {
    if ((a4 & 0x8000) != 0) {
      __dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)v15, &qword_1BDDBB5C8, (uint64_t)&a1[1], a6);
    }
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    unsigned int v11 = v15[0];
    LODWORD(v15[0]) = 0;
    int v12 = __dpml_bid_ux_exp_reduce__((uint64_t)v15, (uint64_t)v16);
    if (v12) {
      unint64_t v13 = 326;
    }
    else {
      unint64_t v13 = a4 & 0x7FF;
    }
    __dpml_bid_evaluate_rational__(v16, (uint64_t)&unk_1BDDBB968, 11, v13, (uint64_t)v17);
    if (v12)
    {
      __dpml_bid_addsub__((uint64_t)v18, v17, 10, (uint64_t)v19);
      int v20 = v12 + v20 - 1;
      v22 += ~v12;
      __dpml_bid_addsub__((uint64_t)v19, &v21, (a4 >> 11) & 3 | 0xC, (uint64_t)v17);
      if ((a4 & 0x10000) != 0) {
        __dpml_bid_divide__((uint64_t)v17, v18, 2, (uint64_t)v17);
      }
    }
    if ((a4 & 0x4000) != 0) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = v11;
    }
    v17[0] = v14;
    __dpml_bid_pack__(v17, a1, 0, a5);
    if ((a4 & 0x8000) != 0) {
      __dpml_bid_pack__((unsigned int *)v18, a1 + 1, 0, 19);
    }
  }
}

double bid_f128_asinh(__n128 *a1, uint64_t *a2)
{
  int8x8_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  if ((uint64_t)__dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)&v8, &__dpml_bid_inv_hyper_x_table, (uint64_t)a1, v5) >= 1)
  {
    __int32 v4 = v8.i32[0];
    v8.i32[0] = 0;
    __dpml_bid_multiply__(&v8, &v8, v6);
    __dpml_bid_addsub__((uint64_t)v6, dword_1BDDBBB40, 0, (uint64_t)v6);
    __dpml_bid_ffs_and_shift__((uint64_t)v6, 0);
    __dpml_bid_ux_sqrt_evaluation__(v6, v6);
    if (v8.i32[1] < -1 || v8.i32[1] == -1 && v9 <= 0xB504F333F9DE6484)
    {
      __dpml_bid_addsub__((uint64_t)v6, dword_1BDDBBB40, 0, (uint64_t)v6);
      __dpml_bid_divide__((uint64_t)&v8, v6, 2, (uint64_t)v6);
      __dpml_bid_evaluate_rational__(v6, (uint64_t)&unk_1BDDBC4C8, 17, 6uLL, (uint64_t)v7);
      __dpml_bid_multiply__(v7, qword_1BDDBC620, v7);
    }
    else
    {
      __dpml_bid_addsub__((uint64_t)v6, &v8, 0, (uint64_t)v6);
      __dpml_bid_ffs_and_shift__((uint64_t)v6, 0);
      __dpml_bid_ux_log__((uint64_t)v6, qword_1BDDBBB58, v7);
    }
    v7[0].i32[0] = v4;
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v7, a1, 0, 0).n128_u64[0];
  }
  return result;
}

double __dpml_bid_ux_asin_acos__(uint64_t *a1, unint64_t a2, uint64_t *a3, __n128 *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((__dpml_bid_unpack_x_or_y__(a1, 0, (uint64_t)&v11, a3, (uint64_t)a4, a5) & 0x8000000000000000) == 0)
  {
    if (v11.i32[0]) {
      char v8 = 12;
    }
    else {
      char v8 = 0;
    }
    v11.i32[0] = 0;
    if ((v11.i32[1] & 0x80000000) == 0)
    {
      v8 += 6;
      if (v11.i32[1] == 1)
      {
        if (v12 == 0x8000000000000000 && !v13)
        {
          int v9 = 0;
          v11.i32[1] = -131072;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          goto LABEL_13;
        }
      }
      else if (!v11.i32[1])
      {
        __dpml_bid_addsub__((uint64_t)&unk_1BDDBBD28, &v11, 5, (uint64_t)&v11);
        --v11.i32[1];
        __dpml_bid_ux_sqrt_evaluation__(&v11, &v11);
        int v9 = 1;
LABEL_13:
        __dpml_bid_evaluate_rational__(&v11, (uint64_t)&unk_1BDDBBF00, 11, 0x4000000000000CEuLL, (uint64_t)&v14);
        unint64_t v10 = a2 >> v8;
        LODWORD(v14) = (v10 << 28) & 0x80000000;
        HIDWORD(v14) += v9;
        __dpml_bid_addsub__((uint64_t)&__dpml_bid_inv_trig_x_table + (v10 & 0xF0) + 320, &v14, 8, (uint64_t)&v14);
        LODWORD(v14) = (v10 << 29) & 0x80000000;
LABEL_15:
        *(void *)&double result = __dpml_bid_pack__((unsigned int *)&v14, a4, 0, 3).n128_u64[0];
        return result;
      }
      uint64_t v14 = 0x800000000000;
      long long v15 = xmmword_1BDDB5710;
      goto LABEL_15;
    }
    int v9 = 0;
    goto LABEL_13;
  }
  return result;
}

double bid_f128_lgamma(__n128 *a1, uint64_t *a2)
{
  v53[3] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  memset(v39, 0, sizeof(v39));
  int8x8_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  int8x8_t v40 = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  if ((__dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)&v43, __dpml_bid_lgamma_x_table, (uint64_t)a1, v39) & 0x8000000000000000) == 0)
  {
    int8x8_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    memset(v46, 0, sizeof(v46));
    int v4 = v43.i32[1];
    __int32 v5 = v43.i32[1] + 1;
    v43.i32[1] = v5;
    long long v51 = 0uLL;
    uint64_t v6 = 127 - v4;
    unint64_t v7 = v45;
    if (v5 <= 64)
    {
      uint64_t v13 = 0;
      unint64_t v8 = 0;
      char v14 = 1;
      while (1)
      {
        uint64_t v12 = (uint64_t *)((char *)&v44 + v13 * 8);
        long long v15 = (int8x8_t *)((char *)&v50 + v13 * 8);
        v52[v13 - 1] = 0;
        unint64_t v8 = v7 | (v8 != 0);
        v6 -= 64;
        if ((v14 & 1) == 0) {
          break;
        }
        char v14 = 0;
        unint64_t v7 = *v12;
        --v13;
        if (v6 + 64 < 128)
        {
          uint64_t v12 = (uint64_t *)((char *)&v44 + v13 * 8);
          int v9 = &v52[v13 - 1];
          int v10 = 1;
          uint64_t v11 = 1;
          goto LABEL_11;
        }
      }
      int v10 = 0;
      uint64_t v11 = 0;
      unint64_t v7 = 0;
      int v9 = v15 + 1;
      if (v6) {
        unint64_t v8 = v8 != 0;
      }
      uint64_t v6 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      int v9 = (int8x8_t *)&v51 + 1;
      int v10 = 1;
      uint64_t v11 = 2;
      uint64_t v12 = &v44;
    }
LABEL_11:
    uint64_t v16 = v6 & ~(v6 >> 63);
    uint64_t v17 = 2 * v7;
    if (1 << v16 == 1)
    {
      uint64_t v18 = v17 & 2 | (v8 >> 63);
      uint64_t v19 = 2 * v8;
      unint64_t v21 = v7;
    }
    else
    {
      uint64_t v18 = (v7 >> (v16 - 1)) & 3;
      uint64_t v19 = v17 & ((1 << v16) - 1) | v8;
      if (v5 < 65) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *v12;
      }
      unint64_t v21 = (v20 << -(char)v16) | (v7 >> v16);
    }
    __int32 v22 = v43.i32[0];
    unint64_t v23 = (0x2A8A8uLL >> ((v18 | (4 * (v19 != 0))) | ((unsigned __int32)v43.i32[0] >> 28) & 8)) & 1;
    if (v10)
    {
      if (v23) {
        uint64_t v24 = 1 << v16;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = v7 & -(1 << v16);
      unint64_t v26 = v11 + 1;
      do
      {
        unint64_t v27 = v24;
        unint64_t v28 = v24 + v25;
        uint64_t v24 = __CFADD__(v24, v25);
        *v9-- = (int8x8_t)v28;
        uint64_t v29 = *v12--;
        uint64_t v25 = v29;
        --v26;
      }
      while (v26 > 1);
      if (v28 >= v27)
      {
LABEL_30:
        unint64_t v50 = __PAIR64__(v5, v22);
        __dpml_bid_addsub__((uint64_t)&v43, &v50, 1, (uint64_t)&v47);
        uint64_t v30 = v23 + v21;
        v43.i32[1] = v4;
        if (v22) {
          uint64_t v31 = -v30;
        }
        else {
          uint64_t v31 = v30;
        }
        if (!v22 || v30 & 1 | v48)
        {
          if (v4 > 4)
          {
            v43.i32[0] = 0;
            __dpml_bid_ux_log__((uint64_t)&v43, qword_1BDDBC0F8, &v40);
            if (v22) {
              uint64_t v35 = &qword_1BDDBC0F8[9];
            }
            else {
              uint64_t v35 = &qword_1BDDBC0F8[6];
            }
            __dpml_bid_addsub__((uint64_t)&v43, dword_1BDDBC0C8, v22 == 0, (uint64_t)&v50);
            __dpml_bid_multiply__(&v40, (int8x8_t *)&v50, &v40);
            __dpml_bid_addsub__((uint64_t)&v40, &v43, 1, (uint64_t)&v40);
            __dpml_bid_addsub__((uint64_t)&v40, v35, 0, (uint64_t)&v40);
            __dpml_bid_divide__(0, &v43, 2, (uint64_t)&v50);
            __dpml_bid_evaluate_rational__((int8x8_t *)&v50, (uint64_t)&unk_1BDDBC348, 7, 0xC00000000000046uLL, (uint64_t)v52);
            __dpml_bid_addsub__((uint64_t)&v40, v52, 0, (uint64_t)&v40);
            if (!v22) {
              goto LABEL_56;
            }
            v40.i32[0] ^= v22;
            __dpml_bid_multiply__(&v47, &qword_1BDDBC0F8[3], &v50);
            __dpml_bid_ux_sincos((uint64_t)&v50, 2 * v30, 1, &v50);
            __dpml_bid_ffs_and_shift__((uint64_t)&v50, 0);
            __dpml_bid_ux_log__((uint64_t)&v50, qword_1BDDBC0F8, (int8x8_t *)&v50);
            BOOL v36 = 1;
          }
          else
          {
            uint64_t v32 = v31 + (v47.i32[0] >> 31);
            unint64_t v50 = 0x100000000;
            long long v51 = xmmword_1BDDB5710;
            if (v32 > 1)
            {
              if ((unint64_t)v32 < 4)
              {
                uint64_t v33 = v31 + (v47.i32[0] >> 31);
              }
              else
              {
                unint64_t v37 = v31 + (v47.i32[0] >> 31);
                do
                {
                  __dpml_bid_addsub__((uint64_t)&v43, dword_1BDDBC0B0, 1, (uint64_t)&v43);
                  __dpml_bid_multiply__((int8x8_t *)&v50, &v43, &v50);
                  uint64_t v33 = v37 - 2;
                  BOOL v38 = v37 > 5;
                  v37 -= 2;
                }
                while (v38);
              }
            }
            else
            {
              uint64_t v33 = v31 + (v47.i32[0] >> 31);
              do
              {
                uint64_t v34 = v33;
                __dpml_bid_multiply__((int8x8_t *)&v50, &v43, &v50);
                __dpml_bid_addsub__((uint64_t)&v43, dword_1BDDBC0B0, 0, (uint64_t)&v43);
                v33 += 2;
              }
              while (v34 < 0);
            }
            ++v43.i32[1];
            __dpml_bid_addsub__((uint64_t)&v43, &dword_1BDDBC0C8[6], 1, (uint64_t)v46);
            __dpml_bid_addsub__((uint64_t)v46, dword_1BDDBC0B0, 2, (uint64_t)v52);
            __dpml_bid_multiply__(v52, v53, &v40);
            if (v41)
            {
              __dpml_bid_evaluate_rational__(v46, (uint64_t)&unk_1BDDBC158, 14, 0x11uLL, (uint64_t)v52);
              __dpml_bid_multiply__(&v40, v52, &v40);
            }
            if (v32 == v33) {
              goto LABEL_56;
            }
            LODWORD(v50) = 0;
            __dpml_bid_ffs_and_shift__((uint64_t)&v50, 0);
            __dpml_bid_ux_log__((uint64_t)&v50, qword_1BDDBC0F8, (int8x8_t *)&v50);
            BOOL v36 = v32 < v33;
          }
          __dpml_bid_addsub__((uint64_t)&v40, &v50, v36, (uint64_t)&v40);
        }
        else
        {
          v40.i32[1] = -32768;
          unint64_t v41 = 0x8000000000000000;
        }
LABEL_56:
        *(void *)&double result = __dpml_bid_pack__((unsigned int *)&v40, a1, 138, 135).n128_u64[0];
        return result;
      }
    }
    else if (!v23)
    {
      goto LABEL_30;
    }
    __int32 v5 = (v5 & ~(v5 >> 31)) + 1;
    v9[1] = (int8x8_t)0x8000000000000000;
    goto LABEL_30;
  }
  return result;
}

uint64_t __dpml_bid_ux_log__(uint64_t a1, int8x8_t *a2, int8x8_t *a3)
{
  void v9[3] = *MEMORY[0x1E4F143B8];
  int8x8_t v6 = (int8x8_t)((__PAIR128__(*(int *)(a1 + 4), *(void *)(a1 + 8)) - 0xB504F333F9DE6485) >> 64);
  *(_DWORD *)(a1 + 4) = *(void *)(a1 + 8) < 0xB504F333F9DE6485;
  __dpml_bid_addsub__(a1, dword_1BDDBC5F0, 6, (uint64_t)v8);
  *(_DWORD *)(a1 + 4) += v6.i32[0];
  __dpml_bid_divide__((uint64_t)v9, v8, 2, (uint64_t)a3);
  __dpml_bid_evaluate_rational__(a3, (uint64_t)&unk_1BDDBC4C8, 17, 6uLL, (uint64_t)v8);
  a3[1] = v6;
  __dpml_bid_ffs_and_shift__((uint64_t)a3, 1);
  uint64_t result = __dpml_bid_addsub__((uint64_t)a3, v8, 8, (uint64_t)a3);
  if (a2) {
    return __dpml_bid_multiply__(a3, a2, a3);
  }
  return result;
}

double bid_f128_log(__n128 *a1, uint64_t *a2)
{
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if ((__dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)v6, __dpml_bid_log_x_table, (uint64_t)a1, v4) & 0x8000000000000000) == 0)
  {
    __dpml_bid_ux_log__((uint64_t)v6, qword_1BDDBC620, v5);
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v5, a1, 0, 0).n128_u64[0];
  }
  return result;
}

uint64_t __dpml_bid_ffs_and_shift__(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2)
  {
    if (v2 >= 0) {
      unint64_t v3 = *(void *)(a1 + 8);
    }
    else {
      unint64_t v3 = -v2;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x940], 8) = v3;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)a1 = HIDWORD(v2) & 0x80000000;
    if (v2)
    {
      uint64_t v4 = 0;
      int v5 = 64;
      goto LABEL_7;
    }
LABEL_22:
    *(void *)a1 = 0xFFFE000000000000;
    return 128;
  }
  if (v2 < 0) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 4);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  if (!v3) {
    goto LABEL_22;
  }
  uint64_t v4 = 64;
LABEL_7:
  unint64_t v6 = 0;
  uint64_t v2 = v3;
  unint64_t v3 = 0;
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_12:
    uint64_t v7 = ((unint64_t)v2 >> 58) & 0x1E;
    if (v7)
    {
      uint64_t v8 = ((0x55ACu >> v7) & 3) + 1;
    }
    else
    {
      unint64_t v9 = v2 & 0xFFFFFFFFFFFFFF00;
      if ((v2 & 0xFFFFFFFFFFFFFF00) == 0) {
        unint64_t v9 = v2;
      }
      uint64_t v8 = 1086 - (COERCE__INT64((double)v9) >> 52);
    }
    uint64_t v2 = (v3 >> -(char)v8) | (v2 << v8);
    unint64_t v6 = v3 << v8;
    v4 += v8;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x940], 8) = v2;
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 4) = v5 - v4;
  return v4;
}

uint64_t __dpml_bid_addsub__(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  int v7 = *(_DWORD *)(result + 4);
  int v8 = a2[1];
  uint64_t v9 = (*a2 ^ *(_DWORD *)result);
  if ((a3 & 4) != 0)
  {
    int v6 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v10 = v9 ^ (a3 << 31);
  uint64_t v11 = v7 - v8;
  if (v7 - v8 < 0)
  {
    uint64_t v11 = -v11;
    v6 ^= v10 & 0x80000000;
    unsigned int v12 = 0x80000000;
    uint64_t v13 = (_DWORD *)result;
    int v5 = a2;
    int v7 = a2[1];
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t v13 = a2;
  }
  unint64_t v14 = *((void *)v13 + 1);
  if (v11 >= 64)
  {
    uint64_t v16 = 127;
    if (v11 < 127) {
      uint64_t v16 = v11;
    }
    unint64_t v17 = v11 - v16 + 63;
    char v18 = v11 - (v17 & 0xC0) - 64;
    uint64_t v19 = v11 + 64;
    while (v17 < 0x40)
    {
      unint64_t v15 = v14;
      unint64_t v14 = 0;
      v19 -= 64;
      if (v19 < 128)
      {
        LOBYTE(v11) = v18;
        goto LABEL_14;
      }
    }
    int v48 = v5[1];
    *(void *)(a4 + _Block_object_dispose(&STACK[0x940], 8) = *((void *)v5 + 1);
    *(void *)(a4 + 16) = *((void *)v5 + 2);
    *(_DWORD *)a4 = v6;
    *(_DWORD *)(a4 + 4) = v48;
    if ((a3 & 2) != 0)
    {
      int v49 = v5[1];
      *(void *)(a4 + 32) = *((void *)v5 + 1);
      *(void *)(a4 + 40) = *((void *)v5 + 2);
      *(_DWORD *)(a4 + 24) = v6 ^ v12;
      *(_DWORD *)(a4 + 2_Block_object_dispose(&STACK[0x940], 8) = v49;
    }
  }
  else
  {
    unint64_t v15 = *((void *)v13 + 2);
LABEL_14:
    uint64_t v20 = (v10 >> 31) & 1;
    unint64_t v21 = v14 >> v11;
    unint64_t v22 = ((2 * v14) << ~(_BYTE)v11) | (v15 >> v11);
    while (1)
    {
      unint64_t v24 = *((void *)v5 + 1);
      unint64_t v23 = *((void *)v5 + 2);
      uint64_t v25 = a3 - 8;
      uint64_t v26 = v23 - v22;
      if (v23 >= v22) {
        unint64_t v27 = v21;
      }
      else {
        unint64_t v27 = v21 + 1;
      }
      unint64_t v28 = v24 - v27;
      if (v23 == v22) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = -1;
      }
      unint64_t v30 = v29 - v28;
      BOOL v31 = __PAIR128__(v27, v23) >= v22 && v24 >= v27;
      if (v31) {
        unsigned int v32 = v12;
      }
      else {
        unsigned int v32 = 0x80000000;
      }
      if (v31) {
        unsigned int v33 = v6;
      }
      else {
        unsigned int v33 = v6 ^ 0x80000000;
      }
      if (!v31)
      {
        unint64_t v28 = v30;
        uint64_t v26 = v22 - v23;
      }
      uint64_t v34 = a3 & 0xF;
      BOOL v35 = __CFADD__(v23, v22);
      uint64_t v36 = v23 + v22;
      unint64_t v37 = v35;
      if (v35) {
        unint64_t v38 = v21 + 1;
      }
      else {
        unint64_t v38 = v21;
      }
      unint64_t v39 = v21 + v35 + v24;
      BOOL v31 = v38 >= v37;
      *((void *)&v40 + 1) = v39;
      *(void *)&long long v40 = v36;
      double result = v40 >> 1;
      BOOL v41 = v31 && v39 >= v24;
      unint64_t v42 = (v39 >> 1) | 0x8000000000000000;
      if (v41) {
        int v43 = v7;
      }
      else {
        int v43 = v7 + 1;
      }
      if (v41) {
        unint64_t v42 = v39;
      }
      else {
        uint64_t v36 = result;
      }
      if (v20) {
        uint64_t v44 = v25;
      }
      else {
        uint64_t v44 = v34;
      }
      if (v20)
      {
        unsigned int v12 = v32;
        unsigned int v45 = v33;
      }
      else
      {
        unsigned int v45 = v6;
      }
      if (v20) {
        int v46 = v7;
      }
      else {
        int v46 = v43;
      }
      if (v20) {
        unint64_t v47 = v28;
      }
      else {
        unint64_t v47 = v42;
      }
      if (v20) {
        uint64_t v36 = v26;
      }
      *(void *)(v4 + _Block_object_dispose(&STACK[0x940], 8) = v47;
      *(void *)(v4 + 16) = v36;
      *(_DWORD *)uint64_t v4 = v45;
      *(_DWORD *)(v4 + 4) = v46;
      if ((v44 & 0x10) != 0) {
        double result = __dpml_bid_ffs_and_shift__(v4, 0);
      }
      if ((v44 & 2) == 0) {
        break;
      }
      uint64_t v20 = 1 - v20;
      a3 = v44 ^ 2;
      v4 += 24;
      int v6 = v45 ^ v12;
      int v7 = v5[1];
    }
  }
  return result;
}

unint64_t __dpml_bid_unpack_x_or_y__(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  unint64_t v11 = a2 != 0;
  if (a2) {
    unsigned int v12 = a2;
  }
  else {
    unsigned int v12 = a1;
  }
  a6[(a2 != 0) + 2] = v12;
  unint64_t v13 = v12[1];
  uint64_t v14 = HIWORD(v13) & 0x7FFF;
  *(_DWORD *)a3 = HIDWORD(v13) & 0x80000000;
  *(_DWORD *)(a3 + 4) = v14 - 16382;
  uint64_t v15 = *v12;
  *((void *)&v17 + 1) = v13;
  *(void *)&long long v17 = *v12;
  uint64_t v16 = v17 >> 49;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x940], 8) = v16 | 0x8000000000000000;
  *(void *)(a3 + 16) = v15 << 15;
  unint64_t v18 = v13 >> 63;
  if ((((v13 + 0x1000000000000) ^ (v13 - 0x1000000000000)) & 0x8000000000000000) != 0)
  {
    uint64_t v20 = v15 | (v13 << 16);
    if ((((v13 - 0x1000000000000) ^ v13) & 0x8000000000000000) != 0)
    {
      if (v20)
      {
        *(void *)(a3 + _Block_object_dispose(&STACK[0x940], 8) = v16 & 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(a3 + 4) = v14 - 16381;
        __dpml_bid_ffs_and_shift__(a3, 0);
        uint64_t v19 = 6;
      }
      else
      {
        uint64_t v19 = 8;
      }
    }
    else
    {
      uint64_t v21 = (v13 >> 47) & 1;
      if (v20)
      {
        unint64_t v18 = v21;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = 2;
      }
    }
  }
  else
  {
    uint64_t v19 = 4;
  }
  uint64_t v22 = v19 | v18;
  *a6 = (1 << v22);
  unint64_t v23 = ((unint64_t)(*a4 >> (6 * v22)) >> 3) & 7;
  if (v23)
  {
    unint64_t v24 = (*a4 >> (6 * v22)) & 7;
    if (v24 <= v11)
    {
      if (v24) {
        uint64_t v26 = a2;
      }
      else {
        uint64_t v26 = a1;
      }
    }
    else
    {
      uint64_t v25 = a4[((unint64_t)*a4 >> 60) - 1 + v24];
      uint64_t v26 = (uint64_t *)((char *)&__dpml_bid_x_constants__ + 16 * v25);
      unint64_t v24 = v25 & 0xFFFFFFFF87FFFFFFLL;
    }
    if (v23 == 7)
    {
      uint64_t v35 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      uint64_t v29 = v24 | 0x10000000;
      *(_OWORD *)a5 = *(_OWORD *)__dpml_bid_exception((unint64_t *)&v29);
    }
    else
    {
      unint64_t v27 = v26[1];
      switch(v23)
      {
        case 1uLL:
          v27 |= 0x800000000000uLL;
          break;
        case 3uLL:
          v27 ^= 0x8000000000000000;
          break;
        case 4uLL:
          v27 &= ~0x8000000000000000;
          break;
        case 5uLL:
          unint64_t v27 = a1[1] & 0x8000000000000000 | v27 & 0x7FFFFFFFFFFFFFFFLL;
          break;
        default:
          break;
      }
      *(void *)(a5 + _Block_object_dispose(&STACK[0x940], 8) = v27;
      *(void *)a5 = *v26;
    }
    return v22 | 0x8000000000000000;
  }
  return v22;
}

uint64_t __dpml_bid_unpack2__(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v13 = __dpml_bid_unpack_x_or_y__(a1, 0, a3, a5, a6, a7);
  unint64_t v14 = v13;
  if (a2 && (v13 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = *a7;
    unint64_t v16 = __dpml_bid_unpack_x_or_y__(a1, a2, a4, (uint64_t *)((char *)a5 + ((a5[1] >> (4 * v13 - 3)) & 0x78)), a6, a7);
    *a7 |= v15;
    return v16 | (16 * v14);
  }
  return v14;
}

__n128 __dpml_bid_pack__(unsigned int *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __dpml_bid_ffs_and_shift__((uint64_t)a1, 0);
  int v9 = a1[1];
  if (v9 == -131072)
  {
    unint64_t v10 = (unint64_t)*a1 << 32;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = v10;
  }
  else
  {
    uint64_t v27 = 0;
    result.n128_u64[0] = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    if (v9 <= -16382)
    {
      long long v29 = xmmword_1BDDB5710;
      v28[0] = *a1;
      v28[1] = -16381;
      __dpml_bid_addsub__((uint64_t)v28, a1, 0, (uint64_t)a1);
      if (v9 < 0xFFFFBF92) {
        int v9 = -16383;
      }
      else {
        int v9 = -16382;
      }
    }
    uint64_t v12 = *((void *)a1 + 1);
    unint64_t v11 = *((void *)a1 + 2);
    unint64_t v13 = v11 + 0x4000;
    BOOL v14 = v11 > 0xFFFFFFFFFFFFBFFFLL;
    BOOL v15 = __CFADD__(v12, v14);
    *((void *)&v16 + 1) = v12 + v14;
    *(void *)&long long v16 = v13;
    a2->n128_u64[0] = v16 >> 15;
    uint64_t v17 = (unint64_t)(v12 + v14) >> 15;
    if (v15) {
      int v18 = v9 + 1;
    }
    else {
      int v18 = v9;
    }
    if (v15) {
      uint64_t v17 = 0x1000000000000;
    }
    a2->n128_u64[1] = (v17 + ((unint64_t)(v15 + v9 + 16381) << 48)) | ((unint64_t)*a1 << 32);
    if (v15 + v9 + 16382 >= 0x7FFF)
    {
      if (v18 >= 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = a3;
      }
      unint64_t v21 = v19 & 0xFFFFFFFF87FFFFFFLL | 0x10000000;
      uint64_t v20 = (__n128 *)__dpml_bid_exception(&v21);
      __n128 result = *v20;
      *a2 = *v20;
    }
  }
  return result;
}

uint64_t __dpml_bid_evaluate_packed_poly__(int8x8_t *a1, uint64_t a2, uint64_t *a3, int a4, int8x8_t *a5)
{
  v14[0] = 0;
  a5[1] = (int8x8_t)a3[1];
  uint64_t v8 = *a3;
  a5[2] = (int8x8_t)(*a3 & 0xFFFFFFFFFFFFFFF8);
  a5->i32[0] = v8 << 31;
  a5->i32[1] = ((v8 >> 1) & 7) - a4;
  unint64_t v9 = a2 + 1;
  unint64_t v10 = a3 + 3;
  do
  {
    __dpml_bid_multiply__(a1, a5, a5);
    __dpml_bid_ffs_and_shift__((uint64_t)a5, 0);
    uint64_t v11 = *(v10 - 1);
    v14[1] = *v10;
    unsigned int v14[2] = v11 & 0xFFFFFFFFFFFFFFF8;
    int v12 = ((v11 >> 1) & 7) - a4;
    uint64_t result = __dpml_bid_addsub__((uint64_t)a5, v14, v11 & 1, (uint64_t)a5);
    a5->i32[1] += v12;
    --v9;
    v10 += 2;
  }
  while (v9 > 1);
  return result;
}

uint64_t __dpml_bid_multiply__(int8x8_t *a1, int8x8_t *a2, void *a3)
{
  int8x8_t v3 = a1[1];
  int8x8_t v4 = a1[2];
  int8x8_t v5 = a2[1];
  int8x8_t v6 = a2[2];
  unint64_t v7 = ((v4.u32[1] * (unint64_t)v5.u32[0]) >> 32)
     + v4.u32[1] * (unint64_t)v5.u32[1]
     + ((((v4.u32[0] * (unint64_t)v5.u32[0]) >> 32)
       + v4.u32[0] * (unint64_t)v5.u32[1]
       + (v4.i32[1] * v5.i32[0])) >> 32);
  LODWORD(v_Block_object_dispose(&STACK[0x940], 8) = veor_s8(*a2, *a1).u32[0];
  HIDWORD(v_Block_object_dispose(&STACK[0x940], 8) = vadd_s32(*(int32x2_t *)a2, *(int32x2_t *)a1).i32[1];
  *a3 = v8;
  uint64_t result = HIDWORD(*(void *)&v3);
  unint64_t v10 = ((v6.u32[0] * (unint64_t)v3.u32[1]) >> 32)
      + v6.u32[1] * (unint64_t)v3.u32[1]
      + ((((v6.u32[0] * (unint64_t)v3.u32[0]) >> 32)
        + v6.u32[1] * (unint64_t)v3.u32[0]
        + (v6.i32[0] * v3.i32[1])) >> 32);
  BOOL v11 = __CFADD__(v7, *(void *)&v5 * *(void *)&v3);
  unint64_t v12 = v7 + *(void *)&v5 * *(void *)&v3;
  uint64_t v13 = v11;
  a3[1] = (__PAIR128__(((v5.u32[0] * (unint64_t)v3.u32[1]) >> 32)+ v5.u32[1] * (unint64_t)v3.u32[1]+ ((((v5.u32[0] * (unint64_t)v3.u32[0]) >> 32)+ v5.u32[1] * (unint64_t)v3.u32[0]+ (v5.i32[0] * v3.i32[1])) >> 32), v12)+ __PAIR128__(v13, v10)) >> 64;
  a3[2] = v12 + v10;
  return result;
}

unint64_t __dpml_bid_extended_multiply__(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)a2 ^ *(_DWORD *)a1;
  int v9 = *(_DWORD *)(a2 + 4) + *(_DWORD *)(a1 + 4);
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)a4 = v8;
  *(_DWORD *)(a4 + 4) = v9 - 128;
  unint64_t v10 = v4 * v7
      + HIDWORD(v7) * (unint64_t)HIDWORD(v5)
      + ((v7 * (unint64_t)HIDWORD(v5)) >> 32)
      + ((((v7 * (unint64_t)v5) >> 32)
        + HIDWORD(v7) * (unint64_t)v5
        + (v7 * HIDWORD(v5))) >> 32);
  unint64_t v11 = v6 * v4;
  unint64_t v12 = v6 * v5;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x940], 8) = v10 + v6 * v5;
  *(void *)(a4 + 16) = v7 * v5;
  unint64_t v13 = ((v6 * (unint64_t)HIDWORD(v5)) >> 32)
      + HIDWORD(v6) * (unint64_t)HIDWORD(v5)
      + ((((v6 * (unint64_t)v5) >> 32)
        + HIDWORD(v6) * (unint64_t)v5
        + (v6 * HIDWORD(v5))) >> 32);
  unsigned long long v14 = __PAIR128__(v6 * v4, v10) + __PAIR128__(v10 < v4 * v7, v12);
  BOOL v15 = __CFADD__((__PAIR128__(v6 * v4, v10) + __PAIR128__(v10 < v4 * v7, v12)) >> 64, v13);
  unint64_t v16 = ((__PAIR128__(v6 * v4, v10) + __PAIR128__(v10 < v4 * v7, v12)) >> 64) + v13;
  uint64_t v17 = v15;
  unint64_t result = HIDWORD(v4);
  unint64_t v19 = ((HIDWORD(v4) * (unint64_t)v7) >> 32)
      + HIDWORD(v4) * (unint64_t)HIDWORD(v7)
      + ((((v4 * (unint64_t)v7) >> 32)
        + v4 * (unint64_t)HIDWORD(v7)
        + (HIDWORD(v4) * v7)) >> 32);
  unint64_t v20 = ((v6 * (unint64_t)HIDWORD(v4)) >> 32)
      + HIDWORD(v6) * (unint64_t)HIDWORD(v4)
      + ((((v6 * (unint64_t)v4) >> 32)
        + HIDWORD(v6) * (unint64_t)v4
        + (v6 * HIDWORD(v4))) >> 32);
  if (*((void *)&v14 + 1) < v11) {
    ++v20;
  }
  *(void *)(a3 + _Block_object_dispose(&STACK[0x940], 8) = (__PAIR128__(v20, v16) + __PAIR128__(v17, v19)) >> 64;
  *(void *)(a3 + 16) = v16 + v19;
  return result;
}

uint64_t __dpml_bid_divide__(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = &__ux_one__;
  }
  if (result) {
    uint64_t v6 = (void *)result;
  }
  else {
    uint64_t v6 = &__ux_one__;
  }
  if (v5 == (void *)&__ux_one__)
  {
    *(void *)a4 = *v6;
    *(void *)(a4 + _Block_object_dispose(&STACK[0x940], 8) = v6[1];
    *(void *)(a4 + 16) = v6[2];
  }
  else
  {
    unint64_t v8 = v5[1];
    if ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t result = __dpml_bid_ffs_and_shift__((uint64_t)v5, 0);
      unint64_t v8 = v5[1];
    }
    unint64_t v9 = v5[2];
    double v10 = 2.12676479e37 / (double)(v8 >> 1);
    unint64_t v11 = v6[1];
    unint64_t v12 = v6[2];
    int v13 = *((_DWORD *)v6 + 1);
    int v14 = *((_DWORD *)v5 + 1);
    *(_DWORD *)a4 = *(_DWORD *)v5 ^ *(_DWORD *)v6;
    int v15 = v13 - v14;
    int64_t v16 = ((uint64_t)v10 - 1280) & 0xFFFFFFF000000000;
    double v17 = v10
        * 4.07831529e-56
        * (2.12676479e37
         - (double)((v8 >> 1) & 0x7FFFFFE000000000) * (double)v16
         + (double)((v9 >> 49) & 0xFFE0000000007FFFLL | ((v8 & 0x3FFFFFFFFFLL) << 15)) * -0.0000152587891 * (double)v16);
    double v18 = (double)v16 * 8.67361738e-19;
    double v19 = v17 * (double)((v11 >> 1) & 0x7FFFFFFFFFFFFC00)
        + (double)((v12 >> 49) & 0xFFE0000000007FFFLL | ((v11 & 0x3FFFFFFFFFLL) << 15)) * 0.0000152587891 * v18;
    unint64_t v20 = (uint64_t)(v18 * (double)((v11 >> 1) & 0x7FFFFFE000000000) * 0.25);
    unint64_t v21 = (uint64_t)v19 + 4 * v20;
    if (__CFADD__((uint64_t)v19, 4 * v20)) {
      uint64_t v22 = (v20 >> 62) + 1;
    }
    else {
      uint64_t v22 = v20 >> 62;
    }
    if (a3 == 1)
    {
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v24 = ((v21 * (unint64_t)HIDWORD(v9)) >> 32)
          + HIDWORD(v21) * (unint64_t)HIDWORD(v9)
          + ((((v21 * (unint64_t)v9) >> 32)
            + HIDWORD(v21) * (unint64_t)v9
            + (v21 * HIDWORD(v9))) >> 32);
      unint64_t v25 = ((v21 * (unint64_t)HIDWORD(v8)) >> 32)
          + HIDWORD(v21) * (unint64_t)HIDWORD(v8)
          + ((((v21 * (unint64_t)v8) >> 32)
            + HIDWORD(v21) * (unint64_t)v8
            + (v21 * HIDWORD(v8))) >> 32);
      uint64_t v26 = v9 & -v22;
      uint64_t v27 = v8 & -v22;
      unint64_t v28 = v24 + v26 + v21 * v8;
      BOOL v29 = __CFADD__(v24 + v26, v21 * v8);
      BOOL v30 = __CFADD__(v25, v27);
      unint64_t v31 = v25 + v27;
      uint64_t v32 = v30;
      BOOL v30 = __CFADD__(v24, v26);
      unint64_t v33 = vcvtd_n_s64_f64(v17, 0x3EuLL) + 4 * v16;
      unint64_t v34 = v29 + v30 + v31;
      if (__CFADD__(v30, v31) | __CFADD__(v29, v30 + v31)) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v36 = v32 << 63 >> 63;
      if (!v33) {
        unint64_t v33 = -1;
      }
      uint64_t v37 = v36 - v35;
      unint64_t v38 = v12 < v28;
      BOOL v30 = v11 >= v34;
      unint64_t v39 = v11 - v34;
      uint64_t v40 = !v30;
      uint64_t v41 = v37 - v40;
      BOOL v42 = v39 == v38;
      BOOL v43 = v39 < v38;
      uint64_t v44 = !v42;
      uint64_t v45 = v41 - v43;
      uint64_t v46 = v45 | v44;
      if (!(v45 | v44)) {
        uint64_t v45 = v8;
      }
      unint64_t v47 = v12 - v28 - (v45 ^ v8);
      unint64_t result = v47;
      unint64_t v48 = ((HIDWORD(v47) * (unint64_t)v33) >> 32)
          + HIDWORD(v47) * (unint64_t)HIDWORD(v33)
          + ((((v47 * (unint64_t)v33) >> 32)
            + v47 * (unint64_t)HIDWORD(v33)
            + (HIDWORD(v47) * v33)) >> 32);
      unint64_t v23 = ((v12 | v11) != 0) | (2 * v48);
      uint64_t v22 = ((uint64_t)(v46 + (v48 >> 63)) + __PAIR128__(v22, v21)) >> 64;
      v21 += v46 + (v48 >> 63);
    }
    *(void *)(a4 + _Block_object_dispose(&STACK[0x940], 8) = (v21 >> v22) | (v22 << 63);
    *(void *)(a4 + 16) = (v23 >> v22) | ((unint64_t)(v21 & v22) << 63);
    *(_DWORD *)(a4 + 4) = v15 + v22;
  }
  return result;
}

uint64_t __dpml_bid_evaluate_rational__(int8x8_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6 = a4;
  memset(v26, 0, sizeof(v26));
  a1->i32[1] += a4 >> 58;
  if ((a4 & 0x44) != 0)
  {
    double v10 = (int8x8_t *)v26;
    __dpml_bid_multiply__(a1, a1, v26);
    char v11 = v6;
  }
  else
  {
    char v12 = -120;
    if (!a1->i32[0]) {
      char v12 = 0;
    }
    char v11 = v12 ^ a4;
    double v10 = a1;
  }
  uint64_t result = __dpml_bid_ffs_and_shift__((uint64_t)v10, 0);
  uint64_t v14 = -(v10->i32[1] * a3);
  uint64_t v15 = 16 * a3 + 24;
  if ((v6 & 0x600) == 0x200) {
    uint64_t v16 = -1;
  }
  else {
    uint64_t v16 = 0;
  }
  if ((v6 & 0xF) == 0)
  {
    uint64_t v21 = v6 << 53;
    uint64_t v22 = v6 & 0xF0;
    LOWORD(v6) = v6 | 0x100;
    uint64_t v20 = a2 + (v15 & (v21 >> 63));
    double v17 = (int8x8_t *)a5;
    if (!v22) {
      return result;
    }
    goto LABEL_20;
  }
  double v17 = (int8x8_t *)(a5 + 24 + 24 * v16);
  uint64_t v24 = -(v10->i32[1] * a3);
  char v25 = v11;
  double v18 = (uint64_t (*)(int8x8_t *))__eval_neg_poly;
  if ((v11 & 8) == 0) {
    double v18 = (uint64_t (*)(int8x8_t *))__eval_pos_poly;
  }
  BOOL v19 = (v6 & 0x600) == 0x200 && (v6 & 0xF0) != 0;
  uint64_t result = v18(v10);
  if ((v6 & 2) != 0) {
    uint64_t result = __dpml_bid_multiply__(a1, (int8x8_t *)(a5 + 24 * v19), (void *)(a5 + 24 * v19));
  }
  uint64_t v15 = 16 * a3 + 24;
  uint64_t v20 = a2 + v15;
  *(_DWORD *)(a5 + 24 * v19 + 4) += *(_DWORD *)(a2 + v15 - 8);
  uint64_t v14 = v24;
  char v11 = v25;
  if ((v6 & 0xF0) != 0)
  {
LABEL_20:
    unint64_t v23 = (uint64_t (*)(int8x8_t *, uint64_t, uint64_t, uint64_t, int8x8_t *))__eval_neg_poly;
    if ((v11 & 0x80) == 0) {
      unint64_t v23 = (uint64_t (*)(int8x8_t *, uint64_t, uint64_t, uint64_t, int8x8_t *))__eval_pos_poly;
    }
    uint64_t result = v23(v10, v14, v20, a3, v17);
    if ((v6 & 0x20) != 0) {
      uint64_t result = __dpml_bid_multiply__(a1, v17, v17);
    }
    v17->i32[1] += *(_DWORD *)(v20 + v15 - 8);
    if ((v6 & 0x500) == 0) {
      return __dpml_bid_divide__(a5, (void *)(a5 + 24), 2, a5);
    }
  }
  return result;
}

unint64_t __eval_neg_poly(unint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(int *)(result + 4);
  if (a2 >= 128)
  {
    do
    {
      a2 += v5;
      a3 += 2;
      --a4;
    }
    while (a2 > 127);
  }
  uint64_t v6 = *(void *)(result + 8);
  if (a2 >= 64)
  {
    unint64_t v8 = a3 + 2;
    do
    {
      a3 = v8;
      unint64_t v7 = *(v8 - 1) >> a2;
      uint64_t v9 = a2 + v5;
      if (a2 + v5 < 64)
      {
        --a4;
        a2 += v5;
        goto LABEL_12;
      }
      v8 += 2;
      --a4;
      a2 += v5;
    }
    while (!v7);
    a2 = v9;
    do
    {
      unint64_t v10 = a3[1] >> a2;
      a2 += v5;
      a3 += 2;
      --a4;
      unint64_t v7 = v10
         - (((v7 * (unint64_t)HIDWORD(v6)) >> 32)
          + HIDWORD(v7) * (unint64_t)HIDWORD(v6)
          + ((((v7 * (unint64_t)*(void *)(result + 8)) >> 32)
            + HIDWORD(v7) * (unint64_t)*(void *)(result + 8)
            + (v7 * HIDWORD(v6))) >> 32));
    }
    while (a2 > 63);
  }
  else
  {
    unint64_t v7 = 0;
  }
LABEL_12:
  unint64_t v11 = *(void *)(result + 16);
  if (!a2)
  {
    unint64_t v20 = 0;
    if (a4 < 0) {
      goto LABEL_44;
    }
    goto LABEL_33;
  }
  unsigned int v12 = *(void *)(result + 8);
  while (1)
  {
    unint64_t v13 = ((v7 * (unint64_t)HIDWORD(v6)) >> 32)
        + HIDWORD(v7) * (unint64_t)HIDWORD(v6)
        + ((((v7 * (unint64_t)v12) >> 32)
          + HIDWORD(v7) * (unint64_t)v12
          + (v7 * HIDWORD(v6))) >> 32);
    unint64_t v15 = *a3;
    unint64_t v14 = a3[1];
    a3 += 2;
    unint64_t v16 = (v15 >> a2) | (v14 << -(char)a2);
    unint64_t v17 = v14 >> a2;
    --a4;
    BOOL v18 = v16 >= v13;
    unint64_t v7 = v16 - v13;
    BOOL v19 = !v18;
    unint64_t v20 = v17 - v19;
    a2 += v5;
    if (!a2) {
      break;
    }
    if (v20)
    {
      unsigned int v21 = *(void *)(result + 16);
      do
      {
        unint64_t v22 = v20 * v6;
        unint64_t v24 = *a3;
        unint64_t v23 = a3[1];
        a3 += 2;
        unint64_t v25 = (v24 >> a2) | (v23 << -(char)a2);
        uint64_t result = v23 >> a2;
        unsigned int v26 = v20;
        unint64_t v27 = HIDWORD(v20);
        unint64_t v28 = ((v26 * (unint64_t)HIDWORD(v11)) >> 32)
            + v27 * (unint64_t)HIDWORD(v11)
            + ((((v26 * (unint64_t)v21) >> 32) + v27 * (unint64_t)v21 + v26 * HIDWORD(v11)) >> 32);
        BOOL v18 = v25 >= v22;
        unint64_t v29 = v25 - v22;
        uint64_t v30 = !v18;
        --a4;
        unint64_t v31 = ((v7 * (unint64_t)HIDWORD(v6)) >> 32)
            + HIDWORD(v7) * (unint64_t)HIDWORD(v6)
            + ((((v7 * (unint64_t)v12) >> 32)
              + HIDWORD(v7) * (unint64_t)v12
              + (v7 * HIDWORD(v6))) >> 32);
        BOOL v18 = v29 >= v28;
        unint64_t v32 = v29 - v28;
        uint64_t v33 = !v18;
        unint64_t v34 = v26 * (unint64_t)v12;
        unint64_t v35 = v26 * (unint64_t)HIDWORD(v6);
        unint64_t v36 = HIDWORD(v34) + v27 * (unint64_t)v12 + v35;
        unint64_t v37 = HIDWORD(v35);
        BOOL v18 = v32 >= v31;
        unint64_t v7 = v32 - v31;
        uint64_t v38 = !v18;
        unint64_t v20 = result - (v37 + v27 * (unint64_t)HIDWORD(v6) + HIDWORD(v36)) - v30 - v33 - v38;
        a2 += v5;
      }
      while (a2);
      break;
    }
  }
  if ((a4 & 0x8000000000000000) == 0)
  {
LABEL_33:
    unsigned int v39 = v11;
    unint64_t v40 = HIDWORD(v11);
    uint64_t v41 = a3 + 1;
    uint64_t v42 = a4 + 1;
    do
    {
      unint64_t v43 = v20 * v6;
      unint64_t v44 = *(v41 - 1);
      uint64_t result = *v41;
      unsigned int v45 = v20;
      unint64_t v46 = HIDWORD(v20);
      unint64_t v47 = ((v45 * (unint64_t)v40) >> 32)
          + v46 * (unint64_t)v40
          + ((((v45 * (unint64_t)v39) >> 32) + v46 * (unint64_t)v39 + v45
                                                                                                * v40) >> 32);
      BOOL v18 = v44 >= v43;
      unint64_t v48 = v44 - v43;
      uint64_t v49 = !v18;
      unint64_t v50 = ((v7 * (unint64_t)HIDWORD(v6)) >> 32)
          + HIDWORD(v7) * (unint64_t)HIDWORD(v6)
          + ((((v7 * (unint64_t)v6) >> 32)
            + HIDWORD(v7) * (unint64_t)v6
            + (v7 * HIDWORD(v6))) >> 32);
      BOOL v18 = v48 >= v47;
      unint64_t v51 = v48 - v47;
      uint64_t v52 = !v18;
      unint64_t v53 = v45 * (unint64_t)v6;
      unint64_t v54 = v45 * (unint64_t)HIDWORD(v6);
      unint64_t v55 = HIDWORD(v53) + v46 * (unint64_t)v6 + v54;
      unint64_t v56 = HIDWORD(v54);
      BOOL v18 = v51 >= v50;
      unint64_t v7 = v51 - v50;
      uint64_t v57 = !v18;
      unint64_t v20 = result - (v56 + v46 * (unint64_t)HIDWORD(v6) + HIDWORD(v55)) - v49 - v52 - v57;
      v41 += 2;
      --v42;
    }
    while (v42);
  }
LABEL_44:
  a5[1] = v20;
  a5[2] = v7;
  *a5 = 0;
  return result;
}

uint64_t __eval_pos_poly(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = *(int *)(result + 4);
  if (a2 >= 128)
  {
    do
    {
      a2 += v6;
      a3 += 2;
      --a4;
    }
    while (a2 > 127);
  }
  uint64_t v7 = *(void *)(result + 16);
  if (a2 >= 64)
  {
    unint64_t v10 = a3 + 2;
    do
    {
      a3 = v10;
      unint64_t v8 = *(v10 - 1) >> a2;
      uint64_t v11 = a2 + v6;
      if (a2 + v6 < 64)
      {
        unint64_t v9 = 0;
        --a4;
        a2 += v6;
        goto LABEL_11;
      }
      v10 += 2;
      --a4;
      a2 += v6;
    }
    while (!v8);
    do
    {
      unint64_t v12 = ((v8 * (unint64_t)HIDWORD(v5)) >> 32)
          + HIDWORD(v8) * (unint64_t)HIDWORD(v5)
          + ((((v8 * (unint64_t)v5) >> 32)
            + HIDWORD(v8) * (unint64_t)v5
            + (v8 * HIDWORD(v5))) >> 32);
      unint64_t v13 = a3[1] >> v11;
      v11 += v6;
      a3 += 2;
      --a4;
      unint64_t v8 = v12 + v13;
    }
    while (v11 > 63);
    unint64_t v9 = v8 < v12;
    a2 = v11;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
  }
LABEL_11:
  if (!a2)
  {
LABEL_20:
    int v18 = 0;
    goto LABEL_40;
  }
  if (!v9)
  {
    while (1)
    {
      unint64_t v14 = ((v8 * (unint64_t)HIDWORD(v5)) >> 32)
          + HIDWORD(v8) * (unint64_t)HIDWORD(v5)
          + ((((v8 * (unint64_t)v5) >> 32)
            + HIDWORD(v8) * (unint64_t)v5
            + (v8 * HIDWORD(v5))) >> 32);
      unint64_t v16 = *a3;
      unint64_t v15 = a3[1];
      a3 += 2;
      unint64_t v17 = (v16 >> a2) | (v15 << -(char)a2);
      unint64_t v9 = v15 >> a2;
      --a4;
      BOOL v39 = __CFADD__(v17, v14);
      unint64_t v8 = v17 + v14;
      if (v39) {
        ++v9;
      }
      a2 += v6;
      if (!a2) {
        goto LABEL_20;
      }
      if (v9) {
        goto LABEL_18;
      }
    }
  }
  unint64_t v9 = 1;
LABEL_18:
  if (a4 < 0) {
    goto LABEL_20;
  }
  int v18 = 0;
  unsigned int v19 = *(void *)(result + 16);
  unsigned int v20 = *(void *)(result + 8);
  do
  {
    do
    {
      unint64_t v21 = v9 * v5;
      unint64_t v23 = *a3;
      unint64_t v22 = a3[1];
      a3 += 2;
      unint64_t v24 = (v23 >> a2) | (v22 << -(char)a2);
      unint64_t v25 = v22 >> a2;
      unsigned int v26 = v9;
      unint64_t v27 = HIDWORD(v9);
      unint64_t v28 = ((v26 * (unint64_t)HIDWORD(v7)) >> 32)
          + v27 * (unint64_t)HIDWORD(v7)
          + ((((v26 * (unint64_t)v19) >> 32) + v27 * (unint64_t)v19 + v26 * HIDWORD(v7)) >> 32);
      BOOL v39 = __CFADD__(v24, v21);
      unint64_t v29 = v24 + v21;
      uint64_t v30 = v39;
      unint64_t v31 = ((v8 * (unint64_t)HIDWORD(v5)) >> 32)
          + HIDWORD(v8) * (unint64_t)HIDWORD(v5)
          + ((((v8 * (unint64_t)v20) >> 32)
            + HIDWORD(v8) * (unint64_t)v20
            + (v8 * HIDWORD(v5))) >> 32);
      BOOL v39 = __CFADD__(v29, v28);
      unint64_t v32 = v29 + v28;
      uint64_t v33 = v39;
      a2 += v6;
      unint64_t v34 = ((v26 * (unint64_t)HIDWORD(v5)) >> 32)
          + v27 * (unint64_t)HIDWORD(v5)
          + ((((v26 * (unint64_t)v20) >> 32) + v27 * (unint64_t)v20 + v26 * HIDWORD(v5)) >> 32);
      unint64_t v36 = v32 + v31;
      unint64_t v35 = (__PAIR128__(v33, v32) + __PAIR128__(v30, v31)) >> 64;
      unint64_t v8 = v36;
      unint64_t v37 = v35 + v25;
      unint64_t v38 = v37 + v34;
      BOOL v39 = v37 >= v35 && v38 >= v34;
      *((void *)&v41 + 1) = v37 + v34;
      *(void *)&long long v41 = v36;
      unint64_t v40 = v41 >> 1;
      if (v39)
      {
        unint64_t v9 = v38;
      }
      else
      {
        ++v18;
        unint64_t v8 = v40;
        unint64_t v9 = (v38 >> 1) | 0x8000000000000000;
      }
      if (!v39) {
        ++a2;
      }
      BOOL v39 = a4-- != 0;
      uint64_t result = v39;
    }
    while (a2 && (result & 1) != 0);
LABEL_40:
    if (a4 < 0) {
      break;
    }
    unsigned int v19 = v7;
    unsigned int v20 = v5;
    a3 += 2;
    uint64_t result = a4;
    while (1)
    {
      unint64_t v42 = v9 * v5;
      uint64_t v43 = *(a3 - 2);
      unsigned int v44 = v9;
      unint64_t v45 = HIDWORD(v9);
      unint64_t v46 = ((v44 * (unint64_t)HIDWORD(v7)) >> 32)
          + v45 * (unint64_t)HIDWORD(v7)
          + ((((v44 * (unint64_t)v7) >> 32)
            + v45 * (unint64_t)v7
            + v44 * HIDWORD(v7)) >> 32);
      BOOL v39 = __CFADD__(v43, v42);
      uint64_t v47 = v43 + v42;
      BOOL v48 = v39;
      a4 = result - 1;
      unint64_t v49 = ((v8 * (unint64_t)HIDWORD(v5)) >> 32)
          + HIDWORD(v8) * (unint64_t)HIDWORD(v5)
          + ((((v8 * (unint64_t)v5) >> 32)
            + HIDWORD(v8) * (unint64_t)v5
            + (v8 * HIDWORD(v5))) >> 32);
      BOOL v39 = __CFADD__(v47, v46);
      unint64_t v50 = v47 + v46;
      BOOL v51 = v39;
      unint64_t v52 = ((v44 * (unint64_t)HIDWORD(v5)) >> 32)
          + v45 * (unint64_t)HIDWORD(v5)
          + ((((v44 * (unint64_t)v5) >> 32)
            + v45 * (unint64_t)v5
            + v44 * HIDWORD(v5)) >> 32);
      unint64_t v54 = v50 + v49;
      unint64_t v53 = (__PAIR128__(v51, v50) + __PAIR128__(v48, v49)) >> 64;
      unint64_t v8 = v54;
      unint64_t v55 = v53 + *(a3 - 1);
      unint64_t v9 = v55 + v52;
      if (v55 < v53 || v9 < v52) {
        break;
      }
      a3 += 2;
      --result;
      if (a4 == -1) {
        goto LABEL_54;
      }
    }
    *((void *)&v57 + 1) = v55 + v52;
    *(void *)&long long v57 = v54;
    unint64_t v8 = v57 >> 1;
    ++v18;
    a2 = 1;
    unint64_t v9 = (v9 >> 1) | 0x8000000000000000;
  }
  while (result);
LABEL_54:
  *(void *)(a5 + _Block_object_dispose(&STACK[0x940], 8) = v9;
  *(void *)(a5 + 16) = v8;
  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 4) = v18;
  return result;
}

uint64_t __dpml_bid_ux_sqrt_evaluation__(int8x8_t *a1, int8x8_t *a2)
{
  memset(v18, 0, sizeof(v18));
  int8x8_t v3 = a1[1];
  *(void *)&double v4 = (*(void *)&v3 >> 11) + 0x3FD0000000000000;
  char v5 = a1->i32[1] & 1 | 0x28;
  int v6 = (a1->i32[1] & 1) + a1->i32[1];
  double v7 = (double)(unint64_t)(*(void *)&v3 >> v5) * 0.0000000596046448;
  double v8 = (double)(((unint64_t)((2 * *(void *)&v3) << (~v5 & 0x3F)) | (*(void *)&a1[2] >> v5)) >> 11)
     * 6.6174449e-24;
  unint64_t v9 = (double *)((char *)&__dpml_bid_sqrt_t_table + 16 * (((a1->i32[1] & 1u) << 7) ^ HIBYTE(*(void *)&v3)));
  double v10 = (v9[1] + *((float *)v9 + 1) * v4 + *(float *)v9 * (v4 * v4)) * 1.41421356;
  float v11 = v10 * (v7 + v8);
  *(float *)&double v10 = v10;
  double v12 = *(float *)&v10;
  uint64_t v13 = (uint64_t)(((v7 + v8) * -0.375 * (v12 * v12) + 0.875)
                * v12
                * (1.0 - v11 * v12 - (v8 * v12 - (v11 - v7 * v12)) * v12)
                * 3.77789319e22);
  int64_t v14 = (v13 >> 12) + (vcvtd_n_u64_f64(v12, 0x18uLL) << 39) + (((unint64_t)v13 >> 11) & 1);
  uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  if ((v14 & 0x4000000000000000) == 0) {
    uint64_t v15 = -1;
  }
  v19[0].i32[0] = 0;
  v19[0].i32[1] = 1 - (v6 >> 1);
  if (v14 >= 0) {
    int8x8_t v16 = (int8x8_t)v15;
  }
  else {
    int8x8_t v16 = (int8x8_t)v14;
  }
  v19[1] = v16;
  v19[2] = 0;
  __dpml_bid_multiply__(v19, a1, v18);
  __dpml_bid_multiply__(v19, v18, a2);
  __dpml_bid_addsub__((uint64_t)&unk_1BDDBC7A0, a2, 9, (uint64_t)a2);
  uint64_t result = __dpml_bid_multiply__(a2, v18, a2);
  --a2->i32[1];
  return result;
}

double bid_f128_sqrt(__n128 *a1, uint64_t *a2)
{
  memset(v13, 0, sizeof(v13));
  if ((__dpml_bid_unpack_x_or_y__(a2, 0, (uint64_t)v13, __dpml_bid_sqrt_x_table, (uint64_t)a1, v7) & 0x8000000000000000) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    unint64_t v12 = 0;
    __dpml_bid_ux_sqrt_evaluation__(v13, v11);
    __dpml_bid_ffs_and_shift__((uint64_t)v11, 0);
    if ((((_WORD)v12 + 8) & 0x3FF0) == 0)
    {
      memset(v10, 0, sizeof(v10));
      memset(v9, 0, sizeof(v9));
      memset(v8, 0, sizeof(v8));
      unint64_t v4 = v12 & 0xFFFFFFFFFFFF8000;
      unint64_t v5 = v12 & 0xFFFFFFFFFFFF8000 | 0x4000;
      unint64_t v12 = v5;
      __dpml_bid_extended_multiply__((uint64_t)v11, (uint64_t)v11, (uint64_t)v9, (uint64_t)v8);
      __dpml_bid_addsub__((uint64_t)v13, v9, 1, (uint64_t)v10);
      __dpml_bid_addsub__((uint64_t)v10, v8, 1, (uint64_t)v10);
      if (LODWORD(v10[0])) {
        unint64_t v6 = v4;
      }
      else {
        unint64_t v6 = v5;
      }
      unint64_t v12 = v6;
    }
    *(void *)&double result = __dpml_bid_pack__((unsigned int *)v11, a1, 0, 0).n128_u64[0];
  }
  return result;
}

uint64_t __dpml_bid_ux_sincos(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  memset(v13, 0, sizeof(v13));
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int8x8_t *))__dpml_bid_ux_degree_reduce__;
  if ((a3 & 0x10) == 0) {
    unint64_t v6 = __dpml_bid_ux_radian_reduce__;
  }
  int v7 = v6(a1, a2, v13);
  int v8 = v7;
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFEFLL;
  uint64_t v10 = 1216;
  if ((v7 & 1) == 0) {
    uint64_t v10 = 1038;
  }
  if (v9 == 3) {
    unint64_t v11 = ((unint64_t)(v7 & 1) << 9) | 0x1CE;
  }
  else {
    unint64_t v11 = v10;
  }
  __dpml_bid_evaluate_rational__(v13, (uint64_t)&unk_1BDDBD100, 13, v11, (uint64_t)a4);
  if ((v8 & 2) != 0) {
    *a4 ^= 0x80000000;
  }
  if (v9 == 3 && ((v8 + 1) & 2) != 0) {
    a4[6] ^= 0x80000000;
  }
  return 0;
}

unint64_t __dpml_bid_ux_degree_reduce__(int8x8_t *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a1->u32[1];
  if ((int)v6 >= 143)
  {
    LODWORD(v6) = v6
                - 12
                * (((((unint64_t)(1431655766 * (v6 + 32641)) >> 32) + (357913941 * (v6 + 32641))) >> 32)
                 + ((unint64_t)(357913941 * (v6 + 32641)) >> 32))
                + 32772;
    a1->i32[1] = v6;
  }
  unsigned int v7 = a1->i32[0];
  if ((int)v6 >= 16)
  {
    unint64_t v8 = (unint64_t)(v6 - 15) >> 6;
    int8x8_t v9 = (int8x8_t)(((_BYTE)v6 - 15) & 0x3F);
    __int32 v10 = v6 - v9.i32[0];
    if ((((_BYTE)v6 - 15) & 0x3F) != 0)
    {
      int8x8_t v12 = a1[1];
      int8x8_t v11 = a1[2];
      int8x8_t v13 = (int8x8_t)(*(void *)&v11 << v9.i8[0]);
      uint64_t v14 = *(void *)&v12 << v9.i8[0];
      uint64_t v15 = -*(void *)&v9;
      a1[1] = (int8x8_t)(v14 | (*(void *)&v11 >> v15));
      a1[2] = v13;
      int8x8_t v9 = (int8x8_t)(*(void *)&v12 >> v15);
    }
    uint64_t v16 = 0;
    *a1 = v9;
    unint64_t v17 = &a1[v8];
    uint64_t v18 = v8;
    int8x8_t v20 = v17[1];
    unsigned int v19 = (unint64_t *)&v17[1];
    unint64_t v21 = *(void *)&v20 >> 52;
    do
    {
      int8x8_t v22 = a1[v18];
      a1[v18] = 0;
      uint64_t v23 = v16 - 12;
      int8x8_t v24 = (int8x8_t)(*(void *)&v22 >> (12 - v16));
      BOOL v25 = v16 == 0;
      if (v16) {
        unint64_t v26 = ((*(void *)&v22 << v16) & 0xFFFLL) + v21;
      }
      else {
        unint64_t v26 = v21;
      }
      if (v25) {
        int8x8_t v27 = v22;
      }
      else {
        int8x8_t v27 = v24;
      }
      if (v25) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v23;
      }
      unint64_t v21 = (*(void *)&v27 & 0xFFFFFFFFFFFFFFFLL) + v26 + (*(void *)&v27 >> 60);
      uint64_t v16 = v28 + 4;
      --v18;
    }
    while (v18 != -1);
    unint64_t v29 = (v21 & 0xFFFFFF) + HIWORD(v21) + ((v21 >> 24) & 0xFFFFFF);
    if (v29 >= 0x1000)
    {
      do
        unint64_t v29 = (v29 & 0xFFF) + (v29 >> 12);
      while (v29 > 0xFFF);
    }
    *unsigned int v19 = *v19 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v29 << 52);
    a1->i32[1] = v10;
    LODWORD(v6) = v10 - __dpml_bid_ffs_and_shift__((uint64_t)a1, 0);
  }
  a1->i32[0] = 0;
  int8x8_t v30 = a1[1];
  if ((int)v6 < 6)
  {
    unint64_t v31 = 0;
    char v32 = 63;
  }
  else
  {
    unint64_t v31 = ((1527099483 * (unint64_t)v30.u32[0]) >> 32)
        + 1527099483 * v30.u32[1]
        + ((((95443718 * (unint64_t)v30.u32[0]) >> 32)
          + 95443718 * v30.u32[1]
          + (1527099483 * v30.i32[0])) >> 32);
    char v32 = 69 - v6;
  }
  unint64_t v33 = ((((a2 & 1) + 1) << (v32 - 1)) + v31) & (-1 << v32);
  uint64_t v34 = -3019898880 * HIDWORD(v33) + (*(void *)&v30 >> 2);
  unint64_t v35 = *(void *)&a1[1] & 3 | (4 * (v34 - ((3019898880u * (unint64_t)v33) >> 32)));
  if ((uint64_t)(v34 - ((3019898880u * (unint64_t)v33) >> 32)) < 0)
  {
    unsigned int v36 = v7 ^ 0x80000000;
    int8x8_t v37 = a1[2];
    int8x8_t v38 = (int8x8_t)-*(void *)&v37;
    if (v37) {
      uint64_t v39 = -1;
    }
    else {
      uint64_t v39 = 0;
    }
    a1[2] = v38;
    unint64_t v35 = v39 - v35;
  }
  else
  {
    unsigned int v36 = v7;
  }
  unint64_t v40 = v33 >> v32;
  if (v7) {
    unint64_t v40 = -(uint64_t)v40;
  }
  unint64_t v41 = v40 + (a2 >> 1);
  a1[1] = (int8x8_t)v35;
  __dpml_bid_ffs_and_shift__((uint64_t)a1, 0);
  __dpml_bid_multiply__(a1, qword_1BDDBD0C8, a3);
  *(_DWORD *)a3 ^= v36;
  return v41;
}

uint64_t __dpml_bid_ux_radian_reduce__(uint64_t a1, uint64_t a2, int8x8_t *a3)
{
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  int v5 = *(_DWORD *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v66 = ((a2 + (v5 >> 31)) & 1) + a2 + (v5 >> 31);
    uint64_t v67 = v66 >> 1;
    if (v66 == a2)
    {
      a3->i32[0] = v5;
      a3->i32[1] = v6;
      a3[1] = v4;
      a3[2] = *(int8x8_t *)(a1 + 16);
    }
    else
    {
      __dpml_bid_addsub__(a1, qword_1BDDBD3E0, v66 > a2, (uint64_t)a3);
    }
  }
  else
  {
    unint64_t v7 = v6 + 8;
    unint64_t v8 = v7 >> 6;
    int8x8_t v9 = (void *)((char *)&__four_over_pi + 8 * (v7 >> 6));
    unint64_t v10 = v9[1];
    uint64_t v11 = v7 & 0x3F;
    char v12 = ~(_BYTE)v11;
    unint64_t v13 = v10 >> 1 >> ~(_BYTE)v11;
    unint64_t v14 = v9[2];
    unint64_t v15 = v9[3];
    uint64_t v16 = v10 << v11;
    unint64_t v17 = *(void *)(a1 + 16);
    unint64_t v18 = v9[4];
    if (v11) {
      LOBYTE(v_Block_object_dispose(&STACK[0x940], 8) = 64 - v11;
    }
    uint64_t v19 = (*v9 << v11) | v13;
    unint64_t v20 = v16 | (v14 >> 1 >> ~(_BYTE)v11);
    unint64_t v21 = (v14 << v11) | (v15 >> 1 >> v12);
    unint64_t v22 = (v15 << v11) | (v18 >> 1 >> v12);
    unsigned int v23 = (v15 << v11) | (v18 >> 1 >> v12);
    unint64_t v24 = HIDWORD(v17);
    unsigned int v25 = v17;
    unint64_t v26 = v23 * (unint64_t)HIDWORD(v17);
    unint64_t v27 = HIDWORD(v22) * (unint64_t)v17;
    unint64_t v28 = ((v22 * (unint64_t)v17) >> 32) + v26 + v27;
    unint64_t v29 = (v22 * v17) | ((unint64_t)v28 << 32);
    unint64_t v30 = HIDWORD(v27) + HIDWORD(v22) * (unint64_t)HIDWORD(v17) + HIDWORD(v26) + HIDWORD(v28);
    unint64_t v31 = v22 * (unint64_t)v4.u32[0];
    unint64_t v32 = v23 * (unint64_t)v4.u32[1];
    unint64_t v33 = HIDWORD(v22) * (unint64_t)v4.u32[0];
    unint64_t v34 = v30 + (unint64_t)v31;
    unint64_t v35 = HIDWORD(v31) + v32 + v33 + HIDWORD(v30) + HIDWORD(v34);
    uint64_t v36 = v34;
    unint64_t v37 = HIDWORD(v33) + HIDWORD(v22) * (unint64_t)v4.u32[1] + HIDWORD(v32) + HIDWORD(v35);
    LODWORD(v34) = v21;
    unint64_t v38 = v21 * (unint64_t)v17;
    unint64_t v39 = v21 * (unint64_t)HIDWORD(v17);
    unint64_t v40 = HIDWORD(v21);
    unint64_t v41 = HIDWORD(v21) * (unint64_t)v17;
    unint64_t v42 = HIDWORD(v21) * (unint64_t)HIDWORD(v17);
    unint64_t v43 = v36 + v38;
    unint64_t v44 = HIDWORD(v38) + v39 + v41 + v35 + HIDWORD(v43);
    unint64_t v45 = HIDWORD(v39) + HIDWORD(v41) + v42 + v37 + HIDWORD(v44);
    unint64_t v46 = HIDWORD(v37) + HIDWORD(v42) + HIDWORD(v45);
    unint64_t v47 = v21 * (unint64_t)v4.u32[0];
    unint64_t v48 = v34 * (unint64_t)v4.u32[1];
    unint64_t v49 = v40 * (unint64_t)v4.u32[0];
    unint64_t v50 = v45 + (unint64_t)v47;
    unint64_t v51 = HIDWORD(v47) + v48 + v49 + v46 + HIDWORD(v50);
    unint64_t v52 = v20 * (unint64_t)v17;
    unint64_t v53 = v20 * (unint64_t)HIDWORD(v17);
    uint64_t v54 = v19 * v17;
    if (v5) {
      a2 = -(int)a2;
    }
    uint64_t v55 = v54 + (a2 << 61);
    unint64_t v56 = HIDWORD(v20) * (unint64_t)v25;
    unint64_t v57 = v50 + (unint64_t)v52;
    unint64_t v58 = HIDWORD(v52) + v53 + v56 + HIDWORD(v57) + v51;
    unint64_t v59 = v55
        + v20 * *(void *)&v4
        + HIDWORD(v20) * (unint64_t)v24
        + HIDWORD(v56)
        + HIDWORD(v53)
        + v40 * (unint64_t)v4.u32[1]
        + HIDWORD(v49)
        + HIDWORD(v48)
        + HIDWORD(v46)
        + HIDWORD(v51)
        + HIDWORD(v58);
    unint64_t v60 = v43 | ((unint64_t)v44 << 32);
    unint64_t v61 = v57 | ((unint64_t)v58 << 32);
    if (((v59 + 0x40000000000000) & 0x3F80000000000000) != 0)
    {
      int v62 = 0;
      uint64_t v63 = v61;
      unint64_t v64 = v60;
      unint64_t v65 = v29;
    }
    else
    {
      int v62 = 0;
      uint64_t v68 = v9 + 5;
      while (1)
      {
        unint64_t v69 = *v68;
        if (v11) {
          unint64_t v18 = (*v68 >> v8) | (v18 << v11);
        }
        unsigned int v70 = v18;
        unint64_t v71 = v18 * (unint64_t)v25;
        unint64_t v72 = v18 * (unint64_t)v24;
        unint64_t v73 = HIDWORD(v18);
        unint64_t v74 = HIDWORD(v18) * (unint64_t)v25;
        unint64_t v75 = HIDWORD(v18) * (unint64_t)v24;
        unint64_t v76 = HIDWORD(v71) + v72 + v74;
        unint64_t v77 = HIDWORD(v74) + v29 + HIDWORD(v72) + v75 + HIDWORD(v76);
        unint64_t v78 = HIDWORD(v75) + HIDWORD(v29) + HIDWORD(v77);
        unint64_t v79 = v70 * (unint64_t)v4.u32[0];
        unint64_t v80 = v70 * (unint64_t)v4.u32[1];
        unint64_t v81 = v73 * (unint64_t)v4.u32[0];
        unint64_t v82 = v73 * (unint64_t)v4.u32[1];
        unint64_t v83 = v61;
        unint64_t v84 = v77 + (unint64_t)v79 + HIDWORD(v78);
        unint64_t v85 = HIDWORD(v79) + v80 + v81 + v78 + HIDWORD(v84);
        unint64_t v86 = HIDWORD(v81) + v60 + HIDWORD(v80) + v82 + HIDWORD(v85);
        unint64_t v87 = HIDWORD(v82) + HIDWORD(v60) + HIDWORD(v86);
        uint64_t v88 = v83 == -1 && (unint64_t)(HIDWORD(v87) != 0);
        unint64_t v89 = v84 | ((unint64_t)v85 << 32);
        unint64_t v60 = v89;
        unint64_t v61 = v86 | ((unint64_t)v87 << 32);
        v59 += v88;
        uint64_t v63 = HIDWORD(v87) ? v83 + 1 : v83;
        *((void *)&v90 + 1) = v59;
        *(void *)&long long v90 = v63;
        if ((unint64_t)(v90 >> 55) != (uint64_t)(v90 >> 55) >> 63) {
          break;
        }
        unint64_t v65 = v71 | ((unint64_t)v76 << 32);
        ++v68;
        unint64_t v59 = v59 & 0xE000000000000000 | v63 & 0x1FFFFFFFFFFFFFFFLL;
        v62 += 64;
        unint64_t v29 = v65;
        unint64_t v18 = v69;
        uint64_t v63 = v61;
        unint64_t v64 = v89;
        if (((v59 + 0x40000000000000) & 0x3F80000000000000) != 0) {
          goto LABEL_24;
        }
      }
      unint64_t v64 = v61;
      unint64_t v65 = v89;
    }
LABEL_24:
    uint64_t v91 = 4 * v59;
    uint64_t v92 = (uint64_t)(4 * v59) >> 2;
    BOOL v93 = v92 == (uint64_t)(4 * v59) >> 63;
    if (v92 == (uint64_t)(4 * v59) >> 63)
    {
      uint64_t v92 = v63;
      uint64_t v94 = v64;
    }
    else
    {
      uint64_t v94 = v63;
    }
    if (v93) {
      unint64_t v95 = v65;
    }
    else {
      unint64_t v95 = v64;
    }
    if (v93) {
      int v96 = v62 + 64;
    }
    else {
      int v96 = v62;
    }
    uint64_t v97 = -v94;
    if (v95) {
      uint64_t v97 = ~v94;
    }
    uint64_t v98 = -v92;
    if (v97) {
      uint64_t v98 = ~v92;
    }
    if (v91 < 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = v92;
    }
    if (v91 < 0) {
      int8x8_t v100 = (int8x8_t)v97;
    }
    else {
      int8x8_t v100 = (int8x8_t)v94;
    }
    if (v91 >= 0) {
      unint64_t v101 = v95;
    }
    else {
      unint64_t v101 = -(uint64_t)v95;
    }
    a3->i32[0] = HIDWORD(v91) & 0x80000000 ^ v5;
    a3->i32[1] = 3;
    if (v5) {
      unint64_t v102 = ((uint64_t)(4 * v59) >> 2) - v59;
    }
    else {
      unint64_t v102 = v59 - ((uint64_t)(4 * v59) >> 2);
    }
    a3[1] = (int8x8_t)v99;
    a3[2] = v100;
    __dpml_bid_ffs_and_shift__((uint64_t)a3, 0);
    __int32 v103 = a3->i32[1];
    if (v103 != 3) {
      *(void *)&a3[2] |= v101 >> (v103 + 61);
    }
    a3->i32[1] = v103 - v96;
    __dpml_bid_multiply__(a3, qword_1BDDBD3E0, a3);
    return v102 >> 62;
  }
  return v67;
}

void __dpml_bid_C_ux_trig__(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __n128 *a5, void *a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  unint64_t v9 = __dpml_bid_unpack_x_or_y__(a1, 0, (uint64_t)v13, a4, (uint64_t)a5, a6);
  if ((v9 & 0x8000000000000000) != 0)
  {
    if ((a3 & 0xFFFFFFFFFFFFFFEFLL) == 3)
    {
      char v12 = (__n128 *)&unk_1BDDBD0E0;
      if ((v9 & 0x1FFFFFFFCLL) == 0) {
        char v12 = a5;
      }
      a5[1].n128_u64[1] = v12->n128_u64[1];
      a5[1].n128_u64[0] = v12->n128_u64[0];
    }
  }
  else
  {
    unint64_t v10 = (uint64_t (*)(void *, uint64_t, uint64_t, unsigned int *))__dpml_bid_ux_sincos;
    if ((a3 & 3) == 0) {
      unint64_t v10 = (uint64_t (*)(void *, uint64_t, uint64_t, unsigned int *))__dpml_bid_ux_tancot__;
    }
    uint64_t v11 = v10(v13, a2, a3, v14);
    __dpml_bid_pack__(v14, a5, 0, v11);
    if ((a3 & 0xFFFFFFFFFFFFFFEFLL) == 3) {
      __dpml_bid_pack__(v15, a5 + 1, 0, 0);
    }
  }
}

uint64_t __dpml_bid_ux_tancot__(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int8x8_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int8x8_t *))__dpml_bid_ux_degree_reduce__;
  if ((a3 & 0x10) == 0) {
    uint64_t v6 = __dpml_bid_ux_radian_reduce__;
  }
  char v7 = v6(a1, a2, &v11);
  char v8 = v7;
  if (v12)
  {
    __dpml_bid_evaluate_rational__(&v11, (uint64_t)&unk_1BDDBD2D0, 7, ((unint64_t)((v7 + (a3 >> 3)) & 1) << 9) | 0xCE, a4);
    int v9 = *(_DWORD *)a4;
    if (v8)
    {
      v9 ^= 0x80000000;
      *(_DWORD *)a4 = v9;
    }
    if (v9) {
      return 28;
    }
    else {
      return 27;
    }
  }
  else
  {
    *(void *)a4 = 0xFFFE000000000000;
    *(void *)(a4 + _Block_object_dispose(&STACK[0x940], 8) = 0;
    *(void *)(a4 + 16) = 0;
    if ((v7 + (a3 >> 3)))
    {
      *(_DWORD *)(a4 + 4) = 0x1FFFF;
      *(void *)(a4 + _Block_object_dispose(&STACK[0x940], 8) = 0x8000000000000000;
    }
    if ((a3 & 4) != 0) {
      return 110;
    }
    else {
      return 32;
    }
  }
}

unint64_t __bid128_acos(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a1;
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    __n128 v13 = 0uLL;
    v12[0] = 0;
    v12[1] = 0;
    v15[0] = __bid128_to_binary128(a1, a2, a3, &my_fpsf);
    v15[1] = v6;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __dpml_bid_unpack_x_or_y__(v15, 0, (uint64_t)&v17, &qword_1BDDBAE40, (uint64_t)v12, v20);
    if (bid_f128_cmp(v12, (uint64_t *)&c_1em40, 1u)) {
      return __bid128_add(0xDD5F2AB27379CFC7, 0x2FFE4D723CABCB53, 0x492B4138A162883uLL, 0x2FBAD9F8AFB501D4, a3, &my_fpsf);
    }
    if (bid_f128_cmp(v12, (uint64_t *)&c_7_10ths, 3u))
    {
      __dpml_bid_ux_asin_acos__(v15, 0x1A30038uLL, &qword_1BDDBBB80, &v13, v20);
    }
    else
    {
      if (bid_f128_cmp(v12, (uint64_t *)&c_one, 4u))
      {
        unint64_t v4 = 0;
        my_fpsf |= 1u;
        return v4;
      }
      if (bid_f128_cmp(v12, (uint64_t *)&c_one, 6u)) {
        return 0;
      }
      unint64_t v9 = bid128_ext_fma(v20, (int *)&v17, (int *)v14, &v16, v4, a2, v4, a2, 1uLL, 0xB040000000000000, a3, &my_fpsf);
      v14[0] = __bid128_to_binary128(v9, v10, a3, &my_fpsf);
      v14[1] = v11;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      __dpml_bid_unpack_x_or_y__(v14, 0, (uint64_t)&v17, &__dpml_bid_bid_x_table, (uint64_t)&v13, v20);
      bid_f128_sqrt(&v13, (uint64_t *)&v13);
      __dpml_bid_ux_asin_acos__((uint64_t *)&v13, 0xF04E00uLL, (uint64_t *)&__dpml_bid_inv_trig_x_table, &v13, v20);
      if (bid_f128_cmp(v15, (uint64_t *)&c_zero, 1u)) {
        bid_f128_sub(&v13, (uint64_t *)&c_pi, (uint64_t *)&v13);
      }
    }
    return __binary128_to_bid128(v13.n128_u64[0], v13.n128_u64[1], a3, &my_fpsf);
  }
  else
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
  }
  return v4;
}

unint64_t __bid128_add(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int a5, int *a6)
{
  unint64_t v6 = a2 & 0x8000000000000000;
  unint64_t v7 = a4 & 0x8000000000000000;
  if ((~a2 & 0x7800000000000000) == 0 || (a4 & 0x7800000000000000) == 0x7800000000000000)
  {
    if ((a2 & 0x7C00000000000000) == 0x7C00000000000000)
    {
      if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
        || result > 0x38C15B09FFFFFFFFLL && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
      {
        double result = 0;
        a2 &= 0xFFFFC00000000000;
      }
      if ((~a2 & 0x7E00000000000000) == 0 || (a4 & 0x7E00000000000000) == 0x7E00000000000000) {
        *a6 |= 1u;
      }
      return result;
    }
    if ((a4 & 0x7C00000000000000) != 0x7C00000000000000)
    {
      if ((a2 & 0x7C00000000000000) != 0x7800000000000000) {
        return 0;
      }
      if ((a4 & 0x7C00000000000000) != 0x7800000000000000 || v6 == v7) {
        return 0;
      }
      double result = 0;
      *a6 |= 1u;
      return result;
    }
    if ((a4 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || (a4 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a3 > 0x38C15B09FFFFFFFFLL)
    {
      a3 = 0;
      a4 &= 0xFFFFC00000000000;
    }
    if ((~a4 & 0x7E00000000000000) == 0) {
      *a6 |= 1u;
    }
    return a3;
  }
  if ((~a2 & 0x6000000000000000) == 0)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 4 * a2;
    goto LABEL_19;
  }
  unint64_t v10 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFuLL) <= 0x1ED09BEAD87C0)
  {
    if (result <= 0x378D8E63FFFFFFFFLL)
    {
      unint64_t v9 = result;
      goto LABEL_18;
    }
    unint64_t v9 = result;
    uint64_t v11 = a2;
    if (v10 != 0x1ED09BEAD87C0) {
      goto LABEL_19;
    }
  }
  unint64_t v9 = 0;
  unint64_t v10 = 0;
LABEL_18:
  uint64_t v11 = a2;
LABEL_19:
  if ((~a4 & 0x6000000000000000) == 0)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 4 * a4;
    goto LABEL_35;
  }
  unint64_t v13 = a4 & 0x1FFFFFFFFFFFFLL;
  if ((a4 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0)
  {
LABEL_33:
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    goto LABEL_34;
  }
  if ((a4 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0)
  {
    unint64_t v12 = a3;
    uint64_t v14 = a4;
    if (a3 <= 0x378D8E63FFFFFFFFLL) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  unint64_t v12 = a3;
LABEL_34:
  uint64_t v14 = a4;
LABEL_35:
  unint64_t v15 = v11 & 0x7FFE000000000000;
  unint64_t v16 = v14 & 0x7FFE000000000000;
  if (!(v10 | v9))
  {
    if (!(v13 | v12))
    {
      if (v6 && v7) {
        return 0;
      }
      else {
        return 0;
      }
    }
    BOOL v207 = v16 >= v15;
    unint64_t v49 = v16 - v15;
    if (v49 == 0 || !v207) {
      return a3;
    }
    if (v12 >> 53) {
      unint64_t v50 = HIDWORD(v12);
    }
    else {
      unint64_t v50 = v12;
    }
    uint64_t v51 = -1023;
    if (v12 >> 53) {
      uint64_t v51 = -991;
    }
    if (v13)
    {
      unint64_t v50 = v13;
      uint64_t v51 = -959;
    }
    unint64_t v52 = ((COERCE_UNSIGNED_INT64((double)v50) >> 52) & 0x7FF) + v51;
    int v53 = *((_DWORD *)&__bid_nr_digits + 8 * v52);
    if (!v53)
    {
      uint64_t v54 = (char *)&__bid_nr_digits + 32 * v52;
      int v53 = *((_DWORD *)v54 + 6);
      unint64_t v55 = *((void *)v54 + 1);
      if (v13 > v55 || v13 == v55 && v12 >= *((void *)&__bid_nr_digits + 4 * v52 + 2)) {
        ++v53;
      }
    }
    unint64_t v56 = v49 >> 49;
    if (34 - v53 < (int)v56) {
      LODWORD(v56) = 34 - v53;
    }
    if (v56)
    {
      if (v53 > 19)
      {
        return (__bid_ten2k64[(int)v56] * v12) | ((unint64_t)(__bid_ten2k64[(int)v56] * HIDWORD(v12) + HIDWORD(__bid_ten2k64[(int)v56]) * v12 + ((__bid_ten2k64[(int)v56] * (unint64_t)v12) >> 32)) << 32);
      }
      else if ((int)v56 > 19)
      {
        uint64_t v226 = __bid_ten2k128[2 * (v56 - 20)];
        return (v226 * v12) | ((unint64_t)(HIDWORD(v226) * v12
                                                                            + v226 * HIDWORD(v12)
                                                                            + ((v226
                                                                              * (unint64_t)v12) >> 32)) << 32);
      }
      else
      {
        return (__bid_ten2k64[(int)v56] * v12) | ((unint64_t)(HIDWORD(__bid_ten2k64[(int)v56]) * v12 + __bid_ten2k64[(int)v56] * HIDWORD(v12) + ((__bid_ten2k64[(int)v56] * (unint64_t)v12) >> 32)) << 32);
      }
    }
    return a3;
  }
  if (!(v13 | v12))
  {
    BOOL v207 = v15 >= v16;
    unint64_t v17 = v15 - v16;
    if (v17 != 0 && v207)
    {
      if (v9 >> 53) {
        unint64_t v18 = HIDWORD(v9);
      }
      else {
        unint64_t v18 = v9;
      }
      uint64_t v19 = -1023;
      if (v9 >> 53) {
        uint64_t v19 = -991;
      }
      if (v10)
      {
        unint64_t v18 = v10;
        uint64_t v19 = -959;
      }
      unint64_t v20 = ((COERCE_UNSIGNED_INT64((double)v18) >> 52) & 0x7FF) + v19;
      int v21 = *((_DWORD *)&__bid_nr_digits + 8 * v20);
      if (!v21)
      {
        unint64_t v22 = (char *)&__bid_nr_digits + 32 * v20;
        int v21 = *((_DWORD *)v22 + 6);
        unint64_t v23 = *((void *)v22 + 1);
        if (v10 > v23 || v10 == v23 && v9 >= *((void *)&__bid_nr_digits + 4 * v20 + 2)) {
          ++v21;
        }
      }
      unint64_t v24 = v17 >> 49;
      if (34 - v21 < (int)v24) {
        LODWORD(v24) = 34 - v21;
      }
      if (v24)
      {
        if (v21 > 19)
        {
          return (__bid_ten2k64[(int)v24] * v9) | ((unint64_t)(__bid_ten2k64[(int)v24] * HIDWORD(v9) + HIDWORD(__bid_ten2k64[(int)v24]) * v9 + ((__bid_ten2k64[(int)v24] * (unint64_t)v9) >> 32)) << 32);
        }
        else if ((int)v24 > 19)
        {
          uint64_t v97 = __bid_ten2k128[2 * (v24 - 20)];
          return (v97 * v9) | ((unint64_t)(HIDWORD(v97) * v9
                                                                            + v97 * HIDWORD(v9)
                                                                            + ((v97
                                                                              * (unint64_t)v9) >> 32)) << 32);
        }
        else
        {
          return (__bid_ten2k64[(int)v24] * v9) | ((unint64_t)(HIDWORD(__bid_ten2k64[(int)v24]) * v9 + __bid_ten2k64[(int)v24] * HIDWORD(v9) + ((__bid_ten2k64[(int)v24] * (unint64_t)v9) >> 32)) << 32);
        }
      }
    }
    return result;
  }
  if (v15 < v16) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = v12;
  }
  if (v15 < v16) {
    unint64_t v26 = v12;
  }
  else {
    unint64_t v26 = v9;
  }
  if (v15 < v16) {
    unint64_t v27 = v10;
  }
  else {
    unint64_t v27 = v13;
  }
  if (v15 < v16) {
    unint64_t v28 = v13;
  }
  else {
    unint64_t v28 = v10;
  }
  if (v15 < v16) {
    unint64_t v29 = v15;
  }
  else {
    unint64_t v29 = v16;
  }
  if (v15 < v16) {
    unint64_t v30 = v16;
  }
  else {
    unint64_t v30 = v15;
  }
  if (v15 < v16) {
    unint64_t v31 = v6;
  }
  else {
    unint64_t v31 = a4 & 0x8000000000000000;
  }
  if (v15 < v16) {
    unint64_t v32 = a4 & 0x8000000000000000;
  }
  else {
    unint64_t v32 = v6;
  }
  unint64_t v33 = HIDWORD(v26);
  if (v26 >> 53) {
    unint64_t v34 = HIDWORD(v26);
  }
  else {
    unint64_t v34 = v26;
  }
  uint64_t v35 = -1023;
  if (v26 >> 53) {
    uint64_t v36 = -991;
  }
  else {
    uint64_t v36 = -1023;
  }
  if (v28)
  {
    unint64_t v34 = v28;
    uint64_t v36 = -959;
  }
  unint64_t v37 = ((COERCE_UNSIGNED_INT64((double)v34) >> 52) & 0x7FF) + v36;
  int v38 = *((_DWORD *)&__bid_nr_digits + 8 * v37);
  if (!v38)
  {
    unint64_t v39 = (char *)&__bid_nr_digits + 32 * v37;
    int v38 = *((_DWORD *)v39 + 6);
    unint64_t v40 = *((void *)v39 + 1);
    if (v28 > v40 || v28 == v40 && v26 >= *((void *)&__bid_nr_digits + 4 * v37 + 2)) {
      ++v38;
    }
  }
  unint64_t v41 = HIDWORD(v25);
  if (v25 >> 53) {
    uint64_t v35 = -991;
  }
  else {
    unint64_t v41 = v25;
  }
  if (v27) {
    unint64_t v42 = v27;
  }
  else {
    unint64_t v42 = v41;
  }
  if (v27) {
    uint64_t v35 = -959;
  }
  unint64_t v43 = ((COERCE_UNSIGNED_INT64((double)v42) >> 52) & 0x7FF) + v35;
  int v44 = *((_DWORD *)&__bid_nr_digits + 8 * v43);
  if (!v44)
  {
    unint64_t v45 = (char *)&__bid_nr_digits + 32 * v43;
    int v44 = *((_DWORD *)v45 + 6);
    unint64_t v46 = *((void *)v45 + 1);
    if (v27 > v46 || v27 == v46 && v25 >= *((void *)&__bid_nr_digits + 4 * v43 + 2)) {
      ++v44;
    }
  }
  int v47 = v38 + (v30 >> 49) - (v44 + (v29 >> 49));
  if (v47 >= 34)
  {
    if (v47 == 34)
    {
      if (v32 == v31) {
        goto LABEL_273;
      }
      if (v38 > 20)
      {
        v188 = &__bid_ten2k128[2 * (v38 - 21)];
        if (v28 != v188[1]) {
          goto LABEL_273;
        }
        uint64_t v48 = *v188;
      }
      else
      {
        if (v28) {
          goto LABEL_273;
        }
        uint64_t v48 = __bid_ten2k64[v38 - 1];
      }
      if (v26 == v48)
      {
        int v189 = 35 - v38;
        if (35 - v38 < 20)
        {
          if (v38 > 19)
          {
            unint64_t v390 = __bid_ten2k64[v189];
            unint64_t v391 = v390 * v28;
            unint64_t v392 = HIDWORD(v390);
            unint64_t v393 = HIDWORD(v390) * (unint64_t)v26;
            unint64_t v394 = v390 * (unint64_t)v26;
            unint64_t v395 = v390 * (unint64_t)HIDWORD(v26) + v393 + HIDWORD(v394);
            unint64_t v195 = v394 | ((unint64_t)v395 << 32);
            unint64_t v196 = v391 + v392 * (unint64_t)HIDWORD(v26) + HIDWORD(v393) + HIDWORD(v395);
          }
          else
          {
            uint64_t v331 = __bid_ten2k64[v189];
            unint64_t v332 = v331 * (unint64_t)HIDWORD(v26);
            unint64_t v333 = v331 * (unint64_t)v26;
            unint64_t v334 = HIDWORD(v332) + HIDWORD(v331) * (unint64_t)HIDWORD(v26);
            unint64_t v335 = HIDWORD(v331) * (unint64_t)v26 + v332 + HIDWORD(v333);
            unint64_t v196 = v334 + HIDWORD(v335);
            unint64_t v195 = v333 | ((unint64_t)v335 << 32);
          }
        }
        else
        {
          unint64_t v190 = __bid_ten2k128[2 * (15 - v38)];
          unint64_t v191 = HIDWORD(v190);
          unint64_t v192 = v190 * (unint64_t)HIDWORD(v26);
          unint64_t v193 = v190 * (unint64_t)v26;
          unint64_t v194 = HIDWORD(v190) * (unint64_t)v26 + v192 + HIDWORD(v193);
          unint64_t v195 = v193 | ((unint64_t)v194 << 32);
          unint64_t v196 = __bid_ten2k128[2 * (15 - v38) + 1] * v26
               + v191 * (unint64_t)HIDWORD(v26)
               + HIDWORD(v192)
               + HIDWORD(v194);
        }
        uint64_t v396 = (v44 - 2);
        if (v44 < 2)
        {
          int v400 = 0;
          int v401 = 0;
          goto LABEL_548;
        }
        if (v44 > 0x14)
        {
          unint64_t v399 = (__bid_midpoint128[v44 - 21] + __PAIR128__(v27, v25)) >> 64;
          unint64_t v398 = *(void *)&__bid_midpoint128[v44 - 21] + v25;
        }
        else
        {
          uint64_t v397 = __bid_midpoint64[v396];
          unint64_t v398 = v397 + v25;
          if (__CFADD__(v397, v25)) {
            unint64_t v399 = v27 + 1;
          }
          else {
            unint64_t v399 = v27;
          }
        }
        unint64_t v404 = HIDWORD(v398);
        unint64_t v406 = __bid_ten2mk128[2 * v396];
        unint64_t v405 = __bid_ten2mk128[2 * v396 + 1];
        unint64_t v407 = HIDWORD(v405);
        unint64_t v408 = v405 * (unint64_t)HIDWORD(v398);
        unint64_t v409 = HIDWORD(v408) + HIDWORD(v405) * (unint64_t)HIDWORD(v398);
        unint64_t v410 = HIDWORD(v405) * (unint64_t)v398
             + v408
             + ((v405 * (unint64_t)v398) >> 32);
        unint64_t v411 = HIDWORD(v410);
        unint64_t v412 = (v405 * v398) | ((unint64_t)v410 << 32);
        unint64_t v413 = HIDWORD(v406);
        unint64_t v414 = v406 * (unint64_t)HIDWORD(v398);
        unint64_t v415 = v406 * (unint64_t)v398;
        unint64_t v416 = HIDWORD(v406) * (unint64_t)v398 + v414 + HIDWORD(v415);
        unint64_t v417 = v415 | ((unint64_t)v416 << 32);
        unsigned long long v418 = __PAIR128__(v409, v412)
             + __PAIR128__(v411, HIDWORD(v414) + HIDWORD(v406) * (unint64_t)v404 + HIDWORD(v416));
        unint64_t v419 = HIDWORD(v399);
        LODWORD(v412) = v399;
        unint64_t v420 = v405 * (unint64_t)HIDWORD(v399);
        unint64_t v421 = v405 * (unint64_t)v399;
        unint64_t v422 = v407 * (unint64_t)v399;
        unint64_t v423 = HIDWORD(v420) + v407 * (unint64_t)HIDWORD(v399);
        unint64_t v424 = v422 + v420 + HIDWORD(v421);
        unint64_t v425 = HIDWORD(v424);
        unint64_t v426 = v421 | ((unint64_t)v424 << 32);
        unint64_t v427 = v406 * (unint64_t)HIDWORD(v399);
        unint64_t v428 = v406 * (unint64_t)v399;
        unint64_t v429 = HIDWORD(v406) * (unint64_t)v412 + v427 + HIDWORD(v428);
        unint64_t v430 = v428 | ((unint64_t)v429 << 32);
        unsigned long long v431 = __PAIR128__(v423, v426)
             + __PAIR128__(v425, HIDWORD(v427) + v413 * (unint64_t)v419 + HIDWORD(v429));
        unint64_t v432 = v418 + v430;
        BOOL v207 = __CFADD__(__CFADD__((void)v418, v430), (void)v431);
        uint64_t v433 = __CFADD__((void)v418, v430) + (void)v431;
        unsigned int v434 = v207;
        unint64_t v25 = *((void *)&v418 + 1) + v433;
        if (__CFADD__(*((void *)&v418 + 1), v433)) {
          uint64_t v435 = 1;
        }
        else {
          uint64_t v435 = v434;
        }
        unint64_t v27 = *((void *)&v431 + 1) + v435;
        if (v44 < 5)
        {
          if (v432 <= 0x8000000000000000)
          {
            LODWORD(v436) = 0;
            unint64_t v437 = 0;
            int v400 = 1;
            if (!v417 || v432 != 0x8000000000000000) {
              goto LABEL_891;
            }
          }
          v438 = (unint64_t *)&__bid_ten2mk128trunc[v396];
          unint64_t v439 = v438[1];
          if ((v432 ^ 0x8000000000000000) > v439)
          {
            unint64_t v437 = 0;
LABEL_562:
            unint64_t v440 = 0;
LABEL_563:
            int v400 = 0;
LABEL_564:
            LODWORD(v436) = 1;
LABEL_892:
            int v401 = v400;
            *a6 |= 0x20u;
            int v400 = v436;
LABEL_893:
            int v402 = 0;
            if (!(v432 | v417) || v437 || v440)
            {
              char v403 = 0;
              goto LABEL_906;
            }
            if (__PAIR128__(v432, v417) <= __bid_ten2mk128trunc[v396])
            {
              int v400 = 0;
              int v401 = 0;
              if ((v25 + v195))
              {
                int v402 = 0;
                BOOL v172 = v25-- == 0;
                uint64_t v514 = v172;
                v27 -= v514;
                char v403 = 1;
              }
              else
              {
                char v403 = 0;
                int v402 = 1;
              }
LABEL_906:
              unint64_t v515 = v196 - v27;
              BOOL v207 = v195 >= v25;
              unint64_t v516 = v195 - v25;
              uint64_t v517 = !v207;
              uint64_t v518 = v515 - v517;
              if (v518 < 0)
              {
                BOOL v172 = v516 == 0;
                unint64_t v516 = -(uint64_t)v516;
                if (v172) {
                  uint64_t v518 = -v518;
                }
                else {
                  uint64_t v518 = ~v518;
                }
                unint64_t v32 = v31;
              }
              if (!a5) {
                return v516;
              }
              if (v32)
              {
                if (a5 != 1 || !v401)
                {
                  if (a5 != 4 && a5 != 1) {
                    int v402 = 0;
                  }
                  if (v402 != 1) {
                    goto LABEL_941;
                  }
                }
              }
              else if (a5 != 2 || !v401)
              {
                if (a5 != 4 && a5 != 2) {
                  LOBYTE(v402) = 0;
                }
                if ((v402 & 1) == 0)
                {
LABEL_941:
                  char v522 = v403 ^ 1;
                  if (v400) {
                    char v522 = 0;
                  }
                  if ((v522 & 1) == 0 && ((a5 & 0xFFFFFFFE) == 2 && v32 || (a5 & 0xFFFFFFFD) == 1 && !v32))
                  {
                    double result = v516 - 1;
                    if ((__PAIR128__(v518, v516) - 1) >> 64 == 0x314DC6448D93 && v516 == 0x38C15B0A00000000) {
                      return 0x378D8E63FFFFFFFFLL;
                    }
                    return result;
                  }
                  return v516;
                }
              }
              double result = v516 + 1;
              if (v516 == -1) {
                ++v518;
              }
              if (v516 == 0x378D8E63FFFFFFFFLL && v518 == 0x1ED09BEAD87C0) {
                return 0x38C15B0A00000000;
              }
              return result;
            }
LABEL_548:
            int v402 = 0;
            char v403 = 0;
            goto LABEL_906;
          }
          if ((v432 ^ 0x8000000000000000) == v439)
          {
            int v400 = 0;
            unint64_t v437 = 0;
            if (v417 < *v438)
            {
              unint64_t v440 = 0;
              goto LABEL_755;
            }
            LODWORD(v436) = 1;
LABEL_891:
            unint64_t v440 = 0;
            goto LABEL_892;
          }
          unint64_t v437 = 0;
          goto LABEL_866;
        }
        uint64_t v441 = __bid_maskhigh128[v396];
        if (v44 >= 0x18) {
          unint64_t v437 = v441 & v27;
        }
        else {
          unint64_t v437 = 0;
        }
        if (v44 >= 0x18) {
          uint64_t v441 = -1;
        }
        unint64_t v440 = v25 & v441;
        int v442 = __bid_shiftright128[v396];
        if (v442 > 63)
        {
          unint64_t v25 = v27 >> v442;
          unint64_t v27 = 0;
        }
        else
        {
          unint64_t v25 = (v27 << -(char)v442) | (v25 >> v442);
          v27 >>= v442;
        }
        if (v44 <= 0x17)
        {
          unint64_t v473 = __bid_onehalf128[v396];
          if (!v437 && v440 <= v473)
          {
            LODWORD(v436) = 0;
            int v400 = 1;
            if (v440 != v473 || (unint64_t v473 = v440, !(v432 | v417)))
            {
              unint64_t v437 = 0;
              goto LABEL_892;
            }
          }
          int v400 = 0;
          LODWORD(v436) = 1;
          if (v437 != v473 > v440 || v440 != v473) {
            goto LABEL_892;
          }
          v474 = (unint64_t *)&__bid_ten2mk128trunc[v396];
          unint64_t v475 = v474[1];
          if (v432 > v475) {
            goto LABEL_563;
          }
          if (v432 != v475)
          {
LABEL_867:
            int v400 = 0;
            int v401 = 0;
            goto LABEL_893;
          }
          int v400 = 0;
          goto LABEL_699;
        }
        unint64_t v476 = __bid_onehalf128[v396];
        if (v437 <= v476)
        {
          if (v437 == v476)
          {
            unint64_t v436 = v432 | v417 | v440;
            if (v436) {
              goto LABEL_694;
            }
          }
          else
          {
            LODWORD(v436) = 0;
          }
          int v400 = 1;
          goto LABEL_892;
        }
LABEL_694:
        int v400 = 0;
        LODWORD(v436) = 1;
        if (v437 != v476 || v440) {
          goto LABEL_892;
        }
        v474 = (unint64_t *)&__bid_ten2mk128trunc[v396];
        unint64_t v477 = v474[1];
        if (v432 > v477) {
          goto LABEL_562;
        }
        if (v432 != v477)
        {
LABEL_866:
          unint64_t v440 = 0;
          goto LABEL_867;
        }
        int v400 = 0;
        unint64_t v440 = 0;
LABEL_699:
        if (v417 > *v474) {
          goto LABEL_564;
        }
LABEL_755:
        int v401 = 0;
        goto LABEL_893;
      }
LABEL_273:
      if (v44 <= 19)
      {
        unint64_t v197 = __bid_midpoint64[v44 - 1];
        if (v25 >= v197)
        {
          if (v25 == v197)
          {
            unint64_t v198 = v26 & 1;
            if (v38 < 34 || (v26 & 1) == 0)
            {
              if (v38 <= 33)
              {
                uint64_t v199 = (34 - v38);
                if (v38 > 19)
                {
                  unint64_t v449 = __bid_ten2k64[v199];
                  unint64_t v450 = v449 * v28;
                  unint64_t v451 = HIDWORD(v449);
                  unint64_t v452 = HIDWORD(v449) * (unint64_t)v26;
                  unint64_t v453 = v449 * (unint64_t)v26;
                  unint64_t v454 = v449 * (unint64_t)v33 + v452 + HIDWORD(v453);
                  unint64_t v26 = v453 | ((unint64_t)v454 << 32);
                  unint64_t v28 = v450 + v451 * (unint64_t)v33 + HIDWORD(v452) + HIDWORD(v454);
                }
                else if (v38 < 15)
                {
                  unint64_t v483 = __bid_ten2k64[15 - v38] * v26;
                  unint64_t v484 = 2313682944 * v483;
                  unint64_t v485 = (-1966660860 * v483) + 2313682944 * HIDWORD(v483) + HIDWORD(v484);
                  unint64_t v28 = ((2328306436u * (unint64_t)v483) >> 32)
                      + 2328306436 * HIDWORD(v483)
                      + HIDWORD(v485);
                  unint64_t v26 = v484 & 0xFFF80000 | (v485 << 32);
                }
                else
                {
                  uint64_t v200 = __bid_ten2k64[v199];
                  unint64_t v201 = HIDWORD(v200) * (unint64_t)v26;
                  unint64_t v202 = v200 * (unint64_t)v26;
                  unint64_t v203 = v200 * (unint64_t)v33 + v201 + HIDWORD(v202);
                  unint64_t v28 = HIDWORD(v201) + HIDWORD(v200) * (unint64_t)v33 + HIDWORD(v203);
                  unint64_t v26 = v202 | ((unint64_t)v203 << 32);
                }
                v30 -= v199 << 49;
                unint64_t v198 = v26 & 1;
              }
              BOOL v486 = a5 != 0;
              if (v32 != v31) {
                BOOL v486 = 1;
              }
              if (!v198) {
                BOOL v486 = 1;
              }
              BOOL v487 = v32 == v31 && a5 == 4;
              if (!v487 && v486 && (a5 != 2 || v32 || v31) && (a5 != 1 || !v32 || !v31))
              {
                if (a5 || v32 == v31 || !v198) {
                  goto LABEL_785;
                }
LABEL_843:
                if ((__PAIR128__(v28, v26) - 1) >> 64 == 0x314DC6448D93 && v26 == 0x38C15B0A00000000) {
                  unint64_t v26 = 0x378D8E63FFFFFFFFLL;
                }
                else {
                  --v26;
                }
LABEL_847:
                *a6 |= 0x20u;
                return v26;
              }
LABEL_420:
              BOOL v207 = __CFADD__(v26++, 1);
              if (v207) {
                ++v28;
              }
              if (v26 == 0x378D8E6400000000 && v28 == 0x1ED09BEAD87C0)
              {
                if (v30 == 0x5FFE000000000000)
                {
                  unint64_t v26 = 0;
                  *a6 |= 8u;
                }
                else
                {
                  unint64_t v26 = 0x38C15B0A00000000;
                }
              }
              goto LABEL_847;
            }
          }
          else if (v38 <= 33)
          {
            uint64_t v311 = (34 - v38);
            if (v38 > 19)
            {
              unint64_t v384 = __bid_ten2k64[v311];
              unint64_t v385 = v384 * v28;
              unint64_t v386 = HIDWORD(v384);
              unint64_t v387 = HIDWORD(v384) * (unint64_t)v26;
              unint64_t v388 = v384 * (unint64_t)v26;
              unint64_t v389 = v384 * (unint64_t)v33 + v387 + HIDWORD(v388);
              unint64_t v26 = v388 | ((unint64_t)v389 << 32);
              unint64_t v28 = v385 + v386 * (unint64_t)v33 + HIDWORD(v387) + HIDWORD(v389);
            }
            else if (v38 < 15)
            {
              unint64_t v455 = __bid_ten2k64[15 - v38] * v26;
              unint64_t v456 = 2313682944 * v455;
              unint64_t v457 = (-1966660860 * v455) + 2313682944 * HIDWORD(v455) + HIDWORD(v456);
              unint64_t v28 = ((2328306436u * (unint64_t)v455) >> 32)
                  + 2328306436 * HIDWORD(v455)
                  + HIDWORD(v457);
              unint64_t v26 = v456 & 0xFFF80000 | (v457 << 32);
            }
            else
            {
              uint64_t v312 = __bid_ten2k64[v311];
              unint64_t v313 = HIDWORD(v312) * (unint64_t)v26;
              unint64_t v314 = v312 * (unint64_t)v26;
              unint64_t v315 = v312 * (unint64_t)v33 + v313 + HIDWORD(v314);
              unint64_t v28 = HIDWORD(v313) + HIDWORD(v312) * (unint64_t)v33 + HIDWORD(v315);
              unint64_t v26 = v314 | ((unint64_t)v315 << 32);
            }
            v30 -= v311 << 49;
            if (v28 == 0x1ED09BEAD87C0 && v26 == 0x378D8E6400000000)
            {
              unint64_t v26 = 0x38C15B0A00000000;
              unint64_t v28 = 0x314DC6448D93;
              v30 += 0x2000000000000;
            }
          }
          if (!a5 && v32 != v31) {
            goto LABEL_843;
          }
          if (a5 == 4 && v32 != v31 && v25 != v197) {
            goto LABEL_843;
          }
          if (a5 == 1 && !v32 && v31) {
            goto LABEL_843;
          }
          BOOL v459 = a5 != 2 || v32 == 0;
          BOOL v460 = !v459 && v31 == 0;
          BOOL v461 = !v460;
          BOOL v462 = v32 != v31 && a5 == 3;
          if (v462 || !v461) {
            goto LABEL_843;
          }
          BOOL v463 = a5 == 4 || a5 == 0;
          if ((!v463 || v32 != v31) && (a5 != 1 || !v32 || !v31) && (a5 != 2 || v32 || v31)) {
            goto LABEL_847;
          }
          goto LABEL_420;
        }
LABEL_302:
        if (v38 <= 33)
        {
          uint64_t v215 = (34 - v38);
          if (v38 > 19)
          {
            unint64_t v261 = __bid_ten2k64[v215];
            unint64_t v262 = v261 * v28;
            unint64_t v263 = HIDWORD(v261);
            unint64_t v264 = HIDWORD(v261) * (unint64_t)v26;
            unint64_t v265 = v261 * (unint64_t)v26;
            unint64_t v266 = v261 * (unint64_t)v33 + v264 + HIDWORD(v265);
            unint64_t v26 = v265 | ((unint64_t)v266 << 32);
            unint64_t v28 = v262 + v263 * (unint64_t)v33 + HIDWORD(v264) + HIDWORD(v266);
          }
          else if (v38 < 15)
          {
            unint64_t v323 = __bid_ten2k64[15 - v38] * v26;
            unint64_t v324 = 2313682944 * v323;
            unint64_t v325 = (-1966660860 * v323) + 2313682944 * HIDWORD(v323) + HIDWORD(v324);
            unint64_t v28 = ((2328306436u * (unint64_t)v323) >> 32)
                + 2328306436 * HIDWORD(v323)
                + HIDWORD(v325);
            unint64_t v26 = v324 & 0xFFF80000 | (v325 << 32);
          }
          else
          {
            uint64_t v216 = __bid_ten2k64[v215];
            unint64_t v217 = HIDWORD(v216) * (unint64_t)v26;
            unint64_t v218 = v216 * (unint64_t)v26;
            unint64_t v219 = v216 * (unint64_t)v33 + v217 + HIDWORD(v218);
            unint64_t v28 = HIDWORD(v217) + HIDWORD(v216) * (unint64_t)v33 + HIDWORD(v219);
            unint64_t v26 = v218 | ((unint64_t)v219 << 32);
          }
          v30 -= v215 << 49;
        }
        if (!a5) {
          goto LABEL_847;
        }
        if ((a5 != 1 || !v32 || !v31) && (a5 != 2 || v32 || v31))
        {
LABEL_785:
          if (a5 != 1 || v32 || !v31)
          {
            BOOL v488 = a5 != 2 || v32 == 0;
            BOOL v489 = !v488 && v31 == 0;
            BOOL v490 = !v489;
            BOOL v491 = v32 != v31 && a5 == 3;
            if (!v491 && v490) {
              goto LABEL_847;
            }
          }
          goto LABEL_843;
        }
        goto LABEL_420;
      }
      v204 = (unint64_t *)&__bid_midpoint128[v44 - 20];
      unint64_t v205 = v204[1];
      if (v27 < v205) {
        goto LABEL_302;
      }
      unint64_t v206 = *v204;
      BOOL v207 = v27 != v205 || v25 >= v206;
      if (!v207) {
        goto LABEL_302;
      }
      BOOL v208 = v27 == v205 && v25 == v206;
      int v209 = v208;
      if (!v208)
      {
        if (v38 <= 33)
        {
          uint64_t v326 = (34 - v38);
          if (v38 > 19)
          {
            unint64_t v464 = __bid_ten2k64[v326];
            unint64_t v465 = v464 * v28;
            unint64_t v466 = HIDWORD(v464);
            unint64_t v467 = HIDWORD(v464) * (unint64_t)v26;
            unint64_t v468 = v464 * (unint64_t)v26;
            unint64_t v469 = v464 * (unint64_t)v33 + v467 + HIDWORD(v468);
            unint64_t v26 = v468 | ((unint64_t)v469 << 32);
            unint64_t v28 = v465 + v466 * (unint64_t)v33 + HIDWORD(v467) + HIDWORD(v469);
          }
          else if (v38 < 15)
          {
            unint64_t v498 = __bid_ten2k64[15 - v38] * v26;
            unint64_t v499 = 2313682944 * v498;
            unint64_t v500 = (-1966660860 * v498) + 2313682944 * HIDWORD(v498) + HIDWORD(v499);
            unint64_t v28 = ((2328306436u * (unint64_t)v498) >> 32)
                + 2328306436 * HIDWORD(v498)
                + HIDWORD(v500);
            unint64_t v26 = v499 & 0xFFF80000 | (v500 << 32);
          }
          else
          {
            uint64_t v327 = __bid_ten2k64[v326];
            unint64_t v328 = HIDWORD(v327) * (unint64_t)v26;
            unint64_t v329 = v327 * (unint64_t)v26;
            unint64_t v330 = v327 * (unint64_t)v33 + v328 + HIDWORD(v329);
            unint64_t v28 = HIDWORD(v328) + HIDWORD(v327) * (unint64_t)v33 + HIDWORD(v330);
            unint64_t v26 = v329 | ((unint64_t)v330 << 32);
          }
          v30 -= v326 << 49;
        }
        goto LABEL_806;
      }
      if (v38 >= 34 && (v26 & 1) != 0)
      {
LABEL_806:
        if (!a5 && v32 != v31) {
          goto LABEL_843;
        }
        if (a5 != 4 || v32 == v31)
        {
          BOOL v501 = v32 != 0;
          BOOL v502 = v31 != 0;
          if (a5 == 1 && !v32 && v31) {
            goto LABEL_843;
          }
          BOOL v503 = a5 != 2 || v32 == 0;
          BOOL v504 = !v503 && v31 == 0;
          BOOL v505 = !v504;
          BOOL v506 = v32 != v31 && a5 == 3;
          if (v506 || !v505) {
            goto LABEL_843;
          }
        }
        else
        {
          if (!v209) {
            goto LABEL_843;
          }
          BOOL v501 = v32 != 0;
          BOOL v502 = v31 != 0;
        }
        BOOL v507 = a5 == 4 || a5 == 0;
        if (!v507 || v32 != v31)
        {
          BOOL v508 = a5 == 1 && v501;
          if (!v508 || !v502)
          {
            if (a5 != 2) {
              BOOL v501 = 1;
            }
            if (v501 || v502) {
              goto LABEL_847;
            }
          }
        }
        goto LABEL_420;
      }
      if (v38 <= 33)
      {
        uint64_t v210 = (34 - v38);
        if (v38 > 19)
        {
          unint64_t v492 = __bid_ten2k64[v210];
          unint64_t v493 = v492 * v28;
          unint64_t v494 = HIDWORD(v492);
          unint64_t v495 = HIDWORD(v492) * (unint64_t)v26;
          unint64_t v496 = v492 * (unint64_t)v26;
          unint64_t v497 = v492 * (unint64_t)v33 + v495 + HIDWORD(v496);
          unint64_t v26 = v496 | ((unint64_t)v497 << 32);
          unint64_t v28 = v493 + v494 * (unint64_t)v33 + HIDWORD(v495) + HIDWORD(v497);
        }
        else if (v38 < 15)
        {
          unint64_t v511 = __bid_ten2k64[15 - v38] * v26;
          unint64_t v512 = 2313682944 * v511;
          unint64_t v513 = (-1966660860 * v511) + 2313682944 * HIDWORD(v511) + HIDWORD(v512);
          unint64_t v28 = ((2328306436u * (unint64_t)v511) >> 32)
              + 2328306436 * HIDWORD(v511)
              + HIDWORD(v513);
          unint64_t v26 = v512 & 0xFFF80000 | (v513 << 32);
        }
        else
        {
          uint64_t v211 = __bid_ten2k64[v210];
          unint64_t v212 = HIDWORD(v211) * (unint64_t)v26;
          unint64_t v213 = v211 * (unint64_t)v26;
          unint64_t v214 = v211 * (unint64_t)v33 + v212 + HIDWORD(v213);
          unint64_t v28 = HIDWORD(v212) + HIDWORD(v211) * (unint64_t)v33 + HIDWORD(v214);
          unint64_t v26 = v213 | ((unint64_t)v214 << 32);
        }
        v30 -= v210 << 49;
      }
      if (a5)
      {
        if (a5 == 4)
        {
          if (v32 != v31) {
            goto LABEL_975;
          }
        }
        else if ((a5 != 2 || v32 || v31) && (a5 != 1 || !v32 || !v31))
        {
          if (a5 == 1 && !v32 && v31
            || (a5 == 2 ? (BOOL v523 = v32 == 0) : (BOOL v523 = 1),
                !v523 ? (BOOL v524 = v31 == 0) : (BOOL v524 = 0),
                v524 ? (char v525 = 0) : (char v525 = 1),
                v32 != v31 ? (BOOL v526 = a5 == 3) : (BOOL v526 = 0),
                v526 || (v525 & 1) == 0))
          {
            if ((__PAIR128__(v28, v26) - 1) >> 64 == 0x314DC6448D93 && v26 == 0x38C15B0A00000000) {
              unint64_t v26 = 0x378D8E63FFFFFFFFLL;
            }
            else {
              --v26;
            }
          }
          goto LABEL_975;
        }
        BOOL v207 = __CFADD__(v26++, 1);
        if (v207) {
          ++v28;
        }
        if (v26 == 0x378D8E6400000000 && v28 == 0x1ED09BEAD87C0)
        {
          if (v30 == 0x5FFE000000000000)
          {
            unint64_t v26 = 0;
            *a6 |= 8u;
          }
          else
          {
            unint64_t v26 = 0x38C15B0A00000000;
          }
        }
      }
LABEL_975:
      *a6 |= 0x20u;
      return v26;
    }
    if (v38 <= 33)
    {
      uint64_t v66 = (34 - v38);
      if (v38 > 19)
      {
        unint64_t v220 = __bid_ten2k64[v66];
        unint64_t v221 = v220 * v28;
        unint64_t v222 = HIDWORD(v220);
        unint64_t v223 = HIDWORD(v220) * (unint64_t)v26;
        unint64_t v224 = v220 * (unint64_t)v26;
        unint64_t v225 = v220 * (unint64_t)v33 + v223 + HIDWORD(v224);
        unint64_t v26 = v224 | ((unint64_t)v225 << 32);
        unint64_t v28 = v221 + v222 * (unint64_t)v33 + HIDWORD(v223) + HIDWORD(v225);
      }
      else if (v38 < 15)
      {
        unint64_t v267 = __bid_ten2k64[15 - v38] * v26;
        unint64_t v268 = 2313682944 * v267;
        unint64_t v269 = (-1966660860 * v267) + 2313682944 * HIDWORD(v267) + HIDWORD(v268);
        unint64_t v28 = ((2328306436u * (unint64_t)v267) >> 32)
            + 2328306436 * HIDWORD(v267)
            + HIDWORD(v269);
        unint64_t v26 = v268 & 0xFFF80000 | (v269 << 32);
      }
      else
      {
        uint64_t v67 = __bid_ten2k64[v66];
        unint64_t v68 = HIDWORD(v67) * (unint64_t)v26;
        unint64_t v69 = v67 * (unint64_t)v26;
        unint64_t v70 = v67 * (unint64_t)v33 + v68 + HIDWORD(v69);
        unint64_t v28 = HIDWORD(v68) + HIDWORD(v67) * (unint64_t)v33 + HIDWORD(v70);
        unint64_t v26 = v69 | ((unint64_t)v70 << 32);
      }
      v30 -= v66 << 49;
    }
    double result = 0x38C15B0A00000000;
    if ((a5 & 0xFFFFFFFB) != 0 || v47 != 35 || v28 != 0x314DC6448D93 || v26 != 0x38C15B0A00000000) {
      goto LABEL_347;
    }
    if (v32 == v31) {
      goto LABEL_346;
    }
    if (v44 > 19)
    {
      v271 = (unint64_t *)&__bid_midpoint128[v44 - 20];
      unint64_t v272 = v271[1];
      if (v27 > v272)
      {
LABEL_345:
        unint64_t v26 = 0x378D8E63FFFFFFFFLL;
        v30 -= 0x2000000000000;
        unint64_t v28 = 0x1ED09BEAD87C0;
        if (!a5) {
          goto LABEL_371;
        }
LABEL_347:
        if (a5 == 1 && v32 && v31 || a5 == 2 && !v32 && !v31)
        {
          unint64_t v273 = v26 + 1;
          if (v26 == -1) {
            ++v28;
          }
          if (v26 == 0x378D8E63FFFFFFFFLL && v28 == 0x1ED09BEAD87C0)
          {
            if (v30 == 0x5FFE000000000000)
            {
              double result = 0;
              *a6 |= 8u;
            }
            goto LABEL_373;
          }
          goto LABEL_372;
        }
        if (a5 == 1 && !v32 && v31 || a5 == 2 && v32 && !v31 || a5 == 3 && v32 != v31)
        {
          unint64_t v273 = v26 - 1;
          if ((__PAIR128__(v28, v26) - 1) >> 64 != 0x314DC6448D93 || v26 != 0x38C15B0A00000000)
          {
LABEL_372:
            double result = v273;
            goto LABEL_373;
          }
          double result = 0x378D8E63FFFFFFFFLL;
        }
        else
        {
LABEL_371:
          double result = v26;
        }
LABEL_373:
        *a6 |= 0x20u;
        return result;
      }
      if (v27 != v272)
      {
LABEL_346:
        unint64_t v26 = 0x38C15B0A00000000;
        unint64_t v28 = 0x314DC6448D93;
        goto LABEL_347;
      }
      unint64_t v270 = *v271;
    }
    else
    {
      unint64_t v270 = __bid_midpoint64[v44 - 1];
    }
    if (v25 > v270) {
      goto LABEL_345;
    }
    goto LABEL_346;
  }
  if (v47 < 0)
  {
    int v71 = (v30 >> 49) - (v29 >> 49);
    unsigned int v72 = v71 - 20;
    if (v71 < 20)
    {
      if (v71 >= 1)
      {
        if (v38 > 19)
        {
          unint64_t v274 = __bid_ten2k64[v71];
          unint64_t v275 = v274 * v28;
          unint64_t v276 = HIDWORD(v274);
          unint64_t v277 = HIDWORD(v274) * (unint64_t)v26;
          unint64_t v278 = v274 * (unint64_t)v26;
          unint64_t v279 = v274 * (unint64_t)v33 + v277 + HIDWORD(v278);
          unint64_t v26 = v278 | ((unint64_t)v279 << 32);
          unint64_t v28 = v275 + v276 * (unint64_t)v33 + HIDWORD(v277) + HIDWORD(v279);
        }
        else
        {
          unint64_t v89 = __bid_ten2k64[v71];
          unsigned int v90 = v26;
          unint64_t v91 = HIDWORD(v89);
          unint64_t v92 = v89 * (unint64_t)HIDWORD(v26);
          unint64_t v93 = v89 * (unint64_t)v26;
          unint64_t v94 = HIDWORD(v89) * (unint64_t)v90;
          unint64_t v95 = HIDWORD(v92) + v91 * (unint64_t)v33;
          unint64_t v96 = v94 + v92 + HIDWORD(v93);
          unint64_t v28 = v95 + HIDWORD(v96);
          unint64_t v26 = v93 | ((unint64_t)v96 << 32);
        }
      }
    }
    else
    {
      unint64_t v73 = __bid_ten2k128[2 * v72];
      unint64_t v74 = __bid_ten2k128[2 * v72 + 1] * v26;
      unsigned int v75 = v26;
      unint64_t v76 = HIDWORD(v73);
      unint64_t v77 = v73 * (unint64_t)HIDWORD(v26);
      unint64_t v78 = v73 * (unint64_t)v26;
      unint64_t v79 = HIDWORD(v73) * (unint64_t)v75 + v77 + HIDWORD(v78);
      unint64_t v26 = v78 | ((unint64_t)v79 << 32);
      unint64_t v28 = v74 + v76 * (unint64_t)v33 + HIDWORD(v77) + HIDWORD(v79);
    }
    if (v32 != v31)
    {
      signed long long v309 = __PAIR128__(v27 - v28, v25) - v26;
      uint64_t v308 = *((void *)&v309 + 1);
      double result = v309;
      if (v309 < 0)
      {
        double result = v26 - v25;
        if (v25 == v26) {
          uint64_t v308 = -*((void *)&v309 + 1);
        }
        else {
          uint64_t v308 = ~*((void *)&v309 + 1);
        }
      }
      if (v308 | result) {
        return result;
      }
      return 0;
    }
    unint64_t v280 = (__PAIR128__(v28, v26) + __PAIR128__(v27, v25)) >> 64;
    double result = v26 + v25;
    if (v280 <= 0x1ED09BEAD87C0 && (result <= 0x378D8E63FFFFFFFFLL || v280 != 0x1ED09BEAD87C0)) {
      return result;
    }
    if (result <= 0xFFFFFFFFFFFFFFFALL) {
      unint64_t v281 = (__PAIR128__(v28, v26) + __PAIR128__(v27, v25)) >> 64;
    }
    else {
      unint64_t v281 = v280 + 1;
    }
    unsigned int v282 = result + 5;
    unint64_t v283 = (result + 5) >> 32;
    unint64_t v284 = 2576980377 * v283;
    uint64_t v285 = HIDWORD(v284) + 429496729 * v283;
    unint64_t v286 = 429496729 * (result + 5)
         + v284
         + ((2576980377u * (unint64_t)(result + 5)) >> 32);
    unint64_t v287 = (-1717986919 * (result + 5)) | ((unint64_t)v286 << 32);
    unint64_t v288 = 2576980480 * (result + 5);
    unint64_t v289 = (-1717986816 * v283) + 2576980377 * v282 + HIDWORD(v288);
    unint64_t v290 = v288 & 0xFFFFFE00 | (v289 << 32);
    unsigned long long v291 = __PAIR128__(v285, v287)
         + __PAIR128__(HIDWORD(v286), ((2576980480u * (unint64_t)v283) >> 32)+ 2576980377 * v283+ HIDWORD(v289));
    unint64_t v292 = 2576980377 * HIDWORD(v281);
    uint64_t v293 = HIDWORD(v292) + 429496729 * HIDWORD(v281);
    unint64_t v294 = 429496729 * v281
         + v292
         + ((2576980377u * (unint64_t)v281) >> 32);
    unint64_t v295 = (-1717986919 * v281) | ((unint64_t)v294 << 32);
    unint64_t v296 = 2576980480 * v281;
    unint64_t v297 = ((2576980480u * (unint64_t)HIDWORD(v281)) >> 32) + 2576980377 * HIDWORD(v281);
    unint64_t v298 = (-1717986816 * HIDWORD(v281)) + 2576980377 * v281 + HIDWORD(v296);
    unint64_t v299 = v297 + HIDWORD(v298);
    unint64_t v300 = v296 & 0xFFFFFE00 | (v298 << 32);
    unsigned long long v301 = __PAIR128__(v293, v295) + __PAIR128__(HIDWORD(v294), v299);
    uint64_t v302 = v300 + v291;
    BOOL v207 = __CFADD__(__CFADD__(v300, (void)v291), v295 + v299);
    unint64_t v303 = __CFADD__(v300, (void)v291) + v295 + v299;
    unsigned int v304 = v207;
    double result = *((void *)&v291 + 1) + v303;
    if (__CFADD__(*((void *)&v291 + 1), v303)) {
      uint64_t v305 = 1;
    }
    else {
      uint64_t v305 = v304;
    }
    if (v302 | v290)
    {
      if ((unint64_t)v302 < 0x1999999999999999
        || (int v306 = 0, v290 < 0x999999999999999ALL) && v302 == 0x1999999999999999)
      {
        if (result)
        {
          int v307 = 0;
          --result;
          int v306 = 1;
        }
        else
        {
          int v306 = 0;
          int v307 = 1;
        }
      }
      else
      {
        int v307 = 0;
      }
    }
    else
    {
      int v306 = 0;
      int v307 = 0;
    }
    unint64_t v369 = v29 + 0x2000000000000;
    if ((a5 & 0xFFFFFFFB) == 0 && v29 == 0x5FFE000000000000) {
      goto LABEL_709;
    }
    if ((unint64_t)v302 <= 0x8000000000000000)
    {
      if (v290 && v302 == 0x8000000000000000)
      {
        int v370 = 0;
        goto LABEL_470;
      }
    }
    else if ((v302 ^ 0x8000000000000000) <= 0x1999999999999999)
    {
      int v370 = 0;
      if (v290 <= 0x9999999999999998 || (v302 ^ 0x8000000000000000) != 0x1999999999999999)
      {
LABEL_470:
        uint64_t v371 = *((void *)&v301 + 1) + v305;
        if ((v306 | v301))
        {
          int v372 = 0;
          int v373 = 0;
        }
        else
        {
          if (v302 < 0) {
            int v373 = v370;
          }
          else {
            int v373 = 0;
          }
          if (v302 >= 0) {
            int v372 = v370;
          }
          else {
            int v372 = 0;
          }
        }
        if (!a5) {
          return result;
        }
        if (v31)
        {
          if (a5 != 1 || !v373)
          {
            if (a5 != 4 && a5 != 1) {
              int v306 = 0;
            }
            if (v306 != 1)
            {
LABEL_572:
              if (((v372 == 0) & ~v307) == 0 && ((a5 & 0xFFFFFFFE) == 2 && v31 || (a5 & 0xFFFFFFFD) == 1 && !v31))
              {
                uint64_t v381 = result - 1;
                if ((__PAIR128__(v371, result) - 1) >> 64 == 0x314DC6448D93 && result == 0x38C15B0A00000000)
                {
                  uint64_t v381 = 0x378D8E63FFFFFFFFLL;
                  unint64_t v369 = v29;
                }
              }
              else
              {
                uint64_t v381 = result;
              }
LABEL_658:
              double result = v381;
              if (v369 == 0x6000000000000000)
              {
                if (v31) {
                  int v470 = 1;
                }
                else {
                  int v470 = 2;
                }
                if (v470 == a5) {
                  double result = 0;
                }
                else {
                  double result = 0x378D8E63FFFFFFFFLL;
                }
                *a6 |= 0x28u;
              }
              return result;
            }
          }
        }
        else if (a5 != 2 || !v373)
        {
          if (a5 != 4 && a5 != 2) {
            LOBYTE(v306) = 0;
          }
          if ((v306 & 1) == 0) {
            goto LABEL_572;
          }
        }
        uint64_t v381 = result + 1;
        if (result == -1) {
          ++v371;
        }
        if (result == 0x378D8E63FFFFFFFFLL && v371 == 0x1ED09BEAD87C0)
        {
          uint64_t v381 = 0x38C15B0A00000000;
          unint64_t v369 = v29 + 0x4000000000000;
        }
        goto LABEL_658;
      }
    }
    *a6 |= 0x20u;
    int v370 = 1;
    goto LABEL_470;
  }
  if (v47 <= 33 - v44)
  {
    int v80 = (v30 >> 49) - (v29 >> 49);
    unsigned int v81 = v80 - 20;
    if (v80 < 20)
    {
      if (v80 >= 1)
      {
        if (v38 > 19)
        {
          unint64_t v316 = __bid_ten2k64[v80];
          unint64_t v317 = v316 * v28;
          unint64_t v318 = HIDWORD(v316);
          unint64_t v319 = HIDWORD(v316) * (unint64_t)v26;
          unint64_t v320 = v316 * (unint64_t)v26;
          unint64_t v321 = v316 * (unint64_t)v33 + v319 + HIDWORD(v320);
          unint64_t v26 = v320 | ((unint64_t)v321 << 32);
          unint64_t v28 = v317 + v318 * (unint64_t)v33 + HIDWORD(v319) + HIDWORD(v321);
        }
        else
        {
          unint64_t v180 = __bid_ten2k64[v80];
          unsigned int v181 = v26;
          unint64_t v182 = HIDWORD(v180);
          unint64_t v183 = v180 * (unint64_t)HIDWORD(v26);
          unint64_t v184 = v180 * (unint64_t)v26;
          unint64_t v185 = HIDWORD(v180) * (unint64_t)v181;
          unint64_t v186 = HIDWORD(v183) + v182 * (unint64_t)v33;
          unint64_t v187 = v185 + v183 + HIDWORD(v184);
          unint64_t v28 = v186 + HIDWORD(v187);
          unint64_t v26 = v184 | ((unint64_t)v187 << 32);
        }
      }
    }
    else
    {
      unint64_t v82 = __bid_ten2k128[2 * v81];
      unint64_t v83 = __bid_ten2k128[2 * v81 + 1] * v26;
      unsigned int v84 = v26;
      unint64_t v85 = HIDWORD(v82);
      unint64_t v86 = v82 * (unint64_t)HIDWORD(v26);
      unint64_t v87 = v82 * (unint64_t)v26;
      unint64_t v88 = HIDWORD(v82) * (unint64_t)v84 + v86 + HIDWORD(v87);
      unint64_t v26 = v87 | ((unint64_t)v88 << 32);
      unint64_t v28 = v83 + v85 * (unint64_t)v33 + HIDWORD(v86) + HIDWORD(v88);
    }
    if (v32 == v31) {
      return v26 + v25;
    }
    unsigned long long v322 = __PAIR128__(v28 - v27, v26) - v25;
    double result = v322;
    if (v322 != 0)
    {
      if ((*((void *)&v322 + 1) & 0x8000000000000000) != 0) {
        return v25 - v26;
      }
      return result;
    }
    return 0;
  }
  if (v47 == 34 - v44)
  {
    int v57 = (v30 >> 49) - (v29 >> 49);
    unsigned int v58 = v57 - 20;
    if (v57 < 20)
    {
      if (v57 >= 1)
      {
        if (v38 > 19)
        {
          unint64_t v336 = __bid_ten2k64[v57];
          unint64_t v337 = v336 * v28;
          unint64_t v338 = HIDWORD(v336);
          unint64_t v339 = HIDWORD(v336) * (unint64_t)v26;
          unint64_t v340 = v336 * (unint64_t)v26;
          unint64_t v341 = v336 * (unint64_t)v33 + v339 + HIDWORD(v340);
          unint64_t v26 = v340 | ((unint64_t)v341 << 32);
          unint64_t v28 = v337 + v338 * (unint64_t)v33 + HIDWORD(v339) + HIDWORD(v341);
        }
        else
        {
          unint64_t v253 = __bid_ten2k64[v57];
          unsigned int v254 = v26;
          unint64_t v255 = HIDWORD(v253);
          unint64_t v256 = v253 * (unint64_t)HIDWORD(v26);
          unint64_t v257 = v253 * (unint64_t)v26;
          unint64_t v258 = HIDWORD(v253) * (unint64_t)v254;
          unint64_t v259 = HIDWORD(v256) + v255 * (unint64_t)v33;
          unint64_t v260 = v258 + v256 + HIDWORD(v257);
          unint64_t v28 = v259 + HIDWORD(v260);
          unint64_t v26 = v257 | ((unint64_t)v260 << 32);
        }
      }
    }
    else
    {
      unint64_t v59 = __bid_ten2k128[2 * v58];
      unint64_t v60 = __bid_ten2k128[2 * v58 + 1] * v26;
      unsigned int v61 = v26;
      unint64_t v62 = HIDWORD(v59);
      unint64_t v63 = v59 * (unint64_t)HIDWORD(v26);
      unint64_t v64 = v59 * (unint64_t)v26;
      unint64_t v65 = HIDWORD(v59) * (unint64_t)v61 + v63 + HIDWORD(v64);
      unint64_t v26 = v64 | ((unint64_t)v65 << 32);
      unint64_t v28 = v60 + v62 * (unint64_t)v33 + HIDWORD(v63) + HIDWORD(v65);
    }
    if (v32 == v31)
    {
      unint64_t v343 = v26 + v25;
      unint64_t v342 = (__PAIR128__(v28, v26) + __PAIR128__(v27, v25)) >> 64;
      double result = v26 + v25;
      if (v342 <= 0x1ED09BEAD87C0 && (v343 <= 0x378D8E63FFFFFFFFLL || v342 != 0x1ED09BEAD87C0)) {
        return result;
      }
      if (v343 > 0xFFFFFFFFFFFFFFFALL) {
        ++v342;
      }
      unint64_t v344 = (v343 + 5) >> 32;
      unint64_t v345 = 2576980377 * v344;
      uint64_t v346 = HIDWORD(v345) + 429496729 * v344;
      unint64_t v347 = 429496729 * (v343 + 5)
           + v345
           + ((2576980377u * (unint64_t)(v343 + 5)) >> 32);
      unint64_t v348 = (-1717986816 * v344)
           + 2576980377 * (v343 + 5)
           + ((2576980480u * (unint64_t)(v343 + 5)) >> 32);
      unint64_t v349 = ((2576980480u * (unint64_t)v344) >> 32)
           + 2576980377 * v344
           + HIDWORD(v348);
      unint64_t v350 = (-1717986816 * (v343 + 5)) | (v348 << 32);
      unint64_t v352 = ((-1717986919 * (v343 + 5)) | ((unint64_t)v347 << 32)) + v349;
      uint64_t v351 = (__PAIR128__(HIDWORD(v347), (-1717986919 * (v343 + 5)) | ((unint64_t)v347 << 32))+ __PAIR128__(v346, v349)) >> 64;
      unint64_t v353 = 2576980377 * HIDWORD(v342);
      uint64_t v354 = HIDWORD(v353) + 429496729 * HIDWORD(v342);
      unint64_t v355 = 429496729 * v342
           + v353
           + ((2576980377u * (unint64_t)v342) >> 32);
      unint64_t v356 = (-1717986919 * v342) | ((unint64_t)v355 << 32);
      unint64_t v357 = 2576980480 * v342;
      unint64_t v358 = ((2576980480u * (unint64_t)HIDWORD(v342)) >> 32) + 2576980377 * HIDWORD(v342);
      unint64_t v359 = (-1717986816 * HIDWORD(v342)) + 2576980377 * v342 + HIDWORD(v357);
      unint64_t v360 = v357 & 0xFFFFFE00 | (v359 << 32);
      unint64_t v362 = v356 + v358 + HIDWORD(v359);
      uint64_t v361 = (__PAIR128__(v354, v356) + __PAIR128__(HIDWORD(v355), v358 + HIDWORD(v359))) >> 64;
      unsigned long long v363 = __PAIR128__(v362, v360) + v352;
      BOOL v364 = __CFADD__(__CFADD__(v360, v352), v362);
      double result = v351 + *((void *)&v363 + 1);
      uint64_t v365 = __CFADD__(v351, *((void *)&v363 + 1)) || v364;
      if ((unint64_t)v363 | v350)
      {
        if ((unint64_t)v363 < 0x1999999999999999
          || (int v366 = 0, v350 < 0x999999999999999ALL) && (void)v363 == 0x1999999999999999)
        {
          if (result)
          {
            int v367 = 0;
            --result;
            int v366 = 1;
          }
          else
          {
            int v366 = 0;
            int v367 = 1;
          }
        }
        else
        {
          int v367 = 0;
        }
      }
      else
      {
        int v366 = 0;
        int v367 = 0;
      }
      unint64_t v443 = v29 + 0x2000000000000;
      if ((a5 & 0xFFFFFFFB) != 0 || v29 != 0x5FFE000000000000)
      {
        if ((unint64_t)v363 <= 0x8000000000000000)
        {
          if (v350 && (void)v363 == 0x8000000000000000)
          {
            int v444 = 0;
            goto LABEL_593;
          }
        }
        else if (((unint64_t)v363 ^ 0x8000000000000000) <= 0x1999999999999999)
        {
          int v444 = 0;
          if (v350 <= 0x9999999999999998 || ((unint64_t)v363 ^ 0x8000000000000000) != 0x1999999999999999)
          {
LABEL_593:
            unint64_t v445 = v361 + v365;
            if ((v366 | v367))
            {
              int v446 = 0;
              int v447 = 0;
            }
            else
            {
              if ((v363 & 0x8000000000000000) != 0) {
                int v447 = v444;
              }
              else {
                int v447 = 0;
              }
              if ((v363 & 0x8000000000000000) == 0) {
                int v446 = v444;
              }
              else {
                int v446 = 0;
              }
            }
            if (!a5) {
              return result;
            }
            if (v31)
            {
              if (a5 != 1 || !v447)
              {
                if (a5 != 4 && a5 != 1) {
                  int v366 = 0;
                }
                if (v366 != 1)
                {
LABEL_756:
                  if (((v446 == 0) & ~v367) == 0 && ((a5 & 0xFFFFFFFE) == 2 && v31 || (a5 & 0xFFFFFFFD) == 1 && !v31))
                  {
                    uint64_t v472 = result - 1;
                    if ((__PAIR128__(v445, result) - 1) >> 64 == 0x314DC6448D93 && result == 0x38C15B0A00000000)
                    {
                      uint64_t v472 = 0x378D8E63FFFFFFFFLL;
                      unint64_t v443 = v29;
                    }
                  }
                  else
                  {
                    uint64_t v472 = result;
                  }
LABEL_855:
                  if (v443 != 0x6000000000000000) {
                    return v472;
                  }
                  if (v31) {
                    int v510 = 1;
                  }
                  else {
                    int v510 = 2;
                  }
                  if (v510 == a5) {
                    double result = 0;
                  }
                  else {
                    double result = 0x378D8E63FFFFFFFFLL;
                  }
                  *a6 |= 0x28u;
                  return result;
                }
              }
            }
            else if (a5 != 2 || !v447)
            {
              if (a5 != 4 && a5 != 2) {
                LOBYTE(v366) = 0;
              }
              if ((v366 & 1) == 0) {
                goto LABEL_756;
              }
            }
            uint64_t v472 = result + 1;
            if (result == -1) {
              ++v445;
            }
            if (result == 0x378D8E63FFFFFFFFLL && v445 == 0x1ED09BEAD87C0)
            {
              uint64_t v472 = 0x38C15B0A00000000;
              unint64_t v443 = v29 + 0x4000000000000;
            }
            goto LABEL_855;
          }
        }
        *a6 |= 0x20u;
        int v444 = 1;
        goto LABEL_593;
      }
LABEL_709:
      double result = 0;
      int v478 = *a6 | 0x28;
      goto LABEL_751;
    }
    unsigned long long v368 = __PAIR128__(v28 - v27, v26) - v25;
    double result = v368;
    if (v368 != 0)
    {
      if ((*((void *)&v368 + 1) & 0x8000000000000000) != 0) {
        return v25 - v26;
      }
      return result;
    }
    return 0;
  }
  v530 = a6;
  uint64_t v528 = 0x38C15B0A00000000;
  uint64_t v529 = v29;
  int v527 = v38 + (v30 >> 49) - (v29 >> 49);
  BOOL v533 = v32 == v31;
  BOOL v532 = v32 != v31;
  unsigned int v98 = v527 - 54;
  int v99 = 34 - v38;
  unint64_t v531 = v27;
  while (1)
  {
    if (v99 < 20)
    {
      unint64_t v104 = v28;
      unint64_t v103 = v26;
      if (v99 >= 1)
      {
        unint64_t v105 = __bid_ten2k64[v99];
        unint64_t v106 = HIDWORD(v105);
        if (v38 > 19)
        {
          unint64_t v110 = v105 * v28;
          unint64_t v111 = HIDWORD(v105) * (unint64_t)v26;
          unint64_t v112 = v105 * (unint64_t)v26;
          unint64_t v113 = v105 * (unint64_t)HIDWORD(v26) + v111 + HIDWORD(v112);
          unint64_t v103 = v112 | ((unint64_t)v113 << 32);
          unint64_t v104 = v110 + v106 * (unint64_t)HIDWORD(v26) + HIDWORD(v111) + HIDWORD(v113);
        }
        else
        {
          unint64_t v107 = v105 * (unint64_t)HIDWORD(v26);
          unint64_t v108 = v105 * (unint64_t)v26;
          unint64_t v109 = HIDWORD(v105) * (unint64_t)v26 + v107 + HIDWORD(v108);
          unint64_t v104 = HIDWORD(v107) + v106 * (unint64_t)HIDWORD(v26) + HIDWORD(v109);
          unint64_t v103 = v108 | ((unint64_t)v109 << 32);
        }
      }
    }
    else
    {
      int8x8_t v100 = &__bid_ten2k128[2 * (v99 - 20)];
      unint64_t v101 = *v100 * (unint64_t)HIDWORD(v26);
      unint64_t v102 = HIDWORD(*v100) * (unint64_t)v26
           + v101
           + ((*v100 * (unint64_t)v26) >> 32);
      unint64_t v103 = (*v100 * v26) | ((unint64_t)v102 << 32);
      unint64_t v104 = v100[1] * v26
           + HIDWORD(*v100) * (unint64_t)HIDWORD(v26)
           + HIDWORD(v101)
           + HIDWORD(v102);
    }
    unsigned int v114 = v98 + 20;
    uint64_t v115 = v98 + 19;
    if ((int)(v98 + 20) < 1)
    {
      int v121 = 0;
      int v122 = 0;
      BOOL v123 = 0;
      BOOL v124 = 0;
      int v125 = 0;
      unint64_t v126 = v27;
      unint64_t v127 = v25;
      goto LABEL_241;
    }
    unint64_t v116 = v32;
    unint64_t v117 = v31;
    if (v114 > 0x13)
    {
      unint64_t v120 = (__bid_midpoint128[v98] + __PAIR128__(v27, v25)) >> 64;
      unint64_t v119 = *(void *)&__bid_midpoint128[v98] + v25;
    }
    else
    {
      uint64_t v118 = __bid_midpoint64[v115];
      unint64_t v119 = v118 + v25;
      if (__CFADD__(v118, v25)) {
        unint64_t v120 = v27 + 1;
      }
      else {
        unint64_t v120 = v27;
      }
    }
    unint64_t v128 = HIDWORD(v119);
    unint64_t v129 = __bid_ten2mk128[2 * v115];
    unint64_t v130 = __bid_ten2mk128[2 * v115 + 1];
    unint64_t v131 = HIDWORD(v130);
    unint64_t v132 = v130 * (unint64_t)HIDWORD(v119);
    unint64_t v133 = HIDWORD(v132) + HIDWORD(v130) * (unint64_t)HIDWORD(v119);
    unint64_t v134 = HIDWORD(v130) * (unint64_t)v119
         + v132
         + ((v130 * (unint64_t)v119) >> 32);
    unint64_t v135 = HIDWORD(v134);
    unint64_t v136 = (v130 * v119) | ((unint64_t)v134 << 32);
    unint64_t v137 = HIDWORD(v129);
    unint64_t v138 = v129 * (unint64_t)HIDWORD(v119);
    unint64_t v139 = v129 * (unint64_t)v119;
    unint64_t v140 = HIDWORD(v129) * (unint64_t)v119 + v138 + HIDWORD(v139);
    unint64_t v141 = v139 | ((unint64_t)v140 << 32);
    unsigned long long v142 = __PAIR128__(v133, v136)
         + __PAIR128__(v135, HIDWORD(v138) + HIDWORD(v129) * (unint64_t)v128 + HIDWORD(v140));
    unint64_t v143 = HIDWORD(v120);
    LODWORD(v133) = v120;
    unint64_t v144 = v130 * (unint64_t)HIDWORD(v120);
    unint64_t v145 = v130 * (unint64_t)v120;
    unint64_t v146 = v131 * (unint64_t)v120;
    unint64_t v147 = HIDWORD(v144) + v131 * (unint64_t)HIDWORD(v120);
    unint64_t v148 = v146 + v144 + HIDWORD(v145);
    unint64_t v149 = HIDWORD(v148);
    unint64_t v150 = v145 | ((unint64_t)v148 << 32);
    unint64_t v151 = v129 * (unint64_t)HIDWORD(v120);
    unint64_t v152 = v129 * (unint64_t)v120;
    unint64_t v153 = HIDWORD(v129) * (unint64_t)v133 + v151 + HIDWORD(v152);
    unint64_t v154 = v152 | ((unint64_t)v153 << 32);
    unsigned long long v155 = __PAIR128__(v147, v150)
         + __PAIR128__(v149, HIDWORD(v151) + v137 * (unint64_t)v143 + HIDWORD(v153));
    unint64_t v156 = v142 + v154;
    BOOL v207 = __CFADD__(__CFADD__((void)v142, v154), (void)v155);
    uint64_t v157 = __CFADD__((void)v142, v154) + (void)v155;
    unsigned int v158 = v207;
    unint64_t v127 = *((void *)&v142 + 1) + v157;
    if (__CFADD__(*((void *)&v142 + 1), v157)) {
      uint64_t v159 = 1;
    }
    else {
      uint64_t v159 = v158;
    }
    unint64_t v126 = *((void *)&v155 + 1) + v159;
    if (v114 >= 4)
    {
      uint64_t v162 = __bid_maskhigh128[v115];
      unint64_t v160 = v162 & v126;
      if (v114 >= 0x17) {
        uint64_t v162 = -1;
      }
      else {
        unint64_t v160 = 0;
      }
      unint64_t v161 = v127 & v162;
      int v163 = __bid_shiftright128[v115];
      BOOL v164 = v163 <= 63;
      unint64_t v165 = v127 >> v163;
      int v166 = -v163;
      unint64_t v167 = v126 >> v163;
      unint64_t v168 = v126 >> v163;
      unint64_t v127 = (v126 << v166) | v165;
      if (v164) {
        unint64_t v126 = v167;
      }
      else {
        unint64_t v126 = 0;
      }
      if (!v164) {
        unint64_t v127 = v168;
      }
      unint64_t v31 = v117;
      unint64_t v32 = v116;
      unint64_t v27 = v531;
      if (v114 > 0x16)
      {
        unint64_t v171 = __bid_onehalf128[v115];
        if (v160 > v171 || v160 == v171 && v156 | v141 | v161)
        {
          BOOL v172 = v160 == v171 && v161 == 0;
          if (v172 && __PAIR128__(v156, v141) <= __bid_ten2mk128trunc[v115]) {
            goto LABEL_222;
          }
          goto LABEL_219;
        }
        int v125 = 1;
      }
      else
      {
        unint64_t v169 = __bid_onehalf128[v115];
        if (v160) {
          BOOL v170 = 1;
        }
        else {
          BOOL v170 = v161 > v169;
        }
        if (v170 || (int v125 = 1, v161 == v169) && (v169 = v161, v156 | v141))
        {
          if (v160 == v169 > v161 && v161 == v169 && __PAIR128__(v156, v141) <= __bid_ten2mk128trunc[v115]) {
            goto LABEL_223;
          }
          goto LABEL_219;
        }
        unint64_t v160 = 0;
      }
LABEL_227:
      int v122 = v532;
      int v121 = v533;
      goto LABEL_228;
    }
    unint64_t v31 = v117;
    unint64_t v32 = v116;
    unint64_t v27 = v531;
    if (v156 <= 0x8000000000000000)
    {
      unint64_t v160 = 0;
      int v125 = 1;
      if (!v141 || v156 != 0x8000000000000000)
      {
        unint64_t v161 = 0;
        goto LABEL_227;
      }
    }
    if (__PAIR128__(v156 ^ 0x8000000000000000, v141) < __bid_ten2mk128trunc[v115])
    {
      unint64_t v160 = 0;
LABEL_222:
      unint64_t v161 = 0;
LABEL_223:
      int v121 = 0;
      int v122 = 0;
      int v125 = 0;
      goto LABEL_228;
    }
    unint64_t v160 = 0;
    unint64_t v161 = 0;
LABEL_219:
    int v125 = 1;
    int v121 = v532;
    int v122 = v533;
LABEL_228:
    BOOL v123 = 0;
    if (!(v156 | v141) || v160 || v161)
    {
      BOOL v124 = 0;
    }
    else if (__PAIR128__(v156, v141) <= __bid_ten2mk128trunc[v115])
    {
      int v121 = 0;
      int v122 = 0;
      if ((v127 + v103))
      {
        BOOL v172 = v127-- == 0;
        uint64_t v173 = v172;
        v126 -= v173;
        BOOL v124 = v532;
        BOOL v123 = v533;
      }
      else
      {
        BOOL v123 = v532;
        BOOL v124 = v533;
      }
    }
    else
    {
      BOOL v123 = 0;
      BOOL v124 = 0;
    }
LABEL_241:
    if (v32 == v31) {
      break;
    }
    uint64_t v175 = (__PAIR128__(v104 - v126, v103) - v127) >> 64;
    unint64_t v174 = v103 - v127;
    if (v175 < 0)
    {
      unint64_t v174 = v127 - v103;
      if (v103 == v127) {
        uint64_t v175 = -v175;
      }
      else {
        uint64_t v175 = ~v175;
      }
      unint64_t v176 = v31;
    }
    else
    {
      unint64_t v176 = v32;
    }
    if ((unint64_t)v175 < 0x314DC6448D93 || v175 == 0x314DC6448D93 && v174 < 0x38C15B0A00000000)
    {
      if ((int)v114 < 1)
      {
        uint64_t v310 = v98 + 19;
LABEL_494:
        BOOL v375 = v175 == 0x1ED09BEAD87C0;
        BOOL v376 = v174 == 0x378D8E6400000000;
        BOOL v377 = !v375 || !v376;
        if (v375 && v376) {
          unint64_t v227 = 0x314DC6448D93;
        }
        else {
          unint64_t v227 = v175;
        }
        if (v377) {
          double result = v174;
        }
        else {
          double result = 0x38C15B0A00000000;
        }
        if (v377) {
          uint64_t v378 = v529;
        }
        else {
          uint64_t v378 = v529 + 0x2000000000000;
        }
        int v228 = a5;
        a6 = v530;
        if ((int)v310 >= 1) {
          v378 += v310 << 49;
        }
        goto LABEL_711;
      }
    }
    else
    {
      BOOL v179 = v175 != 0x314DC6448D93 || v174 != 0x38C15B0A00000000 || (v124 | v121) == 0;
      if ((int)v114 < 1 || v179)
      {
        if (v179) {
          uint64_t v310 = v114;
        }
        else {
          uint64_t v310 = v115;
        }
        goto LABEL_494;
      }
    }
    --v98;
    ++v99;
  }
  unint64_t v227 = (__PAIR128__(v126, v127) + __PAIR128__(v104, v103)) >> 64;
  double result = v127 + v103;
  int v228 = a5;
  a6 = v530;
  if (v227 > 0x1ED09BEAD87C0) {
    goto LABEL_312;
  }
  uint64_t v229 = (v527 - 34);
  if (result > 0x378D8E63FFFFFFFFLL)
  {
    if (v227 == 0x1ED09BEAD87C0)
    {
LABEL_312:
      if (result > 0xFFFFFFFFFFFFFFFALL) {
        ++v227;
      }
      unint64_t v230 = (result + 5) >> 32;
      unint64_t v231 = 2576980377 * v230;
      uint64_t v232 = HIDWORD(v231) + 429496729 * v230;
      unint64_t v233 = 429496729 * (result + 5)
           + v231
           + ((2576980377u * (unint64_t)(result + 5)) >> 32);
      unint64_t v234 = (-1717986918 * v230)
           + 2576980377 * (result + 5)
           + ((2576980378u * (unint64_t)(result + 5)) >> 32);
      unint64_t v235 = ((2576980378u * (unint64_t)v230) >> 32)
           + 2576980377 * v230
           + HIDWORD(v234);
      unint64_t v236 = (-1717986918 * (result + 5)) | (v234 << 32);
      unsigned long long v237 = __PAIR128__(HIDWORD(v233), (-1717986919 * (result + 5)) | ((unint64_t)v233 << 32))+ __PAIR128__(v232, v235);
      unint64_t v238 = 2576980377 * HIDWORD(v227);
      uint64_t v239 = HIDWORD(v238) + 429496729 * HIDWORD(v227);
      unint64_t v240 = 429496729 * v227
           + v238
           + ((2576980377u * (unint64_t)v227) >> 32);
      unint64_t v241 = (-1717986919 * v227) | ((unint64_t)v240 << 32);
      unint64_t v242 = 2576980378 * v227;
      unint64_t v243 = ((2576980378u * (unint64_t)HIDWORD(v227)) >> 32) + 2576980377 * HIDWORD(v227);
      unint64_t v244 = (-1717986918 * HIDWORD(v227)) + 2576980377 * v227 + HIDWORD(v242);
      unint64_t v245 = v243 + HIDWORD(v244);
      unint64_t v246 = v242 & 0xFFFFFFFE | (v244 << 32);
      unsigned long long v247 = __PAIR128__(v239, v241) + __PAIR128__(HIDWORD(v240), v245);
      unint64_t v248 = v237 + v246;
      BOOL v207 = __CFADD__(__CFADD__((void)v237, v246), (void)v247);
      uint64_t v249 = __CFADD__((void)v237, v246) + (void)v247;
      unsigned int v250 = v207;
      double result = *((void *)&v237 + 1) + v249;
      if (__CFADD__(*((void *)&v237 + 1), v249)) {
        uint64_t v251 = 1;
      }
      else {
        uint64_t v251 = v250;
      }
      unint64_t v227 = *((void *)&v247 + 1) + v251;
      if (!(v248 | v236)) {
        goto LABEL_508;
      }
      if (v248 < 0x1999999999999999) {
        goto LABEL_322;
      }
      if (v248 == 0x1999999999999999)
      {
        if (v236 > 0x9999999999999999)
        {
LABEL_507:
          int v122 = 0;
          BOOL v123 = 0;
          BOOL v124 = 0;
          int v121 = 1;
          goto LABEL_704;
        }
LABEL_322:
        if (v122) {
          goto LABEL_507;
        }
        if (v121)
        {
          int v121 = 0;
          BOOL v123 = 0;
          BOOL v124 = 0;
          BOOL v172 = result-- == 0;
          uint64_t v252 = v172;
          v227 -= v252;
          goto LABEL_703;
        }
        if (v123)
        {
LABEL_702:
          int v121 = 0;
          BOOL v123 = 0;
          BOOL v124 = 0;
LABEL_703:
          int v122 = 1;
LABEL_704:
          int v382 = 1;
        }
        else
        {
          int v121 = 0;
          int v122 = 0;
          BOOL v123 = (result & 1) != 0;
          BOOL v124 = (result & 1) == 0;
          if (result) {
            unint64_t v509 = result - 1;
          }
          else {
            unint64_t v509 = result;
          }
          int v382 = 1;
          double result = v509;
        }
      }
      else
      {
LABEL_508:
        if (v248 <= 0x8000000000000000)
        {
          int v382 = 1;
          if (!v236 || v248 != 0x8000000000000000)
          {
            int v122 = 0;
            BOOL v123 = 0;
            BOOL v124 = 0;
            int v121 = 1;
            goto LABEL_705;
          }
        }
        else
        {
          unint64_t v379 = v248 ^ 0x8000000000000000;
          if (v379 > 0x1999999999999999 || v379 == 0x1999999999999999 && v236 > 0x9999999999999999) {
            goto LABEL_702;
          }
        }
        if (v125)
        {
          if (v123) {
            int v383 = 1;
          }
          else {
            int v383 = v122;
          }
          if (v124) {
            int v121 = 1;
          }
          else {
            int v122 = v383;
          }
          if (!v124) {
            BOOL v123 = 0;
          }
          BOOL v124 = 0;
          int v382 = 1;
        }
        else
        {
          int v382 = 0;
        }
      }
LABEL_705:
      uint64_t v229 = (v527 - 33);
      int v125 = v382;
    }
    else
    {
      uint64_t v229 = (v527 - 34);
    }
  }
  uint64_t v378 = v529 + (v229 << 49);
  if (v378 == 0x6000000000000000)
  {
    if ((a5 & 0xFFFFFFFB) == 0) {
      goto LABEL_709;
    }
    uint64_t v378 = 0x6000000000000000;
    goto LABEL_712;
  }
  unint64_t v176 = v31;
LABEL_711:
  unint64_t v31 = v176;
  if (!v228) {
    goto LABEL_749;
  }
LABEL_712:
  if (v31)
  {
    if (v228 != 1 || !v122)
    {
      BOOL v479 = v228 == 1;
      goto LABEL_719;
    }
    goto LABEL_725;
  }
  if (v228 == 2 && v122) {
    goto LABEL_725;
  }
  BOOL v479 = v228 == 2;
LABEL_719:
  BOOL v480 = v479 || v228 == 4;
  if (v480 && v123)
  {
LABEL_725:
    uint64_t v481 = result + 1;
    if (result == -1) {
      ++v227;
    }
    if (result == 0x378D8E63FFFFFFFFLL && v227 == 0x1ED09BEAD87C0)
    {
      v378 += 0x2000000000000;
      goto LABEL_740;
    }
LABEL_738:
    uint64_t v528 = v481;
  }
  else if (v121 | v124 && ((v228 & 0xFFFFFFFE) == 2 && v31 || (v228 & 0xFFFFFFFD) == 1 && !v31))
  {
    uint64_t v481 = result - 1;
    if ((__PAIR128__(v227, result) - 1) >> 64 != 0x314DC6448D93 || result != 0x38C15B0A00000000) {
      goto LABEL_738;
    }
    v378 -= 0x2000000000000;
    uint64_t v528 = 0x378D8E63FFFFFFFFLL;
  }
  else
  {
    uint64_t v528 = result;
  }
LABEL_740:
  if (v378 == 0x6000000000000000)
  {
    if (v31) {
      int v482 = 1;
    }
    else {
      int v482 = 2;
    }
    if (v482 == v228) {
      double result = 0;
    }
    else {
      double result = 0x378D8E63FFFFFFFFLL;
    }
    *a6 |= 0x28u;
  }
  else
  {
    double result = v528;
  }
LABEL_749:
  if (v125)
  {
    int v478 = *a6 | 0x20;
LABEL_751:
    *a6 = v478;
  }
  return result;
}

unint64_t __bid128_sub(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, int *a6)
{
  unint64_t v6 = a4 | 0x8000000000000000;
  if (a4 < 0) {
    unint64_t v6 = a4 & 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((~a4 & 0x7C00000000000000) != 0) {
    a4 = v6;
  }
  return __bid128_add(a1, a2, a3, a4, a5, a6);
}

unint64_t __bid128_asin(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a1;
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    __n128 v13 = 0uLL;
    v12[0] = 0;
    v12[1] = 0;
    v15[0] = __bid128_to_binary128(a1, a2, a3, &my_fpsf);
    v15[1] = v6;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    __dpml_bid_unpack_x_or_y__(v15, 0, (uint64_t)&v18, &qword_1BDDBAE40, (uint64_t)v12, v17);
    if (bid_f128_cmp(v12, (uint64_t *)&c_1em40_1076, 1u)) {
      return bid128_ext_fma(v17, (int *)&v18, (int *)v14, &v16, v4, a2, 1uLL, 0x2FF0000000000000, v4, a2, a3, &my_fpsf);
    }
    if (bid_f128_cmp(v12, (uint64_t *)&c_7_10ths_1077, 3u))
    {
      __dpml_bid_ux_asin_acos__(v15, 0xF04E00uLL, (uint64_t *)&__dpml_bid_inv_trig_x_table, &v13, v17);
    }
    else
    {
      if (bid_f128_cmp(v12, (uint64_t *)&c_one_1078, 4u))
      {
        unint64_t v4 = 0;
        my_fpsf |= 1u;
        return v4;
      }
      unint64_t v9 = bid128_ext_fma(v17, (int *)&v18, (int *)v14, &v16, v4, a2, v4, a2, 1uLL, 0xB040000000000000, a3, &my_fpsf);
      v14[0] = __bid128_to_binary128(v9, v10, a3, &my_fpsf);
      v14[1] = v11;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      __dpml_bid_unpack_x_or_y__(v14, 0, (uint64_t)&v18, &__dpml_bid_bid_x_table, (uint64_t)&v13, v17);
      bid_f128_sqrt(&v13, (uint64_t *)&v13);
      __dpml_bid_ux_asin_acos__((uint64_t *)&v13, 0x1A30038uLL, &qword_1BDDBBB80, &v13, v17);
      if (bid_f128_cmp(v15, (uint64_t *)&c_zero_1079, 1u))
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        __dpml_bid_unpack_x_or_y__((uint64_t *)&v13, 0, (uint64_t)&v18, &__dpml_bid_bid_x_table, (uint64_t)&v13, v17);
      }
    }
    return __binary128_to_bid128(v13.n128_u64[0], v13.n128_u64[1], a3, &my_fpsf);
  }
  else
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
  }
  return v4;
}

unint64_t __bid128_asinh(unint64_t result, unint64_t a2, int a3)
{
  unint64_t v3 = result;
  if (((a2 >> 61) & 3) == 3)
  {
    if ((a2 & 0x7800000000000000) == 0x7800000000000000)
    {
      if ((a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && result >= 0x38C15B0A00000000) {
        unint64_t v3 = 0;
      }
      if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93) {
        unint64_t v3 = 0;
      }
      if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
        double result = 0;
      }
      else {
        double result = v3;
      }
      if ((a2 & 0x7C00000000000000) != 0x7C00000000000000) {
        return 0;
      }
LABEL_27:
      if ((~a2 & 0x7E00000000000000) == 0) {
        my_fpsf |= 1u;
      }
      return result;
    }
    double result = 0;
LABEL_26:
    if ((~a2 & 0x7C00000000000000) != 0) {
      return result;
    }
    goto LABEL_27;
  }
  uint64_t v7 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0
    || (a2 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && result >= 0x378D8E6400000000)
  {
    double result = 0;
    uint64_t v7 = 0;
  }
  if (!(v7 | result)) {
    goto LABEL_26;
  }
  uint64_t v8 = (a2 >> 49) & 0x3FFF;
  __n128 v14 = 0uLL;
  __n128 v12 = 0uLL;
  __n128 v11 = 0uLL;
  if (v8 < 0x1843)
  {
    v13.n128_u64[0] = __bid128_to_binary128(v3, a2, a3, &my_fpsf);
    v13.n128_u64[1] = v10;
    bid_f128_asinh(&v14, (uint64_t *)&v13);
    return __binary128_to_bid128(v14.n128_u64[0], v14.n128_u64[1], a3, &my_fpsf);
  }
  else
  {
    v13.n128_u64[0] = __bid128_to_binary128(result, v7 | 0x3040000000000000, a3, &my_fpsf);
    v13.n128_u64[1] = v9;
    bid_f128_add(&v13, (uint64_t *)&v13, (uint64_t *)&v13);
    bid_f128_itof(&v12, v8 - 6176);
    bid_f128_mul(&v14, (uint64_t *)&v12, (uint64_t *)&c_log10_1082);
    bid_f128_log(&v11, (uint64_t *)&v13);
    bid_f128_add(&v14, (uint64_t *)&v14, (uint64_t *)&v11);
    return __binary128_to_bid128(v14.n128_u64[0], v14.n128_u64[1], a3, &my_fpsf);
  }
}

unint64_t __bid128_atan(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a1;
  v23[3] = *MEMORY[0x1E4F143B8];
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    __n128 v15 = 0uLL;
    v14[0] = 0;
    v14[1] = 0;
    v16[0] = __bid128_to_binary128(a1, a2, a3, &my_fpsf);
    v16[1] = v6;
    memset(v21, 0, 24);
    __dpml_bid_unpack_x_or_y__(v16, 0, (uint64_t)v21, &qword_1BDDBAE40, (uint64_t)v14, v22);
    if (bid_f128_cmp(v14, (uint64_t *)&c_1em40_1085, 1u))
    {
      if (__bid128_isZero(v4, a2)) {
        return __bid128_mul(v4, a2, 1uLL, 0x3040000000000000, a3, &my_fpsf);
      }
      else {
        return bid128_ext_fma(v22, (int *)v21, v17, (int *)&v19, v4, a2, 1uLL, 0xAFF0000000000000, v4, a2, a3, &my_fpsf);
      }
    }
    else
    {
      memset(v18, 0, sizeof(v18));
      if ((__dpml_bid_unpack_x_or_y__(v16, 0, (uint64_t)v18, qword_1BDDBBBC0, (uint64_t)&v15, v17) & 0x8000000000000000) == 0)
      {
        unint64_t v20 = 0;
        long long v19 = 0uLL;
        int v8 = v18[0];
        LODWORD(v18[0]) = 0;
        if (SHIDWORD(v18[0]) <= 1)
        {
          if ((v18[0] & 0x8000000000000000) != 0)
          {
            __n128 v11 = 0;
            uint64_t v12 = 0;
            unsigned int v10 = 0;
            unint64_t v9 = v18;
          }
          else
          {
            __n128 v11 = v22;
            __dpml_bid_addsub__((uint64_t)v18, dword_1BDDBBD28, 14, (uint64_t)v22);
            unint64_t v9 = v23;
            __dpml_bid_ffs_and_shift__((uint64_t)v23, 0);
            unsigned int v10 = 0;
            uint64_t v12 = 4;
          }
        }
        else
        {
          unint64_t v9 = 0;
          unsigned int v10 = 0x80000000;
          __n128 v11 = (int *)v18;
          uint64_t v12 = 8;
        }
        __dpml_bid_divide__((uint64_t)v9, v11, 2, (uint64_t)&v19);
        if (DWORD1(v19) - (v19 >= 0) >= 0)
        {
          v12 -= 4;
          v10 ^= 0x80000000;
          long long v19 = xmmword_1BDDBBD58;
          unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
        }
        __dpml_bid_evaluate_rational__((int8x8_t *)&v19, (uint64_t)&unk_1BDDBBD70, 11, 0x400000000000046uLL, (uint64_t)v21);
        LODWORD(v21[0]) ^= v10;
        if (v12)
        {
          __dpml_bid_ffs_and_shift__((uint64_t)v21, 0);
          __dpml_bid_addsub__((uint64_t)&__dpml_bid_inv_trig_x_table + ((0x34E3180u >> v12) & 0x78) + 320, v21, 8, (uint64_t)v21);
        }
        LODWORD(v21[0]) = v8;
        __dpml_bid_pack__((unsigned int *)v21, &v15, 0, 0);
      }
      return __binary128_to_bid128(v15.n128_u64[0], v15.n128_u64[1], a3, &my_fpsf);
    }
  }
  else
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
  }
  return v4;
}

unint64_t __bid128_atanh(unint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3 = a1;
  if (((a2 >> 61) & 3) != 3)
  {
    uint64_t v9 = a2 & 0x1FFFFFFFFFFFFLL;
    if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
      goto LABEL_24;
    }
    if ((a2 & 0x1FFFFFFFFFFFFLL) != 0x1ED09BEAD87C0)
    {
      unint64_t v21 = a1;
      goto LABEL_25;
    }
    unint64_t v21 = a1;
    if (a1 >= 0x378D8E6400000000)
    {
LABEL_24:
      unint64_t v21 = 0;
      uint64_t v9 = 0;
    }
LABEL_25:
    if (!(v9 | v21))
    {
LABEL_44:
      if ((~a2 & 0x7C00000000000000) != 0) {
        return v21;
      }
      unint64_t v3 = v21;
      goto LABEL_46;
    }
    if (((a2 >> 50) & 0x1FFF) < 0xBF7) {
      return v3;
    }
    unint64_t v10 = a2 & 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v11 = __bid128_sub(1uLL, 0x3040000000000000, a1, a2 & 0x7FFFFFFFFFFFFFFFLL, a3, &my_fpsf);
    if ((v12 & 0x8000000000000000) != 0)
    {
LABEL_50:
      unint64_t v3 = 0;
      my_fpsf |= 1u;
      return v3;
    }
    if (!(v11 | v12 & 0x1FFFFFFFFFFFFLL))
    {
      unint64_t v3 = 0;
      my_fpsf |= 4u;
      return v3;
    }
    __n128 v25 = 0uLL;
    unint64_t v13 = __bid128_div(v3, v10, v11, v12, a3, &my_fpsf);
    unint64_t v15 = __bid128_add(v13, v14, v13, v14, a3, &my_fpsf);
    v24[0] = __bid128_to_binary128(v15, v16, a3, &my_fpsf);
    v24[1] = v17;
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    int8x8_t v28 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    memset(v27, 0, sizeof(v27));
    if ((__dpml_bid_unpack_x_or_y__(v24, 0, (uint64_t)&v31, qword_1BDDBC4A8, (uint64_t)&v25, v26) & 0x8000000000000000) != 0)
    {
LABEL_59:
      bid_f128_mul(&v25, (uint64_t *)&v25, (uint64_t *)&c_half);
      return __binary128_to_bid128(v25.n128_u64[0], v25.n128_u64[1], a3, &my_fpsf);
    }
    if (v31 < 0)
    {
      if (HIDWORD(v31) != -1) {
        goto LABEL_57;
      }
      unint64_t v22 = v32 >> 2;
      if (v31) {
        unint64_t v22 = -(uint64_t)v22;
      }
      if (v22 - 0x3504F333F9DE6484 >= 0xA57D86660310CDBELL)
      {
LABEL_57:
        __dpml_bid_addsub__((uint64_t)&dword_1BDDBC5F0[6], &v31, 0, (uint64_t)v27);
        __dpml_bid_divide__((uint64_t)&v31, v27, 2, (uint64_t)v27);
        __dpml_bid_evaluate_rational__(v27, (uint64_t)&unk_1BDDBC4C8, 17, 6uLL, (uint64_t)&v28);
        __dpml_bid_multiply__(&v28, qword_1BDDBC620, &v28);
        goto LABEL_58;
      }
    }
    else if (HIDWORD(v31) && v31)
    {
      unint64_t v29 = 0x8000000000000000;
      if (v33) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v32 == 0x8000000000000000;
      }
      if (v18 && HIDWORD(v31) == 1) {
        __int32 v20 = -32768;
      }
      else {
        __int32 v20 = 0x8000;
      }
      v28.i32[1] = v20;
      goto LABEL_58;
    }
    __dpml_bid_addsub__((uint64_t)dword_1BDDBC5F0, &v31, 0, (uint64_t)&v28);
    __dpml_bid_ux_log__((uint64_t)&v28, qword_1BDDBC620, &v28);
LABEL_58:
    __dpml_bid_pack__((unsigned int *)&v28, &v25, 53, 52);
    goto LABEL_59;
  }
  if ((a2 & 0x7800000000000000) != 0x7800000000000000)
  {
    unint64_t v21 = 0;
    goto LABEL_44;
  }
  if ((a2 & 0x3FFFFFFFFFFFLL) != 0x314DC6448D93 || a1 < 0x38C15B0A00000000) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = 0;
  }
  if ((a2 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = 0;
  }
  if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v7;
  }
  if ((a2 & 0x7C00000000000000) != 0x7C00000000000000) {
    goto LABEL_50;
  }
LABEL_46:
  if ((~a2 & 0x7E00000000000000) == 0) {
    my_fpsf |= 1u;
  }
  return v3;
}

unint64_t __bid128_quiet_greater(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  if ((~a2 & 0x7C00000000000000) == 0 || (a4 & 0x7C00000000000000) == 0x7C00000000000000)
  {
    if ((~a2 & 0x7E00000000000000) == 0 || (a4 & 0x7E00000000000000) == 0x7E00000000000000)
    {
      uint64_t v6 = 0;
      *a5 |= 1u;
      return v6;
    }
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 0;
  }
  if ((~a2 & 0x7800000000000000) == 0)
  {
    LODWORD(v6) = (~a4 & 0x7800000000000000) != 0 || a4 < 0;
    if (a2 >= 0) {
      return v6;
    }
    else {
      return 0;
    }
  }
  if ((~a4 & 0x7800000000000000) == 0) {
    return (unint64_t)a4 >> 63;
  }
  unint64_t v7 = a2 & 0x1FFFFFFFFFFFFLL;
  BOOL v8 = (~a2 & 0x6000000000000000) == 0;
  BOOL v9 = a1 > 0x378D8E63FFFFFFFFLL && v7 == 0x1ED09BEAD87C0;
  if (v9) {
    BOOL v8 = 1;
  }
  if (v7 > 0x1ED09BEAD87C0) {
    BOOL v8 = 1;
  }
  unint64_t v10 = a4 & 0x1FFFFFFFFFFFFLL;
  if ((a4 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0)
  {
    if (v7 | a1) {
      char v11 = v8;
    }
    else {
      char v11 = 1;
    }
    if ((v11 & 1) == 0) {
      return a2 >= 0;
    }
    return 0;
  }
  if (v7 | a1) {
    char v12 = v8;
  }
  else {
    char v12 = 1;
  }
  BOOL v13 = a3 >= 0x378D8E6400000000 && v10 == 0x1ED09BEAD87C0;
  if (v13 || (a4 & 0x6000000000000000) == 0x6000000000000000 || !(v10 | a3))
  {
    if (v12) {
      return 0;
    }
    return a2 >= 0;
  }
  if ((v12 & 1) != 0 || (a4 ^ a2) < 0) {
    return (unint64_t)a4 >> 63;
  }
  uint64_t v15 = ((unint64_t)a2 >> 49) & 0x3FFF;
  uint64_t v16 = ((unint64_t)a4 >> 49) & 0x3FFF;
  int v17 = v16 - v15;
  if (v16 == v15)
  {
    int v18 = v7 == v10;
    if (a1 < a3) {
      int v18 = 0;
    }
    if (v7 > v10) {
      int v18 = 1;
    }
    unint64_t v19 = (unint64_t)a2 >> 63;
    return v18 ^ v19;
  }
  if ((v7 > v10 || v7 == v10 && a1 > a3) && v15 >= v16) {
    return a2 >= 0;
  }
  if ((v7 < v10 || v7 == v10 && a1 < a3) && v15 <= v16) {
    return (unint64_t)a2 >> 63;
  }
  int v20 = v15 - v16;
  if (v20 < 1)
  {
    if (v17 >= 34) {
      return (unint64_t)a2 >> 63;
    }
    if (v17 < 20)
    {
      unint64_t v110 = __bid_ten2k64[v17];
      unint64_t v111 = HIDWORD(v110);
      unsigned int v112 = v110;
      unint64_t v113 = HIDWORD(v10);
      unint64_t v114 = HIDWORD(v110) * (unint64_t)a4;
      unint64_t v115 = v110 * (unint64_t)v113;
      unint64_t v116 = HIDWORD(v114) + HIDWORD(v110) * (unint64_t)v113;
      unint64_t v117 = v115 + v114 + ((v110 * (unint64_t)a4) >> 32);
      unint64_t v118 = (v110 * a4) | ((unint64_t)v117 << 32);
      unint64_t v119 = HIDWORD(v110) * (unint64_t)a3;
      unint64_t v120 = v110 * (unint64_t)a3;
      unint64_t v121 = v112 * (unint64_t)HIDWORD(a3) + v119 + HIDWORD(v120);
      unint64_t v122 = v120 | ((unint64_t)v121 << 32);
      unsigned long long v123 = __PAIR128__(v116, v118)
           + __PAIR128__(HIDWORD(v117), HIDWORD(v119) + v111 * (unint64_t)HIDWORD(a3) + HIDWORD(v121));
      if (v118 + HIDWORD(v119) + v111 * (unint64_t)HIDWORD(a3) + HIDWORD(v121) == v7
        && v122 == a1
        && !*((void *)&v123 + 1))
      {
        return 0;
      }
      BOOL v124 = v122 > a1;
      BOOL v9 = (void)v123 == v7;
      BOOL v125 = (unint64_t)v123 > v7;
      if (!v9) {
        BOOL v124 = 0;
      }
      if (*((void *)&v123 + 1)) {
        BOOL v125 = 1;
      }
      int v91 = v124 || v125;
      BOOL v92 = a4 < 0;
    }
    else
    {
      unint64_t v55 = &__bid_ten2k128[2 * (v17 - 20)];
      unint64_t v57 = *v55;
      unint64_t v56 = v55[1];
      unint64_t v58 = HIDWORD(v56);
      unint64_t v59 = v56 * (unint64_t)HIDWORD(a3);
      unint64_t v60 = HIDWORD(v59) + HIDWORD(v56) * (unint64_t)HIDWORD(a3);
      unint64_t v61 = HIDWORD(v56) * (unint64_t)a3
          + v59
          + ((v56 * (unint64_t)a3) >> 32);
      unint64_t v62 = HIDWORD(v61);
      unint64_t v63 = (v56 * a3) | ((unint64_t)v61 << 32);
      unint64_t v64 = HIDWORD(v57);
      unint64_t v65 = v57 * (unint64_t)HIDWORD(a3);
      unint64_t v66 = HIDWORD(v57) * (unint64_t)a3
          + v65
          + ((v57 * (unint64_t)a3) >> 32);
      unint64_t v67 = (v57 * a3) | ((unint64_t)v66 << 32);
      unsigned long long v68 = __PAIR128__(v60, v63)
          + __PAIR128__(v62, HIDWORD(v65) + HIDWORD(v57) * (unint64_t)HIDWORD(a3) + HIDWORD(v66));
      unint64_t v69 = HIDWORD(v10);
      unint64_t v70 = v56 * (unint64_t)v69;
      unint64_t v71 = v56 * (unint64_t)a4;
      unint64_t v72 = v58 * (unint64_t)a4;
      unint64_t v73 = HIDWORD(v70) + v58 * (unint64_t)v69;
      unint64_t v74 = v72 + v70 + HIDWORD(v71);
      unint64_t v75 = HIDWORD(v74);
      unint64_t v76 = v71 | ((unint64_t)v74 << 32);
      unint64_t v77 = v57 * (unint64_t)v69;
      unint64_t v78 = v57 * (unint64_t)a4;
      unint64_t v79 = HIDWORD(v77) + v64 * (unint64_t)v69;
      unint64_t v80 = v64 * (unint64_t)a4 + v77 + HIDWORD(v78);
      unint64_t v81 = v78 | ((unint64_t)v80 << 32);
      unsigned long long v82 = __PAIR128__(v73, v76) + __PAIR128__(v75, v79 + HIDWORD(v80));
      unint64_t v83 = v68 + v81;
      uint64_t v84 = __CFADD__((void)v68, v81) + (void)v82;
      BOOL v85 = __CFADD__(__CFADD__((void)v68, v81), (void)v82);
      BOOL v48 = __CFADD__(*((void *)&v68 + 1), v84);
      uint64_t v86 = *((void *)&v68 + 1) + v84;
      uint64_t v87 = v48 || v85;
      uint64_t v88 = (*((void *)&v82 + 1) + v87) | v86;
      if (v83 == v7 && !v88)
      {
        uint64_t v6 = 0;
        if (v67 == a1) {
          return v6;
        }
      }
      BOOL v89 = v67 > a1;
      BOOL v9 = v83 == v7;
      BOOL v90 = v83 > v7;
      if (!v9) {
        BOOL v89 = 0;
      }
      if (v88) {
        BOOL v90 = 1;
      }
      int v91 = v90 || v89;
      BOOL v92 = a2 < 0;
    }
    int v126 = !v92;
    return v126 ^ v91;
  }
  if (v20 >= 0x22) {
    return a2 >= 0;
  }
  if (v20 < 0x14)
  {
    unint64_t v93 = __bid_ten2k64[v20];
    unint64_t v94 = HIDWORD(v93);
    unsigned int v95 = v93;
    unint64_t v96 = HIDWORD(v7);
    unint64_t v97 = HIDWORD(v93) * (unint64_t)a2;
    unint64_t v98 = v93 * (unint64_t)v96;
    unint64_t v99 = HIDWORD(v97) + HIDWORD(v93) * (unint64_t)v96;
    unint64_t v100 = v98 + v97 + ((v93 * (unint64_t)a2) >> 32);
    unint64_t v101 = (v93 * a2) | ((unint64_t)v100 << 32);
    unint64_t v102 = HIDWORD(v93) * (unint64_t)a1;
    unint64_t v103 = v93 * (unint64_t)a1;
    unint64_t v104 = v95 * (unint64_t)HIDWORD(a1) + v102 + HIDWORD(v103);
    unint64_t v105 = v103 | ((unint64_t)v104 << 32);
    unsigned long long v106 = __PAIR128__(v99, v101)
         + __PAIR128__(HIDWORD(v100), HIDWORD(v102) + v94 * (unint64_t)HIDWORD(a1) + HIDWORD(v104));
    if (__PAIR128__(v99, v101)
       + __PAIR128__(HIDWORD(v100), HIDWORD(v102) + v94 * (unint64_t)HIDWORD(a1) + HIDWORD(v104)) == v10
      && v105 == a3)
    {
      return 0;
    }
    BOOL v107 = (unint64_t)v106 > v10;
    BOOL v108 = (void)v106 == v10;
    int v109 = v107;
    if (*((void *)&v106 + 1)) {
      BOOL v54 = 1;
    }
    else {
      BOOL v54 = v109;
    }
    BOOL v53 = v105 > a3 && v108;
    goto LABEL_110;
  }
  unint64_t v22 = &__bid_ten2k128[2 * (v20 - 20)];
  unint64_t v21 = v22[1];
  unint64_t v23 = HIDWORD(v21);
  unint64_t v24 = v21 * (unint64_t)HIDWORD(a1);
  unint64_t v25 = HIDWORD(v24) + HIDWORD(v21) * (unint64_t)HIDWORD(a1);
  unint64_t v26 = HIDWORD(v21) * (unint64_t)a1
      + v24
      + ((v21 * (unint64_t)a1) >> 32);
  unint64_t v27 = HIDWORD(v26);
  unint64_t v28 = (v21 * a1) | ((unint64_t)v26 << 32);
  uint64_t v29 = HIDWORD(*v22);
  unint64_t v30 = *v22 * (unint64_t)HIDWORD(a1);
  unint64_t v31 = HIDWORD(*v22) * (unint64_t)a1
      + v30
      + ((*v22 * (unint64_t)a1) >> 32);
  unint64_t v32 = (*v22 * a1) | ((unint64_t)v31 << 32);
  unsigned long long v33 = __PAIR128__(v25, v28)
      + __PAIR128__(v27, HIDWORD(v30) + HIDWORD(*v22) * (unint64_t)HIDWORD(a1) + HIDWORD(v31));
  unint64_t v34 = HIDWORD(v7);
  unint64_t v35 = v21 * (unint64_t)v34;
  unint64_t v36 = v21 * (unint64_t)a2;
  unint64_t v37 = v23 * (unint64_t)a2;
  unint64_t v38 = HIDWORD(v35) + v23 * (unint64_t)v34;
  unint64_t v39 = v37 + v35 + HIDWORD(v36);
  unint64_t v40 = HIDWORD(v39);
  unint64_t v41 = v36 | ((unint64_t)v39 << 32);
  unint64_t v42 = *v22 * (unint64_t)v34;
  unint64_t v43 = HIDWORD(v42) + v29 * (unint64_t)v34;
  unint64_t v44 = v29 * (unint64_t)a2
      + v42
      + ((*v22 * (unint64_t)a2) >> 32);
  unint64_t v45 = (*v22 * a2) | ((unint64_t)v44 << 32);
  unsigned long long v46 = __PAIR128__(v38, v41) + __PAIR128__(v40, v43 + HIDWORD(v44));
  unint64_t v47 = v33 + v45;
  BOOL v48 = __CFADD__(__CFADD__((void)v33, v45), (void)v46);
  uint64_t v49 = __CFADD__((void)v33, v45) + (void)v46;
  LODWORD(v50) = v48;
  BOOL v48 = __CFADD__(*((void *)&v33 + 1), v49);
  uint64_t v51 = *((void *)&v33 + 1) + v49;
  if (v48) {
    uint64_t v50 = 1;
  }
  else {
    uint64_t v50 = v50;
  }
  uint64_t v52 = (*((void *)&v46 + 1) + v50) | v51;
  if (v47 != v10 || v52 || (uint64_t v6 = 0, v32 != a3))
  {
    BOOL v53 = v47 == v10;
    BOOL v54 = v47 > v10;
    if (v52) {
      BOOL v54 = 1;
    }
    if (v32 <= a3) {
      BOOL v53 = 0;
    }
LABEL_110:
    int v18 = v54 || v53;
    unint64_t v19 = (unint64_t)a4 >> 63;
    return v18 ^ v19;
  }
  return v6;
}

uint64_t __bid128_quiet_greater_equal(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, _DWORD *a5)
{
  if ((~a2 & 0x7C00000000000000) != 0 && (a4 & 0x7C00000000000000) != 0x7C00000000000000)
  {
    if (a1 == a3 && a2 == a4) {
      return 1;
    }
    if ((~a2 & 0x7800000000000000) == 0)
    {
      BOOL v7 = (~a4 & 0x7800000000000000) == 0 && (a4 & 0x8000000000000000) != 0;
      return a2 >= 0 || v7;
    }
    if ((~a4 & 0x7800000000000000) == 0) {
      return a4 >> 63;
    }
    unint64_t v8 = a2 & 0x1FFFFFFFFFFFFLL;
    BOOL v9 = (~a2 & 0x6000000000000000) == 0;
    if (a1 > 0x378D8E63FFFFFFFFLL && v8 == 0x1ED09BEAD87C0) {
      BOOL v9 = 1;
    }
    if (v8 > 0x1ED09BEAD87C0) {
      BOOL v9 = 1;
    }
    unint64_t v11 = a4 & 0x1FFFFFFFFFFFFLL;
    if ((a4 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0)
    {
      if (v8 | a1) {
        char v12 = v9;
      }
      else {
        char v12 = 1;
      }
      if (v12) {
        return 1;
      }
      return a2 >= 0;
    }
    if (v8 | a1) {
      char v13 = v9;
    }
    else {
      char v13 = 1;
    }
    BOOL v14 = a3 >= 0x378D8E6400000000 && v11 == 0x1ED09BEAD87C0;
    if (v14 || (a4 & 0x6000000000000000) == 0x6000000000000000 || !(v11 | a3))
    {
      if ((v13 & 1) == 0) {
        return a2 >= 0;
      }
      return 1;
    }
    if ((v13 & 1) != 0 || ((a4 ^ a2) & 0x8000000000000000) != 0) {
      return a4 >> 63;
    }
    uint64_t v15 = ((unint64_t)a2 >> 49) & 0x3FFF;
    uint64_t v16 = (a4 >> 49) & 0x3FFF;
    int v17 = v16 - v15;
    if (v16 == v15)
    {
      BOOL v18 = v8 == v11;
      if (a1 < a3) {
        BOOL v18 = 0;
      }
      int v19 = v8 > v11 || v18;
LABEL_55:
      unint64_t v20 = (unint64_t)a2 >> 63;
      return v19 ^ v20;
    }
    if (v8 >= v11 && a1 >= a3 && v15 > v16) {
      return a2 >= 0;
    }
    if (v8 <= v11 && a1 <= a3 && v15 < v16) {
      return (unint64_t)a2 >> 63;
    }
    int v21 = v15 - v16;
    if (v21 < 1)
    {
      if (v17 >= 34) {
        return (unint64_t)a2 >> 63;
      }
      if (v17 >= 20)
      {
        unint64_t v59 = &__bid_ten2k128[2 * (v17 - 20)];
        unint64_t v61 = *v59;
        unint64_t v60 = v59[1];
        unint64_t v62 = HIDWORD(v60);
        unint64_t v63 = v60 * (unint64_t)HIDWORD(a3);
        unint64_t v64 = HIDWORD(v63) + HIDWORD(v60) * (unint64_t)HIDWORD(a3);
        unint64_t v65 = HIDWORD(v60) * (unint64_t)a3
            + v63
            + ((v60 * (unint64_t)a3) >> 32);
        unint64_t v66 = HIDWORD(v65);
        unint64_t v67 = (v60 * a3) | ((unint64_t)v65 << 32);
        unint64_t v68 = HIDWORD(v61);
        unint64_t v69 = v61 * (unint64_t)HIDWORD(a3);
        unint64_t v70 = HIDWORD(v61) * (unint64_t)a3
            + v69
            + ((v61 * (unint64_t)a3) >> 32);
        unint64_t v71 = (v61 * a3) | ((unint64_t)v70 << 32);
        unsigned long long v72 = __PAIR128__(v64, v67)
            + __PAIR128__(v66, HIDWORD(v69) + HIDWORD(v61) * (unint64_t)HIDWORD(a3) + HIDWORD(v70));
        unint64_t v73 = HIDWORD(v11);
        unint64_t v74 = v60 * (unint64_t)v73;
        unint64_t v75 = v60 * (unint64_t)a4;
        unint64_t v76 = v62 * (unint64_t)a4;
        unint64_t v77 = HIDWORD(v74) + v62 * (unint64_t)v73;
        unint64_t v78 = v76 + v74 + HIDWORD(v75);
        unint64_t v79 = HIDWORD(v78);
        unint64_t v80 = v75 | ((unint64_t)v78 << 32);
        unint64_t v81 = v61 * (unint64_t)v73;
        unint64_t v82 = v61 * (unint64_t)a4;
        unint64_t v83 = HIDWORD(v81) + v68 * (unint64_t)v73;
        unint64_t v84 = v68 * (unint64_t)a4 + v81 + HIDWORD(v82);
        unint64_t v85 = v82 | ((unint64_t)v84 << 32);
        unsigned long long v86 = __PAIR128__(v77, v80) + __PAIR128__(v79, v83 + HIDWORD(v84));
        unint64_t v87 = v72 + v85;
        uint64_t v88 = __CFADD__((void)v72, v85) + (void)v86;
        LODWORD(v89) = __CFADD__(__CFADD__((void)v72, v85), (void)v86);
        BOOL v124 = __CFADD__(*((void *)&v72 + 1), v88);
        uint64_t v90 = *((void *)&v72 + 1) + v88;
        if (v124) {
          uint64_t v89 = 1;
        }
        else {
          uint64_t v89 = v89;
        }
        uint64_t v91 = v89 << 63 >> 63;
        if (v90) {
          BOOL v92 = 0;
        }
        else {
          BOOL v92 = *((void *)&v86 + 1) == v91;
        }
        int v93 = v92;
        if (v87 == v8 && v93 && v71 == a1) {
          return 1;
        }
        if (v93) {
          int v19 = v87 < v8 || v71 < a1 && v87 == v8;
        }
        else {
          int v19 = 0;
        }
        goto LABEL_55;
      }
      unint64_t v111 = __bid_ten2k64[v17];
      unint64_t v112 = HIDWORD(v111);
      unint64_t v113 = HIDWORD(v11);
      unint64_t v114 = HIDWORD(v111) * (unint64_t)a4;
      unint64_t v115 = HIDWORD(v114) + HIDWORD(v111) * (unint64_t)v113;
      unint64_t v116 = v111 * (unint64_t)v113
           + v114
           + ((v111 * (unint64_t)a4) >> 32);
      unint64_t v117 = (v111 * a4) | ((unint64_t)v116 << 32);
      unint64_t v118 = HIDWORD(v111) * (unint64_t)a3;
      unint64_t v119 = v111 * (unint64_t)a3;
      unint64_t v120 = v111 * (unint64_t)HIDWORD(a3) + v118 + HIDWORD(v119);
      unint64_t v121 = HIDWORD(v118) + v112 * (unint64_t)HIDWORD(a3) + HIDWORD(v120);
      unint64_t v122 = v119 | ((unint64_t)v120 << 32);
      unint64_t v123 = v117 + v121;
      if (v115 + HIDWORD(v116)) {
        BOOL v124 = 0;
      }
      else {
        BOOL v124 = v123 >= v121;
      }
      int v125 = v124;
      if (v122 == a1 && v123 == v8 && (v125 & 1) != 0) {
        return 1;
      }
      if (v125) {
        int v19 = v123 < v8 || v122 < a1 && v123 == v8;
      }
      else {
        int v19 = 0;
      }
    }
    else
    {
      if (v21 >= 0x22) {
        return a2 >= 0;
      }
      if (v21 < 0x14)
      {
        unint64_t v94 = __bid_ten2k64[v21];
        unint64_t v95 = HIDWORD(v94);
        unint64_t v96 = HIDWORD(v8);
        unint64_t v97 = HIDWORD(v94) * (unint64_t)a2;
        unint64_t v98 = HIDWORD(v97) + HIDWORD(v94) * (unint64_t)v96;
        unint64_t v99 = v94 * (unint64_t)v96
            + v97
            + ((v94 * (unint64_t)a2) >> 32);
        unint64_t v100 = HIDWORD(v99);
        unint64_t v101 = (v94 * a2) | ((unint64_t)v99 << 32);
        unint64_t v102 = HIDWORD(v94) * (unint64_t)a1;
        unint64_t v103 = v94 * (unint64_t)a1;
        unint64_t v104 = v94 * (unint64_t)HIDWORD(a1) + v102 + HIDWORD(v103);
        unint64_t v105 = v103 | ((unint64_t)v104 << 32);
        unsigned long long v106 = __PAIR128__(v98, v101)
             + __PAIR128__(v100, HIDWORD(v102) + v95 * (unint64_t)HIDWORD(a1) + HIDWORD(v104));
        if (__PAIR128__(v98, v101)
           + __PAIR128__(v100, HIDWORD(v102) + v95 * (unint64_t)HIDWORD(a1) + HIDWORD(v104)) == v11
          && v105 == a3)
        {
          return 1;
        }
        BOOL v56 = (unint64_t)v106 > v11;
        BOOL v107 = (void)v106 == v11;
        int v108 = v56;
        if (*((void *)&v106 + 1)) {
          int v109 = 1;
        }
        else {
          int v109 = v108;
        }
        BOOL v110 = v105 > a3 && v107;
        int v19 = v109 | v110;
      }
      else
      {
        unint64_t v22 = &__bid_ten2k128[2 * (v21 - 20)];
        unint64_t v24 = *v22;
        unint64_t v23 = v22[1];
        unint64_t v25 = HIDWORD(v23);
        unint64_t v26 = v23 * (unint64_t)HIDWORD(a1);
        unint64_t v27 = HIDWORD(v26) + HIDWORD(v23) * (unint64_t)HIDWORD(a1);
        unint64_t v28 = HIDWORD(v23) * (unint64_t)a1
            + v26
            + ((v23 * (unint64_t)a1) >> 32);
        unint64_t v29 = HIDWORD(v28);
        unint64_t v30 = (v23 * a1) | ((unint64_t)v28 << 32);
        unint64_t v31 = HIDWORD(v24);
        unint64_t v32 = v24 * (unint64_t)HIDWORD(a1);
        unint64_t v33 = HIDWORD(v24) * (unint64_t)a1
            + v32
            + ((v24 * (unint64_t)a1) >> 32);
        unint64_t v34 = (v24 * a1) | ((unint64_t)v33 << 32);
        unsigned long long v35 = __PAIR128__(v27, v30)
            + __PAIR128__(v29, HIDWORD(v32) + HIDWORD(v24) * (unint64_t)HIDWORD(a1) + HIDWORD(v33));
        unint64_t v36 = HIDWORD(v8);
        unint64_t v37 = v23 * (unint64_t)v36;
        unint64_t v38 = v23 * (unint64_t)a2;
        unint64_t v39 = v25 * (unint64_t)a2;
        unint64_t v40 = HIDWORD(v37) + v25 * (unint64_t)v36;
        unint64_t v41 = v39 + v37 + HIDWORD(v38);
        unint64_t v42 = HIDWORD(v41);
        unint64_t v43 = v38 | ((unint64_t)v41 << 32);
        unint64_t v44 = v24 * (unint64_t)v36;
        unint64_t v45 = v24 * (unint64_t)a2;
        unint64_t v46 = HIDWORD(v44) + v31 * (unint64_t)v36;
        unint64_t v47 = v31 * (unint64_t)a2 + v44 + HIDWORD(v45);
        unint64_t v48 = v45 | ((unint64_t)v47 << 32);
        unsigned long long v49 = __PAIR128__(v40, v43) + __PAIR128__(v42, v46 + HIDWORD(v47));
        unint64_t v50 = v35 + v48;
        uint64_t v51 = __CFADD__((void)v35, v48) + (void)v49;
        BOOL v52 = __CFADD__(__CFADD__((void)v35, v48), (void)v49);
        BOOL v124 = __CFADD__(*((void *)&v35 + 1), v51);
        uint64_t v53 = *((void *)&v35 + 1) + v51;
        uint64_t v54 = v124 || v52;
        uint64_t v55 = (*((void *)&v49 + 1) + v54) | v53;
        if (v50 == v11 && !v55 && v34 == a3) {
          return 1;
        }
        BOOL v56 = v50 > v11;
        BOOL v57 = v50 == v11;
        int v58 = v56;
        if (v55) {
          int v58 = 1;
        }
        if (v34 <= a3) {
          BOOL v57 = 0;
        }
        int v19 = v58 | v57;
      }
    }
    unint64_t v20 = a4 >> 63;
    return v19 ^ v20;
  }
  if ((~a2 & 0x7E00000000000000) != 0 && (a4 & 0x7E00000000000000) != 0x7E00000000000000) {
    return 0;
  }
  uint64_t result = 0;
  *a5 |= 1u;
  return result;
}

unint64_t __bid128_quiet_less(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  if ((~a2 & 0x7C00000000000000) == 0 || (a4 & 0x7C00000000000000) == 0x7C00000000000000)
  {
    if ((~a2 & 0x7E00000000000000) == 0 || (a4 & 0x7E00000000000000) == 0x7E00000000000000)
    {
      uint64_t v6 = 0;
      *a5 |= 1u;
      return v6;
    }
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 0;
  }
  if ((~a2 & 0x7800000000000000) == 0)
  {
    LODWORD(v6) = (~a4 & 0x7800000000000000) != 0 || a4 >= 0;
    if ((a2 & 0x8000000000000000) != 0) {
      return v6;
    }
    else {
      return 0;
    }
  }
  if ((~a4 & 0x7800000000000000) == 0) {
    goto LABEL_20;
  }
  unint64_t v8 = a2 & 0x1FFFFFFFFFFFFLL;
  BOOL v9 = (~a2 & 0x6000000000000000) == 0;
  BOOL v10 = a1 > 0x378D8E63FFFFFFFFLL && v8 == 0x1ED09BEAD87C0;
  if (v10) {
    BOOL v9 = 1;
  }
  if (v8 > 0x1ED09BEAD87C0) {
    BOOL v9 = 1;
  }
  unint64_t v11 = a4 & 0x1FFFFFFFFFFFFLL;
  if ((a4 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0)
  {
    if (v8 | a1) {
      char v12 = v9;
    }
    else {
      char v12 = 1;
    }
    if ((v12 & 1) == 0) {
      return a2 >> 63;
    }
    return 0;
  }
  if (v8 | a1) {
    char v13 = v9;
  }
  else {
    char v13 = 1;
  }
  BOOL v14 = a3 >= 0x378D8E6400000000 && v11 == 0x1ED09BEAD87C0;
  if (v14 || (a4 & 0x6000000000000000) == 0x6000000000000000 || !(v11 | a3))
  {
    if ((v13 & 1) == 0) {
      return a2 >> 63;
    }
    return 0;
  }
  if ((v13 & 1) != 0 || ((a4 ^ a2) & 0x8000000000000000) != 0)
  {
LABEL_20:
    unint64_t v7 = (unint64_t)a4 >> 63;
    return v7 ^ 1;
  }
  uint64_t v16 = (a2 >> 49) & 0x3FFF;
  uint64_t v17 = ((unint64_t)a4 >> 49) & 0x3FFF;
  int v18 = v17 - v16;
  if (v17 == v16)
  {
    int v19 = v8 == v11;
    if (a1 < a3) {
      int v19 = 0;
    }
    if (v8 > v11) {
      int v19 = 1;
    }
    BOOL v20 = (a2 & 0x8000000000000000) != 0;
    goto LABEL_56;
  }
  if ((v8 > v11 || v8 == v11 && a1 > a3) && v16 >= v17) {
    return a2 >> 63;
  }
  if ((v8 < v11 || v8 == v11 && a1 < a3) && v16 <= v17)
  {
LABEL_69:
    unint64_t v7 = a2 >> 63;
    return v7 ^ 1;
  }
  int v22 = v16 - v17;
  if (v22 < 1)
  {
    if (v18 >= 34) {
      goto LABEL_69;
    }
    if (v18 < 20)
    {
      unint64_t v112 = __bid_ten2k64[v18];
      unint64_t v113 = HIDWORD(v112);
      unsigned int v114 = v112;
      unint64_t v115 = HIDWORD(v11);
      unint64_t v116 = HIDWORD(v112) * (unint64_t)a4;
      unint64_t v117 = v112 * (unint64_t)v115;
      unint64_t v118 = HIDWORD(v116) + HIDWORD(v112) * (unint64_t)v115;
      unint64_t v119 = v117 + v116 + ((v112 * (unint64_t)a4) >> 32);
      unint64_t v120 = (v112 * a4) | ((unint64_t)v119 << 32);
      unint64_t v121 = HIDWORD(v112) * (unint64_t)a3;
      unint64_t v122 = v112 * (unint64_t)a3;
      unint64_t v123 = v114 * (unint64_t)HIDWORD(a3) + v121 + HIDWORD(v122);
      unint64_t v124 = v122 | ((unint64_t)v123 << 32);
      unsigned long long v125 = __PAIR128__(v118, v120)
           + __PAIR128__(HIDWORD(v119), HIDWORD(v121) + v113 * (unint64_t)HIDWORD(a3) + HIDWORD(v123));
      if (v120 + HIDWORD(v121) + v113 * (unint64_t)HIDWORD(a3) + HIDWORD(v123) == v8
        && v124 == a1
        && !*((void *)&v125 + 1))
      {
        return 0;
      }
      BOOL v126 = v124 > a1;
      BOOL v10 = (void)v125 == v8;
      BOOL v127 = (unint64_t)v125 > v8;
      if (!v10) {
        BOOL v126 = 0;
      }
      if (*((void *)&v125 + 1)) {
        BOOL v127 = 1;
      }
      int v93 = v126 || v127;
      unint64_t v94 = (unint64_t)a4 >> 63;
    }
    else
    {
      BOOL v57 = &__bid_ten2k128[2 * (v18 - 20)];
      unint64_t v59 = *v57;
      unint64_t v58 = v57[1];
      unint64_t v60 = HIDWORD(v58);
      unint64_t v61 = v58 * (unint64_t)HIDWORD(a3);
      unint64_t v62 = HIDWORD(v61) + HIDWORD(v58) * (unint64_t)HIDWORD(a3);
      unint64_t v63 = HIDWORD(v58) * (unint64_t)a3
          + v61
          + ((v58 * (unint64_t)a3) >> 32);
      unint64_t v64 = HIDWORD(v63);
      unint64_t v65 = (v58 * a3) | ((unint64_t)v63 << 32);
      unint64_t v66 = HIDWORD(v59);
      unint64_t v67 = v59 * (unint64_t)HIDWORD(a3);
      unint64_t v68 = HIDWORD(v59) * (unint64_t)a3
          + v67
          + ((v59 * (unint64_t)a3) >> 32);
      unint64_t v69 = (v59 * a3) | ((unint64_t)v68 << 32);
      unsigned long long v70 = __PAIR128__(v62, v65)
          + __PAIR128__(v64, HIDWORD(v67) + HIDWORD(v59) * (unint64_t)HIDWORD(a3) + HIDWORD(v68));
      unint64_t v71 = HIDWORD(v11);
      unint64_t v72 = v58 * (unint64_t)v71;
      unint64_t v73 = v58 * (unint64_t)a4;
      unint64_t v74 = v60 * (unint64_t)a4;
      unint64_t v75 = HIDWORD(v72) + v60 * (unint64_t)v71;
      unint64_t v76 = v74 + v72 + HIDWORD(v73);
      unint64_t v77 = HIDWORD(v76);
      unint64_t v78 = v73 | ((unint64_t)v76 << 32);
      unint64_t v79 = v59 * (unint64_t)v71;
      unint64_t v80 = v59 * (unint64_t)a4;
      unint64_t v81 = HIDWORD(v79) + v66 * (unint64_t)v71;
      unint64_t v82 = v66 * (unint64_t)a4 + v79 + HIDWORD(v80);
      unint64_t v83 = v80 | ((unint64_t)v82 << 32);
      unsigned long long v84 = __PAIR128__(v75, v78) + __PAIR128__(v77, v81 + HIDWORD(v82));
      unint64_t v85 = v70 + v83;
      uint64_t v86 = __CFADD__((void)v70, v83) + (void)v84;
      BOOL v87 = __CFADD__(__CFADD__((void)v70, v83), (void)v84);
      BOOL v50 = __CFADD__(*((void *)&v70 + 1), v86);
      uint64_t v88 = *((void *)&v70 + 1) + v86;
      uint64_t v89 = v50 || v87;
      uint64_t v90 = (*((void *)&v84 + 1) + v89) | v88;
      if (v85 == v8 && !v90)
      {
        uint64_t v6 = 0;
        if (v69 == a1) {
          return v6;
        }
      }
      BOOL v91 = v69 > a1;
      BOOL v10 = v85 == v8;
      BOOL v92 = v85 > v8;
      if (!v10) {
        BOOL v91 = 0;
      }
      if (v90) {
        BOOL v92 = 1;
      }
      int v93 = v92 || v91;
      unint64_t v94 = a2 >> 63;
    }
    return v93 ^ v94;
  }
  if (v22 >= 0x22) {
    return a2 >> 63;
  }
  if (v22 < 0x14)
  {
    unint64_t v95 = __bid_ten2k64[v22];
    unint64_t v96 = HIDWORD(v95);
    unsigned int v97 = v95;
    unint64_t v98 = HIDWORD(v8);
    unint64_t v99 = HIDWORD(v95) * (unint64_t)a2;
    unint64_t v100 = v95 * (unint64_t)v98;
    unint64_t v101 = HIDWORD(v99) + HIDWORD(v95) * (unint64_t)v98;
    unint64_t v102 = v100 + v99 + ((v95 * (unint64_t)a2) >> 32);
    unint64_t v103 = (v95 * a2) | ((unint64_t)v102 << 32);
    unint64_t v104 = HIDWORD(v95) * (unint64_t)a1;
    unint64_t v105 = v95 * (unint64_t)a1;
    unint64_t v106 = v97 * (unint64_t)HIDWORD(a1) + v104 + HIDWORD(v105);
    unint64_t v107 = v105 | ((unint64_t)v106 << 32);
    unsigned long long v108 = __PAIR128__(v101, v103)
         + __PAIR128__(HIDWORD(v102), HIDWORD(v104) + v96 * (unint64_t)HIDWORD(a1) + HIDWORD(v106));
    if (__PAIR128__(v101, v103)
       + __PAIR128__(HIDWORD(v102), HIDWORD(v104) + v96 * (unint64_t)HIDWORD(a1) + HIDWORD(v106)) == v11
      && v107 == a3)
    {
      return 0;
    }
    BOOL v109 = (unint64_t)v108 > v11;
    BOOL v110 = (void)v108 == v11;
    int v111 = v109;
    if (*((void *)&v108 + 1)) {
      BOOL v56 = 1;
    }
    else {
      BOOL v56 = v111;
    }
    BOOL v55 = v107 > a3 && v110;
    goto LABEL_114;
  }
  unint64_t v24 = &__bid_ten2k128[2 * (v22 - 20)];
  unint64_t v23 = v24[1];
  unint64_t v25 = HIDWORD(v23);
  unint64_t v26 = v23 * (unint64_t)HIDWORD(a1);
  unint64_t v27 = HIDWORD(v26) + HIDWORD(v23) * (unint64_t)HIDWORD(a1);
  unint64_t v28 = HIDWORD(v23) * (unint64_t)a1
      + v26
      + ((v23 * (unint64_t)a1) >> 32);
  unint64_t v29 = HIDWORD(v28);
  unint64_t v30 = (v23 * a1) | ((unint64_t)v28 << 32);
  uint64_t v31 = HIDWORD(*v24);
  unint64_t v32 = *v24 * (unint64_t)HIDWORD(a1);
  unint64_t v33 = HIDWORD(*v24) * (unint64_t)a1
      + v32
      + ((*v24 * (unint64_t)a1) >> 32);
  unint64_t v34 = (*v24 * a1) | ((unint64_t)v33 << 32);
  unsigned long long v35 = __PAIR128__(v27, v30)
      + __PAIR128__(v29, HIDWORD(v32) + HIDWORD(*v24) * (unint64_t)HIDWORD(a1) + HIDWORD(v33));
  unint64_t v36 = HIDWORD(v8);
  unint64_t v37 = v23 * (unint64_t)v36;
  unint64_t v38 = v23 * (unint64_t)a2;
  unint64_t v39 = v25 * (unint64_t)a2;
  unint64_t v40 = HIDWORD(v37) + v25 * (unint64_t)v36;
  unint64_t v41 = v39 + v37 + HIDWORD(v38);
  unint64_t v42 = HIDWORD(v41);
  unint64_t v43 = v38 | ((unint64_t)v41 << 32);
  unint64_t v44 = *v24 * (unint64_t)v36;
  unint64_t v45 = HIDWORD(v44) + v31 * (unint64_t)v36;
  unint64_t v46 = v31 * (unint64_t)a2
      + v44
      + ((*v24 * (unint64_t)a2) >> 32);
  unint64_t v47 = (*v24 * a2) | ((unint64_t)v46 << 32);
  unsigned long long v48 = __PAIR128__(v40, v43) + __PAIR128__(v42, v45 + HIDWORD(v46));
  unint64_t v49 = v35 + v47;
  BOOL v50 = __CFADD__(__CFADD__((void)v35, v47), (void)v48);
  uint64_t v51 = __CFADD__((void)v35, v47) + (void)v48;
  LODWORD(v52) = v50;
  BOOL v50 = __CFADD__(*((void *)&v35 + 1), v51);
  uint64_t v53 = *((void *)&v35 + 1) + v51;
  if (v50) {
    uint64_t v52 = 1;
  }
  else {
    uint64_t v52 = v52;
  }
  uint64_t v54 = (*((void *)&v48 + 1) + v52) | v53;
  if (v49 != v11 || v54 || (uint64_t v6 = 0, v34 != a3))
  {
    BOOL v55 = v49 == v11;
    BOOL v56 = v49 > v11;
    if (v54) {
      BOOL v56 = 1;
    }
    if (v34 <= a3) {
      BOOL v55 = 0;
    }
LABEL_114:
    int v19 = v56 || v55;
    BOOL v20 = a4 < 0;
LABEL_56:
    int v21 = !v20;
    return v21 ^ v19;
  }
  return v6;
}

uint64_t __bid128_quiet_less_equal(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  if ((~a2 & 0x7C00000000000000) != 0 && (a4 & 0x7C00000000000000) != 0x7C00000000000000)
  {
    if (a1 == a3 && a2 == a4) {
      return 1;
    }
    if ((~a2 & 0x7800000000000000) == 0)
    {
      BOOL v7 = (~a4 & 0x7800000000000000) == 0 && a4 >= 0;
      return (a2 & 0x8000000000000000) != 0 || v7;
    }
    if ((~a4 & 0x7800000000000000) == 0) {
      goto LABEL_21;
    }
    unint64_t v9 = a2 & 0x1FFFFFFFFFFFFLL;
    BOOL v10 = (~a2 & 0x6000000000000000) == 0;
    BOOL v11 = a1 > 0x378D8E63FFFFFFFFLL && v9 == 0x1ED09BEAD87C0;
    if (v11) {
      BOOL v10 = 1;
    }
    if (v9 > 0x1ED09BEAD87C0) {
      BOOL v10 = 1;
    }
    unint64_t v12 = a4 & 0x1FFFFFFFFFFFFLL;
    if ((a4 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0)
    {
      if (v9 | a1) {
        char v13 = v10;
      }
      else {
        char v13 = 1;
      }
      if (v13) {
        return 1;
      }
      return a2 >> 63;
    }
    if (v9 | a1) {
      char v14 = v10;
    }
    else {
      char v14 = 1;
    }
    BOOL v15 = a3 >= 0x378D8E6400000000 && v12 == 0x1ED09BEAD87C0;
    if (v15 || (a4 & 0x6000000000000000) == 0x6000000000000000 || !(v12 | a3))
    {
      if ((v14 & 1) == 0) {
        return a2 >> 63;
      }
      return 1;
    }
    if ((v14 & 1) != 0 || ((a4 ^ a2) & 0x8000000000000000) != 0)
    {
LABEL_21:
      unint64_t v8 = (unint64_t)a4 >> 63;
      return v8 ^ 1;
    }
    uint64_t v16 = (a2 >> 49) & 0x3FFF;
    uint64_t v17 = ((unint64_t)a4 >> 49) & 0x3FFF;
    int v18 = v17 - v16;
    if (v17 == v16)
    {
      BOOL v19 = v9 == v12;
      if (a1 < a3) {
        BOOL v19 = 0;
      }
      int v20 = v9 > v12 || v19;
      BOOL v21 = (a2 & 0x8000000000000000) != 0;
LABEL_57:
      int v22 = !v21;
      return v22 ^ v20;
    }
    if ((v9 > v12 || v9 == v12 && a1 > a3) && v16 >= v17) {
      return a2 >> 63;
    }
    if (v9 >= v12 && (v9 != v12 || a1 >= a3) || v16 > v17)
    {
      int v23 = v16 - v17;
      if (v23 >= 1)
      {
        if (v23 < 0x22)
        {
          if (v23 < 0x14)
          {
            unint64_t v100 = __bid_ten2k64[v23];
            unint64_t v101 = HIDWORD(v100);
            unint64_t v102 = HIDWORD(v9);
            unint64_t v103 = HIDWORD(v100) * (unint64_t)a2;
            unint64_t v104 = HIDWORD(v103) + HIDWORD(v100) * (unint64_t)v102;
            unint64_t v105 = v100 * (unint64_t)v102
                 + v103
                 + ((v100 * (unint64_t)a2) >> 32);
            unint64_t v106 = HIDWORD(v105);
            unint64_t v107 = (v100 * a2) | ((unint64_t)v105 << 32);
            unint64_t v108 = HIDWORD(v100) * (unint64_t)a1;
            unint64_t v109 = v100 * (unint64_t)a1;
            unint64_t v110 = v100 * (unint64_t)HIDWORD(a1) + v108 + HIDWORD(v109);
            unint64_t v111 = v109 | ((unint64_t)v110 << 32);
            unsigned long long v112 = __PAIR128__(v104, v107)
                 + __PAIR128__(v106, HIDWORD(v108) + v101 * (unint64_t)HIDWORD(a1) + HIDWORD(v110));
            if (__PAIR128__(v104, v107)
               + __PAIR128__(v106, HIDWORD(v108) + v101 * (unint64_t)HIDWORD(a1) + HIDWORD(v110)) == v12
              && v111 == a3)
            {
              return 1;
            }
            BOOL v59 = (unint64_t)v112 > v12;
            BOOL v113 = (void)v112 == v12;
            int v114 = v59;
            if (*((void *)&v112 + 1)) {
              int v115 = 1;
            }
            else {
              int v115 = v114;
            }
            BOOL v116 = v111 > a3 && v113;
            int v20 = v115 | v116;
          }
          else
          {
            unint64_t v24 = &__bid_ten2k128[2 * (v23 - 20)];
            unint64_t v26 = *v24;
            unint64_t v25 = v24[1];
            unint64_t v27 = HIDWORD(v25);
            unint64_t v28 = v25 * (unint64_t)HIDWORD(a1);
            unint64_t v29 = HIDWORD(v28) + HIDWORD(v25) * (unint64_t)HIDWORD(a1);
            unint64_t v30 = HIDWORD(v25) * (unint64_t)a1
                + v28
                + ((v25 * (unint64_t)a1) >> 32);
            unint64_t v31 = HIDWORD(v30);
            unint64_t v32 = (v25 * a1) | ((unint64_t)v30 << 32);
            unint64_t v33 = HIDWORD(v26);
            unint64_t v34 = v26 * (unint64_t)HIDWORD(a1);
            unint64_t v35 = HIDWORD(v26) * (unint64_t)a1
                + v34
                + ((v26 * (unint64_t)a1) >> 32);
            unint64_t v36 = (v26 * a1) | ((unint64_t)v35 << 32);
            unsigned long long v37 = __PAIR128__(v29, v32)
                + __PAIR128__(v31, HIDWORD(v34) + HIDWORD(v26) * (unint64_t)HIDWORD(a1) + HIDWORD(v35));
            unint64_t v38 = HIDWORD(v9);
            unint64_t v39 = v25 * (unint64_t)v38;
            unint64_t v40 = v25 * (unint64_t)a2;
            unint64_t v41 = v27 * (unint64_t)a2;
            unint64_t v42 = HIDWORD(v39) + v27 * (unint64_t)v38;
            unint64_t v43 = v41 + v39 + HIDWORD(v40);
            unint64_t v44 = HIDWORD(v43);
            unint64_t v45 = v40 | ((unint64_t)v43 << 32);
            unint64_t v46 = v26 * (unint64_t)v38;
            unint64_t v47 = v26 * (unint64_t)a2;
            unint64_t v48 = HIDWORD(v46) + v33 * (unint64_t)v38;
            unint64_t v49 = v33 * (unint64_t)a2 + v46 + HIDWORD(v47);
            unint64_t v50 = v47 | ((unint64_t)v49 << 32);
            unsigned long long v51 = __PAIR128__(v42, v45) + __PAIR128__(v44, v48 + HIDWORD(v49));
            unint64_t v52 = v37 + v50;
            uint64_t v53 = __CFADD__((void)v37, v50) + (void)v51;
            BOOL v54 = __CFADD__(__CFADD__((void)v37, v50), (void)v51);
            BOOL v55 = __CFADD__(*((void *)&v37 + 1), v53);
            uint64_t v56 = *((void *)&v37 + 1) + v53;
            uint64_t v57 = v55 || v54;
            uint64_t v58 = (*((void *)&v51 + 1) + v57) | v56;
            if (v52 == v12 && !v58 && v36 == a3) {
              return 1;
            }
            BOOL v59 = v52 > v12;
            BOOL v60 = v52 == v12;
            int v61 = v59;
            if (v58) {
              int v61 = 1;
            }
            if (v36 <= a3) {
              BOOL v60 = 0;
            }
            int v20 = v61 | v60;
          }
          BOOL v21 = a4 < 0;
          goto LABEL_57;
        }
        return a2 >> 63;
      }
      if (v18 < 34)
      {
        if (v18 < 20)
        {
          unint64_t v117 = __bid_ten2k64[v18];
          unint64_t v118 = HIDWORD(v117);
          unint64_t v119 = HIDWORD(v12);
          unint64_t v120 = HIDWORD(v117) * (unint64_t)a4;
          unint64_t v121 = HIDWORD(v120) + HIDWORD(v117) * (unint64_t)v119;
          unint64_t v122 = v117 * (unint64_t)v119
               + v120
               + ((v117 * (unint64_t)a4) >> 32);
          unint64_t v123 = HIDWORD(v122);
          unint64_t v124 = (v117 * a4) | ((unint64_t)v122 << 32);
          unint64_t v125 = HIDWORD(v117) * (unint64_t)a3;
          unint64_t v126 = v117 * (unint64_t)a3;
          unint64_t v127 = v117 * (unint64_t)HIDWORD(a3) + v125 + HIDWORD(v126);
          unint64_t v128 = v126 | ((unint64_t)v127 << 32);
          unsigned long long v129 = __PAIR128__(v121, v124)
               + __PAIR128__(v123, HIDWORD(v125) + v118 * (unint64_t)HIDWORD(a3) + HIDWORD(v127));
          if (v124 + HIDWORD(v125) + v118 * (unint64_t)HIDWORD(a3) + HIDWORD(v127) == v9
            && v128 == a1
            && !*((void *)&v129 + 1))
          {
            return 1;
          }
          BOOL v130 = v128 > a1;
          BOOL v11 = (void)v129 == v9;
          BOOL v131 = (unint64_t)v129 > v9;
          if (!v11) {
            BOOL v130 = 0;
          }
          if (*((void *)&v129 + 1)) {
            BOOL v131 = 1;
          }
          int v98 = v130 || v131;
          unint64_t v99 = (unint64_t)a4 >> 63;
        }
        else
        {
          unint64_t v62 = &__bid_ten2k128[2 * (v18 - 20)];
          unint64_t v64 = *v62;
          unint64_t v63 = v62[1];
          unint64_t v65 = HIDWORD(v63);
          unint64_t v66 = v63 * (unint64_t)HIDWORD(a3);
          unint64_t v67 = HIDWORD(v66) + HIDWORD(v63) * (unint64_t)HIDWORD(a3);
          unint64_t v68 = HIDWORD(v63) * (unint64_t)a3
              + v66
              + ((v63 * (unint64_t)a3) >> 32);
          unint64_t v69 = HIDWORD(v68);
          unint64_t v70 = (v63 * a3) | ((unint64_t)v68 << 32);
          unint64_t v71 = HIDWORD(v64);
          unint64_t v72 = v64 * (unint64_t)HIDWORD(a3);
          unint64_t v73 = HIDWORD(v64) * (unint64_t)a3
              + v72
              + ((v64 * (unint64_t)a3) >> 32);
          unint64_t v74 = (v64 * a3) | ((unint64_t)v73 << 32);
          unsigned long long v75 = __PAIR128__(v67, v70)
              + __PAIR128__(v69, HIDWORD(v72) + HIDWORD(v64) * (unint64_t)HIDWORD(a3) + HIDWORD(v73));
          unint64_t v76 = HIDWORD(v12);
          unint64_t v77 = v63 * (unint64_t)v76;
          unint64_t v78 = v63 * (unint64_t)a4;
          unint64_t v79 = v65 * (unint64_t)a4;
          unint64_t v80 = HIDWORD(v77) + v65 * (unint64_t)v76;
          unint64_t v81 = v79 + v77 + HIDWORD(v78);
          unint64_t v82 = HIDWORD(v81);
          unint64_t v83 = v78 | ((unint64_t)v81 << 32);
          unint64_t v84 = v64 * (unint64_t)v76;
          unint64_t v85 = v64 * (unint64_t)a4;
          unint64_t v86 = HIDWORD(v84) + v71 * (unint64_t)v76;
          unint64_t v87 = v71 * (unint64_t)a4 + v84 + HIDWORD(v85);
          unint64_t v88 = v85 | ((unint64_t)v87 << 32);
          unsigned long long v89 = __PAIR128__(v80, v83) + __PAIR128__(v82, v86 + HIDWORD(v87));
          unint64_t v90 = v75 + v88;
          uint64_t v91 = __CFADD__((void)v75, v88) + (void)v89;
          LODWORD(v92) = __CFADD__(__CFADD__((void)v75, v88), (void)v89);
          BOOL v55 = __CFADD__(*((void *)&v75 + 1), v91);
          uint64_t v93 = *((void *)&v75 + 1) + v91;
          if (v55) {
            uint64_t v92 = 1;
          }
          else {
            uint64_t v92 = v92;
          }
          uint64_t v94 = (*((void *)&v89 + 1) + v92) | v93;
          if (v90 == v9 && !v94 && v74 == a1) {
            return 1;
          }
          BOOL v95 = v74 > a1;
          BOOL v11 = v90 == v9;
          BOOL v96 = v90 > v9;
          BOOL v97 = v11 && v95;
          if (v94) {
            BOOL v96 = 1;
          }
          int v98 = v96 || v97;
          unint64_t v99 = a2 >> 63;
        }
        return v98 ^ v99;
      }
    }
    unint64_t v8 = a2 >> 63;
    return v8 ^ 1;
  }
  if ((~a2 & 0x7E00000000000000) != 0 && (a4 & 0x7E00000000000000) != 0x7E00000000000000) {
    return 0;
  }
  uint64_t result = 0;
  *a5 |= 1u;
  return result;
}

unint64_t __bid128_cos(unint64_t result, int64_t a2, int a3)
{
  __n128 v122 = 0uLL;
  if ((~a2 & 0x6000000000000000) != 0)
  {
    int v4 = (((unint64_t)a2 >> 49) & 0x3FFF) - 6176;
    unint64_t v5 = a2 & 0x1FFFFFFFFFFFFLL;
    if ((a2 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0 || result >= 0x378D8E6400000000 && v5 == 0x1ED09BEAD87C0)
    {
      unint64_t v5 = 0;
      unint64_t v6 = 0;
    }
    else
    {
      unint64_t v6 = result;
    }
  }
  else
  {
    if ((~a2 & 0x7800000000000000) == 0)
    {
      if ((~a2 & 0x7C00000000000000) != 0)
      {
        uint64_t result = 0;
        my_fpsf |= 1u;
      }
      else
      {
        if ((~a2 & 0x7E00000000000000) == 0) {
          my_fpsf |= 1u;
        }
        if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
          || result >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
        {
          return 0;
        }
      }
      return result;
    }
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    int v4 = 0;
  }
  if (v6 | v5) {
    int v7 = v4;
  }
  else {
    int v7 = -53;
  }
  if (v7 > -36)
  {
    unint64_t v8 = (uint64_t *)((char *)&bid_decimal128_moduli_1191 + 48 * (v7 + 35));
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    unint64_t v12 = v8[2];
    unint64_t v11 = v8[3];
    unint64_t v13 = v8[4];
    uint64_t v120 = v8[5];
    unint64_t v14 = HIDWORD(*v8);
    unint64_t v15 = ((v9 * (unint64_t)HIDWORD(v6)) >> 32)
        + HIDWORD(v9) * (unint64_t)HIDWORD(v6)
        + ((HIDWORD(v9) * (unint64_t)v6
          + (v9 * HIDWORD(v6))
          + ((v9 * (unint64_t)v6) >> 32)) >> 32);
    unint64_t v16 = HIDWORD(v10);
    unint64_t v17 = v10 * (unint64_t)HIDWORD(v6);
    unint64_t v18 = HIDWORD(v17) + HIDWORD(v10) * (unint64_t)HIDWORD(v6);
    unint64_t v19 = HIDWORD(v10) * (unint64_t)v6
        + v17
        + ((v10 * (unint64_t)v6) >> 32);
    unint64_t v20 = v18 + HIDWORD(v19);
    unint64_t v21 = (v10 * v6) | ((unint64_t)v19 << 32);
    unint64_t v22 = HIDWORD(v12);
    unint64_t v23 = v12 * (unint64_t)HIDWORD(v6);
    unint64_t v24 = HIDWORD(v23) + HIDWORD(v12) * (unint64_t)HIDWORD(v6);
    unint64_t v25 = HIDWORD(v12) * (unint64_t)v6
        + v23
        + ((v12 * (unint64_t)v6) >> 32);
    unint64_t v26 = v24 + HIDWORD(v25);
    unint64_t v27 = (v12 * v6) | ((unint64_t)v25 << 32);
    unint64_t v28 = HIDWORD(v11);
    unint64_t v29 = v11 * (unint64_t)HIDWORD(v6);
    int v121 = a3;
    unint64_t v30 = HIDWORD(v29) + HIDWORD(v11) * (unint64_t)HIDWORD(v6);
    unint64_t v31 = HIDWORD(v11) * (unint64_t)v6
        + v29
        + ((v11 * (unint64_t)v6) >> 32);
    unint64_t v32 = v30 + HIDWORD(v31);
    unint64_t v33 = (v11 * v6) | ((unint64_t)v31 << 32);
    unint64_t v34 = HIDWORD(v13);
    unint64_t v35 = v13 * (unint64_t)HIDWORD(v6);
    unint64_t v36 = HIDWORD(v13) * (unint64_t)v6
        + v35
        + ((v13 * (unint64_t)v6) >> 32);
    unint64_t v37 = (v13 * v6) | ((unint64_t)v36 << 32);
    unsigned long long v38 = __PAIR128__(v27, v15) + v21;
    BOOL v39 = __CFADD__(__CFADD__(v15, v21), v27);
    BOOL v40 = __CFADD__(v20, *((void *)&v38 + 1));
    unint64_t v41 = v20 + *((void *)&v38 + 1);
    uint64_t v42 = v40 || v39;
    BOOL v40 = __CFADD__(v33, v42);
    unint64_t v43 = v33 + v42;
    unsigned int v44 = v40;
    unint64_t v45 = v26 + v43;
    if (__CFADD__(v26, v43)) {
      uint64_t v46 = 1;
    }
    else {
      uint64_t v46 = v44;
    }
    BOOL v40 = __CFADD__(v37, v46);
    unint64_t v47 = v37 + v46;
    unsigned int v48 = v40;
    unint64_t v49 = v32 + v47;
    if (__CFADD__(v32, v47)) {
      uint64_t v50 = 1;
    }
    else {
      uint64_t v50 = v48;
    }
    unint64_t v51 = HIDWORD(v5);
    unint64_t v52 = *v8 * (unint64_t)HIDWORD(v5);
    unint64_t v53 = v9 * (unint64_t)v5;
    unint64_t v54 = HIDWORD(v52) + v14 * (unint64_t)HIDWORD(v5);
    unint64_t v55 = v14 * (unint64_t)v5 + v52 + HIDWORD(v53);
    unint64_t v56 = v54 + HIDWORD(v55);
    unint64_t v57 = v53 | ((unint64_t)v55 << 32);
    unint64_t v58 = v10 * (unint64_t)HIDWORD(v5);
    unint64_t v59 = v10 * (unint64_t)v5;
    unint64_t v60 = v16 * (unint64_t)v5;
    unint64_t v61 = HIDWORD(v58) + v16 * (unint64_t)HIDWORD(v5);
    unint64_t v62 = v60 + v58 + HIDWORD(v59);
    unint64_t v63 = v61 + HIDWORD(v62);
    unint64_t v64 = v59 | ((unint64_t)v62 << 32);
    unint64_t v65 = v12 * (unint64_t)HIDWORD(v5);
    unint64_t v66 = v12 * (unint64_t)v5;
    unint64_t v67 = HIDWORD(v65) + v22 * (unint64_t)HIDWORD(v5);
    unint64_t v68 = v22 * (unint64_t)v5 + v65 + HIDWORD(v66);
    unint64_t v69 = v67 + HIDWORD(v68);
    unint64_t v70 = v66 | ((unint64_t)v68 << 32);
    unint64_t v71 = v11 * (unint64_t)HIDWORD(v5);
    unint64_t v72 = v11 * (unint64_t)v5;
    unint64_t v73 = v28 * (unint64_t)v5 + v71 + HIDWORD(v72);
    unint64_t v74 = v72 | ((unint64_t)v73 << 32);
    unint64_t v75 = v13 * v5;
    unsigned long long v76 = __PAIR128__(v70, v56) + v64;
    LODWORD(v77) = __CFADD__(__CFADD__(v56, v64), v70);
    unint64_t v78 = v63 + *((void *)&v76 + 1);
    if (__CFADD__(v63, *((void *)&v76 + 1))) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v77;
    }
    BOOL v40 = __CFADD__(v74, v77);
    unint64_t v79 = v74 + v77;
    LODWORD(v80) = v40;
    BOOL v40 = __CFADD__(v69, v79);
    unint64_t v81 = v69 + v79;
    if (v40) {
      uint64_t v80 = 1;
    }
    else {
      uint64_t v80 = v80;
    }
    uint64_t v82 = __CFADD__(v57, (void)v38) + (void)v76;
    LODWORD(v83) = __CFADD__(__CFADD__(v57, (void)v38), (void)v76);
    BOOL v40 = __CFADD__(v41, v82);
    uint64_t v84 = v41 + v82;
    if (v40) {
      uint64_t v83 = 1;
    }
    else {
      uint64_t v83 = v83;
    }
    BOOL v40 = __CFADD__(v78, v83);
    unint64_t v85 = v78 + v83;
    LODWORD(v86) = v40;
    BOOL v40 = __CFADD__(v85, v45);
    unint64_t v87 = v85 + v45;
    if (v40) {
      uint64_t v86 = 1;
    }
    else {
      uint64_t v86 = v86;
    }
    BOOL v40 = __CFADD__(v81, v86);
    unint64_t v88 = v81 + v86;
    LODWORD(v89) = v40;
    BOOL v40 = __CFADD__(v88, v49);
    unint64_t v90 = v88 + v49;
    if (v40) {
      uint64_t v89 = 1;
    }
    else {
      uint64_t v89 = v89;
    }
    unint64_t v91 = v75
        + v28 * (unint64_t)v51
        + HIDWORD(v71)
        + v34 * (unint64_t)HIDWORD(v6)
        + v120 * v6
        + HIDWORD(v35)
        + HIDWORD(v73)
        + HIDWORD(v36)
        + v80
        + v50
        + v89;
    unint64_t v92 = v91 >> 62;
    *((void *)&v94 + 1) = v91;
    *(void *)&long long v94 = v90;
    uint64_t v93 = v94 >> 62;
    *((void *)&v94 + 1) = v90;
    *(void *)&long long v94 = v87;
    unint64_t v95 = v94 >> 62;
    *((void *)&v94 + 1) = v87;
    *(void *)&long long v94 = v84;
    unint64_t v96 = v94 >> 62;
    uint64_t v97 = 4 * v84;
    int v98 = ((v91 >> 62) + 1) & 3;
    if (v93 >= 0)
    {
      unint64_t v99 = (unint64_t)a2 >> 63;
    }
    else
    {
      LODWORD(v92) = v98;
      unint64_t v99 = a2 >= 0;
    }
    if (v93 >= 0) {
      unint64_t v100 = v93;
    }
    else {
      unint64_t v100 = ~v93;
    }
    if (v93 >= 0)
    {
      unint64_t v101 = v97;
    }
    else
    {
      unint64_t v95 = ~v95;
      unint64_t v96 = ~v96;
      unint64_t v101 = ~v97;
    }
    if (a2 >= 0) {
      int v102 = v92;
    }
    else {
      int v102 = -(int)v92 & 3;
    }
    if (v100) {
      int v103 = 16382;
    }
    else {
      int v103 = 16318;
    }
    if (v100) {
      unint64_t v104 = v100;
    }
    else {
      unint64_t v104 = v95;
    }
    if (v100) {
      unint64_t v101 = v96;
    }
    else {
      unint64_t v95 = v96;
    }
    int8x16_t v105 = (int8x16_t)vdupq_n_s64(v104);
    int8x16_t v106 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v105, (int8x16_t)xmmword_1BDDB5720), (uint64x2_t)vandq_s8(v105, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v105, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v105, (int8x16_t)xmmword_1BDDB5750))));
    *(int8x8_t *)v106.i8 = vorr_s8(*(int8x8_t *)v106.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
    __int32 v107 = v106.i32[0] | v106.i32[1] | (2 * ((v104 & 0xCCCCCCCCCCCCCCCCLL) <= (v104 & 0x3333333333333333))) | ((v104 & 0xAAAAAAAAAAAAAAAALL) <= (v104 & 0x5555555555555555));
    unint64_t v108 = (v101 >> -(char)v107) + (v95 << v107);
    if (v107) {
      unint64_t v104 = (v95 >> -(char)v107) + (v104 << v107);
    }
    else {
      unint64_t v108 = v95;
    }
    *((void *)&v109 + 1) = v104;
    *(void *)&long long v109 = v108;
    v123.n128_u64[0] = v109 >> 15;
    v123.n128_u64[1] = ((unint64_t)(v103 - v107) << 48) | (v99 << 63) | (v104 >> 15) & 0xFFFFFFFFFFFFLL;
    bid_f128_mul(&v123, (uint64_t *)&c_pi_ov_2, (uint64_t *)&v123);
    switch(v102)
    {
      case 0:
        unint64_t v110 = qword_1BDDBCFF8;
        uint64_t v111 = 2;
        uint64_t v112 = 2;
        goto LABEL_102;
      case 1:
        unint64_t v117 = &__dpml_bid_trig_x_table;
        uint64_t v118 = 0;
        uint64_t v119 = 1;
        goto LABEL_100;
      case 2:
        unint64_t v117 = qword_1BDDBCFF8;
        uint64_t v118 = 2;
        uint64_t v119 = 2;
LABEL_100:
        __dpml_bid_C_ux_trig__((uint64_t *)&v123, v118, v119, v117, &v122, v125);
        memset(v124, 0, sizeof(v124));
        __dpml_bid_unpack_x_or_y__((uint64_t *)&v122, 0, (uint64_t)v124, &__dpml_bid_bid_x_table, (uint64_t)&v122, v125);
        break;
      case 3:
        unint64_t v110 = &__dpml_bid_trig_x_table;
        uint64_t v111 = 0;
        uint64_t v112 = 1;
LABEL_102:
        __dpml_bid_C_ux_trig__((uint64_t *)&v123, v111, v112, v110, &v122, v125);
        break;
      default:
        break;
    }
    unint64_t v115 = v122.n128_u64[1];
    unint64_t v114 = v122.n128_u64[0];
    int v116 = v121;
  }
  else
  {
    if (v7 <= 0xFFFFFFCB) {
      return __bid128_add(1uLL, 0x3040000000000000, 1uLL, 0x2FF0000000000000, a3, &my_fpsf);
    }
    v123.n128_u64[0] = __bid128_to_binary128(result, a2, a3, &my_fpsf);
    v123.n128_u64[1] = v113;
    __dpml_bid_C_ux_trig__((uint64_t *)&v123, 2, 2, qword_1BDDBCFF8, &v122, v125);
    unint64_t v115 = v122.n128_u64[1];
    unint64_t v114 = v122.n128_u64[0];
    int v116 = a3;
  }
  return __binary128_to_bid128(v114, v115, v116, &my_fpsf);
}

uint64_t __bid128_div(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, int *a6)
{
  int v390 = a5;
  uint64_t v7 = a4 & 0x7800000000000000;
  if (((a4 >> 61) & 3) == 3)
  {
    if (v7 == 0x7800000000000000)
    {
      unint64_t v8 = 0xFE00000000000000;
      if ((a4 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93)
      {
        BOOL v13 = (a4 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a3 >= 0x38C15B0A00000000;
        if (!v13)
        {
          unint64_t v8 = 0xFE003FFFFFFFFFFFLL;
          unint64_t v9 = a3;
        }
        else
        {
          unint64_t v9 = 0;
        }
      }
      else
      {
        unint64_t v9 = 0;
      }
      LODWORD(v11) = 0;
      unint64_t v12 = 0;
      if ((a4 & 0x7C00000000000000) == 0x7800000000000000) {
        a3 = 0;
      }
      else {
        a3 = v9;
      }
      if ((a4 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v8 = 0xF800000000000000;
      }
      unint64_t v10 = v8 & a4;
    }
    else
    {
      a3 = 0;
      unint64_t v10 = 0;
      unint64_t v12 = 0;
      uint64_t v11 = (a4 >> 47) & 0x3FFF;
    }
  }
  else
  {
    unint64_t v10 = a4 & 0x1FFFFFFFFFFFFLL;
    if ((a4 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0
      || (a4 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a3 >= 0x378D8E6400000000)
    {
      a3 = 0;
      unint64_t v10 = 0;
    }
    uint64_t v11 = (a4 >> 49) & 0x3FFF;
    unint64_t v12 = v10 | a3;
  }
  unint64_t v391 = 0;
  unint64_t v392 = 0;
  if (((a2 >> 61) & 3) == 3)
  {
    if ((a2 & 0x7800000000000000) == 0x7800000000000000)
    {
      unint64_t v15 = 0xFE00000000000000;
      if ((a2 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93)
      {
        if ((a2 & 0x3FFFFFFFFFFFLL) != 0x314DC6448D93 || a1 < 0x38C15B0A00000000)
        {
          unint64_t v15 = 0xFE003FFFFFFFFFFFLL;
          unint64_t v16 = a1;
        }
        else
        {
          unint64_t v16 = 0;
        }
      }
      else
      {
        unint64_t v16 = 0;
      }
      if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v15 = 0xF800000000000000;
      }
      unint64_t v17 = v15 & a2;
      if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
        a1 = 0;
      }
      else {
        a1 = v16;
      }
      if ((a2 & 0x7C00000000000000) == 0x7C00000000000000) {
        goto LABEL_71;
      }
      if ((a4 & 0x7C00000000000000) != 0x7C00000000000000)
      {
        if ((a4 & 0x7C00000000000000) == 0x7800000000000000)
        {
LABEL_77:
          *a6 |= 1u;
          unint64_t v36 = 0x7C00000000000000;
LABEL_203:
          unint64_t v392 = v36;
          return v391;
        }
LABEL_202:
        unint64_t v36 = (a4 ^ a2) & 0x8000000000000000 | 0x7800000000000000;
        goto LABEL_203;
      }
      LODWORD(v1_Block_object_dispose(&STACK[0x940], 8) = 0;
      goto LABEL_38;
    }
    unint64_t v17 = 0;
    a1 = 0;
    uint64_t v18 = (a2 >> 47) & 0x3FFF;
  }
  else
  {
    unint64_t v17 = a2 & 0x1FFFFFFFFFFFFLL;
    if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0
      || (a2 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a1 >= 0x378D8E6400000000)
    {
      a1 = 0;
      unint64_t v17 = 0;
    }
    uint64_t v18 = (a2 >> 49) & 0x3FFF;
    if (v17 | a1) {
      goto LABEL_39;
    }
  }
  if ((~a2 & 0x7C00000000000000) == 0)
  {
LABEL_71:
    if ((~a2 & 0x7E00000000000000) == 0 || (a4 & 0x7E00000000000000) == 0x7E00000000000000) {
      *a6 |= 1u;
    }
    unint64_t v391 = a1;
    unint64_t v392 = v17 & 0xFDFFFFFFFFFFFFFFLL;
    return v391;
  }
LABEL_38:
  if (v7 != 0x7800000000000000)
  {
    if (v10 & 0x1FFFFFFFFFFFFLL | a3)
    {
      int v33 = v18 - v11;
      unsigned int v34 = v33 + 6176;
      if (v33 < -6176) {
        unsigned int v34 = 0;
      }
      if (v33 <= 6111) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 12287;
      }
      unint64_t v36 = (a4 ^ a2) & 0x8000000000000000 | (v35 << 49);
      goto LABEL_203;
    }
    goto LABEL_77;
  }
LABEL_39:
  unint64_t v19 = a4 & 0x8000000000000000;
  unint64_t v20 = a2 & 0x8000000000000000;
  if (v12)
  {
    int v21 = v18 - v11 + 6176;
    if (v10 > v17 || v10 == v17 && a3 > a1)
    {
      uint64_t v22 = (COERCE_INT((float)a3 + (float)((float)v10 * 1.8447e19))
                         - COERCE_INT((float)a1 + (float)((float)v17 * 1.8447e19))) >> 23;
      unint64_t v23 = (uint64_t *)((char *)&__bid_power10_index_binexp_128 + 16 * v22);
      uint64_t v24 = *v23;
      unint64_t v25 = HIDWORD(*v23);
      if (v17)
      {
        unint64_t v26 = v24 * v17;
        unsigned int v27 = v24;
        unint64_t v28 = v25 * (unint64_t)a1;
        unint64_t v29 = v24 * (unint64_t)a1;
        unint64_t v30 = v27 * (unint64_t)HIDWORD(a1) + v28 + HIDWORD(v29);
        unint64_t v31 = v29 | ((unint64_t)v30 << 32);
        unint64_t v32 = v26 + v25 * (unint64_t)HIDWORD(a1) + HIDWORD(v28);
      }
      else
      {
        unint64_t v39 = v24 * (unint64_t)HIDWORD(a1);
        unint64_t v40 = v24 * (unint64_t)a1;
        unint64_t v30 = v25 * (unint64_t)a1 + v39 + HIDWORD(v40);
        unint64_t v31 = v40 | ((unint64_t)v30 << 32);
        unint64_t v32 = v23[1] * a1 + v25 * (unint64_t)HIDWORD(a1) + HIDWORD(v39);
      }
      unint64_t v41 = v32 + HIDWORD(v30);
      if (v10 > v41 || (v10 == v41 ? (BOOL v42 = a3 > v31) : (BOOL v42 = 0), v42)) {
        unsigned int v43 = 34;
      }
      else {
        unsigned int v43 = 33;
      }
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      uint64_t v46 = (unint64_t *)((char *)&__bid_power10_table_128 + 16 * v43);
      unint64_t v47 = *v46;
      unint64_t v48 = v46[1];
      unint64_t v49 = HIDWORD(v48);
      unint64_t v50 = v48 * (unint64_t)HIDWORD(v31);
      unint64_t v51 = HIDWORD(v50) + HIDWORD(v48) * (unint64_t)HIDWORD(v31);
      unint64_t v52 = HIDWORD(v47);
      unint64_t v53 = v47 * (unint64_t)HIDWORD(v31);
      unint64_t v54 = HIDWORD(v53) + HIDWORD(v47) * (unint64_t)HIDWORD(v31);
      unint64_t v55 = HIDWORD(v47) * (unint64_t)v31 + v53;
      unint64_t v56 = HIDWORD(v48) * (unint64_t)v31
          + v50
          + ((v48 * (unint64_t)v31) >> 32);
      unint64_t v57 = (v48 * v31) | ((unint64_t)v56 << 32);
      unint64_t v58 = v47 * (unint64_t)v31;
      unint64_t v59 = v55 + HIDWORD(v58);
      unint64_t v60 = v58 | ((unint64_t)v59 << 32);
      unsigned long long v61 = __PAIR128__(v51, v57) + __PAIR128__(HIDWORD(v56), v54 + HIDWORD(v59));
      unint64_t v62 = HIDWORD(v41);
      LODWORD(v51) = v41;
      unint64_t v63 = v48 * (unint64_t)HIDWORD(v41);
      unint64_t v64 = v48 * (unint64_t)v41;
      unint64_t v65 = HIDWORD(v63) + v49 * (unint64_t)HIDWORD(v41);
      unint64_t v66 = v49 * (unint64_t)v41 + v63 + HIDWORD(v64);
      unint64_t v67 = HIDWORD(v66);
      unint64_t v68 = v64 | ((unint64_t)v66 << 32);
      unint64_t v69 = v47 * (unint64_t)HIDWORD(v41);
      unint64_t v70 = v47 * (unint64_t)v41;
      unint64_t v71 = HIDWORD(v47) * (unint64_t)v51 + v69 + HIDWORD(v70);
      unint64_t v72 = v70 | ((unint64_t)v71 << 32);
      unsigned long long v73 = __PAIR128__(v65, v68)
          + __PAIR128__(v67, HIDWORD(v69) + v52 * (unint64_t)v62 + HIDWORD(v71));
      BOOL v13 = __CFADD__((void)v61, v72);
      unint64_t v74 = v61 + v72;
      BOOL v76 = v13;
      BOOL v13 = __CFADD__(v13, v68 + HIDWORD(v69) + v52 * (unint64_t)v62 + HIDWORD(v71));
      unint64_t v75 = v76 + v68 + HIDWORD(v69) + v52 * (unint64_t)v62 + HIDWORD(v71);
      LODWORD(v77) = v13;
      BOOL v13 = __CFADD__(*((void *)&v61 + 1), v75);
      unint64_t v78 = *((void *)&v61 + 1) + v75;
      if (v13) {
        uint64_t v77 = 1;
      }
      else {
        uint64_t v77 = v77;
      }
      unint64_t v79 = *((void *)&v73 + 1) + v77;
      LODWORD(v22) = __bid_estimate_decimal_digits[v22] + v43;
      goto LABEL_95;
    }
    unint64_t v45 = v17 | v10;
    if (!(v17 | v10))
    {
      uint64_t v226 = 0;
      unint64_t v133 = a1 / a3;
      unint64_t v227 = a1 % a3;
LABEL_328:
      if (!(v226 | v227))
      {
LABEL_343:
        uint64_t v324 = v19 ^ v20;
        int v174 = v21;
        goto LABEL_344;
      }
      unsigned int v337 = (COERCE_INT((float)v133 + (float)((float)v45 * 1.8447e19)) - 1065353216) >> 23;
      int v338 = __bid_estimate_decimal_digits[v337];
      unint64_t v339 = (unint64_t *)((char *)&__bid_power10_index_binexp_128 + 16 * v337);
      unint64_t v340 = v339[1];
      if (v45 > v340 || ((unint64_t v341 = *v339, v45 == v340) ? (v342 = v133 >= v341) : (v342 = 0), v342)) {
        ++v338;
      }
      uint64_t v22 = 34 - v338;
      unint64_t v343 = (uint64_t *)((char *)&__bid_power10_table_128 + 16 * v22);
      uint64_t v344 = *v343;
      uint64_t v345 = v343[1];
      unint64_t v346 = HIDWORD(v227);
      unsigned int v347 = v227;
      unint64_t v348 = v345 * (unint64_t)HIDWORD(v227);
      unint64_t v349 = HIDWORD(v348) + HIDWORD(v345) * (unint64_t)HIDWORD(v227);
      unint64_t v350 = HIDWORD(v345) * (unint64_t)v227
           + v348
           + ((v345 * (unint64_t)v227) >> 32);
      unint64_t v351 = (v345 * v227) | ((unint64_t)v350 << 32);
      unint64_t v352 = v344 * (unint64_t)HIDWORD(v227);
      unint64_t v353 = v344 * (unint64_t)v227;
      unint64_t v354 = HIDWORD(v344) * (unint64_t)v347 + v352 + HIDWORD(v353);
      unint64_t v60 = v353 | ((unint64_t)v354 << 32);
      unint64_t v356 = v351 + HIDWORD(v352) + HIDWORD(v344) * (unint64_t)v346 + HIDWORD(v354);
      uint64_t v355 = (__PAIR128__(v349, v351)
            + __PAIR128__(HIDWORD(v350), HIDWORD(v352) + HIDWORD(v344) * (unint64_t)v346 + HIDWORD(v354))) >> 64;
      unint64_t v357 = HIDWORD(v226);
      LODWORD(v349) = v226;
      unint64_t v358 = v345 * (unint64_t)HIDWORD(v226);
      unint64_t v359 = HIDWORD(v358) + HIDWORD(v345) * (unint64_t)HIDWORD(v226);
      unint64_t v360 = HIDWORD(v345) * (unint64_t)v226
           + v358
           + ((v345 * (unint64_t)v226) >> 32);
      unint64_t v361 = HIDWORD(v360);
      unint64_t v362 = (v345 * v226) | ((unint64_t)v360 << 32);
      unint64_t v363 = v344 * (unint64_t)HIDWORD(v226);
      unint64_t v364 = v344 * (unint64_t)v226;
      unint64_t v365 = HIDWORD(v363) + HIDWORD(v344) * (unint64_t)v357;
      unint64_t v366 = HIDWORD(v344) * (unint64_t)v349 + v363 + HIDWORD(v364);
      unint64_t v367 = v364 | ((unint64_t)v366 << 32);
      unint64_t v369 = v362 + v365 + HIDWORD(v366);
      uint64_t v368 = (__PAIR128__(v359, v362) + __PAIR128__(v361, v365 + HIDWORD(v366))) >> 64;
      BOOL v13 = __CFADD__(v356, v367);
      uint64_t v370 = (__PAIR128__(v369, v356) + v367) >> 64;
      unint64_t v74 = v356 + v367;
      BOOL v371 = __CFADD__(v13, v369);
      BOOL v13 = __CFADD__(v355, v370);
      unint64_t v78 = v355 + v370;
      uint64_t v372 = v13 || v371;
      unint64_t v79 = v368 + v372;
      unint64_t v373 = v344 * (unint64_t)HIDWORD(v133);
      unint64_t v374 = HIDWORD(v344) * (unint64_t)v133
           + v373
           + ((v344 * (unint64_t)v133) >> 32);
      unint64_t v44 = (v344 * v133) | ((unint64_t)v374 << 32);
      unint64_t v45 = v344 * v45 + v345 * v133 + HIDWORD(v344) * (unint64_t)HIDWORD(v133) + HIDWORD(v373) + HIDWORD(v374);
LABEL_95:
      double v80 = (double)a3 + (double)v10 * 1.84467441e19;
      double v81 = ((double)v60 + (double)v74 * 1.84467441e19 + (double)v78 * 3.40282367e38 + (double)v79 * 6.27710174e57)
          / v80;
      if (v79 > v10 >> 28
        || v79 == v10 >> 28
        && ((*((void *)&v83 + 1) = v10, *(void *)&v83 = a3, unint64_t v82 = v83 >> 28, v78 > v82)
         || (v78 == v82 ? (BOOL v84 = v74 >= a3 << 36) : (BOOL v84 = 0), v84)))
      {
        double v85 = v81 * 8.67361738e-19;
        unint64_t v86 = (unint64_t)v85 - 4;
        unsigned int v87 = (unint64_t)v85 - 4;
        unint64_t v88 = v87 * (unint64_t)HIDWORD(v10)
            + (HIDWORD(v86) * v10)
            + ((v86 * (unint64_t)v10) >> 32);
        unint64_t v89 = (v86 * v10) | ((unint64_t)v88 << 32);
        unint64_t v90 = HIDWORD(v86) * (unint64_t)a3;
        unint64_t v91 = v86 * (unint64_t)a3;
        unint64_t v92 = v87 * (unint64_t)HIDWORD(a3) + v90 + HIDWORD(v91);
        unint64_t v93 = HIDWORD(v90) + HIDWORD(v86) * (unint64_t)HIDWORD(a3) + HIDWORD(v92);
        *((void *)&v95 + 1) = (HIDWORD(v88) + __CFADD__(v89, v93) + ((v10 * HIDWORD(v86)) >> 32));
        *(void *)&long long v95 = v89 + v93;
        uint64_t v94 = v95 >> 4;
        *((void *)&v95 + 1) = v95;
        *(void *)&long long v95 = v91 & 0xFFFFFFF0 | (v92 << 32);
        unint64_t v96 = v95 >> 4;
        BOOL v13 = v60 >= v91 << 60;
        v60 -= v91 << 60;
        uint64_t v97 = !v13;
        unint64_t v98 = v74 - v97;
        BOOL v42 = v98 > v74;
        unint64_t v74 = v98 - v96;
        uint64_t v100 = v42 || v98 < v96;
        unint64_t v78 = v78 - v94 - v100;
        double v81 = ((double)v60 + (double)v74 * 1.84467441e19 + (double)v78 * 3.40282367e38) / v80;
        BOOL v13 = __CFADD__(v44, v86 << 60);
        v44 += v86 << 60;
        v45 += v13 + (v86 >> 4);
      }
      if (v78 > v10 >> 13
        || v78 == v10 >> 13
        && ((*((void *)&v102 + 1) = v10, *(void *)&long long v102 = a3, v101 = v102 >> 13, v74 > v101)
         || (v74 == v101 ? (BOOL v103 = v60 > a3 << 51) : (BOOL v103 = 0), v103)))
      {
        double v104 = v81 * 1.77635684e-15;
        unint64_t v105 = (unint64_t)v104 - 1;
        unsigned int v106 = (unint64_t)v104 - 1;
        unint64_t v107 = HIDWORD(v105) * (unint64_t)a3;
        unint64_t v108 = v105 * (unint64_t)a3;
        unint64_t v109 = HIDWORD(v107) + HIDWORD(v105) * (unint64_t)HIDWORD(a3);
        unint64_t v110 = v106 * (unint64_t)HIDWORD(a3) + v107 + HIDWORD(v108);
        unint64_t v111 = v109 + HIDWORD(v110);
        unint64_t v112 = v106 * (unint64_t)HIDWORD(v10)
             + (HIDWORD(v105) * v10)
             + ((v105 * (unint64_t)v10) >> 32);
        unint64_t v113 = (v105 * v10) | ((unint64_t)v112 << 32);
        *((void *)&v115 + 1) = (HIDWORD(v112) + __CFADD__(v111, v113) + ((v10 * HIDWORD(v105)) >> 32));
        *(void *)&long long v115 = v111 + v113;
        uint64_t v114 = v115 >> 15;
        *((void *)&v115 + 1) = v111 + v113;
        *(void *)&long long v115 = v108 & 0xFFFF8000 | (v110 << 32);
        unint64_t v116 = v115 >> 15;
        BOOL v13 = v60 >= v108 << 49;
        v60 -= v108 << 49;
        uint64_t v117 = !v13;
        unint64_t v118 = v74 - v117;
        BOOL v42 = v118 > v74;
        unint64_t v74 = v118 - v116;
        uint64_t v120 = v42 || v118 < v116;
        BOOL v13 = __CFADD__(v44, v105 << 49);
        v44 += v105 << 49;
        v45 += v13 + (v105 >> 15);
        double v81 = ((double)v60 + (double)v74 * 1.84467441e19 + (double)(v78 - v114 - v120) * 3.40282367e38) / v80;
      }
      unint64_t v121 = (unint64_t)v81;
      unint64_t v122 = (unint64_t)v81 >> 32;
      unint64_t v123 = v122 * (unint64_t)a3;
      unint64_t v124 = (unint64_t)v81 * (unint64_t)HIDWORD(a3)
           + v123
           + (((unint64_t)v81 * (unint64_t)a3) >> 32);
      unsigned long long v127 = __PAIR128__(v74, v60)
           - __PAIR128__(v10 * (unint64_t)v81+ v122 * (unint64_t)HIDWORD(a3)+ HIDWORD(v123)+ HIDWORD(v124), ((unint64_t)v81 * a3) | ((unint64_t)v124 << 32));
      uint64_t v126 = (__PAIR128__(v74, v60)
            - __PAIR128__(v10 * (unint64_t)v81+ v122 * (unint64_t)HIDWORD(a3)+ HIDWORD(v123)+ HIDWORD(v124), ((unint64_t)v81 * a3) | ((unint64_t)v124 << 32))) >> 64;
      uint64_t v125 = v127;
      if (v126 < 0)
      {
        unint64_t v130 = v121 - 1;
        signed long long v131 = __PAIR128__(v126, v127) + __PAIR128__(v10, a3);
        v121 -= 2;
        unsigned long long v132 = __PAIR128__(v126, v127) + __PAIR128__(v10, a3) + __PAIR128__(v10, a3);
        uint64_t v126 = *((void *)&v132 + 1);
        if (v131 < 0)
        {
          uint64_t v125 = v132;
        }
        else
        {
          unint64_t v121 = v130;
          uint64_t v126 = *((void *)&v131 + 1);
          uint64_t v125 = v131;
        }
      }
      else if (v126 > v10 || ((unint64_t)v127 >= a3 ? (BOOL v128 = v126 == v10) : (BOOL v128 = 0), v128))
      {
        ++v121;
        unsigned long long v129 = __PAIR128__(v126, v127) - __PAIR128__(v10, a3);
        uint64_t v126 = (__PAIR128__(v126, v127) - __PAIR128__(v10, a3)) >> 64;
        uint64_t v125 = v129;
      }
      v21 -= v22;
      BOOL v13 = __CFADD__(v121, v44);
      unint64_t v133 = v121 + v44;
      if (v13) {
        ++v45;
      }
      if (v125 | v126)
      {
        int v134 = *a6;
        *a6 |= 0x20u;
        if (v21 < 0)
        {
          unint64_t v225 = v19 ^ v20;
          if (v21 > -35)
          {
            *((void *)&v240 + 1) = v45;
            *(void *)&long long v240 = v133;
            uint64_t v239 = v240 >> 63;
            *((void *)&v240 + 1) = v45;
            *(void *)&long long v240 = v133;
            unint64_t v241 = v239 + (v240 >> 61);
            if (10 * v133 < 8 * v133) {
              ++v241;
            }
            unsigned int v242 = 1 - v21;
            if ((v390 - 1) >= 2 || v225 == 0) {
              int v244 = v390;
            }
            else {
              int v244 = 3 - v390;
            }
            unsigned long long v245 = __bid_round_const_table_128[36 * v244 + v242] + __PAIR128__(v241, ((v126 | v125) != 0) | (10 * v133));
            unint64_t v246 = &__bid_reciprocals10_128[2 * v242];
            unint64_t v247 = *v246;
            unint64_t v248 = v246[1];
            unint64_t v249 = v248 * (unint64_t)DWORD1(v245);
            unint64_t v250 = HIDWORD(v249);
            unint64_t v251 = HIDWORD(v248) * (unint64_t)v245
                 + v249
                 + ((v248 * (unint64_t)v245) >> 32);
            unint64_t v252 = (v248 * v245) | ((unint64_t)v251 << 32);
            unint64_t v253 = DWORD2(v245) * (unint64_t)HIDWORD(v247);
            unint64_t v254 = HIDWORD(v245) * (unint64_t)v247
                 + v253
                 + ((DWORD2(v245) * (unint64_t)v247) >> 32);
            unint64_t v255 = (DWORD2(v245) * v247) | ((unint64_t)v254 << 32);
            unint64_t v256 = v247 * (unint64_t)DWORD1(v245);
            unint64_t v257 = HIDWORD(v247) * (unint64_t)v245
                 + v256
                 + ((v247 * (unint64_t)v245) >> 32);
            unint64_t v258 = HIDWORD(v256) + HIDWORD(v247) * (unint64_t)DWORD1(v245) + HIDWORD(v257);
            unint64_t v259 = (v247 * v245) | ((unint64_t)v257 << 32);
            unint64_t v260 = HIDWORD(v245) * (unint64_t)v248;
            unint64_t v261 = HIDWORD(v260) + HIDWORD(v245) * (unint64_t)HIDWORD(v248);
            unint64_t v262 = DWORD2(v245) * (unint64_t)HIDWORD(v248)
                 + v260
                 + ((DWORD2(v245) * (unint64_t)v248) >> 32);
            unint64_t v263 = HIDWORD(v262);
            unint64_t v264 = (DWORD2(v245) * v248) | ((unint64_t)v262 << 32);
            unint64_t v265 = v252 + v255;
            BOOL v266 = __CFADD__(v252, v255);
            unint64_t v268 = v265 + v258;
            uint64_t v267 = (__PAIR128__(v250+ HIDWORD(v248) * (unint64_t)DWORD1(v245)+ HIDWORD(v245) * (unint64_t)HIDWORD(v247)+ HIDWORD(v253)+ HIDWORD(v251)+ HIDWORD(v254), v265)+ __PAIR128__(v266, v258)) >> 64;
            BOOL v13 = __CFADD__(v264, v267);
            unint64_t v269 = v264 + v267;
            unint64_t v270 = v263 + v13 + v261;
            int v271 = __bid_recip_scale[v242];
            unint64_t v272 = (v270 << -(char)v271) | (v269 >> v271);
            unint64_t v273 = v270 >> v271;
            if (v271 >= 64)
            {
              unint64_t v272 = v270 >> v271;
              unint64_t v273 = 0;
            }
            if (!v390 && (v272 & 1) != 0)
            {
              unint64_t v274 = v269 << -(char)v271;
              if (v271 < 65)
              {
                BOOL v275 = 0;
              }
              else
              {
                unint64_t v274 = (v270 << -(char)v271) | (v269 >> v271);
                BOOL v275 = v269 << -(char)v271 != 0;
              }
              if (!v274 && !v275)
              {
                if (v268 < v248 || (v268 == v248 ? (BOOL v276 = v259 >= v247) : (BOOL v276 = 1), !v276)) {
                  --v272;
                }
              }
            }
            if ((*a6 & 0x20) != 0)
            {
              int v322 = 16;
            }
            else
            {
              char v277 = 0x80 - v271;
              uint64_t v278 = v269 << -(char)v271;
              unint64_t v279 = (v270 << (0x80 - v271)) | (v269 >> v271);
              uint64_t v280 = v269 << (0x80 - v271);
              if (v271 >= 65)
              {
                unint64_t v281 = v280;
              }
              else
              {
                unint64_t v279 = v278;
                unint64_t v281 = 0;
              }
              switch(v244)
              {
                case 0:
                case 4:
                  if (v279 == 0x8000000000000000 && v281 == 0) {
                    goto LABEL_347;
                  }
                  goto LABEL_378;
                case 1:
                case 3:
                  if (v279 | v281) {
                    goto LABEL_378;
                  }
LABEL_347:
                  if (v268 < v248) {
                    goto LABEL_380;
                  }
                  if (v268 == v248 && v259 < v247) {
                    goto LABEL_380;
                  }
LABEL_378:
                  int v322 = 48;
                  break;
                default:
                  BOOL v13 = __CFADD__(__CFADD__(v259, v247), v268);
                  unint64_t v377 = __CFADD__(v259, v247) + v268;
                  unsigned int v378 = v13;
                  if (__CFADD__(v377, v248)) {
                    uint64_t v379 = 1;
                  }
                  else {
                    uint64_t v379 = v378;
                  }
                  unint64_t v380 = v279 >> -(char)v271;
                  char v381 = v271 - 64;
                  unint64_t v382 = v279 >> v277;
                  if (v271 < 65)
                  {
                    unint64_t v382 = 0;
                  }
                  else
                  {
                    char v381 = v271 - 64;
                    unint64_t v380 = (v281 >> v277) | (v279 << v271);
                  }
                  unint64_t v383 = 1 << v381;
                  if (v271 < 64) {
                    unint64_t v383 = 0;
                  }
                  BOOL v13 = __CFADD__(v380, v379);
                  unint64_t v384 = v380 + v379;
                  if (v13) {
                    unint64_t v385 = v382 + 1;
                  }
                  else {
                    unint64_t v385 = v382;
                  }
                  if (v385 <= v383)
                  {
                    unint64_t v386 = v384 >> v271;
                    BOOL v387 = v271 < 64 && v386 == 0;
                    BOOL v388 = v387;
                    if (v385 != v383 || v388) {
                      goto LABEL_378;
                    }
                  }
                  goto LABEL_380;
              }
            }
            *a6 |= v322;
LABEL_380:
            unint64_t v392 = v273 | v225;
          }
          else
          {
            *a6 = v134 | 0x30;
            unint64_t v392 = v19 ^ v20;
            if (v225)
            {
              if (v390 != 1) {
                return v391;
              }
            }
            else if (v390 != 2)
            {
              return v391;
            }
            return 1;
          }
          return v272;
        }
        if (v20 == v19 || (a5 - 1) >= 2) {
          int v136 = a5;
        }
        else {
          int v136 = 3 - a5;
        }
        switch(v136)
        {
          case 0:
            *((void *)&v137 + 1) = v126;
            *(void *)&long long v137 = v125;
            unint64_t v138 = (v133 | (v137 * 2 - __PAIR128__(v10, a3) != 0)) & (unint64_t)((((v137 * 2 - __PAIR128__(v10, a3)) >> 64) & 0x8000000000000000) == 0);
            BOOL v13 = __CFADD__(v138, v133);
            v133 += v138;
            if (v13) {
              goto LABEL_280;
            }
            break;
          case 1:
          case 3:
            goto LABEL_343;
          case 4:
            *((void *)&v292 + 1) = v126;
            *(void *)&long long v292 = v125;
            signed long long v293 = v292 * 2 - __PAIR128__(v10, a3);
            uint64_t v295 = v293 >= 0 || v293 == 0;
            BOOL v13 = __CFADD__(v133, v295);
            v133 += v295;
            if (v13) {
              goto LABEL_280;
            }
            break;
          default:
            BOOL v13 = __CFADD__(v133++, 1);
            if (v13)
            {
              unint64_t v133 = 0;
LABEL_280:
              ++v45;
            }
            break;
        }
        goto LABEL_343;
      }
      if (a3 <= 0x400 && !(v17 | v10) && a1 <= 0x400)
      {
        unint64_t v139 = &__bid_factors[(uint64_t)((a3 << 32) - 0x100000000) >> 31];
        unint64_t v140 = &__bid_factors[(uint64_t)((a1 << 32) - 0x100000000) >> 31];
        int v141 = v22 - *v139 + *v140;
        int v142 = v22 - v139[1] + v140[1];
        if (v142 >= v141) {
          int v143 = v141;
        }
        else {
          int v143 = v142;
        }
        unint64_t v144 = __bid_reciprocals10_128[2 * v143];
        unint64_t v145 = __bid_reciprocals10_128[2 * v143 + 1];
        unint64_t v146 = HIDWORD(v145);
        unint64_t v147 = v145 * (unint64_t)HIDWORD(v133);
        unint64_t v148 = HIDWORD(v147);
        unint64_t v149 = HIDWORD(v145) * (unint64_t)v133
             + v147
             + ((v145 * (unint64_t)v133) >> 32);
        unint64_t v150 = (v145 * v133) | ((unint64_t)v149 << 32);
        unint64_t v151 = HIDWORD(v144);
        unint64_t v152 = HIDWORD(v45);
        unsigned int v153 = v45;
        unint64_t v154 = v45 * (unint64_t)HIDWORD(v144);
        unint64_t v155 = HIDWORD(v45) * (unint64_t)v144
             + v154
             + ((v45 * (unint64_t)v144) >> 32);
        unint64_t v156 = (v45 * v144) | ((unint64_t)v155 << 32);
        unint64_t v157 = ((v144 * (unint64_t)HIDWORD(v133)) >> 32)
             + HIDWORD(v144) * (unint64_t)HIDWORD(v133)
             + ((HIDWORD(v144) * (unint64_t)v133
               + (v144 * HIDWORD(v133))
               + ((v144 * (unint64_t)v133) >> 32)) >> 32);
        unint64_t v158 = HIDWORD(v45) * (unint64_t)v145;
        unint64_t v159 = v45 * (unint64_t)v145;
        unint64_t v160 = HIDWORD(v158) + v152 * (unint64_t)HIDWORD(v145);
        unint64_t v161 = v153 * (unint64_t)HIDWORD(v145) + v158 + HIDWORD(v159);
        unint64_t v162 = HIDWORD(v161);
        unint64_t v163 = v159 | ((unint64_t)v161 << 32);
        unint64_t v164 = v150 + v156;
        BOOL v165 = __CFADD__(v150, v156);
        int v166 = __bid_recip_scale[v143];
        unsigned long long v167 = __PAIR128__(v160, v163)
             + __PAIR128__(v162, v165+ __CFADD__(v157, v164)+ v148+ v146 * (unint64_t)HIDWORD(v133)+ v152 * (unint64_t)v151+ HIDWORD(v154)+ HIDWORD(v149)+ HIDWORD(v155));
        BOOL v168 = v166 <= 63;
        unint64_t v169 = (v163
              + v165
              + __CFADD__(v157, v164)
              + v148
              + v146 * (unint64_t)HIDWORD(v133)
              + v152 * (unint64_t)v151
              + HIDWORD(v154)
              + HIDWORD(v149)
              + HIDWORD(v155)) >> v166;
        int v170 = -v166;
        unint64_t v171 = *((void *)&v167 + 1) >> v166;
        unint64_t v172 = *((void *)&v167 + 1) >> v166;
        unint64_t v173 = (*((void *)&v167 + 1) << v170) | v169;
        if (v168) {
          unint64_t v172 = v173;
        }
        if (v168) {
          unint64_t v45 = v171;
        }
        else {
          unint64_t v45 = 0;
        }
        int v174 = v143 + v21;
        goto LABEL_304;
      }
      unint64_t v191 = HIDWORD(v133);
      unsigned int v192 = v133;
      unint64_t v193 = 2737007179 * HIDWORD(v133);
      uint64_t v194 = HIDWORD(v193) + 755578 * HIDWORD(v133);
      unint64_t v195 = 755578 * v133
           + v193
           + ((2737007179u * (unint64_t)v133) >> 32);
      unint64_t v196 = HIDWORD(v195);
      unint64_t v197 = (-1557960117 * v133) | ((unint64_t)v195 << 32);
      unint64_t v198 = ((3953110345u * (unint64_t)HIDWORD(v133)) >> 32)
           + 1150327791 * HIDWORD(v133)
           + ((1150327791 * v133
             + (-341856951 * HIDWORD(v133))
             + ((3953110345u * (unint64_t)v133) >> 32)) >> 32);
      unint64_t v199 = v197 + v198;
      unint64_t v200 = v196 + __CFADD__(v197, v198) + v194;
      unint64_t v201 = HIDWORD(v45);
      unsigned int v202 = v45;
      unint64_t v203 = 2737007179 * HIDWORD(v45);
      uint64_t v204 = HIDWORD(v203) + 755578 * HIDWORD(v45);
      unint64_t v205 = 755578 * v45
           + v203
           + ((2737007179u * (unint64_t)v45) >> 32);
      unint64_t v206 = HIDWORD(v205);
      unint64_t v207 = (-1557960117 * v45) | ((unint64_t)v205 << 32);
      unint64_t v208 = 3953110345 * HIDWORD(v45);
      uint64_t v209 = HIDWORD(v208) + 1150327791 * HIDWORD(v45);
      unint64_t v210 = 1150327791 * v45
           + v208
           + ((3953110345u * (unint64_t)v45) >> 32);
      unint64_t v211 = (-341856951 * v45) | ((unint64_t)v210 << 32);
      unsigned long long v212 = __PAIR128__(v204, v207) + __PAIR128__(v206, v209 + HIDWORD(v210));
      BOOL v13 = __CFADD__(__CFADD__(v211, v199), v207 + v209 + HIDWORD(v210));
      unint64_t v213 = __CFADD__(v211, v199) + v207 + v209 + HIDWORD(v210);
      unsigned int v214 = v13;
      BOOL v13 = __CFADD__(v200, v213);
      unint64_t v215 = v200 + v213;
      if (v13) {
        uint64_t v216 = 1;
      }
      else {
        uint64_t v216 = v214;
      }
      *((void *)&v217 + 1) = *((void *)&v212 + 1) + v216;
      *(void *)&long long v217 = v215;
      unint64_t v172 = v217 >> 44;
      unint64_t v218 = v133 - 100000000000000000 * v172;
      if (v218)
      {
        unsigned int v219 = v218 & 0x3FFFFFF;
        unint64_t v220 = v218 >> 26;
        if ((v218 >> 26))
        {
          unsigned int v221 = 0;
          unint64_t v222 = (char *)&__bid_convert_table;
          do
          {
            unint64_t v223 = &v222[8 * (v220 & 0x7F)];
            v219 += *(_DWORD *)v223;
            v221 += *((_DWORD *)v223 + 1);
            if (v219 > 0x5F5E0FF)
            {
              v219 -= 100000000;
              ++v221;
            }
            v222 += 1024;
            BOOL v42 = v220 > 0x7F;
            LODWORD(v220) = v220 >> 7;
          }
          while (v42);
          unsigned int v224 = v221 - 100000000;
          if (v221 - 100000000 > 0x5F5E0FF) {
            unsigned int v224 = v221 - 200000000;
          }
          if (v221 > 0x5F5E0FF) {
            unsigned int v221 = v224;
          }
        }
        else
        {
          unsigned int v221 = 0;
        }
        if (v219 | v221)
        {
          BOOL v296 = v219 == 0;
          if (!v219) {
            unsigned int v219 = v221;
          }
          unint64_t v297 = (109951163 * (unint64_t)v219) >> 40;
          unsigned int v298 = v219 - 10000 * v297;
          unsigned int v299 = (8 * v296) | 4;
          if (v298)
          {
            unsigned int v299 = 8 * v296;
            unint64_t v297 = v298;
          }
          else
          {
            unint64_t v297 = v297;
          }
          if ((v297 & 1) == 0) {
            v299 |= (__bid_packed_10000_zeros[v297 >> 3] >> (v297 & 7)) & 3;
          }
          if (!v299) {
            goto LABEL_297;
          }
        }
        else
        {
          unsigned int v299 = 16;
        }
        unint64_t v300 = __bid_reciprocals10_128[2 * v299];
        unint64_t v301 = __bid_reciprocals10_128[2 * v299 + 1];
        unint64_t v302 = HIDWORD(v301);
        unint64_t v303 = v301 * (unint64_t)HIDWORD(v133);
        unint64_t v304 = HIDWORD(v303);
        unint64_t v305 = HIDWORD(v301) * (unint64_t)v133
             + v303
             + ((v301 * (unint64_t)v133) >> 32);
        unint64_t v306 = (v301 * v133) | ((unint64_t)v305 << 32);
        unint64_t v307 = HIDWORD(v300);
        unint64_t v308 = HIDWORD(v300) * (unint64_t)v202;
        unint64_t v309 = v300 * (unint64_t)v201
             + v308
             + ((v300 * (unint64_t)v202) >> 32);
        unint64_t v310 = (v300 * v202) | ((unint64_t)v309 << 32);
        unint64_t v311 = ((v300 * (unint64_t)v191) >> 32)
             + HIDWORD(v300) * (unint64_t)v191
             + ((HIDWORD(v300) * (unint64_t)v192
               + (v300 * v191)
               + ((v300 * (unint64_t)v192) >> 32)) >> 32);
        unint64_t v312 = v301 * (unint64_t)v201;
        unint64_t v313 = v301 * (unint64_t)v202;
        unint64_t v314 = HIDWORD(v312) + v302 * (unint64_t)v201;
        unint64_t v315 = v302 * (unint64_t)v202 + v312 + HIDWORD(v313);
        unint64_t v316 = HIDWORD(v315);
        unint64_t v317 = v313 | ((unint64_t)v315 << 32);
        unint64_t v318 = v306 + v310;
        BOOL v319 = __CFADD__(v306, v310);
        unint64_t v320 = v319
             + __CFADD__(v311, v318)
             + v304
             + v302 * (unint64_t)v191
             + v307 * (unint64_t)v201
             + HIDWORD(v308)
             + HIDWORD(v305)
             + HIDWORD(v309);
        int v321 = __bid_recip_scale[v299];
        unint64_t v133 = ((__PAIR128__(v314, v317) + __PAIR128__(v316, v320)) >> 64 << -(char)v321) | ((v317 + v320) >> v321);
        unint64_t v45 = (unint64_t)((__PAIR128__(v314, v317) + __PAIR128__(v316, v320)) >> 64) >> v321;
LABEL_297:
        int v174 = v299 + v21;
        unint64_t v172 = v133;
LABEL_304:
        uint64_t v324 = v19 ^ v20;
        unint64_t v133 = v172;
LABEL_344:
        bid_get_BID128(&v391, v324, v174, v133, v45, &v390, a6);
        return v391;
      }
      unsigned int v228 = v172 & 0x3FFFFFF;
      unsigned int v229 = 0;
      unint64_t v230 = v172 >> 26;
      if ((v172 >> 26))
      {
        unint64_t v231 = (char *)&__bid_convert_table;
        do
        {
          uint64_t v232 = &v231[8 * (v230 & 0x7F)];
          v228 += *(_DWORD *)v232;
          v229 += *((_DWORD *)v232 + 1);
          if (v228 > 0x5F5E0FF)
          {
            v228 -= 100000000;
            ++v229;
          }
          v231 += 1024;
          BOOL v42 = v230 > 0x7F;
          LODWORD(v230) = v230 >> 7;
        }
        while (v42);
        unsigned int v233 = v229 - 100000000;
        if (v229 - 100000000 > 0x5F5E0FF) {
          unsigned int v233 = v229 - 200000000;
        }
        if (v229 > 0x5F5E0FF) {
          unsigned int v229 = v233;
        }
      }
      int v234 = v21 + 17;
      if (v228 | v229)
      {
        BOOL v235 = v228 == 0;
        if (!v228) {
          unsigned int v228 = v229;
        }
        unint64_t v236 = (109951163 * (unint64_t)v228) >> 40;
        LODWORD(v237) = v228 - 10000 * v236;
        unsigned int v238 = (8 * v235) | 4;
        if (v237)
        {
          unsigned int v238 = 8 * v235;
          unint64_t v237 = v237;
        }
        else
        {
          unint64_t v237 = v236;
        }
        if ((v237 & 1) == 0) {
          v238 |= (__bid_packed_10000_zeros[v237 >> 3] >> (v237 & 7)) & 3;
        }
        if (!v238) {
          goto LABEL_303;
        }
      }
      else
      {
        unsigned int v238 = 16;
      }
      unint64_t v323 = __bid_reciprocals10_64[v238] * (unint64_t)HIDWORD(v172);
      unint64_t v172 = (HIDWORD(v323)
            + HIDWORD(__bid_reciprocals10_64[v238]) * (unint64_t)HIDWORD(v172)
            + ((HIDWORD(__bid_reciprocals10_64[v238]) * (unint64_t)v172
              + v323
              + ((__bid_reciprocals10_64[v238] * (unint64_t)v172) >> 32)) >> 32)) >> __bid_short_recip_scale[v238];
LABEL_303:
      unint64_t v45 = 0;
      int v174 = v234 + v238;
      goto LABEL_304;
    }
    double v175 = (double)a3 + (double)v10 * 1.84467441e19;
    double v176 = ((double)a1 + (double)v17 * 1.84467441e19) / v175;
    if (v10 || a3 >> 28 || a3 << 36 > v17)
    {
      unint64_t v189 = 0;
      if (v10 >> 13)
      {
        unint64_t v187 = v17;
        unint64_t v185 = a1;
        unint64_t v188 = 0;
LABEL_306:
        unint64_t v325 = (unint64_t)v176;
        unint64_t v326 = (unint64_t)v176 >> 32;
        unint64_t v327 = v326 * (unint64_t)a3;
        unint64_t v328 = (unint64_t)v176 * (unint64_t)HIDWORD(a3)
             + v327
             + (((unint64_t)v176 * (unint64_t)a3) >> 32);
        unint64_t v329 = ((unint64_t)v176 * a3) | ((unint64_t)v328 << 32);
        BOOL v13 = v185 >= v329;
        unint64_t v227 = v185 - v329;
        uint64_t v330 = !v13;
        uint64_t v226 = v187
             - (v10 * (unint64_t)v176
              + v326 * (unint64_t)HIDWORD(a3)
              + HIDWORD(v327)
              + HIDWORD(v328))
             - v330;
        if (v226 < 0)
        {
          unint64_t v334 = v325 - 1;
          uint64_t v226 = (__PAIR128__(v226, v227) + __PAIR128__(v10, a3)) >> 64;
          v227 += a3;
          v325 -= 2;
          unsigned long long v335 = __PAIR128__(v226, v227) + __PAIR128__(v10, a3);
          BOOL v336 = v226 >= 0;
          if (v226 < 0) {
            uint64_t v226 = (__PAIR128__(v226, v227) + __PAIR128__(v10, a3)) >> 64;
          }
          else {
            unint64_t v325 = v334;
          }
          if (!v336) {
            unint64_t v227 = v335;
          }
        }
        else
        {
          unint64_t v331 = v226 - v10;
          if (v226 > v10 || (v226 == v10 ? (BOOL v332 = v227 >= a3) : (BOOL v332 = 0), v332))
          {
            ++v325;
            BOOL v13 = v227 >= a3;
            v227 -= a3;
            uint64_t v333 = !v13;
            uint64_t v226 = v331 - v333;
          }
        }
        unint64_t v133 = v325 + v189;
        if (__CFADD__(v325, v189)) {
          unint64_t v45 = v188 + 1;
        }
        else {
          unint64_t v45 = v188;
        }
        goto LABEL_328;
      }
      unint64_t v188 = 0;
      unint64_t v185 = a1;
      unint64_t v187 = v17;
      *((void *)&v283 + 1) = v10;
      *(void *)&long long v283 = a3;
      unint64_t v190 = v283 >> 13;
    }
    else
    {
      double v177 = v176 * 8.67361738e-19;
      unint64_t v178 = (unint64_t)v177 - 4;
      unint64_t v179 = HIDWORD(v178) * a3;
      unint64_t v180 = ((unint64_t)v177 - 4) * a3;
      unint64_t v181 = HIDWORD(v179);
      unint64_t v182 = HIDWORD(v180) + v179;
      *((void *)&v183 + 1) = (v181 + HIDWORD(v182));
      *(void *)&long long v183 = v180 & 0xFFFFFFF0 | (v182 << 32);
      uint64_t v184 = v17 - (v183 >> 4);
      BOOL v13 = a1 >= v180 << 60;
      unint64_t v185 = a1 - (v180 << 60);
      uint64_t v186 = !v13;
      unint64_t v187 = v184 - v186;
      unint64_t v188 = v178 >> 4;
      double v176 = ((double)v185 + (double)v187 * 1.84467441e19) / v175;
      unint64_t v189 = v178 << 60;
      unint64_t v190 = a3 >> 13;
    }
    if (v187 > v190 || v187 == v190 && v185 > a3 << 51)
    {
      double v284 = v176 * 1.77635684e-15;
      unint64_t v285 = (unint64_t)v284 - 1;
      unint64_t v286 = HIDWORD(v285) * (unint64_t)a3;
      unint64_t v287 = v285 * (unint64_t)a3;
      unint64_t v288 = ((unint64_t)v284 - 1) * (unint64_t)HIDWORD(a3)
           + v286
           + HIDWORD(v287);
      *((void *)&v289 + 1) = (v285 * v10 + HIDWORD(v285) * HIDWORD(a3) + HIDWORD(v286) + HIDWORD(v288));
      *(void *)&long long v289 = v287 & 0xFFFF8000 | (v288 << 32);
      uint64_t v290 = v187 - (v289 >> 15);
      BOOL v13 = v185 >= v287 << 49;
      v185 -= v287 << 49;
      uint64_t v291 = !v13;
      unint64_t v187 = v290 - v291;
      BOOL v13 = __CFADD__(v189, v285 << 49);
      v189 += v285 << 49;
      v188 += v13 + (v285 >> 15);
      double v176 = ((double)v185 + (double)v187 * 1.84467441e19) / v175;
    }
    goto LABEL_306;
  }
  if ((~a4 & 0x7C00000000000000) != 0)
  {
    if (v7 == 0x7800000000000000)
    {
      unint64_t v36 = v19 ^ v20;
      goto LABEL_203;
    }
    *a6 |= 4u;
    goto LABEL_202;
  }
  if ((~a4 & 0x7E00000000000000) == 0) {
    *a6 |= 1u;
  }
  unint64_t v391 = a3;
  unint64_t v392 = v10 & 0xFDFFFFFFFFFFFFFFLL;
  return v391;
}

void *bid_get_BID128(void *result, uint64_t a2, int a3, unint64_t a4, unint64_t a5, int *a6, _DWORD *a7)
{
  uint64_t v7 = 0x378D8E63FFFFFFFFLL;
  if (a4 == 0x378D8E6400000000 && a5 == 0x1ED09BEAD87C0) {
    unint64_t v8 = 0x38C15B0A00000000;
  }
  else {
    unint64_t v8 = a4;
  }
  uint64_t v9 = (a4 == 0x378D8E6400000000 && a5 == 0x1ED09BEAD87C0) + a3;
  if (a4 == 0x378D8E6400000000 && a5 == 0x1ED09BEAD87C0) {
    unint64_t v10 = 0x314DC6448D93;
  }
  else {
    unint64_t v10 = a5;
  }
  if (v9 < 0x3000) {
    goto LABEL_68;
  }
  if ((v9 & 0x80000000) != 0)
  {
    if (v9 > 0xFFFFFFDD)
    {
      unsigned int v15 = -(int)v9;
      BOOL v16 = (*a6 - 1) >= 2 || a2 == 0;
      if (v16) {
        int v17 = *a6;
      }
      else {
        int v17 = 3 - *a6;
      }
      unsigned long long v18 = __bid_round_const_table_128[36 * v17 + v15] + __PAIR128__(v10, v8);
      unint64_t v19 = (unint64_t *)((char *)&__bid_reciprocals10_128 + 16 * v15);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      unint64_t v22 = v21 * (unint64_t)DWORD1(v18);
      unint64_t v23 = HIDWORD(v22);
      unint64_t v24 = HIDWORD(v21) * (unint64_t)v18
          + v22
          + ((v21 * (unint64_t)v18) >> 32);
      unint64_t v25 = (v21 * v18) | ((unint64_t)v24 << 32);
      unint64_t v26 = DWORD2(v18) * HIDWORD(*v19);
      unint64_t v27 = HIDWORD(v18) * (unint64_t)v20
          + v26
          + ((DWORD2(v18) * (unint64_t)v20) >> 32);
      unint64_t v28 = (DWORD2(v18) * *v19) | ((unint64_t)v27 << 32);
      unint64_t v29 = *v19 * (unint64_t)DWORD1(v18);
      unint64_t v30 = HIDWORD(v20) * (unint64_t)v18
          + v29
          + ((v20 * (unint64_t)v18) >> 32);
      unint64_t v31 = HIDWORD(v29) + HIDWORD(*v19) * DWORD1(v18) + HIDWORD(v30);
      unint64_t v32 = (*v19 * v18) | ((unint64_t)v30 << 32);
      unint64_t v33 = HIDWORD(v18) * (unint64_t)v21;
      unint64_t v34 = HIDWORD(v33) + HIDWORD(v18) * (unint64_t)HIDWORD(v21);
      unint64_t v35 = DWORD2(v18) * (unint64_t)HIDWORD(v21)
          + v33
          + ((DWORD2(v18) * (unint64_t)v21) >> 32);
      unint64_t v36 = HIDWORD(v35);
      unint64_t v37 = (DWORD2(v18) * v21) | ((unint64_t)v35 << 32);
      BOOL v38 = __CFADD__(v25, v28);
      unint64_t v39 = v25 + v28 + v31;
      unsigned long long v40 = __PAIR128__(v34, v37)
          + __PAIR128__(v36, (__PAIR128__(v23+ HIDWORD(v21) * (unint64_t)DWORD1(v18)+ HIDWORD(v18) * (unint64_t)HIDWORD(v20)+ HIDWORD(v26)+ HIDWORD(v24)+ HIDWORD(v27), v25 + v28)+ __PAIR128__(v38, v31)) >> 64);
      int v41 = __bid_recip_scale[v15];
      unint64_t v42 = (*((void *)&v40 + 1) << -(char)v41) | ((unint64_t)v40 >> v41);
      unint64_t v43 = (unint64_t)((__PAIR128__(v34, v37)
                              + __PAIR128__(v36, (__PAIR128__(v23+ HIDWORD(v21) * (unint64_t)DWORD1(v18)+ HIDWORD(v18) * (unint64_t)HIDWORD(v20)+ HIDWORD(v26)+ HIDWORD(v24)+ HIDWORD(v27), v25 + v28)+ __PAIR128__(v38, v31)) >> 64)) >> 64) >> v41;
      if (v41 >= 64)
      {
        unint64_t v42 = *((void *)&v40 + 1) >> v41;
        unint64_t v43 = 0;
      }
      if (!*a6 && (v42 & 1) != 0)
      {
        unint64_t v44 = (*((void *)&v40 + 1) << -(char)v41) | ((unint64_t)v40 >> v41);
        if (v41 >= 65)
        {
          BOOL v45 = (void)v40 << -(char)v41 != 0;
        }
        else
        {
          unint64_t v44 = (void)v40 << -(char)v41;
          BOOL v45 = 0;
        }
        if (!v44 && !v45 && (v39 < v21 || v39 == v21 && v32 < v20)) {
          --v42;
        }
      }
      if ((*a7 & 0x20) != 0)
      {
        int v55 = 16;
      }
      else
      {
        char v46 = 0x80 - v41;
        unint64_t v47 = (*((void *)&v40 + 1) << (0x80 - v41)) | ((unint64_t)v40 >> v41);
        if (v41 >= 65)
        {
          unint64_t v48 = (void)v40 << (0x80 - v41);
        }
        else
        {
          unint64_t v47 = (void)v40 << -(char)v41;
          unint64_t v48 = 0;
        }
        switch(v17)
        {
          case 0:
          case 4:
            if (v47 == 0x8000000000000000 && v48 == 0) {
              goto LABEL_75;
            }
            goto LABEL_107;
          case 1:
          case 3:
            if (v47 | v48) {
              goto LABEL_107;
            }
LABEL_75:
            BOOL v56 = v39 == v21;
            if (v39 >= v21)
            {
              int v55 = 48;
              if (!v56 || v32 >= v20) {
                break;
              }
            }
            goto LABEL_109;
          default:
            BOOL v12 = __CFADD__(__CFADD__(v32, v20), v39);
            unint64_t v57 = __CFADD__(v32, v20) + v39;
            unsigned int v58 = v12;
            if (__CFADD__(v57, v21)) {
              uint64_t v59 = 1;
            }
            else {
              uint64_t v59 = v58;
            }
            unint64_t v60 = v47 >> -(char)v41;
            char v61 = v41 - 64;
            unint64_t v62 = (v48 >> v46) | (v47 << v41);
            unint64_t v63 = v47 >> v46;
            if (v41 < 65)
            {
              unint64_t v64 = 0;
            }
            else
            {
              char v61 = v41 - 64;
              unint64_t v64 = v63;
            }
            if (v41 < 65) {
              unint64_t v62 = v60;
            }
            unint64_t v65 = 1 << v61;
            if (v41 < 64) {
              unint64_t v65 = 0;
            }
            unint64_t v66 = v62 + v59;
            if (__CFADD__(v62, v59)) {
              unint64_t v67 = v64 + 1;
            }
            else {
              unint64_t v67 = v64;
            }
            if (v67 > v65) {
              goto LABEL_109;
            }
            unint64_t v68 = v66 >> v41;
            BOOL v69 = v41 < 64 && v68 == 0;
            BOOL v70 = v69;
            if (v67 == v65 && !v70) {
              goto LABEL_109;
            }
LABEL_107:
            int v55 = 48;
            break;
        }
      }
      *a7 |= v55;
LABEL_109:
      result[1] = v43 | a2;
    }
    else
    {
      *a7 |= 0x30u;
      *uint64_t result = 0;
      result[1] = a2;
      int v14 = *a6;
      if (a2)
      {
        if (v14 != 1) {
          return result;
        }
      }
      else if (v14 != 2)
      {
        return result;
      }
      unint64_t v42 = 1;
    }
    *uint64_t result = v42;
    return result;
  }
  if (v9 > 0x3021) {
    goto LABEL_58;
  }
  while (1)
  {
    if (v10 < 0x314DC6448D93)
    {
      if ((int)v9 < 12288) {
        goto LABEL_68;
      }
      goto LABEL_16;
    }
    if (v10 != 0x314DC6448D93) {
      goto LABEL_57;
    }
    if (v8 >= 0x38C15B0A00000000 || (int)v9 < 12288) {
      break;
    }
LABEL_16:
    uint64_t v11 = 10 * v8;
    BOOL v12 = 10 * v8 >= 8 * v8;
    uint64_t v13 = (v8 >> 63) + (v8 >> 61) + 10 * v10;
    if (v12) {
      unint64_t v10 = v13;
    }
    else {
      unint64_t v10 = v13 + 1;
    }
    uint64_t v9 = (v9 - 1);
    unint64_t v8 = v11;
  }
  unint64_t v10 = 0x314DC6448D93;
LABEL_57:
  if ((int)v9 < 12288)
  {
LABEL_68:
    *uint64_t result = v8;
    result[1] = v10 | (v9 << 49) | a2;
    return result;
  }
LABEL_58:
  if (v8 | v10)
  {
    uint64_t v50 = 0x5FFFED09BEAD87C0;
    *a7 |= 0x28u;
    int v51 = *a6;
    if (a2) {
      int v52 = 2;
    }
    else {
      int v52 = 1;
    }
    BOOL v16 = v51 == v52;
    uint64_t v53 = 0x7800000000000000;
    if (v16)
    {
      uint64_t v53 = 0x5FFFED09BEAD87C0;
      uint64_t v54 = 0x378D8E63FFFFFFFFLL;
    }
    else
    {
      uint64_t v54 = 0;
    }
    if (v51 != 3)
    {
      uint64_t v50 = v53;
      uint64_t v7 = v54;
    }
    *uint64_t result = v7;
    result[1] = v50 | a2;
  }
  else
  {
    *uint64_t result = 0;
    result[1] = a2 | 0x5FFE000000000000;
  }
  return result;
}

unint64_t __bid128_exp(unint64_t a1, unint64_t a2, unsigned int a3, int *a4)
{
  if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
    return 0;
  }
  unint64_t v6 = a1;
  if ((a2 & 0x7C00000000000000) != 0x7C00000000000000)
  {
    if (__bid128_isZero(a1, a2)) {
      return 1;
    }
    if (__bid128_quiet_greater(v6, a2, 0x3A98uLL, 0x3040000000000000, a4))
    {
      unint64_t v8 = 0xD43EDE775707FD0ALL;
      uint64_t v9 = 0x5550558ADA285F8BLL;
    }
    else
    {
      if (__bid128_quiet_less(v6, a2, 0x3A98uLL, 0xB040000000000000, a4))
      {
        unint64_t v8 = 1;
        uint64_t v9 = 0x160000000000000;
        unint64_t v10 = 1;
        uint64_t v11 = 0x160000000000000;
        return __bid128_mul(v8, v9, v10, v11, a3, a4);
      }
      __n128 v17 = 0uLL;
      v16[0] = 0;
      v16[1] = 0;
      __n128 v15 = 0uLL;
      __n128 v14 = 0uLL;
      bid128_to_binary128_2part(v15.n128_u64, (unint64_t *)v16, v6, a2);
      if (!bid_f128_cmp((uint64_t *)&v15, (uint64_t *)&c_11000_1118, 4u))
      {
        if (!bid_f128_cmp((uint64_t *)&v15, (uint64_t *)&c_neg_11000, 1u))
        {
          bid_f128_exp(&v17, (uint64_t *)&v15);
          bid_f128_mul(&v14, (uint64_t *)&v17, v16);
          bid_f128_add(&v17, (uint64_t *)&v17, (uint64_t *)&v14);
          return __binary128_to_bid128(v17.n128_u64[0], v17.n128_u64[1], a3, a4);
        }
        bid_f128_add(&v15, (uint64_t *)&v15, (uint64_t *)&c_11000_1118);
        bid_f128_exp(&v17, (uint64_t *)&v15);
        bid_f128_mul(&v14, (uint64_t *)&v17, v16);
        bid_f128_add(&v17, (uint64_t *)&v17, (uint64_t *)&v14);
        unint64_t v8 = __binary128_to_bid128(v17.n128_u64[0], v17.n128_u64[1], a3, a4);
        unint64_t v10 = 0x995AB6781DD4B6F5;
        uint64_t v11 = 0xAAB1C2BBC58F8F5;
        return __bid128_mul(v8, v9, v10, v11, a3, a4);
      }
      bid_f128_sub(&v15, (uint64_t *)&v15, (uint64_t *)&c_11000_1118);
      bid_f128_exp(&v17, (uint64_t *)&v15);
      bid_f128_mul(&v14, (uint64_t *)&v17, v16);
      bid_f128_add(&v17, (uint64_t *)&v17, (uint64_t *)&v14);
      unint64_t v8 = __binary128_to_bid128(v17.n128_u64[0], v17.n128_u64[1], a3, a4);
    }
    unint64_t v10 = 0xD43EDE775707FD0ALL;
    uint64_t v11 = 0x5550558ADA285F8BLL;
    return __bid128_mul(v8, v9, v10, v11, a3, a4);
  }
  if ((~a2 & 0x7E00000000000000) == 0) {
    *a4 |= 1u;
  }
  if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
    || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
  {
    return 0;
  }
  return v6;
}

uint64_t bid128_ext_fma(int *a1, int *a2, int *a3, int *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unsigned int a11, int *a12)
{
  unint64_t v16 = a10;
  uint64_t v591 = *MEMORY[0x1E4F143B8];
  unsigned long long v587 = xmmword_1BDDB5860;
  long long v586 = 0uLL;
  int v585 = 0;
  unint64_t v584 = 0;
  unsigned long long v583 = 0uLL;
  long long v582 = 0uLL;
  memset(v590, 0, sizeof(v590));
  uint64_t v17 = a8 & 0x7C00000000000000;
  unsigned long long v580 = 0u;
  long long v581 = 0u;
  if ((a8 & 0x7C00000000000000) == 0x7C00000000000000)
  {
    if ((a8 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || (a8 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a7 > 0x38C15B09FFFFFFFFLL)
    {
      a7 = 0;
      a8 &= 0xFFFFC00000000000;
    }
    if ((~a8 & 0x7E00000000000000) == 0)
    {
      *a12 |= 1u;
      *(void *)&unsigned long long v587 = a7;
      *((void *)&v587 + 1) = a8 & 0xFC003FFFFFFFFFFFLL;
LABEL_69:
      int v21 = 0;
      goto LABEL_70;
    }
    *(void *)&unsigned long long v587 = a7;
    *((void *)&v587 + 1) = a8 & 0xFC003FFFFFFFFFFFLL;
    if ((~a10 & 0x7E00000000000000) != 0 && (a6 & 0x7E00000000000000) != 0x7E00000000000000) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  unint64_t v18 = a9;
  uint64_t v19 = a10 & 0x7C00000000000000;
  if ((a10 & 0x7C00000000000000) == 0x7C00000000000000)
  {
    if ((a10 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || (a10 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a9 > 0x38C15B09FFFFFFFFLL)
    {
      unint64_t v18 = 0;
      unint64_t v16 = a10 & 0xFFFFC00000000000;
    }
    if ((~v16 & 0x7E00000000000000) == 0)
    {
      *a12 |= 1u;
      *(void *)&unsigned long long v587 = v18;
      *((void *)&v587 + 1) = v16 & 0xFC003FFFFFFFFFFFLL;
      goto LABEL_69;
    }
    *(void *)&unsigned long long v587 = v18;
    *((void *)&v587 + 1) = v16 & 0xFC003FFFFFFFFFFFLL;
    if ((~a6 & 0x7E00000000000000) != 0) {
      goto LABEL_69;
    }
LABEL_68:
    *a12 |= 1u;
    goto LABEL_69;
  }
  uint64_t v20 = a6 & 0x7C00000000000000;
  if ((a6 & 0x7C00000000000000) != 0x7C00000000000000)
  {
    unint64_t v22 = a6 & 0x1FFFFFFFFFFFFLL;
    if (v20 == 0x7800000000000000)
    {
      unint64_t v23 = 0;
    }
    else if ((~a6 & 0x6000000000000000) != 0)
    {
      unint64_t v23 = a6 & 0x7FFE000000000000;
      if (v22 > 0x1ED09BEAD87C0 || v22 == 0x1ED09BEAD87C0 && a5 > 0x378D8E63FFFFFFFFLL)
      {
        unint64_t v22 = 0;
        a5 = 0;
      }
    }
    else
    {
      unint64_t v22 = 0;
      a5 = 0;
      unint64_t v23 = (4 * a6) & 0x7FFE000000000000;
    }
    unint64_t v24 = a8 & 0x1FFFFFFFFFFFFLL;
    if (v17 == 0x7800000000000000)
    {
      unint64_t v25 = 0;
    }
    else if ((~a8 & 0x6000000000000000) != 0)
    {
      unint64_t v25 = a8 & 0x7FFE000000000000;
      if (v24 > 0x1ED09BEAD87C0 || v24 == 0x1ED09BEAD87C0 && a7 > 0x378D8E63FFFFFFFFLL)
      {
        unint64_t v24 = 0;
        a7 = 0;
      }
    }
    else
    {
      unint64_t v24 = 0;
      a7 = 0;
      unint64_t v25 = (4 * a8) & 0x7FFE000000000000;
    }
    unint64_t v26 = a10 & 0x1FFFFFFFFFFFFLL;
    if (v19 == 0x7800000000000000)
    {
      unint64_t v27 = 0;
LABEL_46:
      unint64_t v28 = a9;
      goto LABEL_53;
    }
    if ((~a10 & 0x6000000000000000) != 0)
    {
      unint64_t v27 = a10 & 0x7FFE000000000000;
      if (v26 <= 0x1ED09BEAD87C0 && (v26 != 0x1ED09BEAD87C0 || a9 <= 0x378D8E63FFFFFFFFLL)) {
        goto LABEL_46;
      }
      unint64_t v26 = 0;
      unint64_t v28 = 0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v28 = 0;
      unint64_t v27 = (4 * a10) & 0x7FFE000000000000;
    }
LABEL_53:
    unint64_t v29 = a10 & 0x8000000000000000;
    unint64_t v30 = (a8 ^ a6) & 0x8000000000000000;
    if (v20 == 0x7800000000000000)
    {
      if (v17 != 0x7800000000000000 && !(v24 | a7)) {
        goto LABEL_67;
      }
      if (v19 == 0x7800000000000000)
      {
        if (v30 != v29) {
          goto LABEL_67;
        }
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    if (v17 == 0x7800000000000000)
    {
      if (v19 == 0x7800000000000000)
      {
        if (v30 != v29 || !(v22 | a5)) {
          goto LABEL_67;
        }
LABEL_63:
        unint64_t v31 = v29 | 0x7800000000000000;
        goto LABEL_74;
      }
      if (!(v22 | a5))
      {
LABEL_67:
        unsigned long long v587 = xmmword_1BDDB57A0;
        goto LABEL_68;
      }
LABEL_73:
      unint64_t v31 = v30 | 0x7800000000000000;
      goto LABEL_74;
    }
    if (v19 == 0x7800000000000000)
    {
      int v21 = 0;
      *(void *)&unsigned long long v587 = 0;
      *((void *)&v587 + 1) = v29 | 0x7800000000000000;
      goto LABEL_70;
    }
    uint64_t v33 = (v23 >> 49) - 6176;
    unint64_t v34 = v33 + (v25 >> 49);
    if ((v34 & 0x80000000) != 0) {
      unint64_t v35 = 0;
    }
    else {
      unint64_t v35 = v34 << 49;
    }
    if (v22 | a5)
    {
      if (v24 || a7 || v26 || v28)
      {
LABEL_90:
        int v36 = v22 | a5;
        if (v22 | a5)
        {
          unint64_t v37 = HIDWORD(a5);
          if (!(a5 >> 53)) {
            unint64_t v37 = a5;
          }
          uint64_t v38 = -1022;
          if (a5 >> 53) {
            uint64_t v38 = -990;
          }
          if (v22)
          {
            unint64_t v37 = v22;
            uint64_t v38 = -958;
          }
          unint64_t v39 = ((COERCE_UNSIGNED_INT64((double)v37) >> 52) & 0x7FF) + v38 - 1;
          int v36 = *((_DWORD *)&__bid_nr_digits + 8 * v39);
          if (!v36)
          {
            unsigned long long v40 = (char *)&__bid_nr_digits + 32 * v39;
            int v36 = *((_DWORD *)v40 + 6);
            unint64_t v41 = *((void *)v40 + 1);
            if (v22 > v41 || v22 == v41 && a5 >= *((void *)&__bid_nr_digits + 4 * v39 + 2)) {
              ++v36;
            }
          }
        }
        int v42 = v24 | a7;
        if (v24 | a7)
        {
          unint64_t v43 = HIDWORD(a7);
          if (!(a7 >> 53)) {
            unint64_t v43 = a7;
          }
          uint64_t v44 = -1022;
          if (a7 >> 53) {
            uint64_t v44 = -990;
          }
          if (v24)
          {
            unint64_t v43 = v24;
            uint64_t v44 = -958;
          }
          unint64_t v45 = ((COERCE_UNSIGNED_INT64((double)v43) >> 52) & 0x7FF) + v44 - 1;
          int v42 = *((_DWORD *)&__bid_nr_digits + 8 * v45);
          if (!v42)
          {
            char v46 = (char *)&__bid_nr_digits + 32 * v45;
            int v42 = *((_DWORD *)v46 + 6);
            unint64_t v47 = *((void *)v46 + 1);
            if (v24 > v47 || v24 == v47 && a7 >= *((void *)&__bid_nr_digits + 4 * v45 + 2)) {
              ++v42;
            }
          }
        }
        if (v26 | v28)
        {
          unint64_t v48 = HIDWORD(v28);
          if (!(v28 >> 53)) {
            unint64_t v48 = v28;
          }
          uint64_t v49 = -1022;
          if (v28 >> 53) {
            uint64_t v49 = -990;
          }
          if (v26)
          {
            unint64_t v48 = v26;
            uint64_t v49 = -958;
          }
          unint64_t v50 = ((COERCE_UNSIGNED_INT64((double)v48) >> 52) & 0x7FF) + v49 - 1;
          uint64_t v51 = *((unsigned int *)&__bid_nr_digits + 8 * v50);
          if (!v51)
          {
            int v52 = (char *)&__bid_nr_digits + 32 * v50;
            uint64_t v51 = *((unsigned int *)v52 + 6);
            unint64_t v53 = *((void *)v52 + 1);
            if (v26 > v53 || v26 == v53 && v28 >= *((void *)&__bid_nr_digits + 4 * v50 + 2)) {
              uint64_t v51 = (v51 + 1);
            }
          }
        }
        else
        {
          uint64_t v51 = 0;
        }
        if (!(v22 | a5) || !(v24 | a7))
        {
          BOOL v179 = v27 >= v35;
          unint64_t v54 = v27 - v35;
          if (v54 != 0 && v179)
          {
            unint64_t v55 = v54 >> 49;
            if (34 - (int)v51 >= (int)v55) {
              unint64_t v55 = v55;
            }
            else {
              unint64_t v55 = (34 - v51);
            }
            if (v55)
            {
              if ((int)v51 > 19)
              {
                uint64_t v74 = __bid_ten2k64[(int)v55];
                unint64_t v75 = HIDWORD(v74) * (unint64_t)v28;
                unint64_t v76 = v74 * (unint64_t)HIDWORD(v28)
                    + v75
                    + ((v74 * (unint64_t)v28) >> 32);
                *(void *)&unsigned long long v587 = (v74 * v28) | ((unint64_t)v76 << 32);
                unint64_t v16 = HIDWORD(v75) + HIDWORD(v74) * (unint64_t)HIDWORD(v28) + HIDWORD(v76) + v74 * v26;
              }
              else if ((int)v55 > 19)
              {
                unint64_t v80 = __bid_ten2k128[2 * (v55 - 20)];
                uint64_t v81 = __bid_ten2k128[2 * (v55 - 20) + 1];
                unint64_t v82 = HIDWORD(v80);
                unint64_t v83 = v80 * (unint64_t)HIDWORD(v28);
                unint64_t v84 = v80 * (unint64_t)v28;
                unint64_t v85 = v82 * (unint64_t)v28 + v83 + HIDWORD(v84);
                *(void *)&unsigned long long v587 = v84 | ((unint64_t)v85 << 32);
                unint64_t v16 = HIDWORD(v83) + v82 * (unint64_t)HIDWORD(v28) + HIDWORD(v85) + v81 * v28;
              }
              else
              {
                unint64_t v56 = __bid_ten2k64[(int)v55];
                unint64_t v57 = HIDWORD(v56);
                unint64_t v58 = v56 * (unint64_t)HIDWORD(v28);
                unint64_t v59 = v56 * (unint64_t)v28;
                unint64_t v60 = v57 * (unint64_t)v28 + v58 + HIDWORD(v59);
                unint64_t v16 = HIDWORD(v58) + v57 * (unint64_t)HIDWORD(v28) + HIDWORD(v60);
                *(void *)&unsigned long long v587 = v59 | ((unint64_t)v60 << 32);
              }
            }
            else
            {
              *(void *)&unsigned long long v587 = a9;
            }
            *((void *)&v587 + 1) = (v27 - (v55 << 49)) & 0x7FFE000000000000 | v16 | v29;
          }
          else
          {
            *(void *)&unsigned long long v587 = v28;
            *((void *)&v587 + 1) = v26 | v29 | v27;
          }
          goto LABEL_69;
        }
        int v61 = v33 + (v25 >> 49) - 6176;
        uint64_t v62 = (v42 + v36);
        if ((int)v62 <= 19)
        {
          uint64_t v63 = v51;
          unint64_t v64 = 0;
          unint64_t v65 = 0;
          unint64_t v66 = 0;
          unint64_t v67 = a7 * a5;
          uint64_t v68 = (int)v62 - 1;
          if (a7 * a5 >= __bid_ten2k64[v68]) {
            uint64_t v62 = v62;
          }
          else {
            uint64_t v62 = v68;
          }
          goto LABEL_217;
        }
        if (v62 == 20)
        {
          uint64_t v63 = v51;
          unint64_t v64 = 0;
          unint64_t v65 = 0;
          unint64_t v69 = a7 * (unint64_t)HIDWORD(a5);
          unint64_t v70 = HIDWORD(a7) * (unint64_t)a5
              + v69
              + ((a7 * (unint64_t)a5) >> 32);
          unint64_t v71 = HIDWORD(v69) + HIDWORD(a7) * (unint64_t)HIDWORD(a5) + HIDWORD(v70);
          unint64_t v67 = (a7 * a5) | ((unint64_t)v70 << 32);
          BOOL v72 = v71 == 0;
          BOOL v73 = v67 < 0x8AC7230489E80000;
          if (v72 && v73) {
            uint64_t v62 = 19;
          }
          else {
            uint64_t v62 = 20;
          }
          if (v72 && v73) {
            unint64_t v66 = 0;
          }
          else {
            unint64_t v66 = v71;
          }
          goto LABEL_217;
        }
        if (v62 <= 0x26)
        {
          if (v36 > 19)
          {
            unint64_t v77 = HIDWORD(a7) * (unint64_t)a5;
            unint64_t v78 = a7 * (unint64_t)HIDWORD(a5)
                + v77
                + ((a7 * (unint64_t)a5) >> 32);
            unint64_t v67 = (a7 * a5) | ((unint64_t)v78 << 32);
            unint64_t v79 = a7 * v22 + HIDWORD(a7) * (unint64_t)HIDWORD(a5);
          }
          else
          {
            unint64_t v77 = a7 * (unint64_t)HIDWORD(a5);
            unint64_t v78 = HIDWORD(a7) * (unint64_t)a5
                + v77
                + ((a7 * (unint64_t)a5) >> 32);
            unint64_t v67 = (a7 * a5) | ((unint64_t)v78 << 32);
            unint64_t v79 = v24 * a5 + HIDWORD(a7) * (unint64_t)HIDWORD(a5);
          }
          unint64_t v66 = v79 + HIDWORD(v77) + HIDWORD(v78);
          uint64_t v63 = v51;
          unint64_t v64 = 0;
          unint64_t v65 = 0;
          if (__PAIR128__(v66, v67) < *(_OWORD *)&__bid_ten2k128[2 * (v62 - 21)]) {
            uint64_t v62 = (v62 - 1);
          }
LABEL_217:
          int v192 = (v27 >> 49) - 6176;
          if (!(v26 | v28))
          {
            int v193 = *a12;
            *a12 = 0;
            int v570 = v193;
            if ((int)v62 < 35)
            {
              if (v61 < 6112 || (int)v62 + v61 > 6145)
              {
                *(void *)&unsigned long long v587 = v67;
                *((void *)&v587 + 1) = v66;
              }
              else
              {
                int v203 = v61 - 6111;
                if ((int)v62 > 19)
                {
                  uint64_t v237 = __bid_ten2k64[v203];
                  unint64_t v238 = HIDWORD(v237) * (unint64_t)v67;
                  unint64_t v239 = v237 * (unint64_t)HIDWORD(v67)
                       + v238
                       + ((v237 * (unint64_t)v67) >> 32);
                  *(void *)&unsigned long long v587 = (v237 * v67) | ((unint64_t)v239 << 32);
                  *((void *)&v587 + 1) = HIDWORD(v238)
                                         + HIDWORD(v237) * (unint64_t)HIDWORD(v67)
                                         + HIDWORD(v239)
                                         + v237 * v66;
                }
                else if (v61 > 0x17F2)
                {
                  unint64_t v253 = __bid_ten2k128[2 * (v61 - 6131)];
                  unint64_t v254 = HIDWORD(v253);
                  unint64_t v255 = v253 * (unint64_t)HIDWORD(v67);
                  unint64_t v256 = v253 * (unint64_t)v67;
                  unint64_t v257 = v254 * (unint64_t)v67 + v255 + HIDWORD(v256);
                  unint64_t v258 = HIDWORD(v255)
                       + v254 * (unint64_t)HIDWORD(v67)
                       + HIDWORD(v257)
                       + __bid_ten2k128[2 * (v61 - 6131) + 1] * v67;
                  *(void *)&unsigned long long v587 = v256 | ((unint64_t)v257 << 32);
                  *((void *)&v587 + 1) = v258;
                }
                else
                {
                  unint64_t v204 = __bid_ten2k64[v203];
                  unint64_t v205 = HIDWORD(v204);
                  unint64_t v206 = v204 * (unint64_t)HIDWORD(v67);
                  unint64_t v207 = v204 * (unint64_t)v67;
                  unint64_t v208 = v205 * (unint64_t)v67 + v206 + HIDWORD(v207);
                  *(void *)&unsigned long long v587 = v207 | ((unint64_t)v208 << 32);
                  *((void *)&v587 + 1) = HIDWORD(v206)
                                         + v205 * (unint64_t)HIDWORD(v67)
                                         + HIDWORD(v208);
                }
                uint64_t v62 = (v62 + v203);
                int v61 = 6111;
              }
            }
            else
            {
              int v194 = v62 - 34;
              int v195 = v61;
              if (v62 > 0x26)
              {
                *(void *)&unsigned long long v588 = v67;
                *((void *)&v588 + 1) = v66;
                if (v62 > 0x39)
                {
                  *(void *)&long long v589 = v65;
                  *((void *)&v589 + 1) = v64;
                  __bid_round256_58_76(v62, (v62 - 34), (unint64_t *)&v588, (unint64_t *)&v580, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                  unsigned long long v210 = v580;
                }
                else
                {
                  long long v589 = v65;
                  __bid_round192_39_57(v62, v62 - 34, (unint64_t *)&v588, (unint64_t *)v590, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                  unsigned long long v210 = v590[0];
                }
                unsigned long long v587 = v210;
              }
              else
              {
                *(void *)&unsigned long long v583 = v67;
                *((void *)&v583 + 1) = v66;
                __bid_round128_19_38(v62, v62 - 34, v67, v66, (unint64_t *)&v587, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
              }
              int v61 = v194 + v195;
              if (v585)
              {
                int v193 = v570;
                if (v61 == -6177)
                {
                  *a12 |= 0x30u;
                  uint64_t v62 = 34;
                  int v61 = -6176;
                }
                else
                {
                  ++v61;
                  uint64_t v62 = 34;
                }
              }
              else
              {
                uint64_t v62 = 34;
                int v193 = v570;
              }
            }
            if ((int)v62 + v61 >= 6146)
            {
              if (a11)
              {
                *((void *)&v587 + 1) |= v30;
                int v21 = v586;
                int v234 = DWORD1(v586);
                int v260 = DWORD2(v586);
                int v259 = HIDWORD(v586);
                bid_rounding_correction(a11, SDWORD1(v586), v586, SHIDWORD(v586), SDWORD2(v586), v61, (uint64_t *)&v587, a12);
                int v261 = *a12;
              }
              else
              {
                *(void *)&unsigned long long v587 = 0;
                *((void *)&v587 + 1) = v30 | 0x7800000000000000;
                int v261 = *a12 | 0x28;
                int v260 = DWORD2(v586);
                int v259 = HIDWORD(v586);
                int v21 = v586;
                int v234 = DWORD1(v586);
              }
              *a12 = v261 | v193;
              *a1 = v259;
              *a2 = v260;
              goto LABEL_752;
            }
            if ((int)v62 + v61 <= -6143)
            {
              if (v61 <= -6177)
              {
                int v262 = -6176 - v61;
                int v263 = v586;
                int v568 = DWORD1(v586);
                int v265 = DWORD2(v586);
                int v264 = HIDWORD(v586);
                long long v586 = 0uLL;
                int v266 = v62 - (-6176 - v61);
                if ((int)v62 > -6176 - v61)
                {
                  if ((int)v62 <= 18)
                  {
                    __bid_round64_2_18(v62, v262, v587, &v584, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                    uint64_t v267 = &__bid_ten2k64[v266];
                    if (!v585) {
                      uint64_t v267 = &v584;
                    }
                    unint64_t v268 = *v267;
LABEL_462:
                    *(void *)&unsigned long long v587 = v268;
                    goto LABEL_602;
                  }
                  __bid_round128_19_38(v62, v262, v587, *((unint64_t *)&v587 + 1), (unint64_t *)&v587, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                  if (v585)
                  {
                    if (v266 > 19)
                    {
                      unsigned long long v587 = *(_OWORD *)&__bid_ten2k128[2 * (v266 - 20)];
                      goto LABEL_602;
                    }
                    unint64_t v268 = __bid_ten2k64[v266];
                    goto LABEL_462;
                  }
LABEL_602:
                  if (v263 | v264 && HIDWORD(v586))
                  {
                    uint64_t v443 = v587;
                    *(void *)&unsigned long long v587 = v587 - 1;
                    if (!v443) {
                      --*((void *)&v587 + 1);
                    }
                    HIDWORD(v586) = 0;
                  }
                  else
                  {
                    if (v568 | v265 && DWORD2(v586))
                    {
                      BOOL v179 = __CFADD__((void)v587, 1);
                      *(void *)&unsigned long long v587 = v587 + 1;
                      if (v179) {
                        ++*((void *)&v587 + 1);
                      }
                      DWORD2(v586) = 0;
                      LODWORD(v586) = 1;
                      goto LABEL_626;
                    }
                    if (v586 != 0)
                    {
                      BOOL v444 = (v263 | v264) == 0;
                      if (!DWORD2(v586)) {
                        BOOL v444 = 1;
                      }
                      if (v444)
                      {
                        BOOL v445 = (v568 | v265) == 0;
                        if (!HIDWORD(v586)) {
                          BOOL v445 = 1;
                        }
                        if (v445) {
                          goto LABEL_626;
                        }
                        *(void *)&long long v586 = 1;
                      }
                      else
                      {
                        *(void *)&long long v586 = 0x100000000;
                      }
                      *((void *)&v586 + 1) = 0;
LABEL_626:
                      int v61 = -6176;
                      goto LABEL_627;
                    }
                    LODWORD(v586) = (v263 | v264) != 0;
                    if (!(v568 | v265)) {
                      goto LABEL_626;
                    }
                  }
                  DWORD1(v586) = 1;
                  goto LABEL_626;
                }
                if (v62 != v262)
                {
                  unsigned long long v587 = 0uLL;
                  DWORD1(v586) = 1;
                  goto LABEL_602;
                }
                if ((int)v62 > 19)
                {
                  unint64_t v404 = (unint64_t *)&__bid_midpoint128[(v62 - 20)];
                  unint64_t v405 = v404[1];
                  if (*((void *)&v587 + 1) >= v405)
                  {
                    if (*((void *)&v587 + 1) != v405) {
                      goto LABEL_600;
                    }
                    unint64_t v442 = *v404;
                    if ((unint64_t)v587 >= v442)
                    {
                      if ((void)v587 == v442) {
                        goto LABEL_370;
                      }
                      goto LABEL_600;
                    }
                  }
                }
                else
                {
                  unint64_t v292 = __bid_midpoint64[(v62 - 1)];
                  if ((unint64_t)v587 >= v292)
                  {
                    if ((void)v587 == v292)
                    {
LABEL_370:
                      uint64_t v293 = 0;
                      DWORD2(v586) = 1;
LABEL_601:
                      unsigned long long v587 = (unint64_t)v293;
                      goto LABEL_602;
                    }
LABEL_600:
                    uint64_t v293 = 1;
                    LODWORD(v586) = 1;
                    goto LABEL_601;
                  }
                }
                uint64_t v293 = 0;
                DWORD1(v586) = 1;
                goto LABEL_601;
              }
              int v276 = v61 - v192;
              if (v61 <= v192)
              {
LABEL_627:
                int v21 = v586;
                int v234 = DWORD1(v586);
                int v447 = DWORD2(v586);
                int v446 = HIDWORD(v586);
                if (v586 != 0) {
                  *a12 |= 0x30u;
                }
                *((void *)&v587 + 1) |= ((unint64_t)(v61 + 6176) << 49) | v30;
                if (a11) {
                  bid_rounding_correction(a11, v234, v21, v446, v447, v61, (uint64_t *)&v587, a12);
                }
                *a12 |= v570;
                *a1 = v446;
                *a2 = v447;
                goto LABEL_752;
              }
              if (v276 >= 34 - (int)v62) {
                int v276 = 34 - v62;
              }
              if (v276)
              {
                if ((int)v62 > 19)
                {
                  uint64_t v383 = __bid_ten2k64[v276];
                  unint64_t v384 = v587 * (unint64_t)HIDWORD(v383);
                  unint64_t v385 = DWORD1(v587) * (unint64_t)v383
                       + v384
                       + ((v587 * (unint64_t)v383) >> 32);
                  unint64_t v386 = (v587 * v383) | ((unint64_t)v385 << 32);
                  unint64_t v387 = HIDWORD(v384)
                       + DWORD1(v587) * (unint64_t)HIDWORD(v383)
                       + HIDWORD(v385)
                       + *((void *)&v587 + 1) * v383;
                  *(void *)&unsigned long long v587 = v386;
                }
                else
                {
                  if (v276 <= 19)
                  {
                    unint64_t v277 = DWORD1(v587);
                    uint64_t v278 = __bid_ten2k64[v276];
                    unint64_t v279 = v278 * (unint64_t)DWORD1(v587);
                    unint64_t v280 = HIDWORD(v278) * (unint64_t)v587
                         + v279
                         + ((v278 * (unint64_t)v587) >> 32);
                    *(void *)&unsigned long long v587 = (v278 * v587) | ((unint64_t)v280 << 32);
                    *((void *)&v587 + 1) = HIDWORD(v279)
                                           + HIDWORD(v278) * (unint64_t)v277
                                           + HIDWORD(v280);
                    goto LABEL_574;
                  }
                  unint64_t v430 = __bid_ten2k128[2 * (v276 - 20)];
                  unint64_t v431 = HIDWORD(v430);
                  unint64_t v432 = v430 * (unint64_t)DWORD1(v587);
                  unint64_t v433 = v430 * (unint64_t)v587;
                  unint64_t v434 = v431 * (unint64_t)v587 + v432 + HIDWORD(v433);
                  unint64_t v387 = HIDWORD(v432)
                       + v431 * (unint64_t)DWORD1(v587)
                       + HIDWORD(v434)
                       + __bid_ten2k128[2 * (v276 - 20) + 1] * v587;
                  *(void *)&unsigned long long v587 = v433 | ((unint64_t)v434 << 32);
                }
                *((void *)&v587 + 1) = v387;
              }
LABEL_574:
              v61 -= v276;
              goto LABEL_627;
            }
            unint64_t v557 = v30;
            *((void *)&v587 + 1) |= ((unint64_t)(v61 + 6176) << 49) | v30;
            int v21 = v586;
            int v269 = DWORD1(v586);
            int v271 = DWORD2(v586);
            int v270 = HIDWORD(v586);
            if (!a11)
            {
              int v275 = 32;
              goto LABEL_355;
            }
            int v569 = v62;
            int v577 = DWORD1(v586);
            int v272 = HIDWORD(v586);
            int v273 = DWORD2(v586);
            int v274 = v61;
            bid_rounding_correction(a11, SDWORD1(v586), v586, SHIDWORD(v586), SDWORD2(v586), v61, (uint64_t *)&v587, a12);
            if (v274 == -6176)
            {
              LODWORD(v62) = v569;
              int v269 = v577;
              int v270 = v272;
              int v271 = v273;
              if ((*((void *)&v587 + 1) & 0x1FFFFFFFFFFFFuLL) < 0x314DC6448D93) {
                goto LABEL_342;
              }
              int v275 = 32;
              if ((*((void *)&v587 + 1) & 0x1FFFFFFFFFFFFLL) == 0x314DC6448D93)
              {
                LODWORD(v62) = v569;
                int v269 = v577;
                int v270 = v272;
                int v271 = v273;
                if ((unint64_t)v587 >= 0x38C15B0A00000000)
                {
LABEL_355:
                  if (!(v269 | v21 | v270 | v271)) {
                    int v275 = 0;
                  }
                  int v281 = *a12 | v275;
                  if ((v281 & 0x20) == 0 && (*((void *)&v587 + 1) & 0x7FFE000000000000uLL) > v27)
                  {
                    unint64_t v282 = ((*((void *)&v587 + 1) & 0x7FFE000000000000) - v27) >> 49;
                    if (34 - (int)v62 < (int)v282) {
                      LODWORD(v282) = 34 - v62;
                    }
                    if (v282)
                    {
                      uint64_t v283 = (int)v282;
                      uint64_t v284 = *((void *)&v587 + 1) - ((uint64_t)(int)v282 << 49);
                      if ((int)v62 > 19)
                      {
                        uint64_t v388 = __bid_ten2k64[v283];
                        unint64_t v389 = DWORD1(v587);
                        unint64_t v390 = HIDWORD(v388) * (unint64_t)v587;
                        unint64_t v391 = v388 * (unint64_t)DWORD1(v587)
                             + v390
                             + ((v388 * (unint64_t)v587) >> 32);
                        *(void *)&unsigned long long v587 = (v388 * v587) | ((unint64_t)v391 << 32);
                        unint64_t v290 = HIDWORD(v390)
                             + HIDWORD(v388) * (unint64_t)v389
                             + HIDWORD(v391)
                             + v388 * (*((void *)&v587 + 1) & 0x1FFFFFFFFFFFFLL);
                      }
                      else
                      {
                        if ((int)v283 > 19)
                        {
                          unint64_t v435 = __bid_ten2k128[2 * (v283 - 20)];
                          unint64_t v436 = HIDWORD(v435);
                          unint64_t v437 = v435 * (unint64_t)DWORD1(v587);
                          unint64_t v438 = v435 * (unint64_t)v587;
                          unint64_t v439 = v436 * (unint64_t)v587
                               + v437
                               + HIDWORD(v438);
                          unint64_t v291 = v438 | ((unint64_t)v439 << 32);
                          unint64_t v290 = HIDWORD(v437)
                               + v436 * (unint64_t)DWORD1(v587)
                               + HIDWORD(v439)
                               + __bid_ten2k128[2 * (v283 - 20) + 1] * v587;
                        }
                        else
                        {
                          unint64_t v285 = __bid_ten2k64[v283];
                          unint64_t v286 = HIDWORD(v285);
                          unint64_t v287 = v285 * (unint64_t)DWORD1(v587);
                          unint64_t v288 = v285 * (unint64_t)v587;
                          unint64_t v289 = v286 * (unint64_t)v587
                               + v287
                               + HIDWORD(v288);
                          unint64_t v290 = HIDWORD(v287) + v286 * (unint64_t)DWORD1(v587) + HIDWORD(v289);
                          unint64_t v291 = v288 | ((unint64_t)v289 << 32);
                        }
                        *(void *)&unsigned long long v587 = v291;
                      }
                      *((void *)&v587 + 1) = v284 & 0x7FFE000000000000 | v290 | v557;
                    }
                  }
                  *a12 = v281 | v570;
                  *a1 = v270;
                  *a2 = v271;
                  *a3 = v269;
                  goto LABEL_72;
                }
LABEL_342:
                int v275 = 48;
                goto LABEL_355;
              }
            }
            else
            {
              int v275 = 32;
            }
            LODWORD(v62) = v569;
            int v269 = v577;
            int v270 = v272;
            int v271 = v273;
            goto LABEL_355;
          }
          unint64_t v571 = v28;
          uint64_t v196 = v63;
          unsigned int v197 = v192 + v63 - v61 - v62;
          if ((v197 & 0x80000000) == 0)
          {
            unint64_t v198 = 0;
            int v199 = v192 + v63 - v61 - v62;
            int v200 = v61;
            int v61 = (v27 >> 49) - 6176;
            uint64_t v201 = v62;
            uint64_t v62 = v196;
            unint64_t v553 = v66;
            unint64_t v566 = v67;
            unint64_t v66 = v26;
            unint64_t v67 = v571;
            unint64_t v202 = v30;
            unint64_t v30 = a10 & 0x8000000000000000;
LABEL_278:
            *(void *)&unsigned long long v583 = v198;
            unint64_t v560 = v66;
            unint64_t v563 = v67;
            uint64_t v572 = v201;
            if (v199 > 0x22)
            {
              if ((int)v62 + v61 >= 6146)
              {
                if (a11)
                {
                  int v21 = v202 != v30;
                  int v234 = v202 == v30;
                  uint64_t v235 = 34 - (int)v62;
                  if (v62 == 34)
                  {
                    unint64_t v236 = v30 | v66;
                    *(void *)&unsigned long long v587 = v67;
                  }
                  else if ((int)v62 > 19)
                  {
                    uint64_t v350 = __bid_ten2k64[(int)v235];
                    unint64_t v351 = HIDWORD(v350) * (unint64_t)v67;
                    unint64_t v352 = v350 * (unint64_t)HIDWORD(v67)
                         + v351
                         + ((v350 * (unint64_t)v67) >> 32);
                    *(void *)&unsigned long long v587 = (v350 * v67) | ((unint64_t)v352 << 32);
                    unint64_t v236 = HIDWORD(v351) + HIDWORD(v350) * (unint64_t)HIDWORD(v67) + HIDWORD(v352) + v350 * v66;
                  }
                  else if ((int)v62 < 15)
                  {
                    unint64_t v398 = __bid_ten2k128[2 * (14 - v62)];
                    uint64_t v399 = __bid_ten2k128[2 * (14 - v62) + 1];
                    unint64_t v400 = HIDWORD(v398);
                    unint64_t v401 = v398 * (unint64_t)HIDWORD(v67);
                    unint64_t v402 = v398 * (unint64_t)v67;
                    unint64_t v403 = v400 * (unint64_t)v67 + v401 + HIDWORD(v402);
                    *(void *)&unsigned long long v587 = v402 | ((unint64_t)v403 << 32);
                    unint64_t v236 = HIDWORD(v401)
                         + v400 * (unint64_t)HIDWORD(v67)
                         + HIDWORD(v403)
                         + v399 * v67;
                  }
                  else
                  {
                    unint64_t v248 = __bid_ten2k64[v235];
                    unint64_t v249 = HIDWORD(v248);
                    unint64_t v250 = v248 * (unint64_t)HIDWORD(v67);
                    unint64_t v251 = v248 * (unint64_t)v67;
                    unint64_t v252 = v249 * (unint64_t)v67 + v250 + HIDWORD(v251);
                    unint64_t v236 = HIDWORD(v250) + v249 * (unint64_t)HIDWORD(v67) + HIDWORD(v252);
                    *(void *)&unsigned long long v587 = v251 | ((unint64_t)v252 << 32);
                  }
                  *((void *)&v587 + 1) = v236 | v30;
                  bid_rounding_correction(a11, v234, v21, 0, 0, v61 - v235, (uint64_t *)&v587, a12);
                }
                else
                {
                  int v21 = 0;
                  int v234 = 0;
                  *(void *)&unsigned long long v587 = 0;
                  *((void *)&v587 + 1) = v30 | 0x7800000000000000;
                  *a12 |= 0x28u;
                }
                *a1 = 0;
LABEL_751:
                *a2 = 0;
LABEL_752:
                *a3 = v234;
                goto LABEL_72;
              }
LABEL_284:
              if ((int)v62 > 33)
              {
                LODWORD(v226) = 0;
                *(void *)&unsigned long long v587 = v67;
                *((void *)&v587 + 1) = v66 | ((unint64_t)(v61 + 6176) << 49) | v30;
              }
              else
              {
                LODWORD(v226) = 34 - v62;
                if (v61 + 6176 >= 34 - (int)v62) {
                  uint64_t v226 = v226;
                }
                else {
                  uint64_t v226 = (v61 + 6176);
                }
                if (v226)
                {
                  unint64_t v227 = v202;
                  if ((int)v62 > 19)
                  {
                    uint64_t v298 = __bid_ten2k64[(int)v226];
                    unint64_t v299 = HIDWORD(v298) * (unint64_t)v67;
                    unint64_t v300 = v298 * (unint64_t)HIDWORD(v67)
                         + v299
                         + ((v298 * (unint64_t)v67) >> 32);
                    *(void *)&unsigned long long v587 = (v298 * v67) | ((unint64_t)v300 << 32);
                    unint64_t v66 = HIDWORD(v299) + HIDWORD(v298) * (unint64_t)HIDWORD(v67) + HIDWORD(v300) + v298 * v66;
                  }
                  else if ((int)v226 > 19)
                  {
                    unint64_t v368 = __bid_ten2k128[2 * (v226 - 20)];
                    uint64_t v369 = __bid_ten2k128[2 * (v226 - 20) + 1];
                    unint64_t v370 = HIDWORD(v368);
                    unint64_t v371 = v368 * (unint64_t)HIDWORD(v67);
                    unint64_t v372 = v368 * (unint64_t)v67;
                    unint64_t v373 = v370 * (unint64_t)v67 + v371 + HIDWORD(v372);
                    *(void *)&unsigned long long v587 = v372 | ((unint64_t)v373 << 32);
                    unint64_t v66 = HIDWORD(v371)
                        + v370 * (unint64_t)HIDWORD(v67)
                        + HIDWORD(v373)
                        + v369 * v67;
                  }
                  else
                  {
                    unint64_t v228 = __bid_ten2k64[(int)v226];
                    unint64_t v229 = HIDWORD(v228);
                    unint64_t v230 = v228 * (unint64_t)HIDWORD(v67);
                    unint64_t v231 = v228 * (unint64_t)v67;
                    unint64_t v232 = v229 * (unint64_t)v67 + v230 + HIDWORD(v231);
                    unint64_t v66 = HIDWORD(v230) + v229 * (unint64_t)HIDWORD(v67) + HIDWORD(v232);
                    *(void *)&unsigned long long v587 = v231 | ((unint64_t)v232 << 32);
                  }
                  unint64_t v202 = v227;
                }
                else
                {
                  *(void *)&unsigned long long v587 = v67;
                }
                v61 -= v226;
                *((void *)&v587 + 1) = (v27 - (v226 << 49)) & 0x7FFE000000000000 | v66 | v30;
                if ((int)v226 + (int)v62 <= 33) {
                  *a12 |= 0x10u;
                }
              }
              int v374 = v226 + v62;
              if (v202 == v30)
              {
                int v375 = 0;
                int v21 = 0;
                int v234 = 1;
                goto LABEL_744;
              }
              if (v199 != v374 + 1)
              {
                int v375 = 0;
                int v234 = 0;
                int v21 = 1;
                goto LABEL_744;
              }
              unint64_t v547 = v202;
              int v552 = v61;
              unint64_t v376 = v64;
              if ((int)v62 > 19)
              {
                if (v62 == 20)
                {
                  int v375 = 0;
                  int v21 = 1;
                  if (v560 || v67 != 0x8AC7230489E80000)
                  {
                    int v234 = 0;
                    goto LABEL_743;
                  }
                  goto LABEL_494;
                }
                uint64_t v396 = &__bid_ten2k128[2 * (v62 - 21)];
                if (v560 != v396[1])
                {
LABEL_509:
                  int v375 = 0;
                  int v234 = 0;
                  int v21 = 1;
LABEL_743:
                  unint64_t v202 = v547;
LABEL_744:
                  int v473 = *a12;
                  *a12 |= 0x20u;
                  if (v61 != -6176 || v374 >= 34)
                  {
                    if (v61 != -6176 || v374 != 34) {
                      goto LABEL_748;
                    }
                    if (v202 == v30 || (*((void *)&v587 + 1) & 0x1FFFFFFFFFFFFLL) != 0x314DC6448D93)
                    {
                      int v61 = -6176;
                      goto LABEL_748;
                    }
                    int v61 = -6176;
                    if ((void)v587 != 0x38C15B0A00000000) {
                      goto LABEL_748;
                    }
                  }
                  int v474 = v473 | 0x30;
                  int v61 = -6176;
LABEL_747:
                  *a12 = v474;
LABEL_748:
                  if (a11) {
                    bid_rounding_correction(a11, v234, v21, v375, 0, v61, (uint64_t *)&v587, a12);
                  }
                  *a1 = v375;
                  goto LABEL_751;
                }
                uint64_t v377 = *v396;
              }
              else
              {
                uint64_t v377 = __bid_ten2k64[(int)v62 - 1];
              }
              if (v67 != v377) {
                goto LABEL_509;
              }
LABEL_494:
              uint64_t v378 = (v572 - 1);
              if (v572 == 1)
              {
                BOOL v379 = 0;
                BOOL v380 = 0;
                BOOL v381 = 0;
                BOOL v382 = 0;
              }
              else
              {
                if ((int)v572 > 18)
                {
                  if (v572 > 0x26)
                  {
                    *(void *)&unsigned long long v588 = v566;
                    *((void *)&v588 + 1) = v553;
                    if (v572 > 0x39)
                    {
                      *(void *)&long long v589 = v65;
                      *((void *)&v589 + 1) = v376;
                      uint64_t v397 = (uint64_t *)&v580;
                      __bid_round256_58_76(v572, v378, (unint64_t *)&v588, (unint64_t *)&v580, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                    }
                    else
                    {
                      long long v589 = v65;
                      uint64_t v397 = (uint64_t *)v590;
                      __bid_round192_39_57(v572, v378, (unint64_t *)&v588, (unint64_t *)v590, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                    }
                  }
                  else
                  {
                    *(void *)&unsigned long long v583 = v566;
                    *((void *)&v583 + 1) = v553;
                    uint64_t v397 = (uint64_t *)&v582;
                    __bid_round128_19_38(v572, v378, v566, v553, (unint64_t *)&v582, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                  }
                }
                else
                {
                  uint64_t v397 = (uint64_t *)&v584;
                  __bid_round64_2_18(v572, v378, v566, &v584, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                }
                uint64_t v469 = *v397;
                if (v585) {
                  uint64_t v469 = 10;
                }
                unint64_t v566 = v469;
                BOOL v382 = DWORD1(v586) != 0;
                BOOL v381 = v586 != 0;
                BOOL v380 = HIDWORD(v586) != 0;
                BOOL v379 = DWORD2(v586) != 0;
              }
              if (v566 != 5 || v382 || v381 || v380 || v379)
              {
                int v375 = 0;
                if (v566 != 5) {
                  BOOL v381 = 0;
                }
                int v21 = 1;
                if (v552 == -6176 || v566 < 5 || v381)
                {
                  int v234 = 0;
                }
                else
                {
                  if (v374 > 19)
                  {
                    v471 = &__bid_ten2k128[2 * (v374 - 20)];
                    uint64_t v470 = v471[1];
                  }
                  else
                  {
                    uint64_t v470 = 0;
                    v471 = &__bid_ten2k64[v374];
                  }
                  int v375 = 0;
                  int v21 = 0;
                  *(void *)&unsigned long long v587 = *v471 - 1;
                  *((void *)&v587 + 1) = v470 | ((unint64_t)(v552 + 6175) << 49) | v30;
                  int v234 = 1;
                  --v552;
                }
              }
              else
              {
                int v21 = 0;
                int v234 = 0;
                int v375 = 1;
              }
              int v472 = *a12;
              if (v552 != -6176)
              {
                int v474 = v472 | 0x20;
                int v61 = v552;
                goto LABEL_747;
              }
              *a12 = v472 | 0x10;
              int v61 = -6176;
              goto LABEL_743;
            }
            if (v199 == 34)
            {
              uint64_t v223 = 34 - (int)v62;
              if (v61 + 6176 >= (int)v223)
              {
                unint64_t v224 = v202;
                unint64_t v225 = v64;
                unint64_t v556 = v30;
                if (v62 == 34)
                {
                  *(void *)&unsigned long long v587 = v67;
                }
                else if ((int)v62 > 19)
                {
                  uint64_t v365 = __bid_ten2k64[(int)v223];
                  unint64_t v366 = HIDWORD(v365) * (unint64_t)v67;
                  unint64_t v367 = v365 * (unint64_t)HIDWORD(v67)
                       + v366
                       + ((v365 * (unint64_t)v67) >> 32);
                  *(void *)&unsigned long long v587 = (v365 * v67) | ((unint64_t)v367 << 32);
                  unint64_t v560 = HIDWORD(v366) + HIDWORD(v365) * (unint64_t)HIDWORD(v67) + HIDWORD(v367) + v365 * v560;
                  unint64_t v563 = v587;
                }
                else if ((int)v62 < 15)
                {
                  unint64_t v406 = __bid_ten2k128[2 * (14 - v62)];
                  uint64_t v407 = __bid_ten2k128[2 * (14 - v62) + 1];
                  unint64_t v408 = HIDWORD(v406);
                  unint64_t v409 = v406 * (unint64_t)HIDWORD(v67);
                  unint64_t v410 = v406 * (unint64_t)v67;
                  unint64_t v411 = v408 * (unint64_t)v67 + v409 + HIDWORD(v410);
                  *(void *)&unsigned long long v587 = v410 | ((unint64_t)v411 << 32);
                  unint64_t v560 = HIDWORD(v409)
                       + v408 * (unint64_t)HIDWORD(v67)
                       + HIDWORD(v411)
                       + v407 * v67;
                  unint64_t v563 = v587;
                }
                else
                {
                  uint64_t v295 = __bid_ten2k64[v223];
                  unint64_t v296 = v295 * (unint64_t)HIDWORD(v67);
                  unint64_t v297 = HIDWORD(v295) * (unint64_t)v67
                       + v296
                       + ((v295 * (unint64_t)v67) >> 32);
                  unint64_t v560 = HIDWORD(v296) + HIDWORD(v295) * (unint64_t)HIDWORD(v67) + HIDWORD(v297);
                  unint64_t v563 = (v295 * v67) | ((unint64_t)v297 << 32);
                  *(void *)&unsigned long long v587 = v563;
                }
                unint64_t v412 = v27 - (v223 << 49);
                int v413 = v61 - v223;
                if ((int)v572 <= 19)
                {
                  unint64_t v414 = __bid_midpoint64[(int)v572 - 1];
                  if (v566 < v414)
                  {
LABEL_521:
                    BOOL v415 = 0;
                    int v416 = 0;
                    BOOL v417 = 1;
                    int v234 = 1;
                    goto LABEL_540;
                  }
                  BOOL v417 = v566 == v414;
                  BOOL v415 = v566 != v414;
                  int v416 = 1;
                  int v234 = v415;
LABEL_540:
                  if (v224 == v30)
                  {
                    if ((v416 & 1) == 0)
                    {
                      int v424 = 0;
                      int v425 = 0;
                      int v21 = 0;
                      uint64_t v427 = v412 & 0x7FFE000000000000 | v560 | v224;
                      *((void *)&v587 + 1) = v427;
                      int v234 = 1;
                      goto LABEL_659;
                    }
                    if (v234)
                    {
                      if (!v417)
                      {
LABEL_544:
                        *(void *)&unsigned long long v587 = v563 + 1;
                        if (v563 == -1)
                        {
                          ++v560;
                        }
                        else if (v563 == 0x378D8E63FFFFFFFFLL && (v560 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0)
                        {
                          unint64_t v560 = 0x314DC6448D93;
                          __int16 v450 = v413++ + 6177;
                          unint64_t v412 = (unint64_t)(v450 & 0x3FFF) << 49;
                          *(void *)&unsigned long long v587 = 0x38C15B0A00000000;
                        }
                        int v424 = 0;
                        uint64_t v427 = v560 | v224 | v412 & 0x7FFE000000000000;
                        *((void *)&v587 + 1) = v427;
                        int v425 = v234 ^ 1;
                        int v21 = v234;
                        int v234 = 0;
LABEL_659:
                        int v451 = *a12;
                        *a12 |= 0x20u;
                        if (!a11 && v413 >= 6112)
                        {
                          *(void *)&unsigned long long v587 = 0;
                          *((void *)&v587 + 1) = v224 | 0x7800000000000000;
                          int v452 = v451 | 0x28;
                          goto LABEL_662;
                        }
                        if (!a11)
                        {
LABEL_828:
                          *((void *)&v587 + 1) = v427 | v412 & 0x7FFE000000000000 | v556;
                          goto LABEL_829;
                        }
                        goto LABEL_671;
                      }
                    }
                    else if ((v415 | v563))
                    {
                      goto LABEL_544;
                    }
                    int v425 = 0;
                    int v21 = 0;
                    int v234 = 0;
                    uint64_t v427 = v412 & 0x7FFE000000000000 | v560 | v224;
                    *((void *)&v587 + 1) = v427;
                    int v424 = 1;
                    goto LABEL_659;
                  }
                  if (v560 == 0x314DC6448D93 && v563 == 0x38C15B0A00000000)
                  {
                    unint64_t v564 = v412 >> 49;
                    if (!(v412 >> 49))
                    {
                      if (v417) {
                        uint64_t v440 = 0x38C15B0A00000000;
                      }
                      else {
                        uint64_t v440 = 0x38C15B09FFFFFFFFLL;
                      }
                      uint64_t v427 = v412 & 0x7FFE000000000000 | v30 | 0x314DC6448D93;
                      *(void *)&unsigned long long v587 = v440;
                      *((void *)&v587 + 1) = v427;
                      *a12 |= 0x10u;
                      int v425 = v234 ^ 1;
                      int v21 = v234 & (v416 ^ 1);
                      v234 &= v416;
                      if (!a11)
                      {
                        int v424 = 0;
                        goto LABEL_825;
                      }
                      bid_rounding_correction(a11, v234, v21, v425, 0, -6176, (uint64_t *)&v587, a12);
                      int v424 = 0;
                      goto LABEL_587;
                    }
                    uint64_t v423 = (v572 - 1);
                    if (v572 == 1)
                    {
                      int v21 = 0;
                      int v234 = 0;
                      int v424 = 0;
                      int v425 = 0;
                      unint64_t v426 = 0x378D8E6400000000 - v566;
                      v412 -= 0x2000000000000;
                      uint64_t v427 = v556 | 0x1ED09BEAD87C0 | v412 & 0x7FFE000000000000;
LABEL_824:
                      *(void *)&unsigned long long v587 = v426;
                      *((void *)&v587 + 1) = v427;
LABEL_825:
                      if (v234 | v424 | v21 | v425) {
                        *a12 |= 0x20u;
                      }
                      else {
                        int v424 = 0;
                      }
                      goto LABEL_828;
                    }
                    if ((int)v572 > 18)
                    {
                      if (v572 > 0x26)
                      {
                        *(void *)&unsigned long long v588 = v566;
                        *((void *)&v588 + 1) = v553;
                        if (v572 > 0x39)
                        {
                          *(void *)&long long v589 = v65;
                          *((void *)&v589 + 1) = v225;
                          __bid_round256_58_76(v572, v423, (unint64_t *)&v588, (unint64_t *)&v580, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                          unint64_t v459 = v580;
                        }
                        else
                        {
                          long long v589 = v65;
                          __bid_round192_39_57(v572, v423, (unint64_t *)&v588, (unint64_t *)v590, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                          unint64_t v459 = *(void *)&v590[0];
                        }
                      }
                      else
                      {
                        *(void *)&unsigned long long v583 = v566;
                        *((void *)&v583 + 1) = v553;
                        __bid_round128_19_38(v572, v423, v566, v553, (unint64_t *)&v582, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                        unint64_t v459 = v582;
                      }
                      unint64_t v584 = v459;
                    }
                    else
                    {
                      __bid_round64_2_18(v572, v423, v566, &v584, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                    }
                    int v424 = DWORD2(v586);
                    int v425 = HIDWORD(v586);
                    if (v586 == 0)
                    {
                      int v21 = 0;
                      int v234 = 0;
                      int v424 = 0;
                      int v425 = 0;
                      v412 -= 0x2000000000000;
                      uint64_t v427 = v556 | 0x1ED09BEAD87C0 | v412 & 0x7FFE000000000000;
                      unint64_t v426 = 0x378D8E6400000000 - v584;
                      goto LABEL_824;
                    }
                    if (v585) {
                      uint64_t v492 = 0x378D8E63FFFFFFF6;
                    }
                    else {
                      uint64_t v492 = 0x378D8E6400000000 - v584;
                    }
                    *(void *)&unsigned long long v587 = v492;
                    *((void *)&v587 + 1) = 0x1ED09BEAD87C0;
                    int v413 = v564 - 6177;
                    if (DWORD1(v586))
                    {
                      int v234 = 0;
                      int v21 = 1;
                    }
                    else
                    {
                      int v21 = 0;
                      if (v586)
                      {
                        int v234 = 1;
                      }
                      else
                      {
                        int v234 = 0;
                        int v424 = HIDWORD(v586) != 0;
                        if (HIDWORD(v586)) {
                          int v425 = 0;
                        }
                        else {
                          int v425 = DWORD2(v586) != 0;
                        }
                      }
                    }
                    if (v564 <= 0x3000)
                    {
                      *a12 |= 0x20u;
                      uint64_t v427 = ((v412 & 0xFFFE000000000000) - 0x12F641527840) | v556;
                      *((void *)&v587 + 1) = v427;
                      if (!a11) {
                        goto LABEL_588;
                      }
                      bid_rounding_correction(a11, v234, v21, v425, v424, v413, (uint64_t *)&v587, a12);
LABEL_587:
                      uint64_t v427 = *((void *)&v587 + 1);
LABEL_588:
                      unint64_t v412 = v427 & 0x7FFE000000000000;
                      goto LABEL_825;
                    }
LABEL_668:
                    if (a11)
                    {
                      bid_rounding_correction(a11, v234, v21, v425, v424, v413, (uint64_t *)&v587, a12);
                      goto LABEL_829;
                    }
                    *(void *)&unsigned long long v587 = 0;
                    *((void *)&v587 + 1) = v556 | 0x7800000000000000;
                    int v452 = *a12 | 0x28;
LABEL_662:
                    *a12 = v452;
LABEL_829:
                    *a1 = v425;
                    *a2 = v424;
                    goto LABEL_752;
                  }
                  if (v416)
                  {
                    if (v234)
                    {
                      if (!v417)
                      {
LABEL_555:
                        int v425 = 0;
                        int v21 = 0;
                        uint64_t v427 = v412 & 0x7FFE000000000000 | v556 | ((__PAIR128__(v560, v563) - 1) >> 64);
                        *(void *)&unsigned long long v587 = v563 - 1;
                        *((void *)&v587 + 1) = v427;
                        int v424 = v234 ^ 1;
                        goto LABEL_667;
                      }
                    }
                    else if ((v415 | v563))
                    {
                      goto LABEL_555;
                    }
                    int v424 = 0;
                    int v21 = 0;
                    int v234 = 0;
                    uint64_t v427 = v30 | v560 | v412 & 0x7FFE000000000000;
                    *((void *)&v587 + 1) = v427;
                    int v425 = 1;
                  }
                  else
                  {
                    int v424 = 0;
                    int v425 = 0;
                    int v234 = 0;
                    uint64_t v427 = v556 | v560 | v412 & 0x7FFE000000000000;
                    *((void *)&v587 + 1) = v427;
                    int v21 = 1;
                  }
LABEL_667:
                  if (v413 < 6112)
                  {
                    *a12 |= 0x20u;
                    if (!a11)
                    {
LABEL_672:
                      unint64_t v412 = v427 & 0x7FFE000000000000;
                      goto LABEL_828;
                    }
LABEL_671:
                    bid_rounding_correction(a11, v234, v21, v425, v424, v413, (uint64_t *)&v587, a12);
                    uint64_t v427 = *((void *)&v587 + 1);
                    goto LABEL_672;
                  }
                  goto LABEL_668;
                }
                if (v572 > 0x26)
                {
                  if (v572 > 0x3A)
                  {
                    unsigned long long v418 = (unint64_t *)((char *)&__bid_midpoint256 + 32 * (v572 - 59));
                    unint64_t v421 = v418[3];
                    if (v64 < v421) {
                      goto LABEL_521;
                    }
                    if (v64 != v421) {
                      goto LABEL_538;
                    }
                  }
                  else
                  {
                    if (v64) {
                      goto LABEL_538;
                    }
                    unsigned long long v418 = (unint64_t *)((char *)&__bid_midpoint192 + 32 * (v572 - 39));
                  }
                  unint64_t v422 = v418[2];
                  if (v65 < v422) {
                    goto LABEL_521;
                  }
                  if (v65 != v422) {
                    goto LABEL_538;
                  }
                }
                else
                {
                  if (v65) {
                    goto LABEL_538;
                  }
                  unsigned long long v418 = (unint64_t *)&__bid_midpoint128[(v572 - 20)];
                }
                unint64_t v419 = v418[1];
                if (v553 < v419) {
                  goto LABEL_521;
                }
                if (v553 == v419)
                {
                  unint64_t v420 = *v418;
                  if (v566 < v420) {
                    goto LABEL_521;
                  }
                  if (v566 == v420)
                  {
                    BOOL v415 = 0;
                    int v234 = 0;
                    BOOL v417 = 1;
LABEL_539:
                    int v416 = 1;
                    goto LABEL_540;
                  }
                }
LABEL_538:
                BOOL v417 = 0;
                BOOL v415 = 1;
                int v234 = 1;
                goto LABEL_539;
              }
              goto LABEL_284;
            }
            int v233 = v201 + v199;
            unint64_t v540 = v64;
            unint64_t v542 = v65;
            if ((int)v62 > v199 || v233 <= 34)
            {
              BOOL v240 = v233 > 34;
              if ((int)v62 <= v199) {
                BOOL v240 = v233 < 35;
              }
              if (v240 || (int)v62 > v199 && v233 < 35 || v233 < (int)v62)
              {
                BOOL v551 = v202 == v30;
                if (v199 > 1 || v202 == v30)
                {
                  unint64_t v558 = v30;
                  if (v233 < 35)
                  {
                    int v308 = v233 - v62;
                    if (v233 >= (int)v62)
                    {
                      unsigned int v309 = 0;
                    }
                    else
                    {
                      int v392 = v62 - v233;
                      if ((int)v572 > 19)
                      {
                        unsigned int v309 = 0;
                        int v308 = 0;
                        uint64_t v453 = __bid_ten2k64[v392];
                        unint64_t v454 = HIDWORD(v453) * (unint64_t)v566;
                        unint64_t v455 = v453 * (unint64_t)HIDWORD(v566)
                             + v454
                             + ((v453 * (unint64_t)v566) >> 32);
                        unint64_t v456 = (v453 * v566) | ((unint64_t)v455 << 32);
                        unint64_t v457 = HIDWORD(v454)
                             + HIDWORD(v453) * (unint64_t)HIDWORD(v566)
                             + HIDWORD(v455)
                             + v453 * v553;
                        unint64_t v566 = v456;
                        *(void *)&unsigned long long v583 = v456;
                        *((void *)&v583 + 1) = v457;
                        unint64_t v553 = v457;
                      }
                      else
                      {
                        unsigned int v309 = 0;
                        int v308 = 0;
                        if (v392 > 19)
                        {
                          unint64_t v465 = &__bid_ten2k128[2 * (v392 - 20)];
                          unint64_t v466 = *v465 * (unint64_t)HIDWORD(v566);
                          unint64_t v467 = HIDWORD(*v465) * (unint64_t)v566
                               + v466
                               + ((*v465 * (unint64_t)v566) >> 32);
                          unint64_t v468 = HIDWORD(v466)
                               + HIDWORD(*v465) * (unint64_t)HIDWORD(v566)
                               + HIDWORD(v467)
                               + v465[1] * v566;
                          *(void *)&unsigned long long v583 = (*v465 * v566) | ((unint64_t)v467 << 32);
                          *((void *)&v583 + 1) = v468;
                          unint64_t v553 = v468;
                        }
                        else
                        {
                          uint64_t v393 = __bid_ten2k64[v392];
                          unint64_t v394 = v393 * (unint64_t)HIDWORD(v566);
                          unint64_t v395 = HIDWORD(v393) * (unint64_t)v566
                               + v394
                               + ((v393 * (unint64_t)v566) >> 32);
                          unint64_t v553 = HIDWORD(v394) + HIDWORD(v393) * (unint64_t)HIDWORD(v566) + HIDWORD(v395);
                          *(void *)&unsigned long long v583 = (v393 * v566) | ((unint64_t)v395 << 32);
                          *((void *)&v583 + 1) = v553;
                        }
                        unint64_t v566 = v583;
                      }
                    }
                    goto LABEL_398;
                  }
LABEL_397:
                  unint64_t v558 = v30;
                  int v308 = 34 - v62;
                  unsigned int v309 = v233 - 34;
LABEL_398:
                  uint64_t v310 = 0;
                  uint64_t v311 = 0;
                  unint64_t v312 = v67;
                  unint64_t v546 = HIDWORD(v67);
                  uint64_t v313 = v309;
                  int v537 = v308 - 20;
                  v543 = &__bid_ten2k64[v308];
                  uint64_t v314 = v61 - (uint64_t)v308;
                  int v315 = v61 - v308;
                  if (v61 - v308 >= -6176) {
                    int v315 = -6176;
                  }
                  int v534 = v315;
                  int v535 = v572 - 20 - v309;
                  uint64_t v316 = v308;
                  unint64_t v536 = (int)v572 - (unint64_t)v309;
                  v538 = &__bid_ten2k64[(int)v572 - v309];
                  unint64_t v317 = v66;
                  uint64_t v544 = v308;
                  uint64_t v545 = v61 - (uint64_t)v308;
                  while (1)
                  {
                    if (v316 + v311)
                    {
                      if ((int)v62 > 19)
                      {
                        uint64_t v327 = v543[v311];
                        unint64_t v328 = HIDWORD(v327) * (unint64_t)v563;
                        unint64_t v329 = v327 * (unint64_t)v546
                             + v328
                             + ((v327 * (unint64_t)v563) >> 32);
                        *(void *)&unsigned long long v587 = (v327 * v563) | ((unint64_t)v329 << 32);
                        *((void *)&v587 + 1) = HIDWORD(v328)
                                               + HIDWORD(v327) * (unint64_t)v546
                                               + HIDWORD(v329)
                                               + v327 * v317;
                      }
                      else
                      {
                        if (v316 + v311 > 19)
                        {
                          unint64_t v330 = __bid_ten2k128[2 * (v537 + v311)];
                          unint64_t v331 = HIDWORD(v330);
                          unint64_t v332 = v330 * (unint64_t)v546;
                          unint64_t v333 = v330 * (unint64_t)v563;
                          unint64_t v334 = v331 * (unint64_t)v563;
                          unint64_t v335 = HIDWORD(v332) + v331 * (unint64_t)v546;
                          unint64_t v336 = v334 + v332 + HIDWORD(v333);
                          unint64_t v326 = v333 | ((unint64_t)v336 << 32);
                          unint64_t v325 = v335 + HIDWORD(v336) + __bid_ten2k128[2 * (v537 + v311) + 1] * v312;
                        }
                        else
                        {
                          unint64_t v318 = v543[v311];
                          unint64_t v319 = HIDWORD(v318);
                          unint64_t v320 = v318 * (unint64_t)v546;
                          unint64_t v321 = v318 * (unint64_t)v563;
                          unint64_t v322 = v319 * (unint64_t)v563;
                          unint64_t v323 = HIDWORD(v320) + v319 * (unint64_t)v546;
                          unint64_t v324 = v322 + v320 + HIDWORD(v321);
                          unint64_t v325 = v323 + HIDWORD(v324);
                          unint64_t v326 = v321 | ((unint64_t)v324 << 32);
                        }
                        *(void *)&unsigned long long v587 = v326;
                        *((void *)&v587 + 1) = v325;
                      }
                    }
                    else
                    {
                      *(void *)&unsigned long long v587 = v312;
                      *((void *)&v587 + 1) = v317;
                    }
                    if (v313 == v311)
                    {
                      *(void *)&long long v582 = v566;
                      *((void *)&v582 + 1) = v553;
                    }
                    else
                    {
                      uint64_t v337 = v62;
                      if ((int)v572 > 18)
                      {
                        if (v572 > 0x26)
                        {
                          uint64_t v339 = v313 + v310;
                          if (v572 > 0x39)
                          {
                            *(void *)&unsigned long long v588 = v566;
                            *((void *)&v588 + 1) = v553;
                            *(void *)&long long v589 = v542;
                            *((void *)&v589 + 1) = v540;
                            __bid_round256_58_76(v572, v339, (unint64_t *)&v588, (unint64_t *)&v580, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                            if (v585)
                            {
                              if ((uint64_t)(v536 + v311) > 19)
                              {
                                unsigned long long v580 = *(_OWORD *)&__bid_ten2k128[2 * (v535 + v311)];
                                uint64_t v340 = v580;
                              }
                              else
                              {
                                uint64_t v340 = v538[v311];
                                *(void *)&unsigned long long v580 = v340;
                              }
                            }
                            else
                            {
                              uint64_t v340 = v580;
                            }
                            uint64_t v341 = *((void *)&v580 + 1);
                          }
                          else
                          {
                            *(void *)&unsigned long long v588 = v566;
                            *((void *)&v588 + 1) = v553;
                            long long v589 = v542;
                            __bid_round192_39_57(v572, v339, (unint64_t *)&v588, (unint64_t *)v590, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                            if (v585)
                            {
                              if ((uint64_t)(v536 + v311) > 19)
                              {
                                v590[0] = *(_OWORD *)&__bid_ten2k128[2 * (v535 + v311)];
                                uint64_t v340 = *(void *)&v590[0];
                              }
                              else
                              {
                                uint64_t v340 = v538[v311];
                                *(void *)&v590[0] = v340;
                              }
                            }
                            else
                            {
                              uint64_t v340 = *(void *)&v590[0];
                            }
                            uint64_t v341 = *((void *)&v590[0] + 1);
                          }
                          *(void *)&long long v582 = v340;
                          *((void *)&v582 + 1) = v341;
                          unint64_t v317 = v560;
                          unint64_t v312 = v563;
                          uint64_t v62 = v337;
                          uint64_t v316 = v544;
                          uint64_t v314 = v545;
                        }
                        else
                        {
                          *(void *)&unsigned long long v583 = v566;
                          *((void *)&v583 + 1) = v553;
                          __bid_round128_19_38(v572, v313 + v310, v566, v553, (unint64_t *)&v582, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                          unint64_t v317 = v560;
                          unint64_t v312 = v563;
                          uint64_t v62 = v337;
                          uint64_t v316 = v544;
                          uint64_t v314 = v545;
                          if (v585)
                          {
                            if ((uint64_t)(v536 + v311) > 19) {
                              long long v582 = *(_OWORD *)&__bid_ten2k128[2 * (v535 + v311)];
                            }
                            else {
                              *(void *)&long long v582 = v538[v311];
                            }
                          }
                        }
                      }
                      else
                      {
                        __bid_round64_2_18(v572, v313 + v310, v566, &v584, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                        if (v585)
                        {
                          unint64_t v338 = v538[v311];
                          unint64_t v584 = v338;
                        }
                        else
                        {
                          unint64_t v338 = v584;
                        }
                        uint64_t v316 = v544;
                        uint64_t v314 = v545;
                        long long v582 = v338;
                        unint64_t v317 = v560;
                        unint64_t v312 = v563;
                        uint64_t v62 = v337;
                      }
                    }
                    uint64_t v342 = v314 + v310;
                    if (v551) {
                      break;
                    }
                    uint64_t v343 = v587;
                    unint64_t v344 = v587 - v582;
                    unint64_t v345 = (__PAIR128__(*((void *)&v587 + 1) - *((void *)&v582 + 1), v587) - (unint64_t)v582) >> 64;
                    unsigned long long v587 = __PAIR128__(*((void *)&v587 + 1) - *((void *)&v582 + 1), v587) - (unint64_t)v582;
                    if (v342 < -6175)
                    {
                      LODWORD(v342) = v534;
LABEL_476:
                      if (DWORD1(v586))
                      {
                        *(void *)&long long v586 = 1;
                        goto LABEL_876;
                      }
                      if (v586)
                      {
                        LODWORD(v586) = 0;
LABEL_499:
                        DWORD1(v586) = 1;
                        goto LABEL_876;
                      }
                      if ((v343 & 1) == 0)
                      {
                        if (HIDWORD(v586))
                        {
                          *((void *)&v586 + 1) = 1;
                        }
                        else if (DWORD2(v586))
                        {
                          *((void *)&v586 + 1) = 0x100000000;
                        }
                        goto LABEL_876;
                      }
                      if (HIDWORD(v586))
                      {
                        *(void *)&unsigned long long v587 = v344 + 1;
                        if (v344 == -1)
                        {
                          uint64_t v448 = v345 + 1;
                          goto LABEL_875;
                        }
                        if (v344 != 0x378D8E63FFFFFFFFLL || v345 != 0x1ED09BEAD87C0) {
                          goto LABEL_876;
                        }
                        goto LABEL_814;
                      }
                      int v487 = DWORD2(v586);
                      if (!DWORD2(v586)) {
                        goto LABEL_876;
                      }
                      unint64_t v488 = v344 - 1;
                      *(void *)&unsigned long long v587 = v488;
                      if (v343 == (void)v582)
                      {
                        uint64_t v448 = v345 - 1;
                        goto LABEL_875;
                      }
                      if (!(v345 | v488))
                      {
                        int v21 = 0;
                        unsigned long long v587 = 0uLL;
                        *a1 = 0;
                        *a2 = v487;
                        goto LABEL_71;
                      }
                      goto LABEL_876;
                    }
                    uint64_t v346 = v313 + v310;
                    if (v345 < 0x314DC6448D93 || v344 < 0x38C15B0A00000000 && v345 == 0x314DC6448D93)
                    {
                      if (v346 < 1) {
                        goto LABEL_476;
                      }
                    }
                    else if (v345 != 0x314DC6448D93 {
                           || v344 != 0x38C15B0A00000000
                    }
                           || *(void *)((char *)&v586 + 4) == 0
                           || v346 <= 0)
                    {
                      goto LABEL_476;
                    }
                    long long v586 = 0uLL;
                    ++v311;
                    --v310;
                    int v585 = 0;
                  }
                  char v353 = v587;
                  v587 += v582;
                  unsigned long long v354 = v587;
                  if (*((void *)&v587 + 1) > 0x1ED09BEAD87C0uLL
                    || (unint64_t)v587 > 0x378D8E63FFFFFFFFLL && *((void *)&v587 + 1) == 0x1ED09BEAD87C0)
                  {
                    int v355 = v586;
                    int v573 = DWORD1(v586);
                    int v356 = DWORD2(v586);
                    int v357 = HIDWORD(v586);
                    long long v586 = 0uLL;
                    unsigned long long v583 = v587;
                    __bid_round128_19_38(35, 1, v587, *((unint64_t *)&v587 + 1), (unint64_t *)&v587, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                    int v358 = HIDWORD(v586);
                    if (v355 | v357 && HIDWORD(v586))
                    {
                      uint64_t v359 = v587;
                      *(void *)&unsigned long long v587 = v587 - 1;
                      if (!v359) {
                        --*((void *)&v587 + 1);
                      }
                      int v358 = 0;
                      HIDWORD(v586) = 0;
                      int v360 = 1;
                      DWORD1(v586) = 1;
                      int v361 = DWORD2(v586);
                      int v362 = v586;
                      goto LABEL_802;
                    }
                    int v361 = DWORD2(v586);
                    if (v573 | v356 && DWORD2(v586))
                    {
                      BOOL v179 = __CFADD__((void)v587, 1);
                      *(void *)&unsigned long long v587 = v587 + 1;
                      if (v179) {
                        ++*((void *)&v587 + 1);
                      }
                      int v361 = 0;
                      DWORD2(v586) = 0;
                      int v362 = 1;
                      LODWORD(v586) = 1;
                      int v360 = DWORD1(v586);
                      goto LABEL_802;
                    }
                    int v362 = v586;
                    int v360 = DWORD1(v586);
                    if (v586 == 0)
                    {
                      if (v355 | v357)
                      {
                        int v362 = 1;
                        LODWORD(v586) = 1;
                      }
                      else
                      {
                        int v362 = 0;
                      }
                      if (v573 | v356)
                      {
                        int v361 = 0;
                        int v358 = 0;
                        int v360 = 1;
                        DWORD1(v586) = 1;
                      }
                      else
                      {
                        int v360 = 0;
                        int v361 = 0;
                        int v358 = 0;
                      }
                      goto LABEL_802;
                    }
                    BOOL v464 = (v355 | v357) == 0;
                    if (!DWORD2(v586)) {
                      BOOL v464 = 1;
                    }
                    if (v464)
                    {
                      BOOL v489 = (v573 | v356) == 0;
                      if (!HIDWORD(v586)) {
                        BOOL v489 = 1;
                      }
                      if (v489)
                      {
LABEL_802:
                        LODWORD(v342) = v342 + 1;
                        if (!v358 && !v361 && !v360 && !v362 && (v357 || v356 || v355 | v573)) {
                          goto LABEL_499;
                        }
                        goto LABEL_876;
                      }
                      int v360 = 0;
                      int v361 = 0;
                      int v358 = 0;
                      int v362 = 1;
                      *(void *)&long long v586 = 1;
                    }
                    else
                    {
                      int v362 = 0;
                      int v361 = 0;
                      int v358 = 0;
                      int v360 = 1;
                      *(void *)&long long v586 = 0x100000000;
                    }
                    *((void *)&v586 + 1) = 0;
                    goto LABEL_802;
                  }
                  if ((v353 & 1) == 0) {
                    goto LABEL_876;
                  }
                  if (DWORD2(v586))
                  {
                    *((void *)&v586 + 1) = 0x100000000;
                    *(void *)&unsigned long long v587 = v587 + 1;
                    if ((void)v354 == -1)
                    {
                      uint64_t v448 = *((void *)&v354 + 1) + 1;
LABEL_875:
                      *((void *)&v587 + 1) = v448;
                      goto LABEL_876;
                    }
                    if (v354 != __PAIR128__(0x1ED09BEAD87C0, 0x378D8E63FFFFFFFFLL)) {
                      goto LABEL_876;
                    }
LABEL_814:
                    unsigned long long v587 = xmmword_1BDDB5780;
                    LODWORD(v342) = v342 + 1;
                    goto LABEL_876;
                  }
                  if (!HIDWORD(v586)) {
                    goto LABEL_876;
                  }
                  *((void *)&v586 + 1) = 1;
                  *(void *)&unsigned long long v587 = v587 - 1;
                  if (!(void)v354)
                  {
                    uint64_t v448 = *((void *)&v354 + 1) - 1;
                    goto LABEL_875;
                  }
                  if (!(*((void *)&v354 + 1) | ((void)v354 - 1)))
                  {
                    unsigned long long v587 = 0uLL;
                    *a1 = 0;
                    int v294 = 1;
                    goto LABEL_375;
                  }
LABEL_876:
                  if (v342 == -6176)
                  {
                    if ((*((void *)&v587 + 1) & 0x1FFFFFFFFFFFFuLL) < 0x314DC6448D93
                      || (int v496 = 0, (*((void *)&v587 + 1) & 0x1FFFFFFFFFFFFLL) == 0x314DC6448D93)
                      && (unint64_t)v587 < 0x38C15B0A00000000)
                    {
                      int v496 = 1;
                    }
                    BOOL v497 = (*((void *)&v587 + 1) & 0x7FFFFFFFFFFFFFFFLL) == 0x314DC6448D93
                        && (void)v587 == 0x38C15B0A00000000;
                    int v498 = v551;
                    if (!v497) {
                      int v498 = 1;
                    }
                    if (v498) {
                      int v499 = v496;
                    }
                    else {
                      int v499 = 1;
                    }
LABEL_889:
                    LODWORD(v342) = -6176;
                    goto LABEL_895;
                  }
                  if ((int)v342 > -6177)
                  {
                    int v499 = 0;
LABEL_895:
                    int v21 = v586;
                    int v505 = DWORD1(v586);
                    int v506 = DWORD2(v586);
                    int v507 = HIDWORD(v586);
                    if (v586 != 0)
                    {
                      int v508 = *a12;
                      *a12 |= 0x20u;
                      if (v499) {
                        *a12 = v508 | 0x30;
                      }
                    }
                    if (v587 == __PAIR128__(0x1ED09BEAD87C0, 0x378D8E6400000000))
                    {
                      *(void *)&unsigned long long v587 = 0x38C15B0A00000000;
                      LODWORD(v342) = v342 + 1;
                      uint64_t v509 = 0x314DC6448D93;
                    }
                    else
                    {
                      uint64_t v509 = *((void *)&v587 + 1);
                    }
                    *((void *)&v587 + 1) = v509 | ((unint64_t)(v342 + 6176) << 49) | v558;
                    if (a11 || (int)v342 < 6112)
                    {
                      if (a11) {
                        bid_rounding_correction(a11, v505, v21, v507, v506, v342, (uint64_t *)&v587, a12);
                      }
                    }
                    else
                    {
                      *(void *)&unsigned long long v587 = 0;
                      *((void *)&v587 + 1) = v558 | 0x7800000000000000;
                      *a12 |= 0x28u;
                    }
                    *a1 = v507;
                    *a2 = v506;
                    *a3 = v505;
                    goto LABEL_72;
                  }
                  int v500 = -6176 - v342;
                  int v501 = v586;
                  int v576 = DWORD1(v586);
                  int v502 = DWORD2(v586);
                  int v503 = HIDWORD(v586);
                  long long v586 = 0uLL;
                  if (*((void *)&v587 + 1))
                  {
                    if (v587 >= __PAIR128__(5, 0x6BC75E2D63100000))
                    {
                      int v510 = &qword_1BDEEE628;
                      for (uint64_t i = 1; i != 19; ++i)
                      {
                        if (v587 < *(_OWORD *)(v510 - 1)) {
                          break;
                        }
                        v510 += 2;
                      }
                      uint64_t j = (i + 20);
                    }
                    else
                    {
                      uint64_t j = 20;
                    }
                  }
                  else
                  {
                    for (uint64_t j = 1; j != 20; ++j)
                    {
                      if ((unint64_t)v587 < __bid_ten2k64[j]) {
                        break;
                      }
                    }
                  }
                  int v512 = j - v500;
                  if (j == v500)
                  {
                    unsigned long long v587 = xmmword_1BDDB5790;
                    LODWORD(v586) = 1;
                  }
                  else if ((int)j > 18)
                  {
                    if (j <= 0x26)
                    {
                      unsigned long long v583 = v587;
                      __bid_round128_19_38(j, v500, v587, *((unint64_t *)&v587 + 1), (unint64_t *)&v587, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                      if (v585)
                      {
                        if (v512 > 19) {
                          unsigned long long v587 = *(_OWORD *)&__bid_ten2k128[2 * (v512 - 20)];
                        }
                        else {
                          *(void *)&unsigned long long v587 = __bid_ten2k64[v512];
                        }
                      }
                    }
                  }
                  else
                  {
                    __bid_round64_2_18(j, v500, v587, &v584, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                    if (v585) {
                      unint64_t v513 = &__bid_ten2k64[v512];
                    }
                    else {
                      unint64_t v513 = &v584;
                    }
                    unsigned long long v587 = *v513;
                  }
                  int v514 = HIDWORD(v586);
                  if (v501 | v503 && HIDWORD(v586))
                  {
                    uint64_t v515 = v587;
                    *(void *)&unsigned long long v587 = v587 - 1;
                    if (!v515) {
                      --*((void *)&v587 + 1);
                    }
                    int v514 = 0;
                    HIDWORD(v586) = 0;
                    int v516 = 1;
                    DWORD1(v586) = 1;
                    int v517 = DWORD2(v586);
                    int v518 = v586;
                  }
                  else
                  {
                    int v517 = DWORD2(v586);
                    if (v576 | v502 && DWORD2(v586))
                    {
                      BOOL v179 = __CFADD__((void)v587, 1);
                      *(void *)&unsigned long long v587 = v587 + 1;
                      if (v179) {
                        ++*((void *)&v587 + 1);
                      }
                      int v517 = 0;
                      DWORD2(v586) = 0;
                      int v518 = 1;
                      LODWORD(v586) = 1;
                      int v516 = DWORD1(v586);
                    }
                    else
                    {
                      int v518 = v586;
                      int v516 = DWORD1(v586);
                      if (v586 == 0)
                      {
                        if (v501 | v503)
                        {
                          int v518 = 1;
                          LODWORD(v586) = 1;
                        }
                        else
                        {
                          int v518 = 0;
                        }
                        if (v576 | v502)
                        {
                          int v517 = 0;
                          int v514 = 0;
                          int v516 = 1;
                          DWORD1(v586) = 1;
                        }
                        else
                        {
                          int v516 = 0;
                          int v517 = 0;
                          int v514 = 0;
                        }
                      }
                      else
                      {
                        BOOL v519 = (v501 | v503) == 0;
                        if (!DWORD2(v586)) {
                          BOOL v519 = 1;
                        }
                        if (v519)
                        {
                          BOOL v520 = (v576 | v502) == 0;
                          if (!HIDWORD(v586)) {
                            BOOL v520 = 1;
                          }
                          if (v520) {
                            goto LABEL_954;
                          }
                          int v516 = 0;
                          int v517 = 0;
                          int v514 = 0;
                          int v518 = 1;
                          *(void *)&long long v586 = 1;
                        }
                        else
                        {
                          int v518 = 0;
                          int v517 = 0;
                          int v514 = 0;
                          int v516 = 1;
                          *(void *)&long long v586 = 0x100000000;
                        }
                        *((void *)&v586 + 1) = 0;
                      }
                    }
                  }
LABEL_954:
                  LODWORD(v342) = -6176;
                  int v499 = 1;
                  if (v514 || v517 || v516 || v518) {
                    goto LABEL_895;
                  }
                  if (v503 || v502 || v501 | v576) {
                    DWORD1(v586) = 1;
                  }
                  goto LABEL_889;
                }
              }
            }
            else
            {
              BOOL v551 = v202 == v30;
              if (v199 > 1 || v202 == v30) {
                goto LABEL_397;
              }
            }
            if (v233 >= (int)v62)
            {
              int v199 = -v199;
              uint64_t v244 = v566;
              int v241 = v201;
              uint64_t v243 = v553;
              uint64_t v246 = v202;
              uint64_t v245 = v66;
              unint64_t v242 = v67;
            }
            else
            {
              int v200 = v61;
              int v241 = v62;
              unint64_t v242 = v566;
              LODWORD(v62) = v201;
              uint64_t v243 = v66;
              uint64_t v244 = v67;
              uint64_t v245 = v553;
              uint64_t v246 = v30;
              unint64_t v30 = v202;
            }
            *(void *)&unsigned long long v588 = v244;
            *((void *)&v588 + 1) = v243;
            *(void *)&long long v589 = v542;
            *((void *)&v589 + 1) = v540;
            bid_add_and_round(v62, v241, v200, v199, v30, v246, v242, v245, (int64x2_t *)&v588, a11, (int *)&v586 + 3, (BOOL *)&v586 + 2, (int *)&v586 + 1, (int *)&v586, a12, (long long *)&v587);
LABEL_374:
            *a1 = HIDWORD(v586);
            int v294 = DWORD2(v586);
LABEL_375:
            *a2 = v294;
            int v21 = v586;
            *a3 = DWORD1(v586);
            goto LABEL_72;
          }
          int v567 = v63;
          int v199 = v62 - (v192 + v63 - v61);
          if ((int)v62 >= 35 && (int)v62 <= v199)
          {
            unsigned int v561 = v192 + v63 - v61 - v62;
            int v549 = v61;
            unint64_t v554 = v30;
            int v209 = v62 - 34;
            if (v62 > 0x26)
            {
              *(void *)&unsigned long long v588 = v67;
              *((void *)&v588 + 1) = v66;
              if (v62 > 0x39)
              {
                *(void *)&long long v589 = v65;
                *((void *)&v589 + 1) = v64;
                __bid_round256_58_76(v62, (v62 - 34), (unint64_t *)&v588, (unint64_t *)&v580, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                unsigned long long v247 = v580;
              }
              else
              {
                long long v589 = v65;
                __bid_round192_39_57(v62, v62 - 34, (unint64_t *)&v588, (unint64_t *)v590, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                unsigned long long v247 = v590[0];
              }
              unsigned long long v587 = v247;
            }
            else
            {
              *(void *)&unsigned long long v583 = v67;
              *((void *)&v583 + 1) = v66;
              __bid_round128_19_38(v62, v62 - 34, v67, v66, (unint64_t *)&v587, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
            }
            int v301 = v209 + v549;
            int v21 = v586;
            if (v585) {
              int v302 = v301 + 1;
            }
            else {
              int v302 = v301;
            }
            int v303 = DWORD2(v586);
            int v304 = DWORD1(v586);
            if (v586 == 0)
            {
              unint64_t v305 = v554;
              if (v554 == v29)
              {
                int v303 = 0;
                int v306 = 0;
                int v21 = 0;
                int v304 = 1;
LABEL_642:
                uint64_t v441 = a11;
LABEL_643:
                if (a11 || v302 < 6112)
                {
                  *((void *)&v587 + 1) |= ((unint64_t)(((_WORD)v302 + 6176) & 0x3FFF) << 49) | v305;
                  if (a11) {
                    bid_rounding_correction(v441, v304, v21, v306, v303, v302, (uint64_t *)&v587, a12);
                  }
                }
                else
                {
                  *(void *)&unsigned long long v587 = 0;
                  *((void *)&v587 + 1) = v305 | 0x7800000000000000;
                  *a12 |= 0x28u;
                }
                if (v304 | v21) {
                  char v449 = 1;
                }
                else {
                  char v449 = v306;
                }
                if ((v449 & 1) != 0 || v303) {
                  *a12 |= 0x20u;
                }
                *a1 = v306;
                *a2 = v303;
                *a3 = v304;
                goto LABEL_72;
              }
              int v303 = 0;
              int v21 = 1;
              if (v587 == __PAIR128__(0x314DC6448D93, 0x38C15B0A00000000) && v561 >= 0xFFFFFFDD)
              {
                if (v567 > 19)
                {
                  unint64_t v428 = (unint64_t *)&__bid_midpoint128[v567 - 20];
                  unint64_t v429 = v428[1];
                  if (v26 < v429)
                  {
LABEL_563:
                    int v303 = 0;
                    int v306 = 0;
                    int v304 = 0;
                    goto LABEL_641;
                  }
                  if (v26 != v429) {
                    goto LABEL_638;
                  }
                  unint64_t v307 = *v428;
                }
                else
                {
                  unint64_t v307 = __bid_midpoint64[v567 - 1];
                }
                if (v571 < v307) {
                  goto LABEL_563;
                }
                if (v571 == v307)
                {
                  int v303 = 0;
                  int v21 = 0;
                  int v304 = 0;
                  int v306 = 1;
                  goto LABEL_641;
                }
LABEL_638:
                int v303 = 0;
                int v306 = 0;
                int v21 = 0;
LABEL_639:
                unsigned long long v587 = xmmword_1BDDB5770;
                --v302;
                goto LABEL_640;
              }
              int v306 = 0;
              int v304 = 0;
LABEL_641:
              unint64_t v305 = v554;
              goto LABEL_642;
            }
            if (HIDWORD(v586))
            {
              if (v29 == v554) {
                goto LABEL_390;
              }
              unsigned long long v363 = v587;
              uint64_t v364 = v587 - 1;
              *(void *)&unsigned long long v587 = v587 - 1;
              int v306 = 0;
              if ((void)v363)
              {
                if (v364 != 0x38C15B09FFFFFFFFLL || *((void *)&v363 + 1) != 0x314DC6448D93)
                {
                  unint64_t v305 = v554;
                  uint64_t v441 = a11;
                  int v304 = 1;
                  goto LABEL_643;
                }
                int v306 = 0;
                goto LABEL_639;
              }
              *((void *)&v587 + 1) = *((void *)&v363 + 1) - 1;
            }
            else
            {
              if (!DWORD2(v586))
              {
                int v306 = 0;
                goto LABEL_641;
              }
              if (v29 == v554)
              {
                BOOL v179 = __CFADD__((void)v587, 1);
                *(void *)&unsigned long long v587 = v587 + 1;
                int v303 = 0;
                if (v179)
                {
                  int v306 = 0;
                  ++*((void *)&v587 + 1);
                  goto LABEL_391;
                }
LABEL_390:
                int v306 = 0;
LABEL_391:
                int v21 = 1;
                goto LABEL_641;
              }
              int v303 = 0;
              int v306 = 0;
            }
LABEL_640:
            int v304 = 1;
            goto LABEL_641;
          }
          if (v197 <= 0xFFFFFFDE && (int)v62 < 35) {
            goto LABEL_277;
          }
          int v211 = v62 - (v192 - v61);
          if (v197 >= 0xFFFFFFDF && (int)v62 <= v199 && v211 > 34) {
            goto LABEL_277;
          }
          BOOL v212 = v211 < 35 && (int)v62 <= v199;
          BOOL v213 = (int)v62 > v199 && (int)v62 < 35;
          BOOL v214 = !v213 || v211 <= 34;
          BOOL v215 = !v214;
          if (v212
            || v215
            || ((int)v62 < 35 ? (BOOL v216 = v211 < (int)v62) : (BOOL v216 = 0),
                !v216 ? (char v217 = 0) : (char v217 = 1),
                v211 < 35 ? (BOOL v218 = (int)v62 <= v211) : (BOOL v218 = 0),
                v218 ? (BOOL v219 = (int)v62 <= v199) : (BOOL v219 = 1),
                !v219 || (v217 & 1) != 0))
          {
LABEL_277:
            unint64_t v198 = v571;
            int v200 = (v27 >> 49) - 6176;
            *((void *)&v583 + 1) = v26;
            uint64_t v201 = v567;
            unint64_t v553 = v26;
            unint64_t v566 = v571;
            unint64_t v27 = v35;
            unint64_t v202 = a10 & 0x8000000000000000;
            goto LABEL_278;
          }
          unint64_t v539 = v64;
          unint64_t v541 = v65;
          uint64_t v559 = v66;
          uint64_t v562 = v67;
          int v550 = v61;
          uint64_t v555 = v30;
          unsigned long long v583 = 0uLL;
          BOOL v220 = v197 > 0xFFFFFFDE;
          if ((v197 > 0xFFFFFFDE || (int)v62 <= v199 || (int)v62 >= v211)
            && (v197 < 0xFFFFFFDF || (int)v62 < 35 || (int)v62 >= v211))
          {
            if ((int)v62 < v211) {
              BOOL v220 = 1;
            }
            if (v220)
            {
              BOOL v460 = (int)v62 >= 35 && v211 <= 34;
              BOOL v461 = !v460;
              BOOL v462 = (int)v62 < v211 || v211 < 35;
              BOOL v463 = !v462 && v197 >= 0xFFFFFFDF;
              if (!v463 && v461) {
                goto LABEL_69;
              }
            }
            *(void *)&unsigned long long v588 = v67;
            *((void *)&v588 + 1) = v66;
            *(void *)&long long v589 = v65;
            *((void *)&v589 + 1) = v64;
            bid_add_and_round(v567, v62, v61, v199, v29, v30, v571, v26, (int64x2_t *)&v588, a11, (int *)&v586 + 3, (BOOL *)&v586 + 2, (int *)&v586 + 1, (int *)&v586, a12, (long long *)&v587);
            goto LABEL_374;
          }
          int v221 = v61 - v192;
          if (v567 > 18)
          {
            if (v567 > 0x26) {
              goto LABEL_684;
            }
            __bid_round128_19_38(v567, v221, v571, v26, (unint64_t *)&v582, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
            unint64_t v26 = *((void *)&v582 + 1);
            unint64_t v222 = v582;
          }
          else
          {
            __bid_round64_2_18(v567, v221, v571, &v584, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
            unint64_t v222 = v584;
          }
          unint64_t v571 = v222;
LABEL_684:
          if (v585)
          {
            *(void *)&unsigned long long v583 = v571;
            *((void *)&v583 + 1) = v26;
            unint64_t v458 = ((5 * (unint64_t)v571) >> 31) + 10 * HIDWORD(v571);
            unint64_t v571 = (10 * v571) & 0xFFFFFFFELL | (v458 << 32);
            unint64_t v26 = 10 * v26 + HIDWORD(v458);
          }
          long long v581 = 0uLL;
          *(void *)&unsigned long long v580 = v571;
          *((void *)&v580 + 1) = v26;
          if (v30 == v29)
          {
            *(void *)&unsigned long long v588 = v562;
            *((void *)&v588 + 1) = v559;
            *(void *)&long long v589 = v541;
            *((void *)&v589 + 1) = v539;
            unsigned long long v578 = v580;
            long long v579 = v581;
            bid_add256(&v588, &v578, &v580);
            goto LABEL_765;
          }
          *(void *)&unsigned long long v588 = v562;
          *((void *)&v588 + 1) = v559;
          *(void *)&long long v589 = v541;
          *((void *)&v589 + 1) = v539;
          unsigned long long v578 = v580;
          long long v579 = v581;
          bid_sub256(&v588, &v578, &v580);
          if (DWORD1(v586))
          {
            *(void *)&long long v586 = 1;
            goto LABEL_765;
          }
          if (v586)
          {
            *(void *)&long long v586 = 0x100000000;
            goto LABEL_765;
          }
          if ((v562 & 1) == 0)
          {
            if (HIDWORD(v586))
            {
              *((void *)&v586 + 1) = 1;
            }
            else if (DWORD2(v586))
            {
              *((void *)&v586 + 1) = 0x100000000;
            }
LABEL_765:
            unsigned long long v588 = v580;
            long long v589 = v581;
            uint64_t v475 = bid_bid_nr_digits256((unint64_t *)&v588);
            if ((int)v475 <= 33)
            {
              uint64_t v476 = *((void *)&v587 + 1);
              goto LABEL_769;
            }
            int v477 = v475 - 34;
            if (v475 == 34)
            {
              unsigned long long v587 = v580;
              uint64_t v476 = *((void *)&v580 + 1);
              goto LABEL_769;
            }
            int v484 = v586;
            int v483 = DWORD1(v586);
            int v485 = HIDWORD(v586);
            int v575 = DWORD2(v586);
            long long v586 = 0uLL;
            if (v475 > 0x26)
            {
              unsigned long long v588 = v580;
              if (v475 > 0x39)
              {
                long long v589 = v581;
                __bid_round256_58_76(v475, (v475 - 34), (unint64_t *)&v588, (unint64_t *)&v580, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                uint64_t v476 = *((void *)&v580 + 1);
                uint64_t v486 = v580;
              }
              else
              {
                long long v589 = (unint64_t)v581;
                __bid_round192_39_57(v475, v475 - 34, (unint64_t *)&v588, (unint64_t *)v590, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                uint64_t v476 = *((void *)&v590[0] + 1);
                uint64_t v486 = *(void *)&v590[0];
              }
              *(void *)&long long v582 = v486;
              *((void *)&v582 + 1) = v476;
            }
            else
            {
              unsigned long long v583 = v580;
              __bid_round128_19_38(v475, v475 - 34, v580, *((unint64_t *)&v580 + 1), (unint64_t *)&v582, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
              uint64_t v476 = *((void *)&v582 + 1);
              uint64_t v486 = v582;
            }
            v550 += v477 + v585;
            *(void *)&unsigned long long v587 = v486;
            if (v484 | v485 && HIDWORD(v586))
            {
              *(void *)&unsigned long long v587 = v486 - 1;
              if (v486)
              {
                HIDWORD(v586) = 0;
                DWORD1(v586) = 1;
                if (v476 == 0x314DC6448D93 && v486 == 0x38C15B0A00000000)
                {
                  uint64_t v476 = 0x1ED09BEAD87C0;
                  unsigned long long v587 = xmmword_1BDDB5770;
                  --v550;
                }
                goto LABEL_769;
              }
              --v476;
              HIDWORD(v586) = 0;
LABEL_873:
              DWORD1(v586) = 1;
              goto LABEL_769;
            }
            if (v483 | v575 && DWORD2(v586))
            {
              *(void *)&unsigned long long v587 = v486 + 1;
              if (v486 == -1) {
                *((void *)&v587 + 1) = ++v476;
              }
              DWORD2(v586) = 0;
              LODWORD(v586) = 1;
              goto LABEL_769;
            }
            if (v586 == 0)
            {
              LODWORD(v586) = (v484 | v485) != 0;
              if (!(v483 | v575)) {
                goto LABEL_769;
              }
              goto LABEL_873;
            }
            BOOL v522 = (v484 | v485) == 0;
            if (!DWORD2(v586)) {
              BOOL v522 = 1;
            }
            if (v522)
            {
              BOOL v528 = (v483 | v575) == 0;
              if (!HIDWORD(v586)) {
                BOOL v528 = 1;
              }
              if (v528)
              {
LABEL_769:
                int v478 = v550;
                if (a11)
                {
                  *(void *)&unsigned long long v583 = v587;
                  *((void *)&v583 + 1) = v555 | v476 | 0x3040000000000000;
                  bid_rounding_correction(a11, SDWORD1(v586), v586, SHIDWORD(v586), SDWORD2(v586), 0, (uint64_t *)&v583, a12);
                  int v478 = v550 - 6176 + ((*((void *)&v583 + 1) >> 49) & 0x3FFF);
                }
                BOOL v479 = v478 < -6176;
                *((void *)&v587 + 1) = v476 | ((unint64_t)(v550 + 6176) << 49) | v555;
                if (!a11 && v550 >= 6112)
                {
                  *(void *)&unsigned long long v587 = 0;
                  *((void *)&v587 + 1) = v555 | 0x7800000000000000;
                  *a12 |= 0x28u;
                  goto LABEL_374;
                }
                if (v550 > -6177)
                {
                  v555 |= v476 | ((unint64_t)(v550 + 6176) << 49);
LABEL_988:
                  if (a11)
                  {
                    bid_rounding_correction(a11, SDWORD1(v586), v586, SHIDWORD(v586), SDWORD2(v586), v550, (uint64_t *)&v587, a12);
                    uint64_t v555 = *((void *)&v587 + 1);
                  }
                  if ((v555 & 0x7FFFFFFFFFFFFFFFLL) == 0x314DC6448D93 && (void)v587 == 0x38C15B0A00000000)
                  {
                    switch(a11)
                    {
                      case 0u:
                      case 4u:
                        if (HIDWORD(v586) | v586) {
                          goto LABEL_1005;
                        }
                        if (v555 < 0) {
                          int v523 = 1;
                        }
                        else {
                          int v523 = 2;
                        }
                        if (v523 == a11) {
                          goto LABEL_1002;
                        }
                        break;
                      case 1u:
                        if (v555 < 0) {
                          goto LABEL_1002;
                        }
                        break;
                      case 2u:
                        if ((v555 & 0x8000000000000000) == 0)
                        {
LABEL_1002:
                          if (HIDWORD(v586) || *(void *)((char *)&v586 + 4) || v586) {
LABEL_1005:
                          }
                            BOOL v479 = 1;
                        }
                        break;
                      default:
                        break;
                    }
                  }
                  int v525 = DWORD2(v586);
                  int v524 = HIDWORD(v586);
                  int v21 = v586;
                  int v526 = DWORD1(v586);
                  if (v586 != 0)
                  {
                    int v527 = *a12;
                    *a12 |= 0x20u;
                    if (v479) {
                      *a12 = v527 | 0x30;
                    }
                  }
                  *a1 = v524;
                  *a2 = v525;
                  *a3 = v526;
                  goto LABEL_72;
                }
                int v481 = v586;
                int v480 = DWORD1(v586);
                int v482 = HIDWORD(v586);
                int v574 = DWORD2(v586);
                long long v586 = 0uLL;
                if (v550 <= 0xFFFFE7BD)
                {
                  DWORD1(v586) = 1;
                  *(void *)&unsigned long long v587 = 0;
                  *((void *)&v587 + 1) = v555;
                  goto LABEL_987;
                }
                unint64_t v490 = v476 & 0x1FFFFFFFFFFFFLL;
                if (v550 != -6210)
                {
                  *(void *)&unsigned long long v583 = v587;
                  *((void *)&v583 + 1) = v476 & 0x1FFFFFFFFFFFFLL;
                  __bid_round128_19_38(34, -6176 - v550, v587, v490, (unint64_t *)&v587, &v585, (_DWORD *)&v586 + 3, (_DWORD *)&v586 + 2, (_DWORD *)&v586 + 1, &v586);
                  uint64_t v493 = *((void *)&v587 + 1);
                  if (v585)
                  {
                    unint64_t v494 = ((5 * (unint64_t)v587) >> 31) + 10 * DWORD1(v587);
                    *(void *)&unsigned long long v587 = (10 * v587) & 0xFFFFFFFELL | (v494 << 32);
                    uint64_t v493 = 0xA00000000 * (HIDWORD(*((void *)&v587 + 1)) & 0x1FFFFLL)
                         + 10 * DWORD2(v587)
                         + HIDWORD(v494);
                  }
                  v555 |= v493 & 0x1FFFFFFFFFFFFLL;
                  *((void *)&v587 + 1) = v555;
                  if (v481 | v482 && HIDWORD(v586))
                  {
                    uint64_t v495 = v587;
                    *(void *)&unsigned long long v587 = v587 - 1;
                    if (!v495) {
                      *((void *)&v587 + 1) = --v555;
                    }
                    HIDWORD(v586) = 0;
                  }
                  else
                  {
                    if (v480 | v574 && DWORD2(v586))
                    {
                      BOOL v179 = __CFADD__((void)v587, 1);
                      *(void *)&unsigned long long v587 = v587 + 1;
                      if (v179) {
                        *((void *)&v587 + 1) = ++v555;
                      }
                      DWORD2(v586) = 0;
                      LODWORD(v586) = 1;
                      goto LABEL_987;
                    }
                    if (v586 != 0)
                    {
                      BOOL v532 = (v481 | v482) == 0;
                      if (!DWORD2(v586)) {
                        BOOL v532 = 1;
                      }
                      if (v532)
                      {
                        BOOL v533 = (v480 | v574) == 0;
                        if (!HIDWORD(v586)) {
                          BOOL v533 = 1;
                        }
                        if (v533) {
                          goto LABEL_987;
                        }
                        *(void *)&long long v586 = 1;
                      }
                      else
                      {
                        *(void *)&long long v586 = 0x100000000;
                      }
                      *((void *)&v586 + 1) = 0;
LABEL_987:
                      int v550 = -6176;
                      goto LABEL_988;
                    }
                    LODWORD(v586) = (v481 | v482) != 0;
                    if (!(v480 | v574)) {
                      goto LABEL_987;
                    }
                  }
                  DWORD1(v586) = 1;
                  goto LABEL_987;
                }
                if (v490 < 0xF684DF56C3E0) {
                  goto LABEL_817;
                }
                if (v490 == 0xF684DF56C3E0)
                {
                  if ((unint64_t)v587 < 0x1BC6C73200000000)
                  {
LABEL_817:
                    uint64_t v491 = 0;
                    DWORD1(v586) = 1;
LABEL_986:
                    *(void *)&unsigned long long v587 = v491;
                    *((void *)&v587 + 1) = v555;
                    goto LABEL_987;
                  }
                  if ((void)v587 == 0x1BC6C73200000000)
                  {
                    uint64_t v491 = 0;
                    DWORD2(v586) = 1;
                    goto LABEL_986;
                  }
                }
                uint64_t v491 = 1;
                LODWORD(v586) = 1;
                goto LABEL_986;
              }
              *(void *)&long long v586 = 1;
            }
            else
            {
              *(void *)&long long v586 = 0x100000000;
            }
            *((void *)&v586 + 1) = 0;
            goto LABEL_769;
          }
          if (HIDWORD(v586))
          {
            BOOL v179 = __CFADD__((void)v580, 1);
            *(void *)&unsigned long long v580 = v580 + 1;
            if (!v179) {
              goto LABEL_765;
            }
            BOOL v179 = __CFADD__((*((void *)&v580 + 1))++, 1);
            if (!v179) {
              goto LABEL_765;
            }
            BOOL v179 = __CFADD__((void)v581, 1);
            *(void *)&long long v581 = v581 + 1;
            if (!v179) {
              goto LABEL_765;
            }
            uint64_t v521 = *((void *)&v581 + 1) + 1;
          }
          else
          {
            if (!DWORD2(v586)) {
              goto LABEL_765;
            }
            uint64_t v529 = v580;
            *(void *)&unsigned long long v580 = v580 - 1;
            if (v529) {
              goto LABEL_765;
            }
            if ((*((void *)&v580 + 1))--) {
              goto LABEL_765;
            }
            uint64_t v531 = v581;
            *(void *)&long long v581 = v581 - 1;
            if (v531) {
              goto LABEL_765;
            }
            uint64_t v521 = *((void *)&v581 + 1) - 1;
          }
          *((void *)&v581 + 1) = v521;
          goto LABEL_765;
        }
        int v548 = v33 + (v25 >> 49) - 6176;
        uint64_t v63 = v51;
        if (v62 == 39)
        {
          unint64_t v86 = HIDWORD(v24);
          unint64_t v87 = v24 * (unint64_t)HIDWORD(a5);
          unint64_t v88 = HIDWORD(v87) + HIDWORD(v24) * (unint64_t)HIDWORD(a5);
          unint64_t v89 = HIDWORD(v24) * (unint64_t)a5
              + v87
              + ((v24 * (unint64_t)a5) >> 32);
          unint64_t v90 = a7 * (unint64_t)HIDWORD(a5);
          unint64_t v91 = HIDWORD(a7) * (unint64_t)a5
              + v90
              + ((a7 * (unint64_t)a5) >> 32);
          unint64_t v92 = (a7 * a5) | ((unint64_t)v91 << 32);
          unsigned long long v93 = __PAIR128__(v88, (v24 * a5) | ((unint64_t)v89 << 32))
              + __PAIR128__(HIDWORD(v89), HIDWORD(v90) + HIDWORD(a7) * (unint64_t)HIDWORD(a5) + HIDWORD(v91));
          unint64_t v94 = HIDWORD(v22);
          unsigned int v95 = v22;
          unint64_t v96 = v24 * (unint64_t)HIDWORD(v22);
          unint64_t v97 = v24 * (unint64_t)v22;
          unint64_t v98 = v86 * (unint64_t)v22;
          unint64_t v99 = HIDWORD(v96) + v86 * (unint64_t)HIDWORD(v22);
          unint64_t v100 = v98 + v96 + HIDWORD(v97);
          unint64_t v101 = HIDWORD(v100);
          unint64_t v102 = v97 | ((unint64_t)v100 << 32);
          unint64_t v103 = a7 * (unint64_t)HIDWORD(v22);
          unint64_t v104 = a7 * (unint64_t)v22;
          unint64_t v105 = HIDWORD(v103) + HIDWORD(a7) * (unint64_t)v94;
          unint64_t v106 = HIDWORD(a7) * (unint64_t)v95 + v103 + HIDWORD(v104);
          unint64_t v107 = v104 | ((unint64_t)v106 << 32);
          unsigned long long v108 = __PAIR128__(v99, v102) + __PAIR128__(v101, v105 + HIDWORD(v106));
          unint64_t v66 = v93 + v107;
          BOOL v179 = __CFADD__(__CFADD__((void)v93, v107), (void)v108);
          uint64_t v109 = __CFADD__((void)v93, v107) + (void)v108;
          unsigned int v110 = v179;
          unint64_t v65 = *((void *)&v93 + 1) + v109;
          if (__CFADD__(*((void *)&v93 + 1), v109)) {
            uint64_t v111 = 1;
          }
          else {
            uint64_t v111 = v110;
          }
          unint64_t v64 = *((void *)&v108 + 1) + v111;
          if (v65) {
            goto LABEL_167;
          }
          if (v66 < 0x4B3B4CA85A86C47ALL)
          {
            uint64_t v62 = 38;
            unint64_t v65 = 0;
            int v61 = v548;
            unint64_t v67 = (a7 * a5) | ((unint64_t)v91 << 32);
            goto LABEL_217;
          }
          if (v66 != 0x4B3B4CA85A86C47ALL || v92 >= 0x98A224000000000)
          {
LABEL_167:
            uint64_t v62 = 39;
          }
          else
          {
            unint64_t v65 = 0;
            uint64_t v62 = 38;
            unint64_t v66 = 0x4B3B4CA85A86C47ALL;
          }
LABEL_168:
          int v61 = v548;
          unint64_t v67 = v92;
          goto LABEL_217;
        }
        uint64_t v565 = (v42 + v36);
        if (v62 <= 0x39)
        {
          if (v22)
          {
            if (v24)
            {
              unint64_t v112 = HIDWORD(v24);
              unint64_t v113 = v24 * (unint64_t)HIDWORD(a5);
              unint64_t v114 = HIDWORD(v113) + HIDWORD(v24) * (unint64_t)HIDWORD(a5);
              unint64_t v115 = HIDWORD(v24) * (unint64_t)a5
                   + v113
                   + ((v24 * (unint64_t)a5) >> 32);
              unint64_t v116 = a7 * (unint64_t)HIDWORD(a5);
              unint64_t v117 = HIDWORD(a7) * (unint64_t)a5
                   + v116
                   + ((a7 * (unint64_t)a5) >> 32);
              unint64_t v118 = (a7 * a5) | ((unint64_t)v117 << 32);
              unsigned long long v119 = __PAIR128__(v114, (v24 * a5) | ((unint64_t)v115 << 32))
                   + __PAIR128__(HIDWORD(v115), HIDWORD(v116) + HIDWORD(a7) * (unint64_t)HIDWORD(a5) + HIDWORD(v117));
              unint64_t v120 = HIDWORD(v22);
              unsigned int v121 = v22;
              unint64_t v122 = v24 * (unint64_t)HIDWORD(v22);
              unint64_t v123 = v24 * (unint64_t)v22;
              unint64_t v124 = v112 * (unint64_t)v22;
              unint64_t v125 = HIDWORD(v122) + v112 * (unint64_t)HIDWORD(v22);
              unint64_t v126 = v124 + v122 + HIDWORD(v123);
              unint64_t v127 = HIDWORD(v126);
              unint64_t v128 = v123 | ((unint64_t)v126 << 32);
              unint64_t v129 = a7 * (unint64_t)HIDWORD(v22);
              unint64_t v130 = a7 * (unint64_t)v22;
              unint64_t v131 = HIDWORD(v129) + HIDWORD(a7) * (unint64_t)v120;
              unint64_t v132 = HIDWORD(a7) * (unint64_t)v121 + v129 + HIDWORD(v130);
              unint64_t v133 = v130 | ((unint64_t)v132 << 32);
              unsigned long long v134 = __PAIR128__(v125, v128) + __PAIR128__(v127, v131 + HIDWORD(v132));
              unint64_t v66 = v119 + v133;
              BOOL v179 = __CFADD__(__CFADD__((void)v119, v133), (void)v134);
              uint64_t v135 = __CFADD__((void)v119, v133) + (void)v134;
              unsigned int v136 = v179;
              unint64_t v137 = *((void *)&v119 + 1) + v135;
              if (__CFADD__(*((void *)&v119 + 1), v135)) {
                uint64_t v138 = 1;
              }
              else {
                uint64_t v138 = v136;
              }
              unint64_t v64 = *((void *)&v134 + 1) + v138;
LABEL_207:
              unint64_t v190 = (char *)&__bid_ten2k256 + 32 * (v565 - 40);
              unint64_t v191 = *((void *)v190 + 2);
              if (v137 < v191 || v137 == v191 && __PAIR128__(v66, v118) < *(_OWORD *)v190)
              {
                uint64_t v62 = (v565 - 1);
                int v61 = v548;
                unint64_t v67 = v118;
              }
              else
              {
                int v61 = v548;
                unint64_t v67 = v118;
                uint64_t v62 = v565;
              }
              unint64_t v65 = v137;
              goto LABEL_217;
            }
            unint64_t v64 = 0;
            unint64_t v181 = HIDWORD(v22);
            unint64_t v182 = HIDWORD(a7) * (unint64_t)v22;
            unint64_t v183 = a7 * (unint64_t)v22;
            unint64_t v184 = a7 * (unint64_t)v181;
            unint64_t v172 = HIDWORD(v182) + HIDWORD(a7) * (unint64_t)v181;
            unint64_t v185 = HIDWORD(a7) * (unint64_t)a5;
            unint64_t v186 = v184 + v182 + HIDWORD(v183);
            unint64_t v187 = v183 | ((unint64_t)v186 << 32);
            unint64_t v176 = HIDWORD(v186);
            unint64_t v188 = a7 * (unint64_t)HIDWORD(a5)
                 + v185
                 + ((a7 * (unint64_t)a5) >> 32);
            unint64_t v189 = HIDWORD(v185) + HIDWORD(a7) * (unint64_t)HIDWORD(a5) + HIDWORD(v188);
            unint64_t v118 = (a7 * a5) | ((unint64_t)v188 << 32);
            BOOL v179 = __CFADD__(v187, v189);
            unint64_t v66 = v187 + v189;
          }
          else
          {
            unint64_t v64 = 0;
            unint64_t v168 = HIDWORD(v24);
            unint64_t v169 = v24 * (unint64_t)HIDWORD(a5);
            unint64_t v170 = v24 * (unint64_t)a5;
            unint64_t v171 = v168 * (unint64_t)a5;
            unint64_t v172 = HIDWORD(v169) + v168 * (unint64_t)HIDWORD(a5);
            unint64_t v173 = a7 * (unint64_t)HIDWORD(a5);
            unint64_t v174 = v171 + v169 + HIDWORD(v170);
            unint64_t v175 = v170 | ((unint64_t)v174 << 32);
            unint64_t v176 = HIDWORD(v174);
            unint64_t v177 = HIDWORD(a7) * (unint64_t)a5
                 + v173
                 + ((a7 * (unint64_t)a5) >> 32);
            unint64_t v178 = HIDWORD(v173) + HIDWORD(a7) * (unint64_t)HIDWORD(a5) + HIDWORD(v177);
            unint64_t v118 = (a7 * a5) | ((unint64_t)v177 << 32);
            BOOL v179 = __CFADD__(v175, v178);
            unint64_t v66 = v175 + v178;
          }
          unint64_t v137 = v176 + v179 + v172;
          goto LABEL_207;
        }
        unint64_t v139 = HIDWORD(v24);
        unint64_t v140 = v24 * (unint64_t)HIDWORD(a5);
        unint64_t v141 = HIDWORD(v140) + HIDWORD(v24) * (unint64_t)HIDWORD(a5);
        unint64_t v142 = HIDWORD(v24) * (unint64_t)a5
             + v140
             + ((v24 * (unint64_t)a5) >> 32);
        unint64_t v143 = a7 * (unint64_t)HIDWORD(a5);
        unint64_t v144 = HIDWORD(a7) * (unint64_t)a5
             + v143
             + ((a7 * (unint64_t)a5) >> 32);
        unint64_t v92 = (a7 * a5) | ((unint64_t)v144 << 32);
        unsigned long long v145 = __PAIR128__(v141, (v24 * a5) | ((unint64_t)v142 << 32))
             + __PAIR128__(HIDWORD(v142), HIDWORD(v143) + HIDWORD(a7) * (unint64_t)HIDWORD(a5) + HIDWORD(v144));
        unint64_t v146 = HIDWORD(v22);
        unsigned int v147 = v22;
        unint64_t v148 = v24 * (unint64_t)HIDWORD(v22);
        unint64_t v149 = v24 * (unint64_t)v22;
        unint64_t v150 = v139 * (unint64_t)v22;
        unint64_t v151 = HIDWORD(v148) + v139 * (unint64_t)HIDWORD(v22);
        unint64_t v152 = v150 + v148 + HIDWORD(v149);
        unint64_t v153 = HIDWORD(v152);
        unint64_t v154 = v149 | ((unint64_t)v152 << 32);
        unint64_t v155 = a7 * (unint64_t)HIDWORD(v22);
        unint64_t v156 = a7 * (unint64_t)v22;
        unint64_t v157 = HIDWORD(v155) + HIDWORD(a7) * (unint64_t)v146;
        unint64_t v158 = HIDWORD(a7) * (unint64_t)v147 + v155 + HIDWORD(v156);
        unint64_t v159 = v156 | ((unint64_t)v158 << 32);
        unsigned long long v160 = __PAIR128__(v151, v154) + __PAIR128__(v153, v157 + HIDWORD(v158));
        unint64_t v66 = v145 + v159;
        BOOL v179 = __CFADD__(__CFADD__((void)v145, v159), (void)v160);
        uint64_t v161 = __CFADD__((void)v145, v159) + (void)v160;
        unsigned int v162 = v179;
        unint64_t v163 = *((void *)&v145 + 1) + v161;
        if (__CFADD__(*((void *)&v145 + 1), v161)) {
          uint64_t v164 = 1;
        }
        else {
          uint64_t v164 = v162;
        }
        unint64_t v165 = *((void *)&v160 + 1) + v164;
        if (v565 == 58)
        {
          unint64_t v64 = *((void *)&v160 + 1) + v164;
          if (!v165)
          {
            if (v163 < 0x28C87CB5C89A2571)
            {
              unint64_t v64 = 0;
              uint64_t v62 = 57;
              goto LABEL_215;
            }
            if (v163 == 0x28C87CB5C89A2571)
            {
              if (v66 < 0xEBFDCB54864ADA83)
              {
                unint64_t v64 = 0;
                uint64_t v62 = 57;
LABEL_788:
                unint64_t v65 = 0x28C87CB5C89A2571;
                goto LABEL_168;
              }
              if (v66 == 0xEBFDCB54864ADA83 && v92 >> 57 < 0x25)
              {
                unint64_t v64 = 0;
                uint64_t v62 = 57;
                unint64_t v66 = 0xEBFDCB54864ADA83;
                goto LABEL_788;
              }
            }
          }
          uint64_t v62 = 58;
        }
        else
        {
          int v166 = (char *)&__bid_ten2k256 + 32 * (v565 - 40);
          unint64_t v167 = *((void *)v166 + 3);
          unint64_t v64 = v165;
          if (v165 >= v167)
          {
            if (v165 != v167
              || (unint64_t v180 = *((void *)v166 + 2), v163 >= v180)
              && (v163 != v180 || __PAIR128__(v66, v92) >= *(_OWORD *)v166))
            {
              int v61 = v548;
              unint64_t v67 = v92;
              uint64_t v62 = v565;
LABEL_216:
              unint64_t v65 = v163;
              goto LABEL_217;
            }
          }
          uint64_t v62 = (v565 - 1);
        }
LABEL_215:
        int v61 = v548;
        unint64_t v67 = v92;
        goto LABEL_216;
      }
    }
    else if (v26 | v28)
    {
      goto LABEL_90;
    }
    if (v35 >= v27) {
      unint64_t v35 = v27;
    }
    *((void *)&v587 + 1) = v35;
    if (v30 == v29)
    {
      unint64_t v31 = v35 | v29;
    }
    else
    {
      if (a11 != 1) {
        goto LABEL_75;
      }
      unint64_t v31 = v35 | 0x8000000000000000;
    }
LABEL_74:
    *((void *)&v587 + 1) = v31;
LABEL_75:
    *(void *)&unsigned long long v587 = 0;
    goto LABEL_69;
  }
  if ((a6 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
    || (a6 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a5 > 0x38C15B09FFFFFFFFLL)
  {
    a5 = 0;
    a6 &= 0xFFFFC00000000000;
  }
  if ((~a6 & 0x7E00000000000000) == 0) {
    *a12 |= 1u;
  }
  int v21 = 0;
  *(void *)&unsigned long long v587 = a5;
  *((void *)&v587 + 1) = a6 & 0xFC003FFFFFFFFFFFLL;
LABEL_70:
  *a1 = 0;
  *a2 = 0;
LABEL_71:
  *a3 = 0;
LABEL_72:
  *a4 = v21;
  return v587;
}

uint64_t bid_rounding_correction(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t *a7, _DWORD *a8)
{
  uint64_t v8 = *a7;
  uint64_t v9 = a7[1];
  if (a4 | a3 | a2 | a5) {
    *a8 |= 0x20u;
  }
  unint64_t v10 = v9 & 0x8000000000000000;
  unint64_t v11 = (unint64_t)(a6 + 6176) << 49;
  uint64_t v12 = v9 & 0x1FFFFFFFFFFFFLL;
  if ((v9 & 0x8000000000000000) == 0)
  {
    if (result != 2 || !a2)
    {
      BOOL v13 = result == 2;
      goto LABEL_10;
    }
LABEL_16:
    if (__CFADD__(v8++, 1)) {
      ++v12;
    }
    uint64_t v16 = 0x314DC6448D93;
    unint64_t v17 = (unint64_t)(a6 + 6177) << 49;
    if (v12 == 0x1ED09BEAD87C0) {
      int v18 = a6 + 1;
    }
    else {
      int v18 = a6;
    }
    if (v12 == 0x1ED09BEAD87C0)
    {
      uint64_t v19 = 0x38C15B0A00000000;
    }
    else
    {
      unint64_t v17 = (unint64_t)(a6 + 6176) << 49;
      uint64_t v16 = v12;
      uint64_t v19 = v8;
    }
    if (v8 == 0x378D8E6400000000)
    {
      a6 = v18;
      unint64_t v11 = v17;
      uint64_t v12 = v16;
      uint64_t v8 = v19;
    }
    goto LABEL_26;
  }
  if (result == 1 && a2) {
    goto LABEL_16;
  }
  BOOL v13 = result == 1;
LABEL_10:
  BOOL v14 = v13 || result == 4;
  if (v14 && a5) {
    goto LABEL_16;
  }
  if (a4 | a3 && ((result & 0xFFFFFFFE) == 2 && v10 || (result & 0xFFFFFFFD) == 1 && !v10))
  {
    unsigned long long v20 = __PAIR128__(v12, v8) - 1;
    uint64_t v12 = *((void *)&v20 + 1);
    if (*((void *)&v20 + 1) == 0x314DC6448D93 && (uint64_t v8 = 0x38C15B09FFFFFFFFLL, (void)v20 == 0x38C15B09FFFFFFFFLL))
    {
      if (v11)
      {
        uint64_t v8 = 0x378D8E63FFFFFFFFLL;
        uint64_t v12 = 0x1ED09BEAD87C0;
        uint64_t v21 = (a6 + 6175);
        --a6;
        unint64_t v11 = v21 << 49;
      }
      else
      {
        *a8 |= 0x10u;
        uint64_t v12 = 0x314DC6448D93;
      }
    }
    else
    {
      uint64_t v8 = v20;
    }
  }
LABEL_26:
  if (a6 < 6112) {
    goto LABEL_45;
  }
  *a8 |= 0x28u;
  unint64_t v11 = 0;
  if (!v10)
  {
    uint64_t v12 = 0x7800000000000000;
    if (result != 2)
    {
      uint64_t v8 = 0;
      if (result != 4)
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0x5FFFED09BEAD87C0;
LABEL_43:
        uint64_t v8 = 0x378D8E63FFFFFFFFLL;
        goto LABEL_45;
      }
      goto LABEL_45;
    }
LABEL_44:
    uint64_t v8 = 0;
    goto LABEL_45;
  }
  uint64_t v12 = 0xF800000000000000;
  if (result == 1) {
    goto LABEL_44;
  }
  uint64_t v8 = 0;
  if (result != 4)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0xDFFFED09BEAD87C0;
    goto LABEL_43;
  }
LABEL_45:
  *a7 = v8;
  a7[1] = v11 | v12 | v10;
  return result;
}

double bid_add_and_round(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int64x2_t *a9, unsigned int a10, int *a11, BOOL *a12, int *a13, int *a14, int *a15, long long *a16)
{
  uint64_t v16 = a6;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  unint64_t v138 = 0;
  int64x2_t v137 = 0uLL;
  int64x2_t v136 = 0uLL;
  memset(v141, 0, sizeof(v141));
  int64x2_t v134 = 0u;
  int64x2_t v135 = 0u;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  int v131 = 0;
  long long v130 = *a16;
  int v19 = a2 - (a4 + a1);
  if (a2 == a4 + a1)
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    int64x2_t v135 = 0uLL;
    v134.i64[0] = a7;
    v134.i64[1] = a8;
  }
  else
  {
    unint64_t v22 = HIDWORD(a7);
    if (v19 > 19)
    {
      if (v19 > 0x26)
      {
        if (v19 > 0x39)
        {
          uint64_t v74 = &__bid_ten2k128[2 * (v19 - 58)];
          uint64_t v75 = HIDWORD(*v74);
          unint64_t v76 = *v74 * (unint64_t)HIDWORD(a7);
          unint64_t v77 = *v74 * (unint64_t)a7;
          unint64_t v78 = v75 * (unint64_t)a7 + v76 + HIDWORD(v77);
          uint64_t v71 = *v74 * a7;
          unint64_t v72 = v74[1] * a7 + v75 * (unint64_t)HIDWORD(a7) + HIDWORD(v76) + HIDWORD(v78);
          v136.i64[0] = v71 | ((unint64_t)v78 << 32);
          v136.i64[1] = v72;
          unsigned int v73 = v75 * a7 + v76 + HIDWORD(v77);
        }
        else
        {
          unint64_t v64 = __bid_ten2k64[v19 - 38];
          unint64_t v65 = HIDWORD(v64);
          unsigned int v66 = v64;
          uint64_t v67 = v64 * a8;
          unint64_t v68 = HIDWORD(v64) * (unint64_t)a7;
          unint64_t v69 = v64 * (unint64_t)a7;
          unint64_t v70 = v66 * (unint64_t)HIDWORD(a7) + v68 + HIDWORD(v69);
          uint64_t v71 = v69;
          unint64_t v72 = v67 + v65 * (unint64_t)HIDWORD(a7) + HIDWORD(v68) + HIDWORD(v70);
          v136.i64[0] = v69 | ((unint64_t)v70 << 32);
          v136.i64[1] = v72;
          unsigned int v73 = v70;
        }
        unint64_t v79 = ((1518781562 * (unint64_t)v71) >> 32)
            + 1262177448 * v71
            + 1518781562 * v73;
        a7 = 0x98A224000000000 * v71;
        unsigned long long v80 = __PAIR128__(((1518781562 * (unint64_t)v73) >> 32) + 1262177448 * v73, (1518781562 * v71) | (v79 << 32))+ __PAIR128__(HIDWORD(v79), ((160047680 * (unint64_t)v71) >> 32) + 160047680 * v73);
        unint64_t v81 = HIDWORD(v72);
        unint64_t v82 = ((1518781562 * (unint64_t)HIDWORD(v72)) >> 32) + 1262177448 * HIDWORD(v72);
        unint64_t v83 = (1518781562 * HIDWORD(v72))
            + 1262177448 * v72
            + ((1518781562 * (unint64_t)v72) >> 32);
        unint64_t v84 = HIDWORD(v83);
        unint64_t v85 = (1518781562 * v72) | (v83 << 32);
        unint64_t v86 = (160047680 * (unint64_t)v72) >> 32;
        uint64_t v87 = 0x98A224000000000 * v72;
        uint64_t v59 = (__PAIR128__(v82, v85) + __PAIR128__(v84, v86 + 160047680 * v81)) >> 64;
        a8 = v87
           + ((1518781562 * v71) | (v79 << 32))
           + ((160047680 * (unint64_t)v71) >> 32)
           + 160047680 * v73;
        v134.i64[0] = 0x98A224000000000 * v71;
        v134.i64[1] = a8;
        BOOL v63 = __CFADD__(__CFADD__(v87, ((1518781562 * v71) | (v79 << 32))+ ((160047680 * (unint64_t)v71) >> 32)+ 160047680 * v73), v85 + v86 + 160047680 * v81);
        uint64_t v88 = __CFADD__(v87, ((1518781562 * v71) | (v79 << 32))+ ((160047680 * (unint64_t)v71) >> 32)+ 160047680 * v73)+ v85+ v86+ 160047680 * v81;
        LODWORD(v62) = v63;
        BOOL v63 = __CFADD__(*((void *)&v80 + 1), v88);
        unint64_t v20 = *((void *)&v80 + 1) + v88;
      }
      else
      {
        uint64_t v33 = &__bid_ten2k128[2 * (v19 - 20)];
        unint64_t v34 = *v33;
        unint64_t v35 = v33[1];
        unint64_t v36 = HIDWORD(v34);
        unint64_t v37 = HIDWORD(v34) * (unint64_t)a8;
        unint64_t v38 = HIDWORD(v37) + HIDWORD(v34) * (unint64_t)HIDWORD(a8);
        unint64_t v39 = v34 * (unint64_t)HIDWORD(a8)
            + v37
            + ((v34 * (unint64_t)a8) >> 32);
        unint64_t v40 = HIDWORD(v39);
        unint64_t v41 = (v34 * a8) | ((unint64_t)v39 << 32);
        LODWORD(v39) = a7;
        unint64_t v42 = HIDWORD(v34) * (unint64_t)a7;
        unint64_t v43 = v35 * (unint64_t)a7;
        unint64_t v44 = v34 * (unint64_t)a7;
        unint64_t v45 = v34 * (unint64_t)v22 + v42 + HIDWORD(v44);
        a7 = v44 | ((unint64_t)v45 << 32);
        unsigned long long v46 = __PAIR128__(v38, v41)
            + __PAIR128__(v40, HIDWORD(v42) + v36 * (unint64_t)v22 + HIDWORD(v45));
        unint64_t v47 = HIDWORD(v35);
        LODWORD(v41) = v35;
        unint64_t v48 = HIDWORD(v35) * (unint64_t)a8;
        unint64_t v49 = v35 * (unint64_t)a8;
        unint64_t v50 = HIDWORD(v48) + v47 * (unint64_t)HIDWORD(a8);
        unint64_t v51 = v41 * (unint64_t)HIDWORD(a8) + v48 + HIDWORD(v49);
        unint64_t v52 = HIDWORD(v51);
        unint64_t v53 = v49 | ((unint64_t)v51 << 32);
        unint64_t v54 = v47 * (unint64_t)v39;
        unint64_t v55 = v41 * (unint64_t)v22;
        unint64_t v56 = HIDWORD(v54) + v47 * (unint64_t)v22;
        unint64_t v57 = v55 + v54 + HIDWORD(v43);
        unint64_t v58 = v43 | ((unint64_t)v57 << 32);
        unint64_t v60 = v53 + v56 + HIDWORD(v57);
        uint64_t v59 = (__PAIR128__(v50, v53) + __PAIR128__(v52, v56 + HIDWORD(v57))) >> 64;
        a8 = v58 + v46;
        v134.i64[0] = a7;
        v134.i64[1] = v58 + v46;
        unint64_t v61 = __CFADD__(v58, (void)v46) + v60;
        LODWORD(v62) = __CFADD__(__CFADD__(v58, (void)v46), v60);
        BOOL v63 = __CFADD__(*((void *)&v46 + 1), v61);
        unint64_t v20 = *((void *)&v46 + 1) + v61;
      }
      if (v63) {
        uint64_t v62 = 1;
      }
      else {
        uint64_t v62 = v62;
      }
      unint64_t v21 = v59 + v62;
      v135.i64[0] = v20;
      v135.i64[1] = v21;
    }
    else
    {
      unint64_t v21 = 0;
      int64x2_t v137 = (int64x2_t)(unint64_t)__bid_ten2k64[v19];
      unint64_t v23 = v137.u32[1] * (unint64_t)a8;
      unint64_t v24 = HIDWORD(v23) + v137.u32[1] * (unint64_t)HIDWORD(a8);
      unint64_t v25 = v137.u32[0] * (unint64_t)HIDWORD(a8)
          + v23
          + ((v137.u32[0] * (unint64_t)a8) >> 32);
      unint64_t v26 = HIDWORD(v25);
      unint64_t v27 = (v137.i32[0] * a8) | ((unint64_t)v25 << 32);
      unint64_t v28 = v137.u32[1] * (unint64_t)a7;
      unint64_t v29 = v137.u32[0] * (unint64_t)a7;
      unint64_t v30 = v137.u32[0] * (unint64_t)v22 + v28 + HIDWORD(v29);
      unint64_t v31 = HIDWORD(v28) + v137.u32[1] * (unint64_t)v22 + HIDWORD(v30);
      a7 = v29 | ((unint64_t)v30 << 32);
      v134.i64[0] = a7;
      v134.i64[1] = v27 + v31;
      uint64_t v32 = v27 + v31;
      unint64_t v20 = (__PAIR128__(v24, v27) + __PAIR128__(v26, v31)) >> 64;
      a8 = v32;
      int64x2_t v135 = (int64x2_t)v20;
    }
  }
  if (a6 == a5)
  {
    int64x2_t v89 = a9[1];
    int64x2_t v139 = *a9;
    int64x2_t v140 = v89;
    int64x2_t v128 = v134;
    int64x2_t v129 = v135;
    bid_add256(&v139, &v128, &v134);
  }
  else
  {
    unint64_t v90 = a9[1].u64[1];
    if (v21 > v90
      || v21 == v90 && ((unint64_t v91 = a9[1].u64[0], v20 > v91) || v20 == v91 && __PAIR128__(a8, a7) >= *(_OWORD *)a9))
    {
      int64x2_t v139 = v134;
      int64x2_t v140 = v135;
      int64x2_t v93 = a9[1];
      int64x2_t v128 = *a9;
      int64x2_t v129 = v93;
      bid_sub256(&v139, &v128, &v134);
      uint64_t v16 = a5;
    }
    else
    {
      int64x2_t v92 = a9[1];
      int64x2_t v139 = *a9;
      int64x2_t v140 = v92;
      int64x2_t v128 = v134;
      int64x2_t v129 = v135;
      bid_sub256(&v139, &v128, &v134);
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v134), (int32x4_t)vceqzq_s64(v135))))) & 1) == 0)
    {
      if (a3 <= -6176) {
        int v101 = -6176;
      }
      else {
        int v101 = a3;
      }
      *(void *)&long long v130 = 0;
      *((void *)&v130 + 1) = ((unint64_t)(a10 == 1) << 63) | ((unint64_t)(v101 + 6176) << 49);
      double result = 0.0;
      *a16 = v130;
      return result;
    }
  }
  int64x2_t v139 = v134;
  int64x2_t v140 = v135;
  uint64_t v94 = bid_bid_nr_digits256((unint64_t *)&v139);
  int v95 = v94 - 34;
  if ((int)v94 > 34)
  {
    if (v94 > 0x26)
    {
      int64x2_t v139 = v134;
      if (v94 > 0x39)
      {
        int64x2_t v140 = v135;
        __bid_round256_58_76(v94, (v94 - 34), (unint64_t *)&v139, (unint64_t *)&v134, &v131, (_DWORD *)&v133 + 1, &v133, (_DWORD *)&v132 + 1, &v132);
        int64x2_t v100 = v134;
      }
      else
      {
        int64x2_t v140 = (int64x2_t)v135.u64[0];
        __bid_round192_39_57(v94, v94 - 34, (unint64_t *)&v139, (unint64_t *)v141, &v131, (_DWORD *)&v133 + 1, &v133, (_DWORD *)&v132 + 1, &v132);
        int64x2_t v100 = (int64x2_t)v141[0];
      }
      int64x2_t v136 = v100;
      uint64_t v99 = v100.i64[1];
    }
    else
    {
      int64x2_t v137 = v134;
      __bid_round128_19_38(v94, v94 - 34, v134.u64[0], v134.u64[1], (unint64_t *)&v136, &v131, (_DWORD *)&v133 + 1, &v133, (_DWORD *)&v132 + 1, &v132);
      uint64_t v99 = v136.i64[1];
    }
    int v103 = v95 + a3;
    BOOL v96 = v95 + a3 < -6176;
    a3 = v131 + v103;
    if (a10)
    {
      v137.i64[0] = v136.i64[0];
      v137.i64[1] = v16 | v99 | 0x3040000000000000;
      bid_rounding_correction(a10, SHIDWORD(v132), v132, SHIDWORD(v133), v133, 0, v137.i64, a15);
    }
    unint64_t v97 = v99 | ((unint64_t)(a3 + 6176) << 49);
    uint64_t v94 = 34;
    unint64_t v98 = &v136;
  }
  else
  {
    BOOL v96 = (int)v94 + a3 < -6142;
    unint64_t v97 = v134.i64[1] | ((unint64_t)(a3 + 6176) << 49);
    unint64_t v98 = &v134;
  }
  unint64_t v104 = v97 | v16;
  unint64_t v105 = v98->i64[0];
  *(void *)&long long v130 = v98->i64[0];
  *((void *)&v130 + 1) = v104;
  if (!a10 && a3 + (int)v94 >= 6146)
  {
    *(void *)&long long v130 = 0;
    *((void *)&v130 + 1) = v16 | 0x7800000000000000;
    double result = 0.0;
    *a16 = v130;
    *a15 |= 0x28u;
    return result;
  }
  BOOL v127 = v96;
  BOOL v106 = v133;
  int v107 = HIDWORD(v133);
  int v109 = v132;
  int v108 = HIDWORD(v132);
  if (a3 <= -6177)
  {
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    int v110 = -6176 - a3;
    if (-6176 - a3 > (int)v94)
    {
      int v109 = 0;
      BOOL v106 = 0;
      int v107 = 0;
      *(void *)&long long v130 = 0;
      *((void *)&v130 + 1) = v16;
LABEL_52:
      a3 = -6176;
      int v108 = 1;
      goto LABEL_89;
    }
    if (v110 != v94)
    {
      if ((int)v94 > 18)
      {
        v137.i64[0] = v105;
        v137.i64[1] = v104 & 0x1FFFFFFFFFFFFLL;
        __bid_round128_19_38(v94, v110, v105, v104 & 0x1FFFFFFFFFFFFLL, (unint64_t *)&v130, &v131, (_DWORD *)&v133 + 1, &v133, (_DWORD *)&v132 + 1, &v132);
        unint64_t v113 = *((void *)&v130 + 1);
      }
      else
      {
        __bid_round64_2_18(v94, v110, v105, &v138, &v131, (_DWORD *)&v133 + 1, &v133, (_DWORD *)&v132 + 1, &v132);
        unint64_t v113 = 0;
        *(void *)&long long v130 = v138;
      }
      if (v131)
      {
        unint64_t v118 = ((5 * (unint64_t)v130) >> 31) + 10 * DWORD1(v130);
        *(void *)&long long v130 = (10 * v130) | (v118 << 32);
        unint64_t v113 = 0xA00000000 * (HIDWORD(v113) & 0x1FFFF) + 10 * v113 + HIDWORD(v118);
      }
      uint64_t v119 = v113 & 0x1FFFFFFFFFFFFLL | v16;
      *((void *)&v130 + 1) = v119;
      int v120 = v109 | v107;
      BOOL v121 = (v109 | v107) != 0;
      int v107 = HIDWORD(v133);
      if (v120 && HIDWORD(v133))
      {
        uint64_t v122 = v130;
        *(void *)&long long v130 = v130 - 1;
        if (!v122) {
          *((void *)&v130 + 1) = v119 - 1;
        }
        int v107 = 0;
        BOOL v106 = v133;
        a3 = -6176;
        int v108 = 1;
        int v109 = v132;
        goto LABEL_89;
      }
      int v123 = v108 | v106;
      BOOL v124 = (v108 | v106) != 0;
      BOOL v106 = v133;
      if (v123 && v133)
      {
        BOOL v63 = __CFADD__((void)v130, 1);
        *(void *)&long long v130 = v130 + 1;
        if (v63) {
          *((void *)&v130 + 1) = v119 + 1;
        }
        BOOL v106 = 0;
        a3 = -6176;
        int v109 = 1;
        int v108 = HIDWORD(v132);
        goto LABEL_89;
      }
      int v109 = v132;
      int v108 = HIDWORD(v132);
      if (!v133 && !v132)
      {
        BOOL v106 = 0;
        int v107 = 0;
        a3 = -6176;
        int v109 = v121;
        int v108 = v123 != 0;
        goto LABEL_89;
      }
      if (!v133) {
        LOBYTE(v121) = 0;
      }
      if (v121)
      {
        int v109 = 0;
        BOOL v106 = 0;
        int v107 = 0;
        goto LABEL_52;
      }
      char v126 = !v124;
      if (!HIDWORD(v133)) {
        char v126 = 1;
      }
      if ((v126 & 1) == 0)
      {
        int v108 = 0;
        BOOL v106 = 0;
        int v107 = 0;
        a3 = -6176;
        int v109 = 1;
        goto LABEL_89;
      }
LABEL_88:
      a3 = -6176;
      goto LABEL_89;
    }
    if ((int)v94 > 19)
    {
      unint64_t v114 = v104 & 0x1FFFFFFFFFFFFLL;
      unint64_t v115 = (unint64_t *)&__bid_midpoint128[(v94 - 20)];
      unint64_t v116 = v115[1];
      if (v114 >= v116)
      {
        if (v114 == v116)
        {
          unint64_t v117 = *v115;
          if (v105 < v117) {
            goto LABEL_62;
          }
          if (v105 == v117)
          {
            int v109 = 0;
            int v108 = 0;
            BOOL v112 = 0;
            BOOL v106 = 1;
            goto LABEL_87;
          }
        }
        int v108 = 0;
        BOOL v106 = 0;
        int v109 = 1;
        BOOL v112 = 1;
        goto LABEL_87;
      }
    }
    else
    {
      unint64_t v111 = __bid_midpoint64[(v94 - 1)];
      if (v105 >= v111)
      {
        int v108 = 0;
        BOOL v106 = v105 == v111;
        BOOL v112 = v105 != v111;
        int v109 = v112;
LABEL_87:
        int v107 = 0;
        *(void *)&long long v130 = v112;
        *((void *)&v130 + 1) = v16;
        goto LABEL_88;
      }
    }
LABEL_62:
    int v109 = 0;
    BOOL v106 = 0;
    BOOL v112 = 0;
    int v108 = 1;
    goto LABEL_87;
  }
LABEL_89:
  if (a10) {
    bid_rounding_correction(a10, v108, v109, v107, v106, a3, (uint64_t *)&v130, a15);
  }
  if (v107 || v106 || v108 || v109)
  {
    int v125 = *a15;
    *a15 |= 0x20u;
    if (v127) {
      *a15 = v125 | 0x30;
    }
  }
  *a11 = v107;
  *a12 = v106;
  *a13 = v108;
  *a14 = v109;
  double result = *(double *)&v130;
  *a16 = v130;
  return result;
}

void *bid_add256(void *result, void *a2, void *a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *a2 + *result;
  if (__CFADD__(*a2, *result) && (BOOL v5 = __CFADD__(v3, 1), ++v3, result[1] = v3, v5))
  {
    uint64_t v6 = result[2];
    uint64_t v7 = v6 + 1;
    result[2] = v6 + 1;
    if (v6 == -1) {
      ++result[3];
    }
    uint64_t v8 = a2[1];
  }
  else
  {
    uint64_t v9 = a2[1];
    uint64_t v7 = result[2];
    BOOL v5 = __CFADD__(v9, v3);
    uint64_t v8 = v9 + v3;
    if (v5)
    {
      BOOL v5 = __CFADD__(v7++, 1);
      result[2] = v7;
      if (v5)
      {
        uint64_t v10 = result[3] + 1;
        result[3] = v10;
        uint64_t v11 = a2[2];
        goto LABEL_16;
      }
    }
  }
  uint64_t v12 = a2[2];
  uint64_t v10 = result[3];
  BOOL v5 = __CFADD__(v12, v7);
  uint64_t v11 = v12 + v7;
  if (v5) {
    result[3] = ++v10;
  }
LABEL_16:
  uint64_t v13 = a2[3] + v10;
  *a3 = v4;
  a3[1] = v8;
  a3[2] = v11;
  a3[3] = v13;
  return result;
}

void *bid_sub256(void *result, void *a2, void *a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result - *a2;
  if (*result >= *a2)
  {
    unint64_t v5 = result[1];
  }
  else
  {
    unint64_t v5 = v3 - 1;
    result[1] = v3 - 1;
    if (!v3)
    {
      uint64_t v6 = result[2];
      unint64_t v7 = v6 - 1;
      result[2] = v6 - 1;
      if (!v6) {
        --result[3];
      }
      unint64_t v8 = a2[1];
      unint64_t v5 = -1;
      goto LABEL_10;
    }
  }
  unint64_t v8 = a2[1];
  unint64_t v7 = result[2];
  if (v8 > v5)
  {
    result[2] = v7 - 1;
    if (!v7)
    {
      uint64_t v10 = result[3] - 1;
      result[3] = v10;
      unint64_t v9 = a2[2];
      unint64_t v7 = -1;
      goto LABEL_13;
    }
    --v7;
  }
LABEL_10:
  unint64_t v9 = a2[2];
  uint64_t v10 = result[3];
  if (v9 > v7) {
    result[3] = --v10;
  }
LABEL_13:
  unint64_t v11 = v5 - v8;
  uint64_t v12 = v10 - a2[3];
  *a3 = v4;
  a3[1] = v11;
  a3[2] = v7 - v9;
  a3[3] = v12;
  return result;
}

uint64_t bid_bid_nr_digits256(unint64_t *a1)
{
  unint64_t v1 = a1[3];
  if (v1)
  {
LABEL_2:
    uint64_t v2 = &qword_1BDEEFC58;
    uint64_t v3 = 1;
    uint64_t v4 = &qword_1BDEEFC58;
    do
    {
      unint64_t v5 = *v4;
      v4 += 4;
      BOOL v6 = v1 == v5;
      if (v1 < v5) {
        break;
      }
      if (v6)
      {
        unint64_t v7 = a1[2];
        unint64_t v8 = *(v2 - 1);
        if (v7 < v8 || v7 == v8 && *(_OWORD *)a1 < *(_OWORD *)(v2 - 3)) {
          break;
        }
      }
      ++v3;
      uint64_t v2 = v4;
    }
    while (v3 != 30);
    return (v3 + 39);
  }
  unint64_t v10 = a1[2];
  if (v10 == 2)
  {
    if (*(_OWORD *)a1 >= __PAIR128__(0xF050FE938943ACC4, 0x5F65568000000000)) {
      goto LABEL_2;
    }
    return 39;
  }
  if (v10 == 1) {
    return 39;
  }
  if (v10) {
    goto LABEL_2;
  }
  unint64_t v11 = a1[1];
  if (v11)
  {
    if (v11 < 5 || v11 == 5 && *a1 < 0x6BC75E2D63100000)
    {
      return 20;
    }
    else
    {
      BOOL v14 = &qword_1BDEEE628;
      for (uint64_t i = 1; i != 19; ++i)
      {
        if (*(_OWORD *)a1 < *(_OWORD *)(v14 - 1)) {
          break;
        }
        v14 += 2;
      }
      return (i + 20);
    }
  }
  else
  {
    unint64_t v12 = *a1;
    uint64_t v13 = 1;
    uint64_t result = 20;
    while (v12 >= __bid_ten2k64[v13])
    {
      if (++v13 == 20) {
        return result;
      }
    }
    return v13;
  }
}

unint64_t __bid128_fmod(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, _DWORD *a5)
{
  unint64_t v5 = a3;
  uint64_t v6 = a4 & 0x7800000000000000;
  if (((a4 >> 61) & 3) == 3)
  {
    if (v6 == 0x7800000000000000)
    {
      unint64_t v7 = 0xFE00000000000000;
      if ((a4 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93)
      {
        BOOL v12 = (a4 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a3 >= 0x38C15B0A00000000;
        if (!v12)
        {
          unint64_t v7 = 0xFE003FFFFFFFFFFFLL;
          unint64_t v8 = a3;
        }
        else
        {
          unint64_t v8 = 0;
        }
      }
      else
      {
        unint64_t v8 = 0;
      }
      LODWORD(v10) = 0;
      unint64_t v11 = 0;
      if ((a4 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v5 = 0;
      }
      else {
        unint64_t v5 = v8;
      }
      if ((a4 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v7 = 0xF800000000000000;
      }
      unint64_t v9 = v7 & a4;
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v9 = 0;
      unint64_t v11 = 0;
      uint64_t v10 = (a4 >> 47) & 0x3FFF;
    }
  }
  else
  {
    unint64_t v9 = a4 & 0x1FFFFFFFFFFFFLL;
    if ((a4 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0
      || (a4 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a3 >= 0x378D8E6400000000)
    {
      unint64_t v5 = 0;
      unint64_t v9 = 0;
    }
    uint64_t v10 = (a4 >> 49) & 0x3FFF;
    unint64_t v11 = v9 | v5;
  }
  long long v65 = 0uLL;
  uint64_t v14 = a2 & 0x7800000000000000;
  if (((a2 >> 61) & 3) == 3)
  {
    if (v14 == 0x7800000000000000)
    {
      *(void *)&long long v65 = a1;
      if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
        || (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a1 >= 0x38C15B0A00000000)
      {
        *(void *)&long long v65 = 0;
      }
      if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
        *(void *)&long long v65 = 0;
      }
    }
    goto LABEL_70;
  }
  unint64_t v15 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
    goto LABEL_36;
  }
  if ((a2 & 0x1FFFFFFFFFFFFLL) != 0x1ED09BEAD87C0)
  {
    unint64_t v62 = a1;
    goto LABEL_37;
  }
  unint64_t v62 = a1;
  if (a1 >= 0x378D8E6400000000)
  {
LABEL_36:
    unint64_t v62 = 0;
    unint64_t v15 = 0;
  }
LABEL_37:
  *(void *)&long long v65 = v62;
  *((void *)&v65 + 1) = v15;
  uint64_t v16 = (a2 >> 49) & 0x3FFF;
  if (!(v15 | v62))
  {
LABEL_70:
    if ((~a4 & 0x7E00000000000000) == 0) {
      *a5 |= 1u;
    }
    if ((~a2 & 0x7C00000000000000) == 0)
    {
      if ((~a2 & 0x7E00000000000000) == 0) {
        *a5 |= 1u;
      }
      return v65;
    }
    uint64_t v27 = a4 & 0x7C00000000000000;
    if (v14 == 0x7800000000000000 && v27 != 0x7C00000000000000 || !(v9 | v5)) {
      goto LABEL_86;
    }
    if (v27 == 0x7800000000000000 || v11) {
      return 0;
    }
LABEL_81:
    if (v27 == 0x7C00000000000000)
    {
      if ((~a4 & 0x7E00000000000000) == 0) {
        *a5 |= 1u;
      }
      return v5;
    }
    unint64_t v5 = a1;
    if (v6 == 0x7800000000000000) {
      return v5;
    }
LABEL_86:
    unint64_t v5 = 0;
    *a5 |= 1u;
    return v5;
  }
  if (!v11)
  {
    uint64_t v27 = a4 & 0x7C00000000000000;
    goto LABEL_81;
  }
  v64[0] = 0;
  v64[1] = 0;
  int v17 = v16 - v10;
  if ((int)v16 <= (int)v10)
  {
    if (v17 < -34) {
      return a1;
    }
    unint64_t v28 = (uint64_t *)((char *)&__bid_power10_table_128 + 16 * (v10 - v16));
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    unint64_t v31 = HIDWORD(v30);
    unint64_t v32 = v30 * (unint64_t)HIDWORD(v5);
    unint64_t v33 = HIDWORD(v32) + HIDWORD(v30) * (unint64_t)HIDWORD(v5);
    unint64_t v34 = HIDWORD(v30) * (unint64_t)v5
        + v32
        + ((v30 * (unint64_t)v5) >> 32);
    unint64_t v35 = HIDWORD(v34);
    unint64_t v36 = (v30 * v5) | ((unint64_t)v34 << 32);
    unint64_t v37 = HIDWORD(*v28);
    unint64_t v38 = *v28 * (unint64_t)HIDWORD(v5);
    unint64_t v39 = *v28 * (unint64_t)v5;
    unint64_t v40 = HIDWORD(v38) + HIDWORD(*v28) * HIDWORD(v5);
    unint64_t v41 = HIDWORD(*v28) * v5 + v38 + HIDWORD(v39);
    unsigned long long v42 = __PAIR128__(v33, v36) + __PAIR128__(v35, v40 + HIDWORD(v41));
    unint64_t v43 = v30 * (unint64_t)HIDWORD(v9);
    unint64_t v44 = v30 * (unint64_t)v9;
    unint64_t v45 = v31 * (unint64_t)v9;
    unint64_t v46 = HIDWORD(v43) + v31 * (unint64_t)HIDWORD(v9);
    unint64_t v47 = v45 + v43 + HIDWORD(v44);
    unint64_t v48 = HIDWORD(v47);
    unint64_t v49 = v44 | ((unint64_t)v47 << 32);
    unint64_t v50 = v29 * (unint64_t)HIDWORD(v9);
    unint64_t v51 = v29 * (unint64_t)v9;
    unint64_t v52 = HIDWORD(v29) * (unint64_t)v9 + v50 + HIDWORD(v51);
    unint64_t v53 = v51 | ((unint64_t)v52 << 32);
    unsigned long long v54 = __PAIR128__(v46, v49)
        + __PAIR128__(v48, HIDWORD(v50) + v37 * (unint64_t)HIDWORD(v9) + HIDWORD(v52));
    unint64_t v55 = v36 + v40 + HIDWORD(v41) + v53;
    BOOL v12 = __CFADD__(__CFADD__((void)v42, v53), v49 + HIDWORD(v50) + v37 * (unint64_t)HIDWORD(v9) + HIDWORD(v52));
    unint64_t v56 = __CFADD__((void)v42, v53)
        + v49
        + HIDWORD(v50)
        + v37 * (unint64_t)HIDWORD(v9)
        + HIDWORD(v52);
    BOOL v57 = v12;
    unint64_t v58 = *((void *)&v42 + 1) + v56;
    uint64_t v59 = __CFADD__(*((void *)&v42 + 1), v56) || (unint64_t)v57;
    if (v58 || *((void *)&v54 + 1) != v59 << 63 >> 63 || v55 > v15)
    {
      return a1;
    }
    else
    {
      unint64_t v60 = v39 | ((unint64_t)v41 << 32);
      if (v55 != v15 || (unint64_t v5 = a1, v60 <= (unint64_t)v65))
      {
        v63[0] = 0;
        v63[1] = 0;
        bid___div_128_by_128_1125(v64, v63, v65, *((unint64_t *)&v65 + 1), v60, v55);
        return v63[0];
      }
    }
  }
  else
  {
    if (v9) {
      int v18 = 38;
    }
    else {
      int v18 = 34;
    }
    do
    {
      if (v17 < 1) {
        break;
      }
      uint64_t v19 = ((unint64_t)COERCE_UNSIGNED_INT((float)(unint64_t)v65 + (float)((float)v15 * 1.8447e19)) >> 23)
          - 127;
      int v20 = v18 - __bid_estimate_decimal_digits[v19];
      unint64_t v21 = (void *)((char *)&__bid_power10_index_binexp_128 + 16 * v19);
      uint64_t v22 = v21[1];
      if ((uint64_t)(v15 - v22) > 0 || v15 == v22 && (unint64_t)v65 >= *v21) {
        --v20;
      }
      if (v17 >= v20)
      {
        v17 -= v20;
      }
      else
      {
        int v20 = v17;
        int v17 = 0;
      }
      unint64_t v23 = (uint64_t *)((char *)&__bid_power10_table_128 + 16 * v20);
      uint64_t v24 = *v23;
      unint64_t v25 = *v23 * (unint64_t)DWORD1(v65);
      unint64_t v26 = HIDWORD(v24) * (unint64_t)v65
          + v25
          + ((v24 * (unint64_t)v65) >> 32);
      bid___div_128_by_128_1125(v64, (unint64_t *)&v65, (*v23 * v65) | ((unint64_t)v26 << 32), v24 * v15 + v23[1] * v65 + HIDWORD(v24) * (unint64_t)DWORD1(v65) + HIDWORD(v25) + HIDWORD(v26), v5, v9);
      unint64_t v15 = *((void *)&v65 + 1);
    }
    while (v65 != 0);
    return v65;
  }
  return v5;
}

unint64_t *bid___div_128_by_128_1125(unint64_t *result, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (!(a4 | a6))
  {
    *uint64_t result = a3 / a5;
    result[1] = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v21 = a3 - *result * a5;
    goto LABEL_39;
  }
  double v6 = (double)a5 + (double)a6 * 1.84467441e19;
  double v7 = ((double)a3 + (double)a4 * 1.84467441e19) / v6;
  if (!a6 && !(a5 >> 28) && a5 << 36 <= a4)
  {
    double v8 = v7 * 8.67361738e-19;
    unint64_t v9 = (unint64_t)v8 - 4;
    unint64_t v10 = HIDWORD(v9) * a5;
    unint64_t v11 = ((unint64_t)v8 - 4) * a5;
    unint64_t v12 = HIDWORD(v10);
    unint64_t v13 = HIDWORD(v11) + v10;
    *((void *)&v14 + 1) = (v12 + HIDWORD(v13));
    *(void *)&long long v14 = v11 & 0xFFFFFFF0 | (v13 << 32);
    uint64_t v15 = a4 - (v14 >> 4);
    BOOL v37 = a3 >= v11 << 60;
    a3 -= v11 << 60;
    uint64_t v16 = !v37;
    a4 = v15 - v16;
    double v17 = (double)a3 + (double)(unint64_t)(v15 - v16) * 1.84467441e19;
    unint64_t v18 = v9 >> 4;
    double v7 = v17 / v6;
    unint64_t v19 = v9 << 60;
    unint64_t v20 = a5 >> 13;
LABEL_12:
    if (a4 > v20 || a4 == v20 && a3 > a5 << 51)
    {
      double v23 = v7 * 1.77635684e-15;
      unint64_t v24 = (unint64_t)v23 - 1;
      unint64_t v25 = HIDWORD(v24) * (unint64_t)a5;
      unint64_t v26 = v24 * (unint64_t)a5;
      unint64_t v27 = ((unint64_t)v23 - 1) * (unint64_t)HIDWORD(a5) + v25 + HIDWORD(v26);
      *((void *)&v28 + 1) = (v24 * a6 + HIDWORD(v24) * HIDWORD(a5) + HIDWORD(v25) + HIDWORD(v27));
      *(void *)&long long v28 = v26 & 0xFFFF8000 | (v27 << 32);
      uint64_t v29 = a4 - (v28 >> 15);
      BOOL v37 = a3 >= v26 << 49;
      a3 -= v26 << 49;
      uint64_t v30 = !v37;
      a4 = v29 - v30;
      BOOL v37 = __CFADD__(v19, v24 << 49);
      v19 += v24 << 49;
      v18 += v37 + (v24 >> 15);
      double v7 = ((double)a3 + (double)(unint64_t)(v29 - v30) * 1.84467441e19) / v6;
    }
    goto LABEL_20;
  }
  unint64_t v19 = 0;
  if (!(a6 >> 13))
  {
    *((void *)&v22 + 1) = a6;
    *(void *)&long long v22 = a5;
    unint64_t v20 = v22 >> 13;
    unint64_t v18 = 0;
    goto LABEL_12;
  }
  unint64_t v18 = 0;
LABEL_20:
  unint64_t v31 = (unint64_t)v7;
  unint64_t v32 = (unint64_t)v7 >> 32;
  unint64_t v33 = v32 * (unint64_t)a5;
  unint64_t v34 = (unint64_t)v7 * (unint64_t)HIDWORD(a5)
      + v33
      + (((unint64_t)v7 * (unint64_t)a5) >> 32);
  uint64_t v35 = (__PAIR128__(a4, a3)
       - __PAIR128__((unint64_t)v7 * a6 + v32 * (unint64_t)HIDWORD(a5) + HIDWORD(v33) + HIDWORD(v34), ((unint64_t)v7 * a5) | ((unint64_t)v34 << 32))) >> 64;
  unint64_t v21 = a3 - (((unint64_t)v7 * a5) | ((unint64_t)v34 << 32));
  if (v35 < 0)
  {
    unint64_t v39 = v31 - 1;
    uint64_t v35 = (__PAIR128__(v35, v21) + __PAIR128__(a6, a5)) >> 64;
    v21 += a5;
    v31 -= 2;
    unsigned long long v40 = __PAIR128__(v35, v21) + __PAIR128__(a6, a5);
    BOOL v41 = v35 >= 0;
    if (v35 < 0) {
      uint64_t v35 = (__PAIR128__(v35, v21) + __PAIR128__(a6, a5)) >> 64;
    }
    else {
      unint64_t v31 = v39;
    }
    if (!v41) {
      unint64_t v21 = v40;
    }
  }
  else
  {
    unint64_t v36 = v35 - a6;
    if (v35 > a6 || (v35 == a6 ? (BOOL v37 = v21 >= a5) : (BOOL v37 = 0), v37))
    {
      ++v31;
      BOOL v37 = v21 >= a5;
      v21 -= a5;
      uint64_t v38 = !v37;
      uint64_t v35 = v36 - v38;
    }
  }
  BOOL v37 = __CFADD__(v31, v19);
  unint64_t v42 = v31 + v19;
  if (v37) {
    ++v18;
  }
  *uint64_t result = v42;
  result[1] = v18;
  a2[1] = v35;
LABEL_39:
  *a2 = v21;
  return result;
}

uint64_t __bid128_hypot(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  int v10 = __bid128_quiet_greater(a3, a4 & 0x7FFFFFFFFFFFFFFFLL, a1, a2 & 0x7FFFFFFFFFFFFFFFLL, &my_fpsf);
  if (v10) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = a4;
  }
  if (v10) {
    unint64_t v12 = a1;
  }
  else {
    unint64_t v12 = a3;
  }
  if (v10) {
    unint64_t v13 = a4;
  }
  else {
    unint64_t v13 = a2;
  }
  if (v10) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = a1;
  }
  uint64_t v15 = v11 & 0x7800000000000000;
  if (((v11 >> 61) & 3) != 3)
  {
    uint64_t v18 = v11 & 0x1FFFFFFFFFFFFLL;
    if ((v11 & 0x1FFFFFFFFFFFFLL) <= 0x1ED09BEAD87C0)
    {
      if ((v11 & 0x1FFFFFFFFFFFFLL) != 0x1ED09BEAD87C0)
      {
        unint64_t v39 = v12;
LABEL_22:
        uint64_t v19 = (v11 >> 49) & 0x3FFF;
        unint64_t v20 = v18 | v39;
        goto LABEL_39;
      }
      unint64_t v39 = v12;
      if (v12 < 0x378D8E6400000000) {
        goto LABEL_22;
      }
    }
    unint64_t v39 = 0;
    uint64_t v18 = 0;
    goto LABEL_22;
  }
  if (v15 == 0x7800000000000000)
  {
    unint64_t v16 = 0xFE00000000000000;
    if ((v11 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93)
    {
      BOOL v21 = (v11 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && v12 >= 0x38C15B0A00000000;
      if (!v21)
      {
        unint64_t v16 = 0xFE003FFFFFFFFFFFLL;
        unint64_t v17 = v12;
      }
      else
      {
        unint64_t v17 = 0;
      }
    }
    else
    {
      unint64_t v17 = 0;
    }
    LODWORD(v19) = 0;
    unint64_t v20 = 0;
    if ((v11 & 0x7C00000000000000) == 0x7800000000000000) {
      unint64_t v39 = 0;
    }
    else {
      unint64_t v39 = v17;
    }
    if ((v11 & 0x7C00000000000000) == 0x7800000000000000) {
      unint64_t v16 = 0xF800000000000000;
    }
    uint64_t v18 = v11 & v16;
  }
  else
  {
    unint64_t v39 = 0;
    uint64_t v18 = 0;
    unint64_t v20 = 0;
    uint64_t v19 = (v11 >> 47) & 0x3FFF;
  }
LABEL_39:
  uint64_t v23 = v13 & 0x7800000000000000;
  if (((v13 >> 61) & 3) == 3)
  {
    if (v23 == 0x7800000000000000)
    {
      if ((v13 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93)
      {
        if ((v13 & 0x3FFFFFFFFFFFLL) != 0x314DC6448D93 || v14 < 0x38C15B0A00000000) {
          unint64_t v24 = v14;
        }
        else {
          unint64_t v24 = 0;
        }
      }
      else
      {
        unint64_t v24 = 0;
      }
      if ((v13 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v40 = 0;
      }
      else {
        unint64_t v40 = v24;
      }
    }
    else
    {
      unint64_t v40 = 0;
    }
    goto LABEL_65;
  }
  uint64_t v25 = v13 & 0x1FFFFFFFFFFFFLL;
  if ((v13 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
    goto LABEL_47;
  }
  if ((v13 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0)
  {
    unint64_t v40 = v14;
    if (v14 < 0x378D8E6400000000) {
      goto LABEL_48;
    }
LABEL_47:
    unint64_t v40 = 0;
    uint64_t v25 = 0;
    goto LABEL_48;
  }
  unint64_t v40 = v14;
LABEL_48:
  if (!(v25 | v40))
  {
LABEL_65:
    if ((~v13 & 0x7C00000000000000) == 0)
    {
      uint64_t v29 = v13 & 0x7E00000000000000;
      if ((~v11 & 0x7E00000000000000) == 0 || v29 == 0x7E00000000000000) {
        my_fpsf |= 1u;
      }
      if ((v11 & 0x7C00000000000000) != 0x7800000000000000 || v29 == 0x7E00000000000000) {
        return v40;
      }
      else {
        return 0;
      }
    }
    if ((~v11 & 0x7E00000000000000) != 0 && v23 == 0x7800000000000000) {
      return 0;
    }
    if (v20) {
      return v12;
    }
    char v31 = 1;
    goto LABEL_100;
  }
  if (!v20)
  {
    char v31 = 0;
LABEL_100:
    if ((~v11 & 0x7C00000000000000) == 0)
    {
      if ((~v11 & 0x7E00000000000000) == 0) {
        my_fpsf |= 1u;
      }
      return v39;
    }
    if (v15 == 0x7800000000000000) {
      return 0;
    }
    if (v31) {
      return v40;
    }
    return v14;
  }
  uint64_t v26 = (v13 >> 49) & 0x3FFF;
  if ((int)v26 - (int)v19 >= 35) {
    return v14;
  }
  __n128 v87 = 0uLL;
  unint64_t v32 = v18 | ((unint64_t)(v19 - v26 + 6176) << 49);
  v86[0] = __bid128_to_binary128(v40, v25 | 0x3040000000000000, a5, &my_fpsf);
  v86[1] = v33;
  v85[0] = __bid128_to_binary128(v39, v32, a5, &my_fpsf);
  v85[1] = v34;
  memset(v91, 0, sizeof(v91));
  memset(v90, 0, sizeof(v90));
  memset(v89, 0, sizeof(v89));
  memset(v88, 0, sizeof(v88));
  if ((__dpml_bid_unpack2__(v86, v85, (uint64_t)v91, (uint64_t)v90, qword_1BDDBC738, (uint64_t)&v87, (uint64_t *)v88) & 0x8000000000000000) == 0)
  {
    memset(v92, 0, sizeof(v92));
    __dpml_bid_multiply__(v91, v91, v92);
    __dpml_bid_multiply__(v90, v90, v89);
    __dpml_bid_addsub__((uint64_t)v89, v92, 0, (uint64_t)v92);
    __dpml_bid_ffs_and_shift__((uint64_t)v92, 0);
    __dpml_bid_ux_sqrt_evaluation__(v92, v89);
    __dpml_bid_pack__((unsigned int *)v89, &v87, 0, 14);
  }
  unint64_t v35 = __binary128_to_bid128(v87.n128_u64[0], v87.n128_u64[1], a5, &my_fpsf);
  unint64_t v37 = v36 & 0x1FFFFFFFFFFFFLL;
  if (v35 == 0x378D8E6400000000 && (v36 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0) {
    unint64_t v39 = 0x38C15B0A00000000;
  }
  else {
    unint64_t v39 = v35;
  }
  int v38 = v26
      + ((v36 >> 49) & 0x3FFF)
      - 6176
      + (v35 == 0x378D8E6400000000 && (v36 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0);
  if (v35 == 0x378D8E6400000000 && (v36 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0) {
    unint64_t v37 = 0x314DC6448D93;
  }
  if (v38 < 0x3000) {
    return v39;
  }
  if (v38 < 0)
  {
    if (v38 > 0xFFFFFFDD)
    {
      int v41 = -v38;
      unsigned long long v42 = __bid_round_const_table_128[36 * a5 + -v38] + __PAIR128__(v37, v39);
      unint64_t v43 = &__bid_reciprocals10_128[2 * -v38];
      unint64_t v44 = *v43;
      unint64_t v45 = v43[1];
      unint64_t v46 = v45 * (unint64_t)DWORD1(v42);
      unint64_t v47 = HIDWORD(v46);
      unint64_t v48 = HIDWORD(v45) * (unint64_t)v42
          + v46
          + ((v45 * (unint64_t)v42) >> 32);
      unint64_t v49 = (v45 * v42) | ((unint64_t)v48 << 32);
      unint64_t v50 = DWORD2(v42) * (unint64_t)HIDWORD(v44);
      unint64_t v51 = HIDWORD(v42) * (unint64_t)v44
          + v50
          + ((DWORD2(v42) * (unint64_t)v44) >> 32);
      unint64_t v52 = (DWORD2(v42) * v44) | ((unint64_t)v51 << 32);
      unint64_t v53 = v44 * (unint64_t)DWORD1(v42);
      unint64_t v54 = HIDWORD(v44) * (unint64_t)v42
          + v53
          + ((v44 * (unint64_t)v42) >> 32);
      unint64_t v55 = HIDWORD(v53) + HIDWORD(v44) * (unint64_t)DWORD1(v42) + HIDWORD(v54);
      unint64_t v56 = (v44 * v42) | ((unint64_t)v54 << 32);
      unint64_t v57 = HIDWORD(v42) * (unint64_t)v45;
      unint64_t v58 = HIDWORD(v57) + HIDWORD(v42) * (unint64_t)HIDWORD(v45);
      unint64_t v59 = DWORD2(v42) * (unint64_t)HIDWORD(v45)
          + v57
          + ((DWORD2(v42) * (unint64_t)v45) >> 32);
      unint64_t v60 = HIDWORD(v59);
      unint64_t v61 = (DWORD2(v42) * v45) | ((unint64_t)v59 << 32);
      BOOL v62 = __CFADD__(v49, v52);
      unint64_t v63 = v49 + v52 + v55;
      unsigned long long v64 = __PAIR128__(v58, v61)
          + __PAIR128__(v60, (__PAIR128__(v47+ HIDWORD(v45) * (unint64_t)DWORD1(v42)+ HIDWORD(v42) * (unint64_t)HIDWORD(v44)+ HIDWORD(v50)+ HIDWORD(v48)+ HIDWORD(v51), v49 + v52)+ __PAIR128__(v62, v55)) >> 64);
      int v65 = __bid_recip_scale[v41];
      if (v65 >= 64) {
        unint64_t v39 = *((void *)&v64 + 1) >> v65;
      }
      else {
        unint64_t v39 = (*((void *)&v64 + 1) << -(char)v65) | ((unint64_t)v64 >> v65);
      }
      if (!a5 && (v39 & 1) != 0)
      {
        if (v65 < 65)
        {
          BOOL v67 = 0;
          unint64_t v66 = (void)v64 << -(char)v65;
        }
        else
        {
          unint64_t v66 = (*((void *)&v64 + 1) << -(char)v65) | ((unint64_t)v64 >> v65);
          BOOL v67 = (void)v64 << -(char)v65 != 0;
        }
        if (!v66 && !v67 && (v63 < v45 || v63 == v45 && v56 < v44)) {
          --v39;
        }
      }
      if ((my_fpsf & 0x20) != 0)
      {
        int v72 = 16;
LABEL_139:
        my_fpsf |= v72;
      }
      else
      {
        char v69 = 0x80 - v65;
        if (v65 < 65)
        {
          unint64_t v71 = 0;
          unint64_t v70 = (void)v64 << -(char)v65;
        }
        else
        {
          unint64_t v70 = (*((void *)&v64 + 1) << v69) | ((unint64_t)v64 >> v65);
          unint64_t v71 = (void)v64 << v69;
        }
        switch(a5)
        {
          case 0:
          case 4:
            int v72 = 48;
            if (v70 != 0x8000000000000000 || v71) {
              goto LABEL_139;
            }
            BOOL v73 = v63 == v45;
            if (v63 >= v45) {
              goto LABEL_158;
            }
            break;
          case 1:
          case 3:
            if (v70 | v71)
            {
              int v72 = 48;
              goto LABEL_139;
            }
            BOOL v73 = v63 == v45;
            if (v63 >= v45)
            {
              int v72 = 48;
LABEL_158:
              if (!v73 || v56 >= v44) {
                goto LABEL_139;
              }
            }
            break;
          default:
            BOOL v21 = __CFADD__(__CFADD__(v56, v44), v63);
            unint64_t v74 = __CFADD__(v56, v44) + v63;
            unsigned int v75 = v21;
            if (__CFADD__(v74, v45)) {
              uint64_t v76 = 1;
            }
            else {
              uint64_t v76 = v75;
            }
            if (v65 < 65)
            {
              unint64_t v79 = 0;
              unint64_t v78 = v70 >> -(char)v65;
              char v77 = v65 - 64;
            }
            else
            {
              char v77 = v65 - 64;
              unint64_t v78 = (v71 >> v69) | (v70 << v65);
              unint64_t v79 = v70 >> v69;
            }
            unint64_t v80 = 1 << v77;
            if (v65 < 64) {
              unint64_t v80 = 0;
            }
            BOOL v21 = __CFADD__(v78, v76);
            unint64_t v81 = v78 + v76;
            if (v21) {
              unint64_t v82 = v79 + 1;
            }
            else {
              unint64_t v82 = v79;
            }
            if (v82 <= v80)
            {
              BOOL v83 = v65 < 64 && v81 >> v65 == 0;
              BOOL v84 = v83;
              int v72 = 48;
              if (v82 != v80 || v84) {
                goto LABEL_139;
              }
            }
            break;
        }
      }
    }
    else
    {
      my_fpsf |= 0x30u;
      return a5 == 2;
    }
    return v39;
  }
  if (v38 > 0x3021) {
    goto LABEL_122;
  }
  while (1)
  {
    if (v37 < 0x314DC6448D93)
    {
      if (v38 < 12288) {
        return v39;
      }
      goto LABEL_96;
    }
    if (v37 != 0x314DC6448D93) {
      goto LABEL_121;
    }
    if (v39 >= 0x38C15B0A00000000 || v38 < 12288) {
      break;
    }
LABEL_96:
    unint64_t v37 = (v39 >> 63) + (v39 >> 61) + 10 * v37;
    if (10 * v39 < 8 * v39) {
      ++v37;
    }
    --v38;
    v39 *= 10;
  }
  unint64_t v37 = 0x314DC6448D93;
LABEL_121:
  if (v38 >= 12288)
  {
LABEL_122:
    if (v39 | v37)
    {
      my_fpsf |= 0x28u;
      if ((a5 | 2) == 3) {
        return 0x378D8E63FFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v39;
}

uint64_t __bid128_lgamma(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a1;
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    if (!__bid128_isZero(a1, a2))
    {
      if ((~a2 & 0x7800000000000000) == 0) {
        return 0;
      }
      __n128 v39 = 0uLL;
      __n128 v38 = 0uLL;
      __n128 v37 = 0uLL;
      __n128 v36 = 0uLL;
      __n128 v35 = 0uLL;
      __n128 v33 = 0uLL;
      __n128 v32 = 0uLL;
      __n128 v31 = 0uLL;
      __n128 v30 = 0uLL;
      v29[0] = 0;
      v29[1] = 0;
      bid128_to_binary128_2part(v39.n128_u64, v37.n128_u64, v4, a2);
      if (!bid_f128_cmp((uint64_t *)&v39, (uint64_t *)&c_m1e34, 3u))
      {
        if (bid_f128_cmp((uint64_t *)&v39, (uint64_t *)&c_1e34, 6u))
        {
          unint64_t v7 = __bid128_add(v4, a2, 5uLL, 0xB03E000000000000, a3, &my_fpsf);
          uint64_t v9 = v8;
          unint64_t v10 = __bid128_log(v4, a2, a3);
          uint64_t v12 = v11;
          unint64_t v13 = __bid128_sub(0x8512E0B1F71B1870, 0x2FFDC512596BF2BELL, v4, a2, a3, &my_fpsf);
          return bid128_ext_fma(v41, (int *)&v42, (int *)v34, &v40, v7, v9, v10, v12, v13, v14, a3, &my_fpsf);
        }
        if (!bid_f128_cmp((uint64_t *)&v39, (uint64_t *)&c_half_1130, 3u)
          || (unint64_t v16 = __bid128_round_integral_nearest_even(v4, a2, &my_fpsf),
              !__bid128_quiet_equal(v16, v17, v4, a2, &my_fpsf)))
        {
          if (bid_f128_cmp((uint64_t *)&v39, (uint64_t *)&c_half_1130, 6u))
          {
            bid_f128_lgamma(&v36, (uint64_t *)&v39);
            bid_f128_mul(&v38, (uint64_t *)&c_1_plus_eps, (uint64_t *)&v39);
            bid_f128_nextafter(&v38, (uint64_t *)&v39, (uint64_t *)&v38);
            bid_f128_lgamma(&v35, (uint64_t *)&v38);
            bid_f128_sub(&v30, (uint64_t *)&v35, (uint64_t *)&v36);
            bid_f128_sub(&v31, (uint64_t *)&v38, (uint64_t *)&v39);
            bid_f128_div(&v31, (uint64_t *)&v37, (uint64_t *)&v31);
            bid_f128_mul(&v31, (uint64_t *)&v31, (uint64_t *)&v30);
            bid_f128_add(&v36, (uint64_t *)&v36, (uint64_t *)&v31);
            unint64_t v19 = v36.n128_u64[1];
            unint64_t v18 = v36.n128_u64[0];
            int v20 = a3;
          }
          else
          {
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            __dpml_bid_unpack_x_or_y__((uint64_t *)&v39, 0, (uint64_t)&v42, &qword_1BDDBAE40, (uint64_t)v29, v41);
            if (bid_f128_cmp(v29, (uint64_t *)&c_1em100, 3u)) {
              return __bid128_log(v4, a2 & 0x7FFFFFFFFFFFFFFFLL, a3);
            }
            unint64_t v21 = __bid128_round_integral_nearest_even(v4, a2, &my_fpsf);
            unint64_t v23 = __bid128_sub(v4, a2, v21, v22, a3, &my_fpsf);
            unint64_t v25 = v24;
            bid_f128_sub(&v33, (uint64_t *)&c_one_1131, (uint64_t *)&v39);
            if (bid_f128_cmp((uint64_t *)&v39, (uint64_t *)&c_minus_one, 3u))
            {
              bid_f128_add(&v32, (uint64_t *)&v33, (uint64_t *)&v39);
              uint64_t v26 = (__n128 *)&c_one_1131;
              unint64_t v27 = &v32;
            }
            else
            {
              bid_f128_sub(&v32, (uint64_t *)&c_one_1131, (uint64_t *)&v33);
              uint64_t v26 = &v32;
              unint64_t v27 = &v39;
            }
            bid_f128_sub(&v32, (uint64_t *)v26, (uint64_t *)v27);
            __n128 v39 = v33;
            bid_f128_sub(&v37, (uint64_t *)&v32, (uint64_t *)&v37);
            bid_f128_lgamma(&v36, (uint64_t *)&v39);
            bid_f128_mul(&v38, (uint64_t *)&c_1_plus_eps, (uint64_t *)&v39);
            bid_f128_lgamma(&v35, (uint64_t *)&v38);
            bid_f128_sub(&v30, (uint64_t *)&v35, (uint64_t *)&v36);
            bid_f128_sub(&v31, (uint64_t *)&v38, (uint64_t *)&v39);
            bid_f128_div(&v31, (uint64_t *)&v37, (uint64_t *)&v31);
            bid_f128_mul(&v31, (uint64_t *)&v31, (uint64_t *)&v30);
            bid_f128_add(&v36, (uint64_t *)&v36, (uint64_t *)&v31);
            v34[0] = __bid128_to_binary128(v23, v25, a3, &my_fpsf);
            v34[1] = v28;
            bid_f128_mul(&v30, (uint64_t *)&c_pi_1132, v34);
            __dpml_bid_C_ux_trig__((uint64_t *)&v30, 0, 1, &__dpml_bid_trig_x_table, &v30, v41);
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            __dpml_bid_unpack_x_or_y__((uint64_t *)&v30, 0, (uint64_t)&v42, &qword_1BDDBAE40, (uint64_t)&v30, v41);
            bid_f128_log(&v30, (uint64_t *)&v30);
            bid_f128_sub(&v30, (uint64_t *)&c_log_pi, (uint64_t *)&v30);
            bid_f128_sub(&v36, (uint64_t *)&v30, (uint64_t *)&v36);
            unint64_t v19 = v36.n128_u64[1];
            unint64_t v18 = v36.n128_u64[0];
            int v20 = a3;
          }
          return __binary128_to_bid128(v18, v19, v20, &my_fpsf);
        }
      }
    }
    unint64_t v4 = 0;
    my_fpsf |= 4u;
    return v4;
  }
  if ((~a2 & 0x7E00000000000000) == 0) {
    my_fpsf |= 1u;
  }
  if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
    || (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a1 >= 0x38C15B0A00000000)
  {
    return 0;
  }
  return v4;
}

unint64_t __bid128_log(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a1;
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    if (__bid128_isZero(a1, a2))
    {
      unint64_t v4 = 0;
      my_fpsf |= 4u;
      return v4;
    }
    if ((a2 & 0x8000000000000000) != 0)
    {
      unint64_t v4 = 0;
      my_fpsf |= 1u;
      return v4;
    }
    __n128 v23 = 0uLL;
    v22[0] = 0;
    v22[1] = 0;
    __n128 v21 = 0uLL;
    if (__bid128_quiet_greater(v4, a2, 1uLL, 0x5320000000000000, &my_fpsf))
    {
      unint64_t v6 = __bid128_mul(v4, a2, 1uLL, 0xD60000000000000, a3, &my_fpsf);
      unint64_t v24 = __bid128_to_binary128(v6, v7, a3, &my_fpsf);
      uint64_t v25 = v8;
      bid_f128_log(&v23, (uint64_t *)&v24);
      bid_f128_add(&v23, (uint64_t *)&v23, (uint64_t *)&c_4464_ln_10);
    }
    else
    {
      if (!__bid128_quiet_less(v4, a2, 1uLL, 0xD60000000000000, &my_fpsf))
      {
        __n128 v20 = 0uLL;
        unint64_t v24 = __bid128_to_binary128(v4, a2, a3, &my_fpsf);
        uint64_t v25 = v16;
        bid_f128_log(&v23, (uint64_t *)&v24);
        bid_f128_sub(&v20, (uint64_t *)&v24, (uint64_t *)&c_one_1135);
        memset(v27, 0, sizeof(v27));
        __dpml_bid_unpack_x_or_y__((uint64_t *)&v20, 0, (uint64_t)v27, &qword_1BDDBAE40, (uint64_t)v22, v26);
        if (bid_f128_cmp(v22, (uint64_t *)&c_half_1136, 1u))
        {
          unint64_t v17 = __bid128_add(v4, a2, 1uLL, 0xB040000000000000, a3, &my_fpsf);
          v26[0] = __bid128_to_binary128(v17, v18, a3, &my_fpsf);
          v26[1] = v19;
          bid_f128_sub(&v21, (uint64_t *)&v20, v26);
          bid_f128_div(&v21, (uint64_t *)&v21, (uint64_t *)&v24);
          bid_f128_sub(&v23, (uint64_t *)&v23, (uint64_t *)&v21);
        }
        unint64_t v13 = v23.n128_u64[1];
        unint64_t v12 = v23.n128_u64[0];
        int v14 = a3;
        return __binary128_to_bid128(v12, v13, v14, &my_fpsf);
      }
      unint64_t v9 = __bid128_mul(v4, a2, 1uLL, 0x5320000000000000, a3, &my_fpsf);
      unint64_t v24 = __bid128_to_binary128(v9, v10, a3, &my_fpsf);
      uint64_t v25 = v11;
      bid_f128_log(&v23, (uint64_t *)&v24);
      bid_f128_sub(&v23, (uint64_t *)&v23, (uint64_t *)&c_4464_ln_10);
    }
    unint64_t v13 = v23.n128_u64[1];
    unint64_t v12 = v23.n128_u64[0];
    int v14 = a3;
    return __binary128_to_bid128(v12, v13, v14, &my_fpsf);
  }
  if ((~a2 & 0x7E00000000000000) == 0) {
    my_fpsf |= 1u;
  }
  if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
    || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
  {
    return 0;
  }
  return v4;
}

unint64_t __bid128_log10(unint64_t a1, unint64_t a2, unsigned int a3, int *a4)
{
  unint64_t v6 = a1;
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    if (__bid128_isZero(a1, a2))
    {
      unint64_t v6 = 0;
      *a4 |= 4u;
    }
    else if ((a2 & 0x8000000000000000) != 0)
    {
      unint64_t v6 = 0;
      *a4 |= 1u;
    }
    else
    {
      __n128 v21 = 0uLL;
      if (__bid128_quiet_greater(v6, a2, 1uLL, 0x5320000000000000, a4))
      {
        unint64_t v8 = __bid128_mul(v6, a2, 1uLL, 0xD60000000000000, a3, a4);
        unint64_t v22 = __bid128_to_binary128(v8, v9, a3, a4);
        uint64_t v23 = v10;
        bid_f128_log(&v21, (uint64_t *)&v22);
        bid_f128_mul(&v21, (uint64_t *)&v21, (uint64_t *)&c_inv_log10);
        bid_f128_add(&v21, (uint64_t *)&v21, (uint64_t *)&c_4464);
      }
      else if (__bid128_quiet_less(v6, a2, 1uLL, 0xD60000000000000, a4))
      {
        unint64_t v11 = __bid128_mul(v6, a2, 1uLL, 0x5320000000000000, a3, a4);
        unint64_t v22 = __bid128_to_binary128(v11, v12, a3, a4);
        uint64_t v23 = v13;
        bid_f128_log(&v21, (uint64_t *)&v22);
        bid_f128_mul(&v21, (uint64_t *)&v21, (uint64_t *)&c_inv_log10);
        bid_f128_sub(&v21, (uint64_t *)&v21, (uint64_t *)&c_4464);
      }
      else
      {
        __n128 v20 = 0uLL;
        v19[0] = 0;
        v19[1] = 0;
        unint64_t v22 = __bid128_to_binary128(v6, a2, a3, a4);
        uint64_t v23 = v14;
        bid_f128_log(&v21, (uint64_t *)&v22);
        bid_f128_sub(&v20, (uint64_t *)&v22, (uint64_t *)&c_one_1139);
        __n128 v25 = 0uLL;
        uint64_t v26 = 0;
        __dpml_bid_unpack_x_or_y__((uint64_t *)&v20, 0, (uint64_t)&v25, &qword_1BDDBAE40, (uint64_t)v19, v24);
        if (bid_f128_cmp(v19, (uint64_t *)&c_half_1140, 1u))
        {
          __n128 v25 = 0uLL;
          unint64_t v15 = __bid128_add(v6, a2, 1uLL, 0xB040000000000000, a3, a4);
          v24[0] = __bid128_to_binary128(v15, v16, a3, a4);
          v24[1] = v17;
          bid_f128_sub(&v25, (uint64_t *)&v20, v24);
          bid_f128_div(&v25, (uint64_t *)&v25, (uint64_t *)&v22);
          bid_f128_sub(&v21, (uint64_t *)&v21, (uint64_t *)&v25);
        }
        bid_f128_mul(&v21, (uint64_t *)&v21, (uint64_t *)&c_inv_log10);
      }
      return __binary128_to_bid128(v21.n128_u64[0], v21.n128_u64[1], a3, a4);
    }
  }
  else
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      *a4 |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
  }
  return v6;
}

uint64_t __bid128_mul(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, int *a6)
{
  if ((~a2 & 0x7800000000000000) != 0 && (~a4 & 0x7800000000000000) != 0)
  {
    if ((~a2 & 0x6000000000000000) != 0)
    {
      uint64_t v11 = a2 & 0x1FFFFFFFFFFFFLL;
      if ((a2 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0 || a1 > 0x378D8E63FFFFFFFFLL && v11 == 0x1ED09BEAD87C0)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        unint64_t v10 = a1;
      }
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    if ((~a4 & 0x6000000000000000) != 0)
    {
      uint64_t v13 = a4 & 0x1FFFFFFFFFFFFLL;
      if ((a4 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0
        || (a4 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a3 > 0x378D8E63FFFFFFFFLL)
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      else
      {
        unint64_t v12 = a3;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    if (!(v11 | v10) || !(v13 | v12)) {
      return 0;
    }
  }
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  return bid128_ext_fma(&v17, &v16, &v15, &v14, a3, a4, a1, a2, 0, 0x5FFE000000000000uLL, a5, a6);
}

uint64_t __bid128_isZero(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0x1FFFFFFFFFFFFLL;
  BOOL v3 = (~a2 & 0x6000000000000000) == 0;
  if (a1 > 0x378D8E63FFFFFFFFLL && v2 == 0x1ED09BEAD87C0) {
    BOOL v3 = 1;
  }
  if (!(v2 | a1)) {
    BOOL v3 = 1;
  }
  unsigned int v5 = v2 > 0x1ED09BEAD87C0 || v3;
  if ((~a2 & 0x7800000000000000) != 0) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t __bid128_pow(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5, int *a6)
{
  uint64_t v12 = a2 & 0x7E00000000000000;
  if ((a2 & 0x7E00000000000000) == 0x7E00000000000000 || (a4 & 0x7E00000000000000) == 0x7E00000000000000) {
    *a6 |= 1u;
  }
  int isZero = __bid128_isZero(a3, a4);
  if (v12 != 0x7E00000000000000 && isZero) {
    return 1;
  }
  unint64_t v14 = 1;
  BOOL v15 = __bid128_quiet_equal(a1, a2, 1uLL, 0x3040000000000000uLL, a6);
  if (v12 == 0x7E00000000000000 || !v15)
  {
    if ((~a2 & 0x7C00000000000000) != 0)
    {
      if ((~a4 & 0x7C00000000000000) != 0)
      {
        if ((~a4 & 0x7800000000000000) != 0)
        {
          unint64_t v17 = __bid128_round_integral_nearest_even(a3, a4, a6);
          BOOL v19 = __bid128_quiet_equal(v17, v18, a3, a4, a6);
          if ((~a2 & 0x7800000000000000) != 0)
          {
            BOOL v20 = v19;
            if (__bid128_isZero(a1, a2))
            {
              if ((a4 & 0x8000000000000000) != 0) {
                *a6 |= 4u;
              }
              return 0;
            }
            else if ((a2 & 0x8000000000000000) == 0 || v20)
            {
              uint64_t v22 = (a2 >> 49) & 0x3FFF;
              unint64_t v23 = a2 & 0x1FFFFFFFFFFFFLL;
              if ((a2 & 0x1FFFFFFFFFFFFLL) != 0)
              {
                int8x16_t v24 = (int8x16_t)vdupq_n_s64(a2);
                int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v24, (int8x16_t)xmmword_1BDDB57B0), (uint64x2_t)vandq_s8(v24, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v24, (int8x16_t)xmmword_1BDDB57C0), (uint64x2_t)vandq_s8(v24, (int8x16_t)xmmword_1BDDB57D0))));
                *(int8x8_t *)v25.i8 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
                int v26 = v25.i32[0] | v25.i32[1] | (2 * ((a2 & 0xCCCCCCCCCCCCLL) <= (a2 & 0x1333333333333))) | ((a2 & 0xAAAAAAAAAAAALL) <= (a2 & 0x1555555555555));
                if (v26)
                {
                  unint64_t v23 = (a1 >> -(char)v26) + (v23 << v26);
                  unint64_t v27 = a1 << v26;
                }
                else
                {
                  unint64_t v27 = a1;
                }
              }
              else
              {
                if (a1)
                {
                  int8x16_t v28 = (int8x16_t)vdupq_n_s64(a1);
                  int32x4_t v29 = (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v28, (int8x16_t)xmmword_1BDDB57E0), (uint64x2_t)vandq_s8(v28, (int8x16_t)xmmword_1BDDB57F0));
                  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1BDDB5800, (int8x16_t)vuzp1q_s32(v29, (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v28, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v28, (int8x16_t)xmmword_1BDDB5750))));
                  *(int8x8_t *)v30.i8 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vmovn_s64((int64x2_t)v29), (int8x8_t)0x4000000000), *(int8x8_t *)v30.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
                  int v26 = v30.i32[0] | v30.i32[1] | (2 * ((a1 & 0xCCCCCCCCCCCCCCCCLL) <= (a1 & 0x3333333333333333))) | ((a1 & 0xAAAAAAAAAAAAAAAALL) <= (a1 & 0x5555555555555555));
                }
                else
                {
                  int v26 = 128;
                }
                unint64_t v27 = 0;
                unint64_t v23 = a1 << v26;
              }
              unsigned int v31 = 128 - v26;
              unint64_t v32 = 1089684262 * (128 - v26);
              unint64_t v33 = HIDWORD(v32) + 66254511 * v31;
              unint64_t v34 = v32 & 0xFFFFFFFE | (v33 << 32);
              unint64_t v35 = ((3387143064 * v31) & 0xFFFFFFF8 | ((((3387143064u * (unint64_t)v31) >> 32)
                                                           + 3520035243 * v31) << 32))
                  + HIDWORD(v33);
              uint64_t v1234 = (__PAIR128__((((3387143064u * (unint64_t)v31) >> 32) + 3520035243 * v31) >> 32, (3387143064 * v31) & 0xFFFFFFF8 | ((((3387143064u * (unint64_t)v31) >> 32)+ 3520035243 * v31) << 32))+ __PAIR128__(2977044471u * (unint64_t)v31, HIDWORD(v33))) >> 64;
              if (v22 >> 5 < 0xC1)
              {
                uint64_t v45 = (6176 - v22);
                unint64_t v46 = ((2319430631u * (unint64_t)v45) >> 32) + 189540515 * v45;
                unint64_t v47 = (-1975536665 * v45) | ((unint64_t)v46 << 32);
                unint64_t v48 = ((2841335982u * (unint64_t)v45) >> 32) + 2862788699 * v45;
                unint64_t v49 = (-1453631314 * v45) | (v48 << 32);
                unint64_t v50 = 0xFFFFFFFDB289C88ALL * v45;
                BOOL v1073 = __CFADD__(v49, HIDWORD(v46));
                unint64_t v51 = v49 + HIDWORD(v46);
                uint64_t v52 = v1073;
                unsigned long long v53 = __PAIR128__(v35, v34) - v47;
                unint64_t v43 = v53;
                unint64_t v44 = *((void *)&v53 + 1) - v51;
                uint64_t v55 = *((void *)&v53 + 1) < v51 || *((void *)&v53 + 1) > v35;
                unint64_t v1232 = v50 - HIDWORD(v48) - v52;
                uint64_t v1233 = v55 << 63 >> 63;
              }
              else
              {
                uint64_t v36 = (v22 - 6176);
                unint64_t v37 = ((2319430631u * (unint64_t)v36) >> 32) + 189540515 * v36;
                unint64_t v38 = (-1975536665 * v36) | ((unint64_t)v37 << 32);
                unint64_t v39 = ((2841335982u * (unint64_t)v36) >> 32) + 2862788699 * v36;
                unint64_t v40 = HIDWORD(v39);
                unint64_t v41 = (-1453631314 * v36) | (v39 << 32);
                uint64_t v42 = (((1299593078 * v36) & 0x7FFFFFFF00000000) + (v36 << 33)) | (1299593078 * v36) & 0xFFFFFFFELL;
                unint64_t v43 = v38 + v34;
                unint64_t v44 = __CFADD__(v38, v34) + v35 + v41 + HIDWORD(v37);
                unint64_t v1232 = (__PAIR128__(v42, v41) + __PAIR128__(v40, HIDWORD(v37))) >> 64;
                uint64_t v1233 = v41 + HIDWORD(v37);
              }
              uint64_t v56 = HIBYTE(v23) - 128;
              unint64_t v57 = bid_recip_table_1[v56];
              unint64_t v58 = HIDWORD(v57);
              unint64_t v59 = HIDWORD(v23);
              unint64_t v60 = HIDWORD(v57) * (unint64_t)v23;
              unint64_t v61 = v57 * (unint64_t)v23;
              unint64_t v62 = v57 * (unint64_t)v59 + v60 + HIDWORD(v61);
              unint64_t v63 = HIDWORD(v27);
              unint64_t v64 = HIDWORD(v57) * (unint64_t)v27;
              unint64_t v65 = v57 * (unint64_t)HIDWORD(v27) + v64;
              unint64_t v66 = v57 * (unint64_t)v27;
              unint64_t v67 = v65 + HIDWORD(v66);
              unint64_t v68 = (unint64_t *)((char *)&bid_log_table_1 + 32 * v56);
              unsigned long long v69 = __PAIR128__(HIDWORD(v62), v61 | ((unint64_t)v62 << 32))
                  + __PAIR128__(HIDWORD(v60) + v58 * (unint64_t)v59, HIDWORD(v64) + v58 * (unint64_t)v63 + HIDWORD(v67));
              unint64_t v70 = ((unint64_t)((__PAIR128__(HIDWORD(v62), v61 | ((unint64_t)v62 << 32))+ __PAIR128__(HIDWORD(v60) + v58 * (unint64_t)v59, HIDWORD(v64)+ v58 * (unint64_t)v63+ HIDWORD(v67))) >> 64) >> 49) & 0x7F;
              uint64_t v71 = bid_recip_table_2[v70];
              unint64_t v72 = ((HIDWORD(v71) * (unint64_t)v66) >> 32)
                  + v67 * (unint64_t)HIDWORD(v71)
                  + ((v67 * (unint64_t)v71
                    + (HIDWORD(v71) * v66)
                    + ((v71 * (unint64_t)v66) >> 32)) >> 32);
              unint64_t v73 = v69 * (unint64_t)HIDWORD(v71);
              unint64_t v74 = v69 * (unint64_t)v71;
              unint64_t v75 = DWORD1(v69) * (unint64_t)v71 + v73 + HIDWORD(v74);
              unint64_t v76 = HIDWORD(v73) + DWORD1(v69) * (unint64_t)HIDWORD(v71) + HIDWORD(v75);
              unint64_t v77 = DWORD2(v69) * (unint64_t)HIDWORD(v71);
              unint64_t v78 = DWORD2(v69) * (unint64_t)v71;
              unint64_t v79 = HIDWORD(v69) * (unint64_t)v71 + v77 + HIDWORD(v78);
              unint64_t v80 = HIDWORD(v77) + HIDWORD(v69) * (unint64_t)HIDWORD(v71) + HIDWORD(v79);
              unint64_t v81 = v68[1];
              unint64_t v82 = v43 - *v68;
              BOOL v83 = v43 < *v68;
              unint64_t v84 = (__PAIR128__(v44, v43) - *v68) >> 64;
              BOOL v1073 = v44 - v83 >= v81;
              unint64_t v85 = v44 - v83 - v81;
              uint64_t v87 = !v1073 || v84 > v44;
              uint64_t v1230 = v87;
              v1231 = v68;
              unint64_t v88 = v74 | ((unint64_t)v75 << 32);
              unint64_t v89 = v78 | ((unint64_t)v79 << 32);
              unint64_t v90 = v72 + v88;
              unint64_t v91 = __CFADD__(v72, v88) + v89;
              LODWORD(v92) = __CFADD__(__CFADD__(v72, v88), v89);
              BOOL v1073 = __CFADD__(v76, v91);
              unint64_t v93 = v76 + v91;
              if (v1073) {
                uint64_t v92 = 1;
              }
              else {
                uint64_t v92 = v92;
              }
              uint64_t v94 = (unint64_t *)((char *)&bid_log_table_2 + 32 * v70);
              *((void *)&v96 + 1) = v80 + v92;
              *(void *)&long long v96 = v93;
              uint64_t v95 = v96 >> 62;
              *((void *)&v96 + 1) = v93;
              *(void *)&long long v96 = v90;
              unint64_t v97 = ~(4 * v90);
              unsigned int v98 = ~(4 * v90);
              unint64_t v99 = HIDWORD(v97);
              unint64_t v1223 = ((HIDWORD(v97) * (unint64_t)v98) >> 32)
                    + HIDWORD(v97) * (unint64_t)HIDWORD(v97)
                    + ((HIDWORD(v97) * (unint64_t)v98
                      + HIDWORD(v97) * v98
                      + ((v97 * (unint64_t)v97) >> 32)) >> 32);
              unint64_t v100 = ~(unint64_t)(v96 >> 62);
              unint64_t v101 = HIDWORD(v100);
              unint64_t v102 = ~(v96 >> 62) * (unint64_t)HIDWORD(v97);
              unsigned int v103 = ~(v96 >> 62);
              unint64_t v104 = HIDWORD(v100) * (unint64_t)v98;
              unsigned int v1242 = v98;
              unint64_t v105 = ~(v96 >> 62) * (unint64_t)v97;
              unint64_t v106 = v104 + v103 * HIDWORD(v97) + HIDWORD(v105);
              unint64_t v107 = HIDWORD(v102) + HIDWORD(v100) * (unint64_t)HIDWORD(v97) + HIDWORD(v106);
              unint64_t v108 = (unint64_t)~v95 >> 32;
              uint64_t v109 = ~v95;
              unint64_t v110 = ~v95 * (unint64_t)HIDWORD(v97);
              unsigned int v111 = ~v95;
              unint64_t v112 = v108 * (unint64_t)v98;
              unint64_t v113 = v109 * (unint64_t)v97;
              uint64_t v114 = v109;
              unint64_t v115 = v112 + v110 + HIDWORD(v113);
              unint64_t v116 = HIDWORD(v110) + v108 * (unint64_t)HIDWORD(v97) + HIDWORD(v115);
              unint64_t v117 = v102 + v104 + HIDWORD(v105);
              unint64_t v118 = HIDWORD(v104) + HIDWORD(v100) * (unint64_t)HIDWORD(v97) + HIDWORD(v117);
              unint64_t v119 = v94[1];
              v1229 = v94;
              unsigned long long v120 = __PAIR128__(v85, v82) - *v94;
              unint64_t v1228 = *((void *)&v120 + 1) - v119;
              BOOL v121 = *((void *)&v120 + 1) < v119 || *((void *)&v120 + 1) > v85;
              unint64_t v122 = HIDWORD(v100) * (unint64_t)v103;
              unint64_t v123 = v105 | ((unint64_t)v106 << 32);
              unint64_t v124 = v113 | ((unint64_t)v115 << 32);
              uint64_t v125 = v121;
              uint64_t v1227 = v125;
              unint64_t v126 = v1223 + v123;
              BOOL v1073 = __CFADD__(__CFADD__(v1223, v123), v124);
              unint64_t v127 = __CFADD__(v1223, v123) + v124;
              LODWORD(v12_Block_object_dispose(&STACK[0x940], 8) = v1073;
              BOOL v1073 = __CFADD__(v107, v127);
              unint64_t v129 = v107 + v127;
              unsigned int v130 = v100;
              unint64_t v1247 = v100;
              unint64_t v131 = v122 + v122 + ((v130 * (unint64_t)v130) >> 32);
              unint64_t v132 = HIDWORD(v122) + HIDWORD(v100) * (unint64_t)HIDWORD(v100) + HIDWORD(v131);
              if (v1073) {
                uint64_t v128 = 1;
              }
              else {
                uint64_t v128 = v128;
              }
              unint64_t v133 = v116 + v128;
              unint64_t v134 = v105 | ((unint64_t)v117 << 32);
              unint64_t v135 = (v100 * v100) | ((unint64_t)v131 << 32);
              unint64_t v136 = v111 * (unint64_t)v101;
              unint64_t v137 = v108 * (unint64_t)v103;
              unint64_t v138 = v114 * (unint64_t)v130;
              unint64_t v139 = v137 + v136 + HIDWORD(v138);
              unsigned int v140 = v101;
              unint64_t v141 = HIDWORD(v136) + v108 * (unint64_t)v101 + HIDWORD(v139);
              unint64_t v142 = v138 | ((unint64_t)v139 << 32);
              unsigned long long v143 = __PAIR128__(v142, v118) + v135;
              BOOL v144 = __CFADD__(__CFADD__(v118, v135), v142);
              BOOL v1073 = __CFADD__(v132, *((void *)&v143 + 1));
              unint64_t v145 = v132 + *((void *)&v143 + 1);
              uint64_t v146 = v1073 || v144;
              unint64_t v147 = v141 + v146;
              unint64_t v148 = v110 + v112 + HIDWORD(v113);
              unint64_t v149 = HIDWORD(v112) + v108 * (unint64_t)HIDWORD(v97) + HIDWORD(v148);
              unint64_t v150 = v136 + v137 + HIDWORD(v138);
              unsigned int v151 = v140;
              unint64_t v152 = HIDWORD(v137) + v108 * (unint64_t)v140 + HIDWORD(v150);
              unint64_t v153 = v113 | ((unint64_t)v148 << 32);
              unint64_t v154 = v138 | ((unint64_t)v150 << 32);
              unint64_t v155 = v108 * (unint64_t)v111;
              uint64_t v156 = v114;
              unint64_t v157 = v155 + v155 + ((v114 * (unint64_t)v114) >> 32);
              unint64_t v158 = HIDWORD(v155) + v108 * (unint64_t)v108 + HIDWORD(v157);
              unint64_t v159 = (v114 * v114) | ((unint64_t)v157 << 32);
              unint64_t v160 = v149 + v154;
              BOOL v1073 = __CFADD__(__CFADD__(v149, v154), v159);
              unint64_t v161 = __CFADD__(v149, v154) + v159;
              unsigned int v162 = v1073;
              BOOL v1073 = __CFADD__(v152, v161);
              unint64_t v163 = v152 + v161;
              if (v1073) {
                uint64_t v164 = 1;
              }
              else {
                uint64_t v164 = v162;
              }
              uint64_t v165 = __CFADD__(v134, v126) + (void)v143;
              LODWORD(v166) = __CFADD__(__CFADD__(v134, v126), (void)v143);
              BOOL v1073 = __CFADD__(v129, v165);
              uint64_t v167 = v129 + v165;
              if (v1073) {
                uint64_t v166 = 1;
              }
              else {
                uint64_t v166 = v166;
              }
              BOOL v1073 = __CFADD__(v145, v166);
              unint64_t v168 = v145 + v166;
              LODWORD(v169) = v1073;
              BOOL v1073 = __CFADD__(v133, v168);
              unint64_t v170 = v133 + v168;
              if (v1073) {
                uint64_t v169 = 1;
              }
              else {
                uint64_t v169 = v169;
              }
              unint64_t v171 = v147 + v169;
              BOOL v1073 = __CFADD__(__CFADD__(v153, v167), v160);
              unint64_t v172 = __CFADD__(v153, v167) + v160;
              unsigned int v173 = v1073;
              unint64_t v174 = v170 + v172;
              if (__CFADD__(v170, v172)) {
                uint64_t v175 = 1;
              }
              else {
                uint64_t v175 = v173;
              }
              BOOL v1073 = __CFADD__(v163, v175);
              unint64_t v176 = v163 + v175;
              LODWORD(v177) = v1073;
              BOOL v1073 = __CFADD__(v171, v176);
              unint64_t v178 = v171 + v176;
              unint64_t v179 = HIDWORD(v178);
              unint64_t v180 = v158 + v164;
              if (v1073) {
                uint64_t v177 = 1;
              }
              else {
                uint64_t v177 = v177;
              }
              unint64_t v181 = v180 + v177;
              uint64_t v182 = (v178 >> 1) | (HIDWORD(v178) << 31) | ((v180 + v177) << 63);
              unsigned int v183 = v174;
              unint64_t v184 = HIDWORD(v174);
              unint64_t v1197 = v97 + ((unint64_t)v174 >> 1) + (HIDWORD(v174) << 31) + (v178 << 63);
              unint64_t v185 = ((HIDWORD(v174) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v174) * (unint64_t)HIDWORD(v97)
                   + ((v174 * (unint64_t)HIDWORD(v97)
                     + HIDWORD(v174) * v1242
                     + ((v174 * (unint64_t)v97) >> 32)) >> 32);
              unint64_t v186 = HIDWORD(v174) * (unint64_t)v103;
              BOOL v187 = v1197 < v97;
              BOOL v1073 = __CFADD__(v187, v1247);
              unint64_t v188 = v187 + v1247;
              unsigned int v189 = v1073;
              BOOL v1073 = __CFADD__(v182, v188);
              unint64_t v1190 = v182 + v188;
              unint64_t v190 = v174 * (unint64_t)v151
                   + v186
                   + ((v174 * (unint64_t)v1247) >> 32);
              unint64_t v191 = HIDWORD(v186) + HIDWORD(v174) * (unint64_t)v151 + HIDWORD(v190);
              unint64_t v192 = (v174 * v1247) | ((unint64_t)v190 << 32);
              unint64_t v1213 = HIDWORD(v174) * (unint64_t)v111;
              uint64_t v193 = v156;
              unint64_t v194 = v174 * (unint64_t)v156;
              unint64_t v195 = v183 * (unint64_t)v108 + v1213 + HIDWORD(v194);
              if (v1073) {
                uint64_t v196 = 1;
              }
              else {
                uint64_t v196 = v189;
              }
              uint64_t v1224 = v196;
              unint64_t v197 = v194 | ((unint64_t)v195 << 32);
              unint64_t v1184 = v185 + v192;
              BOOL v1073 = __CFADD__(__CFADD__(v185, v192), v197);
              unint64_t v198 = __CFADD__(v185, v192) + v197;
              unsigned int v199 = v1073;
              BOOL v1073 = __CFADD__(v191, v198);
              unint64_t v1203 = v195;
              unint64_t v1208 = v191 + v198;
              unsigned int v200 = v178;
              unint64_t v201 = HIDWORD(v178) * (unint64_t)v1242;
              unsigned int v202 = v97;
              unsigned int v1236 = v97;
              unint64_t v203 = v178 * (unint64_t)HIDWORD(v97)
                   + v201
                   + ((v178 * (unint64_t)v97) >> 32);
              unint64_t v204 = HIDWORD(v201) + HIDWORD(v178) * (unint64_t)HIDWORD(v97) + HIDWORD(v203);
              unint64_t v205 = (v178 * v97) | ((unint64_t)v203 << 32);
              unint64_t v206 = HIDWORD(v178) * (unint64_t)v103;
              unsigned int v207 = v103;
              unsigned int v1240 = v103;
              unsigned int v208 = v151;
              unint64_t v209 = v178 * (unint64_t)v151
                   + v206
                   + ((v178 * (unint64_t)v1247) >> 32);
              unint64_t v210 = HIDWORD(v206) + HIDWORD(v178) * (unint64_t)v208 + HIDWORD(v209);
              unint64_t v211 = (v178 * v1247) | ((unint64_t)v209 << 32);
              if (v1073) {
                uint64_t v212 = 1;
              }
              else {
                uint64_t v212 = v199;
              }
              uint64_t v1178 = v212;
              BOOL v1073 = __CFADD__(v204, v211);
              unint64_t v213 = v204 + v211;
              unsigned int v214 = v111;
              unsigned int v1241 = v111;
              unint64_t v215 = HIDWORD(v178) * (unint64_t)v111;
              unint64_t v216 = v178 * (unint64_t)v193;
              unsigned int v217 = v193;
              unsigned int v1237 = v208;
              uint64_t v1238 = v193;
              unint64_t v218 = v200 * (unint64_t)v108 + v215 + HIDWORD(v216);
              unint64_t v219 = v216 | ((unint64_t)v218 << 32);
              BOOL v221 = v1073;
              BOOL v1073 = __CFADD__(v1073, v219);
              unint64_t v220 = v221 + v219;
              LODWORD(v222) = v1073;
              BOOL v1073 = __CFADD__(v210, v220);
              unint64_t v223 = v210 + v220;
              unint64_t v224 = HIDWORD(v181);
              unsigned int v225 = v181;
              unint64_t v226 = HIDWORD(v181) * (unint64_t)v207;
              unint64_t v227 = v181 * (unint64_t)v208
                   + v226
                   + ((v181 * (unint64_t)v1247) >> 32);
              unint64_t v228 = HIDWORD(v226) + HIDWORD(v181) * (unint64_t)v208 + HIDWORD(v227);
              unint64_t v229 = (v181 * v1247) | ((unint64_t)v227 << 32);
              unint64_t v230 = HIDWORD(v181) * (unint64_t)v1242;
              unint64_t v1218 = HIDWORD(v181);
              unint64_t v1221 = v181;
              unint64_t v231 = v181 * (unint64_t)v202;
              unint64_t v232 = v181 * (unint64_t)v99 + v230 + HIDWORD(v231);
              unint64_t v233 = HIDWORD(v230) + HIDWORD(v181) * (unint64_t)v99 + HIDWORD(v232);
              if (v1073) {
                uint64_t v222 = 1;
              }
              else {
                uint64_t v222 = v222;
              }
              BOOL v1073 = __CFADD__(v233, v229);
              unint64_t v234 = v233 + v229;
              unint64_t v235 = HIDWORD(v181) * (unint64_t)v214;
              unint64_t v236 = v181 * (unint64_t)v217;
              unint64_t v237 = v225 * (unint64_t)v108 + v235 + HIDWORD(v236);
              unint64_t v238 = v236 | ((unint64_t)v237 << 32);
              BOOL v240 = v1073;
              BOOL v1073 = __CFADD__(v1073, v238);
              unint64_t v239 = v240 + v238;
              LODWORD(v241) = v1073;
              BOOL v1073 = __CFADD__(v228, v239);
              unint64_t v242 = v228 + v239;
              if (v1073) {
                uint64_t v241 = 1;
              }
              else {
                uint64_t v241 = v241;
              }
              unsigned int v1235 = v108;
              unint64_t v243 = HIDWORD(v1213) + v184 * (unint64_t)v108 + HIDWORD(v1203) + v1178;
              unint64_t v244 = HIDWORD(v215) + v179 * (unint64_t)v108 + HIDWORD(v218) + v222;
              unint64_t v245 = v231 | ((unint64_t)v232 << 32);
              unint64_t v246 = HIDWORD(v235) + v224 * (unint64_t)v108 + HIDWORD(v237) + v241;
              unint64_t v247 = __CFADD__(v205, v1184) + v213;
              LODWORD(v24_Block_object_dispose(&STACK[0x940], 8) = __CFADD__(__CFADD__(v205, v1184), v213);
              BOOL v1073 = __CFADD__(v247, v1208);
              unint64_t v249 = v247 + v1208;
              if (v1073) {
                uint64_t v248 = 1;
              }
              else {
                uint64_t v248 = v248;
              }
              BOOL v1073 = __CFADD__(v223, v248);
              unint64_t v250 = v223 + v248;
              unsigned int v251 = v1073;
              BOOL v1073 = __CFADD__(v243, v250);
              unint64_t v252 = v243 + v250;
              if (v1073) {
                uint64_t v253 = 1;
              }
              else {
                uint64_t v253 = v251;
              }
              unint64_t v254 = v244 + v253;
              BOOL v1073 = __CFADD__(__CFADD__(v245, v249), v234);
              unint64_t v255 = __CFADD__(v245, v249) + v234;
              unsigned int v256 = v1073;
              unint64_t v257 = v252 + v255;
              if (__CFADD__(v252, v255)) {
                uint64_t v258 = 1;
              }
              else {
                uint64_t v258 = v256;
              }
              BOOL v1073 = __CFADD__(v242, v258);
              unint64_t v259 = v242 + v258;
              unsigned int v260 = v1073;
              unint64_t v261 = v254 + v259;
              if (__CFADD__(v254, v259)) {
                uint64_t v262 = 1;
              }
              else {
                uint64_t v262 = v260;
              }
              unint64_t v263 = v246 + v262;
              unint64_t v264 = 1431655765 * HIDWORD(v257);
              unint64_t v265 = 1431655765 * v257
                   + v264
                   + ((1431655765 * (unint64_t)v257) >> 32);
              unint64_t v266 = HIDWORD(v264) + v264 + HIDWORD(v265);
              unint64_t v267 = (1431655765 * v257) | ((unint64_t)v265 << 32);
              unint64_t v268 = 1431655765 * HIDWORD(v261);
              unint64_t v269 = 1431655765 * v261
                   + v268
                   + ((1431655765 * (unint64_t)v261) >> 32);
              unint64_t v270 = HIDWORD(v268) + v268 + HIDWORD(v269);
              unint64_t v271 = (1431655765 * v261) | ((unint64_t)v269 << 32);
              unint64_t v272 = HIDWORD(v263);
              unint64_t v273 = 1431655765 * HIDWORD(v263);
              unint64_t v274 = HIDWORD(v273) + v273;
              unsigned int v1173 = v263;
              unsigned int v1179 = v263;
              unint64_t v275 = 1431655765 * v263
                   + v273
                   + ((1431655765 * (unint64_t)v263) >> 32);
              unint64_t v276 = v274 + HIDWORD(v275);
              unint64_t v1209 = v276;
              unint64_t v277 = (1431655765 * v263) | ((unint64_t)v275 << 32);
              unint64_t v278 = v267 + v266;
              BOOL v1073 = __CFADD__(__CFADD__(v267, v266), v267);
              unint64_t v279 = __CFADD__(v267, v266) + v267;
              LODWORD(v280) = v1073;
              BOOL v1073 = __CFADD__(v279, v266);
              unint64_t v281 = v279 + v266;
              if (v1073) {
                uint64_t v280 = 1;
              }
              else {
                uint64_t v280 = v280;
              }
              unint64_t v282 = v271 + v270;
              unint64_t v283 = __CFADD__(v271, v270) + v271;
              LODWORD(v284) = __CFADD__(__CFADD__(v271, v270), v271);
              BOOL v1073 = __CFADD__(v283, v270);
              unint64_t v285 = v283 + v270;
              if (v1073) {
                uint64_t v284 = 1;
              }
              else {
                uint64_t v284 = v284;
              }
              unint64_t v286 = v277 + v276;
              unint64_t v287 = __CFADD__(v277, v276) + v277;
              BOOL v288 = __CFADD__(__CFADD__(v277, v276), v277);
              unint64_t v289 = v287 + v276;
              uint64_t v290 = __CFADD__(v287, v276) || v288;
              uint64_t v1214 = v290;
              unint64_t v291 = v266 + v280;
              unint64_t v292 = __CFADD__(v271, v278) + v282;
              BOOL v293 = __CFADD__(__CFADD__(v271, v278), v282);
              BOOL v1073 = __CFADD__(v292, v281);
              unint64_t v294 = v292 + v281;
              uint64_t v295 = v1073 || v293;
              BOOL v1073 = __CFADD__(v285, v295);
              unint64_t v296 = v285 + v295;
              unsigned int v297 = v1073;
              BOOL v1073 = __CFADD__(v291, v296);
              unint64_t v298 = v291 + v296;
              if (v1073) {
                uint64_t v299 = 1;
              }
              else {
                uint64_t v299 = v297;
              }
              BOOL v1073 = __CFADD__(v277, v294);
              uint64_t v300 = v270 + v284 + v299;
              unint64_t v301 = v1073 + v286;
              BOOL v302 = __CFADD__(v1073, v286);
              BOOL v1073 = __CFADD__(v298, v301);
              unint64_t v303 = v298 + v301;
              uint64_t v304 = v1073 || v302;
              unint64_t v305 = v289 + v304;
              BOOL v306 = __CFADD__(v289, v304);
              BOOL v1073 = __CFADD__(v300, v305);
              unint64_t v307 = v300 + v305;
              uint64_t v308 = v1073 || v306;
              uint64_t v1204 = v308;
              unint64_t v1185 = v303 + v1197;
              unint64_t v309 = __CFADD__(v303, v1197) + v1190;
              LODWORD(v310) = __CFADD__(__CFADD__(v303, v1197), v1190);
              BOOL v1073 = __CFADD__(v307, v309);
              unint64_t v1191 = v307 + v309;
              unint64_t v311 = ((HIDWORD(v257) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v257) * (unint64_t)v99
                   + ((v257 * (unint64_t)v99
                     + HIDWORD(v257) * v1242
                     + ((v257 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v312 = HIDWORD(v257) * (unint64_t)v1240;
              unint64_t v1163 = HIDWORD(v257);
              unint64_t v313 = v257 * (unint64_t)v1237
                   + v312
                   + ((v257 * (unint64_t)v1247) >> 32);
              unint64_t v314 = HIDWORD(v312) + HIDWORD(v257) * (unint64_t)v1237 + HIDWORD(v313);
              unint64_t v315 = (v257 * v1247) | ((unint64_t)v313 << 32);
              if (v1073) {
                uint64_t v310 = 1;
              }
              else {
                uint64_t v310 = v310;
              }
              uint64_t v1198 = v310;
              unint64_t v1155 = v311 + v315;
              unint64_t v316 = HIDWORD(v257) * (unint64_t)v1241;
              unint64_t v1159 = v257 * (unint64_t)v1235
                    + v316
                    + ((v257 * (unint64_t)v1238) >> 32);
              unint64_t v317 = (v257 * v1238) | ((unint64_t)v1159 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v311, v315), v317);
              unint64_t v318 = __CFADD__(v311, v315) + v317;
              unsigned int v319 = v1073;
              BOOL v1073 = __CFADD__(v314, v318);
              unint64_t v1151 = v314 + v318;
              unint64_t v320 = HIDWORD(v261) * (unint64_t)v1242;
              unint64_t v321 = v261 * (unint64_t)v99
                   + v320
                   + ((v261 * (unint64_t)v1236) >> 32);
              unint64_t v322 = HIDWORD(v320) + HIDWORD(v261) * (unint64_t)v99 + HIDWORD(v321);
              unint64_t v323 = (v261 * v1236) | ((unint64_t)v321 << 32);
              unint64_t v324 = HIDWORD(v261) * (unint64_t)v1240;
              unint64_t v325 = v261 * (unint64_t)v1237
                   + v324
                   + ((v261 * (unint64_t)v1247) >> 32);
              unint64_t v326 = HIDWORD(v324) + HIDWORD(v261) * (unint64_t)v1237 + HIDWORD(v325);
              if (v1073) {
                uint64_t v327 = 1;
              }
              else {
                uint64_t v327 = v319;
              }
              unint64_t v328 = HIDWORD(v261) * (unint64_t)v1241;
              unint64_t v329 = v261 * (unint64_t)v1235
                   + v328
                   + ((v261 * (unint64_t)v1238) >> 32);
              unint64_t v330 = (v261 * v1238) | ((unint64_t)v329 << 32);
              unsigned long long v331 = __PAIR128__(v330, v322)
                   + ((v261 * v1247) | ((unint64_t)v325 << 32));
              LODWORD(v332) = __CFADD__(__CFADD__(v322, (v261 * v1247) | ((unint64_t)v325 << 32)), v330);
              BOOL v1073 = __CFADD__(v326, *((void *)&v331 + 1));
              unint64_t v333 = v326 + *((void *)&v331 + 1);
              unint64_t v334 = v272 * (unint64_t)v1240;
              unint64_t v335 = v1173 * (unint64_t)v1237
                   + v334
                   + ((v1179 * (unint64_t)v1247) >> 32);
              unint64_t v336 = HIDWORD(v334) + v272 * (unint64_t)v1237 + HIDWORD(v335);
              unint64_t v337 = (v1179 * v1247) | ((unint64_t)v335 << 32);
              if (v1073) {
                uint64_t v332 = 1;
              }
              else {
                uint64_t v332 = v332;
              }
              unint64_t v338 = v272 * (unint64_t)v1242;
              unint64_t v339 = v1173 * (unint64_t)v99
                   + v338
                   + ((v1179 * (unint64_t)v1236) >> 32);
              unint64_t v340 = HIDWORD(v338) + v272 * (unint64_t)v99 + HIDWORD(v339);
              BOOL v1073 = __CFADD__(v340, v337);
              unint64_t v341 = v340 + v337;
              unint64_t v342 = v272 * (unint64_t)v1241;
              unint64_t v343 = v1173 * (unint64_t)v1235
                   + v342
                   + ((v1179 * (unint64_t)v1238) >> 32);
              unint64_t v344 = (v1179 * v1238) | ((unint64_t)v343 << 32);
              BOOL v346 = v1073;
              BOOL v1073 = __CFADD__(v1073, v344);
              unint64_t v345 = v346 + v344;
              LODWORD(v347) = v1073;
              BOOL v1073 = __CFADD__(v336, v345);
              unint64_t v348 = v336 + v345;
              if (v1073) {
                uint64_t v347 = 1;
              }
              else {
                uint64_t v347 = v347;
              }
              unint64_t v349 = HIDWORD(v316) + v1163 * (unint64_t)v1235 + HIDWORD(v1159) + v327;
              uint64_t v350 = __CFADD__(v323, v1155) + (void)v331;
              BOOL v351 = __CFADD__(__CFADD__(v323, v1155), (void)v331);
              BOOL v1073 = __CFADD__(v350, v1151);
              uint64_t v352 = v350 + v1151;
              uint64_t v353 = v1073 || v351;
              BOOL v1073 = __CFADD__(v333, v353);
              unint64_t v354 = v333 + v353;
              unsigned int v355 = v1073;
              BOOL v1073 = __CFADD__(v349, v354);
              unint64_t v356 = v349 + v354;
              if (v1073) {
                uint64_t v357 = 1;
              }
              else {
                uint64_t v357 = v355;
              }
              unint64_t v358 = HIDWORD(v342) + v272 * (unint64_t)v1235 + HIDWORD(v343) + v347;
              unint64_t v359 = HIDWORD(v328) + HIDWORD(v261) * (unint64_t)v1235 + HIDWORD(v329) + v332 + v357;
              unint64_t v360 = __CFADD__((v1179 * v1236) | ((unint64_t)v339 << 32), v352) + v341;
              BOOL v361 = __CFADD__(__CFADD__((v1179 * v1236) | ((unint64_t)v339 << 32), v352), v341);
              unint64_t v362 = v356 + v360;
              uint64_t v363 = __CFADD__(v356, v360) || v361;
              BOOL v1073 = __CFADD__(v348, v363);
              unint64_t v364 = v348 + v363;
              unsigned int v365 = v1073;
              BOOL v1073 = __CFADD__(v359, v364);
              unint64_t v366 = v359 + v364;
              if (v1073) {
                uint64_t v367 = 1;
              }
              else {
                uint64_t v367 = v365;
              }
              unint64_t v368 = v358 + v367;
              unint64_t v369 = HIDWORD(v362);
              unsigned int v370 = v362;
              unint64_t v1164 = v1185 + ((unint64_t)v362 >> 2) + (HIDWORD(v362) << 30) + (v366 << 62);
              BOOL v371 = v1164 < v1185;
              BOOL v1073 = __CFADD__(v1191, v371);
              unint64_t v372 = v1191 + v371;
              unint64_t v373 = (v366 >> 2) | (HIDWORD(v366) << 30) | (v368 << 62);
              unsigned int v374 = v1073;
              BOOL v1073 = __CFADD__(v373, v372);
              unint64_t v1160 = v373 + v372;
              unint64_t v375 = ((HIDWORD(v362) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v362) * (unint64_t)v99
                   + ((v362 * (unint64_t)v99
                     + HIDWORD(v362) * v1242
                     + ((v362 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v376 = HIDWORD(v362) * (unint64_t)v1240;
              unint64_t v377 = v362 * (unint64_t)v1237
                   + v376
                   + ((v362 * (unint64_t)v1247) >> 32);
              unint64_t v378 = HIDWORD(v376) + HIDWORD(v362) * (unint64_t)v1237 + HIDWORD(v377);
              unint64_t v379 = (v362 * v1247) | ((unint64_t)v377 << 32);
              if (v1073) {
                uint64_t v380 = 1;
              }
              else {
                uint64_t v380 = v374;
              }
              uint64_t v1192 = v380;
              unint64_t v1174 = v375 + v379;
              unint64_t v381 = v362 * (unint64_t)v1238;
              unint64_t v1156 = v369 * (unint64_t)v1241;
              unint64_t v1152 = v370 * (unint64_t)v1235 + v1156 + HIDWORD(v381);
              unint64_t v382 = v381 | ((unint64_t)v1152 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v375, v379), v382);
              unint64_t v383 = __CFADD__(v375, v379) + v382;
              unsigned int v384 = v1073;
              unint64_t v1167 = v378 + v383;
              unint64_t v385 = HIDWORD(v366) * (unint64_t)v1242;
              unsigned int v1239 = v99;
              unint64_t v386 = v366 * (unint64_t)v99
                   + v385
                   + ((v366 * (unint64_t)v1236) >> 32);
              unint64_t v387 = HIDWORD(v385) + HIDWORD(v366) * (unint64_t)v99 + HIDWORD(v386);
              unint64_t v388 = (v366 * v1236) | ((unint64_t)v386 << 32);
              unint64_t v389 = HIDWORD(v366) * (unint64_t)v1240;
              unint64_t v390 = v366 * (unint64_t)v1237
                   + v389
                   + ((v366 * (unint64_t)v1247) >> 32);
              unint64_t v391 = HIDWORD(v389) + HIDWORD(v366) * (unint64_t)v1237 + HIDWORD(v390);
              unint64_t v392 = (v366 * v1247) | ((unint64_t)v390 << 32);
              if (__CFADD__(v378, v383)) {
                uint64_t v393 = 1;
              }
              else {
                uint64_t v393 = v384;
              }
              BOOL v1073 = __CFADD__(v387, v392);
              unint64_t v394 = v387;
              unint64_t v395 = HIDWORD(v366) * (unint64_t)v1241;
              unint64_t v396 = v366 * (unint64_t)v1235
                   + v395
                   + ((v366 * (unint64_t)v1238) >> 32);
              unint64_t v397 = (v366 * v1238) | ((unint64_t)v396 << 32);
              unsigned long long v398 = __PAIR128__(v397, v394) + v392;
              LODWORD(v399) = __CFADD__(v1073, v397);
              BOOL v1073 = __CFADD__(v391, *((void *)&v398 + 1));
              unint64_t v400 = v391 + *((void *)&v398 + 1);
              unint64_t v1186 = v368;
              unint64_t v401 = HIDWORD(v368) * (unint64_t)v1240;
              unint64_t v402 = v368 * (unint64_t)v1237
                   + v401
                   + ((v368 * (unint64_t)v1247) >> 32);
              unint64_t v403 = HIDWORD(v401) + HIDWORD(v368) * (unint64_t)v1237 + HIDWORD(v402);
              unint64_t v404 = (v368 * v1247) | ((unint64_t)v402 << 32);
              if (v1073) {
                uint64_t v399 = 1;
              }
              else {
                uint64_t v399 = v399;
              }
              unint64_t v405 = HIDWORD(v368) * (unint64_t)v1242;
              unint64_t v406 = v368 * (unint64_t)v99
                   + v405
                   + ((v368 * (unint64_t)v1236) >> 32);
              unint64_t v407 = HIDWORD(v405) + HIDWORD(v368) * (unint64_t)v99 + HIDWORD(v406);
              BOOL v1073 = __CFADD__(v407, v404);
              unint64_t v408 = v407 + v404;
              unint64_t v409 = HIDWORD(v368) * (unint64_t)v1241;
              unint64_t v1180 = HIDWORD(v368);
              unint64_t v410 = v368 * (unint64_t)v1235
                   + v409
                   + ((v368 * (unint64_t)v1238) >> 32);
              unint64_t v411 = (v368 * v1238) | ((unint64_t)v410 << 32);
              BOOL v413 = v1073;
              BOOL v1073 = __CFADD__(v1073, v411);
              unint64_t v412 = v413 + v411;
              LODWORD(v414) = v1073;
              BOOL v1073 = __CFADD__(v403, v412);
              unint64_t v415 = v403 + v412;
              if (v1073) {
                uint64_t v414 = 1;
              }
              else {
                uint64_t v414 = v414;
              }
              unint64_t v416 = HIDWORD(v1156) + v369 * (unint64_t)v1235 + HIDWORD(v1152) + v393;
              uint64_t v417 = __CFADD__(v388, v1174) + (void)v398;
              LODWORD(v41_Block_object_dispose(&STACK[0x940], 8) = __CFADD__(__CFADD__(v388, v1174), (void)v398);
              BOOL v1073 = __CFADD__(v417, v1167);
              uint64_t v419 = v417 + v1167;
              if (v1073) {
                uint64_t v418 = 1;
              }
              else {
                uint64_t v418 = v418;
              }
              BOOL v1073 = __CFADD__(v400, v418);
              unint64_t v420 = v400 + v418;
              unsigned int v421 = v1073;
              BOOL v1073 = __CFADD__(v416, v420);
              unint64_t v422 = v416 + v420;
              if (v1073) {
                uint64_t v423 = 1;
              }
              else {
                uint64_t v423 = v421;
              }
              unint64_t v424 = HIDWORD(v409) + HIDWORD(v368) * (unint64_t)v1235 + HIDWORD(v410) + v414;
              unint64_t v425 = HIDWORD(v395) + HIDWORD(v366) * (unint64_t)v1235 + HIDWORD(v396) + v399 + v423;
              unint64_t v426 = __CFADD__((v368 * v1236) | ((unint64_t)v406 << 32), v419) + v408;
              BOOL v427 = __CFADD__(__CFADD__((v368 * v1236) | ((unint64_t)v406 << 32), v419), v408);
              unint64_t v428 = v422 + v426;
              uint64_t v429 = __CFADD__(v422, v426) || v427;
              BOOL v1073 = __CFADD__(v415, v429);
              unint64_t v430 = v415 + v429;
              unsigned int v431 = v1073;
              unint64_t v432 = v425 + v430;
              if (__CFADD__(v425, v430)) {
                uint64_t v433 = 1;
              }
              else {
                uint64_t v433 = v431;
              }
              unint64_t v434 = v424 + v433;
              unint64_t v435 = HIDWORD(v428);
              unint64_t v436 = 858993459 * HIDWORD(v428);
              unint64_t v437 = HIDWORD(v436) + v436;
              unint64_t v438 = 858993459 * v428
                   + v436
                   + ((858993459 * (unint64_t)v428) >> 32);
              unint64_t v439 = v437 + HIDWORD(v438);
              unint64_t v440 = (858993459 * v428) | ((unint64_t)v438 << 32);
              unint64_t v441 = HIDWORD(v432);
              unint64_t v442 = 858993459 * HIDWORD(v432);
              unint64_t v443 = HIDWORD(v442) + v442;
              unint64_t v444 = 858993459 * v432
                   + v442
                   + ((858993459 * (unint64_t)v432) >> 32);
              unint64_t v445 = v443 + HIDWORD(v444);
              unint64_t v446 = (858993459 * v432) | ((unint64_t)v444 << 32);
              unint64_t v447 = HIDWORD(v434);
              unint64_t v448 = 858993459 * HIDWORD(v434);
              unint64_t v449 = HIDWORD(v448) + v448;
              unsigned int v1143 = v434;
              unsigned int v1147 = v434;
              unint64_t v450 = 858993459 * v434
                   + v448
                   + ((858993459 * (unint64_t)v434) >> 32);
              unint64_t v451 = v449 + HIDWORD(v450);
              unint64_t v452 = (858993459 * v434) | ((unint64_t)v450 << 32);
              unint64_t v453 = v440 + v439;
              BOOL v1073 = __CFADD__(__CFADD__(v440, v439), v440);
              unint64_t v454 = __CFADD__(v440, v439) + v440;
              LODWORD(v455) = v1073;
              BOOL v1073 = __CFADD__(v454, v439);
              unint64_t v456 = v454 + v439;
              if (v1073) {
                uint64_t v455 = 1;
              }
              else {
                uint64_t v455 = v455;
              }
              unint64_t v457 = v446 + v445;
              unint64_t v458 = __CFADD__(v446, v445) + v446;
              LODWORD(v459) = __CFADD__(__CFADD__(v446, v445), v446);
              BOOL v1073 = __CFADD__(v458, v445);
              unint64_t v460 = v458 + v445;
              if (v1073) {
                uint64_t v459 = 1;
              }
              else {
                uint64_t v459 = v459;
              }
              unint64_t v461 = v452 + v451;
              unint64_t v462 = __CFADD__(v452, v451) + v452;
              LODWORD(v463) = __CFADD__(__CFADD__(v452, v451), v452);
              BOOL v1073 = __CFADD__(v462, v451);
              unint64_t v464 = v462 + v451;
              if (v1073) {
                uint64_t v463 = 1;
              }
              else {
                uint64_t v463 = v463;
              }
              unint64_t v1168 = v451;
              uint64_t v1175 = v463;
              unint64_t v465 = v439 + v455;
              unint64_t v466 = __CFADD__(v446, v453) + v457;
              BOOL v467 = __CFADD__(__CFADD__(v446, v453), v457);
              BOOL v1073 = __CFADD__(v466, v456);
              unint64_t v468 = v466 + v456;
              uint64_t v469 = v1073 || v467;
              BOOL v1073 = __CFADD__(v460, v469);
              unint64_t v470 = v460 + v469;
              unsigned int v471 = v1073;
              BOOL v1073 = __CFADD__(v465, v470);
              unint64_t v472 = v465 + v470;
              if (v1073) {
                uint64_t v473 = 1;
              }
              else {
                uint64_t v473 = v471;
              }
              BOOL v1073 = __CFADD__(v452, v468);
              uint64_t v474 = v445 + v459 + v473;
              BOOL v476 = v1073;
              BOOL v1073 = __CFADD__(v1073, v461);
              unint64_t v475 = v476 + v461;
              unsigned int v477 = v1073;
              BOOL v1073 = __CFADD__(v472, v475);
              unint64_t v478 = v472 + v475;
              if (v1073) {
                uint64_t v479 = 1;
              }
              else {
                uint64_t v479 = v477;
              }
              BOOL v1073 = __CFADD__(v464, v479);
              unint64_t v480 = v464 + v479;
              LODWORD(v481) = v1073;
              BOOL v1073 = __CFADD__(v474, v480);
              unint64_t v482 = v474 + v480;
              if (v1073) {
                uint64_t v481 = 1;
              }
              else {
                uint64_t v481 = v481;
              }
              uint64_t v1157 = v481;
              unsigned long long v483 = __PAIR128__(v1160, v478) + v1164;
              BOOL v484 = __CFADD__(__CFADD__(v478, v1164), v1160);
              BOOL v1073 = __CFADD__(v482, *((void *)&v483 + 1));
              unint64_t v1161 = v482 + *((void *)&v483 + 1);
              unint64_t v485 = ((HIDWORD(v428) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v428) * (unint64_t)v1239
                   + ((v428 * (unint64_t)v1239
                     + HIDWORD(v428) * v1242
                     + ((v428 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v486 = HIDWORD(v428) * (unint64_t)v1240;
              unint64_t v487 = v428 * (unint64_t)v1237
                   + v486
                   + ((v428 * (unint64_t)v1247) >> 32);
              unint64_t v488 = HIDWORD(v486) + HIDWORD(v428) * (unint64_t)v1237 + HIDWORD(v487);
              unint64_t v489 = (v428 * v1247) | ((unint64_t)v487 << 32);
              uint64_t v490 = v1073 || v484;
              uint64_t v1153 = v490;
              BOOL v1073 = __CFADD__(v485, v489);
              unint64_t v1141 = v485 + v489;
              unint64_t v1136 = v428 * (unint64_t)v1235
                    + HIDWORD(v428) * v1241
                    + ((v428 * (unint64_t)v1238) >> 32);
              unint64_t v491 = (v428 * v1238) | ((unint64_t)v1136 << 32);
              BOOL v493 = v1073;
              BOOL v1073 = __CFADD__(v1073, v491);
              unint64_t v492 = v493 + v491;
              unsigned int v494 = v1073;
              BOOL v1073 = __CFADD__(v488, v492);
              unint64_t v1138 = v488 + v492;
              unint64_t v495 = HIDWORD(v432) * (unint64_t)v1242;
              unint64_t v496 = v432 * (unint64_t)v1239
                   + v495
                   + ((v432 * (unint64_t)v1236) >> 32);
              unint64_t v497 = HIDWORD(v495) + HIDWORD(v432) * (unint64_t)v1239 + HIDWORD(v496);
              unint64_t v498 = (v432 * v1236) | ((unint64_t)v496 << 32);
              unint64_t v499 = HIDWORD(v432) * (unint64_t)v1240;
              unint64_t v500 = v432 * (unint64_t)v1237
                   + v499
                   + ((v432 * (unint64_t)v1247) >> 32);
              unint64_t v501 = HIDWORD(v499) + HIDWORD(v432) * (unint64_t)v1237 + HIDWORD(v500);
              unint64_t v502 = (v432 * v1247) | ((unint64_t)v500 << 32);
              if (v1073) {
                uint64_t v503 = 1;
              }
              else {
                uint64_t v503 = v494;
              }
              BOOL v1073 = __CFADD__(v497, v502);
              unint64_t v1135 = v497 + v502;
              unint64_t v504 = HIDWORD(v432) * (unint64_t)v1241;
              unint64_t v505 = v432 * (unint64_t)v1235
                   + v504
                   + ((v432 * (unint64_t)v1238) >> 32);
              unint64_t v506 = (v432 * v1238) | ((unint64_t)v505 << 32);
              BOOL v508 = v1073;
              BOOL v1073 = __CFADD__(v1073, v506);
              unint64_t v507 = v508 + v506;
              LODWORD(v509) = v1073;
              BOOL v1073 = __CFADD__(v501, v507);
              unint64_t v510 = v501 + v507;
              unint64_t v511 = v447 * (unint64_t)v1240;
              unint64_t v512 = v1143 * (unint64_t)v1237
                   + v511
                   + ((v1147 * (unint64_t)v1247) >> 32);
              unint64_t v513 = HIDWORD(v511) + v447 * (unint64_t)v1237 + HIDWORD(v512);
              unint64_t v514 = (v1147 * v1247) | ((unint64_t)v512 << 32);
              if (v1073) {
                uint64_t v509 = 1;
              }
              else {
                uint64_t v509 = v509;
              }
              unint64_t v515 = v447 * (unint64_t)v1242;
              unint64_t v516 = v1143 * (unint64_t)v1239 + v515 + ((v1147 * (unint64_t)v1236) >> 32);
              unint64_t v517 = HIDWORD(v515) + v447 * (unint64_t)v1239 + HIDWORD(v516);
              BOOL v1073 = __CFADD__(v517, v514);
              unint64_t v518 = v517 + v514;
              unint64_t v519 = v447 * (unint64_t)v1241;
              unint64_t v520 = v1143 * (unint64_t)v1235
                   + v519
                   + ((v1147 * (unint64_t)v1238) >> 32);
              unint64_t v521 = (v1147 * v1238) | ((unint64_t)v520 << 32);
              BOOL v523 = v1073;
              BOOL v1073 = __CFADD__(v1073, v521);
              unint64_t v522 = v523 + v521;
              unsigned int v524 = v1073;
              BOOL v1073 = __CFADD__(v513, v522);
              unint64_t v525 = v513 + v522;
              if (v1073) {
                uint64_t v526 = 1;
              }
              else {
                uint64_t v526 = v524;
              }
              unint64_t v527 = ((v435 * (unint64_t)v1241) >> 32)
                   + v435 * (unint64_t)v1235
                   + HIDWORD(v1136)
                   + v503;
              unint64_t v528 = __CFADD__(v498, v1141) + v1135;
              BOOL v529 = __CFADD__(__CFADD__(v498, v1141), v1135);
              unint64_t v530 = v528 + v1138;
              uint64_t v531 = __CFADD__(v528, v1138) || v529;
              BOOL v1073 = __CFADD__(v510, v531);
              unint64_t v532 = v510 + v531;
              unsigned int v533 = v1073;
              BOOL v1073 = __CFADD__(v527, v532);
              unint64_t v534 = v527 + v532;
              if (v1073) {
                uint64_t v535 = 1;
              }
              else {
                uint64_t v535 = v533;
              }
              BOOL v1073 = __CFADD__((v1147 * v1236) | ((unint64_t)v516 << 32), v530);
              unint64_t v536 = HIDWORD(v519) + v447 * (unint64_t)v1235 + HIDWORD(v520) + v526;
              unint64_t v537 = HIDWORD(v504) + v441 * (unint64_t)v1235 + HIDWORD(v505) + v509 + v535;
              unint64_t v538 = v1073 + v518;
              BOOL v539 = __CFADD__(v1073, v518);
              unint64_t v540 = v534 + v538;
              uint64_t v541 = __CFADD__(v534, v538) || v539;
              BOOL v1073 = __CFADD__(v525, v541);
              unint64_t v542 = v525 + v541;
              unsigned int v543 = v1073;
              unint64_t v544 = v537 + v542;
              if (__CFADD__(v537, v542)) {
                uint64_t v545 = 1;
              }
              else {
                uint64_t v545 = v543;
              }
              unint64_t v546 = v536 + v545;
              unint64_t v547 = HIDWORD(v540);
              unint64_t v548 = 2863311530 * v540;
              unint64_t v549 = ((2863311531u * (unint64_t)HIDWORD(v540)) >> 32)
                   + 2863311530 * HIDWORD(v540)
                   + ((v548
                     + (-1431655765 * HIDWORD(v540))
                     + ((2863311531u * (unint64_t)v540) >> 32)) >> 32);
              unint64_t v550 = (2863311530u * (unint64_t)HIDWORD(v540)) >> 32;
              unint64_t v551 = (-1431655766 * HIDWORD(v540)) + HIDWORD(v548);
              unint64_t v552 = v551 + v548;
              uint64_t v553 = v550 + 2863311530 * HIDWORD(v540) + ((v551 + v548) >> 32);
              uint64_t v554 = v548 & 0xFFFFFFFE;
              unint64_t v555 = v554 | (v552 << 32);
              BOOL v1073 = __CFADD__(v549, v555);
              unint64_t v1137 = v549 + v555;
              unint64_t v556 = v551 + 715827882 * v540;
              unint64_t v557 = (v556 << 32) + v1073 + v554;
              unint64_t v1139 = v553 + v557;
              uint64_t v1142 = HIDWORD(v556) + __CFADD__(v553, v557) + v550 + 715827882 * HIDWORD(v540);
              unsigned int v1144 = v544;
              LODWORD(v556) = v544;
              unint64_t v558 = HIDWORD(v544);
              unint64_t v559 = 2863311531 * v558;
              uint64_t v560 = HIDWORD(v559) + 2863311530 * v558;
              unsigned int v561 = v556;
              unint64_t v562 = 2863311530 * v556;
              unint64_t v563 = v562 + v559 + ((2863311531u * (unint64_t)v556) >> 32);
              unint64_t v564 = v560 + HIDWORD(v563);
              unint64_t v565 = (-1431655765 * v556) | ((unint64_t)v563 << 32);
              unint64_t v566 = (2863311530u * (unint64_t)v558) >> 32;
              unint64_t v567 = (-1431655766 * v558) + HIDWORD(v562);
              unint64_t v568 = v567 + v562;
              uint64_t v569 = v566 + 2863311530 * v558 + ((v567 + v562) >> 32);
              uint64_t v570 = v562 & 0xFFFFFFFE;
              unint64_t v571 = v570 | (v568 << 32);
              BOOL v1073 = __CFADD__(v564, v571);
              unint64_t v572 = v564 + v571;
              unsigned long long v573 = __PAIR128__(v566 + 715827882 * v558, v569)
                   + __PAIR128__((v567 + 715827882 * v556) >> 32, ((v567 + 715827882 * v556) << 32) + v1073 + v570);
              unsigned int v1148 = v546;
              unint64_t v574 = HIDWORD(v546);
              unsigned int v575 = v546;
              unint64_t v576 = 2863311531 * HIDWORD(v546);
              unint64_t v577 = 2863311531 * v546;
              uint64_t v578 = HIDWORD(v576) + 2863311530 * HIDWORD(v546);
              unint64_t v579 = 2863311530 * v546;
              unint64_t v580 = v579 + v576 + HIDWORD(v577);
              uint64_t v581 = v578 + HIDWORD(v580);
              unint64_t v582 = 2863311530 * HIDWORD(v546);
              unint64_t v583 = (-1431655766 * HIDWORD(v546)) + HIDWORD(v579);
              uint64_t v584 = (-1431655766 * v546);
              unint64_t v585 = v583 + 2863311530 * v546;
              unint64_t v586 = v584 | (v585 << 32);
              BOOL v1073 = __CFADD__(v581, v586);
              unint64_t v587 = v581 + v586;
              unint64_t v588 = v583 + 715827882 * v575;
              unint64_t v589 = (v588 << 32) + v1073 + v584;
              unint64_t v590 = v577 | ((unint64_t)v580 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v565, v1137), v572);
              unint64_t v591 = __CFADD__(v565, v1137) + v572;
              LODWORD(v592) = v1073;
              BOOL v1073 = __CFADD__(v591, v1139);
              unint64_t v593 = v591 + v1139;
              if (v1073) {
                uint64_t v592 = 1;
              }
              else {
                uint64_t v592 = v592;
              }
              uint64_t v594 = v573 + v592;
              LODWORD(v595) = __CFADD__((void)v573, v592);
              BOOL v1073 = __CFADD__(v1142, v594);
              uint64_t v596 = v1142 + v594;
              if (v1073) {
                uint64_t v595 = 1;
              }
              else {
                uint64_t v595 = v595;
              }
              uint64_t v597 = HIDWORD(v582) + 2863311530 * v574 + HIDWORD(v585);
              uint64_t v598 = v596 + __CFADD__(v590, v593) + v587;
              uint64_t v1225 = (__PAIR128__(v1238+ (v1221 >> 1)+ (v1218 << 31)+ v1224+ v1209+ v1214+ v1204+ v1198+ (v1186 >> 2)+ (v1180 << 30)+ v1192+ v1168+ v1175+ v1157+ v1153+ 715827882 * v574+ HIDWORD(v582), v597)+ __PAIR128__(HIDWORD(v588), v589)) >> 64;
              uint64_t v599 = *((void *)&v573 + 1) + v595 + v597 + v589 + v573;
              uint64_t v1219 = v598 + v483;
              unint64_t v600 = __CFADD__(v598, (void)v483) + v1161;
              LODWORD(v601) = __CFADD__(__CFADD__(v598, (void)v483), v1161);
              BOOL v1073 = __CFADD__(v599, v600);
              uint64_t v1215 = v599 + v600;
              unint64_t v602 = ((HIDWORD(v540) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v540) * (unint64_t)v1239
                   + ((v540 * (unint64_t)v1239
                     + HIDWORD(v540) * v1242
                     + ((v540 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v603 = HIDWORD(v540) * (unint64_t)v1240;
              unint64_t v604 = v540 * (unint64_t)v1237
                   + v603
                   + ((v540 * (unint64_t)v1247) >> 32);
              unint64_t v605 = HIDWORD(v603) + HIDWORD(v540) * (unint64_t)v1237 + HIDWORD(v604);
              unint64_t v606 = (v540 * v1247) | ((unint64_t)v604 << 32);
              if (v1073) {
                uint64_t v601 = 1;
              }
              else {
                uint64_t v601 = v601;
              }
              unint64_t v1205 = v602 + v606;
              uint64_t v1210 = v601;
              unint64_t v1181 = v540 * (unint64_t)v1235
                    + HIDWORD(v540) * v1241
                    + ((v540 * (unint64_t)v1238) >> 32);
              unint64_t v607 = (v540 * v1238) | ((unint64_t)v1181 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v602, v606), v607);
              unint64_t v608 = __CFADD__(v602, v606) + v607;
              unsigned int v609 = v1073;
              BOOL v1073 = __CFADD__(v605, v608);
              unint64_t v1193 = v605 + v608;
              unint64_t v610 = v558 * (unint64_t)v1242;
              unint64_t v611 = v561 * (unint64_t)v1239 + v610 + ((v1144 * (unint64_t)v1236) >> 32);
              unint64_t v612 = HIDWORD(v610) + v558 * (unint64_t)v1239 + HIDWORD(v611);
              unint64_t v613 = (v1144 * v1236) | ((unint64_t)v611 << 32);
              unint64_t v614 = v558 * (unint64_t)v1240;
              unint64_t v615 = v561 * (unint64_t)v1237
                   + v614
                   + ((v1144 * (unint64_t)v1247) >> 32);
              unint64_t v616 = HIDWORD(v614) + v558 * (unint64_t)v1237 + HIDWORD(v615);
              unint64_t v617 = (v1144 * v1247) | ((unint64_t)v615 << 32);
              if (v1073) {
                uint64_t v618 = 1;
              }
              else {
                uint64_t v618 = v609;
              }
              BOOL v1073 = __CFADD__(v612, v617);
              unint64_t v619 = v612 + v617;
              unint64_t v620 = v561 * (unint64_t)v1235;
              unint64_t v621 = v558 * (unint64_t)v1241;
              unint64_t v622 = v620 + v621 + ((v1144 * (unint64_t)v1238) >> 32);
              unint64_t v623 = (v1144 * v1238) | ((unint64_t)v622 << 32);
              BOOL v625 = v1073;
              BOOL v1073 = __CFADD__(v1073, v623);
              unint64_t v624 = v625 + v623;
              unsigned int v626 = v1073;
              BOOL v1073 = __CFADD__(v616, v624);
              unint64_t v627 = v616 + v624;
              unint64_t v628 = v574 * (unint64_t)v1240;
              unint64_t v629 = v575 * (unint64_t)v1237
                   + v628
                   + ((v1148 * (unint64_t)v1247) >> 32);
              unint64_t v630 = HIDWORD(v628) + v574 * (unint64_t)v1237 + HIDWORD(v629);
              unint64_t v631 = (v1148 * v1247) | ((unint64_t)v629 << 32);
              if (v1073) {
                uint64_t v632 = 1;
              }
              else {
                uint64_t v632 = v626;
              }
              unint64_t v633 = v574 * (unint64_t)v1242;
              unint64_t v634 = v575 * (unint64_t)v1239 + v633 + ((v1148 * (unint64_t)v1236) >> 32);
              unint64_t v635 = HIDWORD(v633) + v574 * (unint64_t)v1239 + HIDWORD(v634);
              BOOL v1073 = __CFADD__(v635, v631);
              unint64_t v636 = v635 + v631;
              unint64_t v637 = v574 * (unint64_t)v1241;
              unint64_t v638 = v575 * (unint64_t)v1235
                   + v637
                   + ((v1148 * (unint64_t)v1238) >> 32);
              unint64_t v639 = (v1148 * v1238) | ((unint64_t)v638 << 32);
              BOOL v641 = v1073;
              BOOL v1073 = __CFADD__(v1073, v639);
              unint64_t v640 = v641 + v639;
              unsigned int v642 = v1073;
              BOOL v1073 = __CFADD__(v630, v640);
              unint64_t v643 = v630 + v640;
              if (v1073) {
                uint64_t v644 = 1;
              }
              else {
                uint64_t v644 = v642;
              }
              uint64_t v1199 = v644;
              unint64_t v645 = ((v547 * (unint64_t)v1241) >> 32)
                   + v547 * (unint64_t)v1235
                   + HIDWORD(v1181)
                   + v618;
              unint64_t v646 = __CFADD__(v613, v1205) + v619;
              BOOL v647 = __CFADD__(__CFADD__(v613, v1205), v619);
              unint64_t v648 = v646 + v1193;
              uint64_t v649 = __CFADD__(v646, v1193) || v647;
              BOOL v1073 = __CFADD__(v627, v649);
              unint64_t v650 = v627 + v649;
              unsigned int v651 = v1073;
              BOOL v1073 = __CFADD__(v645, v650);
              unint64_t v652 = v645 + v650;
              if (v1073) {
                uint64_t v653 = 1;
              }
              else {
                uint64_t v653 = v651;
              }
              BOOL v1073 = __CFADD__((v1148 * v1236) | ((unint64_t)v634 << 32), v648);
              unint64_t v654 = HIDWORD(v621) + v558 * (unint64_t)v1235 + HIDWORD(v622) + v632 + v653;
              unint64_t v655 = v1073 + v636;
              BOOL v656 = __CFADD__(v1073, v636);
              unint64_t v657 = v652 + v655;
              uint64_t v658 = __CFADD__(v652, v655) || v656;
              BOOL v1073 = __CFADD__(v643, v658);
              unint64_t v659 = v643 + v658;
              unsigned int v660 = v1073;
              BOOL v1073 = __CFADD__(v654, v659);
              unint64_t v661 = v654 + v659;
              unint64_t v662 = HIDWORD(v657);
              unint64_t v663 = 2454267026 * v657;
              unint64_t v664 = ((1227133513 * (unint64_t)HIDWORD(v657)) >> 32)
                   + 2454267026 * HIDWORD(v657)
                   + ((v663
                     + (1227133513 * HIDWORD(v657))
                     + ((1227133513 * (unint64_t)v657) >> 32)) >> 32);
              unint64_t v665 = (613566756 * HIDWORD(v657))
                   + 1227133513 * v657
                   + ((613566756 * (unint64_t)v657) >> 32);
              unint64_t v666 = ((613566756 * (unint64_t)HIDWORD(v657)) >> 32)
                   + 1227133513 * HIDWORD(v657)
                   + HIDWORD(v665);
              unint64_t v667 = (613566756 * v657) | (v665 << 32);
              if (v1073) {
                uint64_t v668 = 1;
              }
              else {
                uint64_t v668 = v660;
              }
              BOOL v1073 = __CFADD__(v664, v667);
              unint64_t v669 = v664 + v667;
              unint64_t v670 = (-1840700270 * HIDWORD(v657)) + 613566756 * v657 + HIDWORD(v663);
              unint64_t v671 = (-1840700270 * v657) | (v670 << 32);
              BOOL v673 = v1073;
              BOOL v1073 = __CFADD__(v1073, v666) | __CFADD__(v671, v1073 + v666);
              unint64_t v672 = v671 + v673 + v666;
              LODWORD(v671) = v661;
              unsigned int v1206 = v661;
              unint64_t v674 = HIDWORD(v661);
              unint64_t v675 = 1227133513 * v674;
              uint64_t v676 = HIDWORD(v675) + 2454267026 * v674;
              unsigned int v677 = v671;
              unint64_t v678 = 2454267026 * v671;
              unint64_t v679 = v678 + v675 + ((1227133513 * (unint64_t)v671) >> 32);
              unint64_t v680 = v676 + HIDWORD(v679);
              unint64_t v681 = (1227133513 * v671) | ((unint64_t)v679 << 32);
              uint64_t v682 = (613566756 * v674) + 1227133513 * v671;
              unint64_t v683 = 613566756 * v671;
              unint64_t v684 = v682 + HIDWORD(v683);
              unint64_t v685 = ((613566756 * (unint64_t)v674) >> 32)
                   + 1227133513 * v674
                   + HIDWORD(v684);
              unint64_t v686 = v683 & 0xFFFFFFFC | (v684 << 32);
              unint64_t v687 = HIDWORD(v670)
                   + v1073
                   + ((2454267026u * (unint64_t)HIDWORD(v657)) >> 32)
                   + 613566756 * HIDWORD(v657);
              BOOL v1073 = __CFADD__(v680, v686);
              unint64_t v688 = v680 + v686;
              unint64_t v689 = (-1840700270 * v674) + 613566756 * v677 + HIDWORD(v678);
              unint64_t v690 = v678 & 0xFFFFFFFE | (v689 << 32);
              unint64_t v691 = v690 + v1073 + v685;
              unint64_t v692 = HIDWORD(v689)
                   + (__CFADD__(v1073, v685) | __CFADD__(v690, v1073 + v685))
                   + ((2454267026u * (unint64_t)v674) >> 32)
                   + 613566756 * v674;
              BOOL v1073 = __CFADD__(v681, v669);
              unint64_t v1200 = HIDWORD(v637) + v574 * (unint64_t)v1235 + HIDWORD(v638) + v1199 + v668;
              unint64_t v693 = 1227133513 * HIDWORD(v1200);
              uint64_t v694 = HIDWORD(v693) + 2454267026 * HIDWORD(v1200);
              unint64_t v695 = 2454267026 * v1200;
              unint64_t v696 = v695 + v693 + ((1227133513 * (unint64_t)v1200) >> 32);
              unint64_t v697 = v694 + HIDWORD(v696);
              unint64_t v698 = (1227133513 * v1200) | ((unint64_t)v696 << 32);
              unint64_t v699 = (613566756 * HIDWORD(v1200))
                   + 1227133513 * v1200
                   + ((613566756 * (unint64_t)v1200) >> 32);
              unint64_t v700 = ((613566756 * (unint64_t)HIDWORD(v1200)) >> 32)
                   + 1227133513 * HIDWORD(v1200)
                   + HIDWORD(v699);
              unint64_t v701 = (613566756 * v1200) | (v699 << 32);
              unint64_t v702 = v1073 + v688;
              LODWORD(v703) = __CFADD__(v1073, v688);
              BOOL v1073 = __CFADD__(v702, v672);
              unint64_t v704 = v702 + v672;
              if (v1073) {
                uint64_t v703 = 1;
              }
              else {
                uint64_t v703 = v703;
              }
              BOOL v1073 = __CFADD__(v691, v703);
              unint64_t v705 = v691 + v703;
              unsigned int v706 = v1073;
              BOOL v1073 = __CFADD__(v687, v705);
              unint64_t v707 = v687 + v705;
              if (v1073) {
                uint64_t v708 = 1;
              }
              else {
                uint64_t v708 = v706;
              }
              BOOL v1073 = __CFADD__(v697, v701);
              unint64_t v709 = v697;
              unint64_t v710 = (-1840700270 * HIDWORD(v1200)) + 613566756 * v1200 + HIDWORD(v695);
              unint64_t v711 = (-1840700270 * v1200) | (v710 << 32);
              unint64_t v713 = v709 + v701;
              BOOL v1073 = __CFADD__(v1073, v700) | __CFADD__(v711, (__PAIR128__(v700, v709) + v701) >> 64);
              uint64_t v712 = v711 + ((__PAIR128__(v700, v709) + v701) >> 64);
              unint64_t v714 = HIDWORD(v710)
                   + v1073
                   + v1225
                   + *((void *)&v483 + 1)
                   + v1210
                   + 613566756 * HIDWORD(v1200)
                   + ((2454267026u * (unint64_t)HIDWORD(v1200)) >> 32);
              unint64_t v715 = v692 + v708;
              unint64_t v716 = __CFADD__(v698, v704) + v709 + v701;
              LODWORD(v717) = __CFADD__(__CFADD__(v698, v704), v713);
              BOOL v1073 = __CFADD__(v707, v716);
              unint64_t v718 = v707 + v716;
              if (v1073) {
                uint64_t v717 = 1;
              }
              else {
                uint64_t v717 = v717;
              }
              BOOL v1073 = __CFADD__(v712, v717);
              uint64_t v719 = v712 + v717;
              unsigned int v720 = v1073;
              BOOL v1073 = __CFADD__(v715, v719);
              uint64_t v721 = v715 + v719;
              if (v1073) {
                uint64_t v722 = 1;
              }
              else {
                uint64_t v722 = v720;
              }
              uint64_t v1222 = v722;
              unint64_t v1226 = v714;
              unint64_t v1211 = v718 + v1219;
              BOOL v1073 = __CFADD__(__CFADD__(v718, v1219), v1215);
              uint64_t v723 = __CFADD__(v718, v1219) + v1215;
              unsigned int v724 = v1073;
              BOOL v1073 = __CFADD__(v721, v723);
              uint64_t v1216 = v721 + v723;
              unint64_t v725 = ((HIDWORD(v657) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v657) * (unint64_t)v1239
                   + ((v657 * (unint64_t)v1239
                     + HIDWORD(v657) * v1242
                     + ((v657 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v726 = HIDWORD(v657) * (unint64_t)v1240;
              unint64_t v727 = v657 * (unint64_t)v1237
                   + v726
                   + ((v657 * (unint64_t)v1247) >> 32);
              unint64_t v728 = HIDWORD(v726) + HIDWORD(v657) * (unint64_t)v1237 + HIDWORD(v727);
              unint64_t v729 = (v657 * v1247) | ((unint64_t)v727 << 32);
              if (v1073) {
                uint64_t v730 = 1;
              }
              else {
                uint64_t v730 = v724;
              }
              uint64_t v1220 = v730;
              unint64_t v1187 = v725 + v729;
              unint64_t v1182 = HIDWORD(v657) * (unint64_t)v1241;
              unint64_t v731 = v657 * (unint64_t)v1235
                   + v1182
                   + ((v657 * (unint64_t)v1238) >> 32);
              unint64_t v732 = (v657 * v1238) | ((unint64_t)v731 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v725, v729), v732);
              unint64_t v733 = __CFADD__(v725, v729) + v732;
              unsigned int v734 = v1073;
              BOOL v1073 = __CFADD__(v728, v733);
              unint64_t v1194 = v728 + v733;
              unint64_t v735 = v674 * (unint64_t)v1242;
              unint64_t v736 = v677 * (unint64_t)v1239 + v735 + ((v1206 * (unint64_t)v1236) >> 32);
              unint64_t v737 = HIDWORD(v735) + v674 * (unint64_t)v1239 + HIDWORD(v736);
              unint64_t v738 = (v1206 * v1236) | ((unint64_t)v736 << 32);
              unint64_t v739 = v674 * (unint64_t)v1240;
              unint64_t v740 = v677 * (unint64_t)v1237
                   + v739
                   + ((v1206 * (unint64_t)v1247) >> 32);
              unint64_t v741 = HIDWORD(v739) + v674 * (unint64_t)v1237 + HIDWORD(v740);
              unint64_t v742 = (v1206 * v1247) | ((unint64_t)v740 << 32);
              if (v1073) {
                uint64_t v743 = 1;
              }
              else {
                uint64_t v743 = v734;
              }
              unint64_t v1169 = v737 + v742;
              unint64_t v744 = v674 * (unint64_t)v1241;
              unint64_t v745 = v677 * (unint64_t)v1235
                   + v744
                   + ((v1206 * (unint64_t)v1238) >> 32);
              unint64_t v746 = (v1206 * v1238) | ((unint64_t)v745 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v737, v742), v746);
              unint64_t v747 = __CFADD__(v737, v742) + v746;
              LODWORD(v74_Block_object_dispose(&STACK[0x940], 8) = v1073;
              BOOL v1073 = __CFADD__(v741, v747);
              unint64_t v749 = v741 + v747;
              unint64_t v750 = HIDWORD(v1200) * (unint64_t)v1240;
              unint64_t v751 = v1200 * (unint64_t)v1237
                   + v750
                   + ((v1200 * (unint64_t)v1247) >> 32);
              unint64_t v752 = HIDWORD(v750) + HIDWORD(v1200) * (unint64_t)v1237 + HIDWORD(v751);
              unint64_t v753 = (v1200 * v1247) | ((unint64_t)v751 << 32);
              if (v1073) {
                uint64_t v748 = 1;
              }
              else {
                uint64_t v748 = v748;
              }
              unint64_t v754 = HIDWORD(v1200) * (unint64_t)v1242;
              unint64_t v755 = v1200 * (unint64_t)v1239
                   + v754
                   + ((v1200 * (unint64_t)v1236) >> 32);
              unint64_t v756 = HIDWORD(v754) + HIDWORD(v1200) * (unint64_t)v1239 + HIDWORD(v755);
              BOOL v1073 = __CFADD__(v756, v753);
              unint64_t v757 = v756 + v753;
              unint64_t v758 = HIDWORD(v1200) * (unint64_t)v1241;
              unint64_t v759 = v1200 * (unint64_t)v1235
                   + v758
                   + ((v1200 * (unint64_t)v1238) >> 32);
              unint64_t v760 = (v1200 * v1238) | ((unint64_t)v759 << 32);
              BOOL v762 = v1073;
              BOOL v1073 = __CFADD__(v1073, v760);
              unint64_t v761 = v762 + v760;
              unsigned int v763 = v1073;
              BOOL v1073 = __CFADD__(v752, v761);
              unint64_t v764 = v752 + v761;
              if (v1073) {
                uint64_t v765 = 1;
              }
              else {
                uint64_t v765 = v763;
              }
              unint64_t v766 = HIDWORD(v1182) + v662 * (unint64_t)v1235 + HIDWORD(v731) + v743;
              unint64_t v767 = HIDWORD(v744) + v674 * (unint64_t)v1235 + HIDWORD(v745) + v748;
              unint64_t v768 = (v1200 * v1236) | ((unint64_t)v755 << 32);
              unint64_t v769 = __CFADD__(v738, v1187) + v1169;
              BOOL v770 = __CFADD__(__CFADD__(v738, v1187), v1169);
              unint64_t v771 = v769 + v1194;
              uint64_t v772 = __CFADD__(v769, v1194) || v770;
              BOOL v1073 = __CFADD__(v749, v772);
              unint64_t v773 = v749 + v772;
              unsigned int v774 = v1073;
              BOOL v1073 = __CFADD__(v766, v773);
              unint64_t v775 = v766 + v773;
              if (v1073) {
                uint64_t v776 = 1;
              }
              else {
                uint64_t v776 = v774;
              }
              unint64_t v777 = v767 + v776;
              BOOL v1073 = __CFADD__(__CFADD__(v768, v771), v757);
              unint64_t v778 = __CFADD__(v768, v771) + v757;
              unsigned int v779 = v1073;
              unint64_t v780 = v775 + v778;
              if (__CFADD__(v775, v778)) {
                uint64_t v781 = 1;
              }
              else {
                uint64_t v781 = v779;
              }
              BOOL v1073 = __CFADD__(v764, v781);
              unint64_t v782 = v764 + v781;
              unsigned int v783 = v1073;
              BOOL v1073 = __CFADD__(v777, v782);
              unint64_t v784 = v777 + v782;
              if (v1073) {
                uint64_t v785 = 1;
              }
              else {
                uint64_t v785 = v783;
              }
              unint64_t v786 = HIDWORD(v758) + HIDWORD(v1200) * (unint64_t)v1235 + HIDWORD(v759) + v765 + v785;
              unint64_t v787 = HIDWORD(v780);
              unsigned int v788 = v780;
              unint64_t v789 = (v784 >> 3) | (HIDWORD(v784) << 29) | (v786 << 61);
              unint64_t v1183 = v1211 + ((unint64_t)v780 >> 3) + (HIDWORD(v780) << 29) + (v784 << 61);
              BOOL v790 = v1183 < v1211;
              BOOL v1073 = __CFADD__(v1216, v790);
              uint64_t v791 = v1216 + v790;
              unsigned int v792 = v1073;
              BOOL v1073 = __CFADD__(v789, v791);
              unint64_t v1176 = v789 + v791;
              unint64_t v793 = ((HIDWORD(v780) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v780) * (unint64_t)v1239
                   + ((v780 * (unint64_t)v1239
                     + HIDWORD(v780) * v1242
                     + ((v780 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v794 = HIDWORD(v780) * (unint64_t)v1240;
              unint64_t v795 = v780 * (unint64_t)v1237
                   + v794
                   + ((v780 * (unint64_t)v1247) >> 32);
              unint64_t v796 = HIDWORD(v794) + HIDWORD(v780) * (unint64_t)v1237 + HIDWORD(v795);
              unint64_t v797 = (v780 * v1247) | ((unint64_t)v795 << 32);
              if (v1073) {
                uint64_t v798 = 1;
              }
              else {
                uint64_t v798 = v792;
              }
              uint64_t v1217 = v798;
              unint64_t v1201 = v793 + v797;
              unint64_t v799 = v780 * (unint64_t)v1238;
              unint64_t v1188 = v787 * (unint64_t)v1241;
              unint64_t v1170 = v788 * (unint64_t)v1235 + v1188 + HIDWORD(v799);
              unint64_t v800 = v799 | ((unint64_t)v1170 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v793, v797), v800);
              unint64_t v801 = __CFADD__(v793, v797) + v800;
              unsigned int v802 = v1073;
              BOOL v1073 = __CFADD__(v796, v801);
              unint64_t v1195 = v796 + v801;
              unint64_t v803 = HIDWORD(v784) * (unint64_t)v1242;
              unint64_t v804 = v784 * (unint64_t)v1239
                   + v803
                   + ((v784 * (unint64_t)v1236) >> 32);
              unint64_t v805 = HIDWORD(v803) + HIDWORD(v784) * (unint64_t)v1239 + HIDWORD(v804);
              unint64_t v806 = (v784 * v1236) | ((unint64_t)v804 << 32);
              unint64_t v807 = HIDWORD(v784) * (unint64_t)v1240;
              unint64_t v808 = v784 * (unint64_t)v1237
                   + v807
                   + ((v784 * (unint64_t)v1247) >> 32);
              unint64_t v809 = HIDWORD(v807) + HIDWORD(v784) * (unint64_t)v1237 + HIDWORD(v808);
              unint64_t v810 = (v784 * v1247) | ((unint64_t)v808 << 32);
              if (v1073) {
                uint64_t v811 = 1;
              }
              else {
                uint64_t v811 = v802;
              }
              unint64_t v812 = HIDWORD(v784) * (unint64_t)v1241;
              unint64_t v813 = v784 * (unint64_t)v1235
                   + v812
                   + ((v784 * (unint64_t)v1238) >> 32);
              unint64_t v814 = (v784 * v1238) | ((unint64_t)v813 << 32);
              unsigned long long v815 = __PAIR128__(v814, v805) + v810;
              LODWORD(v816) = __CFADD__(__CFADD__(v805, v810), v814);
              BOOL v1073 = __CFADD__(v809, *((void *)&v815 + 1));
              unint64_t v817 = v809 + *((void *)&v815 + 1);
              int v818 = v786;
              unint64_t v819 = HIDWORD(v786);
              unint64_t v786 = v786;
              unint64_t v1212 = v786;
              unint64_t v820 = v819 * (unint64_t)v1240;
              unint64_t v821 = v786 * (unint64_t)v1237
                   + v820
                   + ((v786 * (unint64_t)v1247) >> 32);
              unint64_t v822 = HIDWORD(v820) + v819 * (unint64_t)v1237 + HIDWORD(v821);
              unint64_t v823 = (v786 * v1247) | ((unint64_t)v821 << 32);
              if (v1073) {
                uint64_t v816 = 1;
              }
              else {
                uint64_t v816 = v816;
              }
              unint64_t v824 = v819 * (unint64_t)v1242;
              unint64_t v825 = v786 * (unint64_t)v1239
                   + v824
                   + ((v786 * (unint64_t)v1236) >> 32);
              unint64_t v826 = HIDWORD(v824) + v819 * (unint64_t)v1239 + HIDWORD(v825);
              BOOL v1073 = __CFADD__(v826, v823);
              unint64_t v827 = v826 + v823;
              unint64_t v828 = v819 * (unint64_t)v1241;
              unint64_t v1207 = v819;
              unint64_t v829 = v786 * (unint64_t)v1235
                   + v828
                   + ((v786 * (unint64_t)v1238) >> 32);
              unint64_t v830 = (v818 * v1238) | ((unint64_t)v829 << 32);
              BOOL v832 = v1073;
              BOOL v1073 = __CFADD__(v1073, v830);
              unint64_t v831 = v832 + v830;
              unsigned int v833 = v1073;
              BOOL v1073 = __CFADD__(v822, v831);
              unint64_t v834 = v822 + v831;
              if (v1073) {
                uint64_t v835 = 1;
              }
              else {
                uint64_t v835 = v833;
              }
              unint64_t v836 = HIDWORD(v1188) + v787 * (unint64_t)v1235 + HIDWORD(v1170) + v811;
              unint64_t v837 = (v818 * v1236) | ((unint64_t)v825 << 32);
              uint64_t v838 = __CFADD__(v806, v1201) + (void)v815;
              BOOL v839 = __CFADD__(__CFADD__(v806, v1201), (void)v815);
              BOOL v1073 = __CFADD__(v838, v1195);
              uint64_t v840 = v838 + v1195;
              uint64_t v841 = v1073 || v839;
              BOOL v1073 = __CFADD__(v817, v841);
              unint64_t v842 = v817 + v841;
              unsigned int v843 = v1073;
              BOOL v1073 = __CFADD__(v836, v842);
              unint64_t v844 = v836 + v842;
              if (v1073) {
                uint64_t v845 = 1;
              }
              else {
                uint64_t v845 = v843;
              }
              unint64_t v846 = HIDWORD(v812) + HIDWORD(v784) * (unint64_t)v1235 + HIDWORD(v813) + v816 + v845;
              BOOL v1073 = __CFADD__(__CFADD__(v837, v840), v827);
              unint64_t v847 = __CFADD__(v837, v840) + v827;
              unsigned int v848 = v1073;
              unint64_t v849 = v844 + v847;
              if (__CFADD__(v844, v847)) {
                uint64_t v850 = 1;
              }
              else {
                uint64_t v850 = v848;
              }
              BOOL v1073 = __CFADD__(v834, v850);
              unint64_t v851 = v834 + v850;
              unsigned int v852 = v1073;
              unint64_t v853 = v846 + v851;
              if (__CFADD__(v846, v851)) {
                uint64_t v854 = 1;
              }
              else {
                uint64_t v854 = v852;
              }
              unint64_t v855 = HIDWORD(v828) + v819 * (unint64_t)v1235 + HIDWORD(v829) + v835 + v854;
              unint64_t v856 = HIDWORD(v849);
              unint64_t v857 = 1908874353 * v849;
              unint64_t v858 = ((3340530119u * (unint64_t)HIDWORD(v849)) >> 32)
                   + 1908874353 * HIDWORD(v849)
                   + ((v857
                     + (-954437177 * HIDWORD(v849))
                     + ((3340530119u * (unint64_t)v849) >> 32)) >> 32);
              unint64_t v859 = 477218588 * v849;
              unint64_t v860 = (477218588 * HIDWORD(v849)) + 3340530119 * v849 + HIDWORD(v859);
              unint64_t v861 = ((477218588 * (unint64_t)HIDWORD(v849)) >> 32)
                   + 3340530119 * HIDWORD(v849)
                   + HIDWORD(v860);
              unint64_t v862 = (477218588 * v849) | (v860 << 32);
              unint64_t v1165 = v858 + v862;
              unint64_t v1145 = 1908874353 * HIDWORD(v849);
              unint64_t v1149 = v859 + v1145 + HIDWORD(v857);
              unsigned int v1154 = v853;
              unint64_t v863 = (1908874353 * v849) | (v1149 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v858, v862), v863);
              unint64_t v864 = __CFADD__(v858, v862) + v863;
              unsigned int v865 = v1073;
              BOOL v1073 = __CFADD__(v861, v864);
              unint64_t v1171 = v861 + v864;
              unint64_t v866 = HIDWORD(v853);
              unint64_t v867 = 3340530119 * HIDWORD(v853);
              uint64_t v868 = HIDWORD(v867) + 1908874353 * HIDWORD(v853);
              unsigned int v869 = v853;
              unint64_t v870 = 1908874353 * v853;
              unint64_t v871 = 3340530119 * v853;
              unint64_t v872 = v870 + v867 + HIDWORD(v871);
              uint64_t v873 = v868 + HIDWORD(v872);
              unint64_t v874 = v871 | ((unint64_t)v872 << 32);
              unint64_t v875 = 477218588 * v869;
              unint64_t v876 = (477218588 * v866) + 3340530119 * v869 + HIDWORD(v875);
              unint64_t v877 = ((477218588 * (unint64_t)v866) >> 32)
                   + 3340530119 * v866
                   + HIDWORD(v876);
              unint64_t v878 = (477218588 * v869) | (v876 << 32);
              if (v1073) {
                uint64_t v879 = 1;
              }
              else {
                uint64_t v879 = v865;
              }
              BOOL v1073 = __CFADD__(v873, v878);
              uint64_t v880 = v873;
              unint64_t v881 = 1908874353 * v866;
              unint64_t v882 = v875 + v881 + HIDWORD(v870);
              unint64_t v883 = v870 | ((unint64_t)v882 << 32);
              unsigned long long v884 = __PAIR128__(v883, v880) + v878;
              LODWORD(v885) = __CFADD__(v1073, v883);
              BOOL v1073 = __CFADD__(v877, *((void *)&v884 + 1));
              unint64_t v886 = v877 + *((void *)&v884 + 1);
              unsigned int v887 = v855;
              unsigned int v1158 = v855;
              unint64_t v888 = HIDWORD(v855);
              unsigned int v889 = v887;
              unint64_t v890 = 477218588 * v887;
              unint64_t v891 = (477218588 * v888) + 3340530119 * v887 + HIDWORD(v890);
              unint64_t v892 = ((477218588 * (unint64_t)v888) >> 32)
                   + 3340530119 * v888
                   + HIDWORD(v891);
              unint64_t v893 = (477218588 * v887) | (v891 << 32);
              if (v1073) {
                uint64_t v885 = 1;
              }
              else {
                uint64_t v885 = v885;
              }
              unint64_t v894 = 3340530119 * v888;
              uint64_t v895 = HIDWORD(v894) + 1908874353 * v888;
              unint64_t v896 = 1908874353 * v889;
              unint64_t v897 = v896 + v894 + ((3340530119u * (unint64_t)v889) >> 32);
              unint64_t v898 = v895 + HIDWORD(v897);
              BOOL v1073 = __CFADD__(v898, v893);
              unint64_t v899 = v898 + v893;
              unint64_t v1196 = v890 + (1908874353 * v888) + HIDWORD(v896);
              unint64_t v1202 = 1908874353 * v888;
              unint64_t v900 = (1908874353 * v889) | ((unint64_t)v1196 << 32);
              BOOL v902 = v1073;
              BOOL v1073 = __CFADD__(v1073, v900);
              unint64_t v901 = v902 + v900;
              LODWORD(v903) = v1073;
              BOOL v1073 = __CFADD__(v892, v901);
              unint64_t v904 = v892 + v901;
              if (v1073) {
                uint64_t v903 = 1;
              }
              else {
                uint64_t v903 = v903;
              }
              uint64_t v1189 = v903;
              unint64_t v905 = HIDWORD(v1145) + 477218588 * HIDWORD(v849) + HIDWORD(v1149) + v879;
              BOOL v1073 = __CFADD__(__CFADD__(v874, v1165), (void)v884);
              uint64_t v906 = __CFADD__(v874, v1165) + (void)v884;
              LODWORD(v907) = v1073;
              BOOL v1073 = __CFADD__(v906, v1171);
              uint64_t v908 = v906 + v1171;
              if (v1073) {
                uint64_t v907 = 1;
              }
              else {
                uint64_t v907 = v907;
              }
              BOOL v1073 = __CFADD__(v886, v907);
              unint64_t v909 = v886 + v907;
              unsigned int v910 = v1073;
              BOOL v1073 = __CFADD__(v905, v909);
              unint64_t v911 = v905 + v909;
              if (v1073) {
                uint64_t v912 = 1;
              }
              else {
                uint64_t v912 = v910;
              }
              BOOL v1073 = __CFADD__((-954437177 * v889) | ((unint64_t)v897 << 32), v908);
              unint64_t v913 = HIDWORD(v881) + 477218588 * v866 + HIDWORD(v882) + v885 + v912;
              BOOL v915 = v1073;
              BOOL v1073 = __CFADD__(v1073, v899);
              unint64_t v914 = v915 + v899;
              unsigned int v916 = v1073;
              BOOL v1073 = __CFADD__(v911, v914);
              unint64_t v917 = v911 + v914;
              if (v1073) {
                uint64_t v918 = 1;
              }
              else {
                uint64_t v918 = v916;
              }
              BOOL v1073 = __CFADD__(v904, v918);
              unint64_t v919 = v904 + v918;
              LODWORD(v920) = v1073;
              BOOL v1073 = __CFADD__(v913, v919);
              unint64_t v921 = v913 + v919;
              if (v1073) {
                uint64_t v920 = 1;
              }
              else {
                uint64_t v920 = v920;
              }
              uint64_t v1172 = v920;
              BOOL v1073 = __CFADD__(v917, v1183);
              unint64_t v923 = v917 + v1183;
              uint64_t v922 = (__PAIR128__(v1176, v917) + v1183) >> 64;
              BOOL v924 = __CFADD__(v1073, v1176);
              BOOL v1073 = __CFADD__(v921, v922);
              unint64_t v1177 = v921 + v922;
              unint64_t v925 = ((HIDWORD(v849) * (unint64_t)v1242) >> 32)
                   + HIDWORD(v849) * (unint64_t)v1239
                   + ((v849 * (unint64_t)v1239
                     + HIDWORD(v849) * v1242
                     + ((v849 * (unint64_t)v1236) >> 32)) >> 32);
              unint64_t v926 = HIDWORD(v849) * (unint64_t)v1240;
              unint64_t v927 = v849 * (unint64_t)v1237
                   + v926
                   + ((v849 * (unint64_t)v1247) >> 32);
              unint64_t v928 = HIDWORD(v926) + HIDWORD(v849) * (unint64_t)v1237 + HIDWORD(v927);
              unint64_t v929 = (v849 * v1247) | ((unint64_t)v927 << 32);
              uint64_t v930 = v1073 || v924;
              uint64_t v1166 = v930;
              BOOL v1073 = __CFADD__(v925, v929);
              unint64_t v1146 = v925 + v929;
              unint64_t v1140 = v849 * (unint64_t)v1235
                    + HIDWORD(v849) * v1241
                    + ((v849 * (unint64_t)v1238) >> 32);
              unint64_t v931 = (v849 * v1238) | ((unint64_t)v1140 << 32);
              BOOL v933 = v1073;
              BOOL v1073 = __CFADD__(v1073, v931);
              unint64_t v932 = v933 + v931;
              unsigned int v934 = v1073;
              BOOL v1073 = __CFADD__(v928, v932);
              unint64_t v1150 = v928 + v932;
              unint64_t v935 = v866 * (unint64_t)v1242;
              unint64_t v936 = v869 * (unint64_t)v1239 + v935 + ((v1154 * (unint64_t)v1236) >> 32);
              unint64_t v937 = HIDWORD(v935) + v866 * (unint64_t)v1239 + HIDWORD(v936);
              unint64_t v938 = (v1154 * v1236) | ((unint64_t)v936 << 32);
              unint64_t v939 = v866 * (unint64_t)v1240;
              unint64_t v940 = v869 * (unint64_t)v1237
                   + v939
                   + ((v1154 * (unint64_t)v1247) >> 32);
              unint64_t v941 = HIDWORD(v939) + v866 * (unint64_t)v1237 + HIDWORD(v940);
              unint64_t v942 = (v1154 * v1247) | ((unint64_t)v940 << 32);
              if (v1073) {
                uint64_t v943 = 1;
              }
              else {
                uint64_t v943 = v934;
              }
              BOOL v1073 = __CFADD__(v937, v942);
              unint64_t v944 = v937 + v942;
              unint64_t v945 = v866 * (unint64_t)v1241;
              unint64_t v946 = v869 * (unint64_t)v1235
                   + v945
                   + ((v1154 * (unint64_t)v1238) >> 32);
              unint64_t v947 = (v1154 * v1238) | ((unint64_t)v946 << 32);
              BOOL v949 = v1073;
              BOOL v1073 = __CFADD__(v1073, v947);
              unint64_t v948 = v949 + v947;
              LODWORD(v950) = v1073;
              BOOL v1073 = __CFADD__(v941, v948);
              unint64_t v951 = v941 + v948;
              unsigned int v952 = v888;
              unint64_t v953 = v888 * (unint64_t)v1242;
              unint64_t v954 = HIDWORD(v953) + v888 * (unint64_t)v1239;
              unint64_t v955 = v889 * (unint64_t)v1239 + v953;
              unint64_t v956 = v952 * (unint64_t)v1240;
              unint64_t v957 = HIDWORD(v956) + v952 * (unint64_t)v1237;
              unint64_t v958 = v889 * (unint64_t)v1237
                   + v956
                   + ((v1158 * (unint64_t)v1247) >> 32);
              unint64_t v959 = v957 + HIDWORD(v958);
              unint64_t v960 = (v1158 * v1247) | ((unint64_t)v958 << 32);
              if (v1073) {
                uint64_t v950 = 1;
              }
              else {
                uint64_t v950 = v950;
              }
              unint64_t v961 = v955 + ((v1158 * (unint64_t)v1236) >> 32);
              unint64_t v962 = v954 + HIDWORD(v961);
              BOOL v1073 = __CFADD__(v962, v960);
              unint64_t v963 = v962 + v960;
              unsigned int v1162 = v952;
              unint64_t v964 = v952 * (unint64_t)v1241;
              unint64_t v965 = v889 * (unint64_t)v1235
                   + v964
                   + ((v1158 * (unint64_t)v1238) >> 32);
              unint64_t v966 = (v1158 * v1238) | ((unint64_t)v965 << 32);
              BOOL v968 = v1073;
              BOOL v1073 = __CFADD__(v1073, v966);
              unint64_t v967 = v968 + v966;
              unsigned int v969 = v1073;
              BOOL v1073 = __CFADD__(v959, v967);
              unint64_t v970 = v959 + v967;
              if (v1073) {
                uint64_t v971 = 1;
              }
              else {
                uint64_t v971 = v969;
              }
              unint64_t v972 = ((v856 * (unint64_t)v1241) >> 32)
                   + v856 * (unint64_t)v1235
                   + HIDWORD(v1140)
                   + v943;
              unint64_t v973 = HIDWORD(v945) + v866 * (unint64_t)v1235 + HIDWORD(v946) + v950;
              unint64_t v974 = (v1158 * v1236) | ((unint64_t)v961 << 32);
              unint64_t v975 = HIDWORD(v964) + v952 * (unint64_t)v1235 + HIDWORD(v965) + v971;
              BOOL v1073 = __CFADD__(__CFADD__(v938, v1146), v944);
              unint64_t v976 = __CFADD__(v938, v1146) + v944;
              unsigned int v977 = v1073;
              unint64_t v978 = v976 + v1150;
              if (__CFADD__(v976, v1150)) {
                uint64_t v979 = 1;
              }
              else {
                uint64_t v979 = v977;
              }
              BOOL v1073 = __CFADD__(v951, v979);
              unint64_t v980 = v951 + v979;
              unsigned int v981 = v1073;
              BOOL v1073 = __CFADD__(v972, v980);
              unint64_t v982 = v972 + v980;
              if (v1073) {
                uint64_t v983 = 1;
              }
              else {
                uint64_t v983 = v981;
              }
              unint64_t v984 = v973 + v983;
              BOOL v1073 = __CFADD__(__CFADD__(v974, v978), v963);
              unint64_t v985 = __CFADD__(v974, v978) + v963;
              unsigned int v986 = v1073;
              BOOL v1073 = __CFADD__(v982, v985);
              unint64_t v987 = v982 + v985;
              if (v1073) {
                uint64_t v988 = 1;
              }
              else {
                uint64_t v988 = v986;
              }
              BOOL v1073 = __CFADD__(v970, v988);
              unint64_t v989 = v970 + v988;
              unsigned int v990 = v1073;
              unint64_t v991 = v984 + v989;
              if (__CFADD__(v984, v989)) {
                uint64_t v992 = 1;
              }
              else {
                uint64_t v992 = v990;
              }
              unint64_t v993 = v975 + v992;
              unint64_t v994 = HIDWORD(v987);
              unsigned int v995 = v987;
              unint64_t v996 = ((2576980378u * (unint64_t)HIDWORD(v987)) >> 32)
                   + 2576980377 * HIDWORD(v987)
                   + ((((2576980378 * HIDWORD(v987)) & 0xFFFFFFFELL)
                     + 2576980377 * v995
                     + ((2576980378u * (unint64_t)v995) >> 32)) >> 32);
              unint64_t v997 = 2576980377 * HIDWORD(v987);
              unint64_t v998 = ((2576980377u * (unint64_t)v995) >> 32) + v997;
              unint64_t v999 = HIDWORD(v997);
              unint64_t v1000 = HIDWORD(v997) + 2576980377 * v994 + ((v998 + 2576980377 * v995) >> 32);
              unint64_t v1001 = (-1717986919 * v995) | ((unint64_t)(v998 - 1717986919 * v995) << 32);
              unint64_t v1002 = v998 + 429496729 * v995;
              unint64_t v1243 = v996 + v1001;
              unint64_t v1003 = (-1717986919 * v995) | ((unint64_t)v1002 << 32);
              unint64_t v1004 = __CFADD__(v996, v1001) + v1003;
              LODWORD(v1005) = __CFADD__(__CFADD__(v996, v1001), v1003);
              BOOL v1073 = __CFADD__(v1000, v1004);
              unint64_t v1248 = v1000 + v1004;
              unint64_t v1006 = HIDWORD(v991);
              unint64_t v1007 = (-1717986918 * HIDWORD(v991))
                    + 2576980377 * v991
                    + ((2576980378u * (unint64_t)v991) >> 32);
              unint64_t v1008 = ((2576980378u * (unint64_t)HIDWORD(v991)) >> 32)
                    + 2576980377 * HIDWORD(v991)
                    + HIDWORD(v1007);
              unint64_t v1009 = (-1717986918 * v991) | (v1007 << 32);
              unint64_t v1010 = 2576980377 * HIDWORD(v991);
              unint64_t v1011 = 2576980377 * v991;
              unint64_t v1012 = HIDWORD(v1011) + v1010;
              unint64_t v1013 = HIDWORD(v1010);
              uint64_t v1014 = v1013 + 2576980377 * HIDWORD(v991) + ((v1012 + v1011) >> 32);
              unint64_t v1015 = (-1717986919 * v991) | ((unint64_t)(v1012 - 1717986919 * v991) << 32);
              unint64_t v1016 = v1012 + 429496729 * v991;
              if (v1073) {
                uint64_t v1005 = 1;
              }
              else {
                uint64_t v1005 = v1005;
              }
              unint64_t v1017 = v1008 + v1015;
              unint64_t v1018 = v1011 | ((unint64_t)v1016 << 32);
              BOOL v1073 = __CFADD__(__CFADD__(v1008, v1015), v1018);
              unint64_t v1019 = __CFADD__(v1008, v1015) + v1018;
              unsigned int v1020 = v1073;
              BOOL v1073 = __CFADD__(v1014, v1019);
              unint64_t v1021 = v1014 + v1019;
              unint64_t v1022 = HIDWORD(v993);
              unsigned int v1023 = v975 + v992;
              unint64_t v1024 = 2576980378 * HIDWORD(v993);
              uint64_t v1025 = HIDWORD(v1024) + 2576980377 * v1022;
              uint64_t v1026 = (v1024 & 0xFFFFFFFE) + 2576980377 * (v975 + v992);
              unint64_t v1027 = 2576980377 * v1022;
              unint64_t v1028 = 2576980377 * (v975 + v992);
              unint64_t v1029 = HIDWORD(v1028) + v1027;
              unint64_t v1030 = HIDWORD(v1027) + v1027 + ((v1029 + v1028) >> 32);
              unint64_t v1031 = v1028 | ((unint64_t)(v1029 - 1717986919 * (v975 + v992)) << 32);
              unint64_t v1032 = 2576980378 * v1023;
              unint64_t v1033 = v1029 + 429496729 * v1023;
              if (v1073) {
                uint64_t v1034 = 1;
              }
              else {
                uint64_t v1034 = v1020;
              }
              unint64_t v1035 = v1026 + HIDWORD(v1032);
              uint64_t v1036 = v1025 + HIDWORD(v1035);
              BOOL v1073 = __CFADD__(v1036, v1031);
              unint64_t v1037 = v1036 + v1031;
              unint64_t v1038 = v1028 | ((unint64_t)v1033 << 32);
              BOOL v1040 = v1073;
              BOOL v1073 = __CFADD__(v1073, v1038);
              unint64_t v1039 = v1040 + v1038;
              unsigned int v1041 = v1073;
              BOOL v1073 = __CFADD__(v1030, v1039);
              unint64_t v1042 = v1030 + v1039;
              if (v1073) {
                uint64_t v1043 = 1;
              }
              else {
                uint64_t v1043 = v1041;
              }
              uint64_t v1044 = v999 + 429496729 * v994 + HIDWORD(v1002) + v1005;
              unint64_t v1045 = v1032 & 0xFFFFFFFE | (v1035 << 32);
              unint64_t v1046 = __CFADD__(v1009, v1243) + v1017;
              LODWORD(v1047) = __CFADD__(__CFADD__(v1009, v1243), v1017);
              BOOL v1073 = __CFADD__(v1046, v1248);
              unint64_t v1048 = v1046 + v1248;
              if (v1073) {
                uint64_t v1047 = 1;
              }
              else {
                uint64_t v1047 = v1047;
              }
              BOOL v1073 = __CFADD__(v1021, v1047);
              unint64_t v1049 = v1021 + v1047;
              unsigned int v1050 = v1073;
              BOOL v1073 = __CFADD__(v1044, v1049);
              unint64_t v1051 = v1044 + v1049;
              if (v1073) {
                uint64_t v1052 = 1;
              }
              else {
                uint64_t v1052 = v1050;
              }
              uint64_t v1053 = v1013 + 429496729 * v1006 + HIDWORD(v1016) + v1034 + v1052;
              BOOL v1073 = __CFADD__(__CFADD__(v1045, v1048), v1037);
              unint64_t v1054 = __CFADD__(v1045, v1048) + v1037;
              unsigned int v1055 = v1073;
              BOOL v1073 = __CFADD__(v1051, v1054);
              unint64_t v1056 = v1051 + v1054;
              if (v1073) {
                uint64_t v1057 = 1;
              }
              else {
                uint64_t v1057 = v1055;
              }
              BOOL v1073 = __CFADD__(v1042, v1057);
              unint64_t v1058 = v1042 + v1057;
              unsigned int v1059 = v1073;
              BOOL v1073 = __CFADD__(v1053, v1058);
              unint64_t v1060 = v1053 + v1058;
              if (v1073) {
                uint64_t v1061 = 1;
              }
              else {
                uint64_t v1061 = v1059;
              }
              unsigned long long v1062 = __PAIR128__(v1177, v1056) + v923;
              BOOL v1063 = __CFADD__(__CFADD__(v1056, v923), v1177);
              BOOL v1073 = __CFADD__(v1060, *((void *)&v1062 + 1));
              unint64_t v1064 = v1060 + *((void *)&v1062 + 1);
              unint64_t v1065 = v1226
                    + v1222
                    + v1220
                    + (v1212 >> 3)
                    + (v1207 << 29)
                    + v1217
                    + 477218588 * v1162
                    + HIDWORD(v1202)
                    + HIDWORD(v1196)
                    + v1189
                    + v1172
                    + v1166
                    + 429496729 * v1022
                    + HIDWORD(v1027)
                    + HIDWORD(v1033)
                    + v1043
                    + v1061;
              uint64_t v1066 = v1073 || v1063;
              *((void *)&v1068 + 1) = v1064;
              *(void *)&long long v1068 = v1056 + v923;
              unint64_t v1067 = v1068 >> 32;
              unint64_t v1069 = v1065 + v1066;
              *((void *)&v1068 + 1) = v1065 + v1066;
              *(void *)&long long v1068 = v1064;
              unint64_t v1070 = v1068 >> 32;
              unsigned long long v1072 = __PAIR128__(v1228, v120) - v1067;
              unint64_t v1071 = v1072;
              BOOL v1073 = *((void *)&v1072 + 1) <= v1228 && *((void *)&v1072 + 1) >= v1070;
              unint64_t v1074 = *((void *)&v1072 + 1) - v1070;
              uint64_t v1075 = !v1073;
              uint64_t v1076 = v1232 + v1234 + v1233 - v1230 - v1227 - (v1231[2] + v1229[2] + HIDWORD(v1069)) - v1075;
              if (v1076 < 0)
              {
                uint64_t v1076 = ~v1076;
                unint64_t v1074 = ~v1074;
                unint64_t v1071 = ~(void)v1072;
                unint64_t v1077 = 0x8000000000000000;
              }
              else
              {
                unint64_t v1077 = 0;
              }
              unint64_t v1078 = 1042612833 * HIDWORD(v1071);
              unint64_t v1079 = 542101086 * v1071
                    + v1078
                    + ((1042612833 * (unint64_t)v1071) >> 32);
              unsigned long long v1080 = __PAIR128__(HIDWORD(v1078) + 542101086 * HIDWORD(v1071), (v1071 >> 4) | (HIDWORD(v1071) << 28))+ __PAIR128__(HIDWORD(v1079), (1042612833 * v1071) | ((unint64_t)v1079 << 32));
              unint64_t v1081 = 1042612833 * HIDWORD(v1074);
              unint64_t v1082 = 542101086 * v1074
                    + v1081
                    + ((1042612833 * (unint64_t)v1074) >> 32);
              unsigned long long v1083 = __PAIR128__(HIDWORD(v1081) + 542101086 * HIDWORD(v1074), (v1074 >> 4) | (HIDWORD(v1074) << 28))+ __PAIR128__(HIDWORD(v1082), (1042612833 * v1074) | ((unint64_t)v1082 << 32));
              unint64_t v1084 = 1042612833 * HIDWORD(v1076);
              unint64_t v1085 = 542101086 * v1076
                    + v1084
                    + ((1042612833 * (unint64_t)v1076) >> 32);
              unsigned long long v1086 = __PAIR128__(HIDWORD(v1084) + 542101086 * HIDWORD(v1076), (v1076 >> 4) | (HIDWORD(v1076) << 28))+ __PAIR128__(HIDWORD(v1085), (1042612833 * v1076) | ((unint64_t)v1085 << 32));
              BOOL v1073 = __CFADD__(__CFADD__((void)v1080, v1074 << 60), ((v1074 >> 4) | (HIDWORD(v1074) << 28))+ ((1042612833 * v1074) | ((unint64_t)v1082 << 32)));
              unint64_t v1087 = __CFADD__((void)v1080, v1074 << 60)
                    + ((v1074 >> 4) | (HIDWORD(v1074) << 28))
                    + ((1042612833 * v1074) | ((unint64_t)v1082 << 32));
              LODWORD(v108_Block_object_dispose(&STACK[0x940], 8) = v1073;
              BOOL v1073 = __CFADD__(*((void *)&v1080 + 1), v1087);
              unint64_t v1089 = *((void *)&v1080 + 1) + v1087;
              if (v1073) {
                uint64_t v1088 = 1;
              }
              else {
                uint64_t v1088 = v1088;
              }
              uint64_t v1090 = *((void *)&v1083 + 1) + v1088;
              unint64_t v1091 = v1089 + (v1076 << 60);
              BOOL v1073 = __CFADD__(__CFADD__(v1089, v1076 << 60), (void)v1086);
              uint64_t v1092 = __CFADD__(v1089, v1076 << 60) + (void)v1086;
              unsigned int v1093 = v1073;
              unint64_t v1094 = v1090 + v1092;
              if (__CFADD__(v1090, v1092)) {
                uint64_t v1095 = 1;
              }
              else {
                uint64_t v1095 = v1093;
              }
              unint64_t v1096 = *((void *)&v1086 + 1) + v1095;
              if (v1096 > 1)
              {
                unint64_t v1249 = ((2328306436u * (unint64_t)v1089) >> 32)
                      + 2328306436 * HIDWORD(v1091)
                      + ((((2328306436 * v1089) & 0xFFFFFFFCLL)
                        + 2313682944 * HIDWORD(v1091)
                        + ((2313682944u * (unint64_t)v1089) >> 32)) >> 32);
                uint64_t v1119 = (v1077 | 0x3008000000000000) + v1096;
                uint64_t v1123 = v1077 | 0x2FE2000000000000;
              }
              else
              {
                unint64_t v1097 = __bid128_add(a1, a2 & 0x7FFFFFFFFFFFFFFFLL, 1uLL, 0xB040000000000000, a5, a6);
                uint64_t v1099 = v1098;
                unint64_t v1100 = __bid128_mul(v1097, v1098, v1097, v1098, a5, a6);
                uint64_t v1102 = v1101;
                unint64_t v1103 = __bid128_mul(5uLL, 0xB03E000000000000, v1100, v1101, a5, a6);
                uint64_t v1244 = v1104;
                unint64_t v1105 = __bid128_mul(v1097, v1099, v1100, v1102, a5, a6);
                uint64_t v1107 = v1106;
                unint64_t v1108 = __bid128_mul(0x67D9DA2155555555uLL, 0x2FFCA45894E48295, v1105, v1106, a5, a6);
                unint64_t v1110 = __bid128_add(v1103, v1244, v1108, v1109, a5, a6);
                uint64_t v1245 = v1111;
                unint64_t v1112 = __bid128_mul(v1097, v1099, v1105, v1107, a5, a6);
                unint64_t v1114 = __bid128_mul(0x19uLL, 0xB03C000000000000, v1112, v1113, a5, a6);
                unint64_t v1116 = __bid128_add(v1110, v1245, v1114, v1115, a5, a6);
                uint64_t v1246 = v1117;
                unint64_t v1094 = __bid128_add(v1097, v1099, v1116, v1117, a5, a6);
                uint64_t v1119 = v1118;
                unint64_t v1120 = __bid128_sub(v1094, v1118, v1097, v1099, a5, a6);
                unint64_t v1249 = __bid128_sub(v1120, v1121, v1116, v1246, a5, a6);
                uint64_t v1123 = v1122;
              }
              unint64_t v1124 = __bid128_mul(a3, a4, v1094, v1119, a5, a6);
              unint64_t v1126 = v1125;
              unint64_t v1127 = bid128_ext_fma(v1253, &v1252, &v1251, &v1250, a3, a4, v1094, v1119, v1124, v1125 ^ 0x8000000000000000, a5, a6);
              unint64_t v1129 = bid128_ext_fma(v1253, &v1252, &v1251, &v1250, a3, a4, v1249, v1123, v1127, v1128, a5, a6);
              uint64_t v1131 = v1130;
              unint64_t v14 = __bid128_exp(v1124, v1126, a5, a6);
              unint64_t v1133 = v1132;
              if (__bid128_isZero(v14, v1132))
              {
                unint64_t v14 = 0;
                int v1134 = *a6 | 0x10;
              }
              else
              {
                if ((~v1133 & 0x7800000000000000) != 0 || (v1133 & 0x7C00000000000000) == 0x7C00000000000000) {
                  return bid128_ext_fma(v1253, &v1252, &v1251, &v1250, v14, v1133, v1129, v1131, v14, v1133, a5, a6);
                }
                int v1134 = *a6 | 8;
              }
              *a6 = v1134;
            }
            else
            {
              unint64_t v14 = 0;
              *a6 |= 1u;
            }
          }
          else
          {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = a2 & 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v14 = 1;
          if (!__bid128_quiet_equal(a1, v16, 1uLL, 0x3040000000000000uLL, a6))
          {
            __bid128_quiet_less(a1, v16, 1uLL, 0x3040000000000000, a6);
            return 0;
          }
        }
      }
      else
      {
        if ((a4 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93) {
          return 0;
        }
        if ((a4 & 0x3FFFFFFFFFFFLL) != 0x314DC6448D93) {
          return a3;
        }
        unint64_t v14 = a3;
        if (a3 > 0x38C15B09FFFFFFFFLL) {
          return 0;
        }
      }
    }
    else
    {
      if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93) {
        return 0;
      }
      unint64_t v14 = a1;
      if (a1 > 0x38C15B09FFFFFFFFLL && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93) {
        return 0;
      }
    }
  }
  return v14;
}

unint64_t __bid128_rem(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a3;
  uint64_t v5 = a4 & 0x7800000000000000;
  if (((a4 >> 61) & 3) == 3)
  {
    if (v5 == 0x7800000000000000)
    {
      unint64_t v6 = 0xFE00000000000000;
      if ((a4 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93)
      {
        if ((a4 & 0x3FFFFFFFFFFFLL) != 0x314DC6448D93 || a3 < 0x38C15B0A00000000)
        {
          unint64_t v6 = 0xFE003FFFFFFFFFFFLL;
          unint64_t v7 = a3;
        }
        else
        {
          unint64_t v7 = 0;
        }
      }
      else
      {
        unint64_t v7 = 0;
      }
      LODWORD(v9) = 0;
      unint64_t v10 = 0;
      if ((a4 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = v7;
      }
      if ((a4 & 0x7C00000000000000) == 0x7800000000000000) {
        unint64_t v6 = 0xF800000000000000;
      }
      unint64_t v8 = v6 & a4;
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v8 = 0;
      unint64_t v10 = 0;
      uint64_t v9 = (a4 >> 47) & 0x3FFF;
    }
  }
  else
  {
    unint64_t v8 = a4 & 0x1FFFFFFFFFFFFLL;
    if ((a4 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0
      || (a4 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a3 >= 0x378D8E6400000000)
    {
      unint64_t v4 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v9 = (a4 >> 49) & 0x3FFF;
    unint64_t v10 = v8 | v4;
  }
  long long v71 = 0uLL;
  uint64_t v13 = a2 & 0x7800000000000000;
  if (((a2 >> 61) & 3) == 3)
  {
    if (v13 == 0x7800000000000000)
    {
      *(void *)&long long v71 = a1;
      if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
        || (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && a1 >= 0x38C15B0A00000000)
      {
        *(void *)&long long v71 = 0;
      }
      if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
        *(void *)&long long v71 = 0;
      }
    }
    goto LABEL_78;
  }
  uint64_t v14 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
    goto LABEL_36;
  }
  if ((a2 & 0x1FFFFFFFFFFFFLL) != 0x1ED09BEAD87C0)
  {
    unint64_t v65 = a1;
    goto LABEL_37;
  }
  unint64_t v65 = a1;
  if (a1 >= 0x378D8E6400000000)
  {
LABEL_36:
    unint64_t v65 = 0;
    uint64_t v14 = 0;
  }
LABEL_37:
  *(void *)&long long v71 = v65;
  *((void *)&v71 + 1) = v14;
  uint64_t v15 = (a2 >> 49) & 0x3FFF;
  if (!(v14 | v65))
  {
LABEL_78:
    if ((~a4 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((~a2 & 0x7C00000000000000) == 0)
    {
      if ((~a2 & 0x7E00000000000000) == 0) {
        my_fpsf |= 1u;
      }
      return v71;
    }
    uint64_t v29 = a4 & 0x7C00000000000000;
    if (v13 == 0x7800000000000000 && v29 != 0x7C00000000000000 || !(v8 | v4)) {
      goto LABEL_94;
    }
    if (v29 == 0x7800000000000000 || v10) {
      return 0;
    }
LABEL_89:
    if (v29 == 0x7C00000000000000)
    {
      if ((~a4 & 0x7E00000000000000) == 0) {
        my_fpsf |= 1u;
      }
      return v4;
    }
    unint64_t v4 = a1;
    if (v5 == 0x7800000000000000) {
      return v4;
    }
LABEL_94:
    unint64_t v4 = 0;
    my_fpsf |= 1u;
    return v4;
  }
  if (!v10)
  {
    uint64_t v29 = a4 & 0x7C00000000000000;
    goto LABEL_89;
  }
  v70[0] = 0;
  v70[1] = 0;
  int v16 = v15 - v9;
  if ((int)v15 <= (int)v9)
  {
    if (v16 < -34) {
      return a1;
    }
    int8x16_t v30 = (uint64_t *)((char *)&__bid_power10_table_128 + 16 * (v9 - v15));
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    unint64_t v33 = HIDWORD(v32);
    unint64_t v34 = v32 * (unint64_t)HIDWORD(v4);
    unint64_t v35 = HIDWORD(v34) + HIDWORD(v32) * (unint64_t)HIDWORD(v4);
    unint64_t v36 = HIDWORD(v32) * (unint64_t)v4
        + v34
        + ((v32 * (unint64_t)v4) >> 32);
    unint64_t v37 = HIDWORD(v36);
    unint64_t v38 = (v32 * v4) | ((unint64_t)v36 << 32);
    unint64_t v39 = HIDWORD(*v30);
    unint64_t v40 = *v30 * (unint64_t)HIDWORD(v4);
    unint64_t v41 = *v30 * (unint64_t)v4;
    unint64_t v42 = HIDWORD(v40) + HIDWORD(*v30) * HIDWORD(v4);
    unint64_t v43 = HIDWORD(*v30) * v4 + v40 + HIDWORD(v41);
    unsigned long long v44 = __PAIR128__(v35, v38) + __PAIR128__(v37, v42 + HIDWORD(v43));
    unint64_t v45 = v32 * (unint64_t)HIDWORD(v8);
    unint64_t v46 = v32 * (unint64_t)v8;
    unint64_t v47 = v33 * (unint64_t)v8;
    unint64_t v48 = HIDWORD(v45) + v33 * (unint64_t)HIDWORD(v8);
    unint64_t v49 = v47 + v45 + HIDWORD(v46);
    unint64_t v50 = HIDWORD(v49);
    unint64_t v51 = v46 | ((unint64_t)v49 << 32);
    unint64_t v52 = v31 * (unint64_t)HIDWORD(v8);
    unint64_t v53 = v31 * (unint64_t)v8;
    unint64_t v54 = HIDWORD(v31) * (unint64_t)v8 + v52 + HIDWORD(v53);
    unint64_t v55 = v53 | ((unint64_t)v54 << 32);
    unsigned long long v56 = __PAIR128__(v48, v51)
        + __PAIR128__(v50, HIDWORD(v52) + v39 * (unint64_t)HIDWORD(v8) + HIDWORD(v54));
    unint64_t v57 = v38 + v42 + HIDWORD(v43) + v55;
    uint64_t v58 = __CFADD__(v38 + v42 + HIDWORD(v43), v55) + (void)v56;
    BOOL v59 = __CFADD__(__CFADD__(v38 + v42 + HIDWORD(v43), v55), (void)v56);
    uint64_t v60 = *((void *)&v44 + 1) + v58;
    uint64_t v61 = __CFADD__(*((void *)&v44 + 1), v58) || (unint64_t)v59;
    if (!v60
      && *((void *)&v56 + 1) == v61 << 63 >> 63
      && (*((void *)&v63 + 1) = v14, *(void *)&v63 = v71, unint64_t v62 = v63 >> 63, v57 <= v62))
    {
      unint64_t v66 = v41 | ((unint64_t)v43 << 32);
      if (v57 != v62 || (unint64_t v4 = a1, v66 < 2 * (uint64_t)v71))
      {
        long long v69 = 0uLL;
        bid___div_128_by_128_1125(v70, (unint64_t *)&v69, v71, *((unint64_t *)&v71 + 1), v66, v57);
        unint64_t v67 = v69 >> 63;
        if (v67 > v57) {
          return __PAIR128__(v57, v66) - v69;
        }
        unint64_t v68 = 2 * v69;
        if (v67 == v57 && v68 > v66) {
          return __PAIR128__(v57, v66) - v69;
        }
        if (v67 == v57 && v68 == v66 && (v70[0] & 1) != 0) {
          return __PAIR128__(v57, v66) - v69;
        }
        return v69;
      }
    }
    else
    {
      return a1;
    }
  }
  else
  {
    if (v8) {
      int v17 = 38;
    }
    else {
      int v17 = 34;
    }
    do
    {
      uint64_t v18 = ((unint64_t)COERCE_UNSIGNED_INT((float)v65 + (float)((float)(unint64_t)v14
                                                                                       * 1.8447e19)) >> 23)
          - 127;
      int v19 = v17 - __bid_estimate_decimal_digits[v18];
      BOOL v20 = (unint64_t *)((char *)&__bid_power10_index_binexp_128 + 16 * v18);
      unint64_t v21 = v20[1];
      if ((uint64_t)(v14 - v21) > 0 || v14 == v21 && v65 >= *v20) {
        --v19;
      }
      if (v16 >= v19) {
        int v22 = v19;
      }
      else {
        int v22 = v16;
      }
      unint64_t v23 = (uint64_t *)((char *)&__bid_power10_table_128 + 16 * v22);
      uint64_t v24 = *v23;
      unint64_t v25 = *v23 * (unint64_t)HIDWORD(v65);
      unint64_t v26 = HIDWORD(v24) * (unint64_t)v65
          + v25
          + ((v24 * (unint64_t)v65) >> 32);
      bid___div_128_by_128_1125(v70, (unint64_t *)&v71, (*v23 * v65) | ((unint64_t)v26 << 32), v24 * v14 + v23[1] * v65 + HIDWORD(v24) * (unint64_t)HIDWORD(v65) + HIDWORD(v25) + HIDWORD(v26), v4, v8);
      uint64_t v14 = *((void *)&v71 + 1);
      unint64_t v65 = v71;
      if (v71 == 0) {
        return v71;
      }
      if (v16 >= v19) {
        v16 -= v19;
      }
      else {
        int v16 = 0;
      }
    }
    while (v16 >= 1);
    unint64_t v27 = v71 >> 63;
    if (v27 > v8) {
      return __PAIR128__(v8 - *((void *)&v71 + 1), v4) - v71;
    }
    unint64_t v28 = 2 * v71;
    if (v27 == v8 && v28 > v4) {
      return __PAIR128__(v8 - *((void *)&v71 + 1), v4) - v71;
    }
    if (v27 == v8 && v28 == v4 && (v70[0] & 1) != 0) {
      return __PAIR128__(v8 - *((void *)&v71 + 1), v4) - v71;
    }
    return v71;
  }
  return v4;
}

unint64_t __bid128_round_integral_exact(unint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  if ((~a2 & 0x7800000000000000) != 0)
  {
    if ((~a2 & 0x6000000000000000) == 0)
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      uint64_t v6 = 4 * a2;
LABEL_18:
      unint64_t v7 = a2 & 0x8000000000000000;
      unint64_t v8 = v6 & 0x7FFE000000000000;
      if (!(v5 | v4)) {
        return 0;
      }
      switch(a3)
      {
        case 0:
        case 4:
          if (v8 <= 0x2FFA000000000000) {
            goto LABEL_28;
          }
          goto LABEL_30;
        case 1:
          if (v8 >= 0x2FFC000000000001) {
            goto LABEL_30;
          }
LABEL_24:
          uint64_t result = a2 < 0;
          goto LABEL_29;
        case 2:
          if (v8 >= 0x2FFC000000000001) {
            goto LABEL_30;
          }
LABEL_26:
          uint64_t result = a2 >= 0;
          goto LABEL_29;
        case 3:
          if (v8 >= 0x2FFC000000000001) {
            goto LABEL_30;
          }
LABEL_28:
          uint64_t result = 0;
LABEL_29:
          *a4 |= 0x20u;
          return result;
        default:
LABEL_30:
          unint64_t v9 = HIDWORD(v5);
          if (v5 >> 53) {
            unint64_t v10 = HIDWORD(v5);
          }
          else {
            unint64_t v10 = v5;
          }
          if (v5 >> 53) {
            int v11 = -990;
          }
          else {
            int v11 = -1022;
          }
          if (v4) {
            unint64_t v10 = v4;
          }
          unint64_t v12 = (COERCE_UNSIGNED_INT64((double)v10) >> 52) & 0x7FF;
          if (v4) {
            int v11 = -958;
          }
          uint64_t v13 = (v12 + v11 - 1);
          int v14 = *((_DWORD *)&__bid_nr_digits + 8 * v13);
          if (!v14)
          {
            uint64_t v15 = (char *)&__bid_nr_digits + 32 * v13;
            int v14 = *((_DWORD *)v15 + 6);
            unint64_t v16 = *((void *)v15 + 1);
            if (v4 > v16 || v4 == v16 && v5 >= *((void *)&__bid_nr_digits + 4 * v13 + 2)) {
              ++v14;
            }
          }
          unint64_t v17 = v8 >> 49;
          if (v17 >> 5 > 0xC0) {
            return result;
          }
          break;
      }
      int v18 = v17 - 6176;
      switch(a3)
      {
        case 0:
          if (v14 + v18 < 0) {
            goto LABEL_28;
          }
          if (v17 < 0x180D)
          {
            BOOL v20 = (uint64_t *)&__bid_midpoint128[(6156 - v17)];
            v4 += v20[1];
            uint64_t v19 = (6175 - v17);
          }
          else
          {
            uint64_t v19 = (6175 - v17);
            BOOL v20 = &__bid_midpoint64[v19];
          }
          uint64_t v120 = *v20;
          BOOL v121 = __CFADD__(v120, v5);
          unint64_t v122 = v120 + v5;
          if (v121) {
            unint64_t v123 = v4 + 1;
          }
          else {
            unint64_t v123 = v4;
          }
          unint64_t v124 = HIDWORD(v122);
          unsigned int v125 = v122;
          unint64_t v126 = __bid_ten2mk128[2 * v19];
          unint64_t v127 = __bid_ten2mk128[2 * v19 + 1];
          unint64_t v128 = HIDWORD(v122) * (unint64_t)v127;
          unint64_t v129 = HIDWORD(v128) + HIDWORD(v122) * (unint64_t)HIDWORD(v127);
          unint64_t v130 = v122 * (unint64_t)HIDWORD(v127)
               + v128
               + ((v122 * (unint64_t)v127) >> 32);
          unint64_t v131 = (v122 * v127) | ((unint64_t)v130 << 32);
          unint64_t v132 = v126 * (unint64_t)HIDWORD(v122);
          unint64_t v133 = v126 * (unint64_t)v122;
          unint64_t v134 = HIDWORD(v126) * (unint64_t)v125 + v132 + HIDWORD(v133);
          unint64_t v135 = v133 | ((unint64_t)v134 << 32);
          unint64_t v137 = v131 + HIDWORD(v132) + HIDWORD(v126) * (unint64_t)v124 + HIDWORD(v134);
          uint64_t v136 = (__PAIR128__(v129, v131)
                + __PAIR128__(HIDWORD(v130), HIDWORD(v132) + HIDWORD(v126) * (unint64_t)v124 + HIDWORD(v134))) >> 64;
          unint64_t v138 = HIDWORD(v123);
          unsigned int v139 = v123;
          unint64_t v140 = HIDWORD(v123) * (unint64_t)v127;
          unint64_t v141 = HIDWORD(v140) + HIDWORD(v123) * (unint64_t)HIDWORD(v127);
          unint64_t v142 = v123 * (unint64_t)HIDWORD(v127)
               + v140
               + ((v123 * (unint64_t)v127) >> 32);
          unint64_t v143 = HIDWORD(v142);
          unint64_t v144 = (v123 * v127) | ((unint64_t)v142 << 32);
          unint64_t v145 = HIDWORD(v123) * (unint64_t)v126;
          unint64_t v146 = v123 * (unint64_t)v126;
          unint64_t v147 = HIDWORD(v145) + v138 * (unint64_t)HIDWORD(v126);
          unint64_t v148 = v139 * (unint64_t)HIDWORD(v126) + v145 + HIDWORD(v146);
          unint64_t v149 = v146 | ((unint64_t)v148 << 32);
          unint64_t v151 = v144 + v147 + HIDWORD(v148);
          uint64_t v150 = (__PAIR128__(v141, v144) + __PAIR128__(v143, v147 + HIDWORD(v148))) >> 64;
          unsigned long long v152 = __PAIR128__(v151, v149) + v137;
          BOOL v153 = __CFADD__(__CFADD__(v149, v137), v151);
          uint64_t result = v136 + *((void *)&v152 + 1);
          uint64_t v154 = __CFADD__(v136, *((void *)&v152 + 1)) || v153;
          unint64_t v155 = v150 + v154;
          if (v17 < 0x181D)
          {
            int v197 = __bid_shiftright128[v19];
            if (v17 >> 1 < 0xC05)
            {
              unint64_t v206 = v155 >> v197;
              unint64_t v207 = __bid_maskhigh128[v19] & v155;
              if ((v206 & 1) != 0
                && !v207
                && !result
                && ((unint64_t)v152 < v127 || (void)v152 == v127 && v135 < v126))
              {
                --v206;
              }
              unint64_t v208 = __bid_onehalf128[v19];
              if (v207 <= v208 && (v207 != v208 || !((unint64_t)v152 | v135 | result))
                || v207 != v208
                || result
                || (BOOL v156 = (void)v152 == v127, (unint64_t)v152 > v127))
              {
                uint64_t result = v206;
                goto LABEL_229;
              }
              uint64_t result = v206;
            }
            else
            {
              unint64_t v198 = (v155 << -(char)v197) | (result >> v197);
              unint64_t v199 = __bid_maskhigh128[v19] & result;
              if ((v198 & 1) != 0 && !v199 && ((unint64_t)v152 < v127 || (void)v152 == v127 && v135 < v126)) {
                --v198;
              }
              unint64_t v200 = __bid_onehalf128[v19];
              if (v199 <= v200 && (v199 != v200 || !((unint64_t)v152 | v135))
                || v199 != v200
                || (BOOL v156 = (void)v152 == v127, (unint64_t)v152 > v127))
              {
                uint64_t result = v198;
                goto LABEL_229;
              }
              uint64_t result = v198;
            }
          }
          else
          {
            if ((result & 1) != 0 && ((unint64_t)v152 < v127 || (void)v152 == v127 && v135 < v126)) {
              --result;
            }
            if ((unint64_t)v152 <= 0x8000000000000000 && (!v135 || (void)v152 != 0x8000000000000000)) {
              goto LABEL_229;
            }
            BOOL v156 = ((unint64_t)v152 ^ 0x8000000000000000) == v127;
            if (((unint64_t)v152 ^ 0x8000000000000000) > v127) {
              goto LABEL_229;
            }
          }
          if (!v156 || v135 < v126) {
            return result;
          }
LABEL_229:
          *a4 |= 0x20u;
          return result;
        case 1:
          if (v14 + v18 < 1) {
            goto LABEL_24;
          }
          unsigned int v21 = v5;
          uint64_t v22 = (6175 - v17);
          unint64_t v23 = __bid_ten2mk128[2 * v22];
          unint64_t v24 = __bid_ten2mk128[2 * v22 + 1];
          unint64_t v25 = v24 * (unint64_t)HIDWORD(v5);
          unint64_t v26 = HIDWORD(v25) + HIDWORD(v24) * (unint64_t)HIDWORD(v5);
          unint64_t v27 = HIDWORD(v24) * (unint64_t)v5
              + v25
              + ((v24 * (unint64_t)v5) >> 32);
          unint64_t v28 = (v24 * v5) | ((unint64_t)v27 << 32);
          unint64_t v29 = v23 * (unint64_t)HIDWORD(v5);
          unint64_t v30 = v23 * (unint64_t)v5;
          unint64_t v31 = HIDWORD(v23) * (unint64_t)v21 + v29 + HIDWORD(v30);
          unint64_t v32 = v30 | ((unint64_t)v31 << 32);
          unint64_t v34 = v28 + HIDWORD(v29) + HIDWORD(v23) * (unint64_t)v9 + HIDWORD(v31);
          uint64_t v33 = (__PAIR128__(v26, v28)
               + __PAIR128__(HIDWORD(v27), HIDWORD(v29) + HIDWORD(v23) * (unint64_t)v9 + HIDWORD(v31))) >> 64;
          unint64_t v35 = HIDWORD(v4);
          unsigned int v36 = v4;
          unint64_t v37 = v24 * (unint64_t)HIDWORD(v4);
          unint64_t v38 = HIDWORD(v37) + HIDWORD(v24) * (unint64_t)HIDWORD(v4);
          unint64_t v39 = HIDWORD(v24) * (unint64_t)v4
              + v37
              + ((v24 * (unint64_t)v4) >> 32);
          unint64_t v40 = HIDWORD(v39);
          unint64_t v41 = (v24 * v4) | ((unint64_t)v39 << 32);
          unint64_t v42 = v23 * (unint64_t)HIDWORD(v4);
          unint64_t v43 = v23 * (unint64_t)v4;
          unint64_t v44 = HIDWORD(v42) + HIDWORD(v23) * (unint64_t)v35;
          unint64_t v45 = HIDWORD(v23) * (unint64_t)v36 + v42 + HIDWORD(v43);
          unint64_t v46 = v43 | ((unint64_t)v45 << 32);
          unint64_t v48 = v41 + v44 + HIDWORD(v45);
          uint64_t v47 = (__PAIR128__(v38, v41) + __PAIR128__(v40, v44 + HIDWORD(v45))) >> 64;
          unsigned long long v49 = __PAIR128__(v48, v34) + v46;
          BOOL v50 = __CFADD__(__CFADD__(v34, v46), v48);
          uint64_t result = v33 + *((void *)&v49 + 1);
          uint64_t v51 = __CFADD__(v33, *((void *)&v49 + 1)) || v50;
          unint64_t v52 = v47 + v51;
          if (v17 < 0x181D)
          {
            int v157 = __bid_shiftright128[v22];
            if (v17 >> 1 < 0xC05)
            {
              unint64_t v205 = v52 >> v157;
              if ((__bid_maskhigh128[v22] & v52) != 0 || result || (unint64_t)v49 > v24) {
                goto LABEL_172;
              }
              if ((void)v49 != v24) {
                return v205;
              }
              uint64_t result = v52 >> v157;
              if (v32 >= v23)
              {
LABEL_172:
                *a4 |= 0x20u;
                if (v7) {
                  return v205 + 1;
                }
                else {
                  return v52 >> v157;
                }
              }
            }
            else
            {
              unint64_t v158 = (v52 << -(char)v157) | (result >> v157);
              if ((__bid_maskhigh128[v22] & result) != 0 || (unint64_t)v49 > v24) {
                goto LABEL_116;
              }
              if ((void)v49 != v24) {
                return v158;
              }
              uint64_t result = v158;
              if (v32 >= v23)
              {
LABEL_116:
                *a4 |= 0x20u;
                if (v7) {
                  return v158 + 1;
                }
                else {
                  return v158;
                }
              }
            }
          }
          else if ((unint64_t)v49 > v24 || (void)v49 == v24 && v32 >= v23)
          {
            *a4 |= 0x20u;
            if (v7) {
              ++result;
            }
          }
          return result;
        case 2:
          if (v14 + v18 < 1) {
            goto LABEL_26;
          }
          unsigned int v53 = v5;
          uint64_t v54 = (6175 - v17);
          unint64_t v55 = __bid_ten2mk128[2 * v54];
          unint64_t v56 = __bid_ten2mk128[2 * v54 + 1];
          unint64_t v57 = v56 * (unint64_t)HIDWORD(v5);
          unint64_t v58 = HIDWORD(v57) + HIDWORD(v56) * (unint64_t)HIDWORD(v5);
          unint64_t v59 = HIDWORD(v56) * (unint64_t)v5
              + v57
              + ((v56 * (unint64_t)v5) >> 32);
          unint64_t v60 = (v56 * v5) | ((unint64_t)v59 << 32);
          unint64_t v61 = v55 * (unint64_t)HIDWORD(v5);
          unint64_t v62 = v55 * (unint64_t)v5;
          unint64_t v63 = HIDWORD(v55) * (unint64_t)v53 + v61 + HIDWORD(v62);
          unint64_t v64 = v62 | ((unint64_t)v63 << 32);
          unint64_t v66 = v60 + HIDWORD(v61) + HIDWORD(v55) * (unint64_t)v9 + HIDWORD(v63);
          uint64_t v65 = (__PAIR128__(v58, v60)
               + __PAIR128__(HIDWORD(v59), HIDWORD(v61) + HIDWORD(v55) * (unint64_t)v9 + HIDWORD(v63))) >> 64;
          unint64_t v67 = HIDWORD(v4);
          unsigned int v68 = v4;
          unint64_t v69 = v56 * (unint64_t)HIDWORD(v4);
          unint64_t v70 = HIDWORD(v69) + HIDWORD(v56) * (unint64_t)HIDWORD(v4);
          unint64_t v71 = HIDWORD(v56) * (unint64_t)v4
              + v69
              + ((v56 * (unint64_t)v4) >> 32);
          unint64_t v72 = HIDWORD(v71);
          unint64_t v73 = (v56 * v4) | ((unint64_t)v71 << 32);
          unint64_t v74 = v55 * (unint64_t)HIDWORD(v4);
          unint64_t v75 = v55 * (unint64_t)v4;
          unint64_t v76 = HIDWORD(v74) + HIDWORD(v55) * (unint64_t)v67;
          unint64_t v77 = HIDWORD(v55) * (unint64_t)v68 + v74 + HIDWORD(v75);
          unint64_t v78 = v75 | ((unint64_t)v77 << 32);
          unint64_t v80 = v73 + v76 + HIDWORD(v77);
          uint64_t v79 = (__PAIR128__(v70, v73) + __PAIR128__(v72, v76 + HIDWORD(v77))) >> 64;
          unsigned long long v81 = __PAIR128__(v80, v66) + v78;
          BOOL v82 = __CFADD__(__CFADD__(v66, v78), v80);
          uint64_t result = v65 + *((void *)&v81 + 1);
          uint64_t v83 = __CFADD__(v65, *((void *)&v81 + 1)) || v82;
          unint64_t v84 = v79 + v83;
          if (v17 < 0x181D)
          {
            int v159 = __bid_shiftright128[v54];
            if (v17 >> 1 < 0xC05)
            {
              unint64_t v205 = v84 >> v159;
              if ((__bid_maskhigh128[v54] & v84) == 0 && !result && (unint64_t)v81 <= v56)
              {
                if ((void)v81 != v56) {
                  return v205;
                }
                uint64_t result = v84 >> v159;
                if (v64 < v55) {
                  return result;
                }
              }
              *a4 |= 0x20u;
              if (v7) {
                return v84 >> v159;
              }
              else {
                return v205 + 1;
              }
            }
            else
            {
              unint64_t v158 = (v84 << -(char)v159) | (result >> v159);
              if ((__bid_maskhigh128[v54] & result) == 0 && (unint64_t)v81 <= v56)
              {
                if ((void)v81 != v56) {
                  return v158;
                }
                uint64_t result = v158;
                if (v64 < v55) {
                  return result;
                }
              }
              *a4 |= 0x20u;
              if (v7) {
                return v158;
              }
              else {
                return v158 + 1;
              }
            }
          }
          else if ((unint64_t)v81 > v56 || (void)v81 == v56 && v64 >= v55)
          {
            *a4 |= 0x20u;
            if (!v7) {
              ++result;
            }
          }
          return result;
        case 3:
          if (v14 + v18 < 1) {
            goto LABEL_28;
          }
          unsigned int v85 = v5;
          uint64_t v86 = (6175 - v17);
          unint64_t v87 = __bid_ten2mk128[2 * v86];
          unint64_t v88 = __bid_ten2mk128[2 * v86 + 1];
          unint64_t v89 = v88 * (unint64_t)HIDWORD(v5);
          unint64_t v90 = HIDWORD(v89) + HIDWORD(v88) * (unint64_t)HIDWORD(v5);
          unint64_t v91 = HIDWORD(v88) * (unint64_t)v5
              + v89
              + ((v88 * (unint64_t)v5) >> 32);
          unint64_t v92 = (v88 * v5) | ((unint64_t)v91 << 32);
          unint64_t v93 = v87 * (unint64_t)HIDWORD(v5);
          unint64_t v94 = v87 * (unint64_t)v5;
          unint64_t v95 = HIDWORD(v87) * (unint64_t)v85 + v93 + HIDWORD(v94);
          unint64_t v96 = v94 | ((unint64_t)v95 << 32);
          unint64_t v98 = v92 + HIDWORD(v93) + HIDWORD(v87) * (unint64_t)v9 + HIDWORD(v95);
          uint64_t v97 = (__PAIR128__(v90, v92)
               + __PAIR128__(HIDWORD(v91), HIDWORD(v93) + HIDWORD(v87) * (unint64_t)v9 + HIDWORD(v95))) >> 64;
          unint64_t v99 = HIDWORD(v4);
          unsigned int v100 = v4;
          unint64_t v101 = v88 * (unint64_t)HIDWORD(v4);
          unint64_t v102 = HIDWORD(v101) + HIDWORD(v88) * (unint64_t)HIDWORD(v4);
          unint64_t v103 = HIDWORD(v88) * (unint64_t)v4
               + v101
               + ((v88 * (unint64_t)v4) >> 32);
          unint64_t v104 = HIDWORD(v103);
          unint64_t v105 = (v88 * v4) | ((unint64_t)v103 << 32);
          unint64_t v106 = v87 * (unint64_t)HIDWORD(v4);
          unint64_t v107 = v87 * (unint64_t)v4;
          unint64_t v108 = HIDWORD(v106) + HIDWORD(v87) * (unint64_t)v99;
          unint64_t v109 = HIDWORD(v87) * (unint64_t)v100 + v106 + HIDWORD(v107);
          unint64_t v110 = v107 | ((unint64_t)v109 << 32);
          unint64_t v112 = v105 + v108 + HIDWORD(v109);
          uint64_t v111 = (__PAIR128__(v102, v105) + __PAIR128__(v104, v108 + HIDWORD(v109))) >> 64;
          unsigned long long v113 = __PAIR128__(v112, v98) + v110;
          BOOL v114 = __CFADD__(__CFADD__(v98, v110), v112);
          uint64_t result = v97 + *((void *)&v113 + 1);
          uint64_t v115 = __CFADD__(v97, *((void *)&v113 + 1)) || v114;
          unint64_t v116 = v111 + v115;
          if (v17 < 0x181D)
          {
            int v160 = __bid_shiftright128[v86];
            if (v17 >> 1 < 0xC05)
            {
              if ((__bid_maskhigh128[v86] & v116) != 0
                || result
                || (BOOL v117 = (void)v113 == v88, (unint64_t)v113 > v88))
              {
                uint64_t result = v116 >> v160;
                goto LABEL_224;
              }
              uint64_t result = v116 >> v160;
            }
            else
            {
              unint64_t v161 = (v116 << -(char)v160) | (result >> v160);
              if ((__bid_maskhigh128[v86] & result) != 0 || (BOOL v117 = (void)v113 == v88, (unint64_t)v113 > v88))
              {
                uint64_t result = v161;
                goto LABEL_224;
              }
              uint64_t result = v161;
            }
          }
          else
          {
            BOOL v117 = (void)v113 == v88;
            if ((unint64_t)v113 > v88) {
              goto LABEL_224;
            }
          }
          if (!v117 || v96 < v87) {
            return result;
          }
LABEL_224:
          *a4 |= 0x20u;
          return result;
        case 4:
          if (v14 + v18 < 0) {
            goto LABEL_28;
          }
          if (v17 < 0x180D)
          {
            unint64_t v119 = (uint64_t *)&__bid_midpoint128[(6156 - v17)];
            v4 += v119[1];
            uint64_t v118 = (6175 - v17);
          }
          else
          {
            uint64_t v118 = (6175 - v17);
            unint64_t v119 = &__bid_midpoint64[v118];
          }
          uint64_t v162 = *v119;
          BOOL v121 = __CFADD__(v162, v5);
          unint64_t v163 = v162 + v5;
          if (v121) {
            unint64_t v164 = v4 + 1;
          }
          else {
            unint64_t v164 = v4;
          }
          unint64_t v165 = HIDWORD(v163);
          unsigned int v166 = v163;
          unint64_t v167 = __bid_ten2mk128[2 * v118];
          unint64_t v168 = __bid_ten2mk128[2 * v118 + 1];
          unint64_t v169 = HIDWORD(v163) * (unint64_t)v168;
          unint64_t v170 = HIDWORD(v169) + HIDWORD(v163) * (unint64_t)HIDWORD(v168);
          unint64_t v171 = v163 * (unint64_t)HIDWORD(v168)
               + v169
               + ((v163 * (unint64_t)v168) >> 32);
          unint64_t v172 = (v163 * v168) | ((unint64_t)v171 << 32);
          unint64_t v173 = v167 * (unint64_t)HIDWORD(v163);
          unint64_t v174 = v167 * (unint64_t)v163;
          unint64_t v175 = HIDWORD(v167) * (unint64_t)v166 + v173 + HIDWORD(v174);
          unint64_t v176 = v174 | ((unint64_t)v175 << 32);
          unsigned long long v177 = __PAIR128__(v170, v172)
               + __PAIR128__(HIDWORD(v171), HIDWORD(v173) + HIDWORD(v167) * (unint64_t)v165 + HIDWORD(v175));
          unint64_t v178 = HIDWORD(v164);
          unsigned int v179 = v164;
          unint64_t v180 = HIDWORD(v164) * (unint64_t)v168;
          unint64_t v181 = HIDWORD(v180) + HIDWORD(v164) * (unint64_t)HIDWORD(v168);
          unint64_t v182 = v164 * (unint64_t)HIDWORD(v168)
               + v180
               + ((v164 * (unint64_t)v168) >> 32);
          unint64_t v183 = HIDWORD(v182);
          unint64_t v184 = (v164 * v168) | ((unint64_t)v182 << 32);
          unint64_t v185 = HIDWORD(v164) * (unint64_t)v167;
          unint64_t v186 = v164 * (unint64_t)v167;
          unint64_t v187 = HIDWORD(v185) + v178 * (unint64_t)HIDWORD(v167);
          unint64_t v188 = v179 * (unint64_t)HIDWORD(v167) + v185 + HIDWORD(v186);
          unint64_t v189 = v186 | ((unint64_t)v188 << 32);
          unint64_t v191 = v184 + v187 + HIDWORD(v188);
          uint64_t v190 = (__PAIR128__(v181, v184) + __PAIR128__(v183, v187 + HIDWORD(v188))) >> 64;
          unsigned long long v192 = __PAIR128__(v191, v189) + (unint64_t)v177;
          BOOL v193 = __CFADD__(__CFADD__(v189, (void)v177), v191);
          uint64_t result = *((void *)&v177 + 1) + *((void *)&v192 + 1);
          uint64_t v194 = __CFADD__(*((void *)&v177 + 1), *((void *)&v192 + 1)) || v193;
          unint64_t v195 = v190 + v194;
          if (v17 < 0x181D)
          {
            int v201 = __bid_shiftright128[v118];
            if (v17 >> 1 < 0xC05)
            {
              unint64_t v209 = v195 >> v201;
              unint64_t v210 = __bid_maskhigh128[v118] & v195;
              unint64_t v211 = __bid_onehalf128[v118];
              if (v210 <= v211 && (v210 != v211 || !((unint64_t)v192 | v176 | result))
                || v210 != v211
                || result
                || (BOOL v196 = (void)v192 == v168, (unint64_t)v192 > v168))
              {
                uint64_t result = v209;
                goto LABEL_231;
              }
              uint64_t result = v209;
            }
            else
            {
              unint64_t v202 = (v195 << -(char)v201) | (result >> v201);
              unint64_t v203 = __bid_maskhigh128[v118] & result;
              unint64_t v204 = __bid_onehalf128[v118];
              if (v203 <= v204 && (v203 != v204 || !((unint64_t)v192 | v176))
                || v203 != v204
                || (BOOL v196 = (void)v192 == v168, (unint64_t)v192 > v168))
              {
                uint64_t result = v202;
                goto LABEL_231;
              }
              uint64_t result = v202;
            }
          }
          else
          {
            if ((unint64_t)v192 <= 0x8000000000000000 && (!v176 || (void)v192 != 0x8000000000000000)) {
              goto LABEL_231;
            }
            BOOL v196 = ((unint64_t)v192 ^ 0x8000000000000000) == v168;
            if (((unint64_t)v192 ^ 0x8000000000000000) > v168) {
              goto LABEL_231;
            }
          }
          if (!v196 || v176 < v167) {
            return result;
          }
LABEL_231:
          *a4 |= 0x20u;
          return result;
        default:
          return 0xBADDBADDBADDBADDLL;
      }
    }
    unint64_t v4 = a2 & 0x1FFFFFFFFFFFFLL;
    if ((a2 & 0x1FFFFFFFFFFFFuLL) <= 0x1ED09BEAD87C0)
    {
      unint64_t v5 = result;
      if (result < 0x378D8E6400000000)
      {
LABEL_17:
        uint64_t v6 = a2;
        goto LABEL_18;
      }
      uint64_t v6 = a2;
      if (v4 != 0x1ED09BEAD87C0) {
        goto LABEL_18;
      }
    }
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    goto LABEL_17;
  }
  if ((~a2 & 0x7C00000000000000) != 0) {
    return 0;
  }
  if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
    || result >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
  {
    uint64_t result = 0;
    a2 &= 0xFFFFC00000000000;
  }
  if ((~a2 & 0x7E00000000000000) == 0) {
    *a4 |= 1u;
  }
  return result;
}

unint64_t __bid128_round_integral_nearest_even(unint64_t result, uint64_t a2, _DWORD *a3)
{
  if ((~a2 & 0x7800000000000000) == 0)
  {
    if ((~a2 & 0x7C00000000000000) != 0) {
      return 0;
    }
    if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || result >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      uint64_t result = 0;
      a2 &= 0xFFFFC00000000000;
    }
    if ((~a2 & 0x7E00000000000000) == 0) {
      *a3 |= 1u;
    }
    return result;
  }
  if ((~a2 & 0x6000000000000000) == 0)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 4 * a2;
    goto LABEL_18;
  }
  unint64_t v3 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0)
  {
LABEL_16:
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    goto LABEL_17;
  }
  unint64_t v4 = result;
  if (result >= 0x378D8E6400000000)
  {
    uint64_t v5 = a2;
    if (v3 != 0x1ED09BEAD87C0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v5 = a2;
LABEL_18:
  unint64_t v6 = v5 & 0x7FFE000000000000;
  if (!(v4 | v3)) {
    return 0;
  }
  if (v6 <= 0x2FFA000000000000) {
    return 0;
  }
  unint64_t v7 = HIDWORD(v4);
  if (v4 >> 53)
  {
    int v8 = -990;
  }
  else
  {
    unint64_t v7 = v4;
    int v8 = -1022;
  }
  if (v3) {
    unint64_t v7 = v3;
  }
  unint64_t v9 = (COERCE_UNSIGNED_INT64((double)v7) >> 52) & 0x7FF;
  if (v3) {
    int v8 = -958;
  }
  uint64_t v10 = (v9 + v8 - 1);
  int v11 = *((_DWORD *)&__bid_nr_digits + 8 * v10);
  if (!v11)
  {
    unint64_t v12 = (char *)&__bid_nr_digits + 32 * v10;
    int v11 = *((_DWORD *)v12 + 6);
    unint64_t v13 = *((void *)v12 + 1);
    if (v3 > v13 || v3 == v13 && v4 >= *((void *)&__bid_nr_digits + 4 * v10 + 2)) {
      ++v11;
    }
  }
  unint64_t v14 = v6 >> 49;
  if (v14 >> 5 <= 0xC0)
  {
    if ((int)v14 + v11 - 6176 < 0) {
      return 0;
    }
    if (v14 < 0x180D)
    {
      unint64_t v16 = (uint64_t *)&__bid_midpoint128[(6156 - v14)];
      v3 += v16[1];
      uint64_t v15 = (6175 - v14);
    }
    else
    {
      uint64_t v15 = (6175 - v14);
      unint64_t v16 = &__bid_midpoint64[v15];
    }
    uint64_t v17 = *v16;
    BOOL v18 = __CFADD__(v17, v4);
    unint64_t v19 = v17 + v4;
    if (v18) {
      unint64_t v20 = v3 + 1;
    }
    else {
      unint64_t v20 = v3;
    }
    unint64_t v21 = HIDWORD(v19);
    unsigned int v22 = v19;
    unint64_t v24 = __bid_ten2mk128[2 * v15];
    unint64_t v23 = __bid_ten2mk128[2 * v15 + 1];
    unint64_t v25 = HIDWORD(v19) * (unint64_t)v23;
    unint64_t v26 = HIDWORD(v25) + HIDWORD(v19) * (unint64_t)HIDWORD(v23);
    unint64_t v27 = v19 * (unint64_t)HIDWORD(v23)
        + v25
        + ((v19 * (unint64_t)v23) >> 32);
    unint64_t v28 = (v19 * v23) | ((unint64_t)v27 << 32);
    unint64_t v29 = v24 * (unint64_t)HIDWORD(v19);
    unint64_t v30 = v24 * (unint64_t)v19;
    unint64_t v31 = HIDWORD(v24) * (unint64_t)v22 + v29 + HIDWORD(v30);
    unint64_t v32 = v30 | ((unint64_t)v31 << 32);
    unsigned long long v33 = __PAIR128__(v26, v28)
        + __PAIR128__(HIDWORD(v27), HIDWORD(v29) + HIDWORD(v24) * (unint64_t)v21 + HIDWORD(v31));
    unint64_t v34 = HIDWORD(v20);
    unsigned int v35 = v20;
    unint64_t v36 = HIDWORD(v20) * (unint64_t)v23;
    unint64_t v37 = HIDWORD(v36) + HIDWORD(v20) * (unint64_t)HIDWORD(v23);
    unint64_t v38 = v20 * (unint64_t)HIDWORD(v23)
        + v36
        + ((v20 * (unint64_t)v23) >> 32);
    unint64_t v39 = HIDWORD(v38);
    unint64_t v40 = (v20 * v23) | ((unint64_t)v38 << 32);
    unint64_t v41 = HIDWORD(v20) * (unint64_t)v24;
    unint64_t v42 = v20 * (unint64_t)v24;
    unint64_t v43 = HIDWORD(v41) + v34 * (unint64_t)HIDWORD(v24);
    unint64_t v44 = v35 * (unint64_t)HIDWORD(v24) + v41 + HIDWORD(v42);
    unint64_t v45 = v42 | ((unint64_t)v44 << 32);
    unsigned long long v46 = __PAIR128__(v37, v40) + __PAIR128__(v39, v43 + HIDWORD(v44));
    unint64_t v47 = v45 + v33;
    BOOL v18 = __CFADD__(__CFADD__(v45, (void)v33), (void)v46);
    uint64_t v48 = __CFADD__(v45, (void)v33) + (void)v46;
    unsigned int v49 = v18;
    unint64_t v50 = *((void *)&v33 + 1) + v48;
    if (__CFADD__(*((void *)&v33 + 1), v48)) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v49;
    }
    unint64_t v52 = *((void *)&v46 + 1) + v51;
    if (v14 < 0x181D)
    {
      int v53 = __bid_shiftright128[v15];
      if (v14 >> 1 < 0xC05)
      {
        uint64_t result = v52 >> v53;
        if (((v52 >> v53) & 1) != 0
          && (__bid_maskhigh128[v15] & v52) == 0
          && !v50
          && (v47 < v23 || v47 == v23 && v32 < v24))
        {
          --result;
        }
      }
      else
      {
        unint64_t v54 = v52 << -(char)v53;
        unint64_t v55 = v50 >> v53;
        uint64_t result = v54 | v55;
        if (((v54 | v55) & 1) != 0
          && (__bid_maskhigh128[v15] & v50) == 0
          && (v47 < v23 || v47 == v23 && v32 < v24))
        {
          --result;
        }
      }
    }
    else if ((v50 & 1) != 0 && (v47 < v23 || v47 == v23 && v32 < v24))
    {
      return v50 - 1;
    }
    else
    {
      return v50;
    }
  }
  return result;
}

unint64_t __bid128_round_integral_negative(unint64_t result, uint64_t a2, _DWORD *a3)
{
  if ((~a2 & 0x7800000000000000) == 0)
  {
    if ((~a2 & 0x7C00000000000000) != 0) {
      return 0;
    }
    if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || result >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      uint64_t result = 0;
      a2 &= 0xFFFFC00000000000;
    }
    if ((~a2 & 0x7E00000000000000) == 0) {
      *a3 |= 1u;
    }
    return result;
  }
  if ((~a2 & 0x6000000000000000) == 0)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 4 * a2;
    goto LABEL_18;
  }
  unint64_t v3 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFuLL) <= 0x1ED09BEAD87C0)
  {
    if (result < 0x378D8E6400000000)
    {
      unint64_t v4 = result;
      goto LABEL_17;
    }
    unint64_t v4 = result;
    uint64_t v5 = a2;
    if (v3 != 0x1ED09BEAD87C0) {
      goto LABEL_18;
    }
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
LABEL_17:
  uint64_t v5 = a2;
LABEL_18:
  unint64_t v6 = a2 & 0x8000000000000000;
  unint64_t v7 = v5 & 0x7FFE000000000000;
  if (!(v4 | v3)) {
    return 0;
  }
  if (v7 <= 0x2FFC000000000000) {
    return a2 < 0;
  }
  unint64_t v8 = HIDWORD(v4);
  if (v4 >> 53) {
    unint64_t v9 = HIDWORD(v4);
  }
  else {
    unint64_t v9 = v4;
  }
  if (v4 >> 53) {
    int v10 = -990;
  }
  else {
    int v10 = -1022;
  }
  if (v3) {
    unint64_t v9 = v3;
  }
  unint64_t v11 = (COERCE_UNSIGNED_INT64((double)v9) >> 52) & 0x7FF;
  if (v3) {
    int v10 = -958;
  }
  uint64_t v12 = (v11 + v10 - 1);
  int v13 = *((_DWORD *)&__bid_nr_digits + 8 * v12);
  if (!v13)
  {
    unint64_t v14 = (char *)&__bid_nr_digits + 32 * v12;
    int v13 = *((_DWORD *)v14 + 6);
    unint64_t v15 = *((void *)v14 + 1);
    if (v3 > v15 || v3 == v15 && v4 >= *((void *)&__bid_nr_digits + 4 * v12 + 2)) {
      ++v13;
    }
  }
  unint64_t v16 = v7 >> 49;
  if ((v7 >> 49) >> 5 <= 0xC0)
  {
    if ((int)v16 + v13 - 6176 < 1) {
      return a2 < 0;
    }
    unsigned int v17 = v4;
    uint64_t v18 = (6175 - v16);
    unint64_t v19 = __bid_ten2mk128[2 * v18];
    unint64_t v20 = __bid_ten2mk128[2 * v18 + 1];
    unint64_t v21 = v20 * (unint64_t)HIDWORD(v4);
    unint64_t v22 = HIDWORD(v21) + HIDWORD(v20) * (unint64_t)HIDWORD(v4);
    unint64_t v23 = HIDWORD(v20) * (unint64_t)v4
        + v21
        + ((v20 * (unint64_t)v4) >> 32);
    unint64_t v24 = (v20 * v4) | ((unint64_t)v23 << 32);
    unint64_t v25 = v19 * (unint64_t)HIDWORD(v4);
    unint64_t v26 = v19 * (unint64_t)v4;
    unint64_t v27 = HIDWORD(v19) * (unint64_t)v17 + v25 + HIDWORD(v26);
    unint64_t v28 = v26 | ((unint64_t)v27 << 32);
    unint64_t v30 = v24 + HIDWORD(v25) + HIDWORD(v19) * (unint64_t)v8 + HIDWORD(v27);
    uint64_t v29 = (__PAIR128__(v22, v24)
         + __PAIR128__(HIDWORD(v23), HIDWORD(v25) + HIDWORD(v19) * (unint64_t)v8 + HIDWORD(v27))) >> 64;
    unint64_t v31 = HIDWORD(v3);
    unsigned int v32 = v3;
    unint64_t v33 = v20 * (unint64_t)HIDWORD(v3);
    unint64_t v34 = HIDWORD(v33) + HIDWORD(v20) * (unint64_t)HIDWORD(v3);
    unint64_t v35 = HIDWORD(v20) * (unint64_t)v3
        + v33
        + ((v20 * (unint64_t)v3) >> 32);
    unint64_t v36 = HIDWORD(v35);
    unint64_t v37 = (v20 * v3) | ((unint64_t)v35 << 32);
    unint64_t v38 = v19 * (unint64_t)HIDWORD(v3);
    unint64_t v39 = v19 * (unint64_t)v3;
    unint64_t v40 = HIDWORD(v38) + HIDWORD(v19) * (unint64_t)v31;
    unint64_t v41 = HIDWORD(v19) * (unint64_t)v32 + v38 + HIDWORD(v39);
    unint64_t v42 = v39 | ((unint64_t)v41 << 32);
    unint64_t v44 = v37 + v40 + HIDWORD(v41);
    uint64_t v43 = (__PAIR128__(v34, v37) + __PAIR128__(v36, v40 + HIDWORD(v41))) >> 64;
    unsigned long long v45 = __PAIR128__(v44, v30) + v42;
    BOOL v46 = __CFADD__(__CFADD__(v30, v42), v44);
    uint64_t result = v29 + *((void *)&v45 + 1);
    uint64_t v47 = __CFADD__(v29, *((void *)&v45 + 1)) || v46;
    unint64_t v48 = v43 + v47;
    if (v16 >= 0x181D)
    {
      if (v6 && ((unint64_t)v45 > v20 || (void)v45 == v20 && v28 >= v19)) {
        ++result;
      }
      return result;
    }
    int v49 = __bid_shiftright128[v18];
    if (v16 >> 1 >= 0xC05)
    {
      unint64_t v50 = (v48 << -(char)v49) | (result >> v49);
      if (!v6) {
        return v50;
      }
      if ((__bid_maskhigh128[v18] & result) == 0 && (unint64_t)v45 <= v20)
      {
        if ((void)v45 != v20) {
          return v50;
        }
        uint64_t result = v50;
        if (v28 < v19) {
          return result;
        }
      }
      return v50 + 1;
    }
    if (!v6) {
      return v48 >> v49;
    }
    if ((__bid_maskhigh128[v18] & v48) == 0 && !result && (unint64_t)v45 <= v20)
    {
      if ((void)v45 != v20) {
        return v48 >> v49;
      }
      uint64_t result = v48 >> v49;
      if (v28 < v19) {
        return result;
      }
    }
    return (v48 >> v49) + 1;
  }
  return result;
}

unint64_t __bid128_round_integral_zero(unint64_t result, uint64_t a2, _DWORD *a3)
{
  if ((~a2 & 0x7800000000000000) == 0)
  {
    if ((~a2 & 0x7C00000000000000) != 0) {
      return 0;
    }
    if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || result >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      uint64_t result = 0;
      a2 &= 0xFFFFC00000000000;
    }
    if ((~a2 & 0x7E00000000000000) == 0) {
      *a3 |= 1u;
    }
    return result;
  }
  if ((~a2 & 0x6000000000000000) == 0)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 4 * a2;
    goto LABEL_18;
  }
  unint64_t v3 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFuLL) <= 0x1ED09BEAD87C0)
  {
    if (result < 0x378D8E6400000000)
    {
      unint64_t v4 = result;
      goto LABEL_17;
    }
    unint64_t v4 = result;
    uint64_t v5 = a2;
    if (v3 != 0x1ED09BEAD87C0) {
      goto LABEL_18;
    }
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
LABEL_17:
  uint64_t v5 = a2;
LABEL_18:
  unint64_t v6 = v5 & 0x7FFE000000000000;
  if (!(v4 | v3)) {
    return 0;
  }
  if (v6 <= 0x2FFC000000000000) {
    return 0;
  }
  if (v4 >> 53) {
    unint64_t v7 = HIDWORD(v4);
  }
  else {
    unint64_t v7 = v4;
  }
  if (v4 >> 53) {
    int v8 = -990;
  }
  else {
    int v8 = -1022;
  }
  if (v3) {
    unint64_t v7 = v3;
  }
  unint64_t v9 = (COERCE_UNSIGNED_INT64((double)v7) >> 52) & 0x7FF;
  if (v3) {
    int v8 = -958;
  }
  uint64_t v10 = (v9 + v8 - 1);
  int v11 = *((_DWORD *)&__bid_nr_digits + 8 * v10);
  if (!v11)
  {
    uint64_t v12 = (char *)&__bid_nr_digits + 32 * v10;
    int v11 = *((_DWORD *)v12 + 6);
    unint64_t v13 = *((void *)v12 + 1);
    if (v3 > v13 || v3 == v13 && v4 >= *((void *)&__bid_nr_digits + 4 * v10 + 2)) {
      ++v11;
    }
  }
  unint64_t v14 = v6 >> 49;
  if (v14 >> 5 <= 0xC0)
  {
    if ((int)v14 + v11 - 6176 < 1) {
      return 0;
    }
    uint64_t v15 = (6175 - v14);
    unint64_t v16 = __bid_ten2mk128[2 * v15];
    unint64_t v17 = __bid_ten2mk128[2 * v15 + 1];
    unint64_t v18 = HIDWORD(v17);
    unint64_t v19 = v17 * (unint64_t)HIDWORD(v4);
    unint64_t v20 = HIDWORD(v19) + HIDWORD(v17) * (unint64_t)HIDWORD(v4);
    unint64_t v21 = HIDWORD(v17) * (unint64_t)v4
        + v19
        + ((v17 * (unint64_t)v4) >> 32);
    unint64_t v22 = HIDWORD(v21);
    unint64_t v23 = (v17 * v4) | ((unint64_t)v21 << 32);
    unint64_t v24 = HIDWORD(v16);
    unsigned long long v25 = __PAIR128__(v20, v23)
        + __PAIR128__(v22, ((v16 * (unint64_t)HIDWORD(v4)) >> 32)+ HIDWORD(v16) * (unint64_t)HIDWORD(v4)+ ((HIDWORD(v16) * (unint64_t)v4+ (v16 * HIDWORD(v4))+ ((v16 * (unint64_t)v4) >> 32)) >> 32));
    unint64_t v26 = HIDWORD(v3);
    LODWORD(v23) = v3;
    unint64_t v27 = v17 * (unint64_t)HIDWORD(v3);
    unint64_t v28 = v17 * (unint64_t)v3;
    unint64_t v29 = v18 * (unint64_t)v3;
    unint64_t v30 = HIDWORD(v27) + v18 * (unint64_t)HIDWORD(v3);
    unint64_t v31 = v29 + v27 + HIDWORD(v28);
    unint64_t v32 = HIDWORD(v31);
    unint64_t v33 = v28 | ((unint64_t)v31 << 32);
    unint64_t v34 = v16 * (unint64_t)HIDWORD(v3);
    unint64_t v35 = v16 * (unint64_t)v3;
    unint64_t v36 = HIDWORD(v16) * (unint64_t)v23 + v34 + HIDWORD(v35);
    unint64_t v37 = v35 | ((unint64_t)v36 << 32);
    unsigned long long v38 = __PAIR128__(v30, v33)
        + __PAIR128__(v32, HIDWORD(v34) + v24 * (unint64_t)v26 + HIDWORD(v36));
    BOOL v39 = __CFADD__(__CFADD__(v37, (void)v25), v33 + HIDWORD(v34) + v24 * (unint64_t)v26 + HIDWORD(v36));
    unint64_t v40 = __CFADD__(v37, (void)v25)
        + v33
        + HIDWORD(v34)
        + v24 * (unint64_t)v26
        + HIDWORD(v36);
    unsigned int v41 = v39;
    uint64_t result = *((void *)&v25 + 1) + v40;
    if (__CFADD__(*((void *)&v25 + 1), v40)) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = v41;
    }
    unint64_t v43 = *((void *)&v38 + 1) + v42;
    if (v14 <= 0x181C)
    {
      int v44 = __bid_shiftright128[v15];
      BOOL v39 = v14 >> 1 >= 0xC05;
      int v45 = -v44;
      unint64_t v46 = result >> v44;
      unint64_t v47 = v43 >> v44;
      unint64_t v48 = (v43 << v45) | v46;
      if (v39) {
        return v48;
      }
      else {
        return v47;
      }
    }
  }
  return result;
}

unint64_t __bid128_sin(unint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = a1;
  __n128 v126 = 0uLL;
  if ((~a2 & 0x6000000000000000) != 0)
  {
    int v6 = (((unint64_t)a2 >> 49) & 0x3FFF) - 6176;
    unint64_t v7 = a2 & 0x1FFFFFFFFFFFFLL;
    if ((a2 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0 || a1 >= 0x378D8E6400000000 && v7 == 0x1ED09BEAD87C0)
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    else
    {
      unint64_t v8 = a1;
    }
LABEL_17:
    if (v8 | v7) {
      int v9 = v6;
    }
    else {
      int v9 = -99999;
    }
    if (v9 > -36)
    {
      int v11 = (uint64_t *)((char *)&bid_decimal128_moduli_1191 + 48 * (v9 + 35));
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      unint64_t v16 = v11[4];
      uint64_t v124 = v11[5];
      unint64_t v17 = HIDWORD(*v11);
      unint64_t v18 = ((v12 * (unint64_t)HIDWORD(v8)) >> 32)
          + HIDWORD(v12) * (unint64_t)HIDWORD(v8)
          + ((HIDWORD(v12) * (unint64_t)v8
            + (v12 * HIDWORD(v8))
            + ((v12 * (unint64_t)v8) >> 32)) >> 32);
      unint64_t v19 = HIDWORD(v13);
      unint64_t v20 = v13 * (unint64_t)HIDWORD(v8);
      unint64_t v21 = HIDWORD(v20) + HIDWORD(v13) * (unint64_t)HIDWORD(v8);
      unint64_t v22 = HIDWORD(v13) * (unint64_t)v8
          + v20
          + ((v13 * (unint64_t)v8) >> 32);
      unint64_t v23 = v21 + HIDWORD(v22);
      unint64_t v24 = (v13 * v8) | ((unint64_t)v22 << 32);
      unint64_t v25 = HIDWORD(v15);
      unint64_t v26 = v15 * (unint64_t)HIDWORD(v8);
      unint64_t v27 = HIDWORD(v26) + HIDWORD(v15) * (unint64_t)HIDWORD(v8);
      unint64_t v28 = HIDWORD(v15) * (unint64_t)v8
          + v26
          + ((v15 * (unint64_t)v8) >> 32);
      unint64_t v29 = v27 + HIDWORD(v28);
      unint64_t v30 = (v15 * v8) | ((unint64_t)v28 << 32);
      unint64_t v31 = HIDWORD(v14);
      unint64_t v32 = v14 * (unint64_t)HIDWORD(v8);
      unsigned int v125 = a3;
      unint64_t v33 = HIDWORD(v32) + HIDWORD(v14) * (unint64_t)HIDWORD(v8);
      unint64_t v34 = HIDWORD(v14) * (unint64_t)v8
          + v32
          + ((v14 * (unint64_t)v8) >> 32);
      unint64_t v35 = v33 + HIDWORD(v34);
      unint64_t v36 = (v14 * v8) | ((unint64_t)v34 << 32);
      unint64_t v37 = HIDWORD(v16);
      unint64_t v38 = v16 * (unint64_t)HIDWORD(v8);
      unint64_t v39 = HIDWORD(v16) * (unint64_t)v8
          + v38
          + ((v16 * (unint64_t)v8) >> 32);
      unint64_t v40 = (v16 * v8) | ((unint64_t)v39 << 32);
      unsigned long long v41 = __PAIR128__(v30, v18) + v24;
      BOOL v42 = __CFADD__(__CFADD__(v18, v24), v30);
      BOOL v43 = __CFADD__(v23, *((void *)&v41 + 1));
      unint64_t v44 = v23 + *((void *)&v41 + 1);
      uint64_t v45 = v43 || v42;
      BOOL v43 = __CFADD__(v36, v45);
      unint64_t v46 = v36 + v45;
      unsigned int v47 = v43;
      unint64_t v48 = v29 + v46;
      if (__CFADD__(v29, v46)) {
        uint64_t v49 = 1;
      }
      else {
        uint64_t v49 = v47;
      }
      BOOL v43 = __CFADD__(v40, v49);
      unint64_t v50 = v40 + v49;
      unsigned int v51 = v43;
      unint64_t v52 = v35 + v50;
      if (__CFADD__(v35, v50)) {
        uint64_t v53 = 1;
      }
      else {
        uint64_t v53 = v51;
      }
      unint64_t v54 = HIDWORD(v7);
      unint64_t v55 = *v11 * (unint64_t)HIDWORD(v7);
      unint64_t v56 = v12 * (unint64_t)v7;
      unint64_t v57 = HIDWORD(v55) + v17 * (unint64_t)HIDWORD(v7);
      unint64_t v58 = v17 * (unint64_t)v7 + v55 + HIDWORD(v56);
      unint64_t v59 = v57 + HIDWORD(v58);
      unint64_t v60 = v56 | ((unint64_t)v58 << 32);
      unint64_t v61 = v13 * (unint64_t)HIDWORD(v7);
      unint64_t v62 = v13 * (unint64_t)v7;
      unint64_t v63 = v19 * (unint64_t)v7;
      unint64_t v64 = HIDWORD(v61) + v19 * (unint64_t)HIDWORD(v7);
      unint64_t v65 = v63 + v61 + HIDWORD(v62);
      unint64_t v66 = v64 + HIDWORD(v65);
      unint64_t v67 = v62 | ((unint64_t)v65 << 32);
      unint64_t v68 = v15 * (unint64_t)HIDWORD(v7);
      unint64_t v69 = v15 * (unint64_t)v7;
      unint64_t v70 = HIDWORD(v68) + v25 * (unint64_t)HIDWORD(v7);
      unint64_t v71 = v25 * (unint64_t)v7 + v68 + HIDWORD(v69);
      unint64_t v72 = v70 + HIDWORD(v71);
      unint64_t v73 = v69 | ((unint64_t)v71 << 32);
      unint64_t v74 = v14 * (unint64_t)HIDWORD(v7);
      unint64_t v75 = v14 * (unint64_t)v7;
      unint64_t v76 = v31 * (unint64_t)v7 + v74 + HIDWORD(v75);
      unint64_t v77 = v75 | ((unint64_t)v76 << 32);
      unint64_t v78 = v16 * v7;
      unsigned long long v79 = __PAIR128__(v73, v59) + v67;
      LODWORD(v80) = __CFADD__(__CFADD__(v59, v67), v73);
      unint64_t v81 = v66 + *((void *)&v79 + 1);
      if (__CFADD__(v66, *((void *)&v79 + 1))) {
        uint64_t v80 = 1;
      }
      else {
        uint64_t v80 = v80;
      }
      BOOL v43 = __CFADD__(v77, v80);
      unint64_t v82 = v77 + v80;
      LODWORD(v83) = v43;
      BOOL v43 = __CFADD__(v72, v82);
      unint64_t v84 = v72 + v82;
      if (v43) {
        uint64_t v83 = 1;
      }
      else {
        uint64_t v83 = v83;
      }
      uint64_t v85 = __CFADD__(v60, (void)v41) + (void)v79;
      LODWORD(v86) = __CFADD__(__CFADD__(v60, (void)v41), (void)v79);
      BOOL v43 = __CFADD__(v44, v85);
      uint64_t v87 = v44 + v85;
      if (v43) {
        uint64_t v86 = 1;
      }
      else {
        uint64_t v86 = v86;
      }
      BOOL v43 = __CFADD__(v81, v86);
      unint64_t v88 = v81 + v86;
      LODWORD(v89) = v43;
      BOOL v43 = __CFADD__(v88, v48);
      unint64_t v90 = v88 + v48;
      if (v43) {
        uint64_t v89 = 1;
      }
      else {
        uint64_t v89 = v89;
      }
      BOOL v43 = __CFADD__(v84, v89);
      unint64_t v91 = v84 + v89;
      LODWORD(v92) = v43;
      BOOL v43 = __CFADD__(v91, v52);
      unint64_t v93 = v91 + v52;
      if (v43) {
        uint64_t v92 = 1;
      }
      else {
        uint64_t v92 = v92;
      }
      unint64_t v94 = v78
          + v31 * (unint64_t)v54
          + HIDWORD(v74)
          + v37 * (unint64_t)HIDWORD(v8)
          + v124 * v8
          + HIDWORD(v38)
          + HIDWORD(v76)
          + HIDWORD(v39)
          + v83
          + v53
          + v92;
      unint64_t v95 = v94 >> 62;
      *((void *)&v97 + 1) = v94;
      *(void *)&long long v97 = v93;
      uint64_t v96 = v97 >> 62;
      *((void *)&v97 + 1) = v93;
      *(void *)&long long v97 = v90;
      unint64_t v98 = v97 >> 62;
      *((void *)&v97 + 1) = v90;
      *(void *)&long long v97 = v87;
      unint64_t v99 = v97 >> 62;
      uint64_t v100 = 4 * v87;
      int v101 = ((_BYTE)v95 + 1) & 3;
      if (v96 < 0)
      {
        unint64_t v102 = a2 >= 0;
      }
      else
      {
        int v101 = v95;
        unint64_t v102 = (unint64_t)a2 >> 63;
      }
      if (v96 >= 0) {
        unint64_t v103 = v96;
      }
      else {
        unint64_t v103 = ~v96;
      }
      if (v96 >= 0)
      {
        unint64_t v104 = v100;
      }
      else
      {
        unint64_t v98 = ~v98;
        unint64_t v99 = ~v99;
        unint64_t v104 = ~v100;
      }
      if (a2 >= 0) {
        int v105 = v101;
      }
      else {
        int v105 = -v101 & 3;
      }
      if (v103) {
        int v106 = 16382;
      }
      else {
        int v106 = 16318;
      }
      if (v103) {
        unint64_t v107 = v103;
      }
      else {
        unint64_t v107 = v98;
      }
      if (v103) {
        unint64_t v104 = v99;
      }
      else {
        unint64_t v98 = v99;
      }
      int8x16_t v108 = (int8x16_t)vdupq_n_s64(v107);
      int8x16_t v109 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v108, (int8x16_t)xmmword_1BDDB5720), (uint64x2_t)vandq_s8(v108, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v108, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v108, (int8x16_t)xmmword_1BDDB5750))));
      *(int8x8_t *)v109.i8 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
      __int32 v110 = v109.i32[0] | v109.i32[1] | (2 * ((v107 & 0xCCCCCCCCCCCCCCCCLL) <= (v107 & 0x3333333333333333))) | ((v107 & 0xAAAAAAAAAAAAAAAALL) <= (v107 & 0x5555555555555555));
      unint64_t v111 = (v104 >> -(char)v110) + (v98 << v110);
      if (v110) {
        unint64_t v107 = (v98 >> -(char)v110) + (v107 << v110);
      }
      else {
        unint64_t v111 = v98;
      }
      *((void *)&v112 + 1) = v107;
      *(void *)&long long v112 = v111;
      v127.n128_u64[0] = v112 >> 15;
      v127.n128_u64[1] = ((unint64_t)(v106 - v110) << 48) | (v102 << 63) | (v107 >> 15) & 0xFFFFFFFFFFFFLL;
      bid_f128_mul(&v127, (uint64_t *)&c_pi_ov_2_1171, (uint64_t *)&v127);
      switch(v105)
      {
        case 0:
          unsigned long long v113 = &__dpml_bid_trig_x_table;
          uint64_t v114 = 0;
          uint64_t v115 = 1;
          goto LABEL_101;
        case 1:
          unsigned long long v113 = (uint64_t *)&unk_1BDDBCFF8;
          uint64_t v114 = 2;
          uint64_t v115 = 2;
LABEL_101:
          __dpml_bid_C_ux_trig__((uint64_t *)&v127, v114, v115, v113, &v126, v129);
          break;
        case 2:
          uint64_t v120 = &__dpml_bid_trig_x_table;
          uint64_t v121 = 0;
          uint64_t v122 = 1;
          goto LABEL_104;
        case 3:
          uint64_t v120 = (uint64_t *)&unk_1BDDBCFF8;
          uint64_t v121 = 2;
          uint64_t v122 = 2;
LABEL_104:
          __dpml_bid_C_ux_trig__((uint64_t *)&v127, v121, v122, v120, &v126, v129);
          memset(v130, 0, 24);
          __dpml_bid_unpack_x_or_y__((uint64_t *)&v126, 0, (uint64_t)v130, &__dpml_bid_bid_x_table, (uint64_t)&v126, v129);
          break;
        default:
          break;
      }
      unint64_t v118 = v126.n128_u64[1];
      unint64_t v117 = v126.n128_u64[0];
      int v119 = v125;
    }
    else
    {
      if (v9 == -99999) {
        return __bid128_mul(a1, a2, 1uLL, 0x3040000000000000, a3, &my_fpsf);
      }
      if (v9 <= 0xFFFFFFCB) {
        return bid128_ext_fma(v129, (int *)v130, (int *)&v127, &v128, a1, a2, 1uLL, 0xAFF0000000000000, a1, a2, a3, &my_fpsf);
      }
      v127.n128_u64[0] = __bid128_to_binary128(a1, a2, a3, &my_fpsf);
      v127.n128_u64[1] = v116;
      __dpml_bid_C_ux_trig__((uint64_t *)&v127, 0, 1, &__dpml_bid_trig_x_table, &v126, v129);
      unint64_t v118 = v126.n128_u64[1];
      unint64_t v117 = v126.n128_u64[0];
      int v119 = a3;
    }
    return __binary128_to_bid128(v117, v118, v119, &my_fpsf);
  }
  if ((~a2 & 0x7800000000000000) != 0)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    int v6 = 0;
    goto LABEL_17;
  }
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    unint64_t v5 = 0;
    my_fpsf |= 1u;
  }
  else
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
  }
  return v5;
}

unint64_t __bid128_sqrt(unint64_t result, unint64_t a2, int a3)
{
  unint64_t v4 = a2 & 0x8000000000000000;
  if (((a2 >> 61) & 3) == 3)
  {
    if ((a2 & 0x7800000000000000) == 0x7800000000000000)
    {
      BOOL v5 = (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93 && result >= 0x38C15B0A00000000;
      if (!v5) {
        unint64_t v7 = result;
      }
      else {
        unint64_t v7 = 0;
      }
      if ((a2 & 0x3FFFFFFFFFFFLL) <= 0x314DC6448D93) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = 0;
      }
      if ((a2 & 0x7C00000000000000) == 0x7800000000000000) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v8;
      }
      if ((a2 & 0x7C00000000000000) != 0x7C00000000000000)
      {
        if (!v4) {
          return result;
        }
LABEL_71:
        my_fpsf |= 1u;
        return result;
      }
      goto LABEL_66;
    }
    uint64_t result = 0;
LABEL_65:
    if ((~a2 & 0x7C00000000000000) != 0) {
      return 0;
    }
LABEL_66:
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    return result;
  }
  uint64_t v9 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0
    || (a2 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && result >= 0x378D8E6400000000)
  {
    uint64_t result = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = (a2 >> 49) & 0x3FFF;
  if (!(v9 | result)) {
    goto LABEL_65;
  }
  if (v4)
  {
    uint64_t result = 0;
    goto LABEL_71;
  }
  unint64_t v11 = a2 >> 49;
  *((void *)&v13 + 1) = v9;
  *(void *)&long long v13 = result;
  uint64_t v12 = v13 >> 61;
  *((void *)&v13 + 1) = v9;
  *(void *)&long long v13 = result;
  unint64_t v14 = v12 + (v13 >> 63);
  if (10 * result < 2 * result) {
    ++v14;
  }
  BOOL v15 = (v11 & 1) == 0;
  if (v11) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = v9;
  }
  if (v15) {
    uint64_t v17 = result;
  }
  else {
    uint64_t v17 = 10 * result;
  }
  double v18 = 1.0 / sqrt((double)(unint64_t)v17 + (double)v16 * 1.84467441e19);
  uint64_t v19 = *(void *)&v18 >> 52;
  uint64_t v20 = HIDWORD(*(void *)&v18) & 0xFFFFFLL | 0x100000;
  unint64_t v21 = v20 * (unint64_t)v16;
  unint64_t v22 = HIDWORD(v21) + v20 * (unint64_t)HIDWORD(v16);
  unint64_t v23 = ((LODWORD(v18) * (unint64_t)v16) >> 32)
      + LODWORD(v18) * (unint64_t)HIDWORD(v16)
      + v21;
  unint64_t v24 = v20 * (unint64_t)v17;
  unint64_t v25 = LODWORD(v18) * (unint64_t)v17;
  unint64_t v26 = HIDWORD(v25) + LODWORD(v18) * (unint64_t)HIDWORD(v17) + v24;
  unsigned int v27 = LODWORD(v18) * v17;
  unint64_t v28 = v25 * (unint64_t)LODWORD(v18);
  unint64_t v29 = (LODWORD(v18) * v17) | ((unint64_t)v26 << 32);
  unsigned long long v30 = __PAIR128__(v22, (LODWORD(v18) * v16) | ((unint64_t)v23 << 32))
      + __PAIR128__(HIDWORD(v23), HIDWORD(v24) + v20 * (unint64_t)HIDWORD(v17) + HIDWORD(v26));
  unint64_t v31 = v20 * (unint64_t)(LODWORD(v18) * v17);
  unint64_t v32 = HIDWORD(v28) + v31 + v26 * (unint64_t)LODWORD(v18);
  unint64_t v33 = HIDWORD(v31) + v26 * (unint64_t)v20 + HIDWORD(v32);
  unint64_t v34 = (LODWORD(v18) * v16 + HIDWORD(v24) + v20 * HIDWORD(v17) + HIDWORD(v26))
      * (unint64_t)v20;
  unint64_t v35 = HIDWORD(v34)
      + ((((LODWORD(v18) * v16) | ((unint64_t)v23 << 32))
        + HIDWORD(v24)
        + v20 * (unint64_t)HIDWORD(v17)
        + HIDWORD(v26)) >> 32)
      * v20;
  unint64_t v36 = DWORD1(v30) * (unint64_t)LODWORD(v18)
      + v34
      + ((v30 * (unint64_t)LODWORD(v18)) >> 32);
  unint64_t v37 = v35 + HIDWORD(v36);
  unint64_t v38 = ((LODWORD(v18) * v16 + HIDWORD(v24) + v20 * HIDWORD(v17) + HIDWORD(v26)) * LODWORD(v18)) | ((unint64_t)v36 << 32);
  unint64_t v39 = ((__PAIR128__(v22, (LODWORD(v18) * v16) | ((unint64_t)v23 << 32))+ __PAIR128__(HIDWORD(v23), HIDWORD(v24) + v20 * (unint64_t)HIDWORD(v17) + HIDWORD(v26))) >> 64)* (unint64_t)v20;
  unint64_t v40 = HIDWORD(v30) * (unint64_t)LODWORD(v18)
      + v39
      + ((DWORD2(v30) * (unint64_t)LODWORD(v18)) >> 32);
  uint64_t v41 = HIDWORD(v39)
      + ((__PAIR128__(v22, (LODWORD(v18) * v16) | ((unint64_t)v23 << 32))
        + __PAIR128__(HIDWORD(v23), HIDWORD(v24) + v20 * (unint64_t)HIDWORD(v17) + HIDWORD(v26))) >> 96)
      * v20
      + HIDWORD(v40);
  unint64_t v42 = (DWORD2(v30) * LODWORD(v18)) | ((unint64_t)v40 << 32);
  unint64_t v43 = v33 + v38;
  BOOL v5 = __CFADD__(__CFADD__(v33, v38), v42);
  unint64_t v44 = __CFADD__(v33, v38) + v42;
  LODWORD(v45) = v5;
  BOOL v5 = __CFADD__(v37, v44);
  unint64_t v46 = v37 + v44;
  if (v5) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v45;
  }
  uint64_t v47 = v41 + v45;
  int v48 = 2 * v19;
  unint64_t v49 = v28 | ((unint64_t)v32 << 32);
  if (v19 >= 0x3F4) {
    int v50 = 2086;
  }
  else {
    int v50 = 2022;
  }
  if (v19 < 0x3F4)
  {
    unint64_t v49 = v43;
    unint64_t v43 = v46;
  }
  unint64_t v51 = (v43 << (v48 - v50)) | (v49 >> (v50 - v48));
  if (v50 == v48) {
    unint64_t v51 = v49;
  }
  uint64_t v52 = (v47 << (v48 - 102)) | (v46 >> (-90 - v48));
  if (v19 == 979) {
    uint64_t v52 = v46;
  }
  if (v19 <= 0x3D3) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = v51;
  }
  unint64_t v54 = v53 >> 1;
  if (v53 < 0)
  {
    unint64_t v76 = -(uint64_t)v54;
    unint64_t v77 = HIDWORD(v76);
    unint64_t v78 = ((HIDWORD(v76) * (unint64_t)v27) >> 32)
        + HIDWORD(v76) * (unint64_t)v26
        + ((v76 * (unint64_t)v26
          + HIDWORD(v76) * v27
          + ((v76 * (unint64_t)v27) >> 32)) >> 32);
    unint64_t v79 = HIDWORD(v76) * (unint64_t)v30;
    unint64_t v80 = HIDWORD(v79) + HIDWORD(v76) * (unint64_t)DWORD1(v30);
    unint64_t v81 = v76 * (unint64_t)DWORD1(v30)
        + v79
        + ((v76 * (unint64_t)v30) >> 32);
    unint64_t v82 = v80 + HIDWORD(v81);
    unint64_t v83 = (v76 * v30) | ((unint64_t)v81 << 32);
    unint64_t v84 = HIDWORD(v76) * (unint64_t)DWORD2(v30);
    unint64_t v85 = v76 * (unint64_t)DWORD2(v30);
    unint64_t v86 = v76 * (unint64_t)HIDWORD(v30) + v84 + HIDWORD(v85);
    unint64_t v87 = v85 | ((unint64_t)v86 << 32);
    BOOL v5 = __CFADD__(v78, v83);
    unint64_t v88 = v78 + v83;
    BOOL v90 = v5;
    BOOL v5 = __CFADD__(v5, v87);
    unint64_t v89 = v90 + v87;
    unsigned int v91 = v5;
    BOOL v5 = __CFADD__(v82, v89);
    unint64_t v92 = v82 + v89;
    if (v5) {
      uint64_t v93 = 1;
    }
    else {
      uint64_t v93 = v91;
    }
    uint64_t v94 = (__PAIR128__(v30, v88) + v29) >> 64;
    unint64_t v72 = v88 + v29;
    unint64_t v74 = v94 + v92;
    unint64_t v75 = *((void *)&v30 + 1)
        + v77 * (unint64_t)HIDWORD(v30)
        + HIDWORD(v84)
        + HIDWORD(v86)
        + v93
        + v30;
  }
  else
  {
    unint64_t v55 = HIDWORD(v54);
    unsigned int v56 = (unint64_t)v53 >> 1;
    unint64_t v57 = ((v55 * (unint64_t)v27) >> 32)
        + v55 * (unint64_t)v26
        + ((v56 * (unint64_t)v26 + v55 * v27 + ((v56 * (unint64_t)v27) >> 32)) >> 32);
    unint64_t v58 = v55 * (unint64_t)v30;
    unint64_t v59 = HIDWORD(v58) + v55 * (unint64_t)DWORD1(v30);
    unint64_t v60 = v56 * (unint64_t)DWORD1(v30) + v58 + ((v56 * (unint64_t)v30) >> 32);
    unint64_t v61 = v59 + HIDWORD(v60);
    unint64_t v62 = (v56 * v30) | ((unint64_t)v60 << 32);
    unint64_t v63 = v55 * (unint64_t)DWORD2(v30);
    unint64_t v64 = HIDWORD(v63);
    unint64_t v65 = v56 * (unint64_t)HIDWORD(v30) + v63 + ((v56 * (unint64_t)DWORD2(v30)) >> 32);
    unint64_t v66 = (v56 * DWORD2(v30)) | ((unint64_t)v65 << 32);
    BOOL v5 = __CFADD__(v57, v62);
    unint64_t v67 = v57 + v62;
    BOOL v69 = v5;
    BOOL v5 = __CFADD__(v5, v66);
    unint64_t v68 = v69 + v66;
    LODWORD(v70) = v5;
    BOOL v5 = __CFADD__(v61, v68);
    unint64_t v71 = v61 + v68;
    if (v5) {
      uint64_t v70 = 1;
    }
    else {
      uint64_t v70 = v70;
    }
    BOOL v5 = v29 >= v67;
    unint64_t v72 = v29 - v67;
    uint64_t v73 = !v5;
    unint64_t v74 = v30 - v73 - v71;
    unint64_t v75 = *((void *)&v30 + 1) - (v64 + v55 * (unint64_t)HIDWORD(v30) + HIDWORD(v65)) - v70 - v30;
  }
  char v95 = -78 - v19;
  if (v19 < 0x3B3)
  {
    unint64_t v96 = 0;
  }
  else
  {
    char v95 = 50 - v19;
    unint64_t v96 = v75;
  }
  if (v19 >= 0x3B3) {
    unint64_t v75 = v74;
  }
  char v97 = v95 - 64;
  BOOL v98 = v19 > 0x3F2;
  if (v19 <= 0x3F2) {
    char v99 = v97;
  }
  else {
    char v99 = 50 - v19;
  }
  if (v98) {
    unint64_t v100 = v74;
  }
  else {
    unint64_t v100 = v96;
  }
  if (v98) {
    unint64_t v75 = v72;
  }
  unint64_t v101 = (((2 * v100) << ~v99) | (v75 >> v99)) + 1;
  unint64_t v102 = v101 >> 1;
  if (v102 * v102 == v17
    && ((2 * (v101 >> 1) * (v101 >> 33)
       + ((v102 * (unint64_t)v102) >> 32)) >> 32)
     + (v101 >> 33) * (v101 >> 33) == v16)
  {
    return v101 >> 1;
  }
  uint64_t v104 = ((unint64_t)COERCE_UNSIGNED_INT((float)result + (float)((float)(unint64_t)v9
                                                                                       * 1.8447e19)) >> 23)
       - 127;
  int v105 = __bid_estimate_decimal_digits[v104];
  int v106 = (unint64_t *)((char *)&__bid_power10_index_binexp_128 + 16 * v104);
  unint64_t v107 = v106[1];
  if ((uint64_t)(v9 - v107) > 0 || v9 == v107 && result >= *v106) {
    ++v105;
  }
  int v108 = (((_BYTE)v10 - (67 - (_BYTE)v105)) & 1) + 67 - v105;
  if (v108 < 39)
  {
    unint64_t v134 = (unint64_t *)((char *)&__bid_power10_table_128 + 16 * v108);
    unint64_t v135 = *v134;
    unint64_t v136 = v134[1];
    unint64_t v137 = HIDWORD(v136);
    unint64_t v138 = v136 * (unint64_t)HIDWORD(result);
    unint64_t v139 = HIDWORD(v138) + HIDWORD(v136) * (unint64_t)HIDWORD(result);
    unint64_t v140 = HIDWORD(v136) * (unint64_t)result
         + v138
         + ((v136 * (unint64_t)result) >> 32);
    unint64_t v141 = HIDWORD(v140);
    unint64_t v142 = (v136 * result) | ((unint64_t)v140 << 32);
    unint64_t v143 = HIDWORD(v135);
    unint64_t v144 = v135 * (unint64_t)HIDWORD(result);
    unint64_t v145 = HIDWORD(v135) * (unint64_t)result
         + v144
         + ((v135 * (unint64_t)result) >> 32);
    unint64_t v118 = (v135 * result) | ((unint64_t)v145 << 32);
    unint64_t v147 = v142 + HIDWORD(v144) + HIDWORD(v135) * (unint64_t)HIDWORD(result) + HIDWORD(v145);
    uint64_t v146 = (__PAIR128__(v139, v142)
          + __PAIR128__(v141, HIDWORD(v144) + HIDWORD(v135) * (unint64_t)HIDWORD(result) + HIDWORD(v145))) >> 64;
    unint64_t v148 = v136 * (unint64_t)HIDWORD(v9);
    unint64_t v149 = v136 * (unint64_t)v9;
    unint64_t v150 = v137 * (unint64_t)v9;
    unint64_t v151 = HIDWORD(v148) + v137 * (unint64_t)HIDWORD(v9);
    unint64_t v152 = v150 + v148 + HIDWORD(v149);
    unint64_t v153 = HIDWORD(v152);
    unint64_t v154 = v149 | ((unint64_t)v152 << 32);
    unint64_t v155 = v135 * (unint64_t)HIDWORD(v9);
    unint64_t v156 = v135 * (unint64_t)v9;
    unint64_t v157 = HIDWORD(v155) + v143 * (unint64_t)HIDWORD(v9);
    unint64_t v158 = v143 * (unint64_t)v9 + v155 + HIDWORD(v156);
    unint64_t v159 = v156 | ((unint64_t)v158 << 32);
    unint64_t v160 = v154 + v157 + HIDWORD(v158);
    uint64_t v128 = (__PAIR128__(v151, v154) + __PAIR128__(v153, v157 + HIDWORD(v158))) >> 64;
    BOOL v5 = __CFADD__(v147, v159);
    unint64_t v162 = v147 + v159;
    uint64_t v161 = (__PAIR128__(v160, v147) + v159) >> 64;
    unint64_t v130 = v162;
    BOOL v163 = __CFADD__(v5, v160);
    BOOL v5 = __CFADD__(v146, v161);
    unint64_t v133 = v146 + v161;
    BOOL v132 = v5 || v163;
  }
  else
  {
    int8x16_t v109 = (uint64_t *)((char *)&__bid_power10_table_128 + 16 * (v108 - 37));
    uint64_t v110 = *v109;
    unint64_t v111 = *v109 * (unint64_t)HIDWORD(result);
    unint64_t v112 = *v109 * v9
         + v109[1] * result
         + HIDWORD(*v109) * HIDWORD(result)
         + HIDWORD(v111)
         + ((HIDWORD(*v109) * result
           + v111
           + ((*v109 * (unint64_t)result) >> 32)) >> 32);
    LODWORD(v109) = (result * *v109) >> 32;
    uint64_t v113 = (v110 * result);
    unint64_t v114 = 3587851993 * v109;
    uint64_t v115 = HIDWORD(v114) + 126217744 * v109;
    unint64_t v116 = ((3587851993u * (unint64_t)v113) >> 32)
         + 126217744 * v113
         + v114;
    unint64_t v117 = ((16004768 * (unint64_t)v113) >> 32) + 16004768 * v109;
    unint64_t v118 = 0xF436A000000000 * v113;
    unsigned long long v119 = __PAIR128__(HIDWORD(v116), (-707115303 * v113) | ((unint64_t)v116 << 32))
         + __PAIR128__(v115, v117);
    unint64_t v120 = HIDWORD(v112);
    unint64_t v121 = 3587851993 * HIDWORD(v112);
    uint64_t v122 = HIDWORD(v121) + 126217744 * HIDWORD(v112);
    unint64_t v123 = 126217744 * v112
         + v121
         + ((3587851993u * (unint64_t)v112) >> 32);
    unint64_t v124 = HIDWORD(v123);
    unint64_t v125 = (-707115303 * v112) | ((unint64_t)v123 << 32);
    unint64_t v126 = (16004768 * (unint64_t)v112) >> 32;
    uint64_t v127 = 0xF436A000000000 * v112;
    unint64_t v129 = v125 + v126 + 16004768 * v120;
    uint64_t v128 = (__PAIR128__(v122, v125) + __PAIR128__(v124, v126 + 16004768 * v120)) >> 64;
    BOOL v5 = __CFADD__(v127, (void)v119);
    uint64_t v131 = (__PAIR128__(v129, v127) + (unint64_t)v119) >> 64;
    unint64_t v130 = v127 + v119;
    BOOL v132 = __CFADD__(v5, v129);
    BOOL v5 = __CFADD__(*((void *)&v119 + 1), v131);
    unint64_t v133 = *((void *)&v119 + 1) + v131;
    if (v5) {
      BOOL v132 = 1;
    }
  }
  unint64_t v164 = v128 + v132;
  double v165 = 1.0
       / sqrt((double)v164 * 1.84467441e19 * 3.40282367e38+ (double)v133 * 3.40282367e38+ (double)v130 * 1.84467441e19+ (double)v118);
  uint64_t v166 = HIDWORD(*(void *)&v165) & 0xFFFFFLL | 0x100000;
  unint64_t v167 = LODWORD(v165) * (unint64_t)v118;
  unint64_t v168 = v166 * (unint64_t)v118;
  unint64_t v169 = HIDWORD(v167) + LODWORD(v165) * (unint64_t)HIDWORD(v118) + v168;
  unint64_t v170 = HIDWORD(v168) + v166 * (unint64_t)HIDWORD(v118) + HIDWORD(v169);
  unint64_t v171 = v166 * (unint64_t)v130;
  unint64_t v172 = HIDWORD(v171) + v166 * (unint64_t)HIDWORD(v130);
  unint64_t v173 = ((LODWORD(v165) * (unint64_t)v130) >> 32)
       + LODWORD(v165) * (unint64_t)HIDWORD(v130)
       + v171;
  unint64_t v174 = v172 + HIDWORD(v173);
  unint64_t v175 = v166 * (unint64_t)v133;
  unint64_t v176 = HIDWORD(v175) + v166 * (unint64_t)HIDWORD(v133);
  unint64_t v177 = ((LODWORD(v165) * (unint64_t)v133) >> 32)
       + LODWORD(v165) * (unint64_t)HIDWORD(v133)
       + v175;
  unint64_t v178 = v176 + HIDWORD(v177);
  unint64_t v179 = v166 * (unint64_t)v164;
  unint64_t v180 = ((LODWORD(v165) * (unint64_t)v164) >> 32)
       + LODWORD(v165) * (unint64_t)HIDWORD(v164)
       + v179;
  uint64_t v181 = *(void *)&v165 >> 52;
  unint64_t v182 = (LODWORD(v165) * v130) | ((unint64_t)v173 << 32);
  unint64_t v183 = (LODWORD(v165) * v133) | ((unint64_t)v177 << 32);
  unint64_t v184 = (LODWORD(v165) * v164) | ((unint64_t)v180 << 32);
  unint64_t v185 = v170 + v182;
  BOOL v5 = __CFADD__(__CFADD__(v170, v182), v183);
  unint64_t v186 = __CFADD__(v170, v182) + v183;
  unsigned int v187 = v5;
  unint64_t v188 = v174 + v186;
  if (__CFADD__(v174, v186)) {
    uint64_t v189 = 1;
  }
  else {
    uint64_t v189 = v187;
  }
  BOOL v5 = __CFADD__(v184, v189);
  unint64_t v190 = v184 + v189;
  unint64_t v191 = v166 * (unint64_t)v167;
  unint64_t v192 = (v167 * (unint64_t)LODWORD(v165)) >> 32;
  unsigned int v193 = v5;
  unint64_t v194 = v178 + v190;
  if (__CFADD__(v178, v190)) {
    uint64_t v195 = 1;
  }
  else {
    uint64_t v195 = v193;
  }
  unint64_t v196 = HIDWORD(v179) + v166 * (unint64_t)HIDWORD(v164) + HIDWORD(v180) + v195;
  unint64_t v197 = HIDWORD(v191)
       + v169 * (unint64_t)v166
       + ((v192 + v191 + v169 * (unint64_t)LODWORD(v165)) >> 32);
  unint64_t v198 = v185 * (unint64_t)v166;
  unint64_t v199 = HIDWORD(v198) + HIDWORD(v185) * (unint64_t)v166;
  unint64_t v200 = HIDWORD(v185) * (unint64_t)LODWORD(v165)
       + v198
       + ((v185 * (unint64_t)LODWORD(v165)) >> 32);
  unint64_t v201 = v199 + HIDWORD(v200);
  unint64_t v202 = (v185 * LODWORD(v165)) | ((unint64_t)v200 << 32);
  unint64_t v203 = v188 * (unint64_t)v166;
  unint64_t v204 = HIDWORD(v203) + HIDWORD(v188) * (unint64_t)v166;
  unint64_t v205 = HIDWORD(v188) * (unint64_t)LODWORD(v165)
       + v203
       + ((v188 * (unint64_t)LODWORD(v165)) >> 32);
  unint64_t v206 = v204 + HIDWORD(v205);
  unint64_t v207 = v205 << 32;
  unint64_t v208 = HIDWORD(v194);
  unsigned int v209 = v194;
  unint64_t v210 = v194 * (unint64_t)v166;
  unint64_t v211 = HIDWORD(v210) + HIDWORD(v194) * (unint64_t)v166;
  unint64_t v212 = HIDWORD(v194) * (unint64_t)LODWORD(v165)
       + v210
       + ((v194 * (unint64_t)LODWORD(v165)) >> 32);
  unint64_t v213 = v211 + HIDWORD(v212);
  unint64_t v214 = (v194 * LODWORD(v165)) | ((unint64_t)v212 << 32);
  unint64_t v215 = HIDWORD(v196);
  unsigned int v216 = v196;
  unint64_t v217 = v196 * (unint64_t)v166;
  unint64_t v218 = HIDWORD(v196) * (unint64_t)LODWORD(v165)
       + v217
       + ((v196 * (unint64_t)LODWORD(v165)) >> 32);
  unint64_t v219 = HIDWORD(v217) + HIDWORD(v196) * (unint64_t)v166 + HIDWORD(v218);
  unint64_t v220 = (v196 * LODWORD(v165)) | ((unint64_t)v218 << 32);
  unint64_t v221 = __CFADD__(v202, v197);
  unint64_t v222 = (v188 * LODWORD(v165)) + __CFADD__(v202, v197) + v207;
  BOOL v224 = __CFADD__(v222, v201) || v222 < v221;
  BOOL v5 = __CFADD__(v214, v224);
  unint64_t v225 = v214 + v224;
  LODWORD(v226) = v5;
  BOOL v5 = __CFADD__(v206, v225);
  unint64_t v227 = v206 + v225;
  if (v5) {
    uint64_t v226 = 1;
  }
  else {
    uint64_t v226 = v226;
  }
  BOOL v5 = __CFADD__(v220, v226);
  unint64_t v228 = v220 + v226;
  LODWORD(v229) = v5;
  BOOL v5 = __CFADD__(v213, v228);
  unint64_t v230 = v213 + v228;
  if (v5) {
    uint64_t v229 = 1;
  }
  else {
    uint64_t v229 = v229;
  }
  unint64_t v231 = v219 + v229;
  unint64_t v232 = (v230 << (2 * v181 + 25)) | (v227 >> (39 - 2 * v181));
  uint64_t v233 = (v231 << (2 * v181 + 26)) | (v230 >> (38 - 2 * v181));
  unint64_t v234 = v233 >> 1;
  if (v233 < 0)
  {
    unint64_t v273 = -(uint64_t)v232;
    if (v232) {
      unint64_t v234 = ~v234;
    }
    else {
      unint64_t v234 = -(uint64_t)v234;
    }
    unint64_t v274 = HIDWORD(v273);
    unint64_t v275 = HIDWORD(v273) * (unint64_t)v196;
    unint64_t v276 = HIDWORD(v275) + HIDWORD(v273) * (unint64_t)HIDWORD(v196);
    unint64_t v277 = v273 * (unint64_t)HIDWORD(v196)
         + v275
         + ((v273 * (unint64_t)v196) >> 32);
    unint64_t v278 = HIDWORD(v277);
    unint64_t v279 = (v273 * v196) | ((unint64_t)v277 << 32);
    unint64_t v280 = HIDWORD(v273) * (unint64_t)v194;
    unint64_t v281 = v273 * (unint64_t)v194;
    unint64_t v282 = v273 * (unint64_t)HIDWORD(v194) + v280 + HIDWORD(v281);
    unint64_t v283 = HIDWORD(v280) + v274 * (unint64_t)HIDWORD(v194) + HIDWORD(v282);
    BOOL v5 = __CFADD__(v279, v283);
    unint64_t v284 = v279 + v283;
    unint64_t v285 = v278 + v5 + v276;
    unint64_t v246 = HIDWORD(v234);
    unsigned int v247 = v234;
    unint64_t v286 = HIDWORD(v234) * (unint64_t)v196;
    unint64_t v287 = v234 * (unint64_t)HIDWORD(v196)
         + v286
         + ((v234 * (unint64_t)v196) >> 32);
    unint64_t v288 = HIDWORD(v287);
    unint64_t v289 = (v234 * v196) | ((unint64_t)v287 << 32);
    unint64_t v290 = HIDWORD(v234) * (unint64_t)v194;
    unint64_t v291 = HIDWORD(v290) + HIDWORD(v234) * (unint64_t)HIDWORD(v194);
    unint64_t v292 = v234 * (unint64_t)HIDWORD(v194)
         + v290
         + ((v234 * (unint64_t)v194) >> 32);
    unint64_t v293 = (v234 * v194) | ((unint64_t)v292 << 32);
    unsigned long long v294 = __PAIR128__(v288, v289)
         + __PAIR128__(v196 + HIDWORD(v234) * (unint64_t)HIDWORD(v196) + HIDWORD(v286), v291 + HIDWORD(v292));
    BOOL v5 = __CFADD__(v293, v284);
    unint64_t v295 = v293 + v284;
    BOOL v297 = v5;
    BOOL v5 = __CFADD__(v5, v289 + v291 + HIDWORD(v292));
    unint64_t v296 = v297 + v289 + v291 + HIDWORD(v292);
    unsigned int v298 = v5;
    BOOL v5 = __CFADD__(v285, v296);
    unint64_t v299 = v285 + v296;
    if (v5) {
      uint64_t v300 = 1;
    }
    else {
      uint64_t v300 = v298;
    }
    unint64_t v263 = v185 + v281 + (v282 << 32);
    BOOL v301 = v263 < v185;
    BOOL v5 = __CFADD__(v188, v301);
    unint64_t v302 = v188 + v301;
    unsigned int v303 = v5;
    unint64_t v265 = v295 + v302;
    if (__CFADD__(v295, v302)) {
      uint64_t v304 = 1;
    }
    else {
      uint64_t v304 = v303;
    }
    BOOL v5 = __CFADD__(v194, v304);
    unint64_t v305 = v194 + v304;
    unsigned int v306 = v5;
    BOOL v5 = __CFADD__(v305, v299);
    unint64_t v269 = v305 + v299;
    if (v5) {
      uint64_t v307 = 1;
    }
    else {
      uint64_t v307 = v306;
    }
    uint64_t v272 = *((void *)&v294 + 1) + v300 + v307;
  }
  else
  {
    unint64_t v235 = HIDWORD(v232);
    unint64_t v236 = HIDWORD(v232) * (unint64_t)v196;
    unint64_t v237 = HIDWORD(v236) + HIDWORD(v232) * (unint64_t)HIDWORD(v196);
    unint64_t v238 = v232 * (unint64_t)HIDWORD(v196)
         + v236
         + ((v232 * (unint64_t)v196) >> 32);
    unint64_t v239 = HIDWORD(v238);
    unint64_t v240 = (v232 * v196) | ((unint64_t)v238 << 32);
    unint64_t v241 = HIDWORD(v232) * (unint64_t)v194;
    unint64_t v242 = v232 * (unint64_t)v194;
    unint64_t v243 = v232 * (unint64_t)HIDWORD(v194) + v241 + HIDWORD(v242);
    unint64_t v244 = v242 | ((unint64_t)v243 << 32);
    unsigned long long v245 = __PAIR128__(v237, v240)
         + __PAIR128__(v239, HIDWORD(v241) + v235 * (unint64_t)HIDWORD(v194) + HIDWORD(v243));
    unint64_t v246 = HIDWORD(v234);
    unsigned int v247 = (unint64_t)v233 >> 1;
    unint64_t v248 = HIDWORD(v234) * (unint64_t)v196;
    unint64_t v249 = HIDWORD(v248);
    unint64_t v250 = v247 * (unint64_t)HIDWORD(v196)
         + v248
         + ((v247 * (unint64_t)v196) >> 32);
    unint64_t v251 = (v247 * v196) | ((unint64_t)v250 << 32);
    unint64_t v252 = HIDWORD(v234) * (unint64_t)v194;
    unint64_t v253 = HIDWORD(v252) + HIDWORD(v234) * (unint64_t)HIDWORD(v194);
    unint64_t v254 = v247 * (unint64_t)HIDWORD(v194)
         + v252
         + ((v247 * (unint64_t)v194) >> 32);
    unint64_t v255 = v253 + HIDWORD(v254);
    unint64_t v256 = (v247 * v194) | ((unint64_t)v254 << 32);
    unint64_t v257 = v251 + v255;
    BOOL v258 = __CFADD__(v251, v255);
    unint64_t v259 = v256 + v245;
    BOOL v5 = __CFADD__(__CFADD__(v256, (void)v245), v257);
    unint64_t v260 = __CFADD__(v256, (void)v245) + v257;
    LODWORD(v261) = v5;
    unint64_t v262 = *((void *)&v245 + 1) + v260;
    if (__CFADD__(*((void *)&v245 + 1), v260)) {
      uint64_t v261 = 1;
    }
    else {
      uint64_t v261 = v261;
    }
    unsigned long long v264 = __PAIR128__(v188, v185) - v244;
    unint64_t v263 = v264;
    unint64_t v265 = *((void *)&v264 + 1) - v259;
    BOOL v267 = *((void *)&v264 + 1) > v188 || *((void *)&v264 + 1) < v259;
    unint64_t v268 = v194 - v267;
    unint64_t v269 = v268 - v262;
    BOOL v271 = v268 < v262 || v268 > v194;
    uint64_t v272 = v196 - (v249 + HIDWORD(v234) * (unint64_t)HIDWORD(v196) + HIDWORD(v250)) - v258 - v261 - v271;
  }
  unint64_t v308 = v234 + (v234 >> 1);
  unint64_t v309 = HIDWORD(v308);
  unint64_t v310 = HIDWORD(v308) * (unint64_t)v247;
  unint64_t v311 = v308 * (unint64_t)v247;
  unint64_t v312 = v308 * (unint64_t)v246 + v310 + HIDWORD(v311);
  unint64_t v313 = HIDWORD(v310) + v309 * (unint64_t)v246 + HIDWORD(v312);
  LODWORD(v310) = v311;
  unint64_t v314 = v312 * (unint64_t)v216;
  unint64_t v315 = v311 * (unint64_t)v216;
  unint64_t v316 = HIDWORD(v314) + v312 * (unint64_t)v215;
  unint64_t v317 = HIDWORD(v315) + v310 * (unint64_t)v215 + v314;
  unint64_t v318 = HIDWORD(v317);
  unint64_t v319 = v315 | ((unint64_t)v317 << 32);
  unint64_t v320 = v312 * (unint64_t)v209;
  unint64_t v321 = v310 * (unint64_t)v209;
  unint64_t v322 = HIDWORD(v321) + v310 * (unint64_t)v208 + v320;
  unint64_t v323 = v321 | ((unint64_t)v322 << 32);
  unsigned long long v324 = __PAIR128__(v316, v319)
       + __PAIR128__(v318, HIDWORD(v320) + v312 * (unint64_t)v208 + HIDWORD(v322));
  unint64_t v325 = HIDWORD(v313);
  unint64_t v326 = HIDWORD(v313) * (unint64_t)v216;
  unint64_t v327 = v313 * (unint64_t)v216;
  unint64_t v328 = v313 * (unint64_t)v215 + v326 + HIDWORD(v327);
  unint64_t v329 = HIDWORD(v328);
  unint64_t v330 = v327 | ((unint64_t)v328 << 32);
  unint64_t v331 = HIDWORD(v313) * (unint64_t)v209;
  unint64_t v332 = v313 * (unint64_t)v209;
  unint64_t v333 = v313 * (unint64_t)v208 + v331 + HIDWORD(v332);
  unint64_t v334 = v332 | ((unint64_t)v333 << 32);
  unsigned long long v335 = __PAIR128__(v329, v330)
       + __PAIR128__(v272 + v325 * (unint64_t)v215 + HIDWORD(v326), HIDWORD(v331) + v325 * (unint64_t)v208 + HIDWORD(v333));
  uint64_t v336 = v334 + v324;
  BOOL v5 = __CFADD__(__CFADD__(v334, (void)v324), v330 + HIDWORD(v331) + v325 * (unint64_t)v208 + HIDWORD(v333));
  unint64_t v337 = __CFADD__(v334, (void)v324)
       + v330
       + HIDWORD(v331)
       + v325 * (unint64_t)v208
       + HIDWORD(v333);
  LODWORD(v33_Block_object_dispose(&STACK[0x940], 8) = v5;
  BOOL v5 = __CFADD__(*((void *)&v324 + 1), v337);
  unint64_t v339 = *((void *)&v324 + 1) + v337;
  if (v5) {
    uint64_t v338 = 1;
  }
  else {
    uint64_t v338 = v338;
  }
  unint64_t v340 = __CFADD__(v263, v323) + v265;
  BOOL v341 = __CFADD__(__CFADD__(v263, v323), v265);
  BOOL v5 = __CFADD__(v340, v336);
  unint64_t v342 = v340 + v336;
  uint64_t v343 = v5 || v341;
  BOOL v5 = __CFADD__(v269, v343);
  unint64_t v344 = v269 + v343;
  unsigned int v345 = v5;
  BOOL v5 = __CFADD__(v344, v339);
  unint64_t v346 = v344 + v339;
  if (v5) {
    uint64_t v347 = 1;
  }
  else {
    uint64_t v347 = v345;
  }
  char v348 = -78 - v181;
  char v349 = v181 - 114;
  unint64_t v350 = (v346 << v349) | (v342 >> v348);
  uint64_t v351 = ((*((void *)&v335 + 1) + v338 + v347) << v349) | (v346 >> v348);
  BOOL v5 = __CFADD__(v350, 1);
  unint64_t v352 = v350 + 1;
  if (v5) {
    unint64_t v353 = v351 + 1;
  }
  else {
    unint64_t v353 = v351;
  }
  *((void *)&v355 + 1) = v353;
  *(void *)&long long v355 = v352;
  unint64_t v354 = v355 >> 1;
  unint64_t v356 = v353 >> 1;
  if ((a3 & 3) == 0)
  {
    *((void *)&v401 + 1) = v164;
    *(void *)&long long v401 = v133;
    unint64_t v400 = v401 >> 62;
    *((void *)&v401 + 1) = v353 >> 1;
    *(void *)&long long v401 = v354;
    unint64_t v402 = v401 >> 63;
    unint64_t v403 = HIDWORD(v402);
    unsigned int v404 = v401 >> 63;
    unint64_t v405 = HIDWORD(v402) * (unint64_t)v404;
    unint64_t v406 = v402 * (unint64_t)v402;
    unint64_t v407 = HIDWORD(v405) + v403 * (unint64_t)v403;
    unint64_t v408 = v405 + v405 + HIDWORD(v406);
    unint64_t v409 = v407 + HIDWORD(v408);
    unint64_t v410 = v406 | ((unint64_t)v408 << 32);
    LODWORD(v40_Block_object_dispose(&STACK[0x940], 8) = v354 >> 31;
    unint64_t v411 = v408 * (unint64_t)v404;
    unint64_t v412 = ((2 * v354) | 1u) * (unint64_t)v404;
    unint64_t v413 = ((2 * v354) | 1u) * (unint64_t)v403 + v411 + HIDWORD(v412);
    unint64_t v414 = HIDWORD(v411) + v408 * (unint64_t)v403 + HIDWORD(v413);
    unint64_t v415 = v412 | ((unint64_t)v413 << 32);
    unint64_t v416 = v409 + (v414 >> 63);
    *((void *)&v401 + 1) = v414;
    *(void *)&long long v401 = v413 << 32;
    uint64_t v417 = v401 >> 63;
    unint64_t v418 = ((2 * v354) | 1u) * (unint64_t)v408;
    unint64_t v419 = v418 + v418 + ((((2 * v354) | 1u) * (unint64_t)((2 * v354) | 1u)) >> 32);
    unint64_t v420 = HIDWORD(v418) + v408 * (unint64_t)v408 + HIDWORD(v419);
    BOOL v5 = __CFADD__(v420, 2 * v415);
    unint64_t v421 = v420 + 2 * v415;
    BOOL v423 = v5;
    BOOL v5 = __CFADD__(v5, v417);
    uint64_t v422 = v423 + v417;
    unsigned int v424 = v5;
    unint64_t v425 = v410 + v422;
    if (__CFADD__(v410, v422)) {
      uint64_t v426 = 1;
    }
    else {
      uint64_t v426 = v424;
    }
    unint64_t v427 = v416 + v426;
    if (v400 > v416 + v426) {
      goto LABEL_261;
    }
    *((void *)&v446 + 1) = v133;
    *(void *)&long long v446 = v130;
    unint64_t v445 = v446 >> 62;
    unint64_t v447 = 4 * v118;
    unint64_t v448 = (((2 * v354) | 1) * ((2 * v354) | 1u)) | ((unint64_t)v419 << 32);
    *((void *)&v446 + 1) = v130;
    *(void *)&long long v446 = v118;
    unint64_t v449 = v446 >> 62;
    if (v400 != v416 + v426) {
      goto LABEL_319;
    }
    if (v445 > v425 || v445 == v425 && (v449 > v421 || (v449 == v421 ? (BOOL v450 = v447 > v448) : (BOOL v450 = 0), v450)))
    {
LABEL_261:
      BOOL v5 = __CFADD__(v354++, 1);
      if (v5) {
        ++v356;
      }
    }
    else
    {
LABEL_319:
      *((void *)&v452 + 1) = v356;
      *(void *)&long long v452 = v354;
      unint64_t v451 = v452 >> 61;
      unsigned long long v453 = __PAIR128__(v421, v448) - 8 * v354;
      unint64_t v454 = *((void *)&v453 + 1) - v451;
      BOOL v456 = *((void *)&v453 + 1) < v451 || *((void *)&v453 + 1) > v421;
      unint64_t v457 = v425 - v456;
      unint64_t v458 = (__PAIR128__(v427, v425) - (v425 - v456)) >> 64;
      if (v458 > v400
        || v458 == v400
        && (v457 > v445
         || v457 == v445 && (v454 > v449 || (v454 == v449 ? (BOOL v460 = (unint64_t)v453 > v447) : (BOOL v460 = 0), v460))))
      {
        unint64_t v356 = (__PAIR128__(v356, v354--) - 1) >> 64;
      }
    }
    goto LABEL_336;
  }
  unint64_t v357 = v353 >> 33;
  unsigned int v358 = v353 >> 1;
  unint64_t v359 = v357 * (unint64_t)v358;
  unint64_t v360 = HIDWORD(v359) + v357 * (unint64_t)v357;
  unint64_t v361 = v359 + v359 + ((v356 * (unint64_t)v356) >> 32);
  unint64_t v362 = v360 + HIDWORD(v361);
  unint64_t v363 = (v356 * v356) | ((unint64_t)v361 << 32);
  unint64_t v364 = HIDWORD(v354) * (unint64_t)v358;
  unint64_t v365 = v354 * (unint64_t)v357;
  unint64_t v366 = HIDWORD(v364) + HIDWORD(v354) * (unint64_t)v357;
  unint64_t v367 = v365 + v364 + ((v354 * (unint64_t)v356) >> 32);
  unint64_t v368 = (v354 * v356) | ((unint64_t)v367 << 32);
  *((void *)&v370 + 1) = v366 + HIDWORD(v367);
  *(void *)&long long v370 = v367 << 32;
  uint64_t v369 = v370 >> 63;
  unint64_t v371 = HIDWORD(v354) * (unint64_t)v354;
  unint64_t v372 = HIDWORD(v371) + HIDWORD(v354) * (unint64_t)HIDWORD(v354);
  unint64_t v373 = v371 + v371 + ((v354 * (unint64_t)v354) >> 32);
  unint64_t v374 = v372 + HIDWORD(v373);
  unint64_t v375 = (v354 * v354) | ((unint64_t)v373 << 32);
  BOOL v5 = __CFADD__(v374, 2 * v368);
  unint64_t v376 = v374 + 2 * v368;
  BOOL v378 = v5;
  BOOL v5 = __CFADD__(v5, v369);
  uint64_t v377 = v378 + v369;
  unsigned int v379 = v5;
  unint64_t v380 = v363 + v377;
  if (__CFADD__(v363, v377)) {
    uint64_t v381 = 1;
  }
  else {
    uint64_t v381 = v379;
  }
  unint64_t v382 = v362 + v381;
  *((void *)&v384 + 1) = v356;
  *(void *)&long long v384 = v354;
  unint64_t v383 = v384 >> 63;
  uint64_t v385 = 2 * v354;
  if (v382 > v164
    || v382 == v164
    && (v380 > v133 || v380 == v133 && (v376 > v130 || (v376 == v130 ? (BOOL v428 = v375 > v118) : (BOOL v428 = 0), v428))))
  {
    unsigned long long v386 = __PAIR128__(v376, v375) - (unint64_t)v385;
    BOOL v5 = *((void *)&v386 + 1) >= v383;
    unint64_t v387 = *((void *)&v386 + 1) - v383;
    uint64_t v389 = !v5 || *((void *)&v386 + 1) > v376;
    unint64_t v390 = v380 - v389;
    unint64_t v391 = (__PAIR128__(v382, v380) - v390) >> 64;
    if (v390 == -1) {
      unint64_t v392 = v391 + 1;
    }
    else {
      unint64_t v392 = v391;
    }
    unint64_t v393 = v387 + 1;
    if (v387 == -1)
    {
      unint64_t v394 = v390 + 1;
    }
    else
    {
      unint64_t v392 = v391;
      unint64_t v394 = v390;
    }
    if (v387 == -1) {
      unint64_t v393 = 0;
    }
    if ((void)v386 == -1) {
      unint64_t v395 = v392;
    }
    else {
      unint64_t v395 = v391;
    }
    if ((void)v386 == -1) {
      unint64_t v396 = v394;
    }
    else {
      unint64_t v396 = v390;
    }
    if ((void)v386 == -1) {
      unint64_t v397 = v393;
    }
    else {
      unint64_t v397 = v387;
    }
    unint64_t v356 = (__PAIR128__(v356, v354) - 1) >> 64;
    unint64_t v398 = v354 - 1;
    if (v395 > v164
      || v395 == v164
      && (v396 > v133
       || v396 == v133 && (v397 > v130 || (v397 == v130 ? (BOOL v399 = (uint64_t)v386 + 1 > v118) : (BOOL v399 = 0), v399))))
    {
      unint64_t v356 = (__PAIR128__(v356, v354 - 1) - 1) >> 64;
      unint64_t v398 = v354 - 2;
    }
    goto LABEL_328;
  }
  unint64_t v429 = v375 + v385;
  BOOL v5 = __CFADD__(__CFADD__(v375, v385), v376);
  unint64_t v430 = __CFADD__(v375, v385) + v376;
  unsigned int v431 = v5;
  BOOL v5 = __CFADD__(v430, v383);
  unint64_t v432 = v430 + v383;
  if (v5) {
    uint64_t v433 = 1;
  }
  else {
    uint64_t v433 = v431;
  }
  BOOL v5 = __CFADD__(v380, v433);
  unint64_t v434 = v380 + v433;
  if (v5) {
    unint64_t v435 = v382 + 1;
  }
  else {
    unint64_t v435 = v382;
  }
  if (v434 == -1) {
    unint64_t v436 = v435 + 1;
  }
  else {
    unint64_t v436 = v435;
  }
  unint64_t v437 = v432 + 1;
  if (v432 == -1)
  {
    unint64_t v438 = v434 + 1;
  }
  else
  {
    unint64_t v436 = v435;
    unint64_t v438 = v434;
  }
  if (v432 == -1) {
    unint64_t v437 = 0;
  }
  BOOL v439 = __CFADD__(v429, 1);
  unint64_t v440 = v429 + 1;
  if (v429 == -1) {
    unint64_t v441 = v436;
  }
  else {
    unint64_t v441 = v435;
  }
  if (v439) {
    unint64_t v442 = v438;
  }
  else {
    unint64_t v442 = v434;
  }
  if (v439) {
    unint64_t v443 = v437;
  }
  else {
    unint64_t v443 = v432;
  }
  if (v441 < v164) {
    goto LABEL_308;
  }
  if (v441 != v164) {
    goto LABEL_327;
  }
  if (v442 < v133) {
    goto LABEL_308;
  }
  if (v442 == v133)
  {
    if (v443 < v130 || (v443 == v130 ? (v444 = v440 > v118) : (v444 = 1), unint64_t v398 = v354, !v444))
    {
LABEL_308:
      unint64_t v398 = v354 + 1;
      if (v354 == -1) {
        ++v356;
      }
    }
  }
  else
  {
LABEL_327:
    unint64_t v398 = v354;
  }
LABEL_328:
  if (v398 == -1) {
    unint64_t v459 = v356 + 1;
  }
  else {
    unint64_t v459 = v356;
  }
  if (a3 == 2) {
    unint64_t v354 = v398 + 1;
  }
  else {
    unint64_t v354 = v398;
  }
  if (a3 == 2) {
    unint64_t v356 = v459;
  }
LABEL_336:
  my_fpsf |= 0x20u;
  if (v354 == 0x378D8E6400000000 && v356 == 0x1ED09BEAD87C0) {
    return 0x38C15B0A00000000;
  }
  else {
    return v354;
  }
}

uint64_t __bid128_to_string(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  v154[3] = *MEMORY[0x1E4F143B8];
  if ((~a3 & 0x7800000000000000) == 0)
  {
    if ((~a3 & 0x7C00000000000000) != 0)
    {
      BOOL v5 = (unsigned char *)(result + 4);
      if (a3 < 0) {
        int v12 = 1718503725;
      }
      else {
        int v12 = 1718503723;
      }
      *(_DWORD *)uint64_t result = v12;
    }
    else
    {
      if (a3 >= 0) {
        char v4 = 43;
      }
      else {
        char v4 = 45;
      }
      *(unsigned char *)uint64_t result = v4;
      if ((~a3 & 0x7E00000000000000) != 0)
      {
        BOOL v5 = (unsigned char *)(result + 4);
        *(_WORD *)(result + 1) = 24910;
        *(unsigned char *)(result + 3) = 78;
      }
      else
      {
        *(_DWORD *)(result + 1) = 1314999891;
        BOOL v5 = (unsigned char *)(result + 5);
      }
    }
    goto LABEL_190;
  }
  unint64_t v6 = a3 & 0x1FFFFFFFFFFFFLL;
  if (a3 & 0x1FFFFFFFFFFFFLL | a2)
  {
    unint64_t v7 = 4 * a3;
    if ((a3 & 0x6000000000000000) != 0x6000000000000000) {
      unint64_t v7 = a3;
    }
    uint64_t v8 = (v7 >> 49) & 0x3FFF;
    unsigned int v9 = v8 - 6176;
    if (a3 < 0) {
      char v10 = 45;
    }
    else {
      char v10 = 43;
    }
    *(unsigned char *)uint64_t result = v10;
    if (v6 > 0x1ED09BEAD87C0
      || (a2 > 0x378D8E63FFFFFFFFLL ? (BOOL v17 = v6 == 0x1ED09BEAD87C0) : (BOOL v17 = 0),
          !v17 ? (int v18 = 0) : (int v18 = 1),
          (a3 & 0x6000000000000000) == 0x6000000000000000 || v18))
    {
      *(unsigned char *)(result + 1) = 48;
      unsigned int v11 = 2;
LABEL_179:
      *(unsigned char *)(v3 + v11) = 69;
      unsigned int v135 = 6176 - v8;
      BOOL v136 = v8 >> 5 >= 0xC1;
      if (v8 >> 5 >= 0xC1) {
        char v137 = 43;
      }
      else {
        char v137 = 45;
      }
      if (v136) {
        unsigned int v135 = v9;
      }
      *(unsigned char *)(v3 + v11 + 1) = v137;
      unsigned int v138 = v11 + 2;
      signed int v139 = (16778 * v135) >> 24;
      uint64_t v140 = -1000 * v139 + (int)v135;
      if (v135 >= 0x3E8)
      {
        *(unsigned char *)(v3 + v13_Block_object_dispose(&STACK[0x940], 8) = v139 + 48;
        uint64_t v143 = 3 * (int)v140;
        *(unsigned char *)(v3 + v11 + 3) = __bid_char_table3[v143];
        unint64_t v144 = &__bid_char_table3[(int)v143];
        unsigned int v138 = v11 + 5;
        *(unsigned char *)(v3 + v11 + 4) = v144[1];
        char v141 = v144[2];
        int v142 = 6;
      }
      else if (v140 > 9)
      {
        if (v140 > 0x63)
        {
          uint64_t v146 = 3 * v140;
          *(unsigned char *)(v3 + v13_Block_object_dispose(&STACK[0x940], 8) = __bid_char_table3[v146];
          unint64_t v147 = &__bid_char_table3[(int)v146];
          unsigned int v138 = v11 + 4;
          *(unsigned char *)(v3 + v11 + 3) = v147[1];
          char v141 = v147[2];
          int v142 = 5;
        }
        else
        {
          int v145 = 2 * v140;
          *(unsigned char *)(v3 + v13_Block_object_dispose(&STACK[0x940], 8) = __bid_char_table2[v145 - 20];
          unsigned int v138 = v11 + 3;
          char v141 = __bid_char_table2[v145 - 19];
          int v142 = 4;
        }
      }
      else
      {
        char v141 = v140 + 48;
        int v142 = 3;
      }
      *(unsigned char *)(v3 + v13_Block_object_dispose(&STACK[0x940], 8) = v141;
      BOOL v5 = (unsigned char *)(v3 + v11 + v142);
      goto LABEL_190;
    }
    unint64_t v19 = a2 & 0x7FFFFFFFFFFFFFFLL;
    *((void *)&v21 + 1) = a3 & 0x1FFFFFFFFFFFFLL;
    *(void *)&long long v21 = a2;
    unint64_t v20 = v21 >> 59;
    if (!v20) {
      goto LABEL_48;
    }
    unint64_t v22 = 0;
    unint64_t v23 = (char *)&__bid_mod10_18_tbl;
    do
    {
      unint64_t v24 = &v23[16 * (v20 & 0x3F)];
      v19 += *((void *)v24 + 1);
      v22 += *(void *)v24 + (((v19 + 0x21F494C589C0000) & 0x1000000000000000) >> 60);
      if (((v19 + 0x21F494C589C0000) & 0x1000000000000000) != 0) {
        unint64_t v19 = (v19 + 0x21F494C589C0000) & 0xFFFFFFFFFFFFFFFLL;
      }
      v23 += 1024;
      BOOL v25 = v20 > 0x3F;
      v20 >>= 6;
    }
    while (v25);
    if (v22)
    {
      if (v22 >= 0x3B9ACA00)
      {
        unint64_t v39 = (2305843009u * (v22 >> 28)) >> 33;
        unint64_t v40 = v22 - 1000000000 * (int)v39;
        if (v40 <= 0x3B9AC9FF) {
          LODWORD(v22) = ((2305843009u * (v22 >> 28)) >> 32) >> 1;
        }
        else {
          LODWORD(v22) = v39 + 1;
        }
        if (v40 <= 0x3B9AC9FF) {
          int v41 = 0;
        }
        else {
          int v41 = -1000000000;
        }
        unsigned int v42 = v41 + v40;
        if (v22 >= 0xF4240)
        {
          unsigned int v75 = (34359 * (v22 >> 17)) >> 18;
          unsigned int v76 = v22 - 1000000 * v75;
          unsigned int v77 = v76 - 1000000;
          if (v76 > 0xF423F)
          {
            LODWORD(v22) = v75 + 1;
          }
          else
          {
            unsigned int v77 = v76;
            LODWORD(v22) = v75;
          }
          unsigned int v78 = (v77 & 0x3FF) + 32 * (v77 >> 10) - 8 * (v77 >> 10);
          int v79 = (v78 >> 10) + (v77 >> 10);
          unsigned int v80 = (v78 & 0x3FF) + 32 * (v78 >> 10) - 8 * (v78 >> 10);
          if (v80 > 0x3E7)
          {
            ++v79;
            v80 -= 1000;
          }
          unsigned int v149 = v79;
          unsigned int v150 = v80;
          unsigned int v81 = (34359 * (v42 >> 17)) >> 18;
          unsigned int v82 = v42 - 1000000 * v81;
          if (v82 > 0xF423F)
          {
            v82 -= 1000000;
            ++v81;
          }
          unsigned int v83 = (v82 & 0x3FF) + 32 * (v82 >> 10) - 8 * (v82 >> 10);
          int v84 = (v83 >> 10) + (v82 >> 10);
          unsigned int v85 = (v83 & 0x3FF) + 32 * (v83 >> 10) - 8 * (v83 >> 10);
          if (v85 > 0x3E7)
          {
            ++v84;
            v85 -= 1000;
          }
          unsigned int v151 = v81;
          unsigned int v152 = v84;
          unint64_t v26 = (unsigned int *)v154;
          unsigned int v153 = v85;
        }
        else if (v22 >= 0x3E8)
        {
          unsigned int v100 = (v22 & 0x3FF) + 32 * (v22 >> 10) - 8 * (v22 >> 10);
          LODWORD(v22) = (v100 >> 10) + (v22 >> 10);
          unsigned int v101 = (v100 & 0x3FF) + 32 * (v100 >> 10) - 8 * (v100 >> 10);
          if (v101 > 0x3E7)
          {
            LODWORD(v22) = v22 + 1;
            v101 -= 1000;
          }
          unsigned int v102 = (34359 * (v42 >> 17)) >> 18;
          unsigned int v103 = v42 - 1000000 * v102;
          if (v103 > 0xF423F)
          {
            v103 -= 1000000;
            ++v102;
          }
          unsigned int v104 = (v103 & 0x3FF) + 32 * (v103 >> 10) - 8 * (v103 >> 10);
          int v105 = (v104 >> 10) + (v103 >> 10);
          unsigned int v106 = (v104 & 0x3FF) + 32 * (v104 >> 10) - 8 * (v104 >> 10);
          if (v106 <= 0x3E7)
          {
            int v107 = v105;
          }
          else
          {
            v106 -= 1000;
            int v107 = v105 + 1;
          }
          unsigned int v149 = v101;
          unsigned int v150 = v102;
          unint64_t v26 = &v153;
          unsigned int v151 = v107;
          unsigned int v152 = v106;
        }
        else
        {
          unsigned int v43 = (34359 * (v42 >> 17)) >> 18;
          unsigned int v44 = v42 - 1000000 * v43;
          if (v44 > 0xF423F)
          {
            v44 -= 1000000;
            ++v43;
          }
          unsigned int v45 = (v44 & 0x3FF) + 32 * (v44 >> 10) - 8 * (v44 >> 10);
          int v46 = (v45 >> 10) + (v44 >> 10);
          unsigned int v47 = (v45 & 0x3FF) + 32 * (v45 >> 10) - 8 * (v45 >> 10);
          if (v47 > 0x3E7)
          {
            ++v46;
            v47 -= 1000;
          }
          unsigned int v149 = v43;
          unsigned int v150 = v46;
          unint64_t v26 = &v152;
          unsigned int v151 = v47;
        }
      }
      else if (v22 >= 0xF4240)
      {
        unsigned int v68 = (34359 * (v22 >> 17)) >> 18;
        unsigned int v69 = v22 - 1000000 * v68;
        unsigned int v70 = v69 - 1000000;
        if (v69 > 0xF423F)
        {
          LODWORD(v22) = v68 + 1;
        }
        else
        {
          unsigned int v70 = v69;
          LODWORD(v22) = v68;
        }
        unsigned int v71 = (v70 & 0x3FF) + 32 * (v70 >> 10) - 8 * (v70 >> 10);
        int v72 = (v71 >> 10) + (v70 >> 10);
        unsigned int v73 = (v71 & 0x3FF) + 32 * (v71 >> 10) - 8 * (v71 >> 10);
        unsigned int v74 = v73 - 1000;
        if (v73 <= 0x3E7) {
          unsigned int v74 = v73;
        }
        else {
          ++v72;
        }
        unint64_t v26 = &v151;
        unsigned int v149 = v72;
        unsigned int v150 = v74;
      }
      else if (v22 >= 0x3E8)
      {
        unsigned int v97 = (v22 & 0x3FF) + 32 * (v22 >> 10) - 8 * (v22 >> 10);
        LODWORD(v22) = (v97 >> 10) + (v22 >> 10);
        unsigned int v98 = (v97 & 0x3FF) + 32 * (v97 >> 10) - 8 * (v97 >> 10);
        unsigned int v99 = v98 - 1000;
        if (v98 <= 0x3E7) {
          unsigned int v99 = v98;
        }
        else {
          LODWORD(v22) = v22 + 1;
        }
        unint64_t v26 = &v150;
        unsigned int v149 = v99;
      }
      else
      {
        unint64_t v26 = &v149;
      }
      unint64_t v108 = (2305843009u * (v19 >> 28)) >> 33;
      unint64_t v109 = v19 - 1000000000 * (int)v108;
      if (v109 <= 0x3B9AC9FF) {
        unsigned int v110 = v108;
      }
      else {
        unsigned int v110 = v108 + 1;
      }
      if (v109 <= 0x3B9AC9FF) {
        int v111 = 0;
      }
      else {
        int v111 = -1000000000;
      }
      unsigned int v112 = v111 + v109;
      unsigned int v113 = (34359 * (v110 >> 17)) >> 18;
      unsigned int v114 = v110 - 1000000 * v113;
      if (v114 > 0xF423F)
      {
        v114 -= 1000000;
        ++v113;
      }
      unsigned int v115 = (v114 & 0x3FF) + 32 * (v114 >> 10) - 8 * (v114 >> 10);
      int v116 = (v115 >> 10) + (v114 >> 10);
      unsigned int v117 = (v115 & 0x3FF) + 32 * (v115 >> 10) - 8 * (v115 >> 10);
      if (v117 > 0x3E7)
      {
        ++v116;
        v117 -= 1000;
      }
      *unint64_t v26 = v113;
      v26[1] = v116;
      unsigned int v118 = (34359 * (v112 >> 17)) >> 18;
      unsigned int v119 = v112 - 1000000 * v118;
      if (v119 <= 0xF423F)
      {
        unsigned int v120 = v118;
      }
      else
      {
        v119 -= 1000000;
        unsigned int v120 = v118 + 1;
      }
      unsigned int v121 = (v119 & 0x3FF) + 32 * (v119 >> 10) - 8 * (v119 >> 10);
      int v122 = (v121 >> 10) + (v119 >> 10);
      unsigned int v123 = (v121 & 0x3FF) + 32 * (v121 >> 10) - 8 * (v121 >> 10);
      if (v123 > 0x3E7) {
        ++v122;
      }
      v26[2] = v117;
      void v26[3] = v120;
      if (v123 > 0x3E7) {
        v123 -= 1000;
      }
      unsigned int v27 = (char *)(v26 + 6);
      void v26[4] = v122;
      uint64_t v26[5] = v123;
      LODWORD(v19) = v22;
    }
    else
    {
LABEL_48:
      if (v19 >= 0x3B9ACA00)
      {
        unint64_t v28 = (2305843009u * (v19 >> 28)) >> 33;
        unint64_t v29 = v19 - 1000000000 * (int)v28;
        if (v29 <= 0x3B9AC9FF) {
          LODWORD(v19) = ((2305843009u * (v19 >> 28)) >> 32) >> 1;
        }
        else {
          LODWORD(v19) = v28 + 1;
        }
        if (v29 <= 0x3B9AC9FF) {
          int v30 = 0;
        }
        else {
          int v30 = -1000000000;
        }
        unsigned int v31 = v30 + v29;
        if (v19 >= 0xF4240)
        {
          unsigned int v55 = (34359 * (v19 >> 17)) >> 18;
          unsigned int v56 = v19 - 1000000 * v55;
          unsigned int v57 = v56 - 1000000;
          if (v56 > 0xF423F)
          {
            LODWORD(v19) = v55 + 1;
          }
          else
          {
            unsigned int v57 = v56;
            LODWORD(v19) = v55;
          }
          unsigned int v58 = (v57 & 0x3FF) + 32 * (v57 >> 10) - 8 * (v57 >> 10);
          int v59 = (v58 >> 10) + (v57 >> 10);
          unsigned int v60 = (v58 & 0x3FF) + 32 * (v58 >> 10) - 8 * (v58 >> 10);
          if (v60 > 0x3E7)
          {
            ++v59;
            v60 -= 1000;
          }
          unsigned int v149 = v59;
          unsigned int v150 = v60;
          unsigned int v61 = (34359 * (v31 >> 17)) >> 18;
          unsigned int v62 = v31 - 1000000 * v61;
          if (v62 <= 0xF423F) {
            unsigned int v63 = v62;
          }
          else {
            unsigned int v63 = v62 - 1000000;
          }
          if (v62 <= 0xF423F) {
            unsigned int v64 = v61;
          }
          else {
            unsigned int v64 = v61 + 1;
          }
          unsigned int v65 = (v63 & 0x3FF) + 32 * (v63 >> 10) - 8 * (v63 >> 10);
          int v66 = (v65 >> 10) + (v63 >> 10);
          unsigned int v67 = (v65 & 0x3FF) + 32 * (v65 >> 10) - 8 * (v65 >> 10);
          if (v67 > 0x3E7)
          {
            ++v66;
            v67 -= 1000;
          }
          unsigned int v151 = v64;
          unsigned int v152 = v66;
          unsigned int v27 = (char *)v154;
          unsigned int v153 = v67;
        }
        else if (v19 >= 0x3E8)
        {
          unsigned int v88 = (v19 & 0x3FF) + 32 * (v19 >> 10) - 8 * (v19 >> 10);
          LODWORD(v19) = (v88 >> 10) + (v19 >> 10);
          unsigned int v89 = (v88 & 0x3FF) + 32 * (v88 >> 10) - 8 * (v88 >> 10);
          if (v89 > 0x3E7)
          {
            v89 -= 1000;
            LODWORD(v19) = v19 + 1;
          }
          unsigned int v90 = (34359 * (v31 >> 17)) >> 18;
          unsigned int v91 = v31 - 1000000 * v90;
          if (v91 <= 0xF423F) {
            unsigned int v92 = v91;
          }
          else {
            unsigned int v92 = v91 - 1000000;
          }
          if (v91 <= 0xF423F) {
            unsigned int v93 = v90;
          }
          else {
            unsigned int v93 = v90 + 1;
          }
          unsigned int v94 = (v92 & 0x3FF) + 32 * (v92 >> 10) - 8 * (v92 >> 10);
          int v95 = (v94 >> 10) + (v92 >> 10);
          unsigned int v96 = (v94 & 0x3FF) + 32 * (v94 >> 10) - 8 * (v94 >> 10);
          if (v96 > 0x3E7)
          {
            ++v95;
            v96 -= 1000;
          }
          unsigned int v149 = v89;
          unsigned int v150 = v93;
          unsigned int v27 = (char *)&v153;
          unsigned int v151 = v95;
          unsigned int v152 = v96;
        }
        else
        {
          unsigned int v32 = (34359 * (v31 >> 17)) >> 18;
          unsigned int v33 = v31 - 1000000 * v32;
          if (v33 <= 0xF423F) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v33 - 1000000;
          }
          if (v33 <= 0xF423F) {
            unsigned int v35 = v32;
          }
          else {
            unsigned int v35 = v32 + 1;
          }
          unsigned int v36 = (v34 & 0x3FF) + 32 * (v34 >> 10) - 8 * (v34 >> 10);
          int v37 = (v36 >> 10) + (v34 >> 10);
          unsigned int v38 = (v36 & 0x3FF) + 32 * (v36 >> 10) - 8 * (v36 >> 10);
          if (v38 > 0x3E7)
          {
            ++v37;
            v38 -= 1000;
          }
          unsigned int v149 = v35;
          unsigned int v150 = v37;
          unsigned int v27 = (char *)&v152;
          unsigned int v151 = v38;
        }
      }
      else if (v19 >= 0xF4240)
      {
        unsigned int v48 = (34359 * (v19 >> 17)) >> 18;
        unsigned int v49 = v19 - 1000000 * v48;
        if (v49 <= 0xF423F) {
          unsigned int v50 = v49;
        }
        else {
          unsigned int v50 = v49 - 1000000;
        }
        if (v49 <= 0xF423F) {
          LODWORD(v19) = v48;
        }
        else {
          LODWORD(v19) = v48 + 1;
        }
        unsigned int v51 = (v50 & 0x3FF) + 32 * (v50 >> 10) - 8 * (v50 >> 10);
        int v52 = (v51 >> 10) + (v50 >> 10);
        unsigned int v53 = (v51 & 0x3FF) + 32 * (v51 >> 10) - 8 * (v51 >> 10);
        unsigned int v54 = v53 - 1000;
        if (v53 <= 0x3E7) {
          unsigned int v54 = v53;
        }
        else {
          ++v52;
        }
        unsigned int v27 = (char *)&v151;
        unsigned int v149 = v52;
        unsigned int v150 = v54;
      }
      else if (v19 >= 0x3E8)
      {
        unsigned int v86 = (v19 & 0x3FF) + 32 * (v19 >> 10) - 8 * (v19 >> 10);
        LODWORD(v19) = (v86 >> 10) + (v19 >> 10);
        unsigned int v87 = (v86 & 0x3FF) + 32 * (v86 >> 10) - 8 * (v86 >> 10);
        if (v87 > 0x3E7)
        {
          LODWORD(v19) = v19 + 1;
          v87 -= 1000;
        }
        unsigned int v27 = (char *)&v150;
        unsigned int v149 = v87;
      }
      else
      {
        unsigned int v27 = (char *)&v149;
      }
    }
    unint64_t v124 = (char *)&__bid_midi_tbl + 3 * v19;
    if (v19 < 0x64)
    {
      uint64_t v127 = 2;
      if (v19 < 0xA)
      {
        uint64_t result = v3 + 1;
        goto LABEL_173;
      }
      uint64_t v126 = 3;
      unint64_t v125 = (unsigned char *)(v3 + 1);
    }
    else
    {
      unint64_t v125 = (unsigned char *)(v3 + 2);
      *(unsigned char *)(v3 + 1) = *v124;
      uint64_t v126 = 4;
      uint64_t v127 = 3;
    }
    uint64_t result = v3 + v127;
    unsigned char *v125 = v124[1];
    uint64_t v127 = v126;
LABEL_173:
    uint64_t v128 = v3 + v127;
    *(unsigned char *)uint64_t result = v124[2];
    if ((int)((unint64_t)(v27 - v148) >> 2) < 2)
    {
      int v134 = v3 + v127;
    }
    else
    {
      uint64_t v129 = ((unint64_t)(v27 - v148) >> 2) - 1;
      unint64_t v130 = &v149;
      do
      {
        unsigned int v131 = *v130++;
        BOOL v132 = (char *)&__bid_midi_tbl + 3 * v131;
        *(_WORD *)uint64_t v128 = *(_WORD *)v132;
        char v133 = v132[2];
        int v134 = v128 + 3;
        *(unsigned char *)(v128 + 2) = v133;
        v128 += 3;
        --v129;
      }
      while (v129);
    }
    unsigned int v11 = v134 - v3;
    goto LABEL_179;
  }
  if (a3 < 0) {
    char v13 = 45;
  }
  else {
    char v13 = 43;
  }
  *(unsigned char *)uint64_t result = v13;
  *(_WORD *)(result + 1) = 17712;
  uint64_t v14 = ((unint64_t)a3 >> 49) & 0x3FFF;
  if (((((unint64_t)a3 >> 49) >> 12) & 3) == 3) {
    LODWORD(v14) = ((unint64_t)a3 >> 47) & 0x3FFF;
  }
  int v15 = v14 - 6176;
  if (v14 >> 5 < 0xC1)
  {
    uint64_t result = sprintf((char *)(result + 3), "%d", v15);
    int v16 = result + 3;
  }
  else
  {
    *(unsigned char *)(result + 3) = 43;
    uint64_t result = sprintf((char *)(result + 4), "%u", v15);
    int v16 = result + 4;
  }
  BOOL v5 = (unsigned char *)(v3 + v16);
LABEL_190:
  *BOOL v5 = 0;
  return result;
}

void *bid_get_BID128_1188(void *result, uint64_t a2, int a3, unint64_t a4, unint64_t a5, int *a6, _DWORD *a7)
{
  uint64_t v7 = 0x378D8E63FFFFFFFFLL;
  if (a4 == 0x378D8E6400000000 && a5 == 0x1ED09BEAD87C0) {
    unint64_t v8 = 0x38C15B0A00000000;
  }
  else {
    unint64_t v8 = a4;
  }
  uint64_t v9 = (a4 == 0x378D8E6400000000 && a5 == 0x1ED09BEAD87C0) + a3;
  if (a4 == 0x378D8E6400000000 && a5 == 0x1ED09BEAD87C0) {
    unint64_t v10 = 0x314DC6448D93;
  }
  else {
    unint64_t v10 = a5;
  }
  if (v9 < 0x3000) {
    goto LABEL_68;
  }
  if ((v9 & 0x80000000) != 0)
  {
    if (v9 > 0xFFFFFFDD)
    {
      unsigned int v15 = -(int)v9;
      BOOL v16 = (*a6 - 1) >= 2 || a2 == 0;
      if (v16) {
        int v17 = *a6;
      }
      else {
        int v17 = 3 - *a6;
      }
      unsigned long long v18 = __bid_round_const_table_128[36 * v17 + v15] + __PAIR128__(v10, v8);
      unint64_t v19 = (unint64_t *)((char *)&__bid_reciprocals10_128 + 16 * v15);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      unint64_t v22 = v21 * (unint64_t)DWORD1(v18);
      unint64_t v23 = HIDWORD(v22);
      unint64_t v24 = HIDWORD(v21) * (unint64_t)v18
          + v22
          + ((v21 * (unint64_t)v18) >> 32);
      unint64_t v25 = (v21 * v18) | ((unint64_t)v24 << 32);
      unint64_t v26 = DWORD2(v18) * HIDWORD(*v19);
      unint64_t v27 = HIDWORD(v18) * (unint64_t)v20
          + v26
          + ((DWORD2(v18) * (unint64_t)v20) >> 32);
      unint64_t v28 = (DWORD2(v18) * *v19) | ((unint64_t)v27 << 32);
      unint64_t v29 = *v19 * (unint64_t)DWORD1(v18);
      unint64_t v30 = HIDWORD(v20) * (unint64_t)v18
          + v29
          + ((v20 * (unint64_t)v18) >> 32);
      unint64_t v31 = HIDWORD(v29) + HIDWORD(*v19) * DWORD1(v18) + HIDWORD(v30);
      unint64_t v32 = (*v19 * v18) | ((unint64_t)v30 << 32);
      unint64_t v33 = HIDWORD(v18) * (unint64_t)v21;
      unint64_t v34 = HIDWORD(v33) + HIDWORD(v18) * (unint64_t)HIDWORD(v21);
      unint64_t v35 = DWORD2(v18) * (unint64_t)HIDWORD(v21)
          + v33
          + ((DWORD2(v18) * (unint64_t)v21) >> 32);
      unint64_t v36 = HIDWORD(v35);
      unint64_t v37 = (DWORD2(v18) * v21) | ((unint64_t)v35 << 32);
      BOOL v38 = __CFADD__(v25, v28);
      unint64_t v39 = v25 + v28 + v31;
      unsigned long long v40 = __PAIR128__(v34, v37)
          + __PAIR128__(v36, (__PAIR128__(v23+ HIDWORD(v21) * (unint64_t)DWORD1(v18)+ HIDWORD(v18) * (unint64_t)HIDWORD(v20)+ HIDWORD(v26)+ HIDWORD(v24)+ HIDWORD(v27), v25 + v28)+ __PAIR128__(v38, v31)) >> 64);
      int v41 = __bid_recip_scale[v15];
      unint64_t v42 = (*((void *)&v40 + 1) << -(char)v41) | ((unint64_t)v40 >> v41);
      unint64_t v43 = (unint64_t)((__PAIR128__(v34, v37)
                              + __PAIR128__(v36, (__PAIR128__(v23+ HIDWORD(v21) * (unint64_t)DWORD1(v18)+ HIDWORD(v18) * (unint64_t)HIDWORD(v20)+ HIDWORD(v26)+ HIDWORD(v24)+ HIDWORD(v27), v25 + v28)+ __PAIR128__(v38, v31)) >> 64)) >> 64) >> v41;
      if (v41 >= 64)
      {
        unint64_t v42 = *((void *)&v40 + 1) >> v41;
        unint64_t v43 = 0;
      }
      if (!*a6 && (v42 & 1) != 0)
      {
        unint64_t v44 = (*((void *)&v40 + 1) << -(char)v41) | ((unint64_t)v40 >> v41);
        if (v41 >= 65)
        {
          BOOL v45 = (void)v40 << -(char)v41 != 0;
        }
        else
        {
          unint64_t v44 = (void)v40 << -(char)v41;
          BOOL v45 = 0;
        }
        if (!v44 && !v45 && (v39 < v21 || v39 == v21 && v32 < v20)) {
          --v42;
        }
      }
      if ((*a7 & 0x20) != 0)
      {
        int v55 = 16;
      }
      else
      {
        char v46 = 0x80 - v41;
        unint64_t v47 = (*((void *)&v40 + 1) << (0x80 - v41)) | ((unint64_t)v40 >> v41);
        if (v41 >= 65)
        {
          unint64_t v48 = (void)v40 << (0x80 - v41);
        }
        else
        {
          unint64_t v47 = (void)v40 << -(char)v41;
          unint64_t v48 = 0;
        }
        switch(v17)
        {
          case 0:
          case 4:
            if (v47 == 0x8000000000000000 && v48 == 0) {
              goto LABEL_75;
            }
            goto LABEL_107;
          case 1:
          case 3:
            if (v47 | v48) {
              goto LABEL_107;
            }
LABEL_75:
            BOOL v56 = v39 == v21;
            if (v39 >= v21)
            {
              int v55 = 48;
              if (!v56 || v32 >= v20) {
                break;
              }
            }
            goto LABEL_109;
          default:
            BOOL v12 = __CFADD__(__CFADD__(v32, v20), v39);
            unint64_t v57 = __CFADD__(v32, v20) + v39;
            unsigned int v58 = v12;
            if (__CFADD__(v57, v21)) {
              uint64_t v59 = 1;
            }
            else {
              uint64_t v59 = v58;
            }
            unint64_t v60 = v47 >> -(char)v41;
            char v61 = v41 - 64;
            unint64_t v62 = (v48 >> v46) | (v47 << v41);
            unint64_t v63 = v47 >> v46;
            if (v41 < 65)
            {
              unint64_t v64 = 0;
            }
            else
            {
              char v61 = v41 - 64;
              unint64_t v64 = v63;
            }
            if (v41 < 65) {
              unint64_t v62 = v60;
            }
            unint64_t v65 = 1 << v61;
            if (v41 < 64) {
              unint64_t v65 = 0;
            }
            unint64_t v66 = v62 + v59;
            if (__CFADD__(v62, v59)) {
              unint64_t v67 = v64 + 1;
            }
            else {
              unint64_t v67 = v64;
            }
            if (v67 > v65) {
              goto LABEL_109;
            }
            unint64_t v68 = v66 >> v41;
            BOOL v69 = v41 < 64 && v68 == 0;
            BOOL v70 = v69;
            if (v67 == v65 && !v70) {
              goto LABEL_109;
            }
LABEL_107:
            int v55 = 48;
            break;
        }
      }
      *a7 |= v55;
LABEL_109:
      result[1] = v43 | a2;
    }
    else
    {
      *a7 |= 0x30u;
      *uint64_t result = 0;
      result[1] = a2;
      int v14 = *a6;
      if (a2)
      {
        if (v14 != 1) {
          return result;
        }
      }
      else if (v14 != 2)
      {
        return result;
      }
      unint64_t v42 = 1;
    }
    *uint64_t result = v42;
    return result;
  }
  if (v9 > 0x3021) {
    goto LABEL_58;
  }
  while (1)
  {
    if (v10 < 0x314DC6448D93)
    {
      if ((int)v9 < 12288) {
        goto LABEL_68;
      }
      goto LABEL_16;
    }
    if (v10 != 0x314DC6448D93) {
      goto LABEL_57;
    }
    if (v8 >= 0x38C15B0A00000000 || (int)v9 < 12288) {
      break;
    }
LABEL_16:
    uint64_t v11 = 10 * v8;
    BOOL v12 = 10 * v8 >= 8 * v8;
    uint64_t v13 = (v8 >> 63) + (v8 >> 61) + 10 * v10;
    if (v12) {
      unint64_t v10 = v13;
    }
    else {
      unint64_t v10 = v13 + 1;
    }
    uint64_t v9 = (v9 - 1);
    unint64_t v8 = v11;
  }
  unint64_t v10 = 0x314DC6448D93;
LABEL_57:
  if ((int)v9 < 12288)
  {
LABEL_68:
    *uint64_t result = v8;
    result[1] = v10 | (v9 << 49) | a2;
    return result;
  }
LABEL_58:
  if (v8 | v10)
  {
    uint64_t v50 = 0x5FFFED09BEAD87C0;
    *a7 |= 0x28u;
    int v51 = *a6;
    if (a2) {
      int v52 = 2;
    }
    else {
      int v52 = 1;
    }
    BOOL v16 = v51 == v52;
    uint64_t v53 = 0x7800000000000000;
    if (v16)
    {
      uint64_t v53 = 0x5FFFED09BEAD87C0;
      uint64_t v54 = 0x378D8E63FFFFFFFFLL;
    }
    else
    {
      uint64_t v54 = 0;
    }
    if (v51 != 3)
    {
      uint64_t v50 = v53;
      uint64_t v7 = v54;
    }
    *uint64_t result = v7;
    result[1] = v50 | a2;
  }
  else
  {
    *uint64_t result = 0;
    result[1] = a2 | 0x5FFE000000000000;
  }
  return result;
}

unint64_t __bid128_tan(unint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = a1;
  __n128 v120 = 0uLL;
  if ((~a2 & 0x6000000000000000) != 0)
  {
    int v6 = (((unint64_t)a2 >> 49) & 0x3FFF) - 6176;
    unint64_t v7 = a2 & 0x1FFFFFFFFFFFFLL;
    if ((a2 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0 || a1 >= 0x378D8E6400000000 && v7 == 0x1ED09BEAD87C0)
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    else
    {
      unint64_t v8 = a1;
    }
LABEL_17:
    if (v8 | v7) {
      int v9 = v6;
    }
    else {
      int v9 = -53;
    }
    if (v9 > -36)
    {
      unint64_t v118 = (unint64_t)a2 >> 63;
      uint64_t v11 = (uint64_t *)((char *)&bid_decimal128_moduli_1191 + 48 * (v9 + 35));
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      unint64_t v16 = v11[4];
      uint64_t v117 = v11[5];
      unint64_t v17 = HIDWORD(*v11);
      unsigned int v18 = *v11;
      unint64_t v19 = ((v12 * (unint64_t)HIDWORD(v8)) >> 32)
          + HIDWORD(v12) * (unint64_t)HIDWORD(v8)
          + ((HIDWORD(v12) * (unint64_t)v8
            + (v12 * HIDWORD(v8))
            + ((v12 * (unint64_t)v8) >> 32)) >> 32);
      unint64_t v20 = HIDWORD(v13);
      unint64_t v21 = v13 * (unint64_t)HIDWORD(v8);
      unint64_t v22 = HIDWORD(v21) + HIDWORD(v13) * (unint64_t)HIDWORD(v8);
      unint64_t v23 = HIDWORD(v13) * (unint64_t)v8
          + v21
          + ((v13 * (unint64_t)v8) >> 32);
      unint64_t v24 = v22 + HIDWORD(v23);
      unint64_t v25 = (v13 * v8) | ((unint64_t)v23 << 32);
      unint64_t v26 = HIDWORD(v15);
      unint64_t v27 = v15 * (unint64_t)HIDWORD(v8);
      unint64_t v28 = HIDWORD(v27) + HIDWORD(v15) * (unint64_t)HIDWORD(v8);
      unint64_t v29 = HIDWORD(v15) * (unint64_t)v8
          + v27
          + ((v15 * (unint64_t)v8) >> 32);
      unint64_t v30 = v28 + HIDWORD(v29);
      unint64_t v31 = (v15 * v8) | ((unint64_t)v29 << 32);
      unint64_t v32 = HIDWORD(v14);
      unint64_t v33 = v14 * (unint64_t)HIDWORD(v8);
      unint64_t v34 = HIDWORD(v33) + HIDWORD(v14) * (unint64_t)HIDWORD(v8);
      unint64_t v35 = HIDWORD(v14) * (unint64_t)v8
          + v33
          + ((v14 * (unint64_t)v8) >> 32);
      unint64_t v36 = v34 + HIDWORD(v35);
      unint64_t v37 = (v14 * v8) | ((unint64_t)v35 << 32);
      unint64_t v38 = HIDWORD(v16);
      unint64_t v39 = v16 * (unint64_t)HIDWORD(v8);
      unsigned int v119 = a3;
      unint64_t v40 = HIDWORD(v16) * (unint64_t)v8
          + v39
          + ((v16 * (unint64_t)v8) >> 32);
      unint64_t v41 = (v16 * v8) | ((unint64_t)v40 << 32);
      unsigned long long v42 = __PAIR128__(v31, v19) + v25;
      BOOL v43 = __CFADD__(__CFADD__(v19, v25), v31);
      BOOL v44 = __CFADD__(v24, *((void *)&v42 + 1));
      unint64_t v45 = v24 + *((void *)&v42 + 1);
      uint64_t v46 = v44 || v43;
      BOOL v44 = __CFADD__(v37, v46);
      unint64_t v47 = v37 + v46;
      unsigned int v48 = v44;
      unint64_t v49 = v30 + v47;
      if (__CFADD__(v30, v47)) {
        uint64_t v50 = 1;
      }
      else {
        uint64_t v50 = v48;
      }
      BOOL v44 = __CFADD__(v41, v50);
      unint64_t v51 = v41 + v50;
      LODWORD(v52) = v44;
      unint64_t v53 = v36 + v51;
      if (__CFADD__(v36, v51)) {
        uint64_t v52 = 1;
      }
      else {
        uint64_t v52 = v52;
      }
      unint64_t v54 = HIDWORD(v7);
      unint64_t v55 = v18 * (unint64_t)HIDWORD(v7);
      unint64_t v56 = v12 * (unint64_t)v7;
      unint64_t v57 = HIDWORD(v55) + v17 * (unint64_t)HIDWORD(v7);
      unint64_t v58 = v17 * (unint64_t)v7 + v55 + HIDWORD(v56);
      unint64_t v59 = v57 + HIDWORD(v58);
      unint64_t v60 = v56 | ((unint64_t)v58 << 32);
      unint64_t v61 = v13 * (unint64_t)HIDWORD(v7);
      unint64_t v62 = v13 * (unint64_t)v7;
      unint64_t v63 = v20 * (unint64_t)v7;
      unint64_t v64 = HIDWORD(v61) + v20 * (unint64_t)HIDWORD(v7);
      unint64_t v65 = v63 + v61 + HIDWORD(v62);
      unint64_t v66 = v64 + HIDWORD(v65);
      unint64_t v67 = v62 | ((unint64_t)v65 << 32);
      unint64_t v68 = v15 * (unint64_t)HIDWORD(v7);
      unint64_t v69 = v15 * (unint64_t)v7;
      unint64_t v70 = HIDWORD(v68) + v26 * (unint64_t)HIDWORD(v7);
      unint64_t v71 = v26 * (unint64_t)v7 + v68 + HIDWORD(v69);
      unint64_t v72 = v70 + HIDWORD(v71);
      unint64_t v73 = v69 | ((unint64_t)v71 << 32);
      unint64_t v74 = v14 * (unint64_t)HIDWORD(v7);
      unint64_t v75 = v14 * (unint64_t)v7;
      unint64_t v76 = v32 * (unint64_t)v7 + v74 + HIDWORD(v75);
      unint64_t v77 = v75 | ((unint64_t)v76 << 32);
      unint64_t v78 = v16 * v7;
      unsigned long long v79 = __PAIR128__(v73, v59) + v67;
      LODWORD(v80) = __CFADD__(__CFADD__(v59, v67), v73);
      unint64_t v81 = v66 + *((void *)&v79 + 1);
      if (__CFADD__(v66, *((void *)&v79 + 1))) {
        uint64_t v80 = 1;
      }
      else {
        uint64_t v80 = v80;
      }
      BOOL v44 = __CFADD__(v77, v80);
      unint64_t v82 = v77 + v80;
      LODWORD(v83) = v44;
      BOOL v44 = __CFADD__(v72, v82);
      unint64_t v84 = v72 + v82;
      if (v44) {
        uint64_t v83 = 1;
      }
      else {
        uint64_t v83 = v83;
      }
      uint64_t v85 = __CFADD__(v60, (void)v42) + (void)v79;
      LODWORD(v86) = __CFADD__(__CFADD__(v60, (void)v42), (void)v79);
      BOOL v44 = __CFADD__(v45, v85);
      uint64_t v87 = v45 + v85;
      if (v44) {
        uint64_t v86 = 1;
      }
      else {
        uint64_t v86 = v86;
      }
      BOOL v44 = __CFADD__(v81, v86);
      unint64_t v88 = v81 + v86;
      LODWORD(v89) = v44;
      BOOL v44 = __CFADD__(v88, v49);
      unint64_t v90 = v88 + v49;
      if (v44) {
        uint64_t v89 = 1;
      }
      else {
        uint64_t v89 = v89;
      }
      BOOL v44 = __CFADD__(v84, v89);
      unint64_t v91 = v84 + v89;
      LODWORD(v92) = v44;
      BOOL v44 = __CFADD__(v91, v53);
      unint64_t v93 = v91 + v53;
      if (v44) {
        uint64_t v92 = 1;
      }
      else {
        uint64_t v92 = v92;
      }
      unint64_t v94 = v78
          + v32 * (unint64_t)v54
          + HIDWORD(v74)
          + v38 * (unint64_t)HIDWORD(v8)
          + v117 * v8
          + HIDWORD(v39)
          + HIDWORD(v76)
          + HIDWORD(v40)
          + v83
          + v52
          + v92;
      unint64_t v95 = v94 >> 62;
      *((void *)&v97 + 1) = v94;
      *(void *)&long long v97 = v93;
      uint64_t v96 = v97 >> 62;
      *((void *)&v97 + 1) = v93;
      *(void *)&long long v97 = v90;
      unint64_t v98 = v97 >> 62;
      *((void *)&v97 + 1) = v90;
      *(void *)&long long v97 = v87;
      unint64_t v99 = v97 >> 62;
      unint64_t v100 = 4 * v87;
      int v101 = ((v94 >> 62) + 1) & 3;
      if (v96 >= 0)
      {
        uint64_t v102 = v118;
      }
      else
      {
        LODWORD(v95) = v101;
        uint64_t v102 = v118 ^ 1;
      }
      if (v96 >= 0) {
        unint64_t v103 = v96;
      }
      else {
        unint64_t v103 = ~v96;
      }
      if (v96 < 0)
      {
        unint64_t v98 = ~v98;
        unint64_t v99 = ~v99;
        unint64_t v100 = ~v100;
      }
      if (a2 >= 0) {
        int v104 = v95;
      }
      else {
        int v104 = -(int)v95 & 3;
      }
      if (v103) {
        int v105 = 16382;
      }
      else {
        int v105 = 16318;
      }
      if (v103) {
        unint64_t v106 = v103;
      }
      else {
        unint64_t v106 = v98;
      }
      if (v103) {
        unint64_t v100 = v99;
      }
      else {
        unint64_t v98 = v99;
      }
      int8x16_t v107 = (int8x16_t)vdupq_n_s64(v106);
      int8x16_t v108 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v107, (int8x16_t)xmmword_1BDDB5720), (uint64x2_t)vandq_s8(v107, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v107, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v107, (int8x16_t)xmmword_1BDDB5750))));
      *(int8x8_t *)v108.i8 = vorr_s8(*(int8x8_t *)v108.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL));
      __int32 v109 = v108.i32[0] | v108.i32[1] | (2 * ((v106 & 0xCCCCCCCCCCCCCCCCLL) <= (v106 & 0x3333333333333333))) | ((v106 & 0xAAAAAAAAAAAAAAAALL) <= (v106 & 0x5555555555555555));
      unint64_t v110 = (v100 >> -(char)v109) + (v98 << v109);
      if (v109) {
        unint64_t v106 = (v98 >> -(char)v109) + (v106 << v109);
      }
      else {
        unint64_t v110 = v98;
      }
      *((void *)&v111 + 1) = v106;
      *(void *)&long long v111 = v110;
      v121.n128_u64[0] = v111 >> 15;
      v121.n128_u64[1] = ((unint64_t)(v105 - v109) << 48) | (v102 << 63) | (v106 >> 15) & 0xFFFFFFFFFFFFLL;
      bid_f128_mul(&v121, (uint64_t *)&c_pi_ov_2_1192, (uint64_t *)&v121);
      switch(v104)
      {
        case 0:
        case 2:
          __dpml_bid_C_ux_trig__((uint64_t *)&v121, 0, 4, qword_1BDDBD058, &v120, v124);
          break;
        case 1:
        case 3:
          __dpml_bid_C_ux_trig__((uint64_t *)&v121, 0, 4, qword_1BDDBD058, &v120, v124);
          bid_f128_div(&v120, (uint64_t *)&c_neg_one, (uint64_t *)&v120);
          break;
        default:
          break;
      }
      unint64_t v114 = v120.n128_u64[1];
      unint64_t v113 = v120.n128_u64[0];
      int v115 = v119;
    }
    else
    {
      if (v9 <= 0xFFFFFFCB) {
        return bid128_ext_fma(v124, (int *)&v121, &v123, &v122, a1, a2, 1uLL, 0x2FF0000000000000, a1, a2, a3, &my_fpsf);
      }
      v121.n128_u64[0] = __bid128_to_binary128(a1, a2, a3, &my_fpsf);
      v121.n128_u64[1] = v112;
      __dpml_bid_C_ux_trig__((uint64_t *)&v121, 0, 4, qword_1BDDBD058, &v120, v124);
      unint64_t v114 = v120.n128_u64[1];
      unint64_t v113 = v120.n128_u64[0];
      int v115 = a3;
    }
    return __binary128_to_bid128(v113, v114, v115, &my_fpsf);
  }
  if ((~a2 & 0x7800000000000000) != 0)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    int v6 = 0;
    goto LABEL_17;
  }
  if ((~a2 & 0x7C00000000000000) != 0)
  {
    unint64_t v5 = 0;
    my_fpsf |= 1u;
  }
  else
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFuLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
  }
  return v5;
}

unint64_t __bid128_tgamma(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a1;
  if ((~a2 & 0x7C00000000000000) == 0)
  {
    if ((~a2 & 0x7E00000000000000) == 0) {
      my_fpsf |= 1u;
    }
    if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
      || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
    {
      return 0;
    }
    return v4;
  }
  if (__bid128_isZero(a1, a2))
  {
    unint64_t v4 = 0;
    my_fpsf |= 4u;
    return v4;
  }
  if ((~a2 & 0x7800000000000000) == 0)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      return 0;
    }
LABEL_16:
    unint64_t v4 = 0;
    my_fpsf |= 1u;
    return v4;
  }
  if (__bid128_quiet_less_equal(v4, a2, 0, 0, &my_fpsf))
  {
    unint64_t v7 = __bid128_round_integral_nearest_even(v4, a2, &my_fpsf);
    unint64_t v9 = __bid128_sub(v4, a2, v7, v8, a3, &my_fpsf);
    if (__bid128_isZero(v9, v10)) {
      goto LABEL_16;
    }
  }
  unint64_t v11 = __bid128_lgamma(v4, a2, a3);
  unint64_t v14 = __bid128_exp(v11, v12, a3, &my_fpsf);
  if ((a2 & 0x8000000000000000) != 0 && (v13 & 0x7C00000000000000) != 0x7C00000000000000)
  {
    unint64_t v15 = __bid128_round_integral_zero(v4, a2, &my_fpsf);
    if (((v16 >> 49) & 0x3FFF) < 0x1820) {
      __bid128_add(0x7182B61400000000uLL, 0x3040629B8C891B26, v15, v16, a3, &my_fpsf);
    }
  }
  return v14;
}

uint64_t __bid128_to_int32_int(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  if ((~a2 & 0x7800000000000000) == 0) {
    goto LABEL_2;
  }
  unint64_t v4 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFuLL) > 0x1ED09BEAD87C0) {
    return 0;
  }
  unint64_t v3 = 0;
  BOOL v7 = a1 > 0x378D8E63FFFFFFFFLL && v4 == 0x1ED09BEAD87C0;
  if (v4 | a1 && (a2 & 0x6000000000000000) != 0x6000000000000000 && !v7)
  {
    unint64_t v8 = HIDWORD(a1);
    if (a1 >> 53)
    {
      int v9 = -990;
    }
    else
    {
      unint64_t v8 = a1;
      int v9 = -1022;
    }
    if (v4) {
      unint64_t v8 = a2 & 0x1FFFFFFFFFFFFLL;
    }
    unint64_t v10 = (COERCE_UNSIGNED_INT64((double)v8) >> 52) & 0x7FF;
    if (v4) {
      int v9 = -958;
    }
    uint64_t v11 = (v10 + v9 - 1);
    int v12 = *((_DWORD *)&__bid_nr_digits + 8 * v11);
    if (!v12)
    {
      uint64_t v13 = (char *)&__bid_nr_digits + 32 * v11;
      int v12 = *((_DWORD *)v13 + 6);
      unint64_t v14 = *((void *)v13 + 1);
      if (v4 > v14 || v4 == v14 && *((void *)&__bid_nr_digits + 4 * v11 + 2) <= a1) {
        ++v12;
      }
    }
    uint64_t v15 = ((unint64_t)a2 >> 49) & 0x3FFF;
    int v16 = v12 + v15 - 6176;
    if (v16 >= 11) {
      goto LABEL_2;
    }
    if (v16 == 10)
    {
      int v17 = v12 - 11;
      if ((a2 & 0x8000000000000000) == 0)
      {
        if (v12 <= 11)
        {
          if ((__bid_ten2k64[11 - v12] * a1) >> 32 < 5) {
            goto LABEL_34;
          }
LABEL_2:
          *a3 |= 1u;
          return 0x80000000;
        }
        if (v12 > 0x1E)
        {
          unsigned long long v79 = &__bid_ten2k128[2 * (v12 - 31)];
          unint64_t v81 = *v79;
          unint64_t v80 = v79[1];
          unint64_t v82 = HIDWORD(*v79);
          uint64_t v21 = *v79;
          unint64_t v22 = 4 * v82 + HIDWORD(v81) + 0x500000000 * v80 + ((4 * v21 + (unint64_t)v81) >> 32);
        }
        else
        {
          unint64_t v20 = __bid_ten2k64[v17];
          LODWORD(v21) = v20;
          unint64_t v22 = 5 * HIDWORD(v20) + ((5 * (unint64_t)v20) >> 32);
        }
        if (v4 > v22) {
          goto LABEL_2;
        }
        unint64_t v76 = (unint64_t)(5 * v21) << 32;
        BOOL v83 = v4 == v22;
        goto LABEL_79;
      }
      if (v12 > 11)
      {
        if (v12 > 0x1E)
        {
          uint64_t v85 = &__bid_ten2k128[2 * (v12 - 31)];
          unint64_t v86 = 5 * *v85;
          unint64_t v87 = 10 * HIDWORD(*v85) + 5 * *v85 + ((2 * v86) >> 32);
          unint64_t v76 = (2 * v86) & 0xFFFFFFFE | (v87 << 32);
          unint64_t v75 = 5 * HIDWORD(*v85) + 0x50000000ALL * v85[1] + HIDWORD(v86) + HIDWORD(v87);
        }
        else
        {
          unint64_t v69 = __bid_ten2k64[v17];
          unint64_t v70 = HIDWORD(v69);
          unint64_t v71 = 5 * v69;
          int v72 = 10 * v69;
          uint64_t v73 = 5 * HIDWORD(v69) + HIDWORD(v71);
          unint64_t v74 = 10 * v70 + v71 + ((2 * v71) >> 32);
          unint64_t v75 = v73 + HIDWORD(v74);
          unint64_t v76 = v72 & 0xFFFFFFFE | (v74 << 32);
        }
        BOOL v83 = v4 == v75;
        if (v4 > v75) {
          goto LABEL_2;
        }
LABEL_79:
        if (v83 && v76 <= a1) {
          goto LABEL_2;
        }
        goto LABEL_34;
      }
      if (__bid_ten2k64[11 - v12] * a1 > 0x500000009) {
        goto LABEL_2;
      }
    }
    else if (v16 < 1)
    {
      return 0;
    }
LABEL_34:
    if (v15 >> 5 > 0xC0)
    {
      if (v15 == 6176)
      {
        if (a2 >= 0) {
          return a1;
        }
        else {
          return -(uint64_t)a1;
        }
      }
      unint64_t v3 = __bid_ten2k64[(v15 - 6176)] * a1;
      goto LABEL_100;
    }
    if (v15 < 0x180D)
    {
      unint64_t v19 = (uint64_t *)&__bid_midpoint128[(6156 - v15)];
      v4 += v19[1];
      uint64_t v18 = (6175 - v15);
    }
    else
    {
      uint64_t v18 = (6175 - v15);
      unint64_t v19 = &__bid_midpoint64[v18];
    }
    uint64_t v23 = *v19;
    unint64_t v24 = v23 + a1;
    if (__CFADD__(v23, a1)) {
      unint64_t v25 = v4 + 1;
    }
    else {
      unint64_t v25 = v4;
    }
    unint64_t v26 = HIDWORD(v24);
    unint64_t v27 = &__bid_ten2mk128[2 * v18];
    unint64_t v29 = *v27;
    unint64_t v28 = v27[1];
    unint64_t v30 = HIDWORD(v28);
    unint64_t v31 = HIDWORD(v24) * (unint64_t)v28;
    unint64_t v32 = HIDWORD(v31) + HIDWORD(v24) * (unint64_t)HIDWORD(v28);
    unint64_t v33 = v24 * (unint64_t)HIDWORD(v28)
        + v31
        + ((v24 * (unint64_t)v28) >> 32);
    unint64_t v34 = HIDWORD(v33);
    unint64_t v35 = (v24 * v28) | ((unint64_t)v33 << 32);
    unint64_t v36 = HIDWORD(v29);
    unint64_t v37 = v29 * (unint64_t)HIDWORD(v24);
    unint64_t v38 = v29 * (unint64_t)v24;
    unint64_t v39 = HIDWORD(v29) * (unint64_t)v24 + v37 + HIDWORD(v38);
    unint64_t v40 = v38 | ((unint64_t)v39 << 32);
    unsigned long long v41 = __PAIR128__(v32, v35)
        + __PAIR128__(v34, HIDWORD(v37) + HIDWORD(v29) * (unint64_t)v26 + HIDWORD(v39));
    unint64_t v42 = HIDWORD(v25);
    LODWORD(v35) = v25;
    unint64_t v43 = HIDWORD(v25) * (unint64_t)v28;
    unint64_t v44 = v25 * (unint64_t)v28;
    unint64_t v45 = v25 * (unint64_t)v30;
    unint64_t v46 = HIDWORD(v43) + HIDWORD(v25) * (unint64_t)v30;
    unint64_t v47 = v45 + v43 + HIDWORD(v44);
    unint64_t v48 = HIDWORD(v47);
    unint64_t v49 = v44 | ((unint64_t)v47 << 32);
    unint64_t v50 = HIDWORD(v25) * (unint64_t)v29;
    unint64_t v51 = v25 * (unint64_t)v29;
    unint64_t v52 = v35 * (unint64_t)HIDWORD(v29) + v50 + HIDWORD(v51);
    unint64_t v53 = v51 | ((unint64_t)v52 << 32);
    unint64_t v55 = v49 + HIDWORD(v50) + v42 * (unint64_t)v36 + HIDWORD(v52);
    uint64_t v54 = (__PAIR128__(v46, v49)
         + __PAIR128__(v48, HIDWORD(v50) + v42 * (unint64_t)v36 + HIDWORD(v52))) >> 64;
    BOOL v56 = __CFADD__(v53, (void)v41);
    unint64_t v58 = v53 + v41;
    uint64_t v57 = (__PAIR128__(v55, v53) + (unint64_t)v41) >> 64;
    BOOL v59 = __CFADD__(v56, v55);
    unint64_t v60 = *((void *)&v41 + 1) + v57;
    uint64_t v61 = __CFADD__(*((void *)&v41 + 1), v57) || v59;
    unint64_t v62 = v54 + v61;
    uint64_t v63 = __bid_maskhigh128[v18];
    if (v15 >> 1 >= 0xC05)
    {
      unint64_t v64 = v63 & v60;
      unint64_t v65 = (v62 << -(char)__bid_shiftright128[v18]) | (v60 >> __bid_shiftright128[v18]);
      if (v15 < 0x181D)
      {
        unint64_t v84 = __bid_onehalf128[v18];
        if (v64 <= v84)
        {
          unint64_t v66 = 0;
          BOOL v68 = 1;
          if (v64 != v84 || !(v58 | v40)) {
            goto LABEL_90;
          }
        }
      }
      else if (v58 <= 0x8000000000000000)
      {
        unint64_t v66 = 0;
        if (v40) {
          BOOL v67 = v58 == 0x8000000000000000;
        }
        else {
          BOOL v67 = 0;
        }
        BOOL v68 = !v67;
        goto LABEL_90;
      }
      unint64_t v66 = 0;
      BOOL v68 = 0;
      goto LABEL_90;
    }
    unint64_t v66 = v63 & v62;
    unint64_t v65 = v62 >> __bid_shiftright128[v18];
    unint64_t v77 = __bid_onehalf128[v18];
    if (v66 > v77)
    {
      BOOL v78 = 0;
      BOOL v68 = 0;
LABEL_96:
      uint64_t v89 = v68 || v78;
      unint64_t v3 = v65 - v89;
LABEL_100:
      if (a2 < 0) {
        return -(uint64_t)v3;
      }
      return v3;
    }
    BOOL v68 = v66 != v77 || !(v58 | v40 | v60);
    unint64_t v64 = v60;
LABEL_90:
    BOOL v78 = 0;
    if (!v66 && !v64 && v58 | v40)
    {
      if (__PAIR128__(v58, v40) <= __bid_ten2mk128trunc[v18])
      {
        BOOL v68 = 0;
        BOOL v78 = (v65 & 1) == 0;
        v65 &= ~1uLL;
      }
      else
      {
        BOOL v78 = 0;
      }
    }
    goto LABEL_96;
  }
  return v3;
}

unint64_t __bid128_to_uint64_int(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if ((~a2 & 0x7800000000000000) == 0) {
    goto LABEL_2;
  }
  unint64_t v4 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
    return 0;
  }
  unint64_t v3 = 0;
  BOOL v7 = a1 > 0x378D8E63FFFFFFFFLL && v4 == 0x1ED09BEAD87C0;
  if (v4 | a1 && (a2 & 0x6000000000000000) != 0x6000000000000000 && !v7)
  {
    if (a1 >> 53) {
      unint64_t v8 = HIDWORD(a1);
    }
    else {
      unint64_t v8 = a1;
    }
    if (a1 >> 53) {
      int v9 = -990;
    }
    else {
      int v9 = -1022;
    }
    if (v4) {
      unint64_t v8 = a2 & 0x1FFFFFFFFFFFFLL;
    }
    unint64_t v10 = (COERCE_UNSIGNED_INT64((double)v8) >> 52) & 0x7FF;
    if (v4) {
      int v9 = -958;
    }
    uint64_t v11 = (v10 + v9 - 1);
    int v12 = *((_DWORD *)&__bid_nr_digits + 8 * v11);
    if (!v12)
    {
      uint64_t v13 = (char *)&__bid_nr_digits + 32 * v11;
      int v12 = *((_DWORD *)v13 + 6);
      unint64_t v14 = *((void *)v13 + 1);
      if (v4 > v14 || v4 == v14 && *((void *)&__bid_nr_digits + 4 * v11 + 2) <= a1) {
        ++v12;
      }
    }
    uint64_t v15 = (a2 >> 49) & 0x3FFF;
    int v16 = v12 + v15 - 6176;
    if (v16 >= 21) {
      goto LABEL_2;
    }
    if (v16 == 20)
    {
      if ((a2 & 0x8000000000000000) != 0) {
        goto LABEL_2;
      }
      if (v12 == 1)
      {
        unint64_t v17 = 5 * a1
            + 1808227885 * HIDWORD(a1)
            + ((1661992960 * (unint64_t)HIDWORD(a1)) >> 32)
            + ((((1661992960 * HIDWORD(a1)) & 0xFFF00000)
              + 1808227885 * a1
              + ((1661992960 * (unint64_t)a1) >> 32)) >> 32);
      }
      else
      {
        if (v12 > 19)
        {
          if (v12 == 21)
          {
            if (v4 >= 0xA) {
              goto LABEL_2;
            }
          }
          else if (v12 == 20)
          {
            if (v4) {
              goto LABEL_2;
            }
          }
          else if (v4 >= 10 * __bid_ten2k64[v12 - 21])
          {
            goto LABEL_2;
          }
LABEL_42:
          if (v15 >> 5 > 0xC0)
          {
            unint64_t v3 = a1;
            if (v15 != 6176) {
              return __bid_ten2k64[(v15 - 6176)] * a1;
            }
          }
          else
          {
            unint64_t v19 = __bid_ten2mk128[2 * (6175 - v15)];
            unint64_t v20 = __bid_ten2mk128[2 * (6175 - v15) + 1];
            unint64_t v21 = HIDWORD(v20);
            unint64_t v22 = v20 * (unint64_t)HIDWORD(a1);
            unint64_t v23 = HIDWORD(v22) + HIDWORD(v20) * (unint64_t)HIDWORD(a1);
            unint64_t v24 = HIDWORD(v20) * (unint64_t)a1
                + v22
                + ((v20 * (unint64_t)a1) >> 32);
            unint64_t v25 = HIDWORD(v24);
            unint64_t v26 = (v20 * a1) | ((unint64_t)v24 << 32);
            unint64_t v27 = HIDWORD(v19);
            uint64_t v29 = (__PAIR128__(v23, v26)
                 + __PAIR128__(v25, ((v19 * (unint64_t)HIDWORD(a1)) >> 32)+ HIDWORD(v19) * (unint64_t)HIDWORD(a1)+ ((HIDWORD(v19) * (unint64_t)a1+ (v19 * HIDWORD(a1))+ ((v19 * (unint64_t)a1) >> 32)) >> 32))) >> 64;
            unint64_t v28 = v26
                + ((v19 * (unint64_t)HIDWORD(a1)) >> 32)
                + HIDWORD(v19) * (unint64_t)HIDWORD(a1)
                + ((HIDWORD(v19) * (unint64_t)a1
                  + (v19 * HIDWORD(a1))
                  + ((v19 * (unint64_t)a1) >> 32)) >> 32);
            unint64_t v30 = HIDWORD(v4);
            unint64_t v31 = v20 * (unint64_t)v30;
            unint64_t v32 = v20 * (unint64_t)a2;
            unint64_t v33 = v21 * (unint64_t)a2;
            unint64_t v34 = HIDWORD(v31) + v21 * (unint64_t)v30;
            unint64_t v35 = v33 + v31 + HIDWORD(v32);
            unint64_t v36 = HIDWORD(v35);
            unint64_t v37 = v32 | ((unint64_t)v35 << 32);
            unint64_t v38 = v19 * (unint64_t)v30;
            unint64_t v39 = v19 * (unint64_t)a2;
            unint64_t v40 = HIDWORD(v38) + v27 * (unint64_t)v30;
            unint64_t v41 = v27 * (unint64_t)a2 + v38 + HIDWORD(v39);
            unint64_t v42 = v39 | ((unint64_t)v41 << 32);
            unsigned long long v43 = __PAIR128__(v34, v37) + __PAIR128__(v36, v40 + HIDWORD(v41));
            BOOL v44 = __CFADD__(__CFADD__(v42, v28), v37 + v40 + HIDWORD(v41));
            unint64_t v45 = __CFADD__(v42, v28) + v37 + v40 + HIDWORD(v41);
            unsigned int v46 = v44;
            unint64_t v47 = v29 + v45;
            if (__CFADD__(v29, v45)) {
              uint64_t v48 = 1;
            }
            else {
              uint64_t v48 = v46;
            }
            unint64_t v49 = *((void *)&v43 + 1) + v48;
            int v50 = __bid_shiftright128[(6175 - v15)];
            if (v15 >> 1 < 0xC05) {
              return v49 >> v50;
            }
            else {
              return (v49 << -(char)v50) | (v47 >> v50);
            }
          }
          return v3;
        }
        uint64_t v18 = __bid_ten2k64[21 - v12];
        unint64_t v17 = ((v18 * (unint64_t)HIDWORD(a1)) >> 32)
            + HIDWORD(v18) * (unint64_t)HIDWORD(a1)
            + ((HIDWORD(v18) * (unint64_t)a1
              + (v18 * HIDWORD(a1))
              + ((v18 * (unint64_t)a1) >> 32)) >> 32);
      }
      if (v17 < 0xA) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v16 < 1) {
        return 0;
      }
      if ((a2 & 0x8000000000000000) == 0) {
        goto LABEL_42;
      }
    }
LABEL_2:
    *a3 |= 1u;
    return 0x8000000000000000;
  }
  return v3;
}

double __bid128_to_binary64(unint64_t a1, unint64_t a2, int a3, int *a4)
{
  if ((~a2 & 0x6000000000000000) == 0)
  {
    if ((~a2 & 0x7800000000000000) == 0)
    {
      if ((~a2 & 0x7C00000000000000) == 0)
      {
        if ((a2 & 0x200000000000000) != 0) {
          *a4 |= 1u;
        }
        if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
          || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
        {
          unint64_t v4 = a2 & 0x8000000000000000;
        }
        else
        {
          *((void *)&v27 + 1) = a2;
          *(void *)&long long v27 = a1;
          unint64_t v4 = a2 & 0x8000000000000000 | ((unint64_t)(v27 >> 46) >> 13);
        }
        unint64_t v6 = v4 | 0x7FF8000000000000;
        return *(double *)&v6;
      }
LABEL_78:
      unint64_t v6 = a2 & 0x8000000000000000 | 0x7FF0000000000000;
      return *(double *)&v6;
    }
LABEL_11:
    unint64_t v6 = a2 & 0x8000000000000000;
    return *(double *)&v6;
  }
  uint64_t v5 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
    goto LABEL_11;
  }
  BOOL v8 = (a2 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a1 > 0x378D8E63FFFFFFFFLL;
  if (v8 || !(v5 | a1)) {
    goto LABEL_11;
  }
  uint64_t v9 = (a2 >> 49) & 0x3FFF;
  if (v5)
  {
    int8x16_t v10 = (int8x16_t)vdupq_n_s64(a2);
    int8x16_t v11 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB57B0), (uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB57C0), (uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB57D0))));
    int v12 = 2 * ((a2 & 0xCCCCCCCCCCCCLL) <= (a2 & 0x1333333333333));
    BOOL v13 = (a2 & 0xAAAAAAAAAAAALL) <= (a2 & 0x1555555555555);
  }
  else
  {
    int8x16_t v14 = (int8x16_t)vdupq_n_s64(a1);
    int v12 = 2 * ((a1 & 0xCCCCCCCCCCCCCCCCLL) <= (a1 & 0x3333333333333333));
    BOOL v13 = (a1 & 0xAAAAAAAAAAAAAAAALL) <= (a1 & 0x5555555555555555);
    int8x16_t v11 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1BDDB57E0), (uint64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1BDDB57F0)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1BDDB5750))), (int8x16_t)xmmword_1BDDB5810, (int8x16_t)xmmword_1BDDB5800);
  }
  int8x8_t v15 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  unsigned int v16 = v15.i32[0] | v12 | v15.i32[1] | v13;
  unsigned int v17 = v16 - 15;
  if (v16 != 15)
  {
    if (v16 < 0x4F)
    {
      uint64_t v5 = (v5 << v17) + (a1 >> (79 - v16));
      a1 <<= v17;
    }
    else
    {
      uint64_t v5 = a1 << (v16 - 79);
      a1 = 0;
    }
  }
  if (v9 >= 0x1955)
  {
LABEL_72:
    *a4 |= 0x28u;
    if (a3 == 3 || ((a2 & 0x8000000000000000) == 0 ? (int v110 = 1) : (int v110 = 2), v110 == a3))
    {
      unint64_t v6 = a2 & 0x8000000000000000 | 0x7FEFFFFFFFFFFFFFLL;
      return *(double *)&v6;
    }
    goto LABEL_78;
  }
  unint64_t v18 = a2 >> 63;
  *((void *)&v20 + 1) = v5;
  *(void *)&long long v20 = a1;
  unint64_t v19 = v20 >> 58;
  unint64_t v21 = a1 << 6;
  if (v9 >= 0x16BB) {
    int v22 = v9 - 6176;
  }
  else {
    int v22 = -358;
  }
  uint64_t v23 = v22;
  unint64_t v24 = (char *)&bid_breakpoints_binary64 + 16 * v22;
  int v25 = bid_exponents_binary64[v22 + 358] - v17;
  if (__PAIR128__(v19, v21) > *((_OWORD *)v24 + 358))
  {
    ++v25;
    unint64_t v26 = (char *)&unk_1BDE197C0;
  }
  else
  {
    unint64_t v26 = (char *)&unk_1BDE14440;
  }
  unint64_t v28 = &v26[32 * v23];
  uint64_t v30 = *(void *)v28;
  unint64_t v29 = *((void *)v28 + 1);
  unint64_t v31 = HIDWORD(v21);
  unsigned int v32 = a1 << 6;
  uint64_t v33 = HIDWORD(*(void *)v28);
  unsigned int v34 = *(void *)v28;
  unint64_t v35 = ((v34 * (unint64_t)v31) >> 32)
      + v33 * (unint64_t)v31
      + ((v33 * (unint64_t)v32 + v34 * v31 + ((v34 * (unint64_t)v32) >> 32)) >> 32);
  unint64_t v36 = HIDWORD(v29);
  unint64_t v37 = v29 * (unint64_t)v31;
  unint64_t v38 = v29 * (unint64_t)(a1 << 6);
  unint64_t v39 = *((void *)v28 + 2);
  uint64_t v40 = *((void *)v28 + 3);
  unint64_t v41 = HIDWORD(v37) + HIDWORD(v29) * (unint64_t)v31;
  unint64_t v42 = HIDWORD(v29) * (unint64_t)v32 + v37 + HIDWORD(v38);
  unint64_t v43 = v41 + HIDWORD(v42);
  unint64_t v44 = v38 & 0xFFFFFFC0 | (v42 << 32);
  unint64_t v45 = HIDWORD(v39);
  unint64_t v46 = v39 * (unint64_t)v31;
  unint64_t v47 = v39 * (unint64_t)v32;
  unint64_t v48 = HIDWORD(v46) + HIDWORD(v39) * (unint64_t)v31;
  unint64_t v49 = HIDWORD(v39) * (unint64_t)v32 + v46 + HIDWORD(v47);
  unint64_t v50 = v48 + HIDWORD(v49);
  unint64_t v51 = v47 & 0xFFFFFFC0 | (v49 << 32);
  unint64_t v52 = v40 * (unint64_t)v31;
  unint64_t v53 = v40 * (unint64_t)v32;
  unint64_t v54 = HIDWORD(v52) + HIDWORD(v40) * (unint64_t)v31;
  unint64_t v55 = HIDWORD(v40) * (unint64_t)v32 + v52 + HIDWORD(v53);
  unint64_t v56 = HIDWORD(v55);
  unint64_t v57 = v53 & 0xFFFFFFC0 | (v55 << 32);
  BOOL v58 = __CFADD__(v35, v44);
  unint64_t v59 = v35 + v44;
  unint64_t v60 = v51 + v58 + v43;
  unint64_t v61 = v57 + (__CFADD__(v58, v43) | __CFADD__(v51, v58 + v43)) + v50;
  unint64_t v62 = v56
      + (__CFADD__(__CFADD__(v58, v43) | __CFADD__(v51, v58 + v43), v50) | __CFADD__(v57, (__CFADD__(v58, v43) | __CFADD__(v51, v58 + v43)) + v50))
      + v54;
  unint64_t v63 = HIDWORD(v19);
  LODWORD(v50) = v19;
  unint64_t v64 = v34 * (unint64_t)HIDWORD(v19);
  unint64_t v65 = v30 * (unint64_t)v19;
  unint64_t v66 = v33 * (unint64_t)v19;
  unint64_t v67 = HIDWORD(v64) + v33 * (unint64_t)HIDWORD(v19);
  unint64_t v68 = v66 + v64 + HIDWORD(v65);
  unint64_t v69 = v67 + HIDWORD(v68);
  unint64_t v70 = v29 * (unint64_t)HIDWORD(v19);
  unint64_t v71 = v29 * (unint64_t)v19;
  unint64_t v72 = v36 * (unint64_t)v19;
  unint64_t v73 = HIDWORD(v70) + v36 * (unint64_t)HIDWORD(v19);
  unint64_t v74 = v72 + v70 + HIDWORD(v71);
  unint64_t v75 = v73 + HIDWORD(v74);
  unint64_t v76 = v71 | ((unint64_t)v74 << 32);
  unint64_t v77 = v39 * (unint64_t)HIDWORD(v19);
  unint64_t v78 = v39 * (unint64_t)v19;
  unint64_t v79 = v45 * (unint64_t)v19;
  unint64_t v80 = HIDWORD(v77) + v45 * (unint64_t)HIDWORD(v19);
  unint64_t v81 = v79 + v77 + HIDWORD(v78);
  unint64_t v82 = v78 | ((unint64_t)v81 << 32);
  unint64_t v83 = v40 * (unint64_t)HIDWORD(v19);
  unint64_t v84 = v40 * (unint64_t)v19;
  unint64_t v85 = HIDWORD(v83) + HIDWORD(v40) * (unint64_t)v63;
  unint64_t v86 = HIDWORD(v40) * (unint64_t)v50 + v83 + HIDWORD(v84);
  unint64_t v87 = v84 | ((unint64_t)v86 << 32);
  unsigned long long v88 = __PAIR128__(v82, v69) + v76;
  LODWORD(v89) = __CFADD__(__CFADD__(v69, v76), v82);
  unint64_t v90 = v80 + HIDWORD(v81);
  unint64_t v91 = v75 + *((void *)&v88 + 1);
  if (__CFADD__(v75, *((void *)&v88 + 1))) {
    uint64_t v89 = 1;
  }
  else {
    uint64_t v89 = v89;
  }
  BOOL v58 = __CFADD__(v87, v89);
  unint64_t v92 = v87 + v89;
  unsigned int v93 = v58;
  BOOL v58 = __CFADD__(v90, v92);
  unint64_t v94 = v90 + v92;
  unint64_t v95 = v85 + HIDWORD(v86);
  if (v58) {
    uint64_t v96 = 1;
  }
  else {
    uint64_t v96 = v93;
  }
  unint64_t v97 = v95 + v96;
  unint64_t v98 = v65 | ((unint64_t)v68 << 32);
  BOOL v99 = __CFADD__(__CFADD__(v98, v59), (void)v88);
  uint64_t v100 = __CFADD__(__CFADD__(v98, v59) + (void)v88, v60) || v99;
  BOOL v58 = __CFADD__(v91, v100);
  unint64_t v101 = v91 + v100;
  LODWORD(v102) = v58;
  BOOL v58 = __CFADD__(v101, v61);
  unint64_t v103 = v101 + v61;
  if (v58) {
    uint64_t v102 = 1;
  }
  else {
    uint64_t v102 = v102;
  }
  BOOL v58 = __CFADD__(v94, v102);
  unint64_t v104 = v94 + v102;
  unsigned int v105 = v58;
  BOOL v58 = __CFADD__(v62, v104);
  unint64_t v106 = v62 + v104;
  if (v58) {
    uint64_t v107 = 1;
  }
  else {
    uint64_t v107 = v105;
  }
  unint64_t v108 = v97 + v107;
  if (v25 <= 0)
  {
    int v109 = 1 - v25;
    if (v109 >= 55) {
      LOBYTE(v109) = 55;
    }
    unint64_t v103 = (v106 << -(char)v109) + (v103 >> v109);
    unint64_t v106 = (v108 << -(char)v109) + (v106 >> v109);
    v108 >>= v109;
    int v25 = 1;
  }
  if (bid_roundbound_128[(4 * a3) | (2 * v18) | v108 & 1] < __PAIR128__(v106, v103))
  {
    if (++v108 == 0x20000000000000)
    {
      ++v25;
      unint64_t v108 = 0x10000000000000;
    }
    else if (v108 == 0x10000000000000 && v25 == 1)
    {
      if ((a3 & 3) == 0 && v106 >> 62 != 3
        || (uint64_t v111 = 0, v113 = v18 + a3, v112 = 1, v113 == 2) && (v106 & 0x8000000000000000) == 0)
      {
        uint64_t v111 = 0;
        *a4 |= 0x10u;
        uint64_t v112 = 1;
      }
      goto LABEL_89;
    }
  }
  if (v25 >= 0x7FF) {
    goto LABEL_72;
  }
  uint64_t v111 = v108 & 0xFFFFFFFFFFFFFLL;
  if (v108 >> 52) {
    uint64_t v112 = v25;
  }
  else {
    uint64_t v112 = 0;
  }
LABEL_89:
  if (v106 | v103)
  {
    int v114 = *a4;
    *a4 |= 0x20u;
    if (!v112) {
      *a4 = v114 | 0x30;
    }
  }
  unint64_t v6 = a2 & 0x8000000000000000 | (v112 << 52) | v111;
  return *(double *)&v6;
}

unint64_t __bid128_to_binary128(unint64_t a1, unint64_t a2, int a3, int *a4)
{
  if ((~a2 & 0x6000000000000000) == 0)
  {
    if ((~a2 & 0x7800000000000000) == 0)
    {
      if ((~a2 & 0x7C00000000000000) == 0)
      {
        if ((a2 & 0x200000000000000) != 0) {
          *a4 |= 1u;
        }
        if ((a2 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
          || a1 >= 0x38C15B0A00000000 && (a2 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
        {
          return 0;
        }
        *((void *)&v26 + 1) = a2;
        *(void *)&long long v26 = a1;
        return (2 * (a1 & 0x3FFFFFFFFFFFLL)) | ((unint64_t)(v26 >> 46) << 47);
      }
      return 0;
    }
    return 0;
  }
  uint64_t v5 = a2 & 0x1FFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
    return 0;
  }
  BOOL v6 = (a2 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a1 > 0x378D8E63FFFFFFFFLL;
  if (v6 || !(v5 | a1)) {
    return 0;
  }
  uint64_t v7 = (a2 >> 49) & 0x3FFF;
  if (v5)
  {
    int8x16_t v8 = (int8x16_t)vdupq_n_s64(a2);
    int8x16_t v9 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB57B0), (uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB57C0), (uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB57D0))));
    int v10 = 2 * ((a2 & 0xCCCCCCCCCCCCLL) <= (a2 & 0x1333333333333));
    BOOL v11 = (a2 & 0xAAAAAAAAAAAALL) <= (a2 & 0x1555555555555);
  }
  else
  {
    int8x16_t v12 = (int8x16_t)vdupq_n_s64(a1);
    int v10 = 2 * ((a1 & 0xCCCCCCCCCCCCCCCCLL) <= (a1 & 0x3333333333333333));
    BOOL v11 = (a1 & 0xAAAAAAAAAAAAAAAALL) <= (a1 & 0x5555555555555555);
    int8x16_t v9 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB57E0), (uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB57F0)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB5750))), (int8x16_t)xmmword_1BDDB5810, (int8x16_t)xmmword_1BDDB5800);
  }
  int8x8_t v13 = vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  unsigned int v14 = v13.i32[0] | v10 | v13.i32[1] | v11;
  unsigned int v15 = v14 - 15;
  if (v14 != 15)
  {
    if (v14 < 0x4F)
    {
      uint64_t v5 = (v5 << v15) + (a1 >> (79 - v14));
      a1 <<= v15;
    }
    else
    {
      uint64_t v5 = a1 << (v14 - 79);
      a1 = 0;
    }
  }
  if (v7 >= 0x2B65)
  {
LABEL_84:
    *a4 |= 0x28u;
    if (a3 == 3) {
      return -1;
    }
    int v118 = (a2 & 0x8000000000000000) == 0 ? 1 : 2;
    if (v118 == a3) {
      return -1;
    }
    return 0;
  }
  unint64_t v16 = a2 >> 63;
  *((void *)&v18 + 1) = v5;
  *(void *)&long long v18 = a1;
  unint64_t v17 = v18 >> 62;
  unint64_t v19 = 4 * a1;
  if (v7 >= 0x499) {
    int v20 = v7 - 6176;
  }
  else {
    int v20 = -5000;
  }
  uint64_t v21 = v20;
  int v22 = &bid_breakpoints_binary128[2 * v20 + 10000];
  unint64_t v23 = bid_breakpoints_binary128[2 * v20 + 10001];
  int v24 = bid_exponents_binary128[v20 + 5000] - v15;
  if (__PAIR128__(v17, v19) > __PAIR128__(v23, *v22))
  {
    ++v24;
    int v25 = (char *)&unk_1BDEC1160;
  }
  else
  {
    int v25 = (char *)&unk_1BDE737A0;
  }
  long long v27 = &v25[32 * v21];
  uint64_t v29 = *(void *)v27;
  unint64_t v28 = *((void *)v27 + 1);
  unint64_t v30 = HIDWORD(v19);
  unsigned int v31 = 4 * a1;
  uint64_t v32 = HIDWORD(*(void *)v27);
  unsigned int v33 = *(void *)v27;
  unint64_t v34 = ((v33 * (unint64_t)v30) >> 32)
      + v32 * (unint64_t)v30
      + ((v32 * (unint64_t)v31 + v33 * v30 + ((v33 * (unint64_t)v31) >> 32)) >> 32);
  unint64_t v35 = HIDWORD(v28);
  unint64_t v36 = v28 * (unint64_t)v30;
  unint64_t v37 = v28 * (unint64_t)(4 * a1);
  unint64_t v38 = *((void *)v27 + 2);
  uint64_t v39 = *((void *)v27 + 3);
  unint64_t v40 = HIDWORD(v36) + HIDWORD(v28) * (unint64_t)v30;
  unint64_t v41 = HIDWORD(v28) * (unint64_t)v31 + v36 + HIDWORD(v37);
  unint64_t v42 = v40 + HIDWORD(v41);
  unint64_t v43 = v37 & 0xFFFFFFFC | (v41 << 32);
  unint64_t v44 = HIDWORD(v38);
  unint64_t v45 = v38 * (unint64_t)v30;
  unint64_t v46 = v38 * (unint64_t)v31;
  unint64_t v47 = HIDWORD(v45) + HIDWORD(v38) * (unint64_t)v30;
  unint64_t v48 = HIDWORD(v38) * (unint64_t)v31 + v45 + HIDWORD(v46);
  unint64_t v49 = v47 + HIDWORD(v48);
  unint64_t v50 = v46 & 0xFFFFFFFC | (v48 << 32);
  unint64_t v51 = v39 * (unint64_t)v30;
  unint64_t v52 = v39 * (unint64_t)v31;
  unint64_t v53 = HIDWORD(v51) + HIDWORD(v39) * (unint64_t)v30;
  unint64_t v54 = HIDWORD(v39) * (unint64_t)v31 + v51 + HIDWORD(v52);
  unint64_t v55 = HIDWORD(v54);
  unint64_t v56 = v52 & 0xFFFFFFFC | (v54 << 32);
  BOOL v57 = __CFADD__(v34, v43);
  unint64_t v58 = v34 + v43;
  unint64_t v59 = v50 + v57 + v42;
  unint64_t v60 = v56 + (__CFADD__(v57, v42) | __CFADD__(v50, v57 + v42)) + v49;
  unint64_t v61 = v55
      + (__CFADD__(__CFADD__(v57, v42) | __CFADD__(v50, v57 + v42), v49) | __CFADD__(v56, (__CFADD__(v57, v42) | __CFADD__(v50, v57 + v42)) + v49))
      + v53;
  unint64_t v62 = HIDWORD(v17);
  LODWORD(v49) = v17;
  unint64_t v63 = v33 * (unint64_t)HIDWORD(v17);
  unint64_t v64 = v29 * (unint64_t)v17;
  unint64_t v65 = v32 * (unint64_t)v17;
  unint64_t v66 = HIDWORD(v63) + v32 * (unint64_t)HIDWORD(v17);
  unint64_t v67 = v65 + v63 + HIDWORD(v64);
  unint64_t v68 = v66 + HIDWORD(v67);
  unint64_t v69 = v28 * (unint64_t)HIDWORD(v17);
  unint64_t v70 = v28 * (unint64_t)v17;
  unint64_t v71 = v35 * (unint64_t)v17;
  unint64_t v72 = HIDWORD(v69) + v35 * (unint64_t)HIDWORD(v17);
  unint64_t v73 = v71 + v69 + HIDWORD(v70);
  unint64_t v74 = v72 + HIDWORD(v73);
  unint64_t v75 = v70 | ((unint64_t)v73 << 32);
  unint64_t v76 = v38 * (unint64_t)HIDWORD(v17);
  unint64_t v77 = v38 * (unint64_t)v17;
  unint64_t v78 = v44 * (unint64_t)v17;
  unint64_t v79 = HIDWORD(v76) + v44 * (unint64_t)HIDWORD(v17);
  unint64_t v80 = v78 + v76 + HIDWORD(v77);
  unint64_t v81 = v77 | ((unint64_t)v80 << 32);
  unint64_t v82 = v39 * (unint64_t)HIDWORD(v17);
  unint64_t v83 = v39 * (unint64_t)v17;
  unint64_t v84 = HIDWORD(v82) + HIDWORD(v39) * (unint64_t)v62;
  unint64_t v85 = HIDWORD(v39) * (unint64_t)v49 + v82 + HIDWORD(v83);
  unint64_t v86 = v83 | ((unint64_t)v85 << 32);
  unsigned long long v87 = __PAIR128__(v81, v68) + v75;
  LODWORD(v8_Block_object_dispose(&STACK[0x940], 8) = __CFADD__(__CFADD__(v68, v75), v81);
  unint64_t v89 = v79 + HIDWORD(v80);
  unint64_t v90 = v74 + *((void *)&v87 + 1);
  if (__CFADD__(v74, *((void *)&v87 + 1))) {
    uint64_t v88 = 1;
  }
  else {
    uint64_t v88 = v88;
  }
  BOOL v57 = __CFADD__(v86, v88);
  unint64_t v91 = v86 + v88;
  unsigned int v92 = v57;
  BOOL v57 = __CFADD__(v89, v91);
  unint64_t v93 = v89 + v91;
  unint64_t v94 = v84 + HIDWORD(v85);
  if (v57) {
    uint64_t v95 = 1;
  }
  else {
    uint64_t v95 = v92;
  }
  unint64_t v96 = v94 + v95;
  unint64_t v97 = v64 | ((unint64_t)v67 << 32);
  uint64_t v98 = __CFADD__(v97, v58) + (void)v87;
  BOOL v99 = __CFADD__(__CFADD__(v97, v58), (void)v87);
  unint64_t v100 = v59 + v98;
  uint64_t v101 = __CFADD__(v59, v98) || v99;
  BOOL v57 = __CFADD__(v90, v101);
  unint64_t v102 = v90 + v101;
  LODWORD(v103) = v57;
  BOOL v57 = __CFADD__(v102, v60);
  unint64_t v104 = v102 + v60;
  if (v57) {
    uint64_t v103 = 1;
  }
  else {
    uint64_t v103 = v103;
  }
  BOOL v57 = __CFADD__(v93, v103);
  unint64_t v105 = v93 + v103;
  unsigned int v106 = v57;
  BOOL v57 = __CFADD__(v61, v105);
  unint64_t v107 = v61 + v105;
  if (v57) {
    uint64_t v108 = 1;
  }
  else {
    uint64_t v108 = v106;
  }
  unint64_t result = v96 + v108;
  if (v24 <= 0)
  {
    int v110 = 1 - v24;
    if (v110 >= 115) {
      unsigned int v111 = 115;
    }
    else {
      unsigned int v111 = v110;
    }
    char v113 = v111 - 64;
    BOOL v112 = v111 == 64;
    if (v111 < 0x40)
    {
      char v113 = v111;
      unint64_t v109 = result;
    }
    else
    {
      unint64_t v109 = 0;
      if (v112)
      {
        int v24 = 1;
        goto LABEL_76;
      }
      unint64_t v100 = v104;
      unint64_t v104 = v107;
      unint64_t v107 = result;
    }
    unint64_t v114 = (v104 << -v113) + (v100 >> v113);
    unint64_t v115 = (v107 << -v113) + (v104 >> v113);
    unint64_t result = (v109 << -v113) + (v107 >> v113);
    v109 >>= v113;
    int v24 = 1;
    unint64_t v107 = v115;
    unint64_t v104 = v114;
  }
  else
  {
    unint64_t v109 = v96 + v108;
    unint64_t result = v107;
    unint64_t v107 = v104;
    unint64_t v104 = v100;
  }
LABEL_76:
  if (bid_roundbound_128[(4 * a3) | (2 * v16) | result & 1] < __PAIR128__(v107, v104))
  {
    BOOL v57 = __CFADD__(result++, 1);
    if (v57)
    {
      if (++v109 == 0x2000000000000)
      {
        unint64_t result = 0;
        ++v24;
        unint64_t v109 = 0x1000000000000;
      }
      else
      {
        unint64_t result = 0;
        if (v109 == 0x1000000000000 && v24 == 1)
        {
          int v116 = v16 + a3;
          int v117 = 1;
          unint64_t result = 0;
          if (v116 == 2 && (v107 & 0x8000000000000000) == 0)
          {
            unint64_t result = 0;
            *a4 |= 0x10u;
            int v117 = 1;
          }
          goto LABEL_94;
        }
      }
    }
  }
  if (v24 >= 0x7FFF) {
    goto LABEL_84;
  }
  if (HIWORD(v109)) {
    int v117 = v24;
  }
  else {
    int v117 = 0;
  }
LABEL_94:
  if (v107 | v104)
  {
    int v119 = *a4;
    *a4 |= 0x20u;
    if (!v117) {
      *a4 = v119 | 0x30;
    }
  }
  return result;
}

unint64_t __binary64_to_bid128(int a1, _DWORD *a2, double a3)
{
  uint64_t v6 = (*(void *)&a3 >> 52) & 0x7FFLL;
  uint64_t v7 = *(void *)&a3 & 0xFFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((~*(void *)&a3 & 0x7FF0000000000000) == 0)
    {
      if (!v7) {
        return 0;
      }
      if ((*(void *)&a3 & 0x8000000000000) == 0) {
        *a2 |= 1u;
      }
      if (*(void *)&a3 << 13 > 0xC5371912364FFFFFLL) {
        return 0;
      }
      unint64_t v8 = *(void *)&a3 << 59;
      if (*(void *)&a3 << 59 > 0x38C15B09FFFFFFFFuLL
        && ((*(void *)&a3 >> 5) & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
      {
        return 0;
      }
      return v8;
    }
    uint64_t v16 = v7 | 0x10000000000000;
    uint64_t v17 = (v7 | 0x10000000000000) & -(v7 | 0x10000000000000);
    BOOL v18 = v17 == 0;
    BOOL v19 = (v17 & 0xFFFF0000FFFFLL) == 0;
    BOOL v20 = (v17 & 0x1F00FF00FF00FFLL) == 0;
    BOOL v21 = (v17 & 0xF0F0F0F0F0F0FLL) == 0;
    BOOL v22 = (v17 & 0x13333333333333) == 0;
    BOOL v23 = (v17 & 0x15555555555555) == 0;
    int v14 = v6 - 1075;
    unint64_t v15 = v16 << 11;
    if (v6 > 0x46F) {
      goto LABEL_30;
    }
    int v9 = (16 * v19) | (32 * v18) | (8 * v20) | (4 * v21) | (2 * v22) | v23;
  }
  else
  {
    if (!v7) {
      return 0;
    }
    int v9 = 0;
    int8x16_t v10 = (int8x16_t)vdupq_n_s64(*(unint64_t *)&a3);
    int8x16_t v11 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB5820), (uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB57C0), (uint64x2_t)vandq_s8(v10, (int8x16_t)xmmword_1BDDB5830))));
    *(int8x8_t *)v11.i8 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
    __int32 v12 = v11.i32[0] | v11.i32[1] | (2 * ((*(void *)&a3 & 0xCCCCCCCCCCCCCuLL) <= (*(void *)&a3 & 0x3333333333333uLL))) | ((*(void *)&a3 & 0xAAAAAAAAAAAAAuLL) <= (*(void *)&a3 & 0x5555555555555uLL));
    uint64_t v13 = v7 << (v12 - 11);
    int v14 = -1063 - v12;
    *a2 |= 2u;
    unint64_t v15 = v13 << 11;
  }
  unsigned int v24 = v9 + v14;
  if (v9 + v14 < 0)
  {
    if (v24 >= 0xFFFFFFD0)
    {
      uint64_t v25 = -v24;
      long long v26 = (unint64_t *)((char *)&bid_coefflimits_bid128 + 16 * v25);
      unint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      unint64_t v29 = v15 >> (v9 + 11);
      if (v28 || v29 <= v27) {
        return (bid_power_five[2 * v25] * v29) | ((unint64_t)(HIDWORD(bid_power_five[2 * v25]) * v29 + bid_power_five[2 * v25] * HIDWORD(v29) + ((bid_power_five[2 * v25] * (unint64_t)v29) >> 32)) << 32);
      }
    }
LABEL_30:
    unsigned int v33 = 17744 - ((19728 * (v14 + 42092) + ((19779 * (v14 + 42092)) >> 16)) >> 16);
    uint64_t v34 = v33 & 0x7F;
    uint64_t v35 = v33 >> 7;
    unint64_t v36 = (uint64_t *)((char *)&bid_innertable_sig + 32 * v34);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    unint64_t v40 = v36[2];
    unint64_t v39 = v36[3];
    int v41 = bid_innertable_exp[v34];
    if (v35 != 39)
    {
      unint64_t v42 = (uint64_t *)((char *)&bid_outertable_sig + 32 * v35);
      uint64_t v43 = *v42;
      unint64_t v44 = v42[1];
      unint64_t v268 = a2;
      unint64_t v45 = HIDWORD(*v42);
      unsigned int v46 = *v42;
      unint64_t v266 = v15;
      int v267 = a1;
      unint64_t v47 = ((v43 * (unint64_t)HIDWORD(v37)) >> 32)
          + HIDWORD(v43) * (unint64_t)HIDWORD(v37)
          + ((HIDWORD(v43) * (unint64_t)v37
            + (v43 * HIDWORD(v37))
            + ((v43 * (unint64_t)v37) >> 32)) >> 32);
      unint64_t v48 = HIDWORD(v44);
      char v265 = v41;
      unint64_t v49 = v44 * (unint64_t)HIDWORD(v37);
      unint64_t v50 = HIDWORD(v44) * (unint64_t)v37
          + v49
          + ((v44 * (unint64_t)v37) >> 32);
      unint64_t v51 = HIDWORD(v49) + HIDWORD(v44) * (unint64_t)HIDWORD(v37) + HIDWORD(v50);
      unint64_t v53 = v42[2];
      uint64_t v52 = v42[3];
      unint64_t v54 = HIDWORD(v53);
      unint64_t v55 = v53 * (unint64_t)HIDWORD(v37);
      unsigned int v264 = v35;
      unint64_t v56 = HIDWORD(v53) * (unint64_t)v37
          + v55
          + ((v53 * (unint64_t)v37) >> 32);
      unint64_t v57 = HIDWORD(v55) + HIDWORD(v53) * (unint64_t)HIDWORD(v37) + HIDWORD(v56);
      unint64_t v58 = v52 * (unint64_t)HIDWORD(v37);
      unint64_t v59 = (v44 * v37) | ((unint64_t)v50 << 32);
      unint64_t v60 = (v53 * v37) | ((unint64_t)v56 << 32);
      unint64_t v262 = HIDWORD(v52) * (unint64_t)v37
           + v58
           + ((v52 * (unint64_t)v37) >> 32);
      unint64_t v263 = HIDWORD(v58) + HIDWORD(v52) * (unint64_t)HIDWORD(v37);
      unint64_t v61 = (v52 * v37) | ((unint64_t)v262 << 32);
      unint64_t v261 = v47 + v59;
      unint64_t v62 = __CFADD__(v47, v59) + v60;
      BOOL v63 = __CFADD__(__CFADD__(v47, v59), v60);
      unint64_t v260 = v51 + v62;
      uint64_t v64 = __CFADD__(v51, v62) || v63;
      BOOL v32 = __CFADD__(v61, v64);
      unint64_t v65 = v61 + v64;
      LODWORD(v66) = v32;
      BOOL v32 = __CFADD__(v57, v65);
      unint64_t v259 = v57 + v65;
      unint64_t v67 = v46 * (unint64_t)HIDWORD(v38);
      unint64_t v68 = HIDWORD(v67) + v45 * (unint64_t)HIDWORD(v38);
      unint64_t v69 = v45 * (unint64_t)v38
          + v67
          + ((v43 * (unint64_t)v38) >> 32);
      unint64_t v70 = v68 + HIDWORD(v69);
      unint64_t v71 = (v43 * v38) | ((unint64_t)v69 << 32);
      unint64_t v72 = v44 * (unint64_t)HIDWORD(v38);
      unint64_t v73 = HIDWORD(v72) + HIDWORD(v44) * (unint64_t)HIDWORD(v38);
      unint64_t v74 = HIDWORD(v44) * (unint64_t)v38
          + v72
          + ((v44 * (unint64_t)v38) >> 32);
      unint64_t v75 = v73 + HIDWORD(v74);
      unint64_t v76 = (v44 * v38) | ((unint64_t)v74 << 32);
      unint64_t v77 = v53 * (unint64_t)HIDWORD(v38);
      unint64_t v78 = HIDWORD(v53) * (unint64_t)v38
          + v77
          + ((v53 * (unint64_t)v38) >> 32);
      unint64_t v79 = HIDWORD(v77) + HIDWORD(v53) * (unint64_t)HIDWORD(v38) + HIDWORD(v78);
      unint64_t v80 = (v53 * v38) | ((unint64_t)v78 << 32);
      unint64_t v81 = v52 * (unint64_t)HIDWORD(v38);
      if (v32) {
        uint64_t v66 = 1;
      }
      else {
        uint64_t v66 = v66;
      }
      uint64_t v257 = v66;
      unint64_t v258 = HIDWORD(v81) + HIDWORD(v52) * (unint64_t)HIDWORD(v38);
      unint64_t v82 = v52 * (unint64_t)v38;
      unint64_t v83 = HIDWORD(v52) * (unint64_t)v38 + v81 + HIDWORD(v82);
      unint64_t v84 = v82 | ((unint64_t)v83 << 32);
      unint64_t v254 = v70 + v76;
      unint64_t v85 = __CFADD__(v70, v76) + v80;
      BOOL v86 = __CFADD__(__CFADD__(v70, v76), v80);
      unint64_t v256 = v75 + v85;
      uint64_t v87 = __CFADD__(v75, v85) || v86;
      BOOL v32 = __CFADD__(v84, v87);
      unint64_t v88 = v84 + v87;
      unsigned int v89 = v32;
      BOOL v32 = __CFADD__(v79, v88);
      unint64_t v255 = v79 + v88;
      unint64_t v90 = v44 * (unint64_t)HIDWORD(v40);
      unint64_t v91 = HIDWORD(v44) * (unint64_t)v40
          + v90
          + ((v44 * (unint64_t)v40) >> 32);
      unint64_t v92 = HIDWORD(v90) + HIDWORD(v44) * (unint64_t)HIDWORD(v40) + HIDWORD(v91);
      unint64_t v93 = (v44 * v40) | ((unint64_t)v91 << 32);
      unint64_t v94 = v53 * (unint64_t)HIDWORD(v40);
      unint64_t v95 = HIDWORD(v53) * (unint64_t)v40
          + v94
          + ((v53 * (unint64_t)v40) >> 32);
      unint64_t v96 = HIDWORD(v94) + HIDWORD(v53) * (unint64_t)HIDWORD(v40) + HIDWORD(v95);
      unint64_t v97 = (v53 * v40) | ((unint64_t)v95 << 32);
      unint64_t v98 = v46 * (unint64_t)HIDWORD(v40);
      unint64_t v99 = v45 * (unint64_t)v40 + v98;
      unint64_t v100 = HIDWORD(v98) + v45 * (unint64_t)HIDWORD(v40);
      unint64_t v101 = v52 * (unint64_t)HIDWORD(v40);
      unint64_t v102 = HIDWORD(v101) + HIDWORD(v52) * (unint64_t)HIDWORD(v40);
      unint64_t v103 = HIDWORD(v52) * (unint64_t)v40 + v101;
      if (v32) {
        uint64_t v104 = 1;
      }
      else {
        uint64_t v104 = v89;
      }
      unint64_t v105 = v43 * (unint64_t)v40;
      unint64_t v106 = v99 + HIDWORD(v105);
      unint64_t v107 = v100 + HIDWORD(v106);
      unint64_t v108 = v107 + v93;
      BOOL v32 = __CFADD__(__CFADD__(v107, v93), v97);
      unint64_t v109 = __CFADD__(v107, v93) + v97;
      unsigned int v110 = v32;
      BOOL v32 = __CFADD__(v92, v109);
      unint64_t v111 = v92 + v109;
      unint64_t v112 = v52 * (unint64_t)v40;
      unint64_t v113 = v103 + HIDWORD(v112);
      unint64_t v114 = v112 | ((unint64_t)v113 << 32);
      if (v32) {
        uint64_t v115 = 1;
      }
      else {
        uint64_t v115 = v110;
      }
      BOOL v32 = __CFADD__(v114, v115);
      unint64_t v116 = v114 + v115;
      LODWORD(v117) = v32;
      BOOL v32 = __CFADD__(v96, v116);
      unint64_t v118 = v96 + v116;
      unint64_t v119 = v46 * (unint64_t)HIDWORD(v39);
      unint64_t v120 = HIDWORD(v119) + v45 * (unint64_t)HIDWORD(v39);
      unint64_t v121 = v45 * (unint64_t)v39 + v119;
      unint64_t v122 = v44 * (unint64_t)HIDWORD(v39);
      unint64_t v123 = HIDWORD(v122) + HIDWORD(v44) * (unint64_t)HIDWORD(v39);
      unint64_t v124 = v44 * (unint64_t)v39;
      unint64_t v125 = v48 * (unint64_t)v39 + v122 + HIDWORD(v124);
      unint64_t v126 = v123 + HIDWORD(v125);
      unint64_t v127 = v124 | ((unint64_t)v125 << 32);
      unint64_t v128 = v53 * (unint64_t)HIDWORD(v39);
      unint64_t v129 = HIDWORD(v128) + HIDWORD(v53) * (unint64_t)HIDWORD(v39);
      unint64_t v130 = v53 * (unint64_t)v39;
      unint64_t v131 = v54 * (unint64_t)v39 + v128 + HIDWORD(v130);
      unint64_t v132 = v129 + HIDWORD(v131);
      unint64_t v133 = v130 | ((unint64_t)v131 << 32);
      unint64_t v134 = v52 * (unint64_t)HIDWORD(v39);
      unint64_t v135 = HIDWORD(v134) + HIDWORD(v52) * (unint64_t)HIDWORD(v39);
      unint64_t v136 = HIDWORD(v52) * (unint64_t)v39 + v134;
      if (v32) {
        uint64_t v117 = 1;
      }
      else {
        uint64_t v117 = v117;
      }
      unint64_t v137 = v43 * (unint64_t)v39;
      unint64_t v138 = v121 + HIDWORD(v137);
      unint64_t v139 = v120 + HIDWORD(v138);
      BOOL v32 = __CFADD__(v139, v127);
      unint64_t v140 = v139 + v127;
      BOOL v142 = v32;
      BOOL v32 = __CFADD__(v32, v133);
      unint64_t v141 = v142 + v133;
      unsigned int v143 = v32;
      BOOL v32 = __CFADD__(v126, v141);
      unint64_t v144 = v126 + v141;
      unint64_t v145 = v52 * (unint64_t)v39;
      unint64_t v146 = v136 + HIDWORD(v145);
      unint64_t v147 = v145 | ((unint64_t)v146 << 32);
      if (v32) {
        uint64_t v148 = 1;
      }
      else {
        uint64_t v148 = v143;
      }
      BOOL v32 = __CFADD__(v147, v148);
      unint64_t v149 = v147 + v148;
      LODWORD(v150) = v32;
      BOOL v32 = __CFADD__(v132, v149);
      unint64_t v151 = v132 + v149;
      if (v32) {
        uint64_t v150 = 1;
      }
      else {
        uint64_t v150 = v150;
      }
      unint64_t v152 = v263 + HIDWORD(v262) + v257;
      unint64_t v153 = __CFADD__(v71, v261) + v254;
      unint64_t v154 = v105 | ((unint64_t)v106 << 32);
      LODWORD(v155) = __CFADD__(__CFADD__(v71, v261), v254);
      BOOL v32 = __CFADD__(v260, v153);
      unint64_t v156 = v260 + v153;
      if (v32) {
        uint64_t v155 = 1;
      }
      else {
        uint64_t v155 = v155;
      }
      BOOL v32 = __CFADD__(v256, v155);
      unint64_t v157 = v256 + v155;
      LODWORD(v15_Block_object_dispose(&STACK[0x940], 8) = v32;
      BOOL v32 = __CFADD__(v157, v259);
      unint64_t v159 = v157 + v259;
      if (v32) {
        uint64_t v158 = 1;
      }
      else {
        uint64_t v158 = v158;
      }
      BOOL v32 = __CFADD__(v255, v158);
      unint64_t v160 = v255 + v158;
      unsigned int v161 = v32;
      BOOL v32 = __CFADD__(v152, v160);
      unint64_t v162 = v152 + v160;
      if (v32) {
        uint64_t v163 = 1;
      }
      else {
        uint64_t v163 = v161;
      }
      BOOL v32 = __CFADD__(v154, v156);
      unint64_t v164 = v137 | ((unint64_t)v138 << 32);
      unint64_t v165 = v258 + HIDWORD(v83) + v104 + v163;
      a1 = v267;
      unint64_t v166 = v32 + v108;
      LODWORD(v167) = __CFADD__(v32, v108);
      BOOL v32 = __CFADD__(v159, v166);
      unint64_t v168 = v159 + v166;
      a2 = v268;
      if (v32) {
        uint64_t v167 = 1;
      }
      else {
        uint64_t v167 = v167;
      }
      BOOL v32 = __CFADD__(v111, v167);
      unint64_t v169 = v111 + v167;
      unsigned int v170 = v32;
      BOOL v32 = __CFADD__(v169, v162);
      unint64_t v171 = v169 + v162;
      if (v32) {
        uint64_t v172 = 1;
      }
      else {
        uint64_t v172 = v170;
      }
      BOOL v32 = __CFADD__(v118, v172);
      unint64_t v173 = v118 + v172;
      LODWORD(v174) = v32;
      BOOL v32 = __CFADD__(v165, v173);
      unint64_t v175 = v165 + v173;
      if (v32) {
        uint64_t v174 = 1;
      }
      else {
        uint64_t v174 = v174;
      }
      unint64_t v176 = v135 + HIDWORD(v146) + v150;
      unint64_t v177 = v102 + HIDWORD(v113) + v117 + v174;
      unint64_t v178 = __CFADD__(v164, v168) + v140;
      LODWORD(v179) = __CFADD__(__CFADD__(v164, v168), v140);
      BOOL v32 = __CFADD__(v171, v178);
      unint64_t v180 = v171 + v178;
      if (v32) {
        uint64_t v179 = 1;
      }
      else {
        uint64_t v179 = v179;
      }
      BOOL v32 = __CFADD__(v144, v179);
      unint64_t v181 = v144 + v179;
      unint64_t v15 = v266;
      unsigned int v182 = v32;
      unint64_t v38 = v181 + v175;
      if (__CFADD__(v181, v175)) {
        uint64_t v183 = 1;
      }
      else {
        uint64_t v183 = v182;
      }
      BOOL v32 = __CFADD__(v151, v183);
      unint64_t v184 = v151 + v183;
      unsigned int v185 = v32;
      unint64_t v40 = v177 + v184;
      if (__CFADD__(v177, v184)) {
        uint64_t v186 = 1;
      }
      else {
        uint64_t v186 = v185;
      }
      unint64_t v39 = v176 + v186;
      LOBYTE(v41) = v265 + bid_outertable_exp[4 * v264];
      uint64_t v37 = v180 + 1;
    }
    unint64_t v187 = HIDWORD(v40);
    unint64_t v188 = HIDWORD(v39);
    unsigned int v189 = v40;
    unint64_t v190 = HIDWORD(v15);
    unint64_t v191 = v37 * (unint64_t)HIDWORD(v15);
    unint64_t v192 = HIDWORD(v191);
    unsigned int v193 = v15 & 0xFFFFF800;
    unint64_t v194 = HIDWORD(v37) * (unint64_t)v193 + v191;
    unsigned int v195 = v39;
    unint64_t v196 = v37 * (unint64_t)v193;
    unint64_t v197 = v194 + HIDWORD(v196);
    unint64_t v198 = v192 + HIDWORD(v37) * (unint64_t)v190 + HIDWORD(v197);
    unint64_t v199 = v38 * (unint64_t)v190;
    unint64_t v200 = v38 * (unint64_t)v193;
    unint64_t v201 = HIDWORD(v199);
    unint64_t v202 = HIDWORD(v38) * (unint64_t)v193 + v199 + HIDWORD(v200);
    unint64_t v203 = v201 + HIDWORD(v38) * (unint64_t)v190 + HIDWORD(v202);
    unint64_t v204 = v200 & 0xFFFFF800 | (v202 << 32);
    unint64_t v205 = v189 * (unint64_t)v190;
    unint64_t v206 = v189 * (unint64_t)v193;
    unint64_t v207 = v187 * (unint64_t)v193;
    unint64_t v208 = HIDWORD(v205) + v187 * (unint64_t)v190;
    unint64_t v209 = v207 + v205 + HIDWORD(v206);
    unint64_t v210 = v208 + HIDWORD(v209);
    unint64_t v211 = v195 * (unint64_t)v190;
    unint64_t v212 = v206 & 0xFFFFF800 | (v209 << 32);
    unint64_t v213 = v195 * (unint64_t)v193;
    unint64_t v214 = HIDWORD(v211) + v188 * (unint64_t)v190;
    unint64_t v215 = v188 * (unint64_t)v193 + v211;
    BOOL v32 = __CFADD__(v198, v204);
    unint64_t v216 = v198 + v204;
    unint64_t v217 = v215 + HIDWORD(v213);
    unint64_t v218 = v213 & 0xFFFFF800 | (v217 << 32);
    BOOL v220 = v32;
    BOOL v32 = __CFADD__(v32, v203);
    unint64_t v219 = v220 + v203;
    v32 |= __CFADD__(v212, v219);
    v219 += v212;
    unint64_t v222 = v32 + v210;
    BOOL v32 = __CFADD__(v32, v210) | __CFADD__(v218, v222);
    unint64_t v221 = v218 + v222;
    unint64_t v223 = HIDWORD(v217) + v32 + v214;
    char v224 = v41 + v14;
    char v225 = 75 - v224;
    char v226 = v224 - 11;
    unint64_t v227 = (v219 << (v224 - 11)) + (v216 >> (75 - v224));
    unint64_t v228 = (v221 << v226) + (v219 >> v225);
    unint64_t v8 = (v223 << v226) + (v221 >> v225);
    unint64_t v229 = v223 >> v225;
    if (v223 >> v225 < 0x314DC6448D93 || v223 >> v225 == 0x314DC6448D93 && v8 < 0x38C15B0A00000000)
    {
      unint64_t v230 = v196 & 0xFFFFF800 | (v197 << 32);
      unint64_t v231 = v230 << v226;
      unint64_t v232 = (v216 << v226) + (v230 >> v225);
      BOOL v32 = __CFADD__(v231, v231 >> 2);
      unint64_t v233 = v231 + (v231 >> 2);
      uint64_t v234 = 8;
      if (v32) {
        uint64_t v235 = 8;
      }
      else {
        uint64_t v235 = 0;
      }
      unint64_t v236 = v235 & 0xFFFFFFFFFFFFFFF8 | (v233 >> 61);
      unint64_t v237 = v232 + (v232 >> 2);
      if (__CFADD__(v232, v232 >> 2)) {
        uint64_t v238 = 8;
      }
      else {
        uint64_t v238 = 0;
      }
      unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFF8 | (v237 >> 61);
      uint64_t v240 = (2 * (v232 & 3)) | (8 * v237);
      unint64_t v241 = v227 + (v227 >> 2);
      if (__CFADD__(v227, v227 >> 2)) {
        uint64_t v242 = 8;
      }
      else {
        uint64_t v242 = 0;
      }
      unint64_t v243 = v228 + (v228 >> 2);
      if (__CFADD__(v228, v228 >> 2)) {
        uint64_t v244 = 8;
      }
      else {
        uint64_t v244 = 0;
      }
      unint64_t v245 = v8 + (v8 >> 2);
      if (!__CFADD__(v8, v8 >> 2)) {
        uint64_t v234 = 0;
      }
      BOOL v32 = __CFADD__(v240, v236);
      unint64_t v246 = v242 & 0xFFFFFFFFFFFFFFF8 | (v241 >> 61);
      uint64_t v247 = (2 * (v227 & 3)) | (8 * v241);
      BOOL v248 = v32;
      BOOL v32 = __CFADD__(v32, v247) | __CFADD__(v239, v32 + v247);
      unint64_t v227 = v239 + v248 + v247;
      unint64_t v249 = v244 & 0xFFFFFFFFFFFFFFF8 | (v243 >> 61);
      uint64_t v250 = (2 * (v228 & 3)) | (8 * v243);
      BOOL v251 = v32;
      BOOL v32 = __CFADD__(v32, v250) | __CFADD__(v246, v32 + v250);
      unint64_t v228 = v246 + v251 + v250;
      uint64_t v252 = (2 * (v8 & 3)) | (8 * v245);
      unint64_t v8 = v249 + v32 + v252;
      unint64_t v229 = v234
           + (__CFADD__(v32, v252) | __CFADD__(v249, v32 + v252))
           + ((2 * (v229 & 3)) | (8 * (v229 + (v229 >> 2))))
           + (v245 >> 61);
    }
    if (bid_roundbound_128[(*(void *)&a3 >> 62) & 2 | (4 * a1) | v8 & 1] < __PAIR128__(v228, v227))
    {
      BOOL v32 = __CFADD__(v8++, 1);
      if (v32)
      {
        unint64_t v8 = 0;
      }
      else if (v229 == 0x1ED09BEAD87C0 && v8 == 0x378D8E6400000000)
      {
        unint64_t v8 = 0x38C15B0A00000000;
      }
    }
    if (v228 | v227) {
      *a2 |= 0x20u;
    }
    return v8;
  }
  if (v14 <= 11) {
    return v15 >> (11 - v14);
  }
  unint64_t v8 = v15 << (v14 - 11);
  unint64_t v31 = v15 >> (75 - v14);
  if (v31 >= 0x1ED09BEAD87C0)
  {
    BOOL v32 = v31 != 0x1ED09BEAD87C0 || v8 >= 0x378D8E6400000000;
    if (v32) {
      goto LABEL_30;
    }
  }
  return v8;
}

unint64_t __binary128_to_bid128(unint64_t a1, unint64_t a2, int a3, _DWORD *a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = HIWORD(a2) & 0x7FFF;
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((~a2 & 0x7FFF000000000000) == 0)
    {
      if (!(v7 | a1)) {
        return 0;
      }
      if ((a2 & 0x800000000000) == 0) {
        *a4 |= 1u;
      }
      *((void *)&v9 + 1) = a2;
      *(void *)&long long v9 = a1;
      unint64_t v8 = v9 >> 47;
      if (v8 > 0xC5371912364FFFFFLL
        || v8 >> 18 == 0x314DC6448D93
        && ((a1 >> 1) & 0x3FFE00000000 | ((unint64_t)v8 << 46)) > 0x38C15B09FFFFFFFFLL)
      {
        return 0;
      }
      else
      {
        return (v8 << 46) | (a1 >> 1) & 0x3FFFFFFFFFFFLL;
      }
    }
    uint64_t v14 = v7 | 0x1000000000000;
    unint64_t v15 = a1 & -(uint64_t)a1;
    int v16 = (16 * ((v15 & 0xFFFF0000FFFFLL) == 0)) | (32 * (v15 == 0)) | (8 * ((v15 & 0xFF00FF00FF00FFLL) == 0)) | (4 * ((v15 & 0xF0F0F0F0F0F0F0FLL) == 0)) | (2 * ((v15 & 0x3333333333333333) == 0)) | ((v15 & 0x5555555555555555) == 0);
    uint64_t v17 = v14 & -v14;
    BOOL v18 = v17 == 0;
    BOOL v19 = (v17 & 0x100FF00FF00FFLL) == 0;
    BOOL v20 = (v17 & 0x10F0F0F0F0F0FLL) == 0;
    BOOL v21 = (v17 & 0x1333333333333) == 0;
    BOOL v22 = (v17 & 0x1555555555555) == 0;
    if ((v17 & 0xFFFF0000FFFFLL) != 0) {
      int v23 = 64;
    }
    else {
      int v23 = 80;
    }
    int v24 = v23 | (32 * v18) | (8 * v19) | (4 * v20) | (2 * v21) | v22;
    if (a1) {
      unsigned int v25 = v16;
    }
    else {
      unsigned int v25 = v24;
    }
    int v26 = v6 - 16495;
    *((void *)&v28 + 1) = v14;
    *(void *)&long long v28 = a1;
    unint64_t v27 = v28 >> 49;
    unint64_t v29 = a1 << 15;
    if (v6 >> 4 > 0x406) {
      goto LABEL_53;
    }
  }
  else
  {
    if (!(v7 | a1)) {
      return 0;
    }
    if (v7)
    {
      int8x16_t v11 = (int8x16_t)vdupq_n_s64(a2);
      int8x16_t v12 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v11, (int8x16_t)xmmword_1BDDB5840), (uint64x2_t)vandq_s8(v11, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v11, (int8x16_t)xmmword_1BDDB57C0), (uint64x2_t)vandq_s8(v11, (int8x16_t)xmmword_1BDDB5850))));
      *(int8x8_t *)v12.i8 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
      unsigned int v13 = v12.i32[0] | v12.i32[1] | (2 * ((a2 & 0xCCCCCCCCCCCCLL) <= (a2 & 0x333333333333))) | ((a2 & 0xAAAAAAAAAAAALL) <= (a2 & 0x555555555555));
    }
    else
    {
      if (a1)
      {
        int8x16_t v30 = (int8x16_t)vdupq_n_s64(a1);
        int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v30, (int8x16_t)xmmword_1BDDB5720), (uint64x2_t)vandq_s8(v30, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v30, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v30, (int8x16_t)xmmword_1BDDB5750))));
        *(int8x8_t *)v31.i8 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
        int v32 = v31.i32[0] | v31.i32[1] | (2 * ((a1 & 0xCCCCCCCCCCCCCCCCLL) <= (a1 & 0x3333333333333333))) | ((a1 & 0xAAAAAAAAAAAAAAAALL) <= (a1 & 0x5555555555555555));
      }
      else
      {
        int v32 = 64;
      }
      unsigned int v13 = v32 + 64;
    }
    char v33 = v13 - 15;
    if (v13 != 15)
    {
      uint64_t v7 = (v7 << v33) + (a1 >> (79 - v13));
      unint64_t v34 = a1 << v33;
      if (v13 < 0x4F)
      {
        a1 = v34;
      }
      else
      {
        uint64_t v7 = a1 << (v13 - 79);
        a1 = 0;
      }
    }
    unsigned int v25 = 0;
    int v26 = -16479 - v13;
    *a4 |= 2u;
    *((void *)&v35 + 1) = v7;
    *(void *)&long long v35 = a1;
    unint64_t v27 = v35 >> 49;
    unint64_t v29 = a1 << 15;
  }
  unsigned int v36 = v25 + v26;
  if (((v25 + v26) & 0x80000000) != 0)
  {
    if (v36 >= 0xFFFFFFD0)
    {
      uint64_t v37 = -v36;
      unint64_t v38 = (unint64_t *)((char *)&bid_coefflimits_bid128 + 16 * v37);
      unint64_t v39 = v38[1];
      unint64_t v40 = (v27 << (49 - v25)) + (v29 >> (v25 + 15));
      unint64_t v41 = v27 >> (v25 - 49);
      BOOL v42 = v25 >= 0x31;
      unint64_t v43 = v25 >= 0x31 ? 0 : v27 >> (v25 + 15);
      unint64_t v44 = v42 ? v41 : v40;
      if (v43 < v39) {
        return (bid_power_five[2 * v37] * v44) | ((unint64_t)(HIDWORD(bid_power_five[2 * v37]) * v44 + bid_power_five[2 * v37] * HIDWORD(v44) + ((bid_power_five[2 * v37] * (unint64_t)v44) >> 32)) << 32);
      }
      unint64_t v45 = *v38;
      if (v43 == v39 && v44 <= v45) {
        return (bid_power_five[2 * v37] * v44) | ((unint64_t)(HIDWORD(bid_power_five[2 * v37]) * v44 + bid_power_five[2 * v37] * HIDWORD(v44) + ((bid_power_five[2 * v37] * (unint64_t)v44) >> 32)) << 32);
      }
    }
    goto LABEL_53;
  }
  if (v26 <= -49) {
    return v27 >> (-49 - v26);
  }
  unint64_t result = (v27 << (v26 + 49)) + (v29 >> (15 - v26));
  unint64_t v47 = v27 >> (15 - v26);
  if (v47 >= 0x1ED09BEAD87C0 && (v47 != 0x1ED09BEAD87C0 || result >= 0x378D8E6400000000))
  {
LABEL_53:
    unsigned int v48 = 17744 - ((19728 * (v26 + 42152) + ((19779 * (v26 + 42152)) >> 16)) >> 16);
    uint64_t v49 = v48 & 0x7F;
    uint64_t v50 = v48 >> 7;
    unint64_t v51 = (uint64_t *)((char *)&bid_innertable_sig + 32 * v49);
    uint64_t v53 = *v51;
    unint64_t v52 = v51[1];
    unint64_t v55 = v51[2];
    unint64_t v54 = v51[3];
    int v56 = bid_innertable_exp[v49];
    char v327 = v26;
    if (v50 != 39)
    {
      int v324 = bid_innertable_exp[v49];
      unint64_t v57 = (uint64_t *)((char *)&bid_outertable_sig + 32 * v50);
      uint64_t v59 = *v57;
      unint64_t v58 = v57[1];
      int v323 = v50;
      unint64_t v60 = HIDWORD(*v57);
      unsigned int v311 = *v57;
      unint64_t v61 = ((v59 * (unint64_t)HIDWORD(v53)) >> 32)
          + HIDWORD(v59) * (unint64_t)HIDWORD(v53)
          + ((HIDWORD(v59) * (unint64_t)v53
            + (v59 * HIDWORD(v53))
            + ((v59 * (unint64_t)v53) >> 32)) >> 32);
      unint64_t v62 = HIDWORD(v58);
      unint64_t v63 = v58 * (unint64_t)HIDWORD(v53);
      unint64_t v64 = HIDWORD(v58) * (unint64_t)v53
          + v63
          + ((v58 * (unint64_t)v53) >> 32);
      unint64_t v65 = HIDWORD(v63) + HIDWORD(v58) * (unint64_t)HIDWORD(v53) + HIDWORD(v64);
      unint64_t v67 = v57[2];
      uint64_t v66 = v57[3];
      unint64_t v68 = HIDWORD(v67);
      unint64_t v69 = v67 * (unint64_t)HIDWORD(v53);
      unint64_t v326 = v4;
      unint64_t v70 = HIDWORD(v67) * (unint64_t)v53
          + v69
          + ((v67 * (unint64_t)v53) >> 32);
      unint64_t v71 = HIDWORD(v69) + HIDWORD(v67) * (unint64_t)HIDWORD(v53) + HIDWORD(v70);
      unint64_t v325 = v29;
      unint64_t v72 = v66 * (unint64_t)HIDWORD(v53);
      unint64_t v73 = (v58 * v53) | ((unint64_t)v64 << 32);
      unint64_t v74 = (v67 * v53) | ((unint64_t)v70 << 32);
      unint64_t v321 = HIDWORD(v66) * (unint64_t)v53
           + v72
           + ((v66 * (unint64_t)v53) >> 32);
      unint64_t v322 = HIDWORD(v72) + HIDWORD(v66) * (unint64_t)HIDWORD(v53);
      unint64_t v75 = (v66 * v53) | (v321 << 32);
      unint64_t v320 = v61 + v73;
      unint64_t v76 = __CFADD__(v61, v73) + v74;
      BOOL v77 = __CFADD__(__CFADD__(v61, v73), v74);
      unint64_t v78 = v65 + v76;
      uint64_t v79 = __CFADD__(v65, v76) || v77;
      BOOL v42 = __CFADD__(v75, v79);
      unint64_t v80 = v75 + v79;
      unsigned int v81 = v42;
      unint64_t v318 = v71 + v80;
      unint64_t v319 = v78;
      unint64_t v82 = v311 * (unint64_t)HIDWORD(v52);
      unint64_t v83 = HIDWORD(v82) + v60 * (unint64_t)HIDWORD(v52);
      unint64_t v84 = v60 * (unint64_t)v52
          + v82
          + ((v59 * (unint64_t)v52) >> 32);
      unint64_t v85 = v83 + HIDWORD(v84);
      unint64_t v86 = (v59 * v52) | ((unint64_t)v84 << 32);
      unint64_t v87 = v58 * (unint64_t)HIDWORD(v52);
      unint64_t v88 = HIDWORD(v87) + HIDWORD(v58) * (unint64_t)HIDWORD(v52);
      unint64_t v89 = HIDWORD(v58) * (unint64_t)v52
          + v87
          + ((v58 * (unint64_t)v52) >> 32);
      unint64_t v90 = v88 + HIDWORD(v89);
      unint64_t v91 = (v58 * v52) | ((unint64_t)v89 << 32);
      unint64_t v92 = v67 * (unint64_t)HIDWORD(v52);
      unint64_t v93 = HIDWORD(v67) * (unint64_t)v52
          + v92
          + ((v67 * (unint64_t)v52) >> 32);
      unint64_t v94 = HIDWORD(v92) + HIDWORD(v67) * (unint64_t)HIDWORD(v52) + HIDWORD(v93);
      unint64_t v95 = (v67 * v52) | ((unint64_t)v93 << 32);
      unint64_t v96 = v66 * (unint64_t)HIDWORD(v52);
      unint64_t v317 = HIDWORD(v96) + HIDWORD(v66) * (unint64_t)HIDWORD(v52);
      if (__CFADD__(v71, v80)) {
        uint64_t v97 = 1;
      }
      else {
        uint64_t v97 = v81;
      }
      unint64_t v98 = HIDWORD(v66) * (unint64_t)v52
          + v96
          + ((v66 * (unint64_t)v52) >> 32);
      unint64_t v99 = (v66 * v52) | ((unint64_t)v98 << 32);
      unint64_t v313 = v85 + v91;
      unint64_t v100 = __CFADD__(v85, v91) + v95;
      BOOL v101 = __CFADD__(__CFADD__(v85, v91), v95);
      unint64_t v315 = v90 + v100;
      uint64_t v316 = v97;
      uint64_t v102 = __CFADD__(v90, v100) || v101;
      BOOL v42 = __CFADD__(v99, v102);
      unint64_t v103 = v99 + v102;
      LODWORD(v104) = v42;
      BOOL v42 = __CFADD__(v94, v103);
      unint64_t v314 = v94 + v103;
      unint64_t v105 = v58 * (unint64_t)HIDWORD(v55);
      unint64_t v106 = HIDWORD(v58) * (unint64_t)v55
           + v105
           + ((v58 * (unint64_t)v55) >> 32);
      unint64_t v107 = HIDWORD(v105) + HIDWORD(v58) * (unint64_t)HIDWORD(v55) + HIDWORD(v106);
      unint64_t v108 = (v58 * v55) | ((unint64_t)v106 << 32);
      unint64_t v109 = v67 * (unint64_t)HIDWORD(v55);
      unint64_t v110 = HIDWORD(v67) * (unint64_t)v55
           + v109
           + ((v67 * (unint64_t)v55) >> 32);
      unint64_t v111 = HIDWORD(v109) + HIDWORD(v67) * (unint64_t)HIDWORD(v55) + HIDWORD(v110);
      unint64_t v112 = (v67 * v55) | ((unint64_t)v110 << 32);
      unint64_t v113 = v311 * (unint64_t)HIDWORD(v55);
      unint64_t v114 = v60 * (unint64_t)v55 + v113;
      unint64_t v115 = HIDWORD(v113) + v60 * (unint64_t)HIDWORD(v55);
      unint64_t v116 = v66 * (unint64_t)HIDWORD(v55);
      unint64_t v312 = HIDWORD(v116) + HIDWORD(v66) * (unint64_t)HIDWORD(v55);
      unint64_t v117 = HIDWORD(v66) * (unint64_t)v55 + v116;
      if (v42) {
        uint64_t v104 = 1;
      }
      else {
        uint64_t v104 = v104;
      }
      unint64_t v118 = v59 * (unint64_t)v55;
      unint64_t v119 = v114 + HIDWORD(v118);
      unint64_t v120 = v115 + HIDWORD(v119);
      unsigned long long v121 = __PAIR128__(v112, v120) + v108;
      BOOL v122 = __CFADD__(__CFADD__(v120, v108), v112);
      unint64_t v123 = v107 + *((void *)&v121 + 1);
      unint64_t v124 = v66 * (unint64_t)v55;
      unint64_t v125 = v117 + HIDWORD(v124);
      unint64_t v126 = v124 | ((unint64_t)v125 << 32);
      uint64_t v127 = __CFADD__(v107, *((void *)&v121 + 1)) || v122;
      BOOL v42 = __CFADD__(v126, v127);
      unint64_t v128 = v126 + v127;
      LODWORD(v129) = v42;
      BOOL v42 = __CFADD__(v111, v128);
      unint64_t v130 = v111 + v128;
      unint64_t v131 = v311 * (unint64_t)HIDWORD(v54);
      unint64_t v132 = HIDWORD(v131) + v60 * (unint64_t)HIDWORD(v54);
      unint64_t v133 = v60 * (unint64_t)v54 + v131;
      unint64_t v134 = v58 * (unint64_t)HIDWORD(v54);
      unint64_t v135 = HIDWORD(v134) + HIDWORD(v58) * (unint64_t)HIDWORD(v54);
      unint64_t v136 = v58 * (unint64_t)v54;
      unint64_t v137 = v62 * (unint64_t)v54 + v134 + HIDWORD(v136);
      unint64_t v138 = v135 + HIDWORD(v137);
      unint64_t v139 = v136 | ((unint64_t)v137 << 32);
      unint64_t v140 = v67 * (unint64_t)HIDWORD(v54);
      unint64_t v141 = HIDWORD(v140) + HIDWORD(v67) * (unint64_t)HIDWORD(v54);
      unint64_t v142 = v67 * (unint64_t)v54;
      unint64_t v143 = v68 * (unint64_t)v54 + v140 + HIDWORD(v142);
      unint64_t v144 = v141 + HIDWORD(v143);
      unint64_t v145 = v142 | ((unint64_t)v143 << 32);
      unint64_t v146 = v66 * (unint64_t)HIDWORD(v54);
      unint64_t v147 = HIDWORD(v146) + HIDWORD(v66) * (unint64_t)HIDWORD(v54);
      unint64_t v4 = v326;
      unint64_t v148 = HIDWORD(v66) * (unint64_t)v54 + v146;
      if (v42) {
        uint64_t v129 = 1;
      }
      else {
        uint64_t v129 = v129;
      }
      unint64_t v149 = v59 * (unint64_t)v54;
      unint64_t v150 = v133 + HIDWORD(v149);
      unint64_t v151 = v132 + HIDWORD(v150);
      BOOL v42 = __CFADD__(v151, v139);
      unint64_t v152 = v151 + v139;
      BOOL v154 = v42;
      BOOL v42 = __CFADD__(v42, v145);
      unint64_t v153 = v154 + v145;
      unsigned int v155 = v42;
      BOOL v42 = __CFADD__(v138, v153);
      unint64_t v156 = v138 + v153;
      unint64_t v157 = v66 * (unint64_t)v54;
      unint64_t v158 = v148 + HIDWORD(v157);
      unint64_t v159 = v157 | ((unint64_t)v158 << 32);
      if (v42) {
        uint64_t v160 = 1;
      }
      else {
        uint64_t v160 = v155;
      }
      BOOL v42 = __CFADD__(v159, v160);
      unint64_t v161 = v159 + v160;
      LODWORD(v162) = v42;
      BOOL v42 = __CFADD__(v144, v161);
      unint64_t v163 = v144 + v161;
      if (v42) {
        uint64_t v162 = 1;
      }
      else {
        uint64_t v162 = v162;
      }
      unint64_t v164 = v322 + HIDWORD(v321) + v316;
      unint64_t v165 = __CFADD__(v86, v320) + v313;
      unint64_t v166 = v118 | ((unint64_t)v119 << 32);
      LODWORD(v167) = __CFADD__(__CFADD__(v86, v320), v313);
      BOOL v42 = __CFADD__(v319, v165);
      unint64_t v168 = v319 + v165;
      if (v42) {
        uint64_t v167 = 1;
      }
      else {
        uint64_t v167 = v167;
      }
      BOOL v42 = __CFADD__(v315, v167);
      unint64_t v169 = v315 + v167;
      LODWORD(v170) = v42;
      BOOL v42 = __CFADD__(v169, v318);
      unint64_t v171 = v169 + v318;
      if (v42) {
        uint64_t v170 = 1;
      }
      else {
        uint64_t v170 = v170;
      }
      BOOL v42 = __CFADD__(v314, v170);
      unint64_t v172 = v314 + v170;
      unsigned int v173 = v42;
      BOOL v42 = __CFADD__(v164, v172);
      unint64_t v174 = v164 + v172;
      if (v42) {
        uint64_t v175 = 1;
      }
      else {
        uint64_t v175 = v173;
      }
      unint64_t v176 = v149 | ((unint64_t)v150 << 32);
      unint64_t v177 = v317 + HIDWORD(v98) + v104 + v175;
      BOOL v42 = __CFADD__(__CFADD__(v166, v168), (void)v121);
      uint64_t v178 = __CFADD__(v166, v168) + (void)v121;
      LODWORD(v179) = v42;
      BOOL v42 = __CFADD__(v171, v178);
      uint64_t v180 = v171 + v178;
      if (v42) {
        uint64_t v179 = 1;
      }
      else {
        uint64_t v179 = v179;
      }
      BOOL v42 = __CFADD__(v123, v179);
      unint64_t v181 = v123 + v179;
      unsigned int v182 = v42;
      BOOL v42 = __CFADD__(v181, v174);
      unint64_t v183 = v181 + v174;
      if (v42) {
        uint64_t v184 = 1;
      }
      else {
        uint64_t v184 = v182;
      }
      BOOL v42 = __CFADD__(v130, v184);
      unint64_t v185 = v130 + v184;
      LODWORD(v186) = v42;
      BOOL v42 = __CFADD__(v177, v185);
      unint64_t v187 = v177 + v185;
      if (v42) {
        uint64_t v186 = 1;
      }
      else {
        uint64_t v186 = v186;
      }
      unint64_t v188 = v147 + HIDWORD(v158) + v162;
      unint64_t v189 = v312 + HIDWORD(v125) + v129 + v186;
      unint64_t v190 = __CFADD__(v176, v180) + v152;
      BOOL v191 = __CFADD__(__CFADD__(v176, v180), v152);
      BOOL v42 = __CFADD__(v183, v190);
      unint64_t v192 = v183 + v190;
      uint64_t v193 = v42 || v191;
      BOOL v42 = __CFADD__(v156, v193);
      unint64_t v194 = v156 + v193;
      unsigned int v195 = v42;
      unint64_t v52 = v194 + v187;
      if (__CFADD__(v194, v187)) {
        uint64_t v196 = 1;
      }
      else {
        uint64_t v196 = v195;
      }
      BOOL v42 = __CFADD__(v163, v196);
      unint64_t v197 = v163 + v196;
      unsigned int v198 = v42;
      BOOL v42 = __CFADD__(v189, v197);
      unint64_t v55 = v189 + v197;
      unint64_t v29 = v325;
      if (v42) {
        uint64_t v199 = 1;
      }
      else {
        uint64_t v199 = v198;
      }
      unint64_t v54 = v188 + v199;
      LOBYTE(v56) = v324 + bid_outertable_exp[4 * v323];
      uint64_t v53 = v192 + 1;
    }
    unint64_t v200 = HIDWORD(v29);
    unsigned int v201 = v29 & 0xFFFF8000;
    unint64_t v202 = v53 * (unint64_t)HIDWORD(v29);
    unint64_t v203 = v53 * (unint64_t)v201;
    unint64_t v204 = HIDWORD(v53) * (unint64_t)v201 + v202 + HIDWORD(v203);
    unint64_t v205 = HIDWORD(v202) + HIDWORD(v53) * (unint64_t)v200 + HIDWORD(v204);
    unint64_t v206 = HIDWORD(v52);
    unint64_t v207 = v52 * (unint64_t)v200;
    unint64_t v208 = v52 * (unint64_t)v201;
    unint64_t v209 = HIDWORD(v52) * (unint64_t)v201 + v207 + HIDWORD(v208);
    unint64_t v210 = HIDWORD(v207) + HIDWORD(v52) * (unint64_t)v200 + HIDWORD(v209);
    unint64_t v211 = v208 & 0xFFFF8000 | (v209 << 32);
    unint64_t v212 = HIDWORD(v55);
    unint64_t v213 = v55 * (unint64_t)v200;
    unint64_t v214 = v55 * (unint64_t)v201;
    unint64_t v215 = HIDWORD(v213) + HIDWORD(v55) * (unint64_t)v200;
    unint64_t v216 = HIDWORD(v55) * (unint64_t)v201 + v213 + HIDWORD(v214);
    unint64_t v217 = v215 + HIDWORD(v216);
    unint64_t v218 = v214 & 0xFFFF8000 | (v216 << 32);
    unint64_t v219 = HIDWORD(v54);
    unint64_t v220 = v54 * (unint64_t)v200;
    unint64_t v221 = v54 * (unint64_t)v201;
    unint64_t v222 = HIDWORD(v220) + HIDWORD(v54) * (unint64_t)v200;
    unint64_t v223 = HIDWORD(v54) * (unint64_t)v201 + v220 + HIDWORD(v221);
    unint64_t v224 = HIDWORD(v223);
    unint64_t v225 = v221 & 0xFFFF8000 | (v223 << 32);
    unint64_t v226 = v205 + v211;
    BOOL v42 = __CFADD__(__CFADD__(v205, v211), v210);
    unint64_t v227 = __CFADD__(v205, v211) + v210;
    v42 |= __CFADD__(v218, v227);
    v227 += v218;
    unint64_t v228 = v225 + v42 + v217;
    unint64_t v229 = v224 + (__CFADD__(v42, v217) | __CFADD__(v225, v42 + v217)) + v222;
    unint64_t v230 = v53 * (unint64_t)HIDWORD(v27);
    unint64_t v231 = v53 * (unint64_t)v27;
    unint64_t v232 = HIDWORD(v230) + HIDWORD(v53) * (unint64_t)HIDWORD(v27);
    unint64_t v233 = HIDWORD(v53) * (unint64_t)v27 + v230;
    unint64_t v234 = v52 * (unint64_t)HIDWORD(v27);
    unint64_t v235 = v52 * (unint64_t)v27;
    unint64_t v236 = v206 * (unint64_t)v27;
    unint64_t v237 = HIDWORD(v234) + v206 * (unint64_t)HIDWORD(v27);
    unint64_t v238 = v236 + v234 + HIDWORD(v235);
    unint64_t v239 = v235 | ((unint64_t)v238 << 32);
    unint64_t v240 = v233 + HIDWORD(v231);
    unint64_t v241 = v55 * (unint64_t)HIDWORD(v27);
    unint64_t v242 = v232 + HIDWORD(v240);
    BOOL v42 = __CFADD__(v242, v239);
    unint64_t v243 = v242 + v239;
    unint64_t v244 = v55 * (unint64_t)v27;
    unint64_t v245 = HIDWORD(v241);
    unint64_t v246 = v212 * (unint64_t)v27 + v241;
    unint64_t v247 = v245 + v212 * (unint64_t)HIDWORD(v27);
    unint64_t v248 = v246 + HIDWORD(v244);
    unint64_t v249 = v244 | ((unint64_t)v248 << 32);
    BOOL v251 = v42;
    BOOL v42 = __CFADD__(v42, v249);
    unint64_t v250 = v251 + v249;
    unsigned int v252 = v42;
    unint64_t v253 = v54 * (unint64_t)HIDWORD(v27);
    unint64_t v254 = v237 + HIDWORD(v238);
    BOOL v42 = __CFADD__(v254, v250);
    unint64_t v255 = v254 + v250;
    if (v42) {
      uint64_t v256 = 1;
    }
    else {
      uint64_t v256 = v252;
    }
    unint64_t v257 = v54 * (unint64_t)v27;
    unint64_t v258 = v219 * (unint64_t)v27;
    unint64_t v259 = HIDWORD(v253) + v219 * (unint64_t)HIDWORD(v27);
    unint64_t v260 = v258 + v253 + HIDWORD(v257);
    unint64_t v261 = v257 | ((unint64_t)v260 << 32);
    BOOL v42 = __CFADD__(v261, v256);
    unint64_t v262 = v261 + v256;
    unsigned int v263 = v42;
    unint64_t v264 = v247 + HIDWORD(v248);
    BOOL v42 = __CFADD__(v264, v262);
    unint64_t v265 = v264 + v262;
    if (v42) {
      uint64_t v266 = 1;
    }
    else {
      uint64_t v266 = v263;
    }
    unint64_t v267 = v259 + HIDWORD(v260) + v266;
    unint64_t v268 = v231 | ((unint64_t)v240 << 32);
    unint64_t v269 = v226 + v268;
    unint64_t v270 = __CFADD__(v226, v268) + v243;
    BOOL v271 = __CFADD__(__CFADD__(v226, v268), v243);
    unint64_t v272 = v270 + v227;
    uint64_t v273 = __CFADD__(v270, v227) || v271;
    BOOL v42 = __CFADD__(v255, v273);
    unint64_t v274 = v255 + v273;
    unsigned int v275 = v42;
    BOOL v42 = __CFADD__(v274, v228);
    unint64_t v276 = v274 + v228;
    if (v42) {
      uint64_t v277 = 1;
    }
    else {
      uint64_t v277 = v275;
    }
    BOOL v42 = __CFADD__(v265, v277);
    unint64_t v278 = v265 + v277;
    unsigned int v279 = v42;
    unint64_t v280 = v229 + v278;
    if (__CFADD__(v229, v278)) {
      uint64_t v281 = 1;
    }
    else {
      uint64_t v281 = v279;
    }
    char v282 = v56 + v327 + 49;
    char v283 = 15 - (v56 + v327);
    unint64_t v284 = v267 + v281;
    unint64_t v285 = (v276 << v282) + (v272 >> v283);
    unint64_t v286 = (v280 << v282) + (v276 >> v283);
    unint64_t result = (v284 << v282) + (v280 >> v283);
    unint64_t v287 = v284 >> v283;
    if (v284 >> v283 < 0x314DC6448D93 || v287 == 0x314DC6448D93 && result < 0x38C15B0A00000000)
    {
      unint64_t v288 = (v269 << v282) + ((v203 & 0xFFFF8000 | (v204 << 32)) >> v283);
      unint64_t v289 = (v272 << v282) + (v269 >> v283);
      BOOL v42 = __CFADD__(v288, v288 >> 2);
      unint64_t v290 = v288 + (v288 >> 2);
      uint64_t v291 = 8;
      if (v42) {
        uint64_t v292 = 8;
      }
      else {
        uint64_t v292 = 0;
      }
      unint64_t v293 = v292 & 0xFFFFFFFFFFFFFFF8 | (v290 >> 61);
      unint64_t v294 = v289 + (v289 >> 2);
      if (__CFADD__(v289, v289 >> 2)) {
        uint64_t v295 = 8;
      }
      else {
        uint64_t v295 = 0;
      }
      unint64_t v296 = v295 & 0xFFFFFFFFFFFFFFF8 | (v294 >> 61);
      uint64_t v297 = (2 * (v289 & 3)) | (8 * v294);
      unint64_t v298 = v285 + (v285 >> 2);
      if (__CFADD__(v285, v285 >> 2)) {
        uint64_t v299 = 8;
      }
      else {
        uint64_t v299 = 0;
      }
      unint64_t v300 = v286 + (v286 >> 2);
      if (__CFADD__(v286, v286 >> 2)) {
        uint64_t v301 = 8;
      }
      else {
        uint64_t v301 = 0;
      }
      unint64_t v302 = result + (result >> 2);
      if (!__CFADD__(result, result >> 2)) {
        uint64_t v291 = 0;
      }
      unint64_t v303 = v299 & 0xFFFFFFFFFFFFFFF8 | (v298 >> 61);
      uint64_t v304 = (2 * (v285 & 3)) | (8 * v298);
      BOOL v42 = __CFADD__(__CFADD__(v297, v293), v304);
      uint64_t v305 = __CFADD__(v297, v293) + v304;
      v42 |= __CFADD__(v296, v305);
      unint64_t v285 = v296 + v305;
      unint64_t v306 = v301 & 0xFFFFFFFFFFFFFFF8 | (v300 >> 61);
      uint64_t v307 = (2 * (v286 & 3)) | (8 * v300);
      BOOL v309 = v42;
      BOOL v42 = __CFADD__(v42, v307);
      uint64_t v308 = v309 + v307;
      v42 |= __CFADD__(v303, v308);
      unint64_t v286 = v303 + v308;
      uint64_t v310 = (2 * (result & 3)) | (8 * v302);
      unint64_t result = v306 + v42 + v310;
      unint64_t v287 = v291
           + (__CFADD__(v42, v310) | __CFADD__(v306, v42 + v310))
           + ((2 * (v287 & 3)) | (8 * (v287 + (v287 >> 2))))
           + (v302 >> 61);
    }
    if (bid_roundbound_128[(a2 >> 62) & 2 | (4 * a3) | result & 1] < __PAIR128__(v286, v285))
    {
      BOOL v42 = __CFADD__(result++, 1);
      if (v42)
      {
        unint64_t result = 0;
      }
      else if (v287 == 0x1ED09BEAD87C0 && result == 0x378D8E6400000000)
      {
        unint64_t result = 0x38C15B0A00000000;
      }
    }
    if (v286 | v285) {
      *v4 |= 0x20u;
    }
  }
  return result;
}

unint64_t *bid128_to_binary128_2part(unint64_t *result, unint64_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 & 0x8000000000000000;
  if ((~a4 & 0x6000000000000000) != 0)
  {
    uint64_t v5 = a4 & 0x1FFFFFFFFFFFFLL;
    if ((a4 & 0x1FFFFFFFFFFFFLL) > 0x1ED09BEAD87C0) {
      goto LABEL_62;
    }
    BOOL v6 = (a4 & 0x1FFFFFFFFFFFFLL) == 0x1ED09BEAD87C0 && a3 > 0x378D8E63FFFFFFFFLL;
    if (v6 || !(v5 | a3)) {
      goto LABEL_62;
    }
    uint64_t v7 = (a4 >> 49) & 0x3FFF;
    if (v5)
    {
      int8x16_t v8 = (int8x16_t)vdupq_n_s64(a4);
      int8x16_t v9 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB57B0), (uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB57C0), (uint64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1BDDB57D0))));
      int v10 = 2 * ((a4 & 0xCCCCCCCCCCCCLL) <= (a4 & 0x1333333333333));
      BOOL v11 = (a4 & 0xAAAAAAAAAAAALL) <= (a4 & 0x1555555555555);
    }
    else
    {
      int8x16_t v12 = (int8x16_t)vdupq_n_s64(a3);
      int v10 = 2 * ((a3 & 0xCCCCCCCCCCCCCCCCLL) <= (a3 & 0x3333333333333333));
      BOOL v11 = (a3 & 0xAAAAAAAAAAAAAAAALL) <= (a3 & 0x5555555555555555);
      int8x16_t v9 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB57E0), (uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB57F0)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v12, (int8x16_t)xmmword_1BDDB5750))), (int8x16_t)xmmword_1BDDB5810, (int8x16_t)xmmword_1BDDB5800);
    }
    int8x8_t v13 = vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
    unsigned int v14 = v13.i32[0] | v10 | v13.i32[1] | v11;
    unsigned int v15 = v14 - 15;
    if (v14 != 15)
    {
      if (v14 < 0x4F)
      {
        uint64_t v5 = (v5 << v15) + (a3 >> (79 - v14));
        a3 <<= v15;
      }
      else
      {
        uint64_t v5 = a3 << (v14 - 79);
        a3 = 0;
      }
    }
    if (v7 >= 0x2B65) {
      goto LABEL_61;
    }
    *((void *)&v17 + 1) = v5;
    *(void *)&long long v17 = a3;
    unint64_t v16 = v17 >> 62;
    unint64_t v18 = 4 * a3;
    if (v7 >= 0x499) {
      int v19 = v7 - 6176;
    }
    else {
      int v19 = -5000;
    }
    uint64_t v20 = v19;
    BOOL v21 = &bid_breakpoints_binary128[2 * v19 + 10000];
    unint64_t v22 = bid_breakpoints_binary128[2 * v19 + 10001];
    uint64_t v23 = bid_exponents_binary128[v19 + 5000] - v15;
    if (__PAIR128__(v16, v18) > __PAIR128__(v22, *v21))
    {
      uint64_t v23 = (v23 + 1);
      int v24 = (char *)&unk_1BDEC1160;
    }
    else
    {
      int v24 = (char *)&unk_1BDE737A0;
    }
    unint64_t v27 = &v24[32 * v20];
    uint64_t v29 = *(void *)v27;
    unint64_t v28 = *((void *)v27 + 1);
    unint64_t v30 = HIDWORD(v18);
    unsigned int v31 = 4 * a3;
    uint64_t v32 = HIDWORD(*(void *)v27);
    unsigned int v33 = *(void *)v27;
    unint64_t v34 = ((v33 * (unint64_t)v30) >> 32)
        + v32 * (unint64_t)v30
        + ((v32 * (unint64_t)v31 + v33 * v30 + ((v33 * (unint64_t)v31) >> 32)) >> 32);
    unint64_t v35 = HIDWORD(v28);
    unint64_t v36 = v28 * (unint64_t)v30;
    unint64_t v37 = v28 * (unint64_t)(4 * a3);
    unint64_t v38 = *((void *)v27 + 2);
    uint64_t v39 = *((void *)v27 + 3);
    unint64_t v40 = HIDWORD(v36) + HIDWORD(v28) * (unint64_t)v30;
    unint64_t v41 = HIDWORD(v28) * (unint64_t)v31 + v36 + HIDWORD(v37);
    unint64_t v42 = v40 + HIDWORD(v41);
    unint64_t v43 = v37 & 0xFFFFFFFC | (v41 << 32);
    unint64_t v44 = HIDWORD(v38);
    unint64_t v45 = v38 * (unint64_t)v30;
    unint64_t v46 = v38 * (unint64_t)v31;
    unint64_t v47 = HIDWORD(v45) + HIDWORD(v38) * (unint64_t)v30;
    unint64_t v48 = HIDWORD(v38) * (unint64_t)v31 + v45 + HIDWORD(v46);
    unint64_t v49 = v47 + HIDWORD(v48);
    unint64_t v50 = v46 & 0xFFFFFFFC | (v48 << 32);
    unint64_t v51 = v39 * (unint64_t)v30;
    unint64_t v52 = v39 * (unint64_t)v31;
    unint64_t v53 = HIDWORD(v51) + HIDWORD(v39) * (unint64_t)v30;
    unint64_t v54 = HIDWORD(v39) * (unint64_t)v31 + v51 + HIDWORD(v52);
    unint64_t v55 = HIDWORD(v54);
    unint64_t v56 = v52 & 0xFFFFFFFC | (v54 << 32);
    BOOL v57 = __CFADD__(v34, v43);
    unint64_t v58 = v34 + v43;
    unint64_t v59 = v50 + v57 + v42;
    unint64_t v60 = v56 + (__CFADD__(v57, v42) | __CFADD__(v50, v57 + v42)) + v49;
    unint64_t v61 = v55
        + (__CFADD__(__CFADD__(v57, v42) | __CFADD__(v50, v57 + v42), v49) | __CFADD__(v56, (__CFADD__(v57, v42) | __CFADD__(v50, v57 + v42)) + v49))
        + v53;
    unint64_t v62 = HIDWORD(v16);
    LODWORD(v49) = v16;
    unint64_t v63 = v33 * (unint64_t)HIDWORD(v16);
    unint64_t v64 = v29 * (unint64_t)v16;
    unint64_t v65 = v32 * (unint64_t)v16;
    unint64_t v66 = HIDWORD(v63) + v32 * (unint64_t)HIDWORD(v16);
    unint64_t v67 = v65 + v63 + HIDWORD(v64);
    unint64_t v68 = v66 + HIDWORD(v67);
    unint64_t v69 = v28 * (unint64_t)HIDWORD(v16);
    unint64_t v70 = v28 * (unint64_t)v16;
    unint64_t v71 = v35 * (unint64_t)v16;
    unint64_t v72 = HIDWORD(v69) + v35 * (unint64_t)HIDWORD(v16);
    unint64_t v73 = v71 + v69 + HIDWORD(v70);
    unint64_t v74 = v72 + HIDWORD(v73);
    unint64_t v75 = v70 | ((unint64_t)v73 << 32);
    unint64_t v76 = v38 * (unint64_t)HIDWORD(v16);
    unint64_t v77 = v38 * (unint64_t)v16;
    unint64_t v78 = v44 * (unint64_t)v16;
    unint64_t v79 = HIDWORD(v76) + v44 * (unint64_t)HIDWORD(v16);
    unint64_t v80 = v78 + v76 + HIDWORD(v77);
    unint64_t v81 = v77 | ((unint64_t)v80 << 32);
    unint64_t v82 = v39 * (unint64_t)HIDWORD(v16);
    unint64_t v83 = v39 * (unint64_t)v16;
    unint64_t v84 = HIDWORD(v82) + HIDWORD(v39) * (unint64_t)v62;
    unint64_t v85 = HIDWORD(v39) * (unint64_t)v49 + v82 + HIDWORD(v83);
    unint64_t v86 = v83 | ((unint64_t)v85 << 32);
    unsigned long long v87 = __PAIR128__(v81, v68) + v75;
    LODWORD(v8_Block_object_dispose(&STACK[0x940], 8) = __CFADD__(__CFADD__(v68, v75), v81);
    unint64_t v89 = v79 + HIDWORD(v80);
    unint64_t v90 = v74 + *((void *)&v87 + 1);
    if (__CFADD__(v74, *((void *)&v87 + 1))) {
      uint64_t v88 = 1;
    }
    else {
      uint64_t v88 = v88;
    }
    BOOL v57 = __CFADD__(v86, v88);
    unint64_t v91 = v86 + v88;
    unsigned int v92 = v57;
    BOOL v57 = __CFADD__(v89, v91);
    unint64_t v93 = v89 + v91;
    unint64_t v94 = v84 + HIDWORD(v85);
    if (v57) {
      uint64_t v95 = 1;
    }
    else {
      uint64_t v95 = v92;
    }
    unint64_t v96 = v94 + v95;
    unint64_t v97 = v64 | ((unint64_t)v67 << 32);
    uint64_t v98 = __CFADD__(v97, v58) + (void)v87;
    LODWORD(v99) = __CFADD__(__CFADD__(v97, v58), (void)v87);
    BOOL v57 = __CFADD__(v59, v98);
    unint64_t v100 = v59 + v98;
    if (v57) {
      uint64_t v99 = 1;
    }
    else {
      uint64_t v99 = v99;
    }
    BOOL v57 = __CFADD__(v90, v99);
    unint64_t v101 = v90 + v99;
    unsigned int v102 = v57;
    unint64_t v103 = v101 + v60;
    if (__CFADD__(v101, v60)) {
      uint64_t v104 = 1;
    }
    else {
      uint64_t v104 = v102;
    }
    BOOL v57 = __CFADD__(v93, v104);
    unint64_t v105 = v93 + v104;
    unsigned int v106 = v57;
    BOOL v57 = __CFADD__(v61, v105);
    unint64_t v107 = v61 + v105;
    if (v57) {
      uint64_t v108 = 1;
    }
    else {
      uint64_t v108 = v106;
    }
    unint64_t v109 = v96 + v108;
    if ((int)v23 <= 0)
    {
      int v110 = 1 - v23;
      if (v110 >= 115) {
        unsigned int v111 = 115;
      }
      else {
        unsigned int v111 = v110;
      }
      BOOL v112 = v111 == 64;
      if (v111 < 0x40)
      {
        unint64_t v115 = v103;
        unint64_t v116 = v107;
        unint64_t v113 = v109;
      }
      else
      {
        unint64_t v113 = 0;
        uint64_t v114 = 0;
        LOBYTE(v111) = v111 - 64;
        unint64_t v100 = v103;
        unint64_t v115 = v107;
        unint64_t v116 = v109;
        if (v112) {
          goto LABEL_74;
        }
      }
      unint64_t v100 = (v115 << -(char)v111) + (v100 >> v111);
      unint64_t v103 = (v116 << -(char)v111) + (v115 >> v111);
      unint64_t v107 = (v113 << -(char)v111) + (v116 >> v111);
      uint64_t v23 = 1;
      unint64_t v109 = v113 >> v111;
    }
    else if (v23 >= 0x7FFF)
    {
      goto LABEL_61;
    }
    unint64_t v117 = v107;
    unint64_t v107 = v103;
    uint64_t v114 = v109 & 0xFFFFFFFFFFFFLL;
    unint64_t v118 = HIWORD(v109);
    unint64_t v109 = v117;
    unint64_t v103 = v100;
    if (v118)
    {
LABEL_75:
      *unint64_t result = v117;
      result[1] = v114 + v4 + (v23 << 48);
      if (v107) {
        unint64_t v119 = v100;
      }
      else {
        unint64_t v119 = 0;
      }
      if (v107) {
        unint64_t v100 = v107;
      }
      if (v100
        && (v107 ? (int v120 = -113) : (int v120 = -177),
            int v121 = v23 + v120,
            int8x16_t v122 = (int8x16_t)vdupq_n_s64(v100),
            int8x16_t v123 = vbicq_s8((int8x16_t)xmmword_1BDDB5760, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v122, (int8x16_t)xmmword_1BDDB5720), (uint64x2_t)vandq_s8(v122, (int8x16_t)xmmword_1BDDB5740)), (int32x4_t)vcgtq_u64((uint64x2_t)vandq_s8(v122, (int8x16_t)xmmword_1BDDB5730), (uint64x2_t)vandq_s8(v122, (int8x16_t)xmmword_1BDDB5750)))), *(int8x8_t *)v123.i8 = vorr_s8(*(int8x8_t *)v123.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)), v124 = v123.i32[0] | v123.i32[1] | (2 * ((v100 & 0xCCCCCCCCCCCCCCCCLL) <= (v100 & 0x3333333333333333))) | ((v100 & 0xAAAAAAAAAAAAAAAALL) <= (v100 & 0x5555555555555555)), v125 = v121 - v124, v125 >= 0))
      {
        char v126 = v124 - 15;
        if (v124 > 0xF)
        {
          unint64_t v100 = (v100 << v126) + (v119 >> (79 - v124));
          v119 <<= v126;
        }
        else if (v124 != 15)
        {
          unint64_t v119 = (v100 << (v124 + 49)) + (v119 >> (15 - v124));
          v100 >>= 15 - v124;
        }
        v4 |= v100 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v125 << 48);
        *a2 = v119;
      }
      else
      {
        *a2 = 0;
      }
      unint64_t result = a2;
      goto LABEL_63;
    }
LABEL_74:
    uint64_t v23 = 0;
    unint64_t v117 = v109;
    unint64_t v100 = v103;
    goto LABEL_75;
  }
  if ((~a4 & 0x7800000000000000) != 0)
  {
LABEL_62:
    *unint64_t result = 0;
    goto LABEL_63;
  }
  if ((~a4 & 0x7C00000000000000) != 0)
  {
LABEL_61:
    v4 |= 0x7FFF000000000000uLL;
    goto LABEL_62;
  }
  if ((a4 & 0x3FFFFFFFFFFFLL) > 0x314DC6448D93
    || a3 >= 0x38C15B0A00000000 && (a4 & 0x3FFFFFFFFFFFLL) == 0x314DC6448D93)
  {
    v4 |= 0x7FFF800000000000uLL;
    goto LABEL_62;
  }
  *((void *)&v26 + 1) = a4;
  *(void *)&long long v26 = a3;
  unint64_t v25 = v26 >> 46;
  v4 |= (v25 >> 17) | 0x7FFF800000000000;
  *unint64_t result = (2 * (a3 & 0x3FFFFFFFFFFFLL)) | (v25 << 47);
LABEL_63:
  result[1] = v4;
  return result;
}

uint64_t __bid_round64_2_18(uint64_t result, int a2, uint64_t a3, unint64_t *a4, int *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9 = a2 - 1;
  unint64_t v10 = __bid_midpoint64[v9] + a3;
  unint64_t v11 = HIDWORD(v10);
  unint64_t v12 = __bid_Kx64[v9];
  unint64_t v13 = HIDWORD(v12);
  unint64_t v14 = HIDWORD(v10) * (unint64_t)v12;
  unint64_t v15 = v10 * (unint64_t)v12;
  unint64_t v16 = (LODWORD(__bid_midpoint64[v9]) + a3) * (unint64_t)v13
      + v14
      + HIDWORD(v15);
  unint64_t v17 = HIDWORD(v14) + v11 * (unint64_t)v13 + HIDWORD(v16);
  unint64_t v18 = v15 | ((unint64_t)v16 << 32);
  unint64_t v19 = v17 >> __bid_Ex64m64[v9];
  unint64_t v20 = v17 & __bid_mask64[v9];
  unint64_t v21 = __bid_half64[v9];
  if (v20 <= v21 && (v18 ? (BOOL v22 = v20 == v21) : (BOOL v22 = 0), v23 = a9, !v22)
    || (uint64_t v23 = a8, v20 != v21)
    || (uint64_t v23 = a8, v18 > __bid_ten2mxtrunc64[v9]))
  {
    *uint64_t v23 = 1;
  }
  if (!v20 && v18 <= __bid_ten2mxtrunc64[v9])
  {
    if ((v19 & 1) == 0) {
      a7 = a6;
    }
    *a7 = 1;
    v19 &= ~1uLL;
    *a8 = 0;
    *a9 = 0;
  }
  if (v19 == __bid_ten2k64[(int)result - a2])
  {
    unint64_t v19 = __bid_ten2k64[(int)result - a2 - 1];
    int v25 = 1;
  }
  else
  {
    int v25 = 0;
  }
  *a5 = v25;
  *a4 = v19;
  return result;
}

uint64_t __bid_round128_19_38(uint64_t result, int a2, unint64_t a3, unint64_t a4, unint64_t *a5, int *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v10 = a2 - 1;
  if (a2 > 19)
  {
    unint64_t v13 = (__bid_midpoint128[a2 - 20] + __PAIR128__(a4, a3)) >> 64;
    unint64_t v12 = *(void *)&__bid_midpoint128[a2 - 20] + a3;
    uint64_t v10 = v10;
  }
  else
  {
    uint64_t v11 = __bid_midpoint64[v10];
    unint64_t v12 = v11 + a3;
    if (__CFADD__(v11, a3)) {
      unint64_t v13 = a4 + 1;
    }
    else {
      unint64_t v13 = a4;
    }
  }
  unint64_t v14 = HIDWORD(v12);
  unint64_t v15 = &__bid_Kx128[2 * v10];
  unint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  unint64_t v18 = HIDWORD(v16);
  unint64_t v19 = v16 * (unint64_t)HIDWORD(v12);
  unint64_t v20 = HIDWORD(v19) + HIDWORD(v16) * (unint64_t)HIDWORD(v12);
  unint64_t v21 = HIDWORD(v16) * (unint64_t)v12
      + v19
      + ((v16 * (unint64_t)v12) >> 32);
  unint64_t v22 = HIDWORD(v21);
  unint64_t v23 = (v16 * v12) | ((unint64_t)v21 << 32);
  unint64_t v24 = HIDWORD(v17);
  unint64_t v25 = v17 * (unint64_t)HIDWORD(v12);
  unint64_t v26 = v17 * (unint64_t)v12;
  unint64_t v27 = HIDWORD(v17) * (unint64_t)v12 + v25 + HIDWORD(v26);
  unint64_t v28 = v26 | ((unint64_t)v27 << 32);
  unsigned long long v29 = __PAIR128__(v20, v23)
      + __PAIR128__(v22, HIDWORD(v25) + HIDWORD(v17) * (unint64_t)v14 + HIDWORD(v27));
  unint64_t v30 = HIDWORD(v13);
  LODWORD(v23) = v13;
  unint64_t v31 = v16 * (unint64_t)HIDWORD(v13);
  unint64_t v32 = v16 * (unint64_t)v13;
  unint64_t v33 = v18 * (unint64_t)v13;
  unint64_t v34 = HIDWORD(v31) + v18 * (unint64_t)HIDWORD(v13);
  unint64_t v35 = v33 + v31 + HIDWORD(v32);
  unint64_t v36 = HIDWORD(v35);
  unint64_t v37 = v32 | ((unint64_t)v35 << 32);
  unint64_t v38 = v17 * (unint64_t)HIDWORD(v13);
  unint64_t v39 = v17 * (unint64_t)v13;
  unint64_t v40 = HIDWORD(v17) * (unint64_t)v23 + v38 + HIDWORD(v39);
  unint64_t v41 = v39 | ((unint64_t)v40 << 32);
  unsigned long long v42 = __PAIR128__(v34, v37)
      + __PAIR128__(v36, HIDWORD(v38) + v24 * (unint64_t)v30 + HIDWORD(v40));
  unint64_t v43 = v29 + v41;
  BOOL v44 = __CFADD__(__CFADD__((void)v29, v41), (void)v42);
  uint64_t v45 = __CFADD__((void)v29, v41) + (void)v42;
  unsigned int v46 = v44;
  unint64_t v47 = *((void *)&v29 + 1) + v45;
  if (__CFADD__(*((void *)&v29 + 1), v45)) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v46;
  }
  unint64_t v49 = *((void *)&v42 + 1) + v48;
  int v50 = __bid_Ex128m128[v10];
  if (a2 <= 19)
  {
    unint64_t v51 = (v49 << -(char)v50) | (v47 >> v50);
    uint64_t v52 = v49 >> v50;
    v47 &= __bid_mask128[v10];
    unint64_t v53 = __bid_half128[v10];
    if (v47 > v53 || (v47 == v53 ? (BOOL v54 = (v43 | v28) == 0) : (BOOL v54 = 1), !v54))
    {
      if (v47 != v53
        || (unint64_t v58 = (unint64_t *)&__bid_ten2mxtrunc128[v10], v61 = v58[1], v62 = v43 == v61, v43 > v61))
      {
        unint64_t v55 = 0;
        goto LABEL_34;
      }
      unint64_t v55 = 0;
      if (!v62) {
        goto LABEL_38;
      }
LABEL_64:
      unint64_t v69 = *v58;
      unint64_t v63 = a9;
      if (v28 <= v69) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    unint64_t v55 = 0;
LABEL_36:
    unint64_t v63 = a10;
    goto LABEL_37;
  }
  unint64_t v51 = v49 >> v50;
  unint64_t v55 = __bid_mask128[v10] & v49;
  unint64_t v56 = __bid_half128[v10];
  if (v55 <= v56 && (v55 != v56 || !(v43 | v28 | v47)))
  {
    uint64_t v52 = 0;
    goto LABEL_36;
  }
  if (v55 == v56 && v47 == 0)
  {
    unint64_t v58 = (unint64_t *)&__bid_ten2mxtrunc128[v10];
    unint64_t v59 = v58[1];
    BOOL v60 = v43 == v59;
    if (v43 <= v59)
    {
      unint64_t v47 = 0;
      uint64_t v52 = 0;
      if (!v60) {
        goto LABEL_38;
      }
      goto LABEL_64;
    }
    unint64_t v47 = 0;
  }
  uint64_t v52 = 0;
LABEL_34:
  unint64_t v63 = a9;
LABEL_37:
  *unint64_t v63 = 1;
LABEL_38:
  if (!(v55 | v47) && __PAIR128__(v43, v28) <= __bid_ten2mxtrunc128[v10])
  {
    if ((v51 & 1) == 0) {
      a8 = a7;
    }
    *a8 = 1;
    v51 &= ~1uLL;
    *a9 = 0;
    *a10 = 0;
  }
  int v65 = result - a2;
  if ((int)result - a2 <= 19)
  {
    if (!v52)
    {
      if (v51 != __bid_ten2k64[v65])
      {
        int v68 = 0;
        uint64_t v52 = 0;
        goto LABEL_57;
      }
      uint64_t v52 = 0;
      unint64_t v51 = __bid_ten2k64[v65 - 1];
      goto LABEL_55;
    }
LABEL_56:
    int v68 = 0;
    goto LABEL_57;
  }
  if (v65 == 20)
  {
    if (v52 != 5) {
      goto LABEL_56;
    }
    if (v51 != 0x6BC75E2D63100000)
    {
      int v68 = 0;
      uint64_t v52 = 5;
      goto LABEL_57;
    }
    uint64_t v52 = 0;
    unint64_t v51 = 0x8AC7230489E80000;
  }
  else
  {
    unint64_t v66 = &__bid_ten2k128[2 * (v65 - 20)];
    if (v52 != v66[1] || v51 != *v66) {
      goto LABEL_56;
    }
    unint64_t v67 = &__bid_ten2k128[2 * (v65 - 21)];
    unint64_t v51 = *v67;
    uint64_t v52 = v67[1];
  }
LABEL_55:
  int v68 = 1;
LABEL_57:
  *a6 = v68;
  *a5 = v51;
  a5[1] = v52;
  return result;
}

int *__bid_round192_39_57(int a1, int a2, unint64_t *a3, unint64_t *a4, int *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9 = a2 - 1;
  if (a2 > 19)
  {
    unint64_t v15 = *a3;
    if (a2 > 0x26)
    {
      unint64_t v18 = (void *)((char *)&__bid_midpoint192 + 32 * (a2 - 39));
      unint64_t v19 = a3[1];
      BOOL v12 = __CFADD__(*v18, v15);
      unint64_t v13 = *v18 + v15;
      *a3 = v13;
      if (v12 && (BOOL v12 = __CFADD__(v19, 1), ++v19, v12))
      {
        unint64_t result = a5;
        uint64_t v20 = a3[2] + 1;
        unint64_t v11 = v18[1];
        a3[1] = v11;
      }
      else
      {
        unint64_t result = a5;
        uint64_t v23 = v18[1];
        BOOL v12 = __CFADD__(v23, v19);
        unint64_t v11 = v23 + v19;
        a3[1] = v11;
        uint64_t v20 = a3[2];
        if (v12) {
          ++v20;
        }
      }
      uint64_t v22 = v18[2] + v20;
      goto LABEL_26;
    }
    unint64_t v16 = &__bid_midpoint128[a2 - 20];
    unint64_t v17 = a3[1];
    BOOL v12 = __CFADD__(*v16, v15);
    unint64_t v13 = *v16 + v15;
    *a3 = v13;
    if (v12)
    {
      BOOL v12 = __CFADD__(v17++, 1);
      if (v12)
      {
        unint64_t result = a5;
        ++a3[2];
        unint64_t v11 = v16[1];
        a3[1] = v11;
        goto LABEL_27;
      }
    }
    uint64_t v21 = v16[1];
    BOOL v12 = __CFADD__(v21, v17);
    unint64_t v11 = v21 + v17;
    a3[1] = v11;
    if (!v12) {
      goto LABEL_22;
    }
    unint64_t result = a5;
  }
  else
  {
    uint64_t v10 = __bid_midpoint64[v9];
    unint64_t v11 = a3[1];
    BOOL v12 = __CFADD__(v10, *a3);
    unint64_t v13 = v10 + *a3;
    *a3 = v13;
    if (!v12 || (BOOL v12 = __CFADD__(v11, 1), ++v11, a3[1] = v11, !v12))
    {
LABEL_22:
      unint64_t result = a5;
      goto LABEL_27;
    }
    unint64_t result = a5;
    unint64_t v11 = 0;
  }
  uint64_t v22 = a3[2] + 1;
LABEL_26:
  a3[2] = v22;
LABEL_27:
  unint64_t v24 = HIDWORD(v13);
  unsigned int v25 = v13;
  uint64_t v26 = (int)v9;
  unint64_t v27 = (uint64_t *)((char *)&__bid_Kx192 + 32 * (int)v9);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  unint64_t v30 = HIDWORD(*v27);
  unsigned int v31 = *v27;
  unint64_t v32 = v31 * (unint64_t)HIDWORD(v13);
  unint64_t v33 = v31 * (unint64_t)v13;
  unint64_t v34 = v30 * (unint64_t)v13 + v32 + HIDWORD(v33);
  unint64_t v35 = HIDWORD(v32) + v30 * (unint64_t)HIDWORD(v13) + HIDWORD(v34);
  unint64_t v36 = HIDWORD(v29);
  unint64_t v37 = v29 * (unint64_t)HIDWORD(v13);
  unint64_t v38 = HIDWORD(v37) + HIDWORD(v29) * (unint64_t)HIDWORD(v13);
  unint64_t v39 = HIDWORD(v29) * (unint64_t)v13
      + v37
      + ((v29 * (unint64_t)v13) >> 32);
  unint64_t v40 = v38 + HIDWORD(v39);
  unint64_t v41 = (v29 * v13) | ((unint64_t)v39 << 32);
  uint64_t v42 = v27[2];
  unint64_t v43 = v42 * (unint64_t)HIDWORD(v13);
  unint64_t v44 = v42 * (unint64_t)v13;
  unint64_t v45 = HIDWORD(v43) + HIDWORD(v42) * (unint64_t)v24;
  unint64_t v46 = HIDWORD(v42) * (unint64_t)v25 + v43 + HIDWORD(v44);
  unint64_t v47 = v45 + HIDWORD(v46);
  unint64_t v48 = v44 | ((unint64_t)v46 << 32);
  unint64_t v49 = v35 + v41;
  unint64_t v50 = __CFADD__(v35, v41) + v48;
  BOOL v51 = __CFADD__(__CFADD__(v35, v41), v48);
  unint64_t v52 = v40 + v50;
  uint64_t v53 = __CFADD__(v40, v50) || v51;
  unint64_t v54 = v47 + v53;
  unint64_t v55 = HIDWORD(v11) * (unint64_t)v31;
  unint64_t v56 = HIDWORD(v55) + HIDWORD(v11) * (unint64_t)v30;
  unint64_t v57 = HIDWORD(v11) * (unint64_t)v29;
  unint64_t v58 = v11 * (unint64_t)HIDWORD(v29)
      + v57
      + ((v11 * (unint64_t)v29) >> 32);
  unint64_t v59 = HIDWORD(v57) + HIDWORD(v11) * (unint64_t)HIDWORD(v29) + HIDWORD(v58);
  unint64_t v60 = (v11 * v29) | ((unint64_t)v58 << 32);
  unint64_t v61 = HIDWORD(v11) * (unint64_t)v42;
  unint64_t v62 = HIDWORD(v61) + HIDWORD(v11) * (unint64_t)HIDWORD(v42);
  unint64_t v63 = v11 * (unint64_t)HIDWORD(v42) + v61;
  unint64_t v64 = v11 * (unint64_t)v28;
  unint64_t v65 = v11 * (unint64_t)v30 + v55 + HIDWORD(v64);
  unint64_t v66 = v56 + HIDWORD(v65);
  unint64_t v67 = v11 * (unint64_t)v42;
  unint64_t v68 = v63 + HIDWORD(v67);
  unint64_t v69 = v62 + HIDWORD(v68);
  unint64_t v70 = v67 | ((unint64_t)v68 << 32);
  unint64_t v71 = v66 + v60;
  BOOL v12 = __CFADD__(__CFADD__(v66, v60), v70);
  unint64_t v72 = __CFADD__(v66, v60) + v70;
  unsigned int v73 = v12;
  BOOL v12 = __CFADD__(v59, v72);
  unint64_t v74 = v59 + v72;
  if (v12) {
    uint64_t v75 = 1;
  }
  else {
    uint64_t v75 = v73;
  }
  unint64_t v76 = v69 + v75;
  unint64_t v77 = a3[2];
  unint64_t v78 = HIDWORD(v77);
  unsigned int v79 = v77;
  unint64_t v80 = HIDWORD(v77) * (unint64_t)v31;
  unint64_t v81 = v77 * (unint64_t)v28;
  unint64_t v82 = HIDWORD(v80) + HIDWORD(v77) * (unint64_t)v30;
  unint64_t v83 = v77 * (unint64_t)v30 + v80 + HIDWORD(v81);
  unint64_t v84 = v82 + HIDWORD(v83);
  unint64_t v85 = HIDWORD(v77) * (unint64_t)v29;
  unint64_t v86 = v77 * (unint64_t)v29;
  unint64_t v87 = HIDWORD(v85) + HIDWORD(v77) * (unint64_t)v36;
  unint64_t v88 = v77 * (unint64_t)v36 + v85 + HIDWORD(v86);
  unint64_t v89 = v87 + HIDWORD(v88);
  unint64_t v90 = v86 | ((unint64_t)v88 << 32);
  unint64_t v91 = HIDWORD(v77) * (unint64_t)v42;
  unint64_t v92 = v77 * (unint64_t)v42;
  unint64_t v93 = HIDWORD(v91) + v78 * (unint64_t)HIDWORD(v42);
  unint64_t v94 = v79 * (unint64_t)HIDWORD(v42) + v91 + HIDWORD(v92);
  unint64_t v95 = v92 | ((unint64_t)v94 << 32);
  BOOL v12 = __CFADD__(v84, v90);
  unint64_t v96 = v84 + v90;
  BOOL v98 = v12;
  BOOL v12 = __CFADD__(v12, v95);
  unint64_t v97 = v98 + v95;
  LODWORD(v99) = v12;
  BOOL v12 = __CFADD__(v89, v97);
  unint64_t v100 = v89 + v97;
  unint64_t v101 = v93 + HIDWORD(v94);
  if (v12) {
    uint64_t v99 = 1;
  }
  else {
    uint64_t v99 = v99;
  }
  unint64_t v102 = v101 + v99;
  unint64_t v103 = v64 | ((unint64_t)v65 << 32);
  unint64_t v104 = v103 + v49;
  unint64_t v105 = __CFADD__(v103, v49) + v71;
  unint64_t v106 = v33 | ((unint64_t)v34 << 32);
  LODWORD(v107) = __CFADD__(__CFADD__(v103, v49), v71);
  BOOL v12 = __CFADD__(v105, v52);
  unint64_t v108 = v105 + v52;
  if (v12) {
    uint64_t v107 = 1;
  }
  else {
    uint64_t v107 = v107;
  }
  BOOL v12 = __CFADD__(v74, v107);
  unint64_t v109 = v74 + v107;
  unsigned int v110 = v12;
  unint64_t v111 = v81 | ((unint64_t)v83 << 32);
  BOOL v12 = __CFADD__(v54, v109);
  unint64_t v112 = v54 + v109;
  if (v12) {
    uint64_t v113 = 1;
  }
  else {
    uint64_t v113 = v110;
  }
  unint64_t v114 = v76 + v113;
  unint64_t v115 = v108 + v111;
  unint64_t v116 = __CFADD__(v108, v111) + v96;
  BOOL v117 = __CFADD__(__CFADD__(v108, v111), v96);
  unint64_t v118 = v112 + v116;
  uint64_t v119 = __CFADD__(v112, v116) || v117;
  BOOL v12 = __CFADD__(v100, v119);
  unint64_t v120 = v100 + v119;
  unsigned int v121 = v12;
  unint64_t v122 = v114 + v120;
  if (__CFADD__(v114, v120)) {
    uint64_t v123 = 1;
  }
  else {
    uint64_t v123 = v121;
  }
  unint64_t v124 = v102 + v123;
  int v125 = __bid_Ex192m192[(int)v9];
  if (a2 >= 20)
  {
    unint64_t v127 = v124 >> v125;
    if (a2 < 0x27)
    {
      unint64_t v128 = (v124 << -(char)v125) | (v122 >> v125);
      v122 &= __bid_mask192[v26];
      unint64_t v135 = __bid_half192[v26];
      if (v122 > v135) {
        goto LABEL_79;
      }
      if (v122 == v135)
      {
        if (v118 || v115 || v104 || v106)
        {
LABEL_79:
          unint64_t v133 = 0;
          if (v122 != v135 || v118)
          {
            unint64_t v134 = a8;
            uint64_t v126 = 0;
            goto LABEL_115;
          }
          unint64_t v130 = (unint64_t *)((char *)&__bid_ten2mxtrunc192 + 32 * v26);
          unint64_t v136 = v130[2];
          if (v115 > v136) {
            goto LABEL_82;
          }
          if (v115 == v136)
          {
            unint64_t v150 = v130[1];
            if (v104 > v150)
            {
LABEL_82:
              unint64_t v118 = 0;
              unint64_t v133 = 0;
              uint64_t v126 = 0;
              goto LABEL_76;
            }
            if (v104 == v150)
            {
              unint64_t v118 = 0;
              unint64_t v133 = 0;
              uint64_t v126 = 0;
LABEL_163:
              unint64_t v151 = *v130;
              unint64_t v134 = a8;
              goto LABEL_168;
            }
          }
          unint64_t v118 = 0;
          unint64_t v133 = 0;
          uint64_t v126 = 0;
          goto LABEL_116;
        }
        unint64_t v118 = 0;
      }
      unint64_t v133 = 0;
      uint64_t v126 = 0;
      goto LABEL_103;
    }
    unint64_t v133 = __bid_mask192[v26] & v124;
    unint64_t v137 = __bid_half192[v26];
    if (v133 > v137)
    {
LABEL_89:
      uint64_t v126 = 0;
      if (v133 != v137 || v122 || v118)
      {
        unint64_t v134 = a8;
        unint64_t v128 = v127;
        unint64_t v127 = 0;
        goto LABEL_115;
      }
      unint64_t v138 = (unint64_t *)((char *)&__bid_ten2mxtrunc192 + 32 * v26);
      unint64_t v139 = v138[2];
      if (v115 > v139) {
        goto LABEL_95;
      }
      if (v115 == v139)
      {
        unint64_t v140 = v138[1];
        if (v104 > v140)
        {
LABEL_95:
          unint64_t v118 = 0;
          unint64_t v122 = 0;
          uint64_t v126 = 0;
          unint64_t v134 = a8;
LABEL_112:
          unint64_t v128 = v127;
          unint64_t v127 = 0;
          goto LABEL_115;
        }
        if (v104 == v140)
        {
          unint64_t v118 = 0;
          unint64_t v122 = 0;
          uint64_t v126 = 0;
          unint64_t v151 = *v138;
          unint64_t v134 = a8;
          unint64_t v128 = v127;
          unint64_t v127 = 0;
LABEL_168:
          if (v106 <= v151) {
            goto LABEL_116;
          }
          goto LABEL_115;
        }
      }
      unint64_t v118 = 0;
      unint64_t v122 = 0;
      uint64_t v126 = 0;
      unint64_t v128 = v127;
      unint64_t v127 = 0;
      goto LABEL_116;
    }
    if (v133 == v137)
    {
      if (v122 || v118 || v115 || v104 || v106) {
        goto LABEL_89;
      }
      unint64_t v118 = 0;
      unint64_t v122 = 0;
    }
    uint64_t v126 = 0;
    unint64_t v134 = a9;
    goto LABEL_112;
  }
  uint64_t v126 = v124 >> v125;
  unint64_t v127 = (v124 << -(char)v125) | (v122 >> v125);
  unint64_t v128 = (v122 << -(char)v125) | (v118 >> v125);
  v118 &= __bid_mask192[v26];
  unint64_t v129 = __bid_half192[v26];
  if (v118 <= v129 && (v118 != v129 || !v115 && !v104 && !v106))
  {
    unint64_t v122 = 0;
    unint64_t v133 = 0;
LABEL_103:
    unint64_t v134 = a9;
    goto LABEL_115;
  }
  if (v118 != v129) {
    goto LABEL_75;
  }
  unint64_t v130 = (unint64_t *)((char *)&__bid_ten2mxtrunc192 + 32 * v26);
  unint64_t v131 = v130[2];
  if (v115 > v131) {
    goto LABEL_75;
  }
  if (v115 != v131) {
    goto LABEL_164;
  }
  unint64_t v132 = v130[1];
  if (v104 <= v132)
  {
    if (v104 == v132)
    {
      unint64_t v122 = 0;
      unint64_t v133 = 0;
      goto LABEL_163;
    }
LABEL_164:
    unint64_t v122 = 0;
    unint64_t v133 = 0;
    goto LABEL_116;
  }
LABEL_75:
  unint64_t v122 = 0;
  unint64_t v133 = 0;
LABEL_76:
  unint64_t v134 = a8;
LABEL_115:
  *unint64_t v134 = 1;
LABEL_116:
  if (!v133 && !v122 && !v118)
  {
    unint64_t v141 = (char *)&__bid_ten2mxtrunc192 + 32 * v26;
    unint64_t v142 = *((void *)v141 + 2);
    if (v115 < v142 || v115 == v142 && __PAIR128__(v104, v106) <= *(_OWORD *)v141)
    {
      unint64_t v143 = a7;
      if ((v128 & 1) == 0) {
        unint64_t v143 = a6;
      }
      *unint64_t v143 = 1;
      v128 &= ~1uLL;
      *a8 = 0;
      *a9 = 0;
    }
  }
  unsigned int v144 = a1 - a2;
  if (a1 - a2 > 19)
  {
    if (v144 == 20)
    {
      if (v126) {
        goto LABEL_153;
      }
      if (v127 == 5)
      {
        if (v128 != 0x6BC75E2D63100000)
        {
          int v145 = 0;
          uint64_t v126 = 0;
          unint64_t v127 = 5;
          goto LABEL_154;
        }
        uint64_t v126 = 0;
        unint64_t v127 = 0;
        unint64_t v128 = 0x8AC7230489E80000;
        goto LABEL_129;
      }
    }
    else
    {
      if (v144 > 0x26)
      {
        if (v144 == 39)
        {
          if (v126 == 2)
          {
            if (v127 != 0xF050FE938943ACC4)
            {
              int v145 = 0;
              uint64_t v126 = 2;
              goto LABEL_154;
            }
            if (v128 != 0x5F65568000000000)
            {
              int v145 = 0;
              uint64_t v126 = 2;
              unint64_t v127 = 0xF050FE938943ACC4;
              goto LABEL_154;
            }
            uint64_t v126 = 0;
            unint64_t v128 = 0x98A224000000000;
            unint64_t v127 = 0x4B3B4CA85A86C47ALL;
            goto LABEL_129;
          }
        }
        else
        {
          unint64_t v148 = (void *)((char *)&__bid_ten2k256 + 32 * v144 - 1248);
          if (v126 == v148[2] && v127 == v148[1] && v128 == *v148)
          {
            unint64_t v149 = (unint64_t *)((char *)&__bid_ten2k256 + 32 * v144 - 1280);
            unint64_t v128 = *v149;
            unint64_t v127 = v149[1];
            uint64_t v126 = v149[2];
            goto LABEL_129;
          }
        }
LABEL_153:
        int v145 = 0;
        goto LABEL_154;
      }
      if (v126) {
        goto LABEL_153;
      }
      unint64_t v146 = &__bid_ten2k128[2 * v144 - 40];
      if (v127 == v146[1] && v128 == *v146)
      {
        uint64_t v126 = 0;
        unint64_t v147 = &__bid_ten2k128[2 * v144 - 42];
        unint64_t v128 = *v147;
        unint64_t v127 = v147[1];
        goto LABEL_129;
      }
    }
    int v145 = 0;
    uint64_t v126 = 0;
    goto LABEL_154;
  }
  if (v126 | v127) {
    goto LABEL_153;
  }
  if (v128 != __bid_ten2k64[v144])
  {
    int v145 = 0;
    uint64_t v126 = 0;
    unint64_t v127 = 0;
    goto LABEL_154;
  }
  uint64_t v126 = 0;
  unint64_t v127 = 0;
  unint64_t v128 = __bid_ten2k64[(int)v144 - 1];
LABEL_129:
  int v145 = 1;
LABEL_154:
  *unint64_t result = v145;
  a4[1] = v127;
  a4[2] = v126;
  *a4 = v128;
  return result;
}

uint64_t __bid_round256_58_76(int a1, uint64_t a2, unint64_t *a3, unint64_t *a4, int *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9 = (int)a2 - 1;
  if ((int)a2 <= 19)
  {
    uint64_t v10 = __bid_midpoint64[v9];
    unint64_t v11 = a3[1];
    BOOL v24 = __CFADD__(v10, *a3);
    unint64_t v12 = v10 + *a3;
    *a3 = v12;
    if (!v24) {
      goto LABEL_54;
    }
    BOOL v24 = __CFADD__(v11, 1);
    a3[1] = ++v11;
    if (!v24) {
      goto LABEL_54;
    }
    unint64_t v13 = a3[2];
    a3[2] = v13 + 1;
    unint64_t v11 = 0;
    if (v13 != -1) {
      goto LABEL_54;
    }
    goto LABEL_44;
  }
  if (a2 > 0x26)
  {
    unint64_t v17 = *a3;
    if (a2 <= 0x3A)
    {
      unint64_t v18 = (void *)((char *)&__bid_midpoint192 + 32 * (a2 - 39));
      unint64_t v19 = a3[1];
      BOOL v24 = __CFADD__(*v18, v17);
      unint64_t v12 = *v18 + v17;
      *a3 = v12;
      if (v24 && (BOOL v24 = __CFADD__(v19, 1), ++v19, v24))
      {
        unint64_t v20 = a3[2];
        BOOL v24 = __CFADD__(v20, 1);
        unint64_t v21 = v20 + 1;
        if (v24) {
          ++a3[3];
        }
        unint64_t v11 = v18[1];
        a3[1] = v11;
      }
      else
      {
        uint64_t v30 = v18[1];
        unint64_t v21 = a3[2];
        unint64_t v11 = v30 + v19;
        a3[1] = v30 + v19;
        if (__CFADD__(v30, v19))
        {
          BOOL v24 = __CFADD__(v21++, 1);
          if (v24)
          {
            ++a3[3];
            a3[2] = v18[2];
            goto LABEL_54;
          }
        }
      }
      uint64_t v31 = v18[2];
      BOOL v24 = __CFADD__(v31, v21);
      unint64_t v25 = v31 + v21;
      goto LABEL_42;
    }
    uint64_t v26 = (void *)((char *)&__bid_midpoint256 + 32 * (a2 - 59));
    unint64_t v27 = a3[1];
    BOOL v24 = __CFADD__(*v26, v17);
    unint64_t v12 = *v26 + v17;
    *a3 = v12;
    if (v24 && (BOOL v24 = __CFADD__(v27, 1), ++v27, v24))
    {
      unint64_t v28 = a3[2];
      BOOL v24 = __CFADD__(v28, 1);
      unint64_t v29 = v28 + 1;
      if (v24) {
        ++a3[3];
      }
      unint64_t v11 = v26[1];
      a3[1] = v11;
    }
    else
    {
      uint64_t v33 = v26[1];
      unint64_t v29 = a3[2];
      unint64_t v11 = v33 + v27;
      a3[1] = v33 + v27;
      if (__CFADD__(v33, v27))
      {
        BOOL v24 = __CFADD__(v29++, 1);
        if (v24)
        {
          uint64_t v34 = a3[3] + 1;
          a3[2] = v26[2];
LABEL_52:
          uint64_t v32 = v26[3] + v34;
          goto LABEL_53;
        }
      }
    }
    uint64_t v35 = v26[2];
    BOOL v24 = __CFADD__(v35, v29);
    a3[2] = v35 + v29;
    uint64_t v34 = a3[3];
    if (v24) {
      ++v34;
    }
    goto LABEL_52;
  }
  unint64_t v14 = &__bid_midpoint128[(a2 - 20)];
  unint64_t v15 = a3[1];
  BOOL v24 = __CFADD__(*v14, *a3);
  unint64_t v12 = *v14 + *a3;
  *a3 = v12;
  if (v24)
  {
    BOOL v24 = __CFADD__(v15++, 1);
    if (v24)
    {
      unint64_t v16 = a3[2];
      a3[2] = v16 + 1;
      if (v16 == -1) {
        ++a3[3];
      }
      unint64_t v11 = v14[1];
      a3[1] = v11;
      goto LABEL_54;
    }
  }
  uint64_t v22 = v14[1];
  unint64_t v11 = v22 + v15;
  a3[1] = v22 + v15;
  if (!__CFADD__(v22, v15)) {
    goto LABEL_54;
  }
  unint64_t v23 = a3[2];
  BOOL v24 = __CFADD__(v23, 1);
  unint64_t v25 = v23 + 1;
LABEL_42:
  a3[2] = v25;
  if (v24)
  {
LABEL_44:
    uint64_t v32 = a3[3] + 1;
LABEL_53:
    a3[3] = v32;
  }
LABEL_54:
  unint64_t v36 = HIDWORD(v12);
  uint64_t v256 = (int)v9;
  unint64_t v37 = (uint64_t *)((char *)&__bid_Kx256 + 32 * (int)v9);
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  unint64_t v40 = HIDWORD(*v37);
  unsigned int v41 = *v37;
  unint64_t v42 = v41 * (unint64_t)HIDWORD(v12);
  unsigned int v254 = v41 * v12;
  unint64_t v255 = v40 * (unint64_t)v12
       + v42
       + ((v41 * (unint64_t)v12) >> 32);
  unint64_t v43 = HIDWORD(v42) + v40 * (unint64_t)HIDWORD(v12) + HIDWORD(v255);
  unint64_t v44 = HIDWORD(v39);
  unint64_t v45 = v39 * (unint64_t)HIDWORD(v12);
  unint64_t v46 = v39 * (unint64_t)v12;
  unint64_t v47 = HIDWORD(v39) * (unint64_t)v12 + v45 + HIDWORD(v46);
  unint64_t v48 = HIDWORD(v45) + HIDWORD(v39) * (unint64_t)HIDWORD(v12) + HIDWORD(v47);
  uint64_t v49 = v37[2];
  uint64_t v50 = v37[3];
  unint64_t v51 = v49 * (unint64_t)HIDWORD(v12);
  unint64_t v52 = v49 * (unint64_t)v12;
  unint64_t v53 = HIDWORD(v49) * (unint64_t)v12 + v51 + HIDWORD(v52);
  unint64_t v54 = HIDWORD(v51) + HIDWORD(v49) * (unint64_t)HIDWORD(v12) + HIDWORD(v53);
  unint64_t v55 = v50 * (unint64_t)HIDWORD(v12);
  unint64_t v56 = v50 * (unint64_t)v12;
  unint64_t v57 = HIDWORD(v50) * (unint64_t)v12 + v55 + HIDWORD(v56);
  unint64_t v58 = HIDWORD(v55) + HIDWORD(v50) * (unint64_t)v36 + HIDWORD(v57);
  unint64_t v59 = v46 | ((unint64_t)v47 << 32);
  unint64_t v60 = v52 | ((unint64_t)v53 << 32);
  unint64_t v61 = v56 | ((unint64_t)v57 << 32);
  unint64_t v253 = v43 + v59;
  BOOL v24 = __CFADD__(__CFADD__(v43, v59), v60);
  unint64_t v62 = __CFADD__(v43, v59) + v60;
  unsigned int v63 = v24;
  unint64_t v251 = v48 + v62;
  if (__CFADD__(v48, v62)) {
    uint64_t v64 = 1;
  }
  else {
    uint64_t v64 = v63;
  }
  BOOL v24 = __CFADD__(v61, v64);
  unint64_t v65 = v61 + v64;
  unsigned int v66 = v24;
  unint64_t v250 = v54 + v65;
  if (__CFADD__(v54, v65)) {
    uint64_t v67 = 1;
  }
  else {
    uint64_t v67 = v66;
  }
  unint64_t v252 = v58 + v67;
  unint64_t v68 = HIDWORD(v11) * (unint64_t)v41;
  unint64_t v69 = HIDWORD(v11) * (unint64_t)v39;
  unint64_t v70 = HIDWORD(v69) + HIDWORD(v11) * (unint64_t)HIDWORD(v39);
  unint64_t v71 = v11 * (unint64_t)HIDWORD(v39)
      + v69
      + ((v11 * (unint64_t)v39) >> 32);
  unint64_t v72 = v70 + HIDWORD(v71);
  unint64_t v73 = (v11 * v39) | ((unint64_t)v71 << 32);
  unint64_t v74 = HIDWORD(v11) * (unint64_t)v49;
  unint64_t v75 = HIDWORD(v74) + HIDWORD(v11) * (unint64_t)HIDWORD(v49);
  unint64_t v76 = v11 * (unint64_t)HIDWORD(v49)
      + v74
      + ((v11 * (unint64_t)v49) >> 32);
  int v257 = v9;
  unint64_t v77 = v75 + HIDWORD(v76);
  unint64_t v78 = (v11 * v49) | ((unint64_t)v76 << 32);
  unint64_t v79 = HIDWORD(v11) * (unint64_t)v50;
  unint64_t v80 = v11 * (unint64_t)v38;
  unint64_t v81 = v11 * (unint64_t)v40 + v68 + HIDWORD(v80);
  unint64_t v82 = HIDWORD(v68) + HIDWORD(v11) * (unint64_t)v40 + HIDWORD(v81);
  unint64_t v83 = v11 * (unint64_t)HIDWORD(v50)
      + v79
      + ((v11 * (unint64_t)v50) >> 32);
  unint64_t v84 = HIDWORD(v79) + HIDWORD(v11) * (unint64_t)HIDWORD(v50) + HIDWORD(v83);
  unint64_t v85 = (v11 * v50) | ((unint64_t)v83 << 32);
  unint64_t v86 = v82 + v73;
  BOOL v24 = __CFADD__(__CFADD__(v82, v73), v78);
  unint64_t v87 = __CFADD__(v82, v73) + v78;
  unsigned int v88 = v24;
  BOOL v24 = __CFADD__(v72, v87);
  unint64_t v89 = v72 + v87;
  if (v24) {
    uint64_t v90 = 1;
  }
  else {
    uint64_t v90 = v88;
  }
  BOOL v24 = __CFADD__(v85, v90);
  unint64_t v91 = v85 + v90;
  unsigned int v92 = v24;
  unint64_t v93 = v77 + v91;
  if (__CFADD__(v77, v91)) {
    uint64_t v94 = 1;
  }
  else {
    uint64_t v94 = v92;
  }
  unint64_t v249 = v84 + v94;
  unint64_t v95 = a3[2];
  unint64_t v96 = a3[3];
  unint64_t v97 = HIDWORD(v95) * (unint64_t)v39;
  unint64_t v98 = v95 * (unint64_t)HIDWORD(v39)
      + v97
      + ((v95 * (unint64_t)v39) >> 32);
  unint64_t v99 = HIDWORD(v97) + HIDWORD(v95) * (unint64_t)HIDWORD(v39) + HIDWORD(v98);
  unint64_t v100 = (v95 * v39) | ((unint64_t)v98 << 32);
  unint64_t v101 = HIDWORD(v95) * (unint64_t)v49;
  unint64_t v102 = v95 * (unint64_t)HIDWORD(v49)
       + v101
       + ((v95 * (unint64_t)v49) >> 32);
  unint64_t v103 = HIDWORD(v101) + HIDWORD(v95) * (unint64_t)HIDWORD(v49) + HIDWORD(v102);
  unint64_t v104 = (v95 * v49) | ((unint64_t)v102 << 32);
  unint64_t v105 = HIDWORD(v95) * (unint64_t)v41;
  unint64_t v106 = v95 * (unint64_t)v40 + v105;
  unint64_t v107 = HIDWORD(v105) + HIDWORD(v95) * (unint64_t)v40;
  unint64_t v108 = HIDWORD(v95) * (unint64_t)v50;
  unint64_t v109 = v95 * (unint64_t)HIDWORD(v50)
       + v108
       + ((v95 * (unint64_t)v50) >> 32);
  unint64_t v110 = HIDWORD(v108) + HIDWORD(v95) * (unint64_t)HIDWORD(v50) + HIDWORD(v109);
  unint64_t v111 = (v95 * v50) | ((unint64_t)v109 << 32);
  unint64_t v112 = v95 * (unint64_t)v38;
  unint64_t v113 = v106 + HIDWORD(v112);
  unint64_t v114 = v107 + HIDWORD(v113);
  BOOL v24 = __CFADD__(v114, v100);
  unint64_t v115 = v114 + v100;
  BOOL v117 = v24;
  BOOL v24 = __CFADD__(v24, v104);
  unint64_t v116 = v117 + v104;
  unsigned int v118 = v24;
  unint64_t v119 = v99 + v116;
  if (__CFADD__(v99, v116)) {
    uint64_t v120 = 1;
  }
  else {
    uint64_t v120 = v118;
  }
  BOOL v24 = __CFADD__(v111, v120);
  unint64_t v121 = v111 + v120;
  unsigned int v122 = v24;
  unint64_t v123 = v103 + v121;
  if (__CFADD__(v103, v121)) {
    uint64_t v124 = 1;
  }
  else {
    uint64_t v124 = v122;
  }
  unint64_t v125 = v110 + v124;
  unint64_t v126 = HIDWORD(v96) * (unint64_t)v41;
  unint64_t v127 = HIDWORD(v126) + HIDWORD(v96) * (unint64_t)v40;
  unint64_t v128 = v96 * (unint64_t)v40 + v126;
  unint64_t v129 = HIDWORD(v96) * (unint64_t)v39;
  unint64_t v130 = HIDWORD(v129) + HIDWORD(v96) * (unint64_t)HIDWORD(v39);
  unint64_t v131 = v96 * (unint64_t)v39;
  unint64_t v132 = v96 * (unint64_t)v44 + v129 + HIDWORD(v131);
  unint64_t v133 = v130 + HIDWORD(v132);
  unint64_t v134 = v131 | ((unint64_t)v132 << 32);
  unint64_t v135 = HIDWORD(v96) * (unint64_t)v49;
  unint64_t v136 = HIDWORD(v135) + HIDWORD(v96) * (unint64_t)HIDWORD(v49);
  unint64_t v137 = HIDWORD(v96) * (unint64_t)v50;
  unint64_t v138 = HIDWORD(v137) + HIDWORD(v96) * (unint64_t)HIDWORD(v50);
  unint64_t v139 = v96 * (unint64_t)HIDWORD(v50);
  unint64_t v140 = v96 * (unint64_t)v38;
  unint64_t v141 = v128 + HIDWORD(v140);
  unint64_t v142 = v127 + HIDWORD(v141);
  BOOL v24 = __CFADD__(v142, v134);
  unint64_t v143 = v142 + v134;
  unint64_t v144 = v96 * (unint64_t)HIDWORD(v49)
       + v135
       + ((v96 * (unint64_t)v49) >> 32);
  unint64_t v145 = (v96 * v49) | ((unint64_t)v144 << 32);
  BOOL v147 = v24;
  BOOL v24 = __CFADD__(v24, v145);
  unint64_t v146 = v147 + v145;
  LODWORD(v14_Block_object_dispose(&STACK[0x940], 8) = v24;
  unint64_t v149 = v133 + v146;
  unint64_t v150 = v96 * (unint64_t)v50;
  if (__CFADD__(v133, v146)) {
    uint64_t v148 = 1;
  }
  else {
    uint64_t v148 = v148;
  }
  unint64_t v151 = v139 + v137 + HIDWORD(v150);
  unint64_t v152 = v150 | ((unint64_t)v151 << 32);
  BOOL v24 = __CFADD__(v152, v148);
  unint64_t v153 = v152 + v148;
  unint64_t v154 = v136 + HIDWORD(v144);
  unsigned int v155 = v24;
  BOOL v24 = __CFADD__(v154, v153);
  unint64_t v156 = v154 + v153;
  unint64_t v157 = v138 + HIDWORD(v151);
  if (v24) {
    uint64_t v158 = 1;
  }
  else {
    uint64_t v158 = v155;
  }
  unint64_t v159 = v157 + v158;
  unint64_t v160 = v80 | ((unint64_t)v81 << 32);
  uint64_t v162 = (__PAIR128__(v86, v160) + v253) >> 64;
  unint64_t v161 = v160 + v253;
  LODWORD(v163) = __CFADD__(__CFADD__(v160, v253), v86);
  BOOL v24 = __CFADD__(v162, v251);
  uint64_t v164 = v162 + v251;
  if (v24) {
    uint64_t v163 = 1;
  }
  else {
    uint64_t v163 = v163;
  }
  BOOL v24 = __CFADD__(v89, v163);
  unint64_t v165 = v89 + v163;
  LODWORD(v166) = v24;
  BOOL v24 = __CFADD__(v165, v250);
  unint64_t v167 = v165 + v250;
  if (v24) {
    uint64_t v166 = 1;
  }
  else {
    uint64_t v166 = v166;
  }
  BOOL v24 = __CFADD__(v93, v166);
  unint64_t v168 = v93 + v166;
  LODWORD(v169) = v24;
  BOOL v24 = __CFADD__(v252, v168);
  unint64_t v170 = v252 + v168;
  if (v24) {
    uint64_t v169 = 1;
  }
  else {
    uint64_t v169 = v169;
  }
  unint64_t v171 = v249 + v169;
  unint64_t v172 = v112 | ((unint64_t)v113 << 32);
  BOOL v24 = __CFADD__(v164, v172);
  unint64_t v173 = v164 + v172;
  BOOL v175 = v24;
  BOOL v24 = __CFADD__(v24, v115);
  unint64_t v174 = v175 + v115;
  unsigned int v176 = v24;
  BOOL v24 = __CFADD__(v167, v174);
  unint64_t v177 = v167 + v174;
  unint64_t v178 = v254 | ((unint64_t)v255 << 32);
  if (v24) {
    uint64_t v179 = 1;
  }
  else {
    uint64_t v179 = v176;
  }
  BOOL v24 = __CFADD__(v119, v179);
  unint64_t v180 = v119 + v179;
  unsigned int v181 = v24;
  unint64_t v182 = v180 + v170;
  unint64_t v183 = v140 | ((unint64_t)v141 << 32);
  if (__CFADD__(v180, v170)) {
    uint64_t v184 = 1;
  }
  else {
    uint64_t v184 = v181;
  }
  BOOL v24 = __CFADD__(v123, v184);
  unint64_t v185 = v123 + v184;
  LODWORD(v186) = v24;
  BOOL v24 = __CFADD__(v171, v185);
  unint64_t v187 = v171 + v185;
  if (v24) {
    uint64_t v186 = 1;
  }
  else {
    uint64_t v186 = v186;
  }
  unint64_t v188 = v125 + v186;
  unint64_t v189 = v177 + v183;
  BOOL v24 = __CFADD__(__CFADD__(v177, v183), v143);
  unint64_t v190 = __CFADD__(v177, v183) + v143;
  unsigned int v191 = v24;
  unint64_t v192 = v182 + v190;
  if (__CFADD__(v182, v190)) {
    uint64_t v193 = 1;
  }
  else {
    uint64_t v193 = v191;
  }
  BOOL v24 = __CFADD__(v149, v193);
  unint64_t v194 = v149 + v193;
  unsigned int v195 = v24;
  unint64_t v196 = v194 + v187;
  if (__CFADD__(v194, v187)) {
    uint64_t v197 = 1;
  }
  else {
    uint64_t v197 = v195;
  }
  uint64_t result = a2;
  BOOL v24 = __CFADD__(v156, v197);
  unint64_t v199 = v156 + v197;
  unsigned int v200 = v24;
  unint64_t v201 = v188 + v199;
  if (__CFADD__(v188, v199)) {
    uint64_t v202 = 1;
  }
  else {
    uint64_t v202 = v200;
  }
  unint64_t v203 = v159 + v202;
  int v204 = __bid_Ex256m256[v257];
  if ((int)a2 < 20)
  {
    unint64_t v205 = v203 >> v204;
    uint64_t v206 = (v203 << -(char)v204) | (v201 >> v204);
    unint64_t v207 = (v201 << -(char)v204) | (v196 >> v204);
    unint64_t v208 = (v196 << -(char)v204) | (v192 >> v204);
    uint64_t v209 = v256;
    v192 &= __bid_mask256[v256];
    unint64_t v210 = __bid_half256[v256];
    if (v192 <= v210 && (v192 != v210 || !v189 && !v173 && !v161 && !v178))
    {
      unint64_t v196 = 0;
      unint64_t v201 = 0;
      unint64_t v215 = 0;
LABEL_237:
      unint64_t v224 = a9;
      goto LABEL_238;
    }
    if (v192 != v210) {
      goto LABEL_165;
    }
    unint64_t v211 = (unint64_t *)((char *)&__bid_ten2mxtrunc256 + 32 * v256);
    unint64_t v212 = v211[2];
    if (v189 > v212) {
      goto LABEL_165;
    }
    unint64_t v213 = v211[3];
    if (v189 == v213 && v173 > v212) {
      goto LABEL_165;
    }
    unint64_t v196 = 0;
    if (v189 != v213 || v173 != v212)
    {
      unint64_t v201 = 0;
      unint64_t v215 = 0;
      goto LABEL_239;
    }
    unint64_t v214 = v211[1];
    if (v161 > v214)
    {
LABEL_165:
      unint64_t v196 = 0;
      unint64_t v201 = 0;
      unint64_t v215 = 0;
LABEL_223:
      unint64_t v224 = a8;
      goto LABEL_238;
    }
    unint64_t v196 = 0;
    unint64_t v201 = 0;
    unint64_t v215 = 0;
    if (v161 != v214) {
      goto LABEL_239;
    }
LABEL_315:
    unint64_t v224 = a8;
    if (v178 <= *v211) {
      goto LABEL_239;
    }
    goto LABEL_238;
  }
  uint64_t v209 = v256;
  if (a2 >= 0x27)
  {
    if (a2 <= 0x39)
    {
      unint64_t v207 = v203 >> v204;
      unint64_t v208 = (v203 << -(char)v204) | (v201 >> v204);
      v201 &= __bid_mask256[v256];
LABEL_194:
      unint64_t v220 = __bid_half256[v256];
      if (v201 > v220) {
        goto LABEL_195;
      }
      if (v201 == v220)
      {
        if (v196 || v192 || v189 || v173 || v161 || v178)
        {
LABEL_195:
          unint64_t v215 = 0;
          if (v201 != v220 || v196 || v192)
          {
            unint64_t v224 = a8;
            uint64_t v206 = 0;
            unint64_t v205 = 0;
            goto LABEL_238;
          }
          unint64_t v211 = (unint64_t *)((char *)&__bid_ten2mxtrunc256 + 32 * v256);
          unint64_t v221 = v211[3];
          if (v189 > v221) {
            goto LABEL_203;
          }
          if (v189 == v221)
          {
            unint64_t v222 = v211[2];
            if (v173 > v222)
            {
LABEL_203:
              unint64_t v192 = 0;
              unint64_t v196 = 0;
              unint64_t v215 = 0;
LABEL_221:
              uint64_t v206 = 0;
              goto LABEL_222;
            }
            if (v173 == v222)
            {
              unint64_t v223 = v211[1];
              if (v161 > v223) {
                goto LABEL_203;
              }
              if (v161 == v223)
              {
                unint64_t v192 = 0;
                unint64_t v196 = 0;
                unint64_t v215 = 0;
                goto LABEL_313;
              }
            }
          }
          unint64_t v192 = 0;
          unint64_t v196 = 0;
          unint64_t v215 = 0;
LABEL_318:
          uint64_t v206 = 0;
          goto LABEL_319;
        }
        unint64_t v192 = 0;
        unint64_t v196 = 0;
      }
      unint64_t v215 = 0;
LABEL_235:
      uint64_t v206 = 0;
      goto LABEL_236;
    }
    if (v257 == 57)
    {
      unint64_t v207 = 0;
      unint64_t v208 = v203;
      goto LABEL_194;
    }
    unint64_t v208 = v203 >> v204;
    unint64_t v215 = __bid_mask256[v256] & v203;
    unint64_t v225 = __bid_half256[v256];
    if (v215 > v225)
    {
LABEL_215:
      unint64_t v207 = 0;
      if (v215 != v225 || v201 || v196 || v192)
      {
        unint64_t v224 = a8;
        uint64_t v206 = 0;
        unint64_t v205 = 0;
        goto LABEL_238;
      }
      unint64_t v211 = (unint64_t *)((char *)&__bid_ten2mxtrunc256 + 32 * v256);
      unint64_t v226 = v211[3];
      if (v189 > v226) {
        goto LABEL_220;
      }
      if (v189 == v226)
      {
        unint64_t v241 = v211[2];
        if (v173 > v241) {
          goto LABEL_220;
        }
        if (v173 == v241)
        {
          unint64_t v242 = v211[1];
          if (v161 <= v242)
          {
            if (v161 == v242)
            {
              unint64_t v192 = 0;
              unint64_t v196 = 0;
              unint64_t v201 = 0;
              unint64_t v207 = 0;
LABEL_313:
              uint64_t v206 = 0;
              goto LABEL_314;
            }
            goto LABEL_305;
          }
LABEL_220:
          unint64_t v192 = 0;
          unint64_t v196 = 0;
          unint64_t v201 = 0;
          unint64_t v207 = 0;
          goto LABEL_221;
        }
      }
LABEL_305:
      unint64_t v192 = 0;
      unint64_t v196 = 0;
      unint64_t v201 = 0;
      unint64_t v207 = 0;
      goto LABEL_318;
    }
    if (v215 == v225)
    {
      if (v201 || v196 || v192 || v189 || v173 || v161 || v178) {
        goto LABEL_215;
      }
      unint64_t v192 = 0;
      unint64_t v196 = 0;
      unint64_t v201 = 0;
    }
    unint64_t v207 = 0;
    goto LABEL_235;
  }
  uint64_t v206 = v203 >> v204;
  unint64_t v207 = (v203 << -(char)v204) | (v201 >> v204);
  unint64_t v208 = (v201 << -(char)v204) | (v196 >> v204);
  v196 &= __bid_mask256[v256];
  unint64_t v216 = __bid_half256[v256];
  if (v196 > v216) {
    goto LABEL_168;
  }
  if (v196 != v216) {
    goto LABEL_191;
  }
  if (!v192 && !v189 && !v173 && !v161 && !v178)
  {
    unint64_t v192 = 0;
LABEL_191:
    unint64_t v201 = 0;
    unint64_t v215 = 0;
LABEL_236:
    unint64_t v205 = 0;
    goto LABEL_237;
  }
LABEL_168:
  unint64_t v201 = 0;
  if (v196 == v216 && !v192)
  {
    unint64_t v211 = (unint64_t *)((char *)&__bid_ten2mxtrunc256 + 32 * v256);
    unint64_t v217 = v211[3];
    if (v189 <= v217)
    {
      if (v189 != v217)
      {
LABEL_310:
        unint64_t v192 = 0;
        unint64_t v201 = 0;
        unint64_t v215 = 0;
LABEL_319:
        unint64_t v205 = 0;
        goto LABEL_239;
      }
      unint64_t v218 = v211[2];
      if (v173 <= v218)
      {
        if (v173 == v218)
        {
          unint64_t v219 = v211[1];
          if (v161 > v219) {
            goto LABEL_175;
          }
          if (v161 == v219)
          {
            unint64_t v192 = 0;
            unint64_t v201 = 0;
            unint64_t v215 = 0;
LABEL_314:
            unint64_t v205 = 0;
            goto LABEL_315;
          }
        }
        goto LABEL_310;
      }
    }
LABEL_175:
    unint64_t v192 = 0;
    unint64_t v201 = 0;
    unint64_t v215 = 0;
LABEL_222:
    unint64_t v205 = 0;
    goto LABEL_223;
  }
  unint64_t v224 = a8;
  unint64_t v215 = 0;
  unint64_t v205 = 0;
LABEL_238:
  *unint64_t v224 = 1;
LABEL_239:
  if (!v215 && !v201 && !v196 && !v192)
  {
    unint64_t v227 = (char *)&__bid_ten2mxtrunc256 + 32 * v209;
    unint64_t v228 = *((void *)v227 + 3);
    if (v189 < v228
      || v189 == v228
      && ((unint64_t v229 = *((void *)v227 + 2), v173 < v229) || v173 == v229 && __PAIR128__(v161, v178) <= *(_OWORD *)v227))
    {
      unint64_t v230 = a7;
      if ((v208 & 1) == 0) {
        unint64_t v230 = a6;
      }
      *unint64_t v230 = 1;
      v208 &= ~1uLL;
      *a8 = 0;
      *a9 = 0;
    }
  }
  unsigned int v231 = a1 - a2;
  if (a1 - (int)a2 <= 19)
  {
    int v232 = 0;
    if (v205 || v206 || v207) {
      goto LABEL_291;
    }
    if (v208 != __bid_ten2k64[v231])
    {
      int v232 = 0;
      unint64_t v205 = 0;
      uint64_t v206 = 0;
      unint64_t v207 = 0;
      goto LABEL_291;
    }
    unint64_t v205 = 0;
    uint64_t v206 = 0;
    unint64_t v207 = 0;
    unint64_t v208 = __bid_ten2k64[(int)v231 - 1];
LABEL_257:
    int v232 = 1;
LABEL_291:
    unint64_t v233 = a4;
    goto LABEL_292;
  }
  if (v231 != 20)
  {
    if (v231 > 0x26)
    {
      uint64_t v236 = v231 - 39;
      if (v231 == 39)
      {
        if (!v205)
        {
          unint64_t v233 = a4;
          if (v206 != 2)
          {
            int v232 = 0;
            unint64_t v205 = 0;
            goto LABEL_292;
          }
          if (v207 != 0xF050FE938943ACC4)
          {
            int v232 = 0;
            unint64_t v205 = 0;
            uint64_t v206 = 2;
            goto LABEL_292;
          }
          if (v208 != 0x5F65568000000000)
          {
            int v232 = 0;
            unint64_t v205 = 0;
            uint64_t v206 = 2;
            unint64_t v207 = 0xF050FE938943ACC4;
            goto LABEL_292;
          }
          unint64_t v205 = 0;
          uint64_t v206 = 0;
          unint64_t v208 = 0x98A224000000000;
          unint64_t v207 = 0x4B3B4CA85A86C47ALL;
          goto LABEL_263;
        }
      }
      else if (v231 > 0x39)
      {
        unint64_t v239 = (void *)((char *)&__bid_ten2k256 + 32 * v236);
        if (v205 == v239[3] && v206 == v239[2] && v207 == v239[1] && v208 == *v239)
        {
          unint64_t v240 = (unint64_t *)((char *)&__bid_ten2k256 + 32 * v231 - 1280);
          unint64_t v208 = *v240;
          unint64_t v207 = v240[1];
          uint64_t v206 = v240[2];
          unint64_t v205 = v240[3];
          goto LABEL_257;
        }
      }
      else if (!v205)
      {
        unint64_t v237 = (void *)((char *)&__bid_ten2k256 + 32 * v236);
        if (v206 != v237[2] || v207 != v237[1] || v208 != *v237)
        {
          int v232 = 0;
          unint64_t v205 = 0;
          goto LABEL_291;
        }
        unint64_t v205 = 0;
        unint64_t v238 = (unint64_t *)((char *)&__bid_ten2k256 + 32 * v231 - 1280);
        unint64_t v208 = *v238;
        unint64_t v207 = v238[1];
        uint64_t v206 = v238[2];
        goto LABEL_257;
      }
    }
    else if (!(v205 | v206))
    {
      unint64_t v234 = &__bid_ten2k128[2 * v231 - 40];
      if (v207 != v234[1] || v208 != *v234)
      {
        int v232 = 0;
        unint64_t v205 = 0;
        uint64_t v206 = 0;
        goto LABEL_291;
      }
      unint64_t v205 = 0;
      uint64_t v206 = 0;
      unint64_t v235 = &__bid_ten2k128[2 * v231 - 42];
      unint64_t v208 = *v235;
      unint64_t v207 = v235[1];
      goto LABEL_257;
    }
LABEL_290:
    int v232 = 0;
    goto LABEL_291;
  }
  if (v205 | v206) {
    goto LABEL_290;
  }
  unint64_t v233 = a4;
  if (v207 != 5)
  {
    int v232 = 0;
    unint64_t v205 = 0;
    uint64_t v206 = 0;
    goto LABEL_292;
  }
  if (v208 != 0x6BC75E2D63100000)
  {
    int v232 = 0;
    unint64_t v205 = 0;
    uint64_t v206 = 0;
    unint64_t v207 = 5;
    goto LABEL_292;
  }
  unint64_t v205 = 0;
  uint64_t v206 = 0;
  unint64_t v207 = 0;
  unint64_t v208 = 0x8AC7230489E80000;
LABEL_263:
  int v232 = 1;
LABEL_292:
  *a5 = v232;
  v233[2] = v206;
  v233[3] = v205;
  *unint64_t v233 = v208;
  v233[1] = v207;
  return result;
}

uint64_t sub_1BDDAF928()
{
  return MEMORY[0x1F40E2E18]();
}

uint64_t sub_1BDDAF938()
{
  return MEMORY[0x1F40E33C8]();
}

uint64_t sub_1BDDAF948()
{
  return MEMORY[0x1F40E33E0]();
}

uint64_t sub_1BDDAF958()
{
  return MEMORY[0x1F40E3428]();
}

uint64_t sub_1BDDAF968()
{
  return MEMORY[0x1F40E3F08]();
}

uint64_t sub_1BDDAF978()
{
  return MEMORY[0x1F40E4538]();
}

uint64_t sub_1BDDAF988()
{
  return MEMORY[0x1F40E4548]();
}

uint64_t sub_1BDDAF998()
{
  return MEMORY[0x1F40E4B88]();
}

uint64_t sub_1BDDAF9A8()
{
  return MEMORY[0x1F40E51A0]();
}

uint64_t sub_1BDDAF9B8()
{
  return MEMORY[0x1F40E5370]();
}

uint64_t sub_1BDDAF9C8()
{
  return MEMORY[0x1F40E5380]();
}

uint64_t sub_1BDDAF9D8()
{
  return MEMORY[0x1F40E53F0]();
}

uint64_t sub_1BDDAF9E8()
{
  return MEMORY[0x1F40E5440]();
}

uint64_t sub_1BDDAF9F8()
{
  return MEMORY[0x1F40E5450]();
}

uint64_t sub_1BDDAFA08()
{
  return MEMORY[0x1F40E5508]();
}

uint64_t sub_1BDDAFA18()
{
  return MEMORY[0x1F40E5640]();
}

uint64_t sub_1BDDAFA28()
{
  return MEMORY[0x1F40E56A0]();
}

uint64_t sub_1BDDAFA38()
{
  return MEMORY[0x1F40E5888]();
}

uint64_t sub_1BDDAFA48()
{
  return MEMORY[0x1F4187530]();
}

uint64_t sub_1BDDAFA58()
{
  return MEMORY[0x1F4187548]();
}

uint64_t sub_1BDDAFA68()
{
  return MEMORY[0x1F4187558]();
}

uint64_t sub_1BDDAFA78()
{
  return MEMORY[0x1F4187560]();
}

uint64_t sub_1BDDAFA88()
{
  return MEMORY[0x1F4187570]();
}

uint64_t sub_1BDDAFA98()
{
  return MEMORY[0x1F4187580]();
}

uint64_t sub_1BDDAFAA8()
{
  return MEMORY[0x1F4186CB8]();
}

uint64_t sub_1BDDAFAB8()
{
  return MEMORY[0x1F4186D00]();
}

uint64_t sub_1BDDAFAC8()
{
  return MEMORY[0x1F4186D68]();
}

uint64_t sub_1BDDAFAD8()
{
  return MEMORY[0x1F415C838]();
}

uint64_t sub_1BDDAFAE8()
{
  return MEMORY[0x1F415C840]();
}

uint64_t sub_1BDDAFAF8()
{
  return MEMORY[0x1F415C848]();
}

uint64_t sub_1BDDAFB08()
{
  return MEMORY[0x1F415C850]();
}

uint64_t sub_1BDDAFB18()
{
  return MEMORY[0x1F415C858]();
}

uint64_t sub_1BDDAFB28()
{
  return MEMORY[0x1F415C860]();
}

uint64_t sub_1BDDAFB38()
{
  return MEMORY[0x1F415C868]();
}

uint64_t sub_1BDDAFB48()
{
  return MEMORY[0x1F415C870]();
}

uint64_t sub_1BDDAFB58()
{
  return MEMORY[0x1F415C878]();
}

uint64_t sub_1BDDAFB68()
{
  return MEMORY[0x1F415C880]();
}

uint64_t sub_1BDDAFB98()
{
  return MEMORY[0x1F415C898]();
}

uint64_t sub_1BDDAFBA8()
{
  return MEMORY[0x1F415C8A0]();
}

uint64_t sub_1BDDAFBB8()
{
  return MEMORY[0x1F415C8A8]();
}

uint64_t sub_1BDDAFBC8()
{
  return MEMORY[0x1F415C8B0]();
}

uint64_t sub_1BDDAFBD8()
{
  return MEMORY[0x1F415C8B8]();
}

uint64_t sub_1BDDAFBE8()
{
  return MEMORY[0x1F415C8C0]();
}

uint64_t sub_1BDDAFBF8()
{
  return MEMORY[0x1F415C8C8]();
}

uint64_t sub_1BDDAFC08()
{
  return MEMORY[0x1F415C8D0]();
}

uint64_t sub_1BDDAFC18()
{
  return MEMORY[0x1F415C8D8]();
}

uint64_t sub_1BDDAFC28()
{
  return MEMORY[0x1F415C8E0]();
}

uint64_t sub_1BDDAFC38()
{
  return MEMORY[0x1F415C8E8]();
}

uint64_t sub_1BDDAFC48()
{
  return MEMORY[0x1F415C8F0]();
}

uint64_t sub_1BDDAFC58()
{
  return MEMORY[0x1F415C8F8]();
}

uint64_t sub_1BDDAFC68()
{
  return MEMORY[0x1F40E5FF8]();
}

uint64_t sub_1BDDAFC78()
{
  return MEMORY[0x1F40E6028]();
}

uint64_t sub_1BDDAFC88()
{
  return MEMORY[0x1F4183320]();
}

uint64_t sub_1BDDAFC98()
{
  return MEMORY[0x1F4183358]();
}

uint64_t sub_1BDDAFCA8()
{
  return MEMORY[0x1F4183398]();
}

uint64_t sub_1BDDAFCB8()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t sub_1BDDAFCC8()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t sub_1BDDAFCD8()
{
  return MEMORY[0x1F4183500]();
}

uint64_t sub_1BDDAFCE8()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1BDDAFCF8()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1BDDAFD08()
{
  return MEMORY[0x1F4183710]();
}

uint64_t sub_1BDDAFD18()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1BDDAFD28()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1BDDAFD38()
{
  return MEMORY[0x1F40E6198]();
}

uint64_t sub_1BDDAFD48()
{
  return MEMORY[0x1F40E61B0]();
}

uint64_t sub_1BDDAFD58()
{
  return MEMORY[0x1F40E61C0]();
}

uint64_t sub_1BDDAFD68()
{
  return MEMORY[0x1F40E61D0]();
}

uint64_t sub_1BDDAFD78()
{
  return MEMORY[0x1F4183898]();
}

uint64_t sub_1BDDAFD88()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1BDDAFD98()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1BDDAFDA8()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_1BDDAFDB8()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1BDDAFDC8()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_1BDDAFDD8()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_1BDDAFDE8()
{
  return MEMORY[0x1F4183A00]();
}

uint64_t sub_1BDDAFDF8()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t sub_1BDDAFE08()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t sub_1BDDAFE18()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1BDDAFE28()
{
  return MEMORY[0x1F4183A50]();
}

uint64_t sub_1BDDAFE38()
{
  return MEMORY[0x1F4183A58]();
}

uint64_t sub_1BDDAFE48()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1BDDAFE58()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1BDDAFE68()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1BDDAFE88()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1BDDAFE98()
{
  return MEMORY[0x1F4183AC8]();
}

uint64_t sub_1BDDAFEA8()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1BDDAFEB8()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_1BDDAFEC8()
{
  return MEMORY[0x1F4183B38]();
}

uint64_t sub_1BDDAFED8()
{
  return MEMORY[0x1F4183B50]();
}

uint64_t sub_1BDDAFEE8()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_1BDDAFEF8()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_1BDDAFF08()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1BDDAFF18()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_1BDDAFF28()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t sub_1BDDAFF38()
{
  return MEMORY[0x1F4183C38]();
}

uint64_t sub_1BDDAFF48()
{
  return MEMORY[0x1F4183C40]();
}

uint64_t sub_1BDDAFF58()
{
  return MEMORY[0x1F4183C50]();
}

uint64_t sub_1BDDAFF68()
{
  return MEMORY[0x1F4183C90]();
}

uint64_t sub_1BDDAFF78()
{
  return MEMORY[0x1F4183CC0]();
}

uint64_t sub_1BDDAFF88()
{
  return MEMORY[0x1F4183CC8]();
}

uint64_t sub_1BDDAFF98()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t sub_1BDDAFFA8()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1BDDAFFB8()
{
  return MEMORY[0x1F40E6340]();
}

uint64_t sub_1BDDAFFC8()
{
  return MEMORY[0x1F40E6368]();
}

uint64_t sub_1BDDAFFD8()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1BDDAFFE8()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t sub_1BDDAFFF8()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t sub_1BDDB0008()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1BDDB0018()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t sub_1BDDB0028()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1BDDB0038()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t sub_1BDDB0048()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1BDDB0058()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t sub_1BDDB0068()
{
  return MEMORY[0x1F4183F80]();
}

uint64_t sub_1BDDB0078()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1BDDB0088()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1BDDB0098()
{
  return MEMORY[0x1F4187C98]();
}

uint64_t sub_1BDDB00A8()
{
  return MEMORY[0x1F4187CA0]();
}

uint64_t sub_1BDDB00B8()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_1BDDB00C8()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_1BDDB00D8()
{
  return MEMORY[0x1F41840C0]();
}

uint64_t sub_1BDDB00E8()
{
  return MEMORY[0x1F40E6460]();
}

uint64_t sub_1BDDB00F8()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1BDDB0108()
{
  return MEMORY[0x1F4184198]();
}

uint64_t sub_1BDDB0118()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t sub_1BDDB0128()
{
  return MEMORY[0x1F4184230]();
}

uint64_t sub_1BDDB0138()
{
  return MEMORY[0x1F4184250]();
}

uint64_t sub_1BDDB0148()
{
  return MEMORY[0x1F41843B8]();
}

uint64_t sub_1BDDB0158()
{
  return MEMORY[0x1F4186FE0]();
}

uint64_t sub_1BDDB0168()
{
  return MEMORY[0x1F41870A8]();
}

uint64_t sub_1BDDB0178()
{
  return MEMORY[0x1F41870B0]();
}

uint64_t sub_1BDDB0188()
{
  return MEMORY[0x1F41870E8]();
}

uint64_t sub_1BDDB0198()
{
  return MEMORY[0x1F41870F8]();
}

uint64_t sub_1BDDB01A8()
{
  return MEMORY[0x1F4187280]();
}

uint64_t sub_1BDDB01B8()
{
  return MEMORY[0x1F4187290]();
}

uint64_t sub_1BDDB01C8()
{
  return MEMORY[0x1F40E6900]();
}

uint64_t sub_1BDDB01D8()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1BDDB01E8()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_1BDDB01F8()
{
  return MEMORY[0x1F40E6BB8]();
}

uint64_t sub_1BDDB0208()
{
  return MEMORY[0x1F40E6C88]();
}

uint64_t sub_1BDDB0218()
{
  return MEMORY[0x1F40E6CA8]();
}

uint64_t sub_1BDDB0228()
{
  return MEMORY[0x1F40E6D80]();
}

uint64_t sub_1BDDB0238()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1BDDB0248()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1BDDB0258()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1BDDB0268()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t sub_1BDDB0278()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t sub_1BDDB0288()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t sub_1BDDB0298()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t sub_1BDDB02A8()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t sub_1BDDB02B8()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t sub_1BDDB02C8()
{
  return MEMORY[0x1F4184C18]();
}

uint64_t sub_1BDDB02D8()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t sub_1BDDB02E8()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1BDDB02F8()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1BDDB0308()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t sub_1BDDB0318()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_1BDDB0328()
{
  return MEMORY[0x1F4184CB0]();
}

uint64_t sub_1BDDB0348()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_1BDDB0358()
{
  return MEMORY[0x1F4184D10]();
}

uint64_t sub_1BDDB0368()
{
  return MEMORY[0x1F4184D18]();
}

uint64_t sub_1BDDB0378()
{
  return MEMORY[0x1F4184D60]();
}

uint64_t sub_1BDDB0388()
{
  return MEMORY[0x1F4184D70]();
}

uint64_t sub_1BDDB0398()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t sub_1BDDB03A8()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1BDDB03B8()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_1BDDB03C8()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1BDDB03D8()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_1BDDB03E8()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1BDDB03F8()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1BDDB0408()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1BDDB0418()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1BDDB0428()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1BDDB0438()
{
  return MEMORY[0x1F4185340]();
}

uint64_t sub_1BDDB0448()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1BDDB0458()
{
  return MEMORY[0x1F4185358]();
}

uint64_t sub_1BDDB0468()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1BDDB0478()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1BDDB0488()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1BDDB04A8()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1BDDB04B8()
{
  return MEMORY[0x1F4185748]();
}

uint64_t sub_1BDDB04C8()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1BDDB04E8()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1BDDB04F8()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1BDDB0508()
{
  return MEMORY[0x1F4185D90]();
}

uint64_t sub_1BDDB0518()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1BDDB0528()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1BDDB0538()
{
  return MEMORY[0x1F4185E78]();
}

uint64_t sub_1BDDB0548()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_1BDDB0558()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1BDDB0568()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1BDDB0578()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1BDDB0588()
{
  return MEMORY[0x1F41861A8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void NSLog(NSString *format, ...)
{
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

long double acosh(long double __x)
{
  MEMORY[0x1F40CA348](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double asinh(long double __x)
{
  MEMORY[0x1F40CA3E0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atanh(long double __x)
{
  MEMORY[0x1F40CA478](__x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

long double cbrt(long double __x)
{
  MEMORY[0x1F40CA688](__x);
  return result;
}

void clearerr(FILE *a1)
{
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

long double cosh(long double __x)
{
  MEMORY[0x1F40CB8B8](__x);
  return result;
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

long double erf(long double __x)
{
  MEMORY[0x1F40CBF50](__x);
  return result;
}

long double erfc(long double __x)
{
  MEMORY[0x1F40CBF58](__x);
  return result;
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getc(FILE *a1)
{
  return MEMORY[0x1F40CC388](a1);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

double j0(double a1)
{
  MEMORY[0x1F40CC6D8](a1);
  return result;
}

double j1(double a1)
{
  MEMORY[0x1F40CC6E0](a1);
  return result;
}

long double lgamma(long double __x)
{
  MEMORY[0x1F40CC820](__x);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int raise(int a1)
{
  return MEMORY[0x1F40CDC00](*(void *)&a1);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x1F40CDD00](__x, __y);
  return result;
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x1F40CE068](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

long double strtold(const char *a1, char **a2)
{
  MEMORY[0x1F40CE2B0](a1, a2);
  return result;
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1F4186618]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

long double tanh(long double __x)
{
  MEMORY[0x1F40CE430](__x);
  return result;
}

long double tgamma(long double __x)
{
  MEMORY[0x1F40CE508](__x);
  return result;
}

char *__cdecl u_austrcpy(char *dst, const UChar *src)
{
  return (char *)MEMORY[0x1F417F6F0](dst, src);
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x1F417F6F8](*(void *)&c);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x1F417F7C8](*(void *)&c);
}

UChar *__cdecl u_uastrncpy(UChar *dst, const char *src, int32_t n)
{
  return (UChar *)MEMORY[0x1F417F8C8](dst, src, *(void *)&n);
}

uint64_t unum_close()
{
  return MEMORY[0x1F4180290]();
}

uint64_t unum_formatDoubleCurrency()
{
  return MEMORY[0x1F41802B0]();
}

uint64_t unum_open()
{
  return MEMORY[0x1F41802F0]();
}

double y0(double a1)
{
  MEMORY[0x1F40CF378](a1);
  return result;
}

double y1(double a1)
{
  MEMORY[0x1F40CF380](a1);
  return result;
}